
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fa4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08014164  08014164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144c4  080144c4  00016088  2**0
                  CONTENTS
  4 .ARM          00000008  080144c4  080144c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144cc  080144cc  00016088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144cc  080144cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080144d0  080144d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080144d4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016088  2**0
                  CONTENTS
 10 .bss          000010d0  20000088  20000088  00016088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001158  20001158  00016088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000423b5  00000000  00000000  000160b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007be4  00000000  00000000  0005846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bb8  00000000  00000000  00060058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021b8  00000000  00000000  00062c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000391e9  00000000  00000000  00064dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b5ea  00000000  00000000  0009dfb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012de80  00000000  00000000  000d959b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0020741b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d948  00000000  00000000  00207460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00214da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801414c 	.word	0x0801414c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0801414c 	.word	0x0801414c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_ZNK3VMB9FAT32File6isOpenEv>:

		unsigned int write(const char* text) override;
		unsigned int read(char* buffer, unsigned int length) override;
		bool seek(unsigned int position) override;
		unsigned int getSize() const override;
		bool isOpen() const override { return m_isOpen; }
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_ZN3VMB5IFileC1Ev>:

#include <string>

namespace VMB
{
	class IFile
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <_ZN3VMB5IFileC1Ev+0x1c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	0801434c 	.word	0x0801434c

080005f4 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <_ZN3VMB5IFileD1Ev+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	0801434c 	.word	0x0801434c

08000614 <_ZN3VMB5IFileD0Ev>:
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffe9 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 8000622:	2104      	movs	r1, #4
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f012 fbb7 	bl	8012d98 <_ZdlPvj>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN3VMB9FAT32FileC1Ev>:
{
	bool FAT32File::s_isMounted = false;
	FATFS FAT32File::s_SDFatFS;
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    	: m_fileHandle{ 0 }
		, m_isOpen(false)
		, m_currentMode(FA_READ)
		, m_path("")
		, m_lastError(FRESULT::FR_OK)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffc8 	bl	80005d4 <_ZN3VMB5IFileC1Ev>
 8000644:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <_ZN3VMB9FAT32FileC1Ev+0xa4>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
    	: m_fileHandle{ 0 }
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3304      	adds	r3, #4
 800064e:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f013 f851 	bl	80136fc <memset>
		, m_isOpen(false)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		, m_currentMode(FA_READ)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
		, m_path("")
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 740f 	add.w	r4, r3, #572	@ 0x23c
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4618      	mov	r0, r3
 8000676:	f012 fba2 	bl	8012dbe <_ZNSaIcEC1Ev>
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	461a      	mov	r2, r3
 8000680:	4916      	ldr	r1, [pc, #88]	@ (80006dc <_ZN3VMB9FAT32FileC1Ev+0xa8>)
 8000682:	4620      	mov	r0, r4
 8000684:	f012 fd2e 	bl	80130e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4618      	mov	r0, r3
 800068e:	f012 fb97 	bl	8012dc0 <_ZNSaIcED1Ev>
		, m_lastError(FRESULT::FR_OK)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
	{
		if(!s_isMounted)
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d011      	beq.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
		{
			m_lastError =  f_mount(&s_SDFatFS, (TCHAR const*)SDPath, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	490e      	ldr	r1, [pc, #56]	@ (80006e4 <_ZN3VMB9FAT32FileC1Ev+0xb0>)
 80006ac:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <_ZN3VMB9FAT32FileC1Ev+0xb4>)
 80006ae:	f010 fdf5 	bl	801129c <f_mount>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
			if(m_lastError == FRESULT::FR_OK)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
				s_isMounted = true;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			else
			{
				// Can't mount device
			}
		}
	}
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	08014318 	.word	0x08014318
 80006dc:	08014164 	.word	0x08014164
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	2000080c 	.word	0x2000080c
 80006e8:	200000a8 	.word	0x200000a8

080006ec <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <_ZN3VMB9FAT32FileD1Ev+0x2c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	{

	}
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000700:	4618      	mov	r0, r3
 8000702:	f012 fbf6 	bl	8012ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff73 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08014318 	.word	0x08014318

0800071c <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	}
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ffe1 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 800072a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f012 fb32 	bl	8012d98 <_ZdlPvj>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>:

	bool FAT32File::open(const char* path, AccessMode mode)
	{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
		if(m_isOpen)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x1a>
		{
			// Already open
			return false;
 8000754:	2300      	movs	r3, #0
 8000756:	e02b      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
		}
		switch(mode)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d01d      	beq.n	800079a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x5c>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc24      	bgt.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x34>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00a      	beq.n	8000786 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x48>
 8000770:	e01d      	b.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
		{
			case AccessMode::read:
			{
				return open(path, FA_READ);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	330c      	adds	r3, #12
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	4798      	blx	r3
 8000782:	4603      	mov	r3, r0
 8000784:	e014      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::write:
			{
				return open(path, FA_WRITE | FA_CREATE_ALWAYS);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	330c      	adds	r3, #12
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	220a      	movs	r2, #10
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	4798      	blx	r3
 8000796:	4603      	mov	r3, r0
 8000798:	e00a      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::append:
			{
				return open(path, FA_OPEN_APPEND | FA_WRITE);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	330c      	adds	r3, #12
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2232      	movs	r2, #50	@ 0x32
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	4798      	blx	r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	e000      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}

			default:
			{
				// Unknown mode
				return false;
 80007ae:	2300      	movs	r3, #0
			}
		}
		return false;
	}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN3VMB9FAT32File4openEPKci>:
	bool FAT32File::open(const char* path, int fa_mode)
	{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
		if (m_isOpen)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZN3VMB9FAT32File4openEPKci+0x1a>
		{
			// Already open
			return false;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e027      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_lastError = f_open(&m_fileHandle, path, fa_mode);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3304      	adds	r3, #4
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	4618      	mov	r0, r3
 80007de:	f010 fda3 	bl	8011328 <f_open>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		if (m_lastError == FR_OK) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d110      	bne.n	8000818 <_ZN3VMB9FAT32File4openEPKci+0x60>
			m_isOpen = true;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
			m_path = path;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4618      	mov	r0, r3
 8000808:	f012 fc4b 	bl	80130a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			m_currentMode = fa_mode;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
			return true;
 8000814:	2301      	movs	r3, #1
 8000816:	e004      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_isOpen = false;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		return false;
 8000820:	2300      	movs	r3, #0
	}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
		if (!m_isOpen)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000838:	f083 0301 	eor.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZN3VMB9FAT32File5closeEv+0x1c>
		{
			// File is not open
			return false;
 8000842:	2300      	movs	r3, #0
 8000844:	e01b      	b.n	800087e <_ZN3VMB9FAT32File5closeEv+0x54>
		}
		m_path.clear();
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 800084c:	4618      	mov	r0, r3
 800084e:	f012 fb97 	bl	8012f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		m_isOpen = false;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		m_lastError = f_close(&m_fileHandle);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f011 fa4e 	bl	8011d00 <f_close>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FRESULT::FR_OK;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
	}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <_ZN3VMB9FAT32File5writeEPKc+0x1e>
 80008a0:	2300      	movs	r3, #0
 80008a2:	e011      	b.n	80008c8 <_ZN3VMB9FAT32File5writeEPKc+0x42>
		UINT written;
		m_lastError = f_write(&m_fileHandle, text, strlen(text), &written);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1d1c      	adds	r4, r3, #4
 80008a8:	6838      	ldr	r0, [r7, #0]
 80008aa:	f7ff fcf9 	bl	80002a0 <strlen>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	4620      	mov	r0, r4
 80008b8:	f011 f82f 	bl	801191a <f_write>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return written;
 80008c6:	68fb      	ldr	r3, [r7, #12]
	}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <_ZN3VMB9FAT32File4readEPcj>:
	unsigned int FAT32File::read(char* buffer, unsigned int length) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
		if (!m_isOpen) return 0;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80008e2:	f083 0301 	eor.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZN3VMB9FAT32File4readEPcj+0x20>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e00d      	b.n	800090c <_ZN3VMB9FAT32File4readEPcj+0x3c>
		UINT bytesRead;
		m_lastError = f_read(&m_fileHandle, buffer, length, &bytesRead);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1d18      	adds	r0, r3, #4
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f010 fece 	bl	801169c <f_read>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return bytesRead;
 800090a:	697b      	ldr	r3, [r7, #20]
	}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_ZN3VMB9FAT32File4seekEj>:
	bool FAT32File::seek(unsigned int position) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return false;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZN3VMB9FAT32File4seekEj+0x1e>
 800092e:	2300      	movs	r3, #0
 8000930:	e012      	b.n	8000958 <_ZN3VMB9FAT32File4seekEj+0x44>
		m_lastError = f_lseek(&m_fileHandle, position);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	6839      	ldr	r1, [r7, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f011 fa0b 	bl	8011d54 <f_lseek>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
	}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZNK3VMB9FAT32File7getSizeEv>:

	unsigned int FAT32File::getSize() const {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_ZNK3VMB9FAT32File7getSizeEv+0x1c>
 8000978:	2300      	movs	r3, #0
 800097a:	e001      	b.n	8000980 <_ZNK3VMB9FAT32File7getSizeEv+0x20>
		return f_size(&m_fileHandle);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
	}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN3VMB9FAT32File5flushEv>:
	bool FAT32File::flush() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return false;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZN3VMB9FAT32File5flushEv+0x1c>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e011      	b.n	80009cc <_ZN3VMB9FAT32File5flushEv+0x40>
		m_lastError = f_sync(&m_fileHandle);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f011 f929 	bl	8011c04 <f_sync>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
	}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZN3VMB9FAT32File6removeEPKc>:

	bool FAT32File::remove(const char* path) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
		return f_unlink(path) == FR_OK;
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f011 fcd1 	bl	8012384 <f_unlink>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
	}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>:

	bool FAT32File::rename(const char* oldPath, const char* newPath) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
		return f_rename(oldPath, newPath) == FR_OK;
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f011 fd69 	bl	80124da <f_rename>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
	}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN3VMB9FAT32File6existsEPKc>:

	bool FAT32File::exists(const char* path) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
		FILINFO fileInfo;
		return f_stat(path, &fileInfo) == FR_OK;
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f011 fc71 	bl	8012312 <f_stat>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
	}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f84d 	bl	8000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffeb 	bl	8000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>:

	std::vector<std::string> FAT32File::listDirectory(const char* path) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
		std::vector<std::string> files;
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffeb 	bl	8000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
		DIR dir;
		FILINFO fileInfo;
		if (f_opendir(&dir, path) == FR_OK) {
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f011 fb69 	bl	8012166 <f_opendir>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01f      	beq.n	8000ae4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x6c>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000aa4:	e006      	b.n	8000ab4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x3c>
				files.emplace_back(fileInfo.fname);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	3309      	adds	r3, #9
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f82d 	bl	8000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000ab4:	f107 0208 	add.w	r2, r7, #8
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f011 fbea 	bl	8012298 <f_readdir>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000aca:	7c7b      	ldrb	r3, [r7, #17]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5e>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x2e>
			}
			f_closedir(&dir);
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f011 fbb4 	bl	801224c <f_closedir>
		}
		return files;
 8000ae4:	bf00      	nop
	}
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	3750      	adds	r7, #80	@ 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f838 	bl	8000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f840 	bl	8000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000b0e:	b5b0      	push	{r4, r5, r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d012      	beq.n	8000b4a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000b24:	687c      	ldr	r4, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685d      	ldr	r5, [r3, #4]
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f000 f86a 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4629      	mov	r1, r5
 8000b36:	4620      	mov	r0, r4
 8000b38:	f000 f86f 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f103 0218 	add.w	r2, r3, #24
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000b48:	e00c      	b.n	8000b64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f878 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8000b50:	4604      	mov	r4, r0
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f000 f856 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f896 	bl	8000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}

08000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f953 	bl	8000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
	{ }
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	if (__p)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f936 	bl	8000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f92c 	bl	8000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffec 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f000 f91b 	bl	8000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>
	}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1d1a      	adds	r2, r3, #4
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f930 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f805 	bl	8000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000c6e:	4603      	mov	r3, r0
      }
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000c80:	2301      	movs	r3, #1
      }
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8000e18 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f919 	bl	8000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8000ca6:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f956 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	f107 0214 	add.w	r2, r7, #20
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f95d 	bl	8000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f970 	bl	8000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8000cdc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000ce2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	189d      	adds	r5, r3, r2
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff85 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff ff8a 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000d0a:	f7ff ffaa 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d027      	beq.n	8000d64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f977 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff54 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4621      	mov	r1, r4
 8000d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d32:	f000 f957 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f962 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff3f 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 f942 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000d62:	e026      	b.n	8000db2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f94f 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff2c 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d7a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4621      	mov	r1, r4
 8000d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d82:	f000 f94e 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000d86:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	3318      	adds	r3, #24
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff17 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000da4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	4620      	mov	r0, r4
 8000dac:	f000 f939 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000db0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000db2:	f7ff ff56 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff04 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6a39      	ldr	r1, [r7, #32]
 8000dd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dd2:	f7ff ff09 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000dd6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	10db      	asrs	r3, r3, #3
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000de8:	461a      	mov	r2, r3
 8000dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dec:	f7ff fede 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dfa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	461a      	mov	r2, r3
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	609a      	str	r2, [r3, #8]
    }
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	@ 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	08014168 	.word	0x08014168
 8000e1c:	aaaaaaab 	.word	0xaaaaaaab

08000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f911 	bl	800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f917 	bl	8001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000e6e:	b5b0      	push	{r4, r5, r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2018      	movs	r0, #24
 8000e80:	f7ff fb8e 	bl	80005a0 <_ZnwjPv>
 8000e84:	4604      	mov	r4, r0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff febc 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f011 ff93 	bl	8012dbe <_ZNSaIcEC1Ev>
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f012 f91f 	bl	80130e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f011 ff88 	bl	8012dc0 <_ZNSaIcED1Ev>
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}

08000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f8ee 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000eea:	4604      	mov	r4, r0
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8fb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	1ae2      	subs	r2, r4, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	bf34      	ite	cc
 8000efc:	2301      	movcc	r3, #1
 8000efe:	2300      	movcs	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f011 ff64 	bl	8012dd4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f8eb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f12:	4604      	mov	r4, r0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f8e7 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f8f3 	bl	8001114 <_ZSt3maxIjERKT_S2_S2_>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4423      	add	r3, r4
 8000f34:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f000 f8d6 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d306      	bcc.n	8000f52 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f8be 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d904      	bls.n	8000f5c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f8b7 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	e000      	b.n	8000f5e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8000f5c:	697b      	ldr	r3, [r7, #20]
      }
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff9e 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f83a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f000 f835 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1ae3      	subs	r3, r4, r3
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	aaaaaaab 	.word	0xaaaaaaab

08000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f8b3 	bl	800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e000      	b.n	8000fdc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8000fda:	2300      	movs	r3, #0
      }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000ff2:	f88d 4000 	strb.w	r4, [sp]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 f8ac 	bl	800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 8001002:	4603      	mov	r3, r0
      }
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f8a4 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8001036:	4604      	mov	r4, r0
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f8a0 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800103e:	4601      	mov	r1, r0
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4620      	mov	r0, r4
 8001046:	f000 f8a9 	bl	800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800104a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f8ac 	bl	80011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>
	}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4619      	mov	r1, r3
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f011 fe86 	bl	8012d98 <_ZdlPvj>
      }
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800109e:	e009      	b.n	80010b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f898 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f89f 	bl	80011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3318      	adds	r3, #24
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1f1      	bne.n	80010a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f8b3 	bl	800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f893 	bl	8001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	10db      	asrs	r3, r3, #3
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	aaaaaaab 	.word	0xaaaaaaab

08001114 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d201      	bcs.n	800112e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	e000      	b.n	8001130 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800112e:	687b      	ldr	r3, [r7, #4]
    }
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001146:	2200      	movs	r2, #0
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f882 	bl	8001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f89e 	bl	80012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001174:	4603      	mov	r3, r0
      }
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f8ac 	bl	80012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f8ad 	bl	800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 80011b4:	4603      	mov	r3, r0
    }
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f011 fe92 	bl	8012ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f011 fe7c 	bl	8012ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 800120e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f890 	bl	8001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8001216:	4603      	mov	r3, r0
 8001218:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f892 	bl	800134e <_ZSt3minIjERKT_S2_S2_>
 800122a:	4603      	mov	r3, r0
 800122c:	681b      	ldr	r3, [r3, #0]
      }
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	05555555 	.word	0x05555555

0800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f889 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001266:	4602      	mov	r2, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4293      	cmp	r3, r2
 800126c:	bf8c      	ite	hi
 800126e:	2301      	movhi	r3, #1
 8001270:	2300      	movls	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x58>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800128a:	f011 fd9d 	bl	8012dc8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800128e:	f011 fd98 	bl	8012dc2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	f011 fd7d 	bl	8012d9c <_Znwj>
 80012a2:	4603      	mov	r3, r0
      }
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0aaaaaaa 	.word	0x0aaaaaaa

080012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f868 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012c4:	4604      	mov	r4, r0
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f000 f864 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f860 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012d4:	4602      	mov	r2, r0
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 f865 	bl	80013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80012e0:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}

080012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80012f4:	463b      	mov	r3, r7
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f87d 	bl	80013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 80012fc:	4603      	mov	r3, r0
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800131e:	2300      	movs	r3, #0
 8001320:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f870 	bl	800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800132c:	4603      	mov	r3, r0
    }
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f874 	bl	800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001344:	4603      	mov	r3, r0
      }
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	e000      	b.n	800136a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001368:	687b      	ldr	r3, [r7, #4]
    }
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	05555555 	.word	0x05555555

08001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80013aa:	b590      	push	{r4, r7, lr}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80013bc:	e012      	b.n	80013e4 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff09 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013c4:	4604      	mov	r4, r0
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff ff05 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013cc:	4603      	mov	r3, r0
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4620      	mov	r0, r4
 80013d4:	f000 f836 	bl	8001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3318      	adds	r3, #24
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3318      	adds	r3, #24
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1e8      	bne.n	80013be <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x14>
      return __cur;
 80013ec:	697b      	ldr	r3, [r7, #20]
    }
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f82c 	bl	800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff9f 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 f841 	bl	80014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f846 	bl	80014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff feb7 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fdf1 	bl	8001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800148a:	e015      	b.n	80014b8 <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff fea2 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001492:	4604      	mov	r4, r0
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f85d 	bl	8001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 f864 	bl	8001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f842 	bl	8001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3318      	adds	r3, #24
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f826 	bl	8001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1de      	bne.n	800148c <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x12>
	  return __cur;
 80014ce:	697b      	ldr	r3, [r7, #20]
    }
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f84f 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f854 	bl	80015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>
	}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f85f 	bl	80015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8001526:	4603      	mov	r3, r0
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f103 0218 	add.w	r2, r3, #24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
	return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
      }
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4619      	mov	r1, r3
 800157e:	2018      	movs	r0, #24
 8001580:	f7ff f80e 	bl	80005a0 <_ZnwjPv>
 8001584:	4604      	mov	r4, r0
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f000 f809 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f011 fc8f 	bl	8012eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4619      	mov	r1, r3
 80015c4:	2018      	movs	r0, #24
 80015c6:	f7fe ffeb 	bl	80005a0 <_ZnwjPv>
 80015ca:	4604      	mov	r4, r0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe6 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4620      	mov	r0, r4
 80015d8:	f011 fc6c 	bl	8012eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f80e 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015f4:	4604      	mov	r4, r0
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f000 f80a 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	429c      	cmp	r4, r3
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}

08001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f90e 	bl	8001852 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <setup>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "FAT32File.hpp"

void setup()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001646:	af00      	add	r7, sp, #0
		file.close();
	}

	*/
	using namespace VMB;
    FAT32File file;
 8001648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fff1 	bl	8000634 <_ZN3VMB9FAT32FileC1Ev>

    // Open a file for writing
    if (file.open("test.txt", FA_WRITE | FA_CREATE_ALWAYS)) {
 8001652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001656:	220a      	movs	r2, #10
 8001658:	4960      	ldr	r1, [pc, #384]	@ (80017dc <setup+0x19c>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f8ac 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <setup+0x4e>
        printf("File opened for writing\n");
 8001666:	485e      	ldr	r0, [pc, #376]	@ (80017e0 <setup+0x1a0>)
 8001668:	f011 ff4e 	bl	8013508 <puts>
        file.write("Hello, FATFS!");
 800166c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001670:	495c      	ldr	r1, [pc, #368]	@ (80017e4 <setup+0x1a4>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f907 	bl	8000886 <_ZN3VMB9FAT32File5writeEPKc>
        file.flush();
 8001678:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff f985 	bl	800098c <_ZN3VMB9FAT32File5flushEv>
        file.close();
 8001682:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f8cf 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
 800168c:	e002      	b.n	8001694 <setup+0x54>
    }
    else {
        printf("Failed to open file for writing\n");
 800168e:	4856      	ldr	r0, [pc, #344]	@ (80017e8 <setup+0x1a8>)
 8001690:	f011 ff3a 	bl	8013508 <puts>
    }

    // Open the same file for reading
    if (file.open("test.txt", FA_READ)) {
 8001694:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001698:	2201      	movs	r2, #1
 800169a:	4950      	ldr	r1, [pc, #320]	@ (80017dc <setup+0x19c>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff f88b 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01f      	beq.n	80016e8 <setup+0xa8>
        char buffer[20] = { 0 };
 80016a8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80016ac:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
        file.read(buffer, sizeof(buffer) - 1);
 80016c0:	f107 0108 	add.w	r1, r7, #8
 80016c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c8:	2213      	movs	r2, #19
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f900 	bl	80008d0 <_ZN3VMB9FAT32File4readEPcj>
        printf("Read from file: %s\n", buffer);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	4845      	ldr	r0, [pc, #276]	@ (80017ec <setup+0x1ac>)
 80016d8:	f011 feae 	bl	8013438 <iprintf>
        file.close();
 80016dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f8a2 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
 80016e6:	e002      	b.n	80016ee <setup+0xae>
    }
    else {
        printf("Failed to open file for reading\n");
 80016e8:	4841      	ldr	r0, [pc, #260]	@ (80017f0 <setup+0x1b0>)
 80016ea:	f011 ff0d 	bl	8013508 <puts>
    }

    // Check if file exists
    if (FAT32File::exists("test.txt")) {
 80016ee:	483b      	ldr	r0, [pc, #236]	@ (80017dc <setup+0x19c>)
 80016f0:	f7ff f994 	bl	8000a1c <_ZN3VMB9FAT32File6existsEPKc>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <setup+0xc2>
        printf("File exists!\n");
 80016fa:	483e      	ldr	r0, [pc, #248]	@ (80017f4 <setup+0x1b4>)
 80016fc:	f011 ff04 	bl	8013508 <puts>
 8001700:	e002      	b.n	8001708 <setup+0xc8>
    }
    else {
        printf("File does not exist\n");
 8001702:	483d      	ldr	r0, [pc, #244]	@ (80017f8 <setup+0x1b8>)
 8001704:	f011 ff00 	bl	8013508 <puts>
    }

    // Rename the file
    if (FAT32File::rename("test.txt", "renamed.txt")) {
 8001708:	493c      	ldr	r1, [pc, #240]	@ (80017fc <setup+0x1bc>)
 800170a:	4834      	ldr	r0, [pc, #208]	@ (80017dc <setup+0x19c>)
 800170c:	f7ff f973 	bl	80009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <setup+0xde>
        printf("File renamed successfully\n");
 8001716:	483a      	ldr	r0, [pc, #232]	@ (8001800 <setup+0x1c0>)
 8001718:	f011 fef6 	bl	8013508 <puts>
 800171c:	e002      	b.n	8001724 <setup+0xe4>
    }
    else {
        printf("Failed to rename file\n");
 800171e:	4839      	ldr	r0, [pc, #228]	@ (8001804 <setup+0x1c4>)
 8001720:	f011 fef2 	bl	8013508 <puts>
    }

    // Delete the file
    if (FAT32File::remove("renamed.txt")) {
 8001724:	4835      	ldr	r0, [pc, #212]	@ (80017fc <setup+0x1bc>)
 8001726:	f7ff f955 	bl	80009d4 <_ZN3VMB9FAT32File6removeEPKc>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <setup+0xf8>
        printf("File deleted successfully\n");
 8001730:	4835      	ldr	r0, [pc, #212]	@ (8001808 <setup+0x1c8>)
 8001732:	f011 fee9 	bl	8013508 <puts>
 8001736:	e002      	b.n	800173e <setup+0xfe>
    }
    else {
        printf("Failed to delete file\n");
 8001738:	4834      	ldr	r0, [pc, #208]	@ (800180c <setup+0x1cc>)
 800173a:	f011 fee5 	bl	8013508 <puts>
    }

    // List files in root directory
    printf("Listing root directory:\n");
 800173e:	4834      	ldr	r0, [pc, #208]	@ (8001810 <setup+0x1d0>)
 8001740:	f011 fee2 	bl	8013508 <puts>
    std::vector<std::string> files = FAT32File::listDirectory("/");
 8001744:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001748:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800174c:	4931      	ldr	r1, [pc, #196]	@ (8001814 <setup+0x1d4>)
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f992 	bl	8000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>
    for (const auto& name : files) {
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800175c:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001760:	f7ff fc01 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001764:	4602      	mov	r2, r0
 8001766:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800176a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001774:	f7ff fa64 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8001778:	4602      	mov	r2, r0
 800177a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800177e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e012      	b.n	80017ac <setup+0x16c>
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f8b6 	bl	80018fa <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 800178e:	f8c7 0280 	str.w	r0, [r7, #640]	@ 0x280
        printf(" - %s\n", name.c_str());
 8001792:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 8001796:	f011 fc88 	bl	80130aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	481e      	ldr	r0, [pc, #120]	@ (8001818 <setup+0x1d8>)
 80017a0:	f011 fe4a 	bl	8013438 <iprintf>
    for (const auto& name : files) {
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f896 	bl	80018d8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 80017ac:	463a      	mov	r2, r7
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f878 	bl	80018a8 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1e3      	bne.n	8001786 <setup+0x146>
    }
}
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f82a 	bl	800181c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80017c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe ff8d 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 80017d2:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08014184 	.word	0x08014184
 80017e0:	08014190 	.word	0x08014190
 80017e4:	080141a8 	.word	0x080141a8
 80017e8:	080141b8 	.word	0x080141b8
 80017ec:	080141d8 	.word	0x080141d8
 80017f0:	080141ec 	.word	0x080141ec
 80017f4:	0801420c 	.word	0x0801420c
 80017f8:	0801421c 	.word	0x0801421c
 80017fc:	08014230 	.word	0x08014230
 8001800:	0801423c 	.word	0x0801423c
 8001804:	08014258 	.word	0x08014258
 8001808:	08014270 	.word	0x08014270
 800180c:	0801428c 	.word	0x0801428c
 8001810:	080142a4 	.word	0x080142a4
 8001814:	080142bc 	.word	0x080142bc
 8001818:	080142c0 	.word	0x080142c0

0800181c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800181c:	b5b0      	push	{r4, r5, r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681c      	ldr	r4, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f9cf 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001834:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001836:	461a      	mov	r2, r3
 8001838:	4629      	mov	r1, r5
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff f9d4 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f812 	bl	800186c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bdb0      	pop	{r4, r5, r7, pc}

08001852 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f859 	bl	8001912 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	10db      	asrs	r3, r3, #3
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8001886:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800188a:	461a      	mov	r2, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff f98d 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fec7 	bl	8001628 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	aaaaaaab 	.word	0xaaaaaaab

080018a8 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fbaa 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	6838      	ldr	r0, [r7, #0]
 80018be:	f7ff fba5 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429c      	cmp	r4, r3
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	++_M_current;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f103 0218 	add.w	r2, r3, #24
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
	return *this;
 80018ec:	687b      	ldr	r3, [r7, #4]
      }
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f001 fce4 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f82a 	bl	8001988 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001934:	f000 f89a 	bl	8001a6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001938:	f000 fcaa 	bl	8002290 <MX_GPIO_Init>
  MX_DMA_Init();
 800193c:	f000 fc30 	bl	80021a0 <MX_DMA_Init>
  MX_CRC_Init();
 8001940:	f000 f8c0 	bl	8001ac4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001944:	f000 f8d2 	bl	8001aec <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001948:	f000 f902 	bl	8001b50 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800194c:	f000 fc50 	bl	80021f0 <MX_FMC_Init>
  MX_I2C1_Init();
 8001950:	f000 f9fe 	bl	8001d50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001954:	f000 fa2a 	bl	8001dac <MX_I2C2_Init>
  MX_LTDC_Init();
 8001958:	f000 fa56 	bl	8001e08 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800195c:	f000 fad2 	bl	8001f04 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001960:	f000 fafc 	bl	8001f5c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001964:	f000 fb58 	bl	8002018 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001968:	f000 fb76 	bl	8002058 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800196c:	f000 fbc4 	bl	80020f8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001970:	f000 fbec 	bl	800214c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001974:	f00b fba6 	bl	800d0c4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001978:	f010 ff04 	bl	8012784 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800197c:	f7ff fe60 	bl	8001640 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001980:	f010 ff26 	bl	80127d0 <MX_USB_HOST_Process>
 8001984:	e7fc      	b.n	8001980 <main+0x58>
	...

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	2234      	movs	r2, #52	@ 0x34
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f011 feb0 	bl	80136fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <SystemClock_Config+0xdc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a64 <SystemClock_Config+0xdc>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80019bc:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <SystemClock_Config+0xdc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <SystemClock_Config+0xe0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	@ (8001a68 <SystemClock_Config+0xe0>)
 80019d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <SystemClock_Config+0xe0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80019fc:	23b4      	movs	r3, #180	@ 0xb4
 80019fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001a04:	2306      	movs	r3, #6
 8001a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4618      	mov	r0, r3
 8001a12:	f006 fec7 	bl	80087a4 <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a1c:	f000 fdd6 	bl	80025cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a20:	f006 f91e 	bl	8007c60 <HAL_PWREx_EnableOverDrive>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a2a:	f000 fdcf 	bl	80025cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2e:	230f      	movs	r3, #15
 8001a30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a32:	2302      	movs	r3, #2
 8001a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a44:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2105      	movs	r1, #5
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f006 fa19 	bl	8007e84 <HAL_RCC_ClockConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001a58:	f000 fdb8 	bl	80025cc <Error_Handler>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3750      	adds	r7, #80	@ 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000

08001a6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	@ 0x40
 8001a70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	223c      	movs	r2, #60	@ 0x3c
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f011 fe3f 	bl	80136fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8001a7e:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8001a82:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8001a84:	2390      	movs	r3, #144	@ 0x90
 8001a86:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8001a90:	2306      	movs	r3, #6
 8001a92:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001a9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f006 fc3c 	bl	8008328 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001ab6:	f000 fd89 	bl	80025cc <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3740      	adds	r7, #64	@ 0x40
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MX_CRC_Init+0x20>)
 8001aca:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <MX_CRC_Init+0x24>)
 8001acc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <MX_CRC_Init+0x20>)
 8001ad0:	f001 fd5a 	bl	8003588 <HAL_CRC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001ada:	f000 fd77 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002d8 	.word	0x200002d8
 8001ae8:	40023000 	.word	0x40023000

08001aec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001af2:	4a16      	ldr	r2, [pc, #88]	@ (8001b4c <MX_DMA2D_Init+0x60>)
 8001af4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b22:	f002 f8eb 	bl	8003cfc <HAL_DMA2D_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001b2c:	f000 fd4e 	bl	80025cc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b30:	2101      	movs	r1, #1
 8001b32:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_DMA2D_Init+0x5c>)
 8001b34:	f002 fa3c 	bl	8003fb0 <HAL_DMA2D_ConfigLayer>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b3e:	f000 fd45 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200002e0 	.word	0x200002e0
 8001b4c:	4002b000 	.word	0x4002b000

08001b50 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0aa      	sub	sp, #168	@ 0xa8
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001b56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001b62:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f011 fdc6 	bl	80136fc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001b70:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b86:	2234      	movs	r2, #52	@ 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f011 fdb6 	bl	80136fc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	222c      	movs	r2, #44	@ 0x2c
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f011 fdb0 	bl	80136fc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8001d4c <MX_DSIHOST_DSI_Init+0x1fc>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001ba2:	4b69      	ldr	r3, [pc, #420]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001ba8:	4b67      	ldr	r3, [pc, #412]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001baa:	2204      	movs	r2, #4
 8001bac:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001bae:	4b66      	ldr	r3, [pc, #408]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001bb4:	237d      	movs	r3, #125	@ 0x7d
 8001bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001bc6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	485e      	ldr	r0, [pc, #376]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001bce:	f002 fa81 	bl	80040d4 <HAL_DSI_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8001bd8:	f000 fcf8 	bl	80025cc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001c0e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001c12:	4619      	mov	r1, r3
 8001c14:	484c      	ldr	r0, [pc, #304]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c16:	f002 ff71 	bl	8004afc <HAL_DSI_ConfigHostTimeouts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8001c20:	f000 fcd4 	bl	80025cc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001c24:	231c      	movs	r3, #28
 8001c26:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001c28:	2321      	movs	r3, #33	@ 0x21
 8001c2a:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8001c30:	2319      	movs	r3, #25
 8001c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8001c38:	230a      	movs	r3, #10
 8001c3a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001c3c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c40:	4619      	mov	r1, r3
 8001c42:	4841      	ldr	r0, [pc, #260]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c44:	f002 fef0 	bl	8004a28 <HAL_DSI_ConfigPhyTimer>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8001c4e:	f000 fcbd 	bl	80025cc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001c52:	2104      	movs	r1, #4
 8001c54:	483c      	ldr	r0, [pc, #240]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c56:	f002 febf 	bl	80049d8 <HAL_DSI_ConfigFlowControl>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8001c60:	f000 fcb4 	bl	80025cc <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001c64:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001c68:	4837      	ldr	r0, [pc, #220]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c6a:	f003 f80d 	bl	8004c88 <HAL_DSI_SetLowPowerRXFilter>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001c74:	f000 fcaa 	bl	80025cc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4833      	ldr	r0, [pc, #204]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c7c:	f002 fbaa 	bl	80043d4 <HAL_DSI_ConfigErrorMonitor>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001c86:	f000 fca1 	bl	80025cc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8001c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8001c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001c9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cac:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8001cae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8001cba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001cc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001cc4:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8001cc6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8001ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481a      	ldr	r0, [pc, #104]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001cde:	f002 fe1d 	bl	800491c <HAL_DSI_ConfigCommand>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8001ce8:	f000 fc70 	bl	80025cc <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001cf4:	23c8      	movs	r3, #200	@ 0xc8
 8001cf6:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001d00:	2304      	movs	r3, #4
 8001d02:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001d10:	2340      	movs	r3, #64	@ 0x40
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480a      	ldr	r0, [pc, #40]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001d1e:	f002 fd25 	bl	800476c <HAL_DSI_ConfigAdaptedCommandMode>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8001d28:	f000 fc50 	bl	80025cc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4806      	ldr	r0, [pc, #24]	@ (8001d48 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001d30:	f002 fcf4 	bl	800471c <HAL_DSI_SetGenericVCID>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8001d3a:	f000 fc47 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	37a8      	adds	r7, #168	@ 0xa8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000320 	.word	0x20000320
 8001d4c:	40016c00 	.word	0x40016c00

08001d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <MX_I2C1_Init+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d5c:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <MX_I2C1_Init+0x58>)
 8001d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d8e:	f005 fabb 	bl	8007308 <HAL_I2C_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d98:	f000 fc18 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000033c 	.word	0x2000033c
 8001da4:	40005400 	.word	0x40005400
 8001da8:	000186a0 	.word	0x000186a0

08001dac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001db2:	4a13      	ldr	r2, [pc, #76]	@ (8001e00 <MX_I2C2_Init+0x54>)
 8001db4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <MX_I2C2_Init+0x58>)
 8001dba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dea:	f005 fa8d 	bl	8007308 <HAL_I2C_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001df4:	f000 fbea 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000390 	.word	0x20000390
 8001e00:	40005800 	.word	0x40005800
 8001e04:	000186a0 	.word	0x000186a0

08001e08 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2234      	movs	r2, #52	@ 0x34
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f011 fc71 	bl	80136fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e1a:	4b38      	ldr	r3, [pc, #224]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e1c:	4a38      	ldr	r2, [pc, #224]	@ (8001f00 <MX_LTDC_Init+0xf8>)
 8001e1e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e20:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e26:	4b35      	ldr	r3, [pc, #212]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e32:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001e38:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8001e50:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e52:	22c9      	movs	r2, #201	@ 0xc9
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001e56:	4b29      	ldr	r3, [pc, #164]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e58:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8001e5e:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e60:	22ca      	movs	r2, #202	@ 0xca
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e66:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001e84:	481d      	ldr	r0, [pc, #116]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001e86:	f005 fb83 	bl	8007590 <HAL_LTDC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001e90:	f000 fb9c 	bl	80025cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001e98:	23c8      	movs	r3, #200	@ 0xc8
 8001e9a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001ea0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001ea4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001eaa:	23ff      	movs	r3, #255	@ 0xff
 8001eac:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001eb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001eb6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001ebc:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8001ec2:	23c8      	movs	r3, #200	@ 0xc8
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001ec6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001eca:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_LTDC_Init+0xf4>)
 8001ee6:	f005 fce5 	bl	80078b4 <HAL_LTDC_ConfigLayer>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001ef0:	f000 fb6c 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3738      	adds	r7, #56	@ 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200003e4 	.word	0x200003e4
 8001f00:	40016800 	.word	0x40016800

08001f04 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <MX_QUADSPI_Init+0x54>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f22:	2218      	movs	r2, #24
 8001f24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f2c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_QUADSPI_Init+0x50>)
 8001f42:	f005 fedd 	bl	8007d00 <HAL_QSPI_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001f4c:	f000 fb3e 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000048c 	.word	0x2000048c
 8001f58:	a0001000 	.word	0xa0001000

08001f5c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001f60:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f62:	4a2b      	ldr	r2, [pc, #172]	@ (8002010 <MX_SAI1_Init+0xb4>)
 8001f64:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f66:	4b29      	ldr	r3, [pc, #164]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001f6c:	4b27      	ldr	r3, [pc, #156]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001f72:	4b26      	ldr	r3, [pc, #152]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f74:	2240      	movs	r2, #64	@ 0x40
 8001f76:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f78:	4b24      	ldr	r3, [pc, #144]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f7e:	4b23      	ldr	r3, [pc, #140]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f84:	4b21      	ldr	r3, [pc, #132]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f96:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <MX_SAI1_Init+0xb8>)
 8001fa6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001fba:	4b14      	ldr	r3, [pc, #80]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_SAI1_Init+0xb0>)
 8001ff8:	f006 fe58 	bl	8008cac <HAL_SAI_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8002002:	f000 fae3 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200004d8 	.word	0x200004d8
 8002010:	40015804 	.word	0x40015804
 8002014:	0002ee00 	.word	0x0002ee00

08002018 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 800201e:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <MX_SDIO_SD_Init+0x3c>)
 8002020:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800203a:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <MX_SDIO_SD_Init+0x38>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	20000560 	.word	0x20000560
 8002054:	40012c00 	.word	0x40012c00

08002058 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002074:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <MX_TIM1_Init+0x98>)
 8002076:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <MX_TIM1_Init+0x9c>)
 8002078:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800207a:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <MX_TIM1_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <MX_TIM1_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <MX_TIM1_Init+0x98>)
 8002088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800208c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <MX_TIM1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <MX_TIM1_Init+0x98>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <MX_TIM1_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a0:	4813      	ldr	r0, [pc, #76]	@ (80020f0 <MX_TIM1_Init+0x98>)
 80020a2:	f008 f97b 	bl	800a39c <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020ac:	f000 fa8e 	bl	80025cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	4619      	mov	r1, r3
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <MX_TIM1_Init+0x98>)
 80020be:	f008 fb1d 	bl	800a6fc <HAL_TIM_ConfigClockSource>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020c8:	f000 fa80 	bl	80025cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d4:	463b      	mov	r3, r7
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_TIM1_Init+0x98>)
 80020da:	f008 fd45 	bl	800ab68 <HAL_TIMEx_MasterConfigSynchronization>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020e4:	f000 fa72 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200006a4 	.word	0x200006a4
 80020f4:	40010000 	.word	0x40010000

080020f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <MX_USART3_UART_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 8002104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002108:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	@ (8002144 <MX_USART3_UART_Init+0x4c>)
 8002130:	f008 fdaa 	bl	800ac88 <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800213a:	f000 fa47 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200006ec 	.word	0x200006ec
 8002148:	40004800 	.word	0x40004800

0800214c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <MX_USART6_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	@ (8002198 <MX_USART6_UART_Init+0x4c>)
 8002184:	f008 fd80 	bl	800ac88 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f000 fa1d 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000734 	.word	0x20000734
 800219c:	40011400 	.word	0x40011400

080021a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <MX_DMA_Init+0x4c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <MX_DMA_Init+0x4c>)
 80021b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <MX_DMA_Init+0x4c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	203b      	movs	r0, #59	@ 0x3b
 80021c8:	f001 f9b4 	bl	8003534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021cc:	203b      	movs	r0, #59	@ 0x3b
 80021ce:	f001 f9cd 	bl	800356c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2045      	movs	r0, #69	@ 0x45
 80021d8:	f001 f9ac 	bl	8003534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80021dc:	2045      	movs	r0, #69	@ 0x45
 80021de:	f001 f9c5 	bl	800356c <HAL_NVIC_EnableIRQ>

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
 8002204:	615a      	str	r2, [r3, #20]
 8002206:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <MX_FMC_Init+0x98>)
 800220a:	4a20      	ldr	r2, [pc, #128]	@ (800228c <MX_FMC_Init+0x9c>)
 800220c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800220e:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <MX_FMC_Init+0x98>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <MX_FMC_Init+0x98>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <MX_FMC_Init+0x98>)
 800221c:	2204      	movs	r2, #4
 800221e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <MX_FMC_Init+0x98>)
 8002222:	2220      	movs	r2, #32
 8002224:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <MX_FMC_Init+0x98>)
 8002228:	2240      	movs	r2, #64	@ 0x40
 800222a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_FMC_Init+0x98>)
 800222e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002232:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_FMC_Init+0x98>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800223a:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <MX_FMC_Init+0x98>)
 800223c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002240:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <MX_FMC_Init+0x98>)
 8002244:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <MX_FMC_Init+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002250:	2302      	movs	r3, #2
 8002252:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002254:	2307      	movs	r3, #7
 8002256:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002258:	2304      	movs	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800225c:	2307      	movs	r3, #7
 800225e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002260:	2303      	movs	r3, #3
 8002262:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002268:	2302      	movs	r3, #2
 800226a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	@ (8002288 <MX_FMC_Init+0x98>)
 8002272:	f008 f85f 	bl	800a334 <HAL_SDRAM_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800227c:	f000 f9a6 	bl	80025cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002280:	bf00      	nop
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000077c 	.word	0x2000077c
 800228c:	a0000140 	.word	0xa0000140

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b090      	sub	sp, #64	@ 0x40
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022aa:	4bae      	ldr	r3, [pc, #696]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4aad      	ldr	r2, [pc, #692]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022b0:	f043 0310 	orr.w	r3, r3, #16
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4bab      	ldr	r3, [pc, #684]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c6:	4ba7      	ldr	r3, [pc, #668]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4aa6      	ldr	r2, [pc, #664]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4ba4      	ldr	r3, [pc, #656]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a9f      	ldr	r2, [pc, #636]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b9d      	ldr	r3, [pc, #628]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	4b99      	ldr	r3, [pc, #612]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a98      	ldr	r2, [pc, #608]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b96      	ldr	r3, [pc, #600]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	4b92      	ldr	r3, [pc, #584]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a91      	ldr	r2, [pc, #580]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b8b      	ldr	r3, [pc, #556]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a8a      	ldr	r2, [pc, #552]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b84      	ldr	r3, [pc, #528]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a83      	ldr	r2, [pc, #524]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b81      	ldr	r3, [pc, #516]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b7d      	ldr	r3, [pc, #500]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a7c      	ldr	r2, [pc, #496]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b7a      	ldr	r3, [pc, #488]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b76      	ldr	r3, [pc, #472]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a75      	ldr	r2, [pc, #468]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002390:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b73      	ldr	r3, [pc, #460]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80023ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b68      	ldr	r3, [pc, #416]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	4a67      	ldr	r2, [pc, #412]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80023c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ce:	4b65      	ldr	r3, [pc, #404]	@ (8002564 <MX_GPIO_Init+0x2d4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	210c      	movs	r1, #12
 80023de:	4862      	ldr	r0, [pc, #392]	@ (8002568 <MX_GPIO_Init+0x2d8>)
 80023e0:	f002 fe44 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2130      	movs	r1, #48	@ 0x30
 80023e8:	4860      	ldr	r0, [pc, #384]	@ (800256c <MX_GPIO_Init+0x2dc>)
 80023ea:	f002 fe3f 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2108      	movs	r1, #8
 80023f2:	485f      	ldr	r0, [pc, #380]	@ (8002570 <MX_GPIO_Init+0x2e0>)
 80023f4:	f002 fe3a 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2140      	movs	r1, #64	@ 0x40
 80023fc:	485d      	ldr	r0, [pc, #372]	@ (8002574 <MX_GPIO_Init+0x2e4>)
 80023fe:	f002 fe35 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2105      	movs	r1, #5
 8002406:	485c      	ldr	r0, [pc, #368]	@ (8002578 <MX_GPIO_Init+0x2e8>)
 8002408:	f002 fe30 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	485a      	ldr	r0, [pc, #360]	@ (800257c <MX_GPIO_Init+0x2ec>)
 8002412:	f002 fe2b 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2108      	movs	r1, #8
 800241a:	4859      	ldr	r0, [pc, #356]	@ (8002580 <MX_GPIO_Init+0x2f0>)
 800241c:	f002 fe26 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8002420:	230c      	movs	r3, #12
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002434:	4619      	mov	r1, r3
 8002436:	484c      	ldr	r0, [pc, #304]	@ (8002568 <MX_GPIO_Init+0x2d8>)
 8002438:	f002 fc54 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800243c:	2308      	movs	r3, #8
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800244c:	2306      	movs	r3, #6
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002454:	4619      	mov	r1, r3
 8002456:	4848      	ldr	r0, [pc, #288]	@ (8002578 <MX_GPIO_Init+0x2e8>)
 8002458:	f002 fc44 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002460:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246e:	4619      	mov	r1, r3
 8002470:	4841      	ldr	r0, [pc, #260]	@ (8002578 <MX_GPIO_Init+0x2e8>)
 8002472:	f002 fc37 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002476:	2330      	movs	r3, #48	@ 0x30
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800247a:	2311      	movs	r3, #17
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002486:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248a:	4619      	mov	r1, r3
 800248c:	4837      	ldr	r0, [pc, #220]	@ (800256c <MX_GPIO_Init+0x2dc>)
 800248e:	f002 fc29 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002492:	2308      	movs	r3, #8
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002496:	2311      	movs	r3, #17
 8002498:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a6:	4619      	mov	r1, r3
 80024a8:	4831      	ldr	r0, [pc, #196]	@ (8002570 <MX_GPIO_Init+0x2e0>)
 80024aa:	f002 fc1b 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80024ae:	2340      	movs	r3, #64	@ 0x40
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024b2:	2311      	movs	r3, #17
 80024b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024c2:	4619      	mov	r1, r3
 80024c4:	482b      	ldr	r0, [pc, #172]	@ (8002574 <MX_GPIO_Init+0x2e4>)
 80024c6:	f002 fc0d 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80024ca:	2305      	movs	r3, #5
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	4825      	ldr	r0, [pc, #148]	@ (8002578 <MX_GPIO_Init+0x2e8>)
 80024e2:	f002 fbff 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80024e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024f8:	2302      	movs	r3, #2
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002500:	4619      	mov	r1, r3
 8002502:	481a      	ldr	r0, [pc, #104]	@ (800256c <MX_GPIO_Init+0x2dc>)
 8002504:	f002 fbee 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002508:	2304      	movs	r3, #4
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	4816      	ldr	r0, [pc, #88]	@ (8002574 <MX_GPIO_Init+0x2e4>)
 800251c:	f002 fbe2 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002520:	2320      	movs	r3, #32
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002524:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002532:	4619      	mov	r1, r3
 8002534:	4813      	ldr	r0, [pc, #76]	@ (8002584 <MX_GPIO_Init+0x2f4>)
 8002536:	f002 fbd5 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	480a      	ldr	r0, [pc, #40]	@ (800257c <MX_GPIO_Init+0x2ec>)
 8002552:	f002 fbc7 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002556:	2308      	movs	r3, #8
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	e012      	b.n	8002588 <MX_GPIO_Init+0x2f8>
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40021000 	.word	0x40021000
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40022800 	.word	0x40022800
 8002574:	40021800 	.word	0x40021800
 8002578:	40020400 	.word	0x40020400
 800257c:	40021c00 	.word	0x40021c00
 8002580:	40020000 	.word	0x40020000
 8002584:	40022400 	.word	0x40022400
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	4803      	ldr	r0, [pc, #12]	@ (80025a4 <MX_GPIO_Init+0x314>)
 8002596:	f002 fba5 	bl	8004ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800259a:	bf00      	nop
 800259c:	3740      	adds	r7, #64	@ 0x40
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40020000 	.word	0x40020000

080025a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025ba:	f000 febf 	bl	800333c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40001000 	.word	0x40001000

080025cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <Error_Handler+0x8>

080025d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_MspInit+0x58>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <HAL_MspInit+0x58>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_MspInit+0x58>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_MspInit+0x58>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_MspInit+0x58>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	@ 0x40
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HAL_MspInit+0x58>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2005      	movs	r0, #5
 800261c:	f000 ff8a 	bl	8003534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002620:	2005      	movs	r0, #5
 8002622:	f000 ffa3 	bl	800356c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0b      	ldr	r2, [pc, #44]	@ (8002670 <HAL_CRC_MspInit+0x3c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10d      	bne.n	8002662 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_CRC_MspInit+0x40>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a09      	ldr	r2, [pc, #36]	@ (8002674 <HAL_CRC_MspInit+0x40>)
 8002650:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_CRC_MspInit+0x40>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023000 	.word	0x40023000
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <HAL_DMA2D_MspInit+0x48>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d115      	bne.n	80026b6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_DMA2D_MspInit+0x4c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <HAL_DMA2D_MspInit+0x4c>)
 8002694:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_DMA2D_MspInit+0x4c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	205a      	movs	r0, #90	@ 0x5a
 80026ac:	f000 ff42 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80026b0:	205a      	movs	r0, #90	@ 0x5a
 80026b2:	f000 ff5b 	bl	800356c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	4002b000 	.word	0x4002b000
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_DSI_MspInit+0x94>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d133      	bne.n	8002752 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <HAL_DSI_MspInit+0x98>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <HAL_DSI_MspInit+0x98>)
 80026f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <HAL_DSI_MspInit+0x98>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_DSI_MspInit+0x98>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <HAL_DSI_MspInit+0x98>)
 8002710:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_DSI_MspInit+0x98>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8002722:	2304      	movs	r3, #4
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002732:	230d      	movs	r3, #13
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4809      	ldr	r0, [pc, #36]	@ (8002764 <HAL_DSI_MspInit+0x9c>)
 800273e:	f002 fad1 	bl	8004ce4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	205c      	movs	r0, #92	@ 0x5c
 8002748:	f000 fef4 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800274c:	205c      	movs	r0, #92	@ 0x5c
 800274e:	f000 ff0d 	bl	800356c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40016c00 	.word	0x40016c00
 8002760:	40023800 	.word	0x40023800
 8002764:	40022400 	.word	0x40022400

08002768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	@ 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a32      	ldr	r2, [pc, #200]	@ (8002850 <HAL_I2C_MspInit+0xe8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d12d      	bne.n	80027e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	4b31      	ldr	r3, [pc, #196]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a30      	ldr	r2, [pc, #192]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80027a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ac:	2312      	movs	r3, #18
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b8:	2304      	movs	r3, #4
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4825      	ldr	r0, [pc, #148]	@ (8002858 <HAL_I2C_MspInit+0xf0>)
 80027c4:	f002 fa8e 	bl	8004ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	4a20      	ldr	r2, [pc, #128]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 80027d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027e4:	e030      	b.n	8002848 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <HAL_I2C_MspInit+0xf4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d12b      	bne.n	8002848 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	4b17      	ldr	r3, [pc, #92]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4a16      	ldr	r2, [pc, #88]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 80027fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002800:	4b14      	ldr	r3, [pc, #80]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800280c:	2330      	movs	r3, #48	@ 0x30
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002810:	2312      	movs	r3, #18
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800281c:	2304      	movs	r3, #4
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	480e      	ldr	r0, [pc, #56]	@ (8002860 <HAL_I2C_MspInit+0xf8>)
 8002828:	f002 fa5c 	bl	8004ce4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 8002836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800283a:	6413      	str	r3, [r2, #64]	@ 0x40
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_I2C_MspInit+0xec>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	bf00      	nop
 800284a:	3730      	adds	r7, #48	@ 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40005400 	.word	0x40005400
 8002854:	40023800 	.word	0x40023800
 8002858:	40020400 	.word	0x40020400
 800285c:	40005800 	.word	0x40005800
 8002860:	40021c00 	.word	0x40021c00

08002864 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <HAL_LTDC_MspInit+0x48>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d115      	bne.n	80028a2 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_LTDC_MspInit+0x4c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	4a0c      	ldr	r2, [pc, #48]	@ (80028b0 <HAL_LTDC_MspInit+0x4c>)
 8002880:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002884:	6453      	str	r3, [r2, #68]	@ 0x44
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_LTDC_MspInit+0x4c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	2058      	movs	r0, #88	@ 0x58
 8002898:	f000 fe4c 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800289c:	2058      	movs	r0, #88	@ 0x58
 800289e:	f000 fe65 	bl	800356c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40016800 	.word	0x40016800
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	@ 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a31      	ldr	r2, [pc, #196]	@ (8002998 <HAL_QSPI_MspInit+0xe4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d15b      	bne.n	800298e <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b30      	ldr	r3, [pc, #192]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 80028dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028de:	4a2f      	ldr	r2, [pc, #188]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80028e6:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b29      	ldr	r3, [pc, #164]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	4a28      	ldr	r2, [pc, #160]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	@ 0x30
 8002902:	4b26      	ldr	r3, [pc, #152]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <HAL_QSPI_MspInit+0xe8>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800292a:	2340      	movs	r3, #64	@ 0x40
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800293a:	230a      	movs	r3, #10
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4816      	ldr	r0, [pc, #88]	@ (80029a0 <HAL_QSPI_MspInit+0xec>)
 8002946:	f002 f9cd 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800294a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800295c:	2309      	movs	r3, #9
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	480f      	ldr	r0, [pc, #60]	@ (80029a4 <HAL_QSPI_MspInit+0xf0>)
 8002968:	f002 f9bc 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800296c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800297e:	230a      	movs	r3, #10
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4806      	ldr	r0, [pc, #24]	@ (80029a4 <HAL_QSPI_MspInit+0xf0>)
 800298a:	f002 f9ab 	bl	8004ce4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800298e:	bf00      	nop
 8002990:	3728      	adds	r7, #40	@ 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	a0001000 	.word	0xa0001000
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40021400 	.word	0x40021400

080029a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a68      	ldr	r2, [pc, #416]	@ (8002b68 <HAL_SD_MspInit+0x1c0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	f040 80c9 	bne.w	8002b5e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	4b66      	ldr	r3, [pc, #408]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	4a65      	ldr	r2, [pc, #404]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 80029d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029da:	6453      	str	r3, [r2, #68]	@ 0x44
 80029dc:	4b63      	ldr	r3, [pc, #396]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 80029de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	4b5f      	ldr	r3, [pc, #380]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f8:	4b5c      	ldr	r3, [pc, #368]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	4b58      	ldr	r3, [pc, #352]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	4a57      	ldr	r2, [pc, #348]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a14:	4b55      	ldr	r3, [pc, #340]	@ (8002b6c <HAL_SD_MspInit+0x1c4>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8002a20:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002a24:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a32:	230c      	movs	r3, #12
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	484c      	ldr	r0, [pc, #304]	@ (8002b70 <HAL_SD_MspInit+0x1c8>)
 8002a3e:	f002 f951 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002a42:	2304      	movs	r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a52:	230c      	movs	r3, #12
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4845      	ldr	r0, [pc, #276]	@ (8002b74 <HAL_SD_MspInit+0x1cc>)
 8002a5e:	f002 f941 	bl	8004ce4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002a62:	4b45      	ldr	r3, [pc, #276]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a64:	4a45      	ldr	r2, [pc, #276]	@ (8002b7c <HAL_SD_MspInit+0x1d4>)
 8002a66:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002a68:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a70:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a76:	4b40      	ldr	r3, [pc, #256]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a84:	4b3c      	ldr	r3, [pc, #240]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a8a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a92:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a94:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a96:	2220      	movs	r2, #32
 8002a98:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9a:	4b37      	ldr	r3, [pc, #220]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002aa0:	4b35      	ldr	r3, [pc, #212]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aa6:	4b34      	ldr	r3, [pc, #208]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002aac:	4b32      	ldr	r3, [pc, #200]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002aae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ab4:	4b30      	ldr	r3, [pc, #192]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002ab6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002abc:	482e      	ldr	r0, [pc, #184]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002abe:	f000 fd7f 	bl	80035c0 <HAL_DMA_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8002ac8:	f7ff fd80 	bl	80025cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a2a      	ldr	r2, [pc, #168]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ad2:	4a29      	ldr	r2, [pc, #164]	@ (8002b78 <HAL_SD_MspInit+0x1d0>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002ad8:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002ada:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <HAL_SD_MspInit+0x1dc>)
 8002adc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002ade:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002ae0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ae4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae6:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aec:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002af2:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002af4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002af8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002afa:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002afc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b00:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b02:	4b1f      	ldr	r3, [pc, #124]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b08:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b18:	2204      	movs	r2, #4
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b1e:	2203      	movs	r2, #3
 8002b20:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002b22:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002b32:	4813      	ldr	r0, [pc, #76]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b34:	f000 fd44 	bl	80035c0 <HAL_DMA_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002b3e:	f7ff fd45 	bl	80025cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a0e      	ldr	r2, [pc, #56]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_SD_MspInit+0x1d8>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2031      	movs	r0, #49	@ 0x31
 8002b54:	f000 fcee 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002b58:	2031      	movs	r0, #49	@ 0x31
 8002b5a:	f000 fd07 	bl	800356c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	@ 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020c00 	.word	0x40020c00
 8002b78:	200005e4 	.word	0x200005e4
 8002b7c:	40026458 	.word	0x40026458
 8002b80:	20000644 	.word	0x20000644
 8002b84:	400264a0 	.word	0x400264a0

08002b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10d      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x40>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x40>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002baa:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x40>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	@ 0x30
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a33      	ldr	r2, [pc, #204]	@ (8002cb8 <HAL_UART_MspInit+0xec>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d12d      	bne.n	8002c4a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a31      	ldr	r2, [pc, #196]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a2a      	ldr	r2, [pc, #168]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	481f      	ldr	r0, [pc, #124]	@ (8002cc0 <HAL_UART_MspInit+0xf4>)
 8002c44:	f002 f84e 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c48:	e031      	b.n	8002cae <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_UART_MspInit+0xf8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d12c      	bne.n	8002cae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5c:	4a17      	ldr	r2, [pc, #92]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c64:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8002c8c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4807      	ldr	r0, [pc, #28]	@ (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002caa:	f002 f81b 	bl	8004ce4 <HAL_GPIO_Init>
}
 8002cae:	bf00      	nop
 8002cb0:	3730      	adds	r7, #48	@ 0x30
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40004800 	.word	0x40004800
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	40021800 	.word	0x40021800

08002ccc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ce0:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <HAL_FMC_MspInit+0x128>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8081 	bne.w	8002dec <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8002cea:	4b42      	ldr	r3, [pc, #264]	@ (8002df4 <HAL_FMC_MspInit+0x128>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <HAL_FMC_MspInit+0x12c>)
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8002df8 <HAL_FMC_MspInit+0x12c>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6393      	str	r3, [r2, #56]	@ 0x38
 8002d00:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_FMC_MspInit+0x12c>)
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8002d0c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002d10:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d1e:	230c      	movs	r3, #12
 8002d20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4835      	ldr	r0, [pc, #212]	@ (8002dfc <HAL_FMC_MspInit+0x130>)
 8002d28:	f001 ffdc 	bl	8004ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8002d2c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002d30:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d3e:	230c      	movs	r3, #12
 8002d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	482e      	ldr	r0, [pc, #184]	@ (8002e00 <HAL_FMC_MspInit+0x134>)
 8002d48:	f001 ffcc 	bl	8004ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8002d4c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002d50:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4827      	ldr	r0, [pc, #156]	@ (8002e04 <HAL_FMC_MspInit+0x138>)
 8002d68:	f001 ffbc 	bl	8004ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002d6c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002d70:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d7e:	230c      	movs	r3, #12
 8002d80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4820      	ldr	r0, [pc, #128]	@ (8002e08 <HAL_FMC_MspInit+0x13c>)
 8002d88:	f001 ffac 	bl	8004ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002d8c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002d90:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d9e:	230c      	movs	r3, #12
 8002da0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4819      	ldr	r0, [pc, #100]	@ (8002e0c <HAL_FMC_MspInit+0x140>)
 8002da8:	f001 ff9c 	bl	8004ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8002dac:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8002db0:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4812      	ldr	r0, [pc, #72]	@ (8002e10 <HAL_FMC_MspInit+0x144>)
 8002dc8:	f001 ff8c 	bl	8004ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	480b      	ldr	r0, [pc, #44]	@ (8002e14 <HAL_FMC_MspInit+0x148>)
 8002de6:	f001 ff7d 	bl	8004ce4 <HAL_GPIO_Init>
 8002dea:	e000      	b.n	8002dee <HAL_FMC_MspInit+0x122>
    return;
 8002dec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200007b0 	.word	0x200007b0
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40021800 	.word	0x40021800
 8002e04:	40020c00 	.word	0x40020c00
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021400 	.word	0x40021400
 8002e10:	40021c00 	.word	0x40021c00
 8002e14:	40020800 	.word	0x40020800

08002e18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e20:	f7ff ff54 	bl	8002ccc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a26      	ldr	r2, [pc, #152]	@ (8002ed4 <HAL_SAI_MspInit+0xa8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d146      	bne.n	8002ecc <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002e3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <HAL_SAI_MspInit+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_SAI_MspInit+0xb0>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <HAL_SAI_MspInit+0xb0>)
 8002e50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e56:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <HAL_SAI_MspInit+0xb0>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002e62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <HAL_SAI_MspInit+0xac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed8 <HAL_SAI_MspInit+0xac>)
 8002e6a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002e6c:	2330      	movs	r3, #48	@ 0x30
 8002e6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e7c:	2306      	movs	r3, #6
 8002e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	4619      	mov	r1, r3
 8002e86:	4816      	ldr	r0, [pc, #88]	@ (8002ee0 <HAL_SAI_MspInit+0xb4>)
 8002e88:	f001 ff2c 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002e8c:	2340      	movs	r3, #64	@ 0x40
 8002e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480f      	ldr	r0, [pc, #60]	@ (8002ee4 <HAL_SAI_MspInit+0xb8>)
 8002ea8:	f001 ff1c 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4808      	ldr	r0, [pc, #32]	@ (8002ee8 <HAL_SAI_MspInit+0xbc>)
 8002ec8:	f001 ff0c 	bl	8004ce4 <HAL_GPIO_Init>

    }
}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40015804 	.word	0x40015804
 8002ed8:	200007b4 	.word	0x200007b4
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021800 	.word	0x40021800

08002eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	@ 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_InitTick+0xe4>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <HAL_InitTick+0xe4>)
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0c:	4b30      	ldr	r3, [pc, #192]	@ (8002fd0 <HAL_InitTick+0xe4>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f18:	f107 0210 	add.w	r2, r7, #16
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 f9ce 	bl	80082c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f32:	f005 f99f 	bl	8008274 <HAL_RCC_GetPCLK1Freq>
 8002f36:	6378      	str	r0, [r7, #52]	@ 0x34
 8002f38:	e004      	b.n	8002f44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f3a:	f005 f99b 	bl	8008274 <HAL_RCC_GetPCLK1Freq>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f46:	4a23      	ldr	r2, [pc, #140]	@ (8002fd4 <HAL_InitTick+0xe8>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	0c9b      	lsrs	r3, r3, #18
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f52:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f54:	4a21      	ldr	r2, [pc, #132]	@ (8002fdc <HAL_InitTick+0xf0>)
 8002f56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f58:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f60:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f72:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002f78:	4817      	ldr	r0, [pc, #92]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f7a:	f007 fa0f 	bl	800a39c <HAL_TIM_Base_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f8c:	4812      	ldr	r0, [pc, #72]	@ (8002fd8 <HAL_InitTick+0xec>)
 8002f8e:	f007 fa55 	bl	800a43c <HAL_TIM_Base_Start_IT>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d111      	bne.n	8002fc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fa0:	2036      	movs	r0, #54	@ 0x36
 8002fa2:	f000 fae3 	bl	800356c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b0f      	cmp	r3, #15
 8002faa:	d808      	bhi.n	8002fbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002fac:	2200      	movs	r2, #0
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	2036      	movs	r0, #54	@ 0x36
 8002fb2:	f000 fabf 	bl	8003534 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_InitTick+0xf4>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	e002      	b.n	8002fc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3738      	adds	r7, #56	@ 0x38
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	200007b8 	.word	0x200007b8
 8002fdc:	40001000 	.word	0x40001000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <NMI_Handler+0x4>

08002fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <HardFault_Handler+0x4>

08002ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <MemManage_Handler+0x4>

08002ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <BusFault_Handler+0x4>

08003004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <UsageFault_Handler+0x4>

0800300c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003058:	4802      	ldr	r0, [pc, #8]	@ (8003064 <SDIO_IRQHandler+0x10>)
 800305a:	f006 fac3 	bl	80095e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000560 	.word	0x20000560

08003068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800306c:	4802      	ldr	r0, [pc, #8]	@ (8003078 <TIM6_DAC_IRQHandler+0x10>)
 800306e:	f007 fa55 	bl	800a51c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200007b8 	.word	0x200007b8

0800307c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003080:	4802      	ldr	r0, [pc, #8]	@ (800308c <DMA2_Stream3_IRQHandler+0x10>)
 8003082:	f000 fbc5 	bl	8003810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200005e4 	.word	0x200005e4

08003090 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <OTG_FS_IRQHandler+0x10>)
 8003096:	f002 fae3 	bl	8005660 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000c28 	.word	0x20000c28

080030a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80030a8:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <DMA2_Stream6_IRQHandler+0x10>)
 80030aa:	f000 fbb1 	bl	8003810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000644 	.word	0x20000644

080030b8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <LTDC_IRQHandler+0x10>)
 80030be:	f004 fb37 	bl	8007730 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200003e4 	.word	0x200003e4

080030cc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80030d0:	4802      	ldr	r0, [pc, #8]	@ (80030dc <DMA2D_IRQHandler+0x10>)
 80030d2:	f000 fe5c 	bl	8003d8e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200002e0 	.word	0x200002e0

080030e0 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80030e4:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <DSI_IRQHandler+0x10>)
 80030e6:	f001 fa32 	bl	800454e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000320 	.word	0x20000320

080030f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_kill>:

int _kill(int pid, int sig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800310e:	f010 fb97 	bl	8013840 <__errno>
 8003112:	4603      	mov	r3, r0
 8003114:	2216      	movs	r2, #22
 8003116:	601a      	str	r2, [r3, #0]
  return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_exit>:

void _exit (int status)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffe7 	bl	8003104 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <_exit+0x12>

0800313a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e00a      	b.n	8003162 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800314c:	f3af 8000 	nop.w
 8003150:	4601      	mov	r1, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60ba      	str	r2, [r7, #8]
 8003158:	b2ca      	uxtb	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	dbf0      	blt.n	800314c <_read+0x12>
  }

  return len;
 800316a:	687b      	ldr	r3, [r7, #4]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e009      	b.n	800319a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	60ba      	str	r2, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	dbf1      	blt.n	8003186 <_write+0x12>
  }
  return len;
 80031a2:	687b      	ldr	r3, [r7, #4]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_close>:

int _close(int file)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d4:	605a      	str	r2, [r3, #4]
  return 0;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_isatty>:

int _isatty(int file)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800321c:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <_sbrk+0x5c>)
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <_sbrk+0x60>)
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003228:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <_sbrk+0x64>)
 8003232:	4a12      	ldr	r2, [pc, #72]	@ (800327c <_sbrk+0x68>)
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <_sbrk+0x64>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d207      	bcs.n	8003254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003244:	f010 fafc 	bl	8013840 <__errno>
 8003248:	4603      	mov	r3, r0
 800324a:	220c      	movs	r2, #12
 800324c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	e009      	b.n	8003268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003254:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	4a05      	ldr	r2, [pc, #20]	@ (8003278 <_sbrk+0x64>)
 8003264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20050000 	.word	0x20050000
 8003274:	00000400 	.word	0x00000400
 8003278:	20000800 	.word	0x20000800
 800327c:	20001158 	.word	0x20001158

08003280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <SystemInit+0x20>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <SystemInit+0x20>)
 800328c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032a8:	f7ff ffea 	bl	8003280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ac:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ae:	490d      	ldr	r1, [pc, #52]	@ (80032e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032b0:	4a0d      	ldr	r2, [pc, #52]	@ (80032e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b4:	e002      	b.n	80032bc <LoopCopyDataInit>

080032b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ba:	3304      	adds	r3, #4

080032bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c0:	d3f9      	bcc.n	80032b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032c4:	4c0a      	ldr	r4, [pc, #40]	@ (80032f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c8:	e001      	b.n	80032ce <LoopFillZerobss>

080032ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032cc:	3204      	adds	r2, #4

080032ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d0:	d3fb      	bcc.n	80032ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80032d2:	f010 fabb 	bl	801384c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d6:	f7fe fb27 	bl	8001928 <main>
  bx  lr    
 80032da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80032e8:	080144d4 	.word	0x080144d4
  ldr r2, =_sbss
 80032ec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80032f0:	20001158 	.word	0x20001158

080032f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC_IRQHandler>
	...

080032f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_Init+0x40>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <HAL_Init+0x40>)
 8003302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_Init+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0a      	ldr	r2, [pc, #40]	@ (8003338 <HAL_Init+0x40>)
 800330e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <HAL_Init+0x40>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a07      	ldr	r2, [pc, #28]	@ (8003338 <HAL_Init+0x40>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003320:	2003      	movs	r0, #3
 8003322:	f000 f8fc 	bl	800351e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003326:	200f      	movs	r0, #15
 8003328:	f7ff fde0 	bl	8002eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800332c:	f7ff f954 	bl	80025d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	@ (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000008 	.word	0x20000008
 8003360:	20000804 	.word	0x20000804

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000804 	.word	0x20000804

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d005      	beq.n	80033a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_Delay+0x44>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a2:	bf00      	nop
 80033a4:	f7ff ffde 	bl	8003364 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d8f7      	bhi.n	80033a4 <HAL_Delay+0x28>
  {
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000008 	.word	0x20000008

080033c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f6:	4a04      	ldr	r2, [pc, #16]	@ (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60d3      	str	r3, [r2, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003410:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <__NVIC_GetPriorityGrouping+0x18>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0307 	and.w	r3, r3, #7
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db0b      	blt.n	8003452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4907      	ldr	r1, [pc, #28]	@ (8003460 <__NVIC_EnableIRQ+0x38>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	@ (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	@ (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	@ 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	@ 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff4c 	bl	80033c4 <__NVIC_SetPriorityGrouping>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003546:	f7ff ff61 	bl	800340c <__NVIC_GetPriorityGrouping>
 800354a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	6978      	ldr	r0, [r7, #20]
 8003552:	f7ff ffb1 	bl	80034b8 <NVIC_EncodePriority>
 8003556:	4602      	mov	r2, r0
 8003558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff ff80 	bl	8003464 <__NVIC_SetPriority>
}
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff54 	bl	8003428 <__NVIC_EnableIRQ>
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	795b      	ldrb	r3, [r3, #5]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff f842 	bl	8002634 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7ff feca 	bl	8003364 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e099      	b.n	8003710 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fc:	e00f      	b.n	800361e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035fe:	f7ff feb1 	bl	8003364 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b05      	cmp	r3, #5
 800360a:	d908      	bls.n	800361e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2203      	movs	r2, #3
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e078      	b.n	8003710 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e8      	bne.n	80035fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4b38      	ldr	r3, [pc, #224]	@ (8003718 <HAL_DMA_Init+0x158>)
 8003638:	4013      	ands	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	2b04      	cmp	r3, #4
 8003676:	d107      	bne.n	8003688 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	4313      	orrs	r3, r2
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0307 	bic.w	r3, r3, #7
 800369e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d117      	bne.n	80036e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa9d 	bl	8003c04 <DMA_CheckFifoParam>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2240      	movs	r2, #64	@ 0x40
 80036d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036de:	2301      	movs	r3, #1
 80036e0:	e016      	b.n	8003710 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa54 	bl	8003b98 <DMA_CalcBaseAndBitshift>
 80036f0:	4603      	mov	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	223f      	movs	r2, #63	@ 0x3f
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	f010803f 	.word	0xf010803f

0800371c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_DMA_Start_IT+0x26>
 800373e:	2302      	movs	r3, #2
 8003740:	e040      	b.n	80037c4 <HAL_DMA_Start_IT+0xa8>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d12f      	bne.n	80037b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f9e6 	bl	8003b3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	223f      	movs	r2, #63	@ 0x3f
 8003776:	409a      	lsls	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0216 	orr.w	r2, r2, #22
 800378a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e005      	b.n	80037c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037be:	2302      	movs	r3, #2
 80037c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2280      	movs	r2, #128	@ 0x80
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00c      	b.n	8003804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2205      	movs	r2, #5
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800381c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a58 <HAL_DMA_IRQHandler+0x248>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a8e      	ldr	r2, [pc, #568]	@ (8003a5c <HAL_DMA_IRQHandler+0x24c>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	2208      	movs	r2, #8
 800383c:	409a      	lsls	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01a      	beq.n	800387c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0204 	bic.w	r2, r2, #4
 8003862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	2208      	movs	r2, #8
 800386a:	409a      	lsls	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	2201      	movs	r2, #1
 80038a0:	409a      	lsls	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038aa:	f043 0202 	orr.w	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	2204      	movs	r2, #4
 80038b8:	409a      	lsls	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	2204      	movs	r2, #4
 80038d6:	409a      	lsls	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e0:	f043 0204 	orr.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	2210      	movs	r2, #16
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d043      	beq.n	8003980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03c      	beq.n	8003980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390a:	2210      	movs	r2, #16
 800390c:	409a      	lsls	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d018      	beq.n	8003952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d024      	beq.n	8003980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
 800393e:	e01f      	b.n	8003980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01b      	beq.n	8003980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
 8003950:	e016      	b.n	8003980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0208 	bic.w	r2, r2, #8
 800396e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	2220      	movs	r2, #32
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 808f 	beq.w	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8087 	beq.w	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	2220      	movs	r2, #32
 80039a8:	409a      	lsls	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d136      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0216 	bic.w	r2, r2, #22
 80039c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <HAL_DMA_IRQHandler+0x1da>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0208 	bic.w	r2, r2, #8
 80039f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	223f      	movs	r2, #63	@ 0x3f
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d07e      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
        }
        return;
 8003a26:	e079      	b.n	8003b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d031      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
 8003a54:	e02c      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d023      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
 8003a70:	e01e      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0210 	bic.w	r2, r2, #16
 8003a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d032      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d022      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2205      	movs	r2, #5
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d307      	bcc.n	8003af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f2      	bne.n	8003adc <HAL_DMA_IRQHandler+0x2cc>
 8003af6:	e000      	b.n	8003afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
 8003b1a:	e000      	b.n	8003b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b1c:	bf00      	nop
    }
  }
}
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	d108      	bne.n	8003b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b7a:	e007      	b.n	8003b8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	3b10      	subs	r3, #16
 8003ba8:	4a14      	ldr	r2, [pc, #80]	@ (8003bfc <DMA_CalcBaseAndBitshift+0x64>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bb2:	4a13      	ldr	r2, [pc, #76]	@ (8003c00 <DMA_CalcBaseAndBitshift+0x68>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d909      	bls.n	8003bda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bd8:	e007      	b.n	8003bea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	aaaaaaab 	.word	0xaaaaaaab
 8003c00:	08014390 	.word	0x08014390

08003c04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11f      	bne.n	8003c5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d856      	bhi.n	8003cd2 <DMA_CheckFifoParam+0xce>
 8003c24:	a201      	add	r2, pc, #4	@ (adr r2, 8003c2c <DMA_CheckFifoParam+0x28>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c4f 	.word	0x08003c4f
 8003c34:	08003c3d 	.word	0x08003c3d
 8003c38:	08003cd3 	.word	0x08003cd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d046      	beq.n	8003cd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4c:	e043      	b.n	8003cd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c56:	d140      	bne.n	8003cda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5c:	e03d      	b.n	8003cda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c66:	d121      	bne.n	8003cac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d837      	bhi.n	8003cde <DMA_CheckFifoParam+0xda>
 8003c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <DMA_CheckFifoParam+0x70>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c8b 	.word	0x08003c8b
 8003c7c:	08003c85 	.word	0x08003c85
 8003c80:	08003c9d 	.word	0x08003c9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      break;
 8003c88:	e030      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d025      	beq.n	8003ce2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9a:	e022      	b.n	8003ce2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ca4:	d11f      	bne.n	8003ce6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003caa:	e01c      	b.n	8003ce6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d903      	bls.n	8003cba <DMA_CheckFifoParam+0xb6>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d003      	beq.n	8003cc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cb8:	e018      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbe:	e015      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e00b      	b.n	8003cea <DMA_CheckFifoParam+0xe6>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e00a      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e008      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e006      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e004      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e002      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      break;   
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <DMA_CheckFifoParam+0xe8>
      break;
 8003cea:	bf00      	nop
    }
  } 
  
  return status; 
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop

08003cfc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e03b      	b.n	8003d86 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fe fca8 	bl	8002678 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4c:	f023 0107 	bic.w	r1, r3, #7
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68d1      	ldr	r1, [r2, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d026      	beq.n	8003dfe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d021      	beq.n	8003dfe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d026      	beq.n	8003e56 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d021      	beq.n	8003e56 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e20:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2220      	movs	r2, #32
 8003e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d026      	beq.n	8003eae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d021      	beq.n	8003eae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2208      	movs	r2, #8
 8003e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2204      	movs	r2, #4
 8003e92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f853 	bl	8003f86 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d024      	beq.n	8003f34 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01f      	beq.n	8003f34 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01f      	beq.n	8003f7e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01a      	beq.n	8003f7e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f80e 	bl	8003f9a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_DMA2D_ConfigLayer+0x20>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e079      	b.n	80040c4 <HAL_DMA2D_ConfigLayer+0x114>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ffa:	4b35      	ldr	r3, [pc, #212]	@ (80040d0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003ffc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b0a      	cmp	r3, #10
 8004004:	d003      	beq.n	800400e <HAL_DMA2D_ConfigLayer+0x5e>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b09      	cmp	r3, #9
 800400c:	d107      	bne.n	800401e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e005      	b.n	800402a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d120      	bne.n	8004072 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	ea02 0103 	and.w	r1, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	430a      	orrs	r2, r1
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b0a      	cmp	r3, #10
 8004058:	d003      	beq.n	8004062 <HAL_DMA2D_ConfigLayer+0xb2>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b09      	cmp	r3, #9
 8004060:	d127      	bne.n	80040b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800406e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004070:	e01f      	b.n	80040b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	43db      	mvns	r3, r3
 800407c:	ea02 0103 	and.w	r1, r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	430a      	orrs	r2, r1
 8004088:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b0a      	cmp	r3, #10
 800409a:	d003      	beq.n	80040a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d106      	bne.n	80040b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80040b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	ff03000f 	.word	0xff03000f

080040d4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	@ 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e16e      	b.n	80043c6 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7c5b      	ldrb	r3, [r3, #17]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe fae8 	bl	80026c8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2203      	movs	r2, #3
 80040fc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004112:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800411e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004126:	f7ff f91d 	bl	8003364 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800412c:	e009      	b.n	8004142 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800412e:	f7ff f919 	bl	8003364 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800413c:	d901      	bls.n	8004142 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e141      	b.n	80043c6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800414a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ed      	beq.n	800412e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8004162:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8004166:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800417e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004186:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80041ba:	2001      	movs	r0, #1
 80041bc:	f7ff f8de 	bl	800337c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c0:	f7ff f8d0 	bl	8003364 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80041c6:	e009      	b.n	80041dc <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80041c8:	f7ff f8cc 	bl	8003364 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041d6:	d901      	bls.n	80041dc <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0f4      	b.n	80043c6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80041e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ed      	beq.n	80041c8 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800421c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6899      	ldr	r1, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0202 	orr.w	r2, r2, #2
 8004240:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0204 	orr.w	r2, r2, #4
 8004254:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0203 	bic.w	r2, r2, #3
 8004268:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8004282:	f7ff f86f 	bl	8003364 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d123      	bne.n	80042e0 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004298:	e00c      	b.n	80042b4 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800429a:	f7ff f863 	bl	8003364 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042a8:	d904      	bls.n	80042b4 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e088      	b.n	80043c6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042bc:	f003 0314 	and.w	r3, r3, #20
 80042c0:	2b14      	cmp	r3, #20
 80042c2:	d1ea      	bne.n	800429a <HAL_DSI_Init+0x1c6>
 80042c4:	e014      	b.n	80042f0 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80042c6:	f7ff f84d 	bl	8003364 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042d4:	d904      	bls.n	80042e0 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e072      	b.n	80043c6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042e8:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80042ec:	2b94      	cmp	r3, #148	@ 0x94
 80042ee:	d1ea      	bne.n	80042c6 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_DSI_Init+0x22a>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	e000      	b.n	8004300 <HAL_DSI_Init+0x22c>
 80042fe:	2301      	movs	r3, #1
 8004300:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	4a32      	ldr	r2, [pc, #200]	@ (80043d0 <HAL_DSI_Init+0x2fc>)
 8004306:	fb03 f202 	mul.w	r2, r3, r2
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	409a      	lsls	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004336:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	430a      	orrs	r2, r1
 800434a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0203 	bic.w	r2, r2, #3
 800439a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3728      	adds	r7, #40	@ 0x28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	003d0900 	.word	0x003d0900

080043d4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7c1b      	ldrb	r3, [r3, #16]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_DSI_ConfigErrorMonitor+0x16>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0ab      	b.n	8004542 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004424:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004428:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8004446:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0202 	orr.w	r2, r2, #2
 8004482:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 020c 	orr.w	r2, r2, #12
 80044a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0210 	orr.w	r2, r2, #16
 80044be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0220 	orr.w	r2, r2, #32
 80044dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044fa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004518:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004536:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00f      	beq.n	8004586 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f8ad 	bl	80046e0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00f      	beq.n	80045b6 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f89f 	bl	80046f4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 808c 	beq.w	80046d8 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045c8:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045e0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f043 0201 	orr.w	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f043 0204 	orr.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f043 0210 	orr.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f818 	bl	8004708 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7c1b      	ldrb	r3, [r3, #16]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_DSI_SetGenericVCID+0x16>
 800472e:	2302      	movs	r3, #2
 8004730:	e016      	b.n	8004760 <HAL_DSI_SetGenericVCID+0x44>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0203 	bic.w	r2, r2, #3
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	7c1b      	ldrb	r3, [r3, #16]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800477e:	2302      	movs	r3, #2
 8004780:	e0c5      	b.n	800490e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0203 	bic.w	r2, r2, #3
 80047ce:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0207 	bic.w	r2, r2, #7
 80047f0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6959      	ldr	r1, [r3, #20]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	431a      	orrs	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020f 	bic.w	r2, r2, #15
 800481e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6919      	ldr	r1, [r3, #16]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 020e 	bic.w	r2, r2, #14
 8004842:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	005a      	lsls	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004890:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0202 	orr.w	r2, r2, #2
 8004902:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7c1b      	ldrb	r3, [r3, #16]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_DSI_ConfigCommand+0x16>
 800492e:	2302      	movs	r3, #2
 8004930:	e049      	b.n	80049c6 <HAL_DSI_ConfigCommand+0xaa>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <HAL_DSI_ConfigCommand+0xb8>)
 8004944:	400b      	ands	r3, r1
 8004946:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004956:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800495c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004962:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004968:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800496e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004974:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800497a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004980:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004986:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800498c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004992:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0202 	bic.w	r2, r2, #2
 80049aa:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	fef080ff 	.word	0xfef080ff

080049d8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7c1b      	ldrb	r3, [r3, #16]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_DSI_ConfigFlowControl+0x16>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e016      	b.n	8004a1c <HAL_DSI_ConfigFlowControl+0x44>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 021f 	bic.w	r2, r2, #31
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7c1b      	ldrb	r3, [r3, #16]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_DSI_ConfigPhyTimer+0x16>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e058      	b.n	8004af0 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf38      	it	cc
 8004a50:	4613      	movcc	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8004a64:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	041a      	lsls	r2, r3, #16
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8004a92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004acc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	021a      	lsls	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7c1b      	ldrb	r3, [r3, #16]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0b4      	b.n	8004c7c <HAL_DSI_ConfigHostTimeouts+0x180>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004b26:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	021a      	lsls	r2, r3, #8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	b292      	uxth	r2, r2
 8004b48:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	7c1b      	ldrb	r3, [r3, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e01b      	b.n	8004cd6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8004cb4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	065a      	lsls	r2, r3, #25
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	@ 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e177      	b.n	8004ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d00:	2201      	movs	r2, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 8166 	bne.w	8004fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d005      	beq.n	8004d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d130      	bne.n	8004d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	2203      	movs	r2, #3
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 0201 	and.w	r2, r3, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d017      	beq.n	8004dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d123      	bne.n	8004e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80c0 	beq.w	8004fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	4a65      	ldr	r2, [pc, #404]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e7a:	4b63      	ldr	r3, [pc, #396]	@ (8005008 <HAL_GPIO_Init+0x324>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e86:	4a61      	ldr	r2, [pc, #388]	@ (800500c <HAL_GPIO_Init+0x328>)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a58      	ldr	r2, [pc, #352]	@ (8005010 <HAL_GPIO_Init+0x32c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d037      	beq.n	8004f22 <HAL_GPIO_Init+0x23e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a57      	ldr	r2, [pc, #348]	@ (8005014 <HAL_GPIO_Init+0x330>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d031      	beq.n	8004f1e <HAL_GPIO_Init+0x23a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a56      	ldr	r2, [pc, #344]	@ (8005018 <HAL_GPIO_Init+0x334>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02b      	beq.n	8004f1a <HAL_GPIO_Init+0x236>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a55      	ldr	r2, [pc, #340]	@ (800501c <HAL_GPIO_Init+0x338>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d025      	beq.n	8004f16 <HAL_GPIO_Init+0x232>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a54      	ldr	r2, [pc, #336]	@ (8005020 <HAL_GPIO_Init+0x33c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01f      	beq.n	8004f12 <HAL_GPIO_Init+0x22e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a53      	ldr	r2, [pc, #332]	@ (8005024 <HAL_GPIO_Init+0x340>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d019      	beq.n	8004f0e <HAL_GPIO_Init+0x22a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a52      	ldr	r2, [pc, #328]	@ (8005028 <HAL_GPIO_Init+0x344>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_GPIO_Init+0x226>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a51      	ldr	r2, [pc, #324]	@ (800502c <HAL_GPIO_Init+0x348>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00d      	beq.n	8004f06 <HAL_GPIO_Init+0x222>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a50      	ldr	r2, [pc, #320]	@ (8005030 <HAL_GPIO_Init+0x34c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <HAL_GPIO_Init+0x21e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8005034 <HAL_GPIO_Init+0x350>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_GPIO_Init+0x21a>
 8004efa:	2309      	movs	r3, #9
 8004efc:	e012      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004efe:	230a      	movs	r3, #10
 8004f00:	e010      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f02:	2308      	movs	r3, #8
 8004f04:	e00e      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f06:	2307      	movs	r3, #7
 8004f08:	e00c      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f0a:	2306      	movs	r3, #6
 8004f0c:	e00a      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f0e:	2305      	movs	r3, #5
 8004f10:	e008      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f12:	2304      	movs	r3, #4
 8004f14:	e006      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f16:	2303      	movs	r3, #3
 8004f18:	e004      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e002      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_GPIO_Init+0x240>
 8004f22:	2300      	movs	r3, #0
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	f002 0203 	and.w	r2, r2, #3
 8004f2a:	0092      	lsls	r2, r2, #2
 8004f2c:	4093      	lsls	r3, r2
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f34:	4935      	ldr	r1, [pc, #212]	@ (800500c <HAL_GPIO_Init+0x328>)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f42:	4b3d      	ldr	r3, [pc, #244]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f66:	4a34      	ldr	r2, [pc, #208]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f6c:	4b32      	ldr	r3, [pc, #200]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f90:	4a29      	ldr	r2, [pc, #164]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f96:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fba:	4a1f      	ldr	r2, [pc, #124]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe4:	4a14      	ldr	r2, [pc, #80]	@ (8005038 <HAL_GPIO_Init+0x354>)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3301      	adds	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b0f      	cmp	r3, #15
 8004ff4:	f67f ae84 	bls.w	8004d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	@ 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	40013800 	.word	0x40013800
 8005010:	40020000 	.word	0x40020000
 8005014:	40020400 	.word	0x40020400
 8005018:	40020800 	.word	0x40020800
 800501c:	40020c00 	.word	0x40020c00
 8005020:	40021000 	.word	0x40021000
 8005024:	40021400 	.word	0x40021400
 8005028:	40021800 	.word	0x40021800
 800502c:	40021c00 	.word	0x40021c00
 8005030:	40022000 	.word	0x40022000
 8005034:	40022400 	.word	0x40022400
 8005038:	40013c00 	.word	0x40013c00

0800503c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	e001      	b.n	800505e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	4613      	mov	r3, r2
 800507a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800507c:	787b      	ldrb	r3, [r7, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005088:	e003      	b.n	8005092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	041a      	lsls	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af02      	add	r7, sp, #8
 80050a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e059      	b.n	8005164 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f00d fbb8 	bl	8012840 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2203      	movs	r2, #3
 80050d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050de:	d102      	bne.n	80050e6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f006 fefd 	bl	800beea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	7c1a      	ldrb	r2, [r3, #16]
 80050f8:	f88d 2000 	strb.w	r2, [sp]
 80050fc:	3304      	adds	r3, #4
 80050fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005100:	f006 fe7e 	bl	800be00 <USB_CoreInit>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e026      	b.n	8005164 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2101      	movs	r1, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f006 fef5 	bl	800bf0c <USB_SetCurrentMode>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e017      	b.n	8005164 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	7c1a      	ldrb	r2, [r3, #16]
 800513c:	f88d 2000 	strb.w	r2, [sp]
 8005140:	3304      	adds	r3, #4
 8005142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005144:	f007 f898 	bl	800c278 <USB_HostInit>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e004      	b.n	8005164 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b08b      	sub	sp, #44	@ 0x2c
 8005170:	af04      	add	r7, sp, #16
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	461a      	mov	r2, r3
 800517a:	4603      	mov	r3, r0
 800517c:	70fb      	strb	r3, [r7, #3]
 800517e:	460b      	mov	r3, r1
 8005180:	70bb      	strb	r3, [r7, #2]
 8005182:	4613      	mov	r3, r2
 8005184:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005186:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005188:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_HCD_HC_Init+0x2c>
 8005194:	2302      	movs	r3, #2
 8005196:	e09d      	b.n	80052d4 <HAL_HCD_HC_Init+0x168>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3319      	adds	r3, #25
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3314      	adds	r3, #20
 80051c4:	787a      	ldrb	r2, [r7, #1]
 80051c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3315      	adds	r3, #21
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3326      	adds	r3, #38	@ 0x26
 80051ec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80051f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	78bb      	ldrb	r3, [r7, #2]
 80051f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051fa:	b2d8      	uxtb	r0, r3
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3316      	adds	r3, #22
 800520a:	4602      	mov	r2, r0
 800520c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fbc8 	bl	80059a8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0a      	bge.n	8005236 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3317      	adds	r3, #23
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e009      	b.n	800524a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	3317      	adds	r3, #23
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f007 f96a 	bl	800c528 <USB_GetHostSpeed>
 8005254:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005256:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10b      	bne.n	8005276 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800525e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_HCD_HC_Init+0x10a>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005270:	d901      	bls.n	8005276 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005272:	23bc      	movs	r3, #188	@ 0xbc
 8005274:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3318      	adds	r3, #24
 8005286:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800528a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	b298      	uxth	r0, r3
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3328      	adds	r3, #40	@ 0x28
 80052a0:	4602      	mov	r2, r0
 80052a2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	787c      	ldrb	r4, [r7, #1]
 80052ae:	78ba      	ldrb	r2, [r7, #2]
 80052b0:	78f9      	ldrb	r1, [r7, #3]
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4623      	mov	r3, r4
 80052c2:	f007 f959 	bl	800c578 <USB_HC_Init>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}

080052dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_HCD_HC_Halt+0x1e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e00f      	b.n	800531a <HAL_HCD_HC_Halt+0x3e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	4611      	mov	r1, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f007 fceb 	bl	800cce6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	70fb      	strb	r3, [r7, #3]
 8005336:	460b      	mov	r3, r1
 8005338:	70bb      	strb	r3, [r7, #2]
 800533a:	4613      	mov	r3, r2
 800533c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	3317      	adds	r3, #23
 800534e:	78ba      	ldrb	r2, [r7, #2]
 8005350:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3326      	adds	r3, #38	@ 0x26
 8005362:	787a      	ldrb	r2, [r7, #1]
 8005364:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005366:	7c3b      	ldrb	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d114      	bne.n	8005396 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	332a      	adds	r3, #42	@ 0x2a
 800537c:	2203      	movs	r2, #3
 800537e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3319      	adds	r3, #25
 8005390:	7f3a      	ldrb	r2, [r7, #28]
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e009      	b.n	80053aa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	332a      	adds	r3, #42	@ 0x2a
 80053a6:	2202      	movs	r2, #2
 80053a8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80053aa:	787b      	ldrb	r3, [r7, #1]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	f200 8102 	bhi.w	80055b6 <HAL_HCD_HC_SubmitRequest+0x292>
 80053b2:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080055a1 	.word	0x080055a1
 80053c0:	0800548d 	.word	0x0800548d
 80053c4:	08005517 	.word	0x08005517
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80053c8:	7c3b      	ldrb	r3, [r7, #16]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	f040 80f5 	bne.w	80055ba <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80053d0:	78bb      	ldrb	r3, [r7, #2]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d12d      	bne.n	8005432 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80053d6:	8b3b      	ldrh	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	333d      	adds	r3, #61	@ 0x3d
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	333d      	adds	r3, #61	@ 0x3d
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	332a      	adds	r3, #42	@ 0x2a
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800541a:	e0ce      	b.n	80055ba <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	332a      	adds	r3, #42	@ 0x2a
 800542c:	2202      	movs	r2, #2
 800542e:	701a      	strb	r2, [r3, #0]
      break;
 8005430:	e0c3      	b.n	80055ba <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	331a      	adds	r3, #26
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	f040 80b8 	bne.w	80055ba <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	333c      	adds	r3, #60	@ 0x3c
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	332a      	adds	r3, #42	@ 0x2a
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
      break;
 8005474:	e0a1      	b.n	80055ba <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	332a      	adds	r3, #42	@ 0x2a
 8005486:	2202      	movs	r2, #2
 8005488:	701a      	strb	r2, [r3, #0]
      break;
 800548a:	e096      	b.n	80055ba <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800548c:	78bb      	ldrb	r3, [r7, #2]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d120      	bne.n	80054d4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	333d      	adds	r3, #61	@ 0x3d
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	332a      	adds	r3, #42	@ 0x2a
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80054bc:	e07e      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	332a      	adds	r3, #42	@ 0x2a
 80054ce:	2202      	movs	r2, #2
 80054d0:	701a      	strb	r2, [r3, #0]
      break;
 80054d2:	e073      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	333c      	adds	r3, #60	@ 0x3c
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	332a      	adds	r3, #42	@ 0x2a
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
      break;
 80054fe:	e05d      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	332a      	adds	r3, #42	@ 0x2a
 8005510:	2202      	movs	r2, #2
 8005512:	701a      	strb	r2, [r3, #0]
      break;
 8005514:	e052      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005516:	78bb      	ldrb	r3, [r7, #2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d120      	bne.n	800555e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	333d      	adds	r3, #61	@ 0x3d
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	332a      	adds	r3, #42	@ 0x2a
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005546:	e039      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	332a      	adds	r3, #42	@ 0x2a
 8005558:	2202      	movs	r2, #2
 800555a:	701a      	strb	r2, [r3, #0]
      break;
 800555c:	e02e      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	333c      	adds	r3, #60	@ 0x3c
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	332a      	adds	r3, #42	@ 0x2a
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
      break;
 8005588:	e018      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	332a      	adds	r3, #42	@ 0x2a
 800559a:	2202      	movs	r2, #2
 800559c:	701a      	strb	r2, [r3, #0]
      break;
 800559e:	e00d      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	332a      	adds	r3, #42	@ 0x2a
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
      break;
 80055b4:	e002      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80055ba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	332c      	adds	r3, #44	@ 0x2c
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	8b39      	ldrh	r1, [r7, #24]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4403      	add	r3, r0
 80055e0:	3334      	adds	r3, #52	@ 0x34
 80055e2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80055e4:	78fa      	ldrb	r2, [r7, #3]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	334c      	adds	r3, #76	@ 0x4c
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3338      	adds	r3, #56	@ 0x38
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	3315      	adds	r3, #21
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	334d      	adds	r3, #77	@ 0x4d
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4613      	mov	r3, r2
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	3310      	adds	r3, #16
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	1d19      	adds	r1, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	799b      	ldrb	r3, [r3, #6]
 800564e:	461a      	mov	r2, r3
 8005650:	f007 f8be 	bl	800c7d0 <USB_HC_StartXfer>
 8005654:	4603      	mov	r3, r0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop

08005660 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f006 fdbe 	bl	800c1f8 <USB_GetMode>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	f040 80fb 	bne.w	800587a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f006 fd81 	bl	800c190 <USB_ReadInterrupts>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80f1 	beq.w	8005878 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f006 fd78 	bl	800c190 <USB_ReadInterrupts>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056aa:	d104      	bne.n	80056b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80056b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f006 fd68 	bl	800c190 <USB_ReadInterrupts>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ca:	d104      	bne.n	80056d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80056d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f006 fd58 	bl	800c190 <USB_ReadInterrupts>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ea:	d104      	bne.n	80056f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80056f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f006 fd48 	bl	800c190 <USB_ReadInterrupts>
 8005700:	4603      	mov	r3, r0
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b02      	cmp	r3, #2
 8005708:	d103      	bne.n	8005712 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2202      	movs	r2, #2
 8005710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f006 fd3a 	bl	800c190 <USB_ReadInterrupts>
 800571c:	4603      	mov	r3, r0
 800571e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005726:	d120      	bne.n	800576a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005730:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d113      	bne.n	800576a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005742:	2110      	movs	r1, #16
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f006 fc2d 	bl	800bfa4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800574a:	6938      	ldr	r0, [r7, #16]
 800574c:	f006 fc5c 	bl	800c008 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	7a5b      	ldrb	r3, [r3, #9]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d105      	bne.n	8005764 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f006 fe42 	bl	800c3e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f00d f8e9 	bl	801293c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f006 fd0e 	bl	800c190 <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800577a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800577e:	d102      	bne.n	8005786 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 fd4d 	bl	8007220 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f006 fd00 	bl	800c190 <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b08      	cmp	r3, #8
 8005798:	d106      	bne.n	80057a8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f00d f8b2 	bl	8012904 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2208      	movs	r2, #8
 80057a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f006 fcef 	bl	800c190 <USB_ReadInterrupts>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057bc:	d139      	bne.n	8005832 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f007 fa7e 	bl	800ccc4 <USB_HC_ReadInterrupt>
 80057c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e025      	b.n	800581c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d018      	beq.n	8005816 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057fa:	d106      	bne.n	800580a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f905 	bl	8005a12 <HCD_HC_IN_IRQHandler>
 8005808:	e005      	b.n	8005816 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 ff67 	bl	80066e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	3301      	adds	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	795b      	ldrb	r3, [r3, #5]
 8005820:	461a      	mov	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4293      	cmp	r3, r2
 8005826:	d3d3      	bcc.n	80057d0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f006 fcaa 	bl	800c190 <USB_ReadInterrupts>
 800583c:	4603      	mov	r3, r0
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d101      	bne.n	800584a <HAL_HCD_IRQHandler+0x1ea>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_HCD_IRQHandler+0x1ec>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d014      	beq.n	800587a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0210 	bic.w	r2, r2, #16
 800585e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 fbfe 	bl	8007062 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0210 	orr.w	r2, r2, #16
 8005874:	619a      	str	r2, [r3, #24]
 8005876:	e000      	b.n	800587a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005878:	bf00      	nop
    }
  }
}
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_HCD_Start+0x16>
 8005892:	2302      	movs	r3, #2
 8005894:	e013      	b.n	80058be <HAL_HCD_Start+0x3e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2101      	movs	r1, #1
 80058a4:	4618      	mov	r0, r3
 80058a6:	f006 fe06 	bl	800c4b6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f006 fb0a 	bl	800bec8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_HCD_Stop+0x16>
 80058d8:	2302      	movs	r3, #2
 80058da:	e00d      	b.n	80058f8 <HAL_HCD_Stop+0x32>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f007 fb59 	bl	800cfa0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f006 fda8 	bl	800c462 <USB_ResetPort>
 8005912:	4603      	mov	r3, r0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	334c      	adds	r3, #76	@ 0x4c
 8005938:	781b      	ldrb	r3, [r3, #0]
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	460b      	mov	r3, r1
 8005950:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	3338      	adds	r3, #56	@ 0x38
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f006 fdea 	bl	800c556 <USB_GetCurrentFrame>
 8005982:	4603      	mov	r3, r0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f006 fdc5 	bl	800c528 <USB_GetHostSpeed>
 800599e:	4603      	mov	r3, r0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	331a      	adds	r3, #26
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	331b      	adds	r3, #27
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	3325      	adds	r3, #37	@ 0x25
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	3324      	adds	r3, #36	@ 0x24
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f006 fbc0 	bl	800c1b6 <USB_ReadChInterrupts>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d11a      	bne.n	8005a76 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2304      	movs	r3, #4
 8005a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	334d      	adds	r3, #77	@ 0x4d
 8005a62:	2207      	movs	r2, #7
 8005a64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f007 f939 	bl	800cce6 <USB_HC_Halt>
 8005a74:	e09e      	b.n	8005bb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	78fa      	ldrb	r2, [r7, #3]
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f006 fb99 	bl	800c1b6 <USB_ReadChInterrupts>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a8e:	d11b      	bne.n	8005ac8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	334d      	adds	r3, #77	@ 0x4d
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f007 f910 	bl	800cce6 <USB_HC_Halt>
 8005ac6:	e075      	b.n	8005bb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f006 fb70 	bl	800c1b6 <USB_ReadChInterrupts>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d11a      	bne.n	8005b16 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aec:	461a      	mov	r2, r3
 8005aee:	2308      	movs	r3, #8
 8005af0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	334d      	adds	r3, #77	@ 0x4d
 8005b02:	2206      	movs	r2, #6
 8005b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	78fa      	ldrb	r2, [r7, #3]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f007 f8e9 	bl	800cce6 <USB_HC_Halt>
 8005b14:	e04e      	b.n	8005bb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	78fa      	ldrb	r2, [r7, #3]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f006 fb49 	bl	800c1b6 <USB_ReadChInterrupts>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2e:	d11b      	bne.n	8005b68 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	334d      	adds	r3, #77	@ 0x4d
 8005b54:	2209      	movs	r2, #9
 8005b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f007 f8c0 	bl	800cce6 <USB_HC_Halt>
 8005b66:	e025      	b.n	8005bb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f006 fb20 	bl	800c1b6 <USB_ReadChInterrupts>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7c:	2b80      	cmp	r3, #128	@ 0x80
 8005b7e:	d119      	bne.n	8005bb4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2380      	movs	r3, #128	@ 0x80
 8005b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	334d      	adds	r3, #77	@ 0x4d
 8005ba2:	2207      	movs	r2, #7
 8005ba4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f007 f899 	bl	800cce6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f006 fafa 	bl	800c1b6 <USB_ReadChInterrupts>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bcc:	d112      	bne.n	8005bf4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f007 f885 	bl	800cce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be8:	461a      	mov	r2, r3
 8005bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bee:	6093      	str	r3, [r2, #8]
 8005bf0:	f000 bd75 	b.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f006 fada 	bl	800c1b6 <USB_ReadChInterrupts>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	f040 8128 	bne.w	8005e5e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005c20:	78fa      	ldrb	r2, [r7, #3]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	331b      	adds	r3, #27
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d119      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	331b      	adds	r3, #27
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c68:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	799b      	ldrb	r3, [r3, #6]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01b      	beq.n	8005caa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	3330      	adds	r3, #48	@ 0x30
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	1ac9      	subs	r1, r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4403      	add	r3, r0
 8005ca6:	3338      	adds	r3, #56	@ 0x38
 8005ca8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	334d      	adds	r3, #77	@ 0x4d
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005cbe:	78fa      	ldrb	r2, [r7, #3]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3344      	adds	r3, #68	@ 0x44
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3326      	adds	r3, #38	@ 0x26
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3326      	adds	r3, #38	@ 0x26
 8005d0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d110      	bne.n	8005d32 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f006 ffe4 	bl	800cce6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	6093      	str	r3, [r2, #8]
 8005d30:	e03d      	b.n	8005dae <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3326      	adds	r3, #38	@ 0x26
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d00a      	beq.n	8005d5e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3326      	adds	r3, #38	@ 0x26
 8005d58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d127      	bne.n	8005dae <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d7c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d7e:	78fa      	ldrb	r2, [r7, #3]
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	334c      	adds	r3, #76	@ 0x4c
 8005d8e:	2201      	movs	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	334c      	adds	r3, #76	@ 0x4c
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f00c fdd5 	bl	8012958 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	799b      	ldrb	r3, [r3, #6]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d13b      	bne.n	8005e2e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3338      	adds	r3, #56	@ 0x38
 8005dc6:	6819      	ldr	r1, [r3, #0]
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4403      	add	r3, r0
 8005dd6:	3328      	adds	r3, #40	@ 0x28
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	440b      	add	r3, r1
 8005ddc:	1e59      	subs	r1, r3, #1
 8005dde:	78fa      	ldrb	r2, [r7, #3]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4403      	add	r3, r0
 8005dec:	3328      	adds	r3, #40	@ 0x28
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8470 	beq.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	333c      	adds	r3, #60	@ 0x3c
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	78fa      	ldrb	r2, [r7, #3]
 8005e12:	f083 0301 	eor.w	r3, r3, #1
 8005e16:	b2d8      	uxtb	r0, r3
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	333c      	adds	r3, #60	@ 0x3c
 8005e26:	4602      	mov	r2, r0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	f000 bc58 	b.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	333c      	adds	r3, #60	@ 0x3c
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	f083 0301 	eor.w	r3, r3, #1
 8005e46:	b2d8      	uxtb	r0, r3
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	333c      	adds	r3, #60	@ 0x3c
 8005e56:	4602      	mov	r2, r0
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	f000 bc40 	b.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	4611      	mov	r1, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f006 f9a5 	bl	800c1b6 <USB_ReadChInterrupts>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d131      	bne.n	8005eda <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e82:	461a      	mov	r2, r3
 8005e84:	2320      	movs	r3, #32
 8005e86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	331a      	adds	r3, #26
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	f040 841f 	bne.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	331b      	adds	r3, #27
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	334d      	adds	r3, #77	@ 0x4d
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f006 ff08 	bl	800cce6 <USB_HC_Halt>
 8005ed6:	f000 bc02 	b.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f006 f967 	bl	800c1b6 <USB_ReadChInterrupts>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f040 8305 	bne.w	80064fe <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	2302      	movs	r3, #2
 8005f04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	334d      	adds	r3, #77	@ 0x4d
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d114      	bne.n	8005f46 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	334d      	adds	r3, #77	@ 0x4d
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	334c      	adds	r3, #76	@ 0x4c
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e2cc      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	334d      	adds	r3, #77	@ 0x4d
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d114      	bne.n	8005f86 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	334d      	adds	r3, #77	@ 0x4d
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	334c      	adds	r3, #76	@ 0x4c
 8005f80:	2205      	movs	r2, #5
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e2ac      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	334d      	adds	r3, #77	@ 0x4d
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b07      	cmp	r3, #7
 8005f9a:	d00b      	beq.n	8005fb4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	334d      	adds	r3, #77	@ 0x4d
 8005fac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	f040 80a6 	bne.w	8006100 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	334d      	adds	r3, #77	@ 0x4d
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	3344      	adds	r3, #68	@ 0x44
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4403      	add	r3, r0
 8005fe8:	3344      	adds	r3, #68	@ 0x44
 8005fea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3344      	adds	r3, #68	@ 0x44
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d943      	bls.n	800608a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3344      	adds	r3, #68	@ 0x44
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	331a      	adds	r3, #26
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d123      	bne.n	8006074 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	331b      	adds	r3, #27
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	331c      	adds	r3, #28
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800606e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006072:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	334c      	adds	r3, #76	@ 0x4c
 8006084:	2204      	movs	r2, #4
 8006086:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006088:	e229      	b.n	80064de <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	334c      	adds	r3, #76	@ 0x4c
 800609a:	2202      	movs	r2, #2
 800609c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	3326      	adds	r3, #38	@ 0x26
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	3326      	adds	r3, #38	@ 0x26
 80060c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	f040 8209 	bne.w	80064de <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	461a      	mov	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060fe:	e1ee      	b.n	80064de <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	334d      	adds	r3, #77	@ 0x4d
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b05      	cmp	r3, #5
 8006114:	f040 80c8 	bne.w	80062a8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	334d      	adds	r3, #77	@ 0x4d
 8006128:	2202      	movs	r2, #2
 800612a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	331b      	adds	r3, #27
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	f040 81ce 	bne.w	80064e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	3326      	adds	r3, #38	@ 0x26
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d16b      	bne.n	8006232 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800615a:	78fa      	ldrb	r2, [r7, #3]
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	3348      	adds	r3, #72	@ 0x48
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4403      	add	r3, r0
 800617a:	3348      	adds	r3, #72	@ 0x48
 800617c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3348      	adds	r3, #72	@ 0x48
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d943      	bls.n	800621c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006194:	78fa      	ldrb	r2, [r7, #3]
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	3348      	adds	r3, #72	@ 0x48
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	331b      	adds	r3, #27
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	3344      	adds	r3, #68	@ 0x44
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d809      	bhi.n	80061e6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	331c      	adds	r3, #28
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006204:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	440b      	add	r3, r1
 8006214:	334c      	adds	r3, #76	@ 0x4c
 8006216:	2204      	movs	r2, #4
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	e014      	b.n	8006246 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	334c      	adds	r3, #76	@ 0x4c
 800622c:	2202      	movs	r2, #2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e009      	b.n	8006246 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	334c      	adds	r3, #76	@ 0x4c
 8006242:	2202      	movs	r2, #2
 8006244:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	3326      	adds	r3, #38	@ 0x26
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800625c:	78fa      	ldrb	r2, [r7, #3]
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4613      	mov	r3, r2
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	3326      	adds	r3, #38	@ 0x26
 800626c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800626e:	2b02      	cmp	r3, #2
 8006270:	f040 8136 	bne.w	80064e0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800628a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006292:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a0:	461a      	mov	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e11b      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	334d      	adds	r3, #77	@ 0x4d
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	f040 8081 	bne.w	80063c2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062c0:	78fa      	ldrb	r2, [r7, #3]
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	334d      	adds	r3, #77	@ 0x4d
 80062d0:	2202      	movs	r2, #2
 80062d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80062d4:	78fa      	ldrb	r2, [r7, #3]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	331b      	adds	r3, #27
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	f040 80fa 	bne.w	80064e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	334c      	adds	r3, #76	@ 0x4c
 80062fc:	2202      	movs	r2, #2
 80062fe:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	78fa      	ldrb	r2, [r7, #3]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	440a      	add	r2, r1
 8006316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800631a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800631e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	440a      	add	r2, r1
 8006336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	440a      	add	r2, r1
 8006356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800635a:	f023 0320 	bic.w	r3, r3, #32
 800635e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	3326      	adds	r3, #38	@ 0x26
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	3326      	adds	r3, #38	@ 0x26
 8006386:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006388:	2b02      	cmp	r3, #2
 800638a:	f040 80a9 	bne.w	80064e0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ba:	461a      	mov	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	e08e      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	334d      	adds	r3, #77	@ 0x4d
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d143      	bne.n	8006460 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	334d      	adds	r3, #77	@ 0x4d
 80063e8:	2202      	movs	r2, #2
 80063ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	334c      	adds	r3, #76	@ 0x4c
 80063fc:	2202      	movs	r2, #2
 80063fe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	3326      	adds	r3, #38	@ 0x26
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3326      	adds	r3, #38	@ 0x26
 8006426:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006428:	2b02      	cmp	r3, #2
 800642a:	d159      	bne.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006442:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800644a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e03f      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	334d      	adds	r3, #77	@ 0x4d
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b08      	cmp	r3, #8
 8006474:	d126      	bne.n	80064c4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	334d      	adds	r3, #77	@ 0x4d
 8006486:	2202      	movs	r2, #2
 8006488:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	1a9b      	subs	r3, r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	3344      	adds	r3, #68	@ 0x44
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4403      	add	r3, r0
 80064aa:	3344      	adds	r3, #68	@ 0x44
 80064ac:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	334c      	adds	r3, #76	@ 0x4c
 80064be:	2204      	movs	r2, #4
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e00d      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	4613      	mov	r3, r2
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	334d      	adds	r3, #77	@ 0x4d
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	f000 8100 	beq.w	80066dc <HCD_HC_IN_IRQHandler+0xcca>
 80064dc:	e000      	b.n	80064e0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80064de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	334c      	adds	r3, #76	@ 0x4c
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f00c fa2e 	bl	8012958 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064fc:	e0ef      	b.n	80066de <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f005 fe55 	bl	800c1b6 <USB_ReadChInterrupts>
 800650c:	4603      	mov	r3, r0
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d12f      	bne.n	8006576 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006522:	461a      	mov	r2, r3
 8006524:	2340      	movs	r3, #64	@ 0x40
 8006526:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	334d      	adds	r3, #77	@ 0x4d
 8006538:	2205      	movs	r2, #5
 800653a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	331a      	adds	r3, #26
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	3344      	adds	r3, #68	@ 0x44
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f006 fbb9 	bl	800cce6 <USB_HC_Halt>
 8006574:	e0b3      	b.n	80066de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f005 fe19 	bl	800c1b6 <USB_ReadChInterrupts>
 8006584:	4603      	mov	r3, r0
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	f040 80a7 	bne.w	80066de <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3326      	adds	r3, #38	@ 0x26
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d11b      	bne.n	80065de <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	3344      	adds	r3, #68	@ 0x44
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80065ba:	78fa      	ldrb	r2, [r7, #3]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	334d      	adds	r3, #77	@ 0x4d
 80065ca:	2204      	movs	r2, #4
 80065cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f006 fb85 	bl	800cce6 <USB_HC_Halt>
 80065dc:	e03f      	b.n	800665e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	3326      	adds	r3, #38	@ 0x26
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	3326      	adds	r3, #38	@ 0x26
 8006604:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006606:	2b02      	cmp	r3, #2
 8006608:	d129      	bne.n	800665e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	3344      	adds	r3, #68	@ 0x44
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	799b      	ldrb	r3, [r3, #6]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HCD_HC_IN_IRQHandler+0xc2a>
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	331b      	adds	r3, #27
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d110      	bne.n	800665e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4613      	mov	r3, r2
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	334d      	adds	r3, #77	@ 0x4d
 800664c:	2204      	movs	r2, #4
 800664e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	78fa      	ldrb	r2, [r7, #3]
 8006656:	4611      	mov	r1, r2
 8006658:	4618      	mov	r0, r3
 800665a:	f006 fb44 	bl	800cce6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	331b      	adds	r3, #27
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d129      	bne.n	80066c8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	331b      	adds	r3, #27
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4413      	add	r3, r2
 8006690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	440a      	add	r2, r1
 800669e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066c2:	f043 0320 	orr.w	r3, r3, #32
 80066c6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d4:	461a      	mov	r2, r3
 80066d6:	2310      	movs	r3, #16
 80066d8:	6093      	str	r3, [r2, #8]
 80066da:	e000      	b.n	80066de <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80066dc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	4611      	mov	r1, r2
 8006702:	4618      	mov	r0, r3
 8006704:	f005 fd57 	bl	800c1b6 <USB_ReadChInterrupts>
 8006708:	4603      	mov	r3, r0
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b04      	cmp	r3, #4
 8006710:	d11b      	bne.n	800674a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671e:	461a      	mov	r2, r3
 8006720:	2304      	movs	r3, #4
 8006722:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	334d      	adds	r3, #77	@ 0x4d
 8006734:	2207      	movs	r2, #7
 8006736:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	4611      	mov	r1, r2
 8006740:	4618      	mov	r0, r3
 8006742:	f006 fad0 	bl	800cce6 <USB_HC_Halt>
 8006746:	f000 bc89 	b.w	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f005 fd2f 	bl	800c1b6 <USB_ReadChInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b20      	cmp	r3, #32
 8006760:	f040 8082 	bne.w	8006868 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006770:	461a      	mov	r2, r3
 8006772:	2320      	movs	r3, #32
 8006774:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3319      	adds	r3, #25
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d124      	bne.n	80067d6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	3319      	adds	r3, #25
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	334c      	adds	r3, #76	@ 0x4c
 80067b0:	2202      	movs	r2, #2
 80067b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	334d      	adds	r3, #77	@ 0x4d
 80067c4:	2203      	movs	r2, #3
 80067c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	78fa      	ldrb	r2, [r7, #3]
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f006 fa88 	bl	800cce6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	331a      	adds	r3, #26
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f040 8437 	bne.w	800705c <HCD_HC_OUT_IRQHandler+0x978>
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	331b      	adds	r3, #27
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 842b 	bne.w	800705c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	3326      	adds	r3, #38	@ 0x26
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d009      	beq.n	8006830 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	331b      	adds	r3, #27
 800682c:	2201      	movs	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	4613      	mov	r3, r2
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	334d      	adds	r3, #77	@ 0x4d
 8006840:	2203      	movs	r2, #3
 8006842:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	4611      	mov	r1, r2
 800684c:	4618      	mov	r0, r3
 800684e:	f006 fa4a 	bl	800cce6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3344      	adds	r3, #68	@ 0x44
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e3f9      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f005 fca0 	bl	800c1b6 <USB_ReadChInterrupts>
 8006876:	4603      	mov	r3, r0
 8006878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800687c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006880:	d111      	bne.n	80068a6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688e:	461a      	mov	r2, r3
 8006890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006894:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f006 fa21 	bl	800cce6 <USB_HC_Halt>
 80068a4:	e3da      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f005 fc81 	bl	800c1b6 <USB_ReadChInterrupts>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d168      	bne.n	8006990 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3344      	adds	r3, #68	@ 0x44
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f005 fc6b 	bl	800c1b6 <USB_ReadChInterrupts>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d112      	bne.n	8006910 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3319      	adds	r3, #25
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690a:	461a      	mov	r2, r3
 800690c:	2340      	movs	r3, #64	@ 0x40
 800690e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	331b      	adds	r3, #27
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d019      	beq.n	800695a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	331b      	adds	r3, #27
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	440a      	add	r2, r1
 8006950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006958:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006966:	461a      	mov	r2, r3
 8006968:	2301      	movs	r3, #1
 800696a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	334d      	adds	r3, #77	@ 0x4d
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	78fa      	ldrb	r2, [r7, #3]
 8006986:	4611      	mov	r1, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f006 f9ac 	bl	800cce6 <USB_HC_Halt>
 800698e:	e365      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f005 fc0c 	bl	800c1b6 <USB_ReadChInterrupts>
 800699e:	4603      	mov	r3, r0
 80069a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a4:	2b40      	cmp	r3, #64	@ 0x40
 80069a6:	d139      	bne.n	8006a1c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80069a8:	78fa      	ldrb	r2, [r7, #3]
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4613      	mov	r3, r2
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	334d      	adds	r3, #77	@ 0x4d
 80069b8:	2205      	movs	r2, #5
 80069ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	331a      	adds	r3, #26
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	3319      	adds	r3, #25
 80069e2:	2201      	movs	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3344      	adds	r3, #68	@ 0x44
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	78fa      	ldrb	r2, [r7, #3]
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f006 f96f 	bl	800cce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a14:	461a      	mov	r2, r3
 8006a16:	2340      	movs	r3, #64	@ 0x40
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	e31f      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f005 fbc6 	bl	800c1b6 <USB_ReadChInterrupts>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d11a      	bne.n	8006a6a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a40:	461a      	mov	r2, r3
 8006a42:	2308      	movs	r3, #8
 8006a44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	334d      	adds	r3, #77	@ 0x4d
 8006a56:	2206      	movs	r2, #6
 8006a58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	4611      	mov	r1, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f006 f93f 	bl	800cce6 <USB_HC_Halt>
 8006a68:	e2f8      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f005 fb9f 	bl	800c1b6 <USB_ReadChInterrupts>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d144      	bne.n	8006b0c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3344      	adds	r3, #68	@ 0x44
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	334d      	adds	r3, #77	@ 0x4d
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3319      	adds	r3, #25
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d114      	bne.n	8006aea <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	3318      	adds	r3, #24
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3319      	adds	r3, #25
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f006 f8f7 	bl	800cce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b04:	461a      	mov	r2, r3
 8006b06:	2310      	movs	r3, #16
 8006b08:	6093      	str	r3, [r2, #8]
 8006b0a:	e2a7      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f005 fb4e 	bl	800c1b6 <USB_ReadChInterrupts>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b20:	2b80      	cmp	r3, #128	@ 0x80
 8006b22:	f040 8083 	bne.w	8006c2c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	799b      	ldrb	r3, [r3, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d111      	bne.n	8006b52 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	334d      	adds	r3, #77	@ 0x4d
 8006b3e:	2207      	movs	r2, #7
 8006b40:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f006 f8cb 	bl	800cce6 <USB_HC_Halt>
 8006b50:	e062      	b.n	8006c18 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006b52:	78fa      	ldrb	r2, [r7, #3]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3344      	adds	r3, #68	@ 0x44
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	1c59      	adds	r1, r3, #1
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4403      	add	r3, r0
 8006b72:	3344      	adds	r3, #68	@ 0x44
 8006b74:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3344      	adds	r3, #68	@ 0x44
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d922      	bls.n	8006bd2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	3344      	adds	r3, #68	@ 0x44
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	334c      	adds	r3, #76	@ 0x4c
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	334c      	adds	r3, #76	@ 0x4c
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f00b fec4 	bl	8012958 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bd0:	e022      	b.n	8006c18 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	334c      	adds	r3, #76	@ 0x4c
 8006be2:	2202      	movs	r2, #2
 8006be4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bfc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c04:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c12:	461a      	mov	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c24:	461a      	mov	r2, r3
 8006c26:	2380      	movs	r3, #128	@ 0x80
 8006c28:	6093      	str	r3, [r2, #8]
 8006c2a:	e217      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f005 fabe 	bl	800c1b6 <USB_ReadChInterrupts>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c44:	d11b      	bne.n	8006c7e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	334d      	adds	r3, #77	@ 0x4d
 8006c56:	2209      	movs	r2, #9
 8006c58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f006 f83f 	bl	800cce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c74:	461a      	mov	r2, r3
 8006c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c7a:	6093      	str	r3, [r2, #8]
 8006c7c:	e1ee      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f005 fa95 	bl	800c1b6 <USB_ReadChInterrupts>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	f040 81df 	bne.w	8007056 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	334d      	adds	r3, #77	@ 0x4d
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 8093 	bne.w	8006de8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	334d      	adds	r3, #77	@ 0x4d
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	334c      	adds	r3, #76	@ 0x4c
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	1a9b      	subs	r3, r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3326      	adds	r3, #38	@ 0x26
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d00b      	beq.n	8006d18 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006d00:	78fa      	ldrb	r2, [r7, #3]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3326      	adds	r3, #38	@ 0x26
 8006d10:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	f040 8190 	bne.w	8007038 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	799b      	ldrb	r3, [r3, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d115      	bne.n	8006d4c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	333d      	adds	r3, #61	@ 0x3d
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	f083 0301 	eor.w	r3, r3, #1
 8006d38:	b2d8      	uxtb	r0, r3
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	333d      	adds	r3, #61	@ 0x3d
 8006d48:	4602      	mov	r2, r0
 8006d4a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	799b      	ldrb	r3, [r3, #6]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 8171 	bne.w	8007038 <HCD_HC_OUT_IRQHandler+0x954>
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3334      	adds	r3, #52	@ 0x34
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8165 	beq.w	8007038 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3334      	adds	r3, #52	@ 0x34
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4403      	add	r3, r0
 8006d8e:	3328      	adds	r3, #40	@ 0x28
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	440b      	add	r3, r1
 8006d94:	1e59      	subs	r1, r3, #1
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4403      	add	r3, r0
 8006da4:	3328      	adds	r3, #40	@ 0x28
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dac:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 813f 	beq.w	8007038 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	333d      	adds	r3, #61	@ 0x3d
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	f083 0301 	eor.w	r3, r3, #1
 8006dd2:	b2d8      	uxtb	r0, r3
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	333d      	adds	r3, #61	@ 0x3d
 8006de2:	4602      	mov	r2, r0
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e127      	b.n	8007038 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	334d      	adds	r3, #77	@ 0x4d
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d120      	bne.n	8006e40 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	334d      	adds	r3, #77	@ 0x4d
 8006e0e:	2202      	movs	r2, #2
 8006e10:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	1a9b      	subs	r3, r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	331b      	adds	r3, #27
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	f040 8107 	bne.w	8007038 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	334c      	adds	r3, #76	@ 0x4c
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e0fb      	b.n	8007038 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	334d      	adds	r3, #77	@ 0x4d
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d13a      	bne.n	8006ecc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	334d      	adds	r3, #77	@ 0x4d
 8006e66:	2202      	movs	r2, #2
 8006e68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	334c      	adds	r3, #76	@ 0x4c
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	331b      	adds	r3, #27
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 80d1 	bne.w	8007038 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	331b      	adds	r3, #27
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ec8:	6053      	str	r3, [r2, #4]
 8006eca:	e0b5      	b.n	8007038 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	334d      	adds	r3, #77	@ 0x4d
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d114      	bne.n	8006f0c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	334d      	adds	r3, #77	@ 0x4d
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	334c      	adds	r3, #76	@ 0x4c
 8006f06:	2202      	movs	r2, #2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	e095      	b.n	8007038 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	334d      	adds	r3, #77	@ 0x4d
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d114      	bne.n	8006f4c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	1a9b      	subs	r3, r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	334d      	adds	r3, #77	@ 0x4d
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	334c      	adds	r3, #76	@ 0x4c
 8006f46:	2205      	movs	r2, #5
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	e075      	b.n	8007038 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f4c:	78fa      	ldrb	r2, [r7, #3]
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	334d      	adds	r3, #77	@ 0x4d
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b07      	cmp	r3, #7
 8006f60:	d00a      	beq.n	8006f78 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	334d      	adds	r3, #77	@ 0x4d
 8006f72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d170      	bne.n	800705a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	334d      	adds	r3, #77	@ 0x4d
 8006f88:	2202      	movs	r2, #2
 8006f8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	1a9b      	subs	r3, r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	3344      	adds	r3, #68	@ 0x44
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	1c59      	adds	r1, r3, #1
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4403      	add	r3, r0
 8006fac:	3344      	adds	r3, #68	@ 0x44
 8006fae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	3344      	adds	r3, #68	@ 0x44
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d914      	bls.n	8006ff0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3344      	adds	r3, #68	@ 0x44
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	334c      	adds	r3, #76	@ 0x4c
 8006fea:	2204      	movs	r2, #4
 8006fec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006fee:	e022      	b.n	8007036 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	334c      	adds	r3, #76	@ 0x4c
 8007000:	2202      	movs	r2, #2
 8007002:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800701a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007022:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007030:	461a      	mov	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007036:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	334c      	adds	r3, #76	@ 0x4c
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f00b fc82 	bl	8012958 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007054:	e002      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800705a:	bf00      	nop
  }
}
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08a      	sub	sp, #40	@ 0x28
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	0c5b      	lsrs	r3, r3, #17
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	091b      	lsrs	r3, r3, #4
 8007092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007096:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d004      	beq.n	80070a8 <HCD_RXQLVL_IRQHandler+0x46>
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	f000 80b6 	beq.w	8007212 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80070a6:	e0b7      	b.n	8007218 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80b3 	beq.w	8007216 <HCD_RXQLVL_IRQHandler+0x1b4>
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4613      	mov	r3, r2
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	332c      	adds	r3, #44	@ 0x2c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80a7 	beq.w	8007216 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	4613      	mov	r3, r2
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	3338      	adds	r3, #56	@ 0x38
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	18d1      	adds	r1, r2, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4403      	add	r3, r0
 80070ec:	3334      	adds	r3, #52	@ 0x34
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4299      	cmp	r1, r3
 80070f2:	f200 8083 	bhi.w	80071fc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4613      	mov	r3, r2
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	332c      	adds	r3, #44	@ 0x2c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	b292      	uxth	r2, r2
 8007110:	4619      	mov	r1, r3
 8007112:	f004 ffe5 	bl	800c0e0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	4613      	mov	r3, r2
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	332c      	adds	r3, #44	@ 0x2c
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	18d1      	adds	r1, r2, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4613      	mov	r3, r2
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4403      	add	r3, r0
 800713a:	332c      	adds	r3, #44	@ 0x2c
 800713c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4613      	mov	r3, r2
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	440b      	add	r3, r1
 800714c:	3338      	adds	r3, #56	@ 0x38
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	18d1      	adds	r1, r2, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4613      	mov	r3, r2
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4403      	add	r3, r0
 8007162:	3338      	adds	r3, #56	@ 0x38
 8007164:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	0cdb      	lsrs	r3, r3, #19
 8007176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800717a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	4613      	mov	r3, r2
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	3328      	adds	r3, #40	@ 0x28
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4293      	cmp	r3, r2
 8007194:	d13f      	bne.n	8007216 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d03c      	beq.n	8007216 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	4613      	mov	r3, r2
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	333c      	adds	r3, #60	@ 0x3c
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f083 0301 	eor.w	r3, r3, #1
 80071e4:	b2d8      	uxtb	r0, r3
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4613      	mov	r3, r2
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	333c      	adds	r3, #60	@ 0x3c
 80071f6:	4602      	mov	r2, r0
 80071f8:	701a      	strb	r2, [r3, #0]
      break;
 80071fa:	e00c      	b.n	8007216 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4613      	mov	r3, r2
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	334c      	adds	r3, #76	@ 0x4c
 800720c:	2204      	movs	r2, #4
 800720e:	701a      	strb	r2, [r3, #0]
      break;
 8007210:	e001      	b.n	8007216 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007212:	bf00      	nop
 8007214:	e000      	b.n	8007218 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007216:	bf00      	nop
  }
}
 8007218:	bf00      	nop
 800721a:	3728      	adds	r7, #40	@ 0x28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800724c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d10b      	bne.n	8007270 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d102      	bne.n	8007268 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f00b fb5c 	bl	8012920 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f043 0302 	orr.w	r3, r3, #2
 800726e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b08      	cmp	r3, #8
 8007278:	d132      	bne.n	80072e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f043 0308 	orr.w	r3, r3, #8
 8007280:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d126      	bne.n	80072da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	7a5b      	ldrb	r3, [r3, #9]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d113      	bne.n	80072bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800729a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800729e:	d106      	bne.n	80072ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2102      	movs	r1, #2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f005 f89e 	bl	800c3e8 <USB_InitFSLSPClkSel>
 80072ac:	e011      	b.n	80072d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2101      	movs	r1, #1
 80072b4:	4618      	mov	r0, r3
 80072b6:	f005 f897 	bl	800c3e8 <USB_InitFSLSPClkSel>
 80072ba:	e00a      	b.n	80072d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	79db      	ldrb	r3, [r3, #7]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d106      	bne.n	80072d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ca:	461a      	mov	r2, r3
 80072cc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80072d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f00b fb4e 	bl	8012974 <HAL_HCD_PortEnabled_Callback>
 80072d8:	e002      	b.n	80072e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f00b fb58 	bl	8012990 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d103      	bne.n	80072f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f043 0320 	orr.w	r3, r3, #32
 80072f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072f8:	461a      	mov	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6013      	str	r3, [r2, #0]
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e12b      	b.n	8007572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fb fa1a 	bl	8002768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2224      	movs	r2, #36	@ 0x24
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0201 	bic.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800735a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800736a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800736c:	f000 ff82 	bl	8008274 <HAL_RCC_GetPCLK1Freq>
 8007370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4a81      	ldr	r2, [pc, #516]	@ (800757c <HAL_I2C_Init+0x274>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d807      	bhi.n	800738c <HAL_I2C_Init+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a80      	ldr	r2, [pc, #512]	@ (8007580 <HAL_I2C_Init+0x278>)
 8007380:	4293      	cmp	r3, r2
 8007382:	bf94      	ite	ls
 8007384:	2301      	movls	r3, #1
 8007386:	2300      	movhi	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e006      	b.n	800739a <HAL_I2C_Init+0x92>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a7d      	ldr	r2, [pc, #500]	@ (8007584 <HAL_I2C_Init+0x27c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	bf94      	ite	ls
 8007394:	2301      	movls	r3, #1
 8007396:	2300      	movhi	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e0e7      	b.n	8007572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a78      	ldr	r2, [pc, #480]	@ (8007588 <HAL_I2C_Init+0x280>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	0c9b      	lsrs	r3, r3, #18
 80073ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a6a      	ldr	r2, [pc, #424]	@ (800757c <HAL_I2C_Init+0x274>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d802      	bhi.n	80073dc <HAL_I2C_Init+0xd4>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3301      	adds	r3, #1
 80073da:	e009      	b.n	80073f0 <HAL_I2C_Init+0xe8>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	4a69      	ldr	r2, [pc, #420]	@ (800758c <HAL_I2C_Init+0x284>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	099b      	lsrs	r3, r3, #6
 80073ee:	3301      	adds	r3, #1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007402:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	495c      	ldr	r1, [pc, #368]	@ (800757c <HAL_I2C_Init+0x274>)
 800740c:	428b      	cmp	r3, r1
 800740e:	d819      	bhi.n	8007444 <HAL_I2C_Init+0x13c>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	1e59      	subs	r1, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	fbb1 f3f3 	udiv	r3, r1, r3
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007424:	400b      	ands	r3, r1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_I2C_Init+0x138>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1e59      	subs	r1, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	fbb1 f3f3 	udiv	r3, r1, r3
 8007438:	3301      	adds	r3, #1
 800743a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800743e:	e051      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 8007440:	2304      	movs	r3, #4
 8007442:	e04f      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d111      	bne.n	8007470 <HAL_I2C_Init+0x168>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1e58      	subs	r0, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6859      	ldr	r1, [r3, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	440b      	add	r3, r1
 800745a:	fbb0 f3f3 	udiv	r3, r0, r3
 800745e:	3301      	adds	r3, #1
 8007460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf0c      	ite	eq
 8007468:	2301      	moveq	r3, #1
 800746a:	2300      	movne	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	e012      	b.n	8007496 <HAL_I2C_Init+0x18e>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	1e58      	subs	r0, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	0099      	lsls	r1, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	fbb0 f3f3 	udiv	r3, r0, r3
 8007486:	3301      	adds	r3, #1
 8007488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <HAL_I2C_Init+0x196>
 800749a:	2301      	movs	r3, #1
 800749c:	e022      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10e      	bne.n	80074c4 <HAL_I2C_Init+0x1bc>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1e58      	subs	r0, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	440b      	add	r3, r1
 80074b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80074b8:	3301      	adds	r3, #1
 80074ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074c2:	e00f      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1e58      	subs	r0, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6859      	ldr	r1, [r3, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	0099      	lsls	r1, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80074da:	3301      	adds	r3, #1
 80074dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	6809      	ldr	r1, [r1, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007512:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6911      	ldr	r1, [r2, #16]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68d2      	ldr	r2, [r2, #12]
 800751e:	4311      	orrs	r1, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	430b      	orrs	r3, r1
 8007526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	000186a0 	.word	0x000186a0
 8007580:	001e847f 	.word	0x001e847f
 8007584:	003d08ff 	.word	0x003d08ff
 8007588:	431bde83 	.word	0x431bde83
 800758c:	10624dd3 	.word	0x10624dd3

08007590 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e0bf      	b.n	8007722 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fb f954 	bl	8002864 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80075d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6999      	ldr	r1, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6899      	ldr	r1, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b4a      	ldr	r3, [pc, #296]	@ (800772c <HAL_LTDC_Init+0x19c>)
 8007604:	400b      	ands	r3, r1
 8007606:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6899      	ldr	r1, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68d9      	ldr	r1, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4b3e      	ldr	r3, [pc, #248]	@ (800772c <HAL_LTDC_Init+0x19c>)
 8007632:	400b      	ands	r3, r1
 8007634:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68d9      	ldr	r1, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6919      	ldr	r1, [r3, #16]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b33      	ldr	r3, [pc, #204]	@ (800772c <HAL_LTDC_Init+0x19c>)
 8007660:	400b      	ands	r3, r1
 8007662:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6919      	ldr	r1, [r3, #16]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6959      	ldr	r1, [r3, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	4b27      	ldr	r3, [pc, #156]	@ (800772c <HAL_LTDC_Init+0x19c>)
 800768e:	400b      	ands	r3, r1
 8007690:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6959      	ldr	r1, [r3, #20]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80076d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0206 	orr.w	r2, r2, #6
 80076fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	f000f800 	.word	0xf000f800

08007730 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007746:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d023      	beq.n	800779a <HAL_LTDC_IRQHandler+0x6a>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01e      	beq.n	800779a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0204 	bic.w	r2, r2, #4
 800776a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2204      	movs	r2, #4
 8007772:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800777a:	f043 0201 	orr.w	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2204      	movs	r2, #4
 8007788:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f86f 	bl	8007878 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d023      	beq.n	80077ec <HAL_LTDC_IRQHandler+0xbc>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01e      	beq.n	80077ec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0202 	bic.w	r2, r2, #2
 80077bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2202      	movs	r2, #2
 80077c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077cc:	f043 0202 	orr.w	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2204      	movs	r2, #4
 80077da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f846 	bl	8007878 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01b      	beq.n	800782e <HAL_LTDC_IRQHandler+0xfe>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d016      	beq.n	800782e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2201      	movs	r2, #1
 8007816:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f82f 	bl	800788c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01b      	beq.n	8007870 <HAL_LTDC_IRQHandler+0x140>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0208 	bic.w	r2, r2, #8
 8007850:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2208      	movs	r2, #8
 8007858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f818 	bl	80078a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80078b4:	b5b0      	push	{r4, r5, r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_LTDC_ConfigLayer+0x1a>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e02c      	b.n	8007928 <HAL_LTDC_ConfigLayer+0x74>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2134      	movs	r1, #52	@ 0x34
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f811 	bl	8007930 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2201      	movs	r2, #1
 8007914:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bdb0      	pop	{r4, r5, r7, pc}

08007930 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	@ 0x24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800794c:	4413      	add	r3, r2
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	01db      	lsls	r3, r3, #7
 800795c:	4413      	add	r3, r2
 800795e:	3384      	adds	r3, #132	@ 0x84
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	4611      	mov	r1, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	01d2      	lsls	r2, r2, #7
 800796c:	440a      	add	r2, r1
 800796e:	3284      	adds	r2, #132	@ 0x84
 8007970:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007974:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007986:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007988:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	01db      	lsls	r3, r3, #7
 8007994:	440b      	add	r3, r1
 8007996:	3384      	adds	r3, #132	@ 0x84
 8007998:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800799e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ae:	4413      	add	r3, r2
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	01db      	lsls	r3, r3, #7
 80079be:	4413      	add	r3, r2
 80079c0:	3384      	adds	r3, #132	@ 0x84
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	4611      	mov	r1, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	01d2      	lsls	r2, r2, #7
 80079ce:	440a      	add	r2, r1
 80079d0:	3284      	adds	r2, #132	@ 0x84
 80079d2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80079d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079e6:	4413      	add	r3, r2
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4619      	mov	r1, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	01db      	lsls	r3, r3, #7
 80079f4:	440b      	add	r3, r1
 80079f6:	3384      	adds	r3, #132	@ 0x84
 80079f8:	4619      	mov	r1, r3
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	01db      	lsls	r3, r3, #7
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3384      	adds	r3, #132	@ 0x84
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	4611      	mov	r1, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	01d2      	lsls	r2, r2, #7
 8007a1a:	440a      	add	r2, r1
 8007a1c:	3284      	adds	r2, #132	@ 0x84
 8007a1e:	f023 0307 	bic.w	r3, r3, #7
 8007a22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	01db      	lsls	r3, r3, #7
 8007a2e:	4413      	add	r3, r2
 8007a30:	3384      	adds	r3, #132	@ 0x84
 8007a32:	461a      	mov	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	061b      	lsls	r3, r3, #24
 8007a54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	4413      	add	r3, r2
 8007a62:	3384      	adds	r3, #132	@ 0x84
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	01db      	lsls	r3, r3, #7
 8007a70:	4413      	add	r3, r2
 8007a72:	3384      	adds	r3, #132	@ 0x84
 8007a74:	461a      	mov	r2, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a80:	461a      	mov	r2, r3
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	01db      	lsls	r3, r3, #7
 8007a94:	440b      	add	r3, r1
 8007a96:	3384      	adds	r3, #132	@ 0x84
 8007a98:	4619      	mov	r1, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	01db      	lsls	r3, r3, #7
 8007aaa:	4413      	add	r3, r2
 8007aac:	3384      	adds	r3, #132	@ 0x84
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	01d2      	lsls	r2, r2, #7
 8007aba:	440a      	add	r2, r1
 8007abc:	3284      	adds	r2, #132	@ 0x84
 8007abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ac2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	01db      	lsls	r3, r3, #7
 8007ace:	4413      	add	r3, r2
 8007ad0:	3384      	adds	r3, #132	@ 0x84
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	01db      	lsls	r3, r3, #7
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3384      	adds	r3, #132	@ 0x84
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	4611      	mov	r1, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	01d2      	lsls	r2, r2, #7
 8007af4:	440a      	add	r2, r1
 8007af6:	3284      	adds	r2, #132	@ 0x84
 8007af8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007afc:	f023 0307 	bic.w	r3, r3, #7
 8007b00:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	69da      	ldr	r2, [r3, #28]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	6809      	ldr	r1, [r1, #0]
 8007b0e:	4608      	mov	r0, r1
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	01c9      	lsls	r1, r1, #7
 8007b14:	4401      	add	r1, r0
 8007b16:	3184      	adds	r1, #132	@ 0x84
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	01db      	lsls	r3, r3, #7
 8007b26:	4413      	add	r3, r2
 8007b28:	3384      	adds	r3, #132	@ 0x84
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	01db      	lsls	r3, r3, #7
 8007b36:	4413      	add	r3, r2
 8007b38:	3384      	adds	r3, #132	@ 0x84
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	01db      	lsls	r3, r3, #7
 8007b4a:	4413      	add	r3, r2
 8007b4c:	3384      	adds	r3, #132	@ 0x84
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007b5e:	2304      	movs	r3, #4
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	e01b      	b.n	8007b9c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d102      	bne.n	8007b72 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e014      	b.n	8007b9c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d00b      	beq.n	8007b92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d007      	beq.n	8007b92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d003      	beq.n	8007b92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b8e:	2b07      	cmp	r3, #7
 8007b90:	d102      	bne.n	8007b98 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007b92:	2302      	movs	r3, #2
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e001      	b.n	8007b9c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	01db      	lsls	r3, r3, #7
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3384      	adds	r3, #132	@ 0x84
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	01d2      	lsls	r2, r2, #7
 8007bb6:	440a      	add	r2, r1
 8007bb8:	3284      	adds	r2, #132	@ 0x84
 8007bba:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6859      	ldr	r1, [r3, #4]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	1acb      	subs	r3, r1, r3
 8007bd6:	69f9      	ldr	r1, [r7, #28]
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	6809      	ldr	r1, [r1, #0]
 8007be2:	4608      	mov	r0, r1
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	01c9      	lsls	r1, r1, #7
 8007be8:	4401      	add	r1, r0
 8007bea:	3184      	adds	r1, #132	@ 0x84
 8007bec:	4313      	orrs	r3, r2
 8007bee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	01db      	lsls	r3, r3, #7
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3384      	adds	r3, #132	@ 0x84
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	4611      	mov	r1, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	01d2      	lsls	r2, r2, #7
 8007c0a:	440a      	add	r2, r1
 8007c0c:	3284      	adds	r2, #132	@ 0x84
 8007c0e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007c12:	f023 0307 	bic.w	r3, r3, #7
 8007c16:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	01db      	lsls	r3, r3, #7
 8007c22:	4413      	add	r3, r2
 8007c24:	3384      	adds	r3, #132	@ 0x84
 8007c26:	461a      	mov	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	01db      	lsls	r3, r3, #7
 8007c38:	4413      	add	r3, r2
 8007c3a:	3384      	adds	r3, #132	@ 0x84
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	4611      	mov	r1, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	01d2      	lsls	r2, r2, #7
 8007c48:	440a      	add	r2, r1
 8007c4a:	3284      	adds	r2, #132	@ 0x84
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	6013      	str	r3, [r2, #0]
}
 8007c52:	bf00      	nop
 8007c54:	3724      	adds	r7, #36	@ 0x24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c72:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c86:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf4 <HAL_PWREx_EnableOverDrive+0x94>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c8c:	f7fb fb6a 	bl	8003364 <HAL_GetTick>
 8007c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c92:	e009      	b.n	8007ca8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c94:	f7fb fb66 	bl	8003364 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ca2:	d901      	bls.n	8007ca8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e01f      	b.n	8007ce8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ca8:	4b13      	ldr	r3, [pc, #76]	@ (8007cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb4:	d1ee      	bne.n	8007c94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007cb6:	4b11      	ldr	r3, [pc, #68]	@ (8007cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cbc:	f7fb fb52 	bl	8003364 <HAL_GetTick>
 8007cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007cc2:	e009      	b.n	8007cd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007cc4:	f7fb fb4e 	bl	8003364 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cd2:	d901      	bls.n	8007cd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e007      	b.n	8007ce8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007cd8:	4b07      	ldr	r3, [pc, #28]	@ (8007cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce4:	d1ee      	bne.n	8007cc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40023800 	.word	0x40023800
 8007cf4:	420e0040 	.word	0x420e0040
 8007cf8:	40007000 	.word	0x40007000
 8007cfc:	420e0044 	.word	0x420e0044

08007d00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007d08:	f7fb fb2c 	bl	8003364 <HAL_GetTick>
 8007d0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e069      	b.n	8007dec <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10b      	bne.n	8007d3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fa fdc1 	bl	80028b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007d32:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f85e 	bl	8007df8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	021a      	lsls	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2120      	movs	r1, #32
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f856 	bl	8007e14 <QSPI_WaitFlagStateUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d137      	bne.n	8007de2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007d7c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6852      	ldr	r2, [r2, #4]
 8007d84:	0611      	lsls	r1, r2, #24
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68d2      	ldr	r2, [r2, #12]
 8007d8a:	4311      	orrs	r1, r2
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	69d2      	ldr	r2, [r2, #28]
 8007d90:	4311      	orrs	r1, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6a12      	ldr	r2, [r2, #32]
 8007d96:	4311      	orrs	r1, r2
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b13      	ldr	r3, [pc, #76]	@ (8007df4 <HAL_QSPI_Init+0xf4>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6912      	ldr	r2, [r2, #16]
 8007dae:	0411      	lsls	r1, r2, #16
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6952      	ldr	r2, [r2, #20]
 8007db4:	4311      	orrs	r1, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6992      	ldr	r2, [r2, #24]
 8007dba:	4311      	orrs	r1, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0201 	orr.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007dea:	7afb      	ldrb	r3, [r7, #11]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	ffe0f8fe 	.word	0xffe0f8fe

08007df8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e24:	e01a      	b.n	8007e5c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d016      	beq.n	8007e5c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e2e:	f7fb fa99 	bl	8003364 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d302      	bcc.n	8007e44 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2204      	movs	r2, #4
 8007e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e50:	f043 0201 	orr.w	r2, r3, #1
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e00e      	b.n	8007e7a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bf14      	ite	ne
 8007e6a:	2301      	movne	r3, #1
 8007e6c:	2300      	moveq	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d1d6      	bne.n	8007e26 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0cc      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e98:	4b68      	ldr	r3, [pc, #416]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d90c      	bls.n	8007ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea6:	4b65      	ldr	r3, [pc, #404]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eae:	4b63      	ldr	r3, [pc, #396]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0b8      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d020      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ed8:	4b59      	ldr	r3, [pc, #356]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4a58      	ldr	r2, [pc, #352]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ef0:	4b53      	ldr	r3, [pc, #332]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4a52      	ldr	r2, [pc, #328]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007efc:	4b50      	ldr	r3, [pc, #320]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	494d      	ldr	r1, [pc, #308]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d044      	beq.n	8007fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d107      	bne.n	8007f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f22:	4b47      	ldr	r3, [pc, #284]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d119      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e07f      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d003      	beq.n	8007f42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d107      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f42:	4b3f      	ldr	r3, [pc, #252]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e06f      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f52:	4b3b      	ldr	r3, [pc, #236]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e067      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f62:	4b37      	ldr	r3, [pc, #220]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 0203 	bic.w	r2, r3, #3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4934      	ldr	r1, [pc, #208]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f74:	f7fb f9f6 	bl	8003364 <HAL_GetTick>
 8007f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f7a:	e00a      	b.n	8007f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f7c:	f7fb f9f2 	bl	8003364 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e04f      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f92:	4b2b      	ldr	r3, [pc, #172]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 020c 	and.w	r2, r3, #12
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d1eb      	bne.n	8007f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa4:	4b25      	ldr	r3, [pc, #148]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d20c      	bcs.n	8007fcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb2:	4b22      	ldr	r3, [pc, #136]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fba:	4b20      	ldr	r3, [pc, #128]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d001      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e032      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fd8:	4b19      	ldr	r3, [pc, #100]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	4916      	ldr	r1, [pc, #88]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	490e      	ldr	r1, [pc, #56]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	4313      	orrs	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800800a:	f000 f821 	bl	8008050 <HAL_RCC_GetSysClockFreq>
 800800e:	4602      	mov	r2, r0
 8008010:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	091b      	lsrs	r3, r3, #4
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	490a      	ldr	r1, [pc, #40]	@ (8008044 <HAL_RCC_ClockConfig+0x1c0>)
 800801c:	5ccb      	ldrb	r3, [r1, r3]
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <HAL_RCC_ClockConfig+0x1c4>)
 8008024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008026:	4b09      	ldr	r3, [pc, #36]	@ (800804c <HAL_RCC_ClockConfig+0x1c8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f7fa ff5e 	bl	8002eec <HAL_InitTick>

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40023c00 	.word	0x40023c00
 8008040:	40023800 	.word	0x40023800
 8008044:	08014378 	.word	0x08014378
 8008048:	20000000 	.word	0x20000000
 800804c:	20000004 	.word	0x20000004

08008050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008054:	b094      	sub	sp, #80	@ 0x50
 8008056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008068:	4b79      	ldr	r3, [pc, #484]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x200>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 030c 	and.w	r3, r3, #12
 8008070:	2b08      	cmp	r3, #8
 8008072:	d00d      	beq.n	8008090 <HAL_RCC_GetSysClockFreq+0x40>
 8008074:	2b08      	cmp	r3, #8
 8008076:	f200 80e1 	bhi.w	800823c <HAL_RCC_GetSysClockFreq+0x1ec>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_RCC_GetSysClockFreq+0x34>
 800807e:	2b04      	cmp	r3, #4
 8008080:	d003      	beq.n	800808a <HAL_RCC_GetSysClockFreq+0x3a>
 8008082:	e0db      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008084:	4b73      	ldr	r3, [pc, #460]	@ (8008254 <HAL_RCC_GetSysClockFreq+0x204>)
 8008086:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008088:	e0db      	b.n	8008242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800808a:	4b73      	ldr	r3, [pc, #460]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x208>)
 800808c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800808e:	e0d8      	b.n	8008242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008090:	4b6f      	ldr	r3, [pc, #444]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x200>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008098:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800809a:	4b6d      	ldr	r3, [pc, #436]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x200>)
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d063      	beq.n	800816e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x200>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	099b      	lsrs	r3, r3, #6
 80080ac:	2200      	movs	r2, #0
 80080ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080ba:	2300      	movs	r3, #0
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80080c2:	4622      	mov	r2, r4
 80080c4:	462b      	mov	r3, r5
 80080c6:	f04f 0000 	mov.w	r0, #0
 80080ca:	f04f 0100 	mov.w	r1, #0
 80080ce:	0159      	lsls	r1, r3, #5
 80080d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080d4:	0150      	lsls	r0, r2, #5
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4621      	mov	r1, r4
 80080dc:	1a51      	subs	r1, r2, r1
 80080de:	6139      	str	r1, [r7, #16]
 80080e0:	4629      	mov	r1, r5
 80080e2:	eb63 0301 	sbc.w	r3, r3, r1
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080f4:	4659      	mov	r1, fp
 80080f6:	018b      	lsls	r3, r1, #6
 80080f8:	4651      	mov	r1, sl
 80080fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080fe:	4651      	mov	r1, sl
 8008100:	018a      	lsls	r2, r1, #6
 8008102:	4651      	mov	r1, sl
 8008104:	ebb2 0801 	subs.w	r8, r2, r1
 8008108:	4659      	mov	r1, fp
 800810a:	eb63 0901 	sbc.w	r9, r3, r1
 800810e:	f04f 0200 	mov.w	r2, #0
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800811a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800811e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008122:	4690      	mov	r8, r2
 8008124:	4699      	mov	r9, r3
 8008126:	4623      	mov	r3, r4
 8008128:	eb18 0303 	adds.w	r3, r8, r3
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	462b      	mov	r3, r5
 8008130:	eb49 0303 	adc.w	r3, r9, r3
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008142:	4629      	mov	r1, r5
 8008144:	024b      	lsls	r3, r1, #9
 8008146:	4621      	mov	r1, r4
 8008148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800814c:	4621      	mov	r1, r4
 800814e:	024a      	lsls	r2, r1, #9
 8008150:	4610      	mov	r0, r2
 8008152:	4619      	mov	r1, r3
 8008154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008156:	2200      	movs	r2, #0
 8008158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800815a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800815c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008160:	f7f8 f8a6 	bl	80002b0 <__aeabi_uldivmod>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4613      	mov	r3, r2
 800816a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800816c:	e058      	b.n	8008220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800816e:	4b38      	ldr	r3, [pc, #224]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x200>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	099b      	lsrs	r3, r3, #6
 8008174:	2200      	movs	r2, #0
 8008176:	4618      	mov	r0, r3
 8008178:	4611      	mov	r1, r2
 800817a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800817e:	623b      	str	r3, [r7, #32]
 8008180:	2300      	movs	r3, #0
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
 8008184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	f04f 0000 	mov.w	r0, #0
 8008190:	f04f 0100 	mov.w	r1, #0
 8008194:	0159      	lsls	r1, r3, #5
 8008196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800819a:	0150      	lsls	r0, r2, #5
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4641      	mov	r1, r8
 80081a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80081a6:	4649      	mov	r1, r9
 80081a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081c0:	ebb2 040a 	subs.w	r4, r2, sl
 80081c4:	eb63 050b 	sbc.w	r5, r3, fp
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	00eb      	lsls	r3, r5, #3
 80081d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081d6:	00e2      	lsls	r2, r4, #3
 80081d8:	4614      	mov	r4, r2
 80081da:	461d      	mov	r5, r3
 80081dc:	4643      	mov	r3, r8
 80081de:	18e3      	adds	r3, r4, r3
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	464b      	mov	r3, r9
 80081e4:	eb45 0303 	adc.w	r3, r5, r3
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081f6:	4629      	mov	r1, r5
 80081f8:	028b      	lsls	r3, r1, #10
 80081fa:	4621      	mov	r1, r4
 80081fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008200:	4621      	mov	r1, r4
 8008202:	028a      	lsls	r2, r1, #10
 8008204:	4610      	mov	r0, r2
 8008206:	4619      	mov	r1, r3
 8008208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800820a:	2200      	movs	r2, #0
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	61fa      	str	r2, [r7, #28]
 8008210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008214:	f7f8 f84c 	bl	80002b0 <__aeabi_uldivmod>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4613      	mov	r3, r2
 800821e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008220:	4b0b      	ldr	r3, [pc, #44]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x200>)
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	0c1b      	lsrs	r3, r3, #16
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	3301      	adds	r3, #1
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008230:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008234:	fbb2 f3f3 	udiv	r3, r2, r3
 8008238:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800823a:	e002      	b.n	8008242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <HAL_RCC_GetSysClockFreq+0x204>)
 800823e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008244:	4618      	mov	r0, r3
 8008246:	3750      	adds	r7, #80	@ 0x50
 8008248:	46bd      	mov	sp, r7
 800824a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800824e:	bf00      	nop
 8008250:	40023800 	.word	0x40023800
 8008254:	00f42400 	.word	0x00f42400
 8008258:	007a1200 	.word	0x007a1200

0800825c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008260:	4b03      	ldr	r3, [pc, #12]	@ (8008270 <HAL_RCC_GetHCLKFreq+0x14>)
 8008262:	681b      	ldr	r3, [r3, #0]
}
 8008264:	4618      	mov	r0, r3
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000000 	.word	0x20000000

08008274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008278:	f7ff fff0 	bl	800825c <HAL_RCC_GetHCLKFreq>
 800827c:	4602      	mov	r2, r0
 800827e:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	0a9b      	lsrs	r3, r3, #10
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	4903      	ldr	r1, [pc, #12]	@ (8008298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800828a:	5ccb      	ldrb	r3, [r1, r3]
 800828c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008290:	4618      	mov	r0, r3
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40023800 	.word	0x40023800
 8008298:	08014388 	.word	0x08014388

0800829c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082a0:	f7ff ffdc 	bl	800825c <HAL_RCC_GetHCLKFreq>
 80082a4:	4602      	mov	r2, r0
 80082a6:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	0b5b      	lsrs	r3, r3, #13
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	4903      	ldr	r1, [pc, #12]	@ (80082c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082b2:	5ccb      	ldrb	r3, [r1, r3]
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40023800 	.word	0x40023800
 80082c0:	08014388 	.word	0x08014388

080082c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	220f      	movs	r2, #15
 80082d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082d4:	4b12      	ldr	r3, [pc, #72]	@ (8008320 <HAL_RCC_GetClockConfig+0x5c>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 0203 	and.w	r2, r3, #3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008320 <HAL_RCC_GetClockConfig+0x5c>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <HAL_RCC_GetClockConfig+0x5c>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80082f8:	4b09      	ldr	r3, [pc, #36]	@ (8008320 <HAL_RCC_GetClockConfig+0x5c>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	08db      	lsrs	r3, r3, #3
 80082fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008306:	4b07      	ldr	r3, [pc, #28]	@ (8008324 <HAL_RCC_GetClockConfig+0x60>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 020f 	and.w	r2, r3, #15
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	601a      	str	r2, [r3, #0]
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40023800 	.word	0x40023800
 8008324:	40023c00 	.word	0x40023c00

08008328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008350:	4b66      	ldr	r3, [pc, #408]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008356:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835e:	4963      	ldr	r1, [pc, #396]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008372:	4b5e      	ldr	r3, [pc, #376]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008378:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	495a      	ldr	r1, [pc, #360]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800839c:	2b00      	cmp	r3, #0
 800839e:	d105      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d075      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083ac:	4b50      	ldr	r3, [pc, #320]	@ (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083b2:	f7fa ffd7 	bl	8003364 <HAL_GetTick>
 80083b6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083b8:	e008      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083ba:	f7fa ffd3 	bl	8003364 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e1dc      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083cc:	4b47      	ldr	r3, [pc, #284]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1f0      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	019a      	lsls	r2, r3, #6
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	071b      	lsls	r3, r3, #28
 80083f0:	493e      	ldr	r1, [pc, #248]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01f      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008404:	4b39      	ldr	r3, [pc, #228]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800840a:	0f1b      	lsrs	r3, r3, #28
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	019a      	lsls	r2, r3, #6
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	431a      	orrs	r2, r3
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	071b      	lsls	r3, r3, #28
 8008424:	4931      	ldr	r1, [pc, #196]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800842c:	4b2f      	ldr	r3, [pc, #188]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800842e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008432:	f023 021f 	bic.w	r2, r3, #31
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	3b01      	subs	r3, #1
 800843c:	492b      	ldr	r1, [pc, #172]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	019a      	lsls	r2, r3, #6
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	061b      	lsls	r3, r3, #24
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	071b      	lsls	r3, r3, #28
 8008464:	4921      	ldr	r1, [pc, #132]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800846c:	4b20      	ldr	r3, [pc, #128]	@ (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008472:	f7fa ff77 	bl	8003364 <HAL_GetTick>
 8008476:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008478:	e008      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800847a:	f7fa ff73 	bl	8003364 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e17c      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800848c:	4b17      	ldr	r3, [pc, #92]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d112      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10c      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 80ce 	beq.w	800865a <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80084c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c6:	f040 80c8 	bne.w	800865a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084ca:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084d0:	f7fa ff48 	bl	8003364 <HAL_GetTick>
 80084d4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084d6:	e00f      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084d8:	f7fa ff44 	bl	8003364 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d908      	bls.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e14d      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80084ea:	bf00      	nop
 80084ec:	40023800 	.word	0x40023800
 80084f0:	42470068 	.word	0x42470068
 80084f4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084f8:	4ba5      	ldr	r3, [pc, #660]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008504:	d0e8      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02e      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008512:	4b9f      	ldr	r3, [pc, #636]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	3301      	adds	r3, #1
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008524:	4b9a      	ldr	r3, [pc, #616]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800852a:	0f1b      	lsrs	r3, r3, #28
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	019a      	lsls	r2, r3, #6
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	3b01      	subs	r3, #1
 800853e:	041b      	lsls	r3, r3, #16
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	061b      	lsls	r3, r3, #24
 8008548:	431a      	orrs	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	071b      	lsls	r3, r3, #28
 800854e:	4990      	ldr	r1, [pc, #576]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008550:	4313      	orrs	r3, r2
 8008552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008556:	4b8e      	ldr	r3, [pc, #568]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800855c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008564:	3b01      	subs	r3, #1
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	4989      	ldr	r1, [pc, #548]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02c      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800857c:	4b84      	ldr	r3, [pc, #528]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008582:	0c1b      	lsrs	r3, r3, #16
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	3301      	adds	r3, #1
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800858e:	4b80      	ldr	r3, [pc, #512]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008594:	0e1b      	lsrs	r3, r3, #24
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	019a      	lsls	r2, r3, #6
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	3b01      	subs	r3, #1
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	431a      	orrs	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	061b      	lsls	r3, r3, #24
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	071b      	lsls	r3, r3, #28
 80085b8:	4975      	ldr	r1, [pc, #468]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085c0:	4b73      	ldr	r3, [pc, #460]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	4970      	ldr	r1, [pc, #448]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d024      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80085e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ea:	d11f      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ec:	4b68      	ldr	r3, [pc, #416]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f2:	0e1b      	lsrs	r3, r3, #24
 80085f4:	f003 030f 	and.w	r3, r3, #15
 80085f8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085fa:	4b65      	ldr	r3, [pc, #404]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008600:	0f1b      	lsrs	r3, r3, #28
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	019a      	lsls	r2, r3, #6
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	085b      	lsrs	r3, r3, #1
 8008614:	3b01      	subs	r3, #1
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	431a      	orrs	r2, r3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	061b      	lsls	r3, r3, #24
 800861e:	431a      	orrs	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	071b      	lsls	r3, r3, #28
 8008624:	495a      	ldr	r1, [pc, #360]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800862c:	4b59      	ldr	r3, [pc, #356]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800862e:	2201      	movs	r2, #1
 8008630:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008632:	f7fa fe97 	bl	8003364 <HAL_GetTick>
 8008636:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008638:	e008      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800863a:	f7fa fe93 	bl	8003364 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b02      	cmp	r3, #2
 8008646:	d901      	bls.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e09c      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800864c:	4b50      	ldr	r3, [pc, #320]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008658:	d1ef      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 8083 	beq.w	800876e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008668:	2300      	movs	r3, #0
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	4b48      	ldr	r3, [pc, #288]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800866e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008670:	4a47      	ldr	r2, [pc, #284]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008676:	6413      	str	r3, [r2, #64]	@ 0x40
 8008678:	4b45      	ldr	r3, [pc, #276]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008684:	4b44      	ldr	r3, [pc, #272]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a43      	ldr	r2, [pc, #268]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800868a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800868e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008690:	f7fa fe68 	bl	8003364 <HAL_GetTick>
 8008694:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008696:	e008      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008698:	f7fa fe64 	bl	8003364 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d901      	bls.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e06d      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80086aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086b6:	4b36      	ldr	r3, [pc, #216]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086be:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d02f      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d028      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086dc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086de:	4b2f      	ldr	r3, [pc, #188]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086e4:	4b2d      	ldr	r3, [pc, #180]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086ea:	4a29      	ldr	r2, [pc, #164]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086f0:	4b27      	ldr	r3, [pc, #156]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d114      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80086fc:	f7fa fe32 	bl	8003364 <HAL_GetTick>
 8008700:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008702:	e00a      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008704:	f7fa fe2e 	bl	8003364 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008712:	4293      	cmp	r3, r2
 8008714:	d901      	bls.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e035      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800871a:	4b1d      	ldr	r3, [pc, #116]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0ee      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800872e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008732:	d10d      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008734:	4b16      	ldr	r3, [pc, #88]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008740:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008748:	4911      	ldr	r1, [pc, #68]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800874a:	4313      	orrs	r3, r2
 800874c:	608b      	str	r3, [r1, #8]
 800874e:	e005      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008750:	4b0f      	ldr	r3, [pc, #60]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	4a0e      	ldr	r2, [pc, #56]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008756:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800875a:	6093      	str	r3, [r2, #8]
 800875c:	4b0c      	ldr	r3, [pc, #48]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800875e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008768:	4909      	ldr	r1, [pc, #36]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800876a:	4313      	orrs	r3, r2
 800876c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0310 	and.w	r3, r3, #16
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008780:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008782:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	40023800 	.word	0x40023800
 8008794:	42470070 	.word	0x42470070
 8008798:	40007000 	.word	0x40007000
 800879c:	42470e40 	.word	0x42470e40
 80087a0:	424711e0 	.word	0x424711e0

080087a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e273      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d075      	beq.n	80088ae <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80087c2:	4b88      	ldr	r3, [pc, #544]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 030c 	and.w	r3, r3, #12
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	d00c      	beq.n	80087e8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ce:	4b85      	ldr	r3, [pc, #532]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d112      	bne.n	8008800 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087da:	4b82      	ldr	r3, [pc, #520]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087e6:	d10b      	bne.n	8008800 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e8:	4b7e      	ldr	r3, [pc, #504]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d05b      	beq.n	80088ac <HAL_RCC_OscConfig+0x108>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d157      	bne.n	80088ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e24e      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008808:	d106      	bne.n	8008818 <HAL_RCC_OscConfig+0x74>
 800880a:	4b76      	ldr	r3, [pc, #472]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a75      	ldr	r2, [pc, #468]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	e01d      	b.n	8008854 <HAL_RCC_OscConfig+0xb0>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008820:	d10c      	bne.n	800883c <HAL_RCC_OscConfig+0x98>
 8008822:	4b70      	ldr	r3, [pc, #448]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a6f      	ldr	r2, [pc, #444]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	4b6d      	ldr	r3, [pc, #436]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a6c      	ldr	r2, [pc, #432]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e00b      	b.n	8008854 <HAL_RCC_OscConfig+0xb0>
 800883c:	4b69      	ldr	r3, [pc, #420]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a68      	ldr	r2, [pc, #416]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	4b66      	ldr	r3, [pc, #408]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a65      	ldr	r2, [pc, #404]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 800884e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d013      	beq.n	8008884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885c:	f7fa fd82 	bl	8003364 <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008864:	f7fa fd7e 	bl	8003364 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b64      	cmp	r3, #100	@ 0x64
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e213      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008876:	4b5b      	ldr	r3, [pc, #364]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f0      	beq.n	8008864 <HAL_RCC_OscConfig+0xc0>
 8008882:	e014      	b.n	80088ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008884:	f7fa fd6e 	bl	8003364 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800888c:	f7fa fd6a 	bl	8003364 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b64      	cmp	r3, #100	@ 0x64
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e1ff      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800889e:	4b51      	ldr	r3, [pc, #324]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1f0      	bne.n	800888c <HAL_RCC_OscConfig+0xe8>
 80088aa:	e000      	b.n	80088ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d063      	beq.n	8008982 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80088ba:	4b4a      	ldr	r3, [pc, #296]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 030c 	and.w	r3, r3, #12
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00b      	beq.n	80088de <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088c6:	4b47      	ldr	r3, [pc, #284]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d11c      	bne.n	800890c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088d2:	4b44      	ldr	r3, [pc, #272]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d116      	bne.n	800890c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088de:	4b41      	ldr	r3, [pc, #260]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_RCC_OscConfig+0x152>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d001      	beq.n	80088f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e1d3      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f6:	4b3b      	ldr	r3, [pc, #236]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4937      	ldr	r1, [pc, #220]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008906:	4313      	orrs	r3, r2
 8008908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800890a:	e03a      	b.n	8008982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d020      	beq.n	8008956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008914:	4b34      	ldr	r3, [pc, #208]	@ (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008916:	2201      	movs	r2, #1
 8008918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891a:	f7fa fd23 	bl	8003364 <HAL_GetTick>
 800891e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008920:	e008      	b.n	8008934 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008922:	f7fa fd1f 	bl	8003364 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e1b4      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008934:	4b2b      	ldr	r3, [pc, #172]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f0      	beq.n	8008922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008940:	4b28      	ldr	r3, [pc, #160]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4925      	ldr	r1, [pc, #148]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008950:	4313      	orrs	r3, r2
 8008952:	600b      	str	r3, [r1, #0]
 8008954:	e015      	b.n	8008982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008956:	4b24      	ldr	r3, [pc, #144]	@ (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7fa fd02 	bl	8003364 <HAL_GetTick>
 8008960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008964:	f7fa fcfe 	bl	8003364 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e193      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008976:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f0      	bne.n	8008964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d036      	beq.n	80089fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d016      	beq.n	80089c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008996:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <HAL_RCC_OscConfig+0x248>)
 8008998:	2201      	movs	r2, #1
 800899a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899c:	f7fa fce2 	bl	8003364 <HAL_GetTick>
 80089a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089a4:	f7fa fcde 	bl	8003364 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e173      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089b6:	4b0b      	ldr	r3, [pc, #44]	@ (80089e4 <HAL_RCC_OscConfig+0x240>)
 80089b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f0      	beq.n	80089a4 <HAL_RCC_OscConfig+0x200>
 80089c2:	e01b      	b.n	80089fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089c4:	4b09      	ldr	r3, [pc, #36]	@ (80089ec <HAL_RCC_OscConfig+0x248>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ca:	f7fa fccb 	bl	8003364 <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089d0:	e00e      	b.n	80089f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089d2:	f7fa fcc7 	bl	8003364 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d907      	bls.n	80089f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e15c      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
 80089e4:	40023800 	.word	0x40023800
 80089e8:	42470000 	.word	0x42470000
 80089ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f0:	4b8a      	ldr	r3, [pc, #552]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 80089f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ea      	bne.n	80089d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8097 	beq.w	8008b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a0e:	4b83      	ldr	r3, [pc, #524]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10f      	bne.n	8008a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]
 8008a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a22:	4a7e      	ldr	r2, [pc, #504]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a36:	2301      	movs	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a3a:	4b79      	ldr	r3, [pc, #484]	@ (8008c20 <HAL_RCC_OscConfig+0x47c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d118      	bne.n	8008a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a46:	4b76      	ldr	r3, [pc, #472]	@ (8008c20 <HAL_RCC_OscConfig+0x47c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a75      	ldr	r2, [pc, #468]	@ (8008c20 <HAL_RCC_OscConfig+0x47c>)
 8008a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a52:	f7fa fc87 	bl	8003364 <HAL_GetTick>
 8008a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a5a:	f7fa fc83 	bl	8003364 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e118      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8008c20 <HAL_RCC_OscConfig+0x47c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d106      	bne.n	8008a8e <HAL_RCC_OscConfig+0x2ea>
 8008a80:	4b66      	ldr	r3, [pc, #408]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a84:	4a65      	ldr	r2, [pc, #404]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a8c:	e01c      	b.n	8008ac8 <HAL_RCC_OscConfig+0x324>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d10c      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x30c>
 8008a96:	4b61      	ldr	r3, [pc, #388]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9a:	4a60      	ldr	r2, [pc, #384]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008a9c:	f043 0304 	orr.w	r3, r3, #4
 8008aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008aa8:	f043 0301 	orr.w	r3, r3, #1
 8008aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aae:	e00b      	b.n	8008ac8 <HAL_RCC_OscConfig+0x324>
 8008ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ab4:	4a59      	ldr	r2, [pc, #356]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8008abc:	4b57      	ldr	r3, [pc, #348]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac0:	4a56      	ldr	r2, [pc, #344]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008ac2:	f023 0304 	bic.w	r3, r3, #4
 8008ac6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d015      	beq.n	8008afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad0:	f7fa fc48 	bl	8003364 <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ad6:	e00a      	b.n	8008aee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ad8:	f7fa fc44 	bl	8003364 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e0d7      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aee:	4b4b      	ldr	r3, [pc, #300]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0ee      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x334>
 8008afa:	e014      	b.n	8008b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afc:	f7fa fc32 	bl	8003364 <HAL_GetTick>
 8008b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b02:	e00a      	b.n	8008b1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b04:	f7fa fc2e 	bl	8003364 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e0c1      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b1a:	4b40      	ldr	r3, [pc, #256]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1ee      	bne.n	8008b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d105      	bne.n	8008b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b30:	4a3a      	ldr	r2, [pc, #232]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80ad 	beq.w	8008c9c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b42:	4b36      	ldr	r3, [pc, #216]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 030c 	and.w	r3, r3, #12
 8008b4a:	2b08      	cmp	r3, #8
 8008b4c:	d060      	beq.n	8008c10 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d145      	bne.n	8008be2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b56:	4b33      	ldr	r3, [pc, #204]	@ (8008c24 <HAL_RCC_OscConfig+0x480>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5c:	f7fa fc02 	bl	8003364 <HAL_GetTick>
 8008b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b64:	f7fa fbfe 	bl	8003364 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e093      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b76:	4b29      	ldr	r3, [pc, #164]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f0      	bne.n	8008b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69da      	ldr	r2, [r3, #28]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	019b      	lsls	r3, r3, #6
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b98:	085b      	lsrs	r3, r3, #1
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	041b      	lsls	r3, r3, #16
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba4:	061b      	lsls	r3, r3, #24
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bac:	071b      	lsls	r3, r3, #28
 8008bae:	491b      	ldr	r1, [pc, #108]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c24 <HAL_RCC_OscConfig+0x480>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bba:	f7fa fbd3 	bl	8003364 <HAL_GetTick>
 8008bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bc0:	e008      	b.n	8008bd4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc2:	f7fa fbcf 	bl	8003364 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d901      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e064      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd4:	4b11      	ldr	r3, [pc, #68]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0f0      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x41e>
 8008be0:	e05c      	b.n	8008c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be2:	4b10      	ldr	r3, [pc, #64]	@ (8008c24 <HAL_RCC_OscConfig+0x480>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be8:	f7fa fbbc 	bl	8003364 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf0:	f7fa fbb8 	bl	8003364 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e04d      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f0      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x44c>
 8008c0e:	e045      	b.n	8008c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d107      	bne.n	8008c28 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e040      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40007000 	.word	0x40007000
 8008c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c28:	4b1f      	ldr	r3, [pc, #124]	@ (8008ca8 <HAL_RCC_OscConfig+0x504>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d030      	beq.n	8008c98 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d129      	bne.n	8008c98 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d122      	bne.n	8008c98 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008c58:	4013      	ands	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d119      	bne.n	8008c98 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	085b      	lsrs	r3, r3, #1
 8008c70:	3b01      	subs	r3, #1
 8008c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d10f      	bne.n	8008c98 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d107      	bne.n	8008c98 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d001      	beq.n	8008c9c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	40023800 	.word	0x40023800

08008cac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e10c      	b.n	8008ee8 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d106      	bne.n	8008ce8 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fa f8a2 	bl	8002e2c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f903 	bl	8008efc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f938 	bl	8008f6c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d030      	beq.n	8008d66 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f957 	bl	8008fb8 <SAI_GetInputClock>
 8008d0a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	461a      	mov	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	025b      	lsls	r3, r3, #9
 8008d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d22:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4a72      	ldr	r2, [pc, #456]	@ (8008ef0 <HAL_SAI_Init+0x244>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	08da      	lsrs	r2, r3, #3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008d32:	68f9      	ldr	r1, [r7, #12]
 8008d34:	4b6e      	ldr	r3, [pc, #440]	@ (8008ef0 <HAL_SAI_Init+0x244>)
 8008d36:	fba3 2301 	umull	r2, r3, r3, r1
 8008d3a:	08da      	lsrs	r2, r3, #3
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	1aca      	subs	r2, r1, r3
 8008d46:	2a08      	cmp	r2, #8
 8008d48:	d904      	bls.n	8008d54 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d104      	bne.n	8008d66 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	085a      	lsrs	r2, r3, #1
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_SAI_Init+0xca>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d109      	bne.n	8008d8a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_SAI_Init+0xd6>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e001      	b.n	8008d86 <HAL_SAI_Init+0xda>
 8008d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	e008      	b.n	8008d9c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d102      	bne.n	8008d98 <HAL_SAI_Init+0xec>
 8008d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d96:	e000      	b.n	8008d9a <HAL_SAI_Init+0xee>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d811      	bhi.n	8008dc8 <HAL_SAI_Init+0x11c>
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d20b      	bcs.n	8008dc0 <HAL_SAI_Init+0x114>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_SAI_Init+0x106>
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d003      	beq.n	8008db8 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8008db0:	e00a      	b.n	8008dc8 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]
    break;
 8008db6:	e008      	b.n	8008dca <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dbc:	613b      	str	r3, [r7, #16]
    break;
 8008dbe:	e004      	b.n	8008dca <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008dc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008dc4:	613b      	str	r3, [r7, #16]
    break;
 8008dc6:	e000      	b.n	8008dca <HAL_SAI_Init+0x11e>
      break;
 8008dc8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6819      	ldr	r1, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	4b47      	ldr	r3, [pc, #284]	@ (8008ef4 <HAL_SAI_Init+0x248>)
 8008dd6:	400b      	ands	r3, r1
 8008dd8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008dee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df4:	431a      	orrs	r2, r3
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8008e02:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e0e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	051b      	lsls	r3, r3, #20
 8008e16:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6812      	ldr	r2, [r2, #0]
 8008e2a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008e2e:	f023 030f 	bic.w	r3, r3, #15
 8008e32:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6859      	ldr	r1, [r3, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6899      	ldr	r1, [r3, #8]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4b26      	ldr	r3, [pc, #152]	@ (8008ef8 <HAL_SAI_Init+0x24c>)
 8008e5e:	400b      	ands	r3, r1
 8008e60:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6899      	ldr	r1, [r3, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e6c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e72:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8008e78:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8008e7e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e84:	3b01      	subs	r3, #1
 8008e86:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008e88:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68d9      	ldr	r1, [r3, #12]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008ea0:	400b      	ands	r3, r1
 8008ea2:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68d9      	ldr	r1, [r3, #12]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eb8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008eba:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	cccccccd 	.word	0xcccccccd
 8008ef4:	ff05c010 	.word	0xff05c010
 8008ef8:	fff88000 	.word	0xfff88000

08008efc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008f04:	4b17      	ldr	r3, [pc, #92]	@ (8008f64 <SAI_Disable+0x68>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <SAI_Disable+0x6c>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	0b1b      	lsrs	r3, r3, #12
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008f26:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	1e5a      	subs	r2, r3, #1
 8008f2c:	60fa      	str	r2, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	72fb      	strb	r3, [r7, #11]
      break;
 8008f46:	e006      	b.n	8008f56 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e8      	bne.n	8008f28 <SAI_Disable+0x2c>

  return status;
 8008f56:	7afb      	ldrb	r3, [r7, #11]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20000000 	.word	0x20000000
 8008f68:	95cbec1b 	.word	0x95cbec1b

08008f6c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d00c      	beq.n	8008f96 <SAI_BlockSynchroConfig+0x2a>
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d80d      	bhi.n	8008f9c <SAI_BlockSynchroConfig+0x30>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <SAI_BlockSynchroConfig+0x1e>
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d003      	beq.n	8008f90 <SAI_BlockSynchroConfig+0x24>
 8008f88:	e008      	b.n	8008f9c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
      break;
 8008f8e:	e008      	b.n	8008fa2 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008f90:	2310      	movs	r3, #16
 8008f92:	60fb      	str	r3, [r7, #12]
      break;
 8008f94:	e005      	b.n	8008fa2 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008f96:	2320      	movs	r3, #32
 8008f98:	60fb      	str	r3, [r7, #12]
      break;
 8008f9a:	e002      	b.n	8008fa2 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
      break;
 8008fa0:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8008fa2:	4a04      	ldr	r2, [pc, #16]	@ (8008fb4 <SAI_BlockSynchroConfig+0x48>)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	40015800 	.word	0x40015800

08008fb8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a46      	ldr	r2, [pc, #280]	@ (80090ec <SAI_GetInputClock+0x134>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d10b      	bne.n	8008fee <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8008fd6:	4b46      	ldr	r3, [pc, #280]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8008fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fdc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	4942      	ldr	r1, [pc, #264]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8008fec:	e00b      	b.n	8009006 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8008fee:	4b40      	ldr	r3, [pc, #256]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8008ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ff4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	493c      	ldr	r1, [pc, #240]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009006:	4b3a      	ldr	r3, [pc, #232]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d108      	bne.n	8009024 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009012:	4b37      	ldr	r3, [pc, #220]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800901a:	4a36      	ldr	r2, [pc, #216]	@ (80090f4 <SAI_GetInputClock+0x13c>)
 800901c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009020:	613b      	str	r3, [r7, #16]
 8009022:	e007      	b.n	8009034 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009024:	4b32      	ldr	r3, [pc, #200]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800902c:	4a32      	ldr	r2, [pc, #200]	@ (80090f8 <SAI_GetInputClock+0x140>)
 800902e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009032:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d121      	bne.n	8009080 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800903c:	4b2c      	ldr	r3, [pc, #176]	@ (80090f0 <SAI_GetInputClock+0x138>)
 800903e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009042:	0e1b      	lsrs	r3, r3, #24
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800904a:	4b29      	ldr	r3, [pc, #164]	@ (80090f0 <SAI_GetInputClock+0x138>)
 800904c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009050:	099b      	lsrs	r3, r3, #6
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	fb03 f202 	mul.w	r2, r3, r2
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009062:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8009064:	4b22      	ldr	r3, [pc, #136]	@ (80090f0 <SAI_GetInputClock+0x138>)
 8009066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	3301      	adds	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	fbb2 f3f3 	udiv	r3, r2, r3
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e02d      	b.n	80090dc <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009088:	d120      	bne.n	80090cc <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800908a:	4b19      	ldr	r3, [pc, #100]	@ (80090f0 <SAI_GetInputClock+0x138>)
 800908c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009090:	0e1b      	lsrs	r3, r3, #24
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8009098:	4b15      	ldr	r3, [pc, #84]	@ (80090f0 <SAI_GetInputClock+0x138>)
 800909a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800909e:	099b      	lsrs	r3, r3, #6
 80090a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	fb03 f202 	mul.w	r2, r3, r2
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b0:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80090b2:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <SAI_GetInputClock+0x138>)
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	e007      	b.n	80090dc <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80090cc:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <SAI_GetInputClock+0x138>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a07      	ldr	r2, [pc, #28]	@ (80090f0 <SAI_GetInputClock+0x138>)
 80090d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090d6:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80090d8:	4b08      	ldr	r3, [pc, #32]	@ (80090fc <SAI_GetInputClock+0x144>)
 80090da:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80090dc:	697b      	ldr	r3, [r7, #20]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40015804 	.word	0x40015804
 80090f0:	40023800 	.word	0x40023800
 80090f4:	00f42400 	.word	0x00f42400
 80090f8:	007a1200 	.word	0x007a1200
 80090fc:	00bb8000 	.word	0x00bb8000

08009100 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e022      	b.n	8009158 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7f9 fc3f 	bl	80029a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2203      	movs	r2, #3
 800912e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f814 	bl	8009160 <HAL_SD_InitCard>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e00a      	b.n	8009158 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b08e      	sub	sp, #56	@ 0x38
 8009164:	af04      	add	r7, sp, #16
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009168:	2300      	movs	r3, #0
 800916a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009170:	2300      	movs	r3, #0
 8009172:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800917c:	2376      	movs	r3, #118	@ 0x76
 800917e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681d      	ldr	r5, [r3, #0]
 8009184:	466c      	mov	r4, sp
 8009186:	f107 0314 	add.w	r3, r7, #20
 800918a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800918e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009198:	4628      	mov	r0, r5
 800919a:	f002 f8ff 	bl	800b39c <SDIO_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80091a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e04f      	b.n	8009250 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80091b0:	4b29      	ldr	r3, [pc, #164]	@ (8009258 <HAL_SD_InitCard+0xf8>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 f937 	bl	800b42e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80091c0:	4b25      	ldr	r3, [pc, #148]	@ (8009258 <HAL_SD_InitCard+0xf8>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80091c6:	2002      	movs	r0, #2
 80091c8:	f7fa f8d8 	bl	800337c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 ff55 	bl	800a07c <SD_PowerON>
 80091d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00b      	beq.n	80091f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e02e      	b.n	8009250 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fe74 	bl	8009ee0 <SD_InitCard>
 80091f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e01b      	b.n	8009250 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009220:	4618      	mov	r0, r3
 8009222:	f002 f996 	bl	800b552 <SDMMC_CmdBlockLength>
 8009226:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00f      	beq.n	800924e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a0a      	ldr	r2, [pc, #40]	@ (800925c <HAL_SD_InitCard+0xfc>)
 8009234:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	431a      	orrs	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3728      	adds	r7, #40	@ 0x28
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}
 8009258:	422580a0 	.word	0x422580a0
 800925c:	004005ff 	.word	0x004005ff

08009260 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08c      	sub	sp, #48	@ 0x30
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d107      	bne.n	8009288 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0be      	b.n	8009406 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 80b7 	bne.w	8009404 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800929c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	441a      	add	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d907      	bls.n	80092ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0a5      	b.n	8009406 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2203      	movs	r2, #3
 80092be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2200      	movs	r2, #0
 80092c8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80092d8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	4a4c      	ldr	r2, [pc, #304]	@ (8009410 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80092e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e6:	4a4b      	ldr	r2, [pc, #300]	@ (8009414 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80092e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ee:	2200      	movs	r2, #0
 80092f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f6:	2200      	movs	r2, #0
 80092f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3380      	adds	r3, #128	@ 0x80
 8009320:	4619      	mov	r1, r3
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	025b      	lsls	r3, r3, #9
 8009328:	089b      	lsrs	r3, r3, #2
 800932a:	f7fa f9f7 	bl	800371c <HAL_DMA_Start_IT>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d017      	beq.n	8009364 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009342:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a33      	ldr	r2, [pc, #204]	@ (8009418 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800934a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e050      	b.n	8009406 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009364:	4b2d      	ldr	r3, [pc, #180]	@ (800941c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009366:	2201      	movs	r2, #1
 8009368:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936e:	2b01      	cmp	r3, #1
 8009370:	d002      	beq.n	8009378 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	025b      	lsls	r3, r3, #9
 8009376:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009378:	f04f 33ff 	mov.w	r3, #4294967295
 800937c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	025b      	lsls	r3, r3, #9
 8009382:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009384:	2390      	movs	r3, #144	@ 0x90
 8009386:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009388:	2302      	movs	r3, #2
 800938a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800938c:	2300      	movs	r3, #0
 800938e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009390:	2301      	movs	r3, #1
 8009392:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f107 0210 	add.w	r2, r7, #16
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f002 f8ab 	bl	800b4fa <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d90a      	bls.n	80093c0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2282      	movs	r2, #130	@ 0x82
 80093ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093b6:	4618      	mov	r0, r3
 80093b8:	f002 f90f 	bl	800b5da <SDMMC_CmdReadMultiBlock>
 80093bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80093be:	e009      	b.n	80093d4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2281      	movs	r2, #129	@ 0x81
 80093c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093cc:	4618      	mov	r0, r3
 80093ce:	f002 f8e2 	bl	800b596 <SDMMC_CmdReadSingleBlock>
 80093d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80093d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d012      	beq.n	8009400 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a0e      	ldr	r2, [pc, #56]	@ (8009418 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80093e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	431a      	orrs	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e002      	b.n	8009406 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e000      	b.n	8009406 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009404:	2302      	movs	r3, #2
  }
}
 8009406:	4618      	mov	r0, r3
 8009408:	3730      	adds	r7, #48	@ 0x30
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	08009cef 	.word	0x08009cef
 8009414:	08009d61 	.word	0x08009d61
 8009418:	004005ff 	.word	0x004005ff
 800941c:	4225858c 	.word	0x4225858c

08009420 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08c      	sub	sp, #48	@ 0x30
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d107      	bne.n	8009448 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e0c1      	b.n	80095cc <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b01      	cmp	r3, #1
 8009452:	f040 80ba 	bne.w	80095ca <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800945c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	441a      	add	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009466:	429a      	cmp	r2, r3
 8009468:	d907      	bls.n	800947a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e0a8      	b.n	80095cc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2203      	movs	r2, #3
 800947e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 021a 	orr.w	r2, r2, #26
 8009498:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949e:	4a4d      	ldr	r2, [pc, #308]	@ (80095d4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80094a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a6:	4a4c      	ldr	r2, [pc, #304]	@ (80095d8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80094a8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ae:	2200      	movs	r2, #0
 80094b0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d002      	beq.n	80094c0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	025b      	lsls	r3, r3, #9
 80094be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d90a      	bls.n	80094dc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	22a0      	movs	r2, #160	@ 0xa0
 80094ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 f8c5 	bl	800b662 <SDMMC_CmdWriteMultiBlock>
 80094d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80094da:	e009      	b.n	80094f0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2290      	movs	r2, #144	@ 0x90
 80094e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 f898 	bl	800b61e <SDMMC_CmdWriteSingleBlock>
 80094ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80094f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d012      	beq.n	800951c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a38      	ldr	r2, [pc, #224]	@ (80095dc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80094fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	431a      	orrs	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e057      	b.n	80095cc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800951c:	4b30      	ldr	r3, [pc, #192]	@ (80095e0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800951e:	2201      	movs	r2, #1
 8009520:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009526:	2240      	movs	r2, #64	@ 0x40
 8009528:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3380      	adds	r3, #128	@ 0x80
 8009552:	461a      	mov	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	025b      	lsls	r3, r3, #9
 8009558:	089b      	lsrs	r3, r3, #2
 800955a:	f7fa f8df 	bl	800371c <HAL_DMA_Start_IT>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01a      	beq.n	800959a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 021a 	bic.w	r2, r2, #26
 8009572:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a18      	ldr	r2, [pc, #96]	@ (80095dc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800957a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009580:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e018      	b.n	80095cc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295
 800959e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	025b      	lsls	r3, r3, #9
 80095a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80095a6:	2390      	movs	r3, #144	@ 0x90
 80095a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f107 0210 	add.w	r2, r7, #16
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 ff9a 	bl	800b4fa <SDIO_ConfigData>

      return HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e000      	b.n	80095cc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80095ca:	2302      	movs	r3, #2
  }
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3730      	adds	r7, #48	@ 0x30
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	08009cc5 	.word	0x08009cc5
 80095d8:	08009d61 	.word	0x08009d61
 80095dc:	004005ff 	.word	0x004005ff
 80095e0:	4225858c 	.word	0x4225858c

080095e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <HAL_SD_IRQHandler+0x2e>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fdec 	bl	800a1e8 <SD_Read_IT>
 8009610:	e155      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 808f 	beq.w	8009740 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800962a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800963a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800963e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0201 	bic.w	r2, r2, #1
 800964e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d039      	beq.n	80096ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <HAL_SD_IRQHandler+0x8a>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d011      	beq.n	8009692 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f002 f818 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 8009678:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d008      	beq.n	8009692 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f91f 	bl	80098d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f240 523a 	movw	r2, #1338	@ 0x53a
 800969a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d104      	bne.n	80096be <HAL_SD_IRQHandler+0xda>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f003 fd98 	bl	800d1f4 <HAL_SD_RxCpltCallback>
 80096c4:	e0fb      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f003 fd8a 	bl	800d1e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80096cc:	e0f7      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 80f2 	beq.w	80098be <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d011      	beq.n	8009708 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 ffdd 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 80096ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	431a      	orrs	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f8e4 	bl	80098d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	f040 80d5 	bne.w	80098be <HAL_SD_IRQHandler+0x2da>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 80cf 	bne.w	80098be <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0208 	bic.w	r2, r2, #8
 800972e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f003 fd51 	bl	800d1e0 <HAL_SD_TxCpltCallback>
}
 800973e:	e0be      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d008      	beq.n	8009760 <HAL_SD_IRQHandler+0x17c>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f003 0308 	and.w	r3, r3, #8
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fd96 	bl	800a28a <SD_Write_IT>
 800975e:	e0ae      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009766:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80a7 	beq.w	80098be <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d005      	beq.n	800978a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009782:	f043 0202 	orr.w	r2, r3, #2
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800979c:	f043 0208 	orr.w	r2, r3, #8
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b6:	f043 0220 	orr.w	r2, r3, #32
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	f043 0210 	orr.w	r2, r3, #16
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80097e0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80097f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 ff56 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 80097fc:	4602      	mov	r2, r0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f003 0308 	and.w	r3, r3, #8
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f855 	bl	80098d0 <HAL_SD_ErrorCallback>
}
 8009826:	e04a      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982e:	2b00      	cmp	r3, #0
 8009830:	d045      	beq.n	80098be <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d104      	bne.n	8009846 <HAL_SD_IRQHandler+0x262>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f003 0320 	and.w	r3, r3, #32
 8009842:	2b00      	cmp	r3, #0
 8009844:	d011      	beq.n	800986a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984a:	4a1f      	ldr	r2, [pc, #124]	@ (80098c8 <HAL_SD_IRQHandler+0x2e4>)
 800984c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009852:	4618      	mov	r0, r3
 8009854:	f7f9 ffba 	bl	80037cc <HAL_DMA_Abort_IT>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d02f      	beq.n	80098be <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009862:	4618      	mov	r0, r3
 8009864:	f000 face 	bl	8009e04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009868:	e029      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d104      	bne.n	800987e <HAL_SD_IRQHandler+0x29a>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d011      	beq.n	80098a2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009882:	4a12      	ldr	r2, [pc, #72]	@ (80098cc <HAL_SD_IRQHandler+0x2e8>)
 8009884:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	4618      	mov	r0, r3
 800988c:	f7f9 ff9e 	bl	80037cc <HAL_DMA_Abort_IT>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d013      	beq.n	80098be <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fae9 	bl	8009e72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80098a0:	e00d      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f003 fc88 	bl	800d1cc <HAL_SD_AbortCallback>
}
 80098bc:	e7ff      	b.n	80098be <HAL_SD_IRQHandler+0x2da>
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	08009e05 	.word	0x08009e05
 80098cc:	08009e73 	.word	0x08009e73

080098d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098f2:	0f9b      	lsrs	r3, r3, #30
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098fe:	0e9b      	lsrs	r3, r3, #26
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 030f 	and.w	r3, r3, #15
 8009906:	b2da      	uxtb	r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009910:	0e1b      	lsrs	r3, r3, #24
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	b2da      	uxtb	r2, r3
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009922:	0c1b      	lsrs	r3, r3, #16
 8009924:	b2da      	uxtb	r2, r3
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	b2da      	uxtb	r2, r3
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800993a:	b2da      	uxtb	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009944:	0d1b      	lsrs	r3, r3, #20
 8009946:	b29a      	uxth	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009950:	0c1b      	lsrs	r3, r3, #16
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	b2da      	uxtb	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009962:	0bdb      	lsrs	r3, r3, #15
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	b2da      	uxtb	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009974:	0b9b      	lsrs	r3, r3, #14
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009986:	0b5b      	lsrs	r3, r3, #13
 8009988:	b2db      	uxtb	r3, r3
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009998:	0b1b      	lsrs	r3, r3, #12
 800999a:	b2db      	uxtb	r3, r3
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2200      	movs	r2, #0
 80099aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d163      	bne.n	8009a7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099b8:	009a      	lsls	r2, r3, #2
 80099ba:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80099be:	4013      	ands	r3, r2
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80099c4:	0f92      	lsrs	r2, r2, #30
 80099c6:	431a      	orrs	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d0:	0edb      	lsrs	r3, r3, #27
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f003 0307 	and.w	r3, r3, #7
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e2:	0e1b      	lsrs	r3, r3, #24
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f4:	0d5b      	lsrs	r3, r3, #21
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a06:	0c9b      	lsrs	r3, r3, #18
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a18:	0bdb      	lsrs	r3, r3, #15
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	7e1b      	ldrb	r3, [r3, #24]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009a46:	fb03 f202 	mul.w	r2, r3, r2
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	7a1b      	ldrb	r3, [r3, #8]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	2201      	movs	r2, #1
 8009a5a:	409a      	lsls	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009a68:	0a52      	lsrs	r2, r2, #9
 8009a6a:	fb03 f202 	mul.w	r2, r3, r2
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a78:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a7a:	e031      	b.n	8009ae0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d11d      	bne.n	8009ac0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a88:	041b      	lsls	r3, r3, #16
 8009a8a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	431a      	orrs	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	029a      	lsls	r2, r3, #10
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ab4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	661a      	str	r2, [r3, #96]	@ 0x60
 8009abe:	e00f      	b.n	8009ae0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a58      	ldr	r2, [pc, #352]	@ (8009c28 <HAL_SD_GetCardCSD+0x344>)
 8009ac6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009acc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e09d      	b.n	8009c1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ae4:	0b9b      	lsrs	r3, r3, #14
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af6:	09db      	lsrs	r3, r3, #7
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b18:	0fdb      	lsrs	r3, r3, #31
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b24:	0f5b      	lsrs	r3, r3, #29
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0303 	and.w	r3, r3, #3
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b36:	0e9b      	lsrs	r3, r3, #26
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b48:	0d9b      	lsrs	r3, r3, #22
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b5a:	0d5b      	lsrs	r3, r3, #21
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b8a:	0bdb      	lsrs	r3, r3, #15
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b9e:	0b9b      	lsrs	r3, r3, #14
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb2:	0b5b      	lsrs	r3, r3, #13
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc6:	0b1b      	lsrs	r3, r3, #12
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bda:	0a9b      	lsrs	r3, r3, #10
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bee:	0a1b      	lsrs	r3, r3, #8
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	085b      	lsrs	r3, r3, #1
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	004005ff 	.word	0x004005ff

08009c2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009c90:	f107 030c 	add.w	r3, r7, #12
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fa7e 	bl	800a198 <SD_SendStatus>
 8009c9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	0a5b      	lsrs	r3, r3, #9
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009cba:	693b      	ldr	r3, [r7, #16]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009ce2:	bf00      	nop
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d00:	2b82      	cmp	r3, #130	@ 0x82
 8009d02:	d111      	bne.n	8009d28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f001 fccd 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 8009d0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d008      	beq.n	8009d28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	431a      	orrs	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff fdd4 	bl	80098d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0208 	bic.w	r2, r2, #8
 8009d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009d40:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f003 fa4f 	bl	800d1f4 <HAL_SD_RxCpltCallback>
#endif
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7f9 fed8 	bl	8003b24 <HAL_DMA_GetError>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d03e      	beq.n	8009df8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d002      	beq.n	8009d96 <SD_DMAError+0x36>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d12d      	bne.n	8009df2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a19      	ldr	r2, [pc, #100]	@ (8009e00 <SD_DMAError+0xa0>)
 8009d9c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009dac:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009dba:	6978      	ldr	r0, [r7, #20]
 8009dbc:	f7ff ff62 	bl	8009c84 <HAL_SD_GetCardState>
 8009dc0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b06      	cmp	r3, #6
 8009dc6:	d002      	beq.n	8009dce <SD_DMAError+0x6e>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b05      	cmp	r3, #5
 8009dcc:	d10a      	bne.n	8009de4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 fc68 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dde:	431a      	orrs	r2, r3
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2200      	movs	r2, #0
 8009df0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009df2:	6978      	ldr	r0, [r7, #20]
 8009df4:	f7ff fd6c 	bl	80098d0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009df8:	bf00      	nop
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	004005ff 	.word	0x004005ff

08009e04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff ff31 	bl	8009c84 <HAL_SD_GetCardState>
 8009e22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b06      	cmp	r3, #6
 8009e36:	d002      	beq.n	8009e3e <SD_DMATxAbort+0x3a>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d10a      	bne.n	8009e54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 fc30 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d103      	bne.n	8009e64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f003 f9b5 	bl	800d1cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009e62:	e002      	b.n	8009e6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fd33 	bl	80098d0 <HAL_SD_ErrorCallback>
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009e88:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f7ff fefa 	bl	8009c84 <HAL_SD_GetCardState>
 8009e90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b06      	cmp	r3, #6
 8009ea4:	d002      	beq.n	8009eac <SD_DMARxAbort+0x3a>
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b05      	cmp	r3, #5
 8009eaa:	d10a      	bne.n	8009ec2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 fbf9 	bl	800b6a8 <SDMMC_CmdStopTransfer>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d103      	bne.n	8009ed2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f003 f97e 	bl	800d1cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ed0:	e002      	b.n	8009ed8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff fcfc 	bl	80098d0 <HAL_SD_ErrorCallback>
}
 8009ed8:	bf00      	nop
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ee0:	b5b0      	push	{r4, r5, r7, lr}
 8009ee2:	b094      	sub	sp, #80	@ 0x50
 8009ee4:	af04      	add	r7, sp, #16
 8009ee6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 faaa 	bl	800b44a <SDIO_GetPowerState>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009efc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009f00:	e0b8      	b.n	800a074 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d02f      	beq.n	8009f6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f001 fc91 	bl	800b836 <SDMMC_CmdSendCID>
 8009f14:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <SD_InitCard+0x40>
    {
      return errorstate;
 8009f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1e:	e0a9      	b.n	800a074 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 fad4 	bl	800b4d4 <SDIO_GetResponse>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2104      	movs	r1, #4
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 facb 	bl	800b4d4 <SDIO_GetResponse>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2108      	movs	r1, #8
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 fac2 	bl	800b4d4 <SDIO_GetResponse>
 8009f50:	4602      	mov	r2, r0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	210c      	movs	r1, #12
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 fab9 	bl	800b4d4 <SDIO_GetResponse>
 8009f62:	4602      	mov	r2, r0
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d00d      	beq.n	8009f8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f107 020e 	add.w	r2, r7, #14
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f001 fc97 	bl	800b8b0 <SDMMC_CmdSetRelAdd>
 8009f82:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <SD_InitCard+0xae>
    {
      return errorstate;
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8c:	e072      	b.n	800a074 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d036      	beq.n	800a004 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009f96:	89fb      	ldrh	r3, [r7, #14]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa6:	041b      	lsls	r3, r3, #16
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f001 fc61 	bl	800b872 <SDMMC_CmdSendCSD>
 8009fb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fba:	e05b      	b.n	800a074 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fa86 	bl	800b4d4 <SDIO_GetResponse>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2104      	movs	r1, #4
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f001 fa7d 	bl	800b4d4 <SDIO_GetResponse>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2108      	movs	r1, #8
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f001 fa74 	bl	800b4d4 <SDIO_GetResponse>
 8009fec:	4602      	mov	r2, r0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	210c      	movs	r1, #12
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 fa6b 	bl	800b4d4 <SDIO_GetResponse>
 8009ffe:	4602      	mov	r2, r0
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2104      	movs	r1, #4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fa62 	bl	800b4d4 <SDIO_GetResponse>
 800a010:	4603      	mov	r3, r0
 800a012:	0d1a      	lsrs	r2, r3, #20
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a018:	f107 0310 	add.w	r3, r7, #16
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff fc60 	bl	80098e4 <HAL_SD_GetCardCSD>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a02a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a02e:	e021      	b.n	800a074 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a038:	041b      	lsls	r3, r3, #16
 800a03a:	2200      	movs	r2, #0
 800a03c:	461c      	mov	r4, r3
 800a03e:	4615      	mov	r5, r2
 800a040:	4622      	mov	r2, r4
 800a042:	462b      	mov	r3, r5
 800a044:	4608      	mov	r0, r1
 800a046:	f001 fb51 	bl	800b6ec <SDMMC_CmdSelDesel>
 800a04a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <SD_InitCard+0x176>
  {
    return errorstate;
 800a052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a054:	e00e      	b.n	800a074 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681d      	ldr	r5, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	466c      	mov	r4, sp
 800a05e:	f103 0210 	add.w	r2, r3, #16
 800a062:	ca07      	ldmia	r2, {r0, r1, r2}
 800a064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a068:	3304      	adds	r3, #4
 800a06a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a06c:	4628      	mov	r0, r5
 800a06e:	f001 f995 	bl	800b39c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3740      	adds	r7, #64	@ 0x40
 800a078:	46bd      	mov	sp, r7
 800a07a:	bdb0      	pop	{r4, r5, r7, pc}

0800a07c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	2300      	movs	r3, #0
 800a08e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fb4c 	bl	800b732 <SDMMC_CmdGoIdleState>
 800a09a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	e072      	b.n	800a18c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f001 fb5f 	bl	800b76e <SDMMC_CmdOperCond>
 800a0b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00d      	beq.n	800a0d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f001 fb35 	bl	800b732 <SDMMC_CmdGoIdleState>
 800a0c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d004      	beq.n	800a0da <SD_PowerON+0x5e>
    {
      return errorstate;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	e05b      	b.n	800a18c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d137      	bne.n	800a152 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f001 fb5f 	bl	800b7ac <SDMMC_CmdAppCommand>
 800a0ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d02d      	beq.n	800a152 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a0fa:	e047      	b.n	800a18c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fb52 	bl	800b7ac <SDMMC_CmdAppCommand>
 800a108:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <SD_PowerON+0x98>
    {
      return errorstate;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	e03b      	b.n	800a18c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	491e      	ldr	r1, [pc, #120]	@ (800a194 <SD_PowerON+0x118>)
 800a11a:	4618      	mov	r0, r3
 800a11c:	f001 fb68 	bl	800b7f0 <SDMMC_CmdAppOperCommand>
 800a120:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a128:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a12c:	e02e      	b.n	800a18c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f001 f9cd 	bl	800b4d4 <SDIO_GetResponse>
 800a13a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	0fdb      	lsrs	r3, r3, #31
 800a140:	2b01      	cmp	r3, #1
 800a142:	d101      	bne.n	800a148 <SD_PowerON+0xcc>
 800a144:	2301      	movs	r3, #1
 800a146:	e000      	b.n	800a14a <SD_PowerON+0xce>
 800a148:	2300      	movs	r3, #0
 800a14a:	613b      	str	r3, [r7, #16]

    count++;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	3301      	adds	r3, #1
 800a150:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a158:	4293      	cmp	r3, r2
 800a15a:	d802      	bhi.n	800a162 <SD_PowerON+0xe6>
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0cc      	beq.n	800a0fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a168:	4293      	cmp	r3, r2
 800a16a:	d902      	bls.n	800a172 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a16c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a170:	e00c      	b.n	800a18c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	645a      	str	r2, [r3, #68]	@ 0x44
 800a182:	e002      	b.n	800a18a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	c1100000 	.word	0xc1100000

0800a198 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a1a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1ac:	e018      	b.n	800a1e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b6:	041b      	lsls	r3, r3, #16
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f001 fb99 	bl	800b8f2 <SDMMC_CmdSendStatus>
 800a1c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <SD_SendStatus+0x34>
  {
    return errorstate;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	e009      	b.n	800a1e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f001 f97e 	bl	800b4d4 <SDIO_GetResponse>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d03f      	beq.n	800a282 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a202:	2300      	movs	r3, #0
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	e033      	b.n	800a270 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 f8f0 	bl	800b3f2 <SDIO_ReadFIFO>
 800a212:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	b2da      	uxtb	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3301      	adds	r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	3b01      	subs	r3, #1
 800a226:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	0a1b      	lsrs	r3, r3, #8
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3301      	adds	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	0c1b      	lsrs	r3, r3, #16
 800a242:	b2da      	uxtb	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3301      	adds	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3b01      	subs	r3, #1
 800a252:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	0e1b      	lsrs	r3, r3, #24
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3301      	adds	r3, #1
 800a262:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3b01      	subs	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	3301      	adds	r3, #1
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b07      	cmp	r3, #7
 800a274:	d9c8      	bls.n	800a208 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800a282:	bf00      	nop
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d043      	beq.n	800a32c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e037      	b.n	800a31a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	021a      	lsls	r2, r3, #8
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	041a      	lsls	r2, r3, #16
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	061a      	lsls	r2, r3, #24
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	3b01      	subs	r3, #1
 800a302:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f107 0208 	add.w	r2, r7, #8
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 f87c 	bl	800b40c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	3301      	adds	r3, #1
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b07      	cmp	r3, #7
 800a31e:	d9c4      	bls.n	800a2aa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a32c:	bf00      	nop
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e025      	b.n	800a394 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d106      	bne.n	800a362 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7f8 fd5b 	bl	8002e18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2202      	movs	r2, #2
 800a366:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3304      	adds	r3, #4
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f000 ff4b 	bl	800b210 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	461a      	mov	r2, r3
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	f000 ffa0 	bl	800b2ca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e041      	b.n	800a432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7f8 fbe0 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f000 fa7e 	bl	800a8dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d001      	beq.n	800a454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e04e      	b.n	800a4f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a23      	ldr	r2, [pc, #140]	@ (800a500 <HAL_TIM_Base_Start_IT+0xc4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d022      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a47e:	d01d      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a1f      	ldr	r2, [pc, #124]	@ (800a504 <HAL_TIM_Base_Start_IT+0xc8>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d018      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a1e      	ldr	r2, [pc, #120]	@ (800a508 <HAL_TIM_Base_Start_IT+0xcc>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d013      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a1c      	ldr	r2, [pc, #112]	@ (800a50c <HAL_TIM_Base_Start_IT+0xd0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00e      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a1b      	ldr	r2, [pc, #108]	@ (800a510 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d009      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a19      	ldr	r2, [pc, #100]	@ (800a514 <HAL_TIM_Base_Start_IT+0xd8>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d004      	beq.n	800a4bc <HAL_TIM_Base_Start_IT+0x80>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a18      	ldr	r2, [pc, #96]	@ (800a518 <HAL_TIM_Base_Start_IT+0xdc>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d111      	bne.n	800a4e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b06      	cmp	r3, #6
 800a4cc:	d010      	beq.n	800a4f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f042 0201 	orr.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4de:	e007      	b.n	800a4f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0201 	orr.w	r2, r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40010000 	.word	0x40010000
 800a504:	40000400 	.word	0x40000400
 800a508:	40000800 	.word	0x40000800
 800a50c:	40000c00 	.word	0x40000c00
 800a510:	40010400 	.word	0x40010400
 800a514:	40014000 	.word	0x40014000
 800a518:	40001800 	.word	0x40001800

0800a51c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d020      	beq.n	800a580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01b      	beq.n	800a580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0202 	mvn.w	r2, #2
 800a550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f999 	bl	800a89e <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f98b 	bl	800a88a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f99c 	bl	800a8b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d020      	beq.n	800a5cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01b      	beq.n	800a5cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0204 	mvn.w	r2, #4
 800a59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f973 	bl	800a89e <HAL_TIM_IC_CaptureCallback>
 800a5b8:	e005      	b.n	800a5c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f965 	bl	800a88a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f976 	bl	800a8b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d020      	beq.n	800a618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f003 0308 	and.w	r3, r3, #8
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01b      	beq.n	800a618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f06f 0208 	mvn.w	r2, #8
 800a5e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2204      	movs	r2, #4
 800a5ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f94d 	bl	800a89e <HAL_TIM_IC_CaptureCallback>
 800a604:	e005      	b.n	800a612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f93f 	bl	800a88a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f950 	bl	800a8b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0310 	and.w	r3, r3, #16
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d020      	beq.n	800a664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f003 0310 	and.w	r3, r3, #16
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01b      	beq.n	800a664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f06f 0210 	mvn.w	r2, #16
 800a634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2208      	movs	r2, #8
 800a63a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f927 	bl	800a89e <HAL_TIM_IC_CaptureCallback>
 800a650:	e005      	b.n	800a65e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f919 	bl	800a88a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f92a 	bl	800a8b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00c      	beq.n	800a688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d007      	beq.n	800a688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f06f 0201 	mvn.w	r2, #1
 800a680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7f7 ff90 	bl	80025a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00c      	beq.n	800a6ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fae4 	bl	800ac74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00c      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f8fb 	bl	800a8c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00c      	beq.n	800a6f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f003 0320 	and.w	r3, r3, #32
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d007      	beq.n	800a6f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0220 	mvn.w	r2, #32
 800a6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fab6 	bl	800ac60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_TIM_ConfigClockSource+0x1c>
 800a714:	2302      	movs	r3, #2
 800a716:	e0b4      	b.n	800a882 <HAL_TIM_ConfigClockSource+0x186>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a73e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a750:	d03e      	beq.n	800a7d0 <HAL_TIM_ConfigClockSource+0xd4>
 800a752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a756:	f200 8087 	bhi.w	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a75a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a75e:	f000 8086 	beq.w	800a86e <HAL_TIM_ConfigClockSource+0x172>
 800a762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a766:	d87f      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a768:	2b70      	cmp	r3, #112	@ 0x70
 800a76a:	d01a      	beq.n	800a7a2 <HAL_TIM_ConfigClockSource+0xa6>
 800a76c:	2b70      	cmp	r3, #112	@ 0x70
 800a76e:	d87b      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a770:	2b60      	cmp	r3, #96	@ 0x60
 800a772:	d050      	beq.n	800a816 <HAL_TIM_ConfigClockSource+0x11a>
 800a774:	2b60      	cmp	r3, #96	@ 0x60
 800a776:	d877      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a778:	2b50      	cmp	r3, #80	@ 0x50
 800a77a:	d03c      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0xfa>
 800a77c:	2b50      	cmp	r3, #80	@ 0x50
 800a77e:	d873      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a780:	2b40      	cmp	r3, #64	@ 0x40
 800a782:	d058      	beq.n	800a836 <HAL_TIM_ConfigClockSource+0x13a>
 800a784:	2b40      	cmp	r3, #64	@ 0x40
 800a786:	d86f      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a788:	2b30      	cmp	r3, #48	@ 0x30
 800a78a:	d064      	beq.n	800a856 <HAL_TIM_ConfigClockSource+0x15a>
 800a78c:	2b30      	cmp	r3, #48	@ 0x30
 800a78e:	d86b      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a790:	2b20      	cmp	r3, #32
 800a792:	d060      	beq.n	800a856 <HAL_TIM_ConfigClockSource+0x15a>
 800a794:	2b20      	cmp	r3, #32
 800a796:	d867      	bhi.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d05c      	beq.n	800a856 <HAL_TIM_ConfigClockSource+0x15a>
 800a79c:	2b10      	cmp	r3, #16
 800a79e:	d05a      	beq.n	800a856 <HAL_TIM_ConfigClockSource+0x15a>
 800a7a0:	e062      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7b2:	f000 f9b9 	bl	800ab28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	609a      	str	r2, [r3, #8]
      break;
 800a7ce:	e04f      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7e0:	f000 f9a2 	bl	800ab28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7f2:	609a      	str	r2, [r3, #8]
      break;
 800a7f4:	e03c      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a802:	461a      	mov	r2, r3
 800a804:	f000 f916 	bl	800aa34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2150      	movs	r1, #80	@ 0x50
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 f96f 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 800a814:	e02c      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a822:	461a      	mov	r2, r3
 800a824:	f000 f935 	bl	800aa92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2160      	movs	r1, #96	@ 0x60
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 f95f 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 800a834:	e01c      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a842:	461a      	mov	r2, r3
 800a844:	f000 f8f6 	bl	800aa34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2140      	movs	r1, #64	@ 0x40
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 f94f 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 800a854:	e00c      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	4610      	mov	r0, r2
 800a862:	f000 f946 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 800a866:	e003      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	73fb      	strb	r3, [r7, #15]
      break;
 800a86c:	e000      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a86e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8ce:	bf00      	nop
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
	...

0800a8dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a46      	ldr	r2, [pc, #280]	@ (800aa08 <TIM_Base_SetConfig+0x12c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8fa:	d00f      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a43      	ldr	r2, [pc, #268]	@ (800aa0c <TIM_Base_SetConfig+0x130>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d00b      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a42      	ldr	r2, [pc, #264]	@ (800aa10 <TIM_Base_SetConfig+0x134>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d007      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a41      	ldr	r2, [pc, #260]	@ (800aa14 <TIM_Base_SetConfig+0x138>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a40      	ldr	r2, [pc, #256]	@ (800aa18 <TIM_Base_SetConfig+0x13c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d108      	bne.n	800a92e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a35      	ldr	r2, [pc, #212]	@ (800aa08 <TIM_Base_SetConfig+0x12c>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d02b      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a93c:	d027      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a32      	ldr	r2, [pc, #200]	@ (800aa0c <TIM_Base_SetConfig+0x130>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d023      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a31      	ldr	r2, [pc, #196]	@ (800aa10 <TIM_Base_SetConfig+0x134>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d01f      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a30      	ldr	r2, [pc, #192]	@ (800aa14 <TIM_Base_SetConfig+0x138>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d01b      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a2f      	ldr	r2, [pc, #188]	@ (800aa18 <TIM_Base_SetConfig+0x13c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d017      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a2e      	ldr	r2, [pc, #184]	@ (800aa1c <TIM_Base_SetConfig+0x140>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d013      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a2d      	ldr	r2, [pc, #180]	@ (800aa20 <TIM_Base_SetConfig+0x144>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00f      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a2c      	ldr	r2, [pc, #176]	@ (800aa24 <TIM_Base_SetConfig+0x148>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d00b      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a2b      	ldr	r2, [pc, #172]	@ (800aa28 <TIM_Base_SetConfig+0x14c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d007      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a2a      	ldr	r2, [pc, #168]	@ (800aa2c <TIM_Base_SetConfig+0x150>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d003      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a29      	ldr	r2, [pc, #164]	@ (800aa30 <TIM_Base_SetConfig+0x154>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d108      	bne.n	800a9a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a10      	ldr	r2, [pc, #64]	@ (800aa08 <TIM_Base_SetConfig+0x12c>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d003      	beq.n	800a9d4 <TIM_Base_SetConfig+0xf8>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a12      	ldr	r2, [pc, #72]	@ (800aa18 <TIM_Base_SetConfig+0x13c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d103      	bne.n	800a9dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	691a      	ldr	r2, [r3, #16]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d105      	bne.n	800a9fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f023 0201 	bic.w	r2, r3, #1
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	611a      	str	r2, [r3, #16]
  }
}
 800a9fa:	bf00      	nop
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40010000 	.word	0x40010000
 800aa0c:	40000400 	.word	0x40000400
 800aa10:	40000800 	.word	0x40000800
 800aa14:	40000c00 	.word	0x40000c00
 800aa18:	40010400 	.word	0x40010400
 800aa1c:	40014000 	.word	0x40014000
 800aa20:	40014400 	.word	0x40014400
 800aa24:	40014800 	.word	0x40014800
 800aa28:	40001800 	.word	0x40001800
 800aa2c:	40001c00 	.word	0x40001c00
 800aa30:	40002000 	.word	0x40002000

0800aa34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	f023 0201 	bic.w	r2, r3, #1
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f023 030a 	bic.w	r3, r3, #10
 800aa70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	621a      	str	r2, [r3, #32]
}
 800aa86:	bf00      	nop
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b087      	sub	sp, #28
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	f023 0210 	bic.w	r2, r3, #16
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aabc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	031b      	lsls	r3, r3, #12
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aace:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	621a      	str	r2, [r3, #32]
}
 800aae6:	bf00      	nop
 800aae8:	371c      	adds	r7, #28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	f043 0307 	orr.w	r3, r3, #7
 800ab14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
}
 800ab1c:	bf00      	nop
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	021a      	lsls	r2, r3, #8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	697a      	ldr	r2, [r7, #20]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	609a      	str	r2, [r3, #8]
}
 800ab5c:	bf00      	nop
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d101      	bne.n	800ab80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	e05a      	b.n	800ac36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a21      	ldr	r2, [pc, #132]	@ (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d022      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abcc:	d01d      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a1d      	ldr	r2, [pc, #116]	@ (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d018      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a1b      	ldr	r2, [pc, #108]	@ (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d013      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a1a      	ldr	r2, [pc, #104]	@ (800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d00e      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a18      	ldr	r2, [pc, #96]	@ (800ac54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d009      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a17      	ldr	r2, [pc, #92]	@ (800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d004      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a15      	ldr	r2, [pc, #84]	@ (800ac5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d10c      	bne.n	800ac24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	40010000 	.word	0x40010000
 800ac48:	40000400 	.word	0x40000400
 800ac4c:	40000800 	.word	0x40000800
 800ac50:	40000c00 	.word	0x40000c00
 800ac54:	40010400 	.word	0x40010400
 800ac58:	40014000 	.word	0x40014000
 800ac5c:	40001800 	.word	0x40001800

0800ac60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e042      	b.n	800ad20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d106      	bne.n	800acb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7f7 ff8c 	bl	8002bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2224      	movs	r2, #36	@ 0x24
 800acb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68da      	ldr	r2, [r3, #12]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f82b 	bl	800ad28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ace0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	695a      	ldr	r2, [r3, #20]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800acf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68da      	ldr	r2, [r3, #12]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ad00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2220      	movs	r2, #32
 800ad14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad2c:	b0c0      	sub	sp, #256	@ 0x100
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ad40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad44:	68d9      	ldr	r1, [r3, #12]
 800ad46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	ea40 0301 	orr.w	r3, r0, r1
 800ad50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad56:	689a      	ldr	r2, [r3, #8]
 800ad58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	431a      	orrs	r2, r3
 800ad60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad64:	695b      	ldr	r3, [r3, #20]
 800ad66:	431a      	orrs	r2, r3
 800ad68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ad80:	f021 010c 	bic.w	r1, r1, #12
 800ad84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ad9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ada2:	6999      	ldr	r1, [r3, #24]
 800ada4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	ea40 0301 	orr.w	r3, r0, r1
 800adae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b8f      	ldr	r3, [pc, #572]	@ (800aff4 <UART_SetConfig+0x2cc>)
 800adb8:	429a      	cmp	r2, r3
 800adba:	d005      	beq.n	800adc8 <UART_SetConfig+0xa0>
 800adbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b8d      	ldr	r3, [pc, #564]	@ (800aff8 <UART_SetConfig+0x2d0>)
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d104      	bne.n	800add2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800adc8:	f7fd fa68 	bl	800829c <HAL_RCC_GetPCLK2Freq>
 800adcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800add0:	e003      	b.n	800adda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800add2:	f7fd fa4f 	bl	8008274 <HAL_RCC_GetPCLK1Freq>
 800add6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ade4:	f040 810c 	bne.w	800b000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ade8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adec:	2200      	movs	r2, #0
 800adee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800adf2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800adf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800adfa:	4622      	mov	r2, r4
 800adfc:	462b      	mov	r3, r5
 800adfe:	1891      	adds	r1, r2, r2
 800ae00:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ae02:	415b      	adcs	r3, r3
 800ae04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	eb12 0801 	adds.w	r8, r2, r1
 800ae10:	4629      	mov	r1, r5
 800ae12:	eb43 0901 	adc.w	r9, r3, r1
 800ae16:	f04f 0200 	mov.w	r2, #0
 800ae1a:	f04f 0300 	mov.w	r3, #0
 800ae1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae2a:	4690      	mov	r8, r2
 800ae2c:	4699      	mov	r9, r3
 800ae2e:	4623      	mov	r3, r4
 800ae30:	eb18 0303 	adds.w	r3, r8, r3
 800ae34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ae38:	462b      	mov	r3, r5
 800ae3a:	eb49 0303 	adc.w	r3, r9, r3
 800ae3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ae4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ae52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ae56:	460b      	mov	r3, r1
 800ae58:	18db      	adds	r3, r3, r3
 800ae5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	eb42 0303 	adc.w	r3, r2, r3
 800ae62:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ae68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ae6c:	f7f5 fa20 	bl	80002b0 <__aeabi_uldivmod>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4b61      	ldr	r3, [pc, #388]	@ (800affc <UART_SetConfig+0x2d4>)
 800ae76:	fba3 2302 	umull	r2, r3, r3, r2
 800ae7a:	095b      	lsrs	r3, r3, #5
 800ae7c:	011c      	lsls	r4, r3, #4
 800ae7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ae8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ae90:	4642      	mov	r2, r8
 800ae92:	464b      	mov	r3, r9
 800ae94:	1891      	adds	r1, r2, r2
 800ae96:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ae98:	415b      	adcs	r3, r3
 800ae9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aea0:	4641      	mov	r1, r8
 800aea2:	eb12 0a01 	adds.w	sl, r2, r1
 800aea6:	4649      	mov	r1, r9
 800aea8:	eb43 0b01 	adc.w	fp, r3, r1
 800aeac:	f04f 0200 	mov.w	r2, #0
 800aeb0:	f04f 0300 	mov.w	r3, #0
 800aeb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aeb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aec0:	4692      	mov	sl, r2
 800aec2:	469b      	mov	fp, r3
 800aec4:	4643      	mov	r3, r8
 800aec6:	eb1a 0303 	adds.w	r3, sl, r3
 800aeca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aece:	464b      	mov	r3, r9
 800aed0:	eb4b 0303 	adc.w	r3, fp, r3
 800aed4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aee4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aeec:	460b      	mov	r3, r1
 800aeee:	18db      	adds	r3, r3, r3
 800aef0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef2:	4613      	mov	r3, r2
 800aef4:	eb42 0303 	adc.w	r3, r2, r3
 800aef8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aefa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aefe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800af02:	f7f5 f9d5 	bl	80002b0 <__aeabi_uldivmod>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	4b3b      	ldr	r3, [pc, #236]	@ (800affc <UART_SetConfig+0x2d4>)
 800af0e:	fba3 2301 	umull	r2, r3, r3, r1
 800af12:	095b      	lsrs	r3, r3, #5
 800af14:	2264      	movs	r2, #100	@ 0x64
 800af16:	fb02 f303 	mul.w	r3, r2, r3
 800af1a:	1acb      	subs	r3, r1, r3
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800af22:	4b36      	ldr	r3, [pc, #216]	@ (800affc <UART_SetConfig+0x2d4>)
 800af24:	fba3 2302 	umull	r2, r3, r3, r2
 800af28:	095b      	lsrs	r3, r3, #5
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800af30:	441c      	add	r4, r3
 800af32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af36:	2200      	movs	r2, #0
 800af38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800af40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800af44:	4642      	mov	r2, r8
 800af46:	464b      	mov	r3, r9
 800af48:	1891      	adds	r1, r2, r2
 800af4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800af4c:	415b      	adcs	r3, r3
 800af4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800af54:	4641      	mov	r1, r8
 800af56:	1851      	adds	r1, r2, r1
 800af58:	6339      	str	r1, [r7, #48]	@ 0x30
 800af5a:	4649      	mov	r1, r9
 800af5c:	414b      	adcs	r3, r1
 800af5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af60:	f04f 0200 	mov.w	r2, #0
 800af64:	f04f 0300 	mov.w	r3, #0
 800af68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800af6c:	4659      	mov	r1, fp
 800af6e:	00cb      	lsls	r3, r1, #3
 800af70:	4651      	mov	r1, sl
 800af72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af76:	4651      	mov	r1, sl
 800af78:	00ca      	lsls	r2, r1, #3
 800af7a:	4610      	mov	r0, r2
 800af7c:	4619      	mov	r1, r3
 800af7e:	4603      	mov	r3, r0
 800af80:	4642      	mov	r2, r8
 800af82:	189b      	adds	r3, r3, r2
 800af84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af88:	464b      	mov	r3, r9
 800af8a:	460a      	mov	r2, r1
 800af8c:	eb42 0303 	adc.w	r3, r2, r3
 800af90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800afa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800afa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800afa8:	460b      	mov	r3, r1
 800afaa:	18db      	adds	r3, r3, r3
 800afac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afae:	4613      	mov	r3, r2
 800afb0:	eb42 0303 	adc.w	r3, r2, r3
 800afb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800afba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800afbe:	f7f5 f977 	bl	80002b0 <__aeabi_uldivmod>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4b0d      	ldr	r3, [pc, #52]	@ (800affc <UART_SetConfig+0x2d4>)
 800afc8:	fba3 1302 	umull	r1, r3, r3, r2
 800afcc:	095b      	lsrs	r3, r3, #5
 800afce:	2164      	movs	r1, #100	@ 0x64
 800afd0:	fb01 f303 	mul.w	r3, r1, r3
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	3332      	adds	r3, #50	@ 0x32
 800afda:	4a08      	ldr	r2, [pc, #32]	@ (800affc <UART_SetConfig+0x2d4>)
 800afdc:	fba2 2303 	umull	r2, r3, r2, r3
 800afe0:	095b      	lsrs	r3, r3, #5
 800afe2:	f003 0207 	and.w	r2, r3, #7
 800afe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4422      	add	r2, r4
 800afee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aff0:	e106      	b.n	800b200 <UART_SetConfig+0x4d8>
 800aff2:	bf00      	nop
 800aff4:	40011000 	.word	0x40011000
 800aff8:	40011400 	.word	0x40011400
 800affc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b004:	2200      	movs	r2, #0
 800b006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b00a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b00e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b012:	4642      	mov	r2, r8
 800b014:	464b      	mov	r3, r9
 800b016:	1891      	adds	r1, r2, r2
 800b018:	6239      	str	r1, [r7, #32]
 800b01a:	415b      	adcs	r3, r3
 800b01c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b01e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b022:	4641      	mov	r1, r8
 800b024:	1854      	adds	r4, r2, r1
 800b026:	4649      	mov	r1, r9
 800b028:	eb43 0501 	adc.w	r5, r3, r1
 800b02c:	f04f 0200 	mov.w	r2, #0
 800b030:	f04f 0300 	mov.w	r3, #0
 800b034:	00eb      	lsls	r3, r5, #3
 800b036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b03a:	00e2      	lsls	r2, r4, #3
 800b03c:	4614      	mov	r4, r2
 800b03e:	461d      	mov	r5, r3
 800b040:	4643      	mov	r3, r8
 800b042:	18e3      	adds	r3, r4, r3
 800b044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b048:	464b      	mov	r3, r9
 800b04a:	eb45 0303 	adc.w	r3, r5, r3
 800b04e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b05e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b062:	f04f 0200 	mov.w	r2, #0
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b06e:	4629      	mov	r1, r5
 800b070:	008b      	lsls	r3, r1, #2
 800b072:	4621      	mov	r1, r4
 800b074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b078:	4621      	mov	r1, r4
 800b07a:	008a      	lsls	r2, r1, #2
 800b07c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b080:	f7f5 f916 	bl	80002b0 <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4b60      	ldr	r3, [pc, #384]	@ (800b20c <UART_SetConfig+0x4e4>)
 800b08a:	fba3 2302 	umull	r2, r3, r3, r2
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	011c      	lsls	r4, r3, #4
 800b092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b096:	2200      	movs	r2, #0
 800b098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b09c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b0a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	1891      	adds	r1, r2, r2
 800b0aa:	61b9      	str	r1, [r7, #24]
 800b0ac:	415b      	adcs	r3, r3
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	1851      	adds	r1, r2, r1
 800b0b8:	6139      	str	r1, [r7, #16]
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	414b      	adcs	r3, r1
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	f04f 0300 	mov.w	r3, #0
 800b0c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b0cc:	4659      	mov	r1, fp
 800b0ce:	00cb      	lsls	r3, r1, #3
 800b0d0:	4651      	mov	r1, sl
 800b0d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0d6:	4651      	mov	r1, sl
 800b0d8:	00ca      	lsls	r2, r1, #3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	189b      	adds	r3, r3, r2
 800b0e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	eb42 0303 	adc.w	r3, r2, r3
 800b0f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b100:	f04f 0200 	mov.w	r2, #0
 800b104:	f04f 0300 	mov.w	r3, #0
 800b108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b10c:	4649      	mov	r1, r9
 800b10e:	008b      	lsls	r3, r1, #2
 800b110:	4641      	mov	r1, r8
 800b112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b116:	4641      	mov	r1, r8
 800b118:	008a      	lsls	r2, r1, #2
 800b11a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b11e:	f7f5 f8c7 	bl	80002b0 <__aeabi_uldivmod>
 800b122:	4602      	mov	r2, r0
 800b124:	460b      	mov	r3, r1
 800b126:	4611      	mov	r1, r2
 800b128:	4b38      	ldr	r3, [pc, #224]	@ (800b20c <UART_SetConfig+0x4e4>)
 800b12a:	fba3 2301 	umull	r2, r3, r3, r1
 800b12e:	095b      	lsrs	r3, r3, #5
 800b130:	2264      	movs	r2, #100	@ 0x64
 800b132:	fb02 f303 	mul.w	r3, r2, r3
 800b136:	1acb      	subs	r3, r1, r3
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	3332      	adds	r3, #50	@ 0x32
 800b13c:	4a33      	ldr	r2, [pc, #204]	@ (800b20c <UART_SetConfig+0x4e4>)
 800b13e:	fba2 2303 	umull	r2, r3, r2, r3
 800b142:	095b      	lsrs	r3, r3, #5
 800b144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b148:	441c      	add	r4, r3
 800b14a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b14e:	2200      	movs	r2, #0
 800b150:	673b      	str	r3, [r7, #112]	@ 0x70
 800b152:	677a      	str	r2, [r7, #116]	@ 0x74
 800b154:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	1891      	adds	r1, r2, r2
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	415b      	adcs	r3, r3
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b168:	4641      	mov	r1, r8
 800b16a:	1851      	adds	r1, r2, r1
 800b16c:	6039      	str	r1, [r7, #0]
 800b16e:	4649      	mov	r1, r9
 800b170:	414b      	adcs	r3, r1
 800b172:	607b      	str	r3, [r7, #4]
 800b174:	f04f 0200 	mov.w	r2, #0
 800b178:	f04f 0300 	mov.w	r3, #0
 800b17c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b180:	4659      	mov	r1, fp
 800b182:	00cb      	lsls	r3, r1, #3
 800b184:	4651      	mov	r1, sl
 800b186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b18a:	4651      	mov	r1, sl
 800b18c:	00ca      	lsls	r2, r1, #3
 800b18e:	4610      	mov	r0, r2
 800b190:	4619      	mov	r1, r3
 800b192:	4603      	mov	r3, r0
 800b194:	4642      	mov	r2, r8
 800b196:	189b      	adds	r3, r3, r2
 800b198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b19a:	464b      	mov	r3, r9
 800b19c:	460a      	mov	r2, r1
 800b19e:	eb42 0303 	adc.w	r3, r2, r3
 800b1a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1ae:	667a      	str	r2, [r7, #100]	@ 0x64
 800b1b0:	f04f 0200 	mov.w	r2, #0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b1bc:	4649      	mov	r1, r9
 800b1be:	008b      	lsls	r3, r1, #2
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	008a      	lsls	r2, r1, #2
 800b1ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b1ce:	f7f5 f86f 	bl	80002b0 <__aeabi_uldivmod>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b20c <UART_SetConfig+0x4e4>)
 800b1d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b1dc:	095b      	lsrs	r3, r3, #5
 800b1de:	2164      	movs	r1, #100	@ 0x64
 800b1e0:	fb01 f303 	mul.w	r3, r1, r3
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	3332      	adds	r3, #50	@ 0x32
 800b1ea:	4a08      	ldr	r2, [pc, #32]	@ (800b20c <UART_SetConfig+0x4e4>)
 800b1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f0:	095b      	lsrs	r3, r3, #5
 800b1f2:	f003 020f 	and.w	r2, r3, #15
 800b1f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4422      	add	r2, r4
 800b1fe:	609a      	str	r2, [r3, #8]
}
 800b200:	bf00      	nop
 800b202:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b206:	46bd      	mov	sp, r7
 800b208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b20c:	51eb851f 	.word	0x51eb851f

0800b210 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d123      	bne.n	800b26a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b22a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	6851      	ldr	r1, [r2, #4]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	6892      	ldr	r2, [r2, #8]
 800b236:	4311      	orrs	r1, r2
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	68d2      	ldr	r2, [r2, #12]
 800b23c:	4311      	orrs	r1, r2
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	6912      	ldr	r2, [r2, #16]
 800b242:	4311      	orrs	r1, r2
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	6952      	ldr	r2, [r2, #20]
 800b248:	4311      	orrs	r1, r2
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	6992      	ldr	r2, [r2, #24]
 800b24e:	4311      	orrs	r1, r2
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	69d2      	ldr	r2, [r2, #28]
 800b254:	4311      	orrs	r1, r2
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	6a12      	ldr	r2, [r2, #32]
 800b25a:	4311      	orrs	r1, r2
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b260:	430a      	orrs	r2, r1
 800b262:	431a      	orrs	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	e028      	b.n	800b2bc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	69d9      	ldr	r1, [r3, #28]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	4319      	orrs	r1, r3
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b280:	430b      	orrs	r3, r1
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b290:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	6851      	ldr	r1, [r2, #4]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	6892      	ldr	r2, [r2, #8]
 800b29c:	4311      	orrs	r1, r2
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	68d2      	ldr	r2, [r2, #12]
 800b2a2:	4311      	orrs	r1, r2
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	6912      	ldr	r2, [r2, #16]
 800b2a8:	4311      	orrs	r1, r2
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	6952      	ldr	r2, [r2, #20]
 800b2ae:	4311      	orrs	r1, r2
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	6992      	ldr	r2, [r2, #24]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d128      	bne.n	800b32e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	1e59      	subs	r1, r3, #1
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	4319      	orrs	r1, r3
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	021b      	lsls	r3, r3, #8
 800b2fc:	4319      	orrs	r1, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	3b01      	subs	r3, #1
 800b304:	031b      	lsls	r3, r3, #12
 800b306:	4319      	orrs	r1, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	4319      	orrs	r1, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	3b01      	subs	r3, #1
 800b318:	051b      	lsls	r3, r3, #20
 800b31a:	4319      	orrs	r1, r3
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	3b01      	subs	r3, #1
 800b322:	061b      	lsls	r3, r3, #24
 800b324:	430b      	orrs	r3, r1
 800b326:	431a      	orrs	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	609a      	str	r2, [r3, #8]
 800b32c:	e02f      	b.n	800b38e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b336:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	68d2      	ldr	r2, [r2, #12]
 800b33e:	3a01      	subs	r2, #1
 800b340:	0311      	lsls	r1, r2, #12
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	6952      	ldr	r2, [r2, #20]
 800b346:	3a01      	subs	r2, #1
 800b348:	0512      	lsls	r2, r2, #20
 800b34a:	430a      	orrs	r2, r1
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	1e59      	subs	r1, r3, #1
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	3b01      	subs	r3, #1
 800b366:	011b      	lsls	r3, r3, #4
 800b368:	4319      	orrs	r1, r3
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	3b01      	subs	r3, #1
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	4319      	orrs	r1, r3
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	3b01      	subs	r3, #1
 800b37a:	041b      	lsls	r3, r3, #16
 800b37c:	4319      	orrs	r1, r3
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	3b01      	subs	r3, #1
 800b384:	061b      	lsls	r3, r3, #24
 800b386:	430b      	orrs	r3, r1
 800b388:	431a      	orrs	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b39c:	b084      	sub	sp, #16
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	f107 001c 	add.w	r0, r7, #28
 800b3aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b3b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b3b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b3ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b3be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b3c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b3c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800b3d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	b004      	add	sp, #16
 800b3f0:	4770      	bx	lr

0800b3f2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b083      	sub	sp, #12
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2203      	movs	r2, #3
 800b43a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0303 	and.w	r3, r3, #3
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b484:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b48a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b490:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b4a0:	f023 030f 	bic.w	r3, r3, #15
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	431a      	orrs	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
}  
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b085      	sub	sp, #20
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b520:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b526:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b52c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b544:	2300      	movs	r3, #0

}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b088      	sub	sp, #32
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b560:	2310      	movs	r3, #16
 800b562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b564:	2340      	movs	r3, #64	@ 0x40
 800b566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b56c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b570:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b572:	f107 0308 	add.w	r3, r7, #8
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ff74 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b57e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b582:	2110      	movs	r1, #16
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f9d7 	bl	800b938 <SDMMC_GetCmdResp1>
 800b58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58c:	69fb      	ldr	r3, [r7, #28]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b088      	sub	sp, #32
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b5a4:	2311      	movs	r3, #17
 800b5a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5a8:	2340      	movs	r3, #64	@ 0x40
 800b5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff ff52 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b5c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5c6:	2111      	movs	r1, #17
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f9b5 	bl	800b938 <SDMMC_GetCmdResp1>
 800b5ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3720      	adds	r7, #32
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b088      	sub	sp, #32
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b5e8:	2312      	movs	r3, #18
 800b5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5ec:	2340      	movs	r3, #64	@ 0x40
 800b5ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff30 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b60a:	2112      	movs	r1, #18
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f993 	bl	800b938 <SDMMC_GetCmdResp1>
 800b612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b614:	69fb      	ldr	r3, [r7, #28]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3720      	adds	r7, #32
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b088      	sub	sp, #32
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b62c:	2318      	movs	r3, #24
 800b62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b630:	2340      	movs	r3, #64	@ 0x40
 800b632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b63c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff0e 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b64a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b64e:	2118      	movs	r1, #24
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f971 	bl	800b938 <SDMMC_GetCmdResp1>
 800b656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b658:	69fb      	ldr	r3, [r7, #28]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b088      	sub	sp, #32
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b670:	2319      	movs	r3, #25
 800b672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b674:	2340      	movs	r3, #64	@ 0x40
 800b676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b678:	2300      	movs	r3, #0
 800b67a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b67c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b680:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b682:	f107 0308 	add.w	r3, r7, #8
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff feec 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b68e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b692:	2119      	movs	r1, #25
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f94f 	bl	800b938 <SDMMC_GetCmdResp1>
 800b69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69c:	69fb      	ldr	r3, [r7, #28]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b6b4:	230c      	movs	r3, #12
 800b6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6b8:	2340      	movs	r3, #64	@ 0x40
 800b6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff feca 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b6d2:	4a05      	ldr	r2, [pc, #20]	@ (800b6e8 <SDMMC_CmdStopTransfer+0x40>)
 800b6d4:	210c      	movs	r1, #12
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f92e 	bl	800b938 <SDMMC_GetCmdResp1>
 800b6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6de:	69fb      	ldr	r3, [r7, #28]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	05f5e100 	.word	0x05f5e100

0800b6ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	@ 0x28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b6fc:	2307      	movs	r3, #7
 800b6fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b700:	2340      	movs	r3, #64	@ 0x40
 800b702:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b70c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b70e:	f107 0310 	add.w	r3, r7, #16
 800b712:	4619      	mov	r1, r3
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff fea6 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b71a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b71e:	2107      	movs	r1, #7
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 f909 	bl	800b938 <SDMMC_GetCmdResp1>
 800b726:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3728      	adds	r7, #40	@ 0x28
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b088      	sub	sp, #32
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b742:	2300      	movs	r3, #0
 800b744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b74a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b74e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b750:	f107 0308 	add.w	r3, r7, #8
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff fe85 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fb23 	bl	800bda8 <SDMMC_GetCmdError>
 800b762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b764:	69fb      	ldr	r3, [r7, #28]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3720      	adds	r7, #32
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b088      	sub	sp, #32
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b776:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b77a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b77c:	2308      	movs	r3, #8
 800b77e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b780:	2340      	movs	r3, #64	@ 0x40
 800b782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b784:	2300      	movs	r3, #0
 800b786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b78c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fe66 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fab6 	bl	800bd0c <SDMMC_GetCmdResp7>
 800b7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b7ba:	2337      	movs	r3, #55	@ 0x37
 800b7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7be:	2340      	movs	r3, #64	@ 0x40
 800b7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fe47 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b7d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7dc:	2137      	movs	r1, #55	@ 0x37
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f8aa 	bl	800b938 <SDMMC_GetCmdResp1>
 800b7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b806:	2329      	movs	r3, #41	@ 0x29
 800b808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b80a:	2340      	movs	r3, #64	@ 0x40
 800b80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b818:	f107 0308 	add.w	r3, r7, #8
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff fe21 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f9bd 	bl	800bba4 <SDMMC_GetCmdResp3>
 800b82a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b82c:	69fb      	ldr	r3, [r7, #28]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3720      	adds	r7, #32
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b088      	sub	sp, #32
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b842:	2302      	movs	r3, #2
 800b844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b846:	23c0      	movs	r3, #192	@ 0xc0
 800b848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b84e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fe03 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f957 	bl	800bb14 <SDMMC_GetCmdResp2>
 800b866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b868:	69fb      	ldr	r3, [r7, #28]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3720      	adds	r7, #32
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b088      	sub	sp, #32
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b880:	2309      	movs	r3, #9
 800b882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b884:	23c0      	movs	r3, #192	@ 0xc0
 800b886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b888:	2300      	movs	r3, #0
 800b88a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b88c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b892:	f107 0308 	add.w	r3, r7, #8
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff fde4 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f938 	bl	800bb14 <SDMMC_GetCmdResp2>
 800b8a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8a6:	69fb      	ldr	r3, [r7, #28]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3720      	adds	r7, #32
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8c2:	2340      	movs	r3, #64	@ 0x40
 800b8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fdc5 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	2103      	movs	r1, #3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f99d 	bl	800bc20 <SDMMC_GetCmdResp6>
 800b8e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3720      	adds	r7, #32
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b088      	sub	sp, #32
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b900:	230d      	movs	r3, #13
 800b902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b904:	2340      	movs	r3, #64	@ 0x40
 800b906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b908:	2300      	movs	r3, #0
 800b90a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b90c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b910:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b912:	f107 0308 	add.w	r3, r7, #8
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff fda4 	bl	800b466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b91e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b922:	210d      	movs	r1, #13
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f807 	bl	800b938 <SDMMC_GetCmdResp1>
 800b92a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b92c:	69fb      	ldr	r3, [r7, #28]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	460b      	mov	r3, r1
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b946:	4b70      	ldr	r3, [pc, #448]	@ (800bb08 <SDMMC_GetCmdResp1+0x1d0>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a70      	ldr	r2, [pc, #448]	@ (800bb0c <SDMMC_GetCmdResp1+0x1d4>)
 800b94c:	fba2 2303 	umull	r2, r3, r2, r3
 800b950:	0a5a      	lsrs	r2, r3, #9
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	1e5a      	subs	r2, r3, #1
 800b95e:	61fa      	str	r2, [r7, #28]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b964:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b968:	e0c9      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0ef      	beq.n	800b95a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1ea      	bne.n	800b95a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b988:	f003 0304 	and.w	r3, r3, #4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d004      	beq.n	800b99a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2204      	movs	r2, #4
 800b994:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b996:	2304      	movs	r3, #4
 800b998:	e0b1      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d004      	beq.n	800b9b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e0a6      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	22c5      	movs	r2, #197	@ 0xc5
 800b9b4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff fd7f 	bl	800b4ba <SDIO_GetCommandResponse>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d001      	beq.n	800b9ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e099      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7ff fd81 	bl	800b4d4 <SDIO_GetResponse>
 800b9d2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	4b4e      	ldr	r3, [pc, #312]	@ (800bb10 <SDMMC_GetCmdResp1+0x1d8>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e08d      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	da02      	bge.n	800b9ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b9ec:	e087      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9f8:	2340      	movs	r3, #64	@ 0x40
 800b9fa:	e080      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba06:	2380      	movs	r3, #128	@ 0x80
 800ba08:	e079      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba18:	e071      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba28:	e069      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba38:	e061      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba48:	e059      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba58:	e051      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba68:	e049      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ba78:	e041      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba88:	e039      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ba98:	e031      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800baa4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800baa8:	e029      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bab4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bab8:	e021      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bac4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bac8:	e019      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bad4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800bad8:	e011      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bae4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bae8:	e009      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f003 0308 	and.w	r3, r3, #8
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800baf4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800baf8:	e001      	b.n	800bafe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bafa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3720      	adds	r7, #32
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000000 	.word	0x20000000
 800bb0c:	10624dd3 	.word	0x10624dd3
 800bb10:	fdffe008 	.word	0xfdffe008

0800bb14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb1c:	4b1f      	ldr	r3, [pc, #124]	@ (800bb9c <SDMMC_GetCmdResp2+0x88>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a1f      	ldr	r2, [pc, #124]	@ (800bba0 <SDMMC_GetCmdResp2+0x8c>)
 800bb22:	fba2 2303 	umull	r2, r3, r2, r3
 800bb26:	0a5b      	lsrs	r3, r3, #9
 800bb28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb2c:	fb02 f303 	mul.w	r3, r2, r3
 800bb30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	1e5a      	subs	r2, r3, #1
 800bb36:	60fa      	str	r2, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb40:	e026      	b.n	800bb90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d0ef      	beq.n	800bb32 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1ea      	bne.n	800bb32 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d004      	beq.n	800bb72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb6e:	2304      	movs	r3, #4
 800bb70:	e00e      	b.n	800bb90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d004      	beq.n	800bb88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e003      	b.n	800bb90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	22c5      	movs	r2, #197	@ 0xc5
 800bb8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	20000000 	.word	0x20000000
 800bba0:	10624dd3 	.word	0x10624dd3

0800bba4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbac:	4b1a      	ldr	r3, [pc, #104]	@ (800bc18 <SDMMC_GetCmdResp3+0x74>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc1c <SDMMC_GetCmdResp3+0x78>)
 800bbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb6:	0a5b      	lsrs	r3, r3, #9
 800bbb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbbc:	fb02 f303 	mul.w	r3, r2, r3
 800bbc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	1e5a      	subs	r2, r3, #1
 800bbc6:	60fa      	str	r2, [r7, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbd0:	e01b      	b.n	800bc0a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d0ef      	beq.n	800bbc2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1ea      	bne.n	800bbc2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbf0:	f003 0304 	and.w	r3, r3, #4
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbfe:	2304      	movs	r3, #4
 800bc00:	e003      	b.n	800bc0a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	22c5      	movs	r2, #197	@ 0xc5
 800bc06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20000000 	.word	0x20000000
 800bc1c:	10624dd3 	.word	0x10624dd3

0800bc20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc2e:	4b35      	ldr	r3, [pc, #212]	@ (800bd04 <SDMMC_GetCmdResp6+0xe4>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a35      	ldr	r2, [pc, #212]	@ (800bd08 <SDMMC_GetCmdResp6+0xe8>)
 800bc34:	fba2 2303 	umull	r2, r3, r2, r3
 800bc38:	0a5b      	lsrs	r3, r3, #9
 800bc3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc3e:	fb02 f303 	mul.w	r3, r2, r3
 800bc42:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	1e5a      	subs	r2, r3, #1
 800bc48:	61fa      	str	r2, [r7, #28]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc52:	e052      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc58:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0ef      	beq.n	800bc44 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1ea      	bne.n	800bc44 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2204      	movs	r2, #4
 800bc7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc80:	2304      	movs	r3, #4
 800bc82:	e03a      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2201      	movs	r2, #1
 800bc94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e02f      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff fc0d 	bl	800b4ba <SDIO_GetCommandResponse>
 800bca0:	4603      	mov	r3, r0
 800bca2:	461a      	mov	r2, r3
 800bca4:	7afb      	ldrb	r3, [r7, #11]
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d001      	beq.n	800bcae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e025      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	22c5      	movs	r2, #197	@ 0xc5
 800bcb2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f7ff fc0c 	bl	800b4d4 <SDIO_GetResponse>
 800bcbc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	0c1b      	lsrs	r3, r3, #16
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e011      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bce4:	e009      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcf4:	e001      	b.n	800bcfa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000000 	.word	0x20000000
 800bd08:	10624dd3 	.word	0x10624dd3

0800bd0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd14:	4b22      	ldr	r3, [pc, #136]	@ (800bda0 <SDMMC_GetCmdResp7+0x94>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a22      	ldr	r2, [pc, #136]	@ (800bda4 <SDMMC_GetCmdResp7+0x98>)
 800bd1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd1e:	0a5b      	lsrs	r3, r3, #9
 800bd20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd24:	fb02 f303 	mul.w	r3, r2, r3
 800bd28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	1e5a      	subs	r2, r3, #1
 800bd2e:	60fa      	str	r2, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd38:	e02c      	b.n	800bd94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0ef      	beq.n	800bd2a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1ea      	bne.n	800bd2a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2204      	movs	r2, #4
 800bd64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd66:	2304      	movs	r3, #4
 800bd68:	e014      	b.n	800bd94 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d004      	beq.n	800bd80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e009      	b.n	800bd94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2240      	movs	r2, #64	@ 0x40
 800bd90:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd92:	2300      	movs	r3, #0
  
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	20000000 	.word	0x20000000
 800bda4:	10624dd3 	.word	0x10624dd3

0800bda8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdb0:	4b11      	ldr	r3, [pc, #68]	@ (800bdf8 <SDMMC_GetCmdError+0x50>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a11      	ldr	r2, [pc, #68]	@ (800bdfc <SDMMC_GetCmdError+0x54>)
 800bdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdba:	0a5b      	lsrs	r3, r3, #9
 800bdbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdc0:	fb02 f303 	mul.w	r3, r2, r3
 800bdc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	1e5a      	subs	r2, r3, #1
 800bdca:	60fa      	str	r2, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bdd4:	e009      	b.n	800bdea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0f1      	beq.n	800bdc6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	22c5      	movs	r2, #197	@ 0xc5
 800bde6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20000000 	.word	0x20000000
 800bdfc:	10624dd3 	.word	0x10624dd3

0800be00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be00:	b084      	sub	sp, #16
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	f107 001c 	add.w	r0, r7, #28
 800be0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800be16:	2b01      	cmp	r3, #1
 800be18:	d123      	bne.n	800be62 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800be2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be46:	2b01      	cmp	r3, #1
 800be48:	d105      	bne.n	800be56 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f9dc 	bl	800c214 <USB_CoreReset>
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
 800be60:	e01b      	b.n	800be9a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f9d0 	bl	800c214 <USB_CoreReset>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	639a      	str	r2, [r3, #56]	@ 0x38
 800be8c:	e005      	b.n	800be9a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be9a:	7fbb      	ldrb	r3, [r7, #30]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d10b      	bne.n	800beb8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f043 0206 	orr.w	r2, r3, #6
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f043 0220 	orr.w	r2, r3, #32
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bec4:	b004      	add	sp, #16
 800bec6:	4770      	bx	lr

0800bec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f043 0201 	orr.w	r2, r3, #1
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800beea:	b480      	push	{r7}
 800beec:	b083      	sub	sp, #12
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f023 0201 	bic.w	r2, r3, #1
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf28:	78fb      	ldrb	r3, [r7, #3]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d115      	bne.n	800bf5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bf3a:	200a      	movs	r0, #10
 800bf3c:	f7f7 fa1e 	bl	800337c <HAL_Delay>
      ms += 10U;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	330a      	adds	r3, #10
 800bf44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f956 	bl	800c1f8 <USB_GetMode>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d01e      	beq.n	800bf90 <USB_SetCurrentMode+0x84>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf56:	d9f0      	bls.n	800bf3a <USB_SetCurrentMode+0x2e>
 800bf58:	e01a      	b.n	800bf90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf5a:	78fb      	ldrb	r3, [r7, #3]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d115      	bne.n	800bf8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bf6c:	200a      	movs	r0, #10
 800bf6e:	f7f7 fa05 	bl	800337c <HAL_Delay>
      ms += 10U;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	330a      	adds	r3, #10
 800bf76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f93d 	bl	800c1f8 <USB_GetMode>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d005      	beq.n	800bf90 <USB_SetCurrentMode+0x84>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf88:	d9f0      	bls.n	800bf6c <USB_SetCurrentMode+0x60>
 800bf8a:	e001      	b.n	800bf90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e005      	b.n	800bf9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2bc8      	cmp	r3, #200	@ 0xc8
 800bf94:	d101      	bne.n	800bf9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bfbe:	d901      	bls.n	800bfc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e01b      	b.n	800bffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	daf2      	bge.n	800bfb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	019b      	lsls	r3, r3, #6
 800bfd4:	f043 0220 	orr.w	r2, r3, #32
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bfe8:	d901      	bls.n	800bfee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	e006      	b.n	800bffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b20      	cmp	r3, #32
 800bff8:	d0f0      	beq.n	800bfdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	3301      	adds	r3, #1
 800c018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c020:	d901      	bls.n	800c026 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e018      	b.n	800c058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	daf2      	bge.n	800c014 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2210      	movs	r2, #16
 800c036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3301      	adds	r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c044:	d901      	bls.n	800c04a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e006      	b.n	800c058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	f003 0310 	and.w	r3, r3, #16
 800c052:	2b10      	cmp	r3, #16
 800c054:	d0f0      	beq.n	800c038 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c064:	b480      	push	{r7}
 800c066:	b089      	sub	sp, #36	@ 0x24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4611      	mov	r1, r2
 800c070:	461a      	mov	r2, r3
 800c072:	460b      	mov	r3, r1
 800c074:	71fb      	strb	r3, [r7, #7]
 800c076:	4613      	mov	r3, r2
 800c078:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c086:	2b00      	cmp	r3, #0
 800c088:	d123      	bne.n	800c0d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c08a:	88bb      	ldrh	r3, [r7, #4]
 800c08c:	3303      	adds	r3, #3
 800c08e:	089b      	lsrs	r3, r3, #2
 800c090:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c092:	2300      	movs	r3, #0
 800c094:	61bb      	str	r3, [r7, #24]
 800c096:	e018      	b.n	800c0ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c098:	79fb      	ldrb	r3, [r7, #7]
 800c09a:	031a      	lsls	r2, r3, #12
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	61bb      	str	r3, [r7, #24]
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d3e2      	bcc.n	800c098 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3724      	adds	r7, #36	@ 0x24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b08b      	sub	sp, #44	@ 0x2c
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c0f6:	88fb      	ldrh	r3, [r7, #6]
 800c0f8:	089b      	lsrs	r3, r3, #2
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c0fe:	88fb      	ldrh	r3, [r7, #6]
 800c100:	f003 0303 	and.w	r3, r3, #3
 800c104:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c106:	2300      	movs	r3, #0
 800c108:	623b      	str	r3, [r7, #32]
 800c10a:	e014      	b.n	800c136 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	601a      	str	r2, [r3, #0]
    pDest++;
 800c118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11a:	3301      	adds	r3, #1
 800c11c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c120:	3301      	adds	r3, #1
 800c122:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	3301      	adds	r3, #1
 800c128:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12c:	3301      	adds	r3, #1
 800c12e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	3301      	adds	r3, #1
 800c134:	623b      	str	r3, [r7, #32]
 800c136:	6a3a      	ldr	r2, [r7, #32]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d3e6      	bcc.n	800c10c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c13e:	8bfb      	ldrh	r3, [r7, #30]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d01e      	beq.n	800c182 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c144:	2300      	movs	r3, #0
 800c146:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c14e:	461a      	mov	r2, r3
 800c150:	f107 0310 	add.w	r3, r7, #16
 800c154:	6812      	ldr	r2, [r2, #0]
 800c156:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	fa22 f303 	lsr.w	r3, r2, r3
 800c164:	b2da      	uxtb	r2, r3
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	701a      	strb	r2, [r3, #0]
      i++;
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	3301      	adds	r3, #1
 800c16e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	3301      	adds	r3, #1
 800c174:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c176:	8bfb      	ldrh	r3, [r7, #30]
 800c178:	3b01      	subs	r3, #1
 800c17a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c17c:	8bfb      	ldrh	r3, [r7, #30]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1ea      	bne.n	800c158 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c184:	4618      	mov	r0, r3
 800c186:	372c      	adds	r7, #44	@ 0x2c
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	460b      	mov	r3, r1
 800c1c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1ea:	68bb      	ldr	r3, [r7, #8]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	f003 0301 	and.w	r3, r3, #1
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c21c:	2300      	movs	r3, #0
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3301      	adds	r3, #1
 800c224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c22c:	d901      	bls.n	800c232 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e01b      	b.n	800c26a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	daf2      	bge.n	800c220 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	f043 0201 	orr.w	r2, r3, #1
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3301      	adds	r3, #1
 800c24e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c256:	d901      	bls.n	800c25c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c258:	2303      	movs	r3, #3
 800c25a:	e006      	b.n	800c26a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	2b01      	cmp	r3, #1
 800c266:	d0f0      	beq.n	800c24a <USB_CoreReset+0x36>

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
	...

0800c278 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c278:	b084      	sub	sp, #16
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c298:	461a      	mov	r2, r3
 800c29a:	2300      	movs	r3, #0
 800c29c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d119      	bne.n	800c2ea <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d10a      	bne.n	800c2d4 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2cc:	f043 0304 	orr.w	r3, r3, #4
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	e014      	b.n	800c2fe <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2e2:	f023 0304 	bic.w	r3, r3, #4
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	e009      	b.n	800c2fe <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2f8:	f023 0304 	bic.w	r3, r3, #4
 800c2fc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c2fe:	2110      	movs	r1, #16
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff fe4f 	bl	800bfa4 <USB_FlushTxFifo>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7ff fe79 	bl	800c008 <USB_FlushRxFifo>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c320:	2300      	movs	r3, #0
 800c322:	613b      	str	r3, [r7, #16]
 800c324:	e015      	b.n	800c352 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c332:	461a      	mov	r2, r3
 800c334:	f04f 33ff 	mov.w	r3, #4294967295
 800c338:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4413      	add	r3, r2
 800c342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c346:	461a      	mov	r2, r3
 800c348:	2300      	movs	r3, #0
 800c34a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	3301      	adds	r3, #1
 800c350:	613b      	str	r3, [r7, #16]
 800c352:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c356:	461a      	mov	r2, r3
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d3e3      	bcc.n	800c326 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f04f 32ff 	mov.w	r2, #4294967295
 800c36a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a18      	ldr	r2, [pc, #96]	@ (800c3d0 <USB_HostInit+0x158>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d10b      	bne.n	800c38c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c37a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a15      	ldr	r2, [pc, #84]	@ (800c3d4 <USB_HostInit+0x15c>)
 800c380:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a14      	ldr	r2, [pc, #80]	@ (800c3d8 <USB_HostInit+0x160>)
 800c386:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800c38a:	e009      	b.n	800c3a0 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2280      	movs	r2, #128	@ 0x80
 800c390:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a11      	ldr	r2, [pc, #68]	@ (800c3dc <USB_HostInit+0x164>)
 800c396:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a11      	ldr	r2, [pc, #68]	@ (800c3e0 <USB_HostInit+0x168>)
 800c39c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d105      	bne.n	800c3b4 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	f043 0210 	orr.w	r2, r3, #16
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699a      	ldr	r2, [r3, #24]
 800c3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e4 <USB_HostInit+0x16c>)
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3cc:	b004      	add	sp, #16
 800c3ce:	4770      	bx	lr
 800c3d0:	40040000 	.word	0x40040000
 800c3d4:	01000200 	.word	0x01000200
 800c3d8:	00e00300 	.word	0x00e00300
 800c3dc:	00600080 	.word	0x00600080
 800c3e0:	004000e0 	.word	0x004000e0
 800c3e4:	a3200008 	.word	0xa3200008

0800c3e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c420:	4313      	orrs	r3, r2
 800c422:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d107      	bne.n	800c43a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c430:	461a      	mov	r2, r3
 800c432:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c436:	6053      	str	r3, [r2, #4]
 800c438:	e00c      	b.n	800c454 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c43a:	78fb      	ldrb	r3, [r7, #3]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d107      	bne.n	800c450 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c446:	461a      	mov	r2, r3
 800c448:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c44c:	6053      	str	r3, [r2, #4]
 800c44e:	e001      	b.n	800c454 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c482:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c48c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c490:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c492:	2064      	movs	r0, #100	@ 0x64
 800c494:	f7f6 ff72 	bl	800337c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c4a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4a4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c4a6:	200a      	movs	r0, #10
 800c4a8:	f7f6 ff68 	bl	800337c <HAL_Delay>

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c4da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d109      	bne.n	800c4fa <USB_DriveVbus+0x44>
 800c4e6:	78fb      	ldrb	r3, [r7, #3]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d106      	bne.n	800c4fa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c4f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c4f8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c504:	d109      	bne.n	800c51a <USB_DriveVbus+0x64>
 800c506:	78fb      	ldrb	r3, [r7, #3]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c514:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c518:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	0c5b      	lsrs	r3, r3, #17
 800c546:	f003 0303 	and.w	r3, r3, #3
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c556:	b480      	push	{r7}
 800c558:	b085      	sub	sp, #20
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	b29b      	uxth	r3, r3
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	4608      	mov	r0, r1
 800c582:	4611      	mov	r1, r2
 800c584:	461a      	mov	r2, r3
 800c586:	4603      	mov	r3, r0
 800c588:	70fb      	strb	r3, [r7, #3]
 800c58a:	460b      	mov	r3, r1
 800c58c:	70bb      	strb	r3, [r7, #2]
 800c58e:	4613      	mov	r3, r2
 800c590:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c59a:	78fb      	ldrb	r3, [r7, #3]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c5ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5b2:	2b03      	cmp	r3, #3
 800c5b4:	d87c      	bhi.n	800c6b0 <USB_HC_Init+0x138>
 800c5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5bc <USB_HC_Init+0x44>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c5cd 	.word	0x0800c5cd
 800c5c0:	0800c673 	.word	0x0800c673
 800c5c4:	0800c5cd 	.word	0x0800c5cd
 800c5c8:	0800c635 	.word	0x0800c635
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5d8:	461a      	mov	r2, r3
 800c5da:	f240 439d 	movw	r3, #1181	@ 0x49d
 800c5de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c5e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	da10      	bge.n	800c60a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	78fa      	ldrb	r2, [r7, #3]
 800c5f8:	0151      	lsls	r1, r2, #5
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	440a      	add	r2, r1
 800c5fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c606:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c608:	e055      	b.n	800c6b6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a6f      	ldr	r2, [pc, #444]	@ (800c7cc <USB_HC_Init+0x254>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d151      	bne.n	800c6b6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c612:	78fb      	ldrb	r3, [r7, #3]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	78fa      	ldrb	r2, [r7, #3]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	440a      	add	r2, r1
 800c628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c62c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c630:	60d3      	str	r3, [r2, #12]
      break;
 800c632:	e040      	b.n	800c6b6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c640:	461a      	mov	r2, r3
 800c642:	f240 639d 	movw	r3, #1693	@ 0x69d
 800c646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	da34      	bge.n	800c6ba <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	4413      	add	r3, r2
 800c658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	78fa      	ldrb	r2, [r7, #3]
 800c660:	0151      	lsls	r1, r2, #5
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	440a      	add	r2, r1
 800c666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c66a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c66e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c670:	e023      	b.n	800c6ba <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c672:	78fb      	ldrb	r3, [r7, #3]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c67e:	461a      	mov	r2, r3
 800c680:	f240 2325 	movw	r3, #549	@ 0x225
 800c684:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c686:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da17      	bge.n	800c6be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c68e:	78fb      	ldrb	r3, [r7, #3]
 800c690:	015a      	lsls	r2, r3, #5
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	4413      	add	r3, r2
 800c696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	78fa      	ldrb	r2, [r7, #3]
 800c69e:	0151      	lsls	r1, r2, #5
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	440a      	add	r2, r1
 800c6a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c6a8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800c6ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c6ae:	e006      	b.n	800c6be <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	77fb      	strb	r3, [r7, #31]
      break;
 800c6b4:	e004      	b.n	800c6c0 <USB_HC_Init+0x148>
      break;
 800c6b6:	bf00      	nop
 800c6b8:	e002      	b.n	800c6c0 <USB_HC_Init+0x148>
      break;
 800c6ba:	bf00      	nop
 800c6bc:	e000      	b.n	800c6c0 <USB_HC_Init+0x148>
      break;
 800c6be:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	015a      	lsls	r2, r3, #5
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	015a      	lsls	r2, r3, #5
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	4413      	add	r3, r2
 800c6da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	78fa      	ldrb	r2, [r7, #3]
 800c6e2:	0151      	lsls	r1, r2, #5
 800c6e4:	693a      	ldr	r2, [r7, #16]
 800c6e6:	440a      	add	r2, r1
 800c6e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c6ec:	f043 0302 	orr.w	r3, r3, #2
 800c6f0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	78fb      	ldrb	r3, [r7, #3]
 800c6fc:	f003 030f 	and.w	r3, r3, #15
 800c700:	2101      	movs	r1, #1
 800c702:	fa01 f303 	lsl.w	r3, r1, r3
 800c706:	6939      	ldr	r1, [r7, #16]
 800c708:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c70c:	4313      	orrs	r3, r2
 800c70e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c71c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c720:	2b00      	cmp	r3, #0
 800c722:	da03      	bge.n	800c72c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c728:	61bb      	str	r3, [r7, #24]
 800c72a:	e001      	b.n	800c730 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7ff fef9 	bl	800c528 <USB_GetHostSpeed>
 800c736:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c738:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d106      	bne.n	800c74e <USB_HC_Init+0x1d6>
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b02      	cmp	r3, #2
 800c744:	d003      	beq.n	800c74e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c746:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	e001      	b.n	800c752 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c74e:	2300      	movs	r3, #0
 800c750:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c752:	787b      	ldrb	r3, [r7, #1]
 800c754:	059b      	lsls	r3, r3, #22
 800c756:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c75a:	78bb      	ldrb	r3, [r7, #2]
 800c75c:	02db      	lsls	r3, r3, #11
 800c75e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c762:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c764:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c768:	049b      	lsls	r3, r3, #18
 800c76a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c76e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c770:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c772:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c776:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c780:	78fa      	ldrb	r2, [r7, #3]
 800c782:	0151      	lsls	r1, r2, #5
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	440a      	add	r2, r1
 800c788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c78c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c790:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c792:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c796:	2b03      	cmp	r3, #3
 800c798:	d003      	beq.n	800c7a2 <USB_HC_Init+0x22a>
 800c79a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d10f      	bne.n	800c7c2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c7a2:	78fb      	ldrb	r3, [r7, #3]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	78fa      	ldrb	r2, [r7, #3]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c7bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c7c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c7c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3720      	adds	r7, #32
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	40040000 	.word	0x40040000

0800c7d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08c      	sub	sp, #48	@ 0x30
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	785b      	ldrb	r3, [r3, #1]
 800c7e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800c7e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7ec:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4a5d      	ldr	r2, [pc, #372]	@ (800c968 <USB_HC_StartXfer+0x198>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d12f      	bne.n	800c856 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d11c      	bne.n	800c836 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	7c9b      	ldrb	r3, [r3, #18]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <USB_HC_StartXfer+0x3c>
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	7c9b      	ldrb	r3, [r3, #18]
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d124      	bne.n	800c856 <USB_HC_StartXfer+0x86>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	799b      	ldrb	r3, [r3, #6]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d120      	bne.n	800c856 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	6a3b      	ldr	r3, [r7, #32]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	69fa      	ldr	r2, [r7, #28]
 800c824:	0151      	lsls	r1, r2, #5
 800c826:	6a3a      	ldr	r2, [r7, #32]
 800c828:	440a      	add	r2, r1
 800c82a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c832:	60d3      	str	r3, [r2, #12]
 800c834:	e00f      	b.n	800c856 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	791b      	ldrb	r3, [r3, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10b      	bne.n	800c856 <USB_HC_StartXfer+0x86>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	795b      	ldrb	r3, [r3, #5]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d107      	bne.n	800c856 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	785b      	ldrb	r3, [r3, #1]
 800c84a:	4619      	mov	r1, r3
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 fb6b 	bl	800cf28 <USB_DoPing>
        return HAL_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	e232      	b.n	800ccbc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	799b      	ldrb	r3, [r3, #6]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d158      	bne.n	800c910 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800c85e:	2301      	movs	r3, #1
 800c860:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	78db      	ldrb	r3, [r3, #3]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d007      	beq.n	800c87a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c86a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	8a92      	ldrh	r2, [r2, #20]
 800c870:	fb03 f202 	mul.w	r2, r3, r2
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	61da      	str	r2, [r3, #28]
 800c878:	e07c      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	7c9b      	ldrb	r3, [r3, #18]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d130      	bne.n	800c8e4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	2bbc      	cmp	r3, #188	@ 0xbc
 800c888:	d918      	bls.n	800c8bc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	8a9b      	ldrh	r3, [r3, #20]
 800c88e:	461a      	mov	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	69da      	ldr	r2, [r3, #28]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d003      	beq.n	800c8ac <USB_HC_StartXfer+0xdc>
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d103      	bne.n	800c8b4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	60da      	str	r2, [r3, #12]
 800c8b2:	e05f      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	60da      	str	r2, [r3, #12]
 800c8ba:	e05b      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	6a1a      	ldr	r2, [r3, #32]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d007      	beq.n	800c8dc <USB_HC_StartXfer+0x10c>
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d003      	beq.n	800c8dc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2204      	movs	r2, #4
 800c8d8:	60da      	str	r2, [r3, #12]
 800c8da:	e04b      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2203      	movs	r2, #3
 800c8e0:	60da      	str	r2, [r3, #12]
 800c8e2:	e047      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d10d      	bne.n	800c906 <USB_HC_StartXfer+0x136>
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	8a92      	ldrh	r2, [r2, #20]
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d907      	bls.n	800c906 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c8f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	8a92      	ldrh	r2, [r2, #20]
 800c8fc:	fb03 f202 	mul.w	r2, r3, r2
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	61da      	str	r2, [r3, #28]
 800c904:	e036      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6a1a      	ldr	r2, [r3, #32]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	61da      	str	r2, [r3, #28]
 800c90e:	e031      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	6a1b      	ldr	r3, [r3, #32]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d018      	beq.n	800c94a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	8a92      	ldrh	r2, [r2, #20]
 800c920:	4413      	add	r3, r2
 800c922:	3b01      	subs	r3, #1
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	8a92      	ldrh	r2, [r2, #20]
 800c928:	fbb3 f3f2 	udiv	r3, r3, r2
 800c92c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800c92e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c930:	8b7b      	ldrh	r3, [r7, #26]
 800c932:	429a      	cmp	r2, r3
 800c934:	d90b      	bls.n	800c94e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800c936:	8b7b      	ldrh	r3, [r7, #26]
 800c938:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c93a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	8a92      	ldrh	r2, [r2, #20]
 800c940:	fb03 f202 	mul.w	r2, r3, r2
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	61da      	str	r2, [r3, #28]
 800c948:	e001      	b.n	800c94e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800c94a:	2301      	movs	r3, #1
 800c94c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	78db      	ldrb	r3, [r3, #3]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00a      	beq.n	800c96c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	8a92      	ldrh	r2, [r2, #20]
 800c95c:	fb03 f202 	mul.w	r2, r3, r2
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	61da      	str	r2, [r3, #28]
 800c964:	e006      	b.n	800c974 <USB_HC_StartXfer+0x1a4>
 800c966:	bf00      	nop
 800c968:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	6a1a      	ldr	r2, [r3, #32]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	69db      	ldr	r3, [r3, #28]
 800c978:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c97c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c97e:	04d9      	lsls	r1, r3, #19
 800c980:	4ba3      	ldr	r3, [pc, #652]	@ (800cc10 <USB_HC_StartXfer+0x440>)
 800c982:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c984:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	7d9b      	ldrb	r3, [r3, #22]
 800c98a:	075b      	lsls	r3, r3, #29
 800c98c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c990:	69f9      	ldr	r1, [r7, #28]
 800c992:	0148      	lsls	r0, r1, #5
 800c994:	6a39      	ldr	r1, [r7, #32]
 800c996:	4401      	add	r1, r0
 800c998:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c99c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c99e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	6999      	ldr	r1, [r3, #24]
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	015a      	lsls	r2, r3, #5
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9b6:	460a      	mov	r2, r1
 800c9b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f003 0301 	and.w	r3, r3, #1
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	bf0c      	ite	eq
 800c9ca:	2301      	moveq	r3, #1
 800c9cc:	2300      	movne	r3, #0
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	015a      	lsls	r2, r3, #5
 800c9d6:	6a3b      	ldr	r3, [r7, #32]
 800c9d8:	4413      	add	r3, r2
 800c9da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	69fa      	ldr	r2, [r7, #28]
 800c9e2:	0151      	lsls	r1, r2, #5
 800c9e4:	6a3a      	ldr	r2, [r7, #32]
 800c9e6:	440a      	add	r2, r1
 800c9e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c9ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c9f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	7e7b      	ldrb	r3, [r7, #25]
 800ca02:	075b      	lsls	r3, r3, #29
 800ca04:	69f9      	ldr	r1, [r7, #28]
 800ca06:	0148      	lsls	r0, r1, #5
 800ca08:	6a39      	ldr	r1, [r7, #32]
 800ca0a:	4401      	add	r1, r0
 800ca0c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ca10:	4313      	orrs	r3, r2
 800ca12:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	799b      	ldrb	r3, [r3, #6]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	f040 80c3 	bne.w	800cba4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	7c5b      	ldrb	r3, [r3, #17]
 800ca22:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	69fa      	ldr	r2, [r7, #28]
 800ca2c:	0151      	lsls	r1, r2, #5
 800ca2e:	6a3a      	ldr	r2, [r7, #32]
 800ca30:	440a      	add	r2, r1
 800ca32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ca36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ca3a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	6a3b      	ldr	r3, [r7, #32]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	0151      	lsls	r1, r2, #5
 800ca4e:	6a3a      	ldr	r2, [r7, #32]
 800ca50:	440a      	add	r2, r1
 800ca52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ca5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	79db      	ldrb	r3, [r3, #7]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d123      	bne.n	800caac <USB_HC_StartXfer+0x2dc>
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	78db      	ldrb	r3, [r3, #3]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d11f      	bne.n	800caac <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	69fa      	ldr	r2, [r7, #28]
 800ca7c:	0151      	lsls	r1, r2, #5
 800ca7e:	6a3a      	ldr	r2, [r7, #32]
 800ca80:	440a      	add	r2, r1
 800ca82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca8a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	6a3b      	ldr	r3, [r7, #32]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	0151      	lsls	r1, r2, #5
 800ca9e:	6a3a      	ldr	r2, [r7, #32]
 800caa0:	440a      	add	r2, r1
 800caa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800caa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caaa:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	7c9b      	ldrb	r3, [r3, #18]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d003      	beq.n	800cabc <USB_HC_StartXfer+0x2ec>
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	7c9b      	ldrb	r3, [r3, #18]
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d117      	bne.n	800caec <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d113      	bne.n	800caec <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	78db      	ldrb	r3, [r3, #3]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d10f      	bne.n	800caec <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	015a      	lsls	r2, r3, #5
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	0151      	lsls	r1, r2, #5
 800cade:	6a3a      	ldr	r2, [r7, #32]
 800cae0:	440a      	add	r2, r1
 800cae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800caea:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	7c9b      	ldrb	r3, [r3, #18]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d162      	bne.n	800cbba <USB_HC_StartXfer+0x3ea>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	78db      	ldrb	r3, [r3, #3]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d15e      	bne.n	800cbba <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d858      	bhi.n	800cbb8 <USB_HC_StartXfer+0x3e8>
 800cb06:	a201      	add	r2, pc, #4	@ (adr r2, 800cb0c <USB_HC_StartXfer+0x33c>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cb1d 	.word	0x0800cb1d
 800cb10:	0800cb3f 	.word	0x0800cb3f
 800cb14:	0800cb61 	.word	0x0800cb61
 800cb18:	0800cb83 	.word	0x0800cb83
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	015a      	lsls	r2, r3, #5
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	0151      	lsls	r1, r2, #5
 800cb2e:	6a3a      	ldr	r2, [r7, #32]
 800cb30:	440a      	add	r2, r1
 800cb32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb3a:	6053      	str	r3, [r2, #4]
          break;
 800cb3c:	e03d      	b.n	800cbba <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	015a      	lsls	r2, r3, #5
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	4413      	add	r3, r2
 800cb46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	69fa      	ldr	r2, [r7, #28]
 800cb4e:	0151      	lsls	r1, r2, #5
 800cb50:	6a3a      	ldr	r2, [r7, #32]
 800cb52:	440a      	add	r2, r1
 800cb54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb58:	f043 030e 	orr.w	r3, r3, #14
 800cb5c:	6053      	str	r3, [r2, #4]
          break;
 800cb5e:	e02c      	b.n	800cbba <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	015a      	lsls	r2, r3, #5
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	4413      	add	r3, r2
 800cb68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	69fa      	ldr	r2, [r7, #28]
 800cb70:	0151      	lsls	r1, r2, #5
 800cb72:	6a3a      	ldr	r2, [r7, #32]
 800cb74:	440a      	add	r2, r1
 800cb76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb7e:	6053      	str	r3, [r2, #4]
          break;
 800cb80:	e01b      	b.n	800cbba <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	015a      	lsls	r2, r3, #5
 800cb86:	6a3b      	ldr	r3, [r7, #32]
 800cb88:	4413      	add	r3, r2
 800cb8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	69fa      	ldr	r2, [r7, #28]
 800cb92:	0151      	lsls	r1, r2, #5
 800cb94:	6a3a      	ldr	r2, [r7, #32]
 800cb96:	440a      	add	r2, r1
 800cb98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cba0:	6053      	str	r3, [r2, #4]
          break;
 800cba2:	e00a      	b.n	800cbba <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6053      	str	r3, [r2, #4]
 800cbb6:	e000      	b.n	800cbba <USB_HC_StartXfer+0x3ea>
          break;
 800cbb8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cbd0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	78db      	ldrb	r3, [r3, #3]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d004      	beq.n	800cbe4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbe0:	613b      	str	r3, [r7, #16]
 800cbe2:	e003      	b.n	800cbec <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cbea:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cbf2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc00:	461a      	mov	r2, r3
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e055      	b.n	800ccbc <USB_HC_StartXfer+0x4ec>
 800cc10:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	78db      	ldrb	r3, [r3, #3]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d14e      	bne.n	800ccba <USB_HC_StartXfer+0x4ea>
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d04a      	beq.n	800ccba <USB_HC_StartXfer+0x4ea>
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	79db      	ldrb	r3, [r3, #7]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d146      	bne.n	800ccba <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	7c9b      	ldrb	r3, [r3, #18]
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d831      	bhi.n	800cc98 <USB_HC_StartXfer+0x4c8>
 800cc34:	a201      	add	r2, pc, #4	@ (adr r2, 800cc3c <USB_HC_StartXfer+0x46c>)
 800cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3a:	bf00      	nop
 800cc3c:	0800cc4d 	.word	0x0800cc4d
 800cc40:	0800cc71 	.word	0x0800cc71
 800cc44:	0800cc4d 	.word	0x0800cc4d
 800cc48:	0800cc71 	.word	0x0800cc71
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6a1b      	ldr	r3, [r3, #32]
 800cc50:	3303      	adds	r3, #3
 800cc52:	089b      	lsrs	r3, r3, #2
 800cc54:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cc56:	8afa      	ldrh	r2, [r7, #22]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d91c      	bls.n	800cc9c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	f043 0220 	orr.w	r2, r3, #32
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc6e:	e015      	b.n	800cc9c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	3303      	adds	r3, #3
 800cc76:	089b      	lsrs	r3, r3, #2
 800cc78:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cc7a:	8afa      	ldrh	r2, [r7, #22]
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d90a      	bls.n	800cca0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc96:	e003      	b.n	800cca0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800cc98:	bf00      	nop
 800cc9a:	e002      	b.n	800cca2 <USB_HC_StartXfer+0x4d2>
        break;
 800cc9c:	bf00      	nop
 800cc9e:	e000      	b.n	800cca2 <USB_HC_StartXfer+0x4d2>
        break;
 800cca0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	6999      	ldr	r1, [r3, #24]
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	785a      	ldrb	r2, [r3, #1]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	9000      	str	r0, [sp, #0]
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7ff f9d5 	bl	800c064 <USB_WritePacket>
  }

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3728      	adds	r7, #40	@ 0x28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	b29b      	uxth	r3, r3
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b089      	sub	sp, #36	@ 0x24
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	460b      	mov	r3, r1
 800ccf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	015a      	lsls	r2, r3, #5
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	4413      	add	r3, r2
 800cd06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	0c9b      	lsrs	r3, r3, #18
 800cd0e:	f003 0303 	and.w	r3, r3, #3
 800cd12:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	0fdb      	lsrs	r3, r3, #31
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	0fdb      	lsrs	r3, r3, #31
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	f003 0320 	and.w	r3, r3, #32
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	d10d      	bne.n	800cd68 <USB_HC_Halt+0x82>
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10a      	bne.n	800cd68 <USB_HC_Halt+0x82>
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d005      	beq.n	800cd64 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d002      	beq.n	800cd64 <USB_HC_Halt+0x7e>
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d101      	bne.n	800cd68 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	e0d8      	b.n	800cf1a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <USB_HC_Halt+0x8e>
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d173      	bne.n	800ce5c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f003 0320 	and.w	r3, r3, #32
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d14a      	bne.n	800ce36 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d133      	bne.n	800ce14 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	69ba      	ldr	r2, [r7, #24]
 800cdbc:	0151      	lsls	r1, r2, #5
 800cdbe:	69fa      	ldr	r2, [r7, #28]
 800cdc0:	440a      	add	r2, r1
 800cdc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cdc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdca:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	015a      	lsls	r2, r3, #5
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	69ba      	ldr	r2, [r7, #24]
 800cddc:	0151      	lsls	r1, r2, #5
 800cdde:	69fa      	ldr	r2, [r7, #28]
 800cde0:	440a      	add	r2, r1
 800cde2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cde6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cdea:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cdf8:	d82e      	bhi.n	800ce58 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce10:	d0ec      	beq.n	800cdec <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce12:	e081      	b.n	800cf18 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69ba      	ldr	r2, [r7, #24]
 800ce24:	0151      	lsls	r1, r2, #5
 800ce26:	69fa      	ldr	r2, [r7, #28]
 800ce28:	440a      	add	r2, r1
 800ce2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ce2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce32:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce34:	e070      	b.n	800cf18 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	015a      	lsls	r2, r3, #5
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	69ba      	ldr	r2, [r7, #24]
 800ce46:	0151      	lsls	r1, r2, #5
 800ce48:	69fa      	ldr	r2, [r7, #28]
 800ce4a:	440a      	add	r2, r1
 800ce4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ce50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce54:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce56:	e05f      	b.n	800cf18 <USB_HC_Halt+0x232>
            break;
 800ce58:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce5a:	e05d      	b.n	800cf18 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	69ba      	ldr	r2, [r7, #24]
 800ce6c:	0151      	lsls	r1, r2, #5
 800ce6e:	69fa      	ldr	r2, [r7, #28]
 800ce70:	440a      	add	r2, r1
 800ce72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ce76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce7a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d133      	bne.n	800cef4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	015a      	lsls	r2, r3, #5
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	4413      	add	r3, r2
 800ce94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	0151      	lsls	r1, r2, #5
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	440a      	add	r2, r1
 800cea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cea6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ceaa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	015a      	lsls	r2, r3, #5
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	69ba      	ldr	r2, [r7, #24]
 800cebc:	0151      	lsls	r1, r2, #5
 800cebe:	69fa      	ldr	r2, [r7, #28]
 800cec0:	440a      	add	r2, r1
 800cec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ceca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	3301      	adds	r3, #1
 800ced0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ced8:	d81d      	bhi.n	800cf16 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	015a      	lsls	r2, r3, #5
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	4413      	add	r3, r2
 800cee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ceec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cef0:	d0ec      	beq.n	800cecc <USB_HC_Halt+0x1e6>
 800cef2:	e011      	b.n	800cf18 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	69ba      	ldr	r2, [r7, #24]
 800cf04:	0151      	lsls	r1, r2, #5
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	440a      	add	r2, r1
 800cf0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	e000      	b.n	800cf18 <USB_HC_Halt+0x232>
          break;
 800cf16:	bf00      	nop
    }
  }

  return HAL_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3724      	adds	r7, #36	@ 0x24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
	...

0800cf28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b087      	sub	sp, #28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cf38:	78fb      	ldrb	r3, [r7, #3]
 800cf3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	04da      	lsls	r2, r3, #19
 800cf44:	4b15      	ldr	r3, [pc, #84]	@ (800cf9c <USB_DoPing+0x74>)
 800cf46:	4013      	ands	r3, r2
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	0151      	lsls	r1, r2, #5
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	440a      	add	r2, r1
 800cf50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cf58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	015a      	lsls	r2, r3, #5
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	4413      	add	r3, r2
 800cf62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cf70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cf78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	015a      	lsls	r2, r3, #5
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	4413      	add	r3, r2
 800cf82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf86:	461a      	mov	r2, r3
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	371c      	adds	r7, #28
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	1ff80000 	.word	0x1ff80000

0800cfa0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7fe ff98 	bl	800beea <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cfba:	2110      	movs	r1, #16
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7fe fff1 	bl	800bfa4 <USB_FlushTxFifo>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff f81b 	bl	800c008 <USB_FlushRxFifo>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	e01f      	b.n	800d022 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	015a      	lsls	r2, r3, #5
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	4413      	add	r3, r2
 800cfea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cff8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d000:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d008:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d016:	461a      	mov	r2, r3
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	3301      	adds	r3, #1
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b0f      	cmp	r3, #15
 800d026:	d9dc      	bls.n	800cfe2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d028:	2300      	movs	r3, #0
 800d02a:	61bb      	str	r3, [r7, #24]
 800d02c:	e034      	b.n	800d098 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	015a      	lsls	r2, r3, #5
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	4413      	add	r3, r2
 800d036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d044:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d04c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d054:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	015a      	lsls	r2, r3, #5
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	4413      	add	r3, r2
 800d05e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d062:	461a      	mov	r2, r3
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3301      	adds	r3, #1
 800d06c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d074:	d80c      	bhi.n	800d090 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	015a      	lsls	r2, r3, #5
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	4413      	add	r3, r2
 800d07e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d08c:	d0ec      	beq.n	800d068 <USB_StopHost+0xc8>
 800d08e:	e000      	b.n	800d092 <USB_StopHost+0xf2>
        break;
 800d090:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	3301      	adds	r3, #1
 800d096:	61bb      	str	r3, [r7, #24]
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	2b0f      	cmp	r3, #15
 800d09c:	d9c7      	bls.n	800d02e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7fe ff07 	bl	800bec8 <USB_EnableGlobalInt>

  return ret;
 800d0ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3720      	adds	r7, #32
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d0c8:	4904      	ldr	r1, [pc, #16]	@ (800d0dc <MX_FATFS_Init+0x18>)
 800d0ca:	4805      	ldr	r0, [pc, #20]	@ (800d0e0 <MX_FATFS_Init+0x1c>)
 800d0cc:	f005 fb4a 	bl	8012764 <FATFS_LinkDriver>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4b03      	ldr	r3, [pc, #12]	@ (800d0e4 <MX_FATFS_Init+0x20>)
 800d0d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d0d8:	bf00      	nop
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	2000080c 	.word	0x2000080c
 800d0e0:	08014398 	.word	0x08014398
 800d0e4:	20000808 	.word	0x20000808

0800d0e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d0ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d102:	f000 f888 	bl	800d216 <BSP_SD_IsDetected>
 800d106:	4603      	mov	r3, r0
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d001      	beq.n	800d110 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e005      	b.n	800d11c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d110:	4804      	ldr	r0, [pc, #16]	@ (800d124 <BSP_SD_Init+0x2c>)
 800d112:	f7fb fff5 	bl	8009100 <HAL_SD_Init>
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d11a:	79fb      	ldrb	r3, [r7, #7]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	20000560 	.word	0x20000560

0800d128 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	68f9      	ldr	r1, [r7, #12]
 800d13e:	4806      	ldr	r0, [pc, #24]	@ (800d158 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d140:	f7fc f88e 	bl	8009260 <HAL_SD_ReadBlocks_DMA>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d001      	beq.n	800d14e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20000560 	.word	0x20000560

0800d15c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	68f9      	ldr	r1, [r7, #12]
 800d172:	4806      	ldr	r0, [pc, #24]	@ (800d18c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d174:	f7fc f954 	bl	8009420 <HAL_SD_WriteBlocks_DMA>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d182:	7dfb      	ldrb	r3, [r7, #23]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3718      	adds	r7, #24
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	20000560 	.word	0x20000560

0800d190 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d194:	4805      	ldr	r0, [pc, #20]	@ (800d1ac <BSP_SD_GetCardState+0x1c>)
 800d196:	f7fc fd75 	bl	8009c84 <HAL_SD_GetCardState>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b04      	cmp	r3, #4
 800d19e:	bf14      	ite	ne
 800d1a0:	2301      	movne	r3, #1
 800d1a2:	2300      	moveq	r3, #0
 800d1a4:	b2db      	uxtb	r3, r3
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20000560 	.word	0x20000560

0800d1b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	4803      	ldr	r0, [pc, #12]	@ (800d1c8 <BSP_SD_GetCardInfo+0x18>)
 800d1bc:	f7fc fd36 	bl	8009c2c <HAL_SD_GetCardInfo>
}
 800d1c0:	bf00      	nop
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	20000560 	.word	0x20000560

0800d1cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d1d4:	f000 f818 	bl	800d208 <BSP_SD_AbortCallback>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d1e8:	f000 f9a8 	bl	800d53c <BSP_SD_WriteCpltCallback>
}
 800d1ec:	bf00      	nop
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d1fc:	f000 f9aa 	bl	800d554 <BSP_SD_ReadCpltCallback>
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0

}
 800d20c:	bf00      	nop
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b082      	sub	sp, #8
 800d21a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d21c:	2301      	movs	r3, #1
 800d21e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d220:	f000 f80c 	bl	800d23c <BSP_PlatformIsDetected>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d22a:	2300      	movs	r3, #0
 800d22c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	b2db      	uxtb	r3, r3
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d242:	2301      	movs	r3, #1
 800d244:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d246:	2104      	movs	r1, #4
 800d248:	4806      	ldr	r0, [pc, #24]	@ (800d264 <BSP_PlatformIsDetected+0x28>)
 800d24a:	f7f7 fef7 	bl	800503c <HAL_GPIO_ReadPin>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d254:	2300      	movs	r3, #0
 800d256:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d258:	79fb      	ldrb	r3, [r7, #7]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	40021800 	.word	0x40021800

0800d268 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d270:	f7f6 f878 	bl	8003364 <HAL_GetTick>
 800d274:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d276:	e006      	b.n	800d286 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d278:	f7ff ff8a 	bl	800d190 <BSP_SD_GetCardState>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d282:	2300      	movs	r3, #0
 800d284:	e009      	b.n	800d29a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d286:	f7f6 f86d 	bl	8003364 <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	429a      	cmp	r2, r3
 800d294:	d8f0      	bhi.n	800d278 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d2dc <SD_CheckStatus+0x38>)
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d2b4:	f7ff ff6c 	bl	800d190 <BSP_SD_GetCardState>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d107      	bne.n	800d2ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d2be:	4b07      	ldr	r3, [pc, #28]	@ (800d2dc <SD_CheckStatus+0x38>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f023 0301 	bic.w	r3, r3, #1
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	4b04      	ldr	r3, [pc, #16]	@ (800d2dc <SD_CheckStatus+0x38>)
 800d2cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d2ce:	4b03      	ldr	r3, [pc, #12]	@ (800d2dc <SD_CheckStatus+0x38>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	b2db      	uxtb	r3, r3
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	20000009 	.word	0x20000009

0800d2e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2ea:	f7ff ff05 	bl	800d0f8 <BSP_SD_Init>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d107      	bne.n	800d304 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff ffd4 	bl	800d2a4 <SD_CheckStatus>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	461a      	mov	r2, r3
 800d300:	4b04      	ldr	r3, [pc, #16]	@ (800d314 <SD_initialize+0x34>)
 800d302:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d304:	4b03      	ldr	r3, [pc, #12]	@ (800d314 <SD_initialize+0x34>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	b2db      	uxtb	r3, r3
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	20000009 	.word	0x20000009

0800d318 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff ffbd 	bl	800d2a4 <SD_CheckStatus>
 800d32a:	4603      	mov	r3, r0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60b9      	str	r1, [r7, #8]
 800d33c:	607a      	str	r2, [r7, #4]
 800d33e:	603b      	str	r3, [r7, #0]
 800d340:	4603      	mov	r3, r0
 800d342:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d348:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d34c:	f7ff ff8c 	bl	800d268 <SD_CheckStatusWithTimeout>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	da01      	bge.n	800d35a <SD_read+0x26>
  {
    return res;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	e03b      	b.n	800d3d2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	6879      	ldr	r1, [r7, #4]
 800d35e:	68b8      	ldr	r0, [r7, #8]
 800d360:	f7ff fee2 	bl	800d128 <BSP_SD_ReadBlocks_DMA>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d132      	bne.n	800d3d0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d36a:	4b1c      	ldr	r3, [pc, #112]	@ (800d3dc <SD_read+0xa8>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d370:	f7f5 fff8 	bl	8003364 <HAL_GetTick>
 800d374:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d376:	bf00      	nop
 800d378:	4b18      	ldr	r3, [pc, #96]	@ (800d3dc <SD_read+0xa8>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d108      	bne.n	800d392 <SD_read+0x5e>
 800d380:	f7f5 fff0 	bl	8003364 <HAL_GetTick>
 800d384:	4602      	mov	r2, r0
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d38e:	4293      	cmp	r3, r2
 800d390:	d9f2      	bls.n	800d378 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d392:	4b12      	ldr	r3, [pc, #72]	@ (800d3dc <SD_read+0xa8>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d102      	bne.n	800d3a0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	75fb      	strb	r3, [r7, #23]
 800d39e:	e017      	b.n	800d3d0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d3dc <SD_read+0xa8>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d3a6:	f7f5 ffdd 	bl	8003364 <HAL_GetTick>
 800d3aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d3ac:	e007      	b.n	800d3be <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3ae:	f7ff feef 	bl	800d190 <BSP_SD_GetCardState>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d102      	bne.n	800d3be <SD_read+0x8a>
          {
            res = RES_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d3bc:	e008      	b.n	800d3d0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d3be:	f7f5 ffd1 	bl	8003364 <HAL_GetTick>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d9ee      	bls.n	800d3ae <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20000814 	.word	0x20000814

0800d3e0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60b9      	str	r1, [r7, #8]
 800d3e8:	607a      	str	r2, [r7, #4]
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d3f4:	4b24      	ldr	r3, [pc, #144]	@ (800d488 <SD_write+0xa8>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d3fa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d3fe:	f7ff ff33 	bl	800d268 <SD_CheckStatusWithTimeout>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	da01      	bge.n	800d40c <SD_write+0x2c>
  {
    return res;
 800d408:	7dfb      	ldrb	r3, [r7, #23]
 800d40a:	e038      	b.n	800d47e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	6879      	ldr	r1, [r7, #4]
 800d410:	68b8      	ldr	r0, [r7, #8]
 800d412:	f7ff fea3 	bl	800d15c <BSP_SD_WriteBlocks_DMA>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d12f      	bne.n	800d47c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d41c:	f7f5 ffa2 	bl	8003364 <HAL_GetTick>
 800d420:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d422:	bf00      	nop
 800d424:	4b18      	ldr	r3, [pc, #96]	@ (800d488 <SD_write+0xa8>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d108      	bne.n	800d43e <SD_write+0x5e>
 800d42c:	f7f5 ff9a 	bl	8003364 <HAL_GetTick>
 800d430:	4602      	mov	r2, r0
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d9f2      	bls.n	800d424 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d43e:	4b12      	ldr	r3, [pc, #72]	@ (800d488 <SD_write+0xa8>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d102      	bne.n	800d44c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	75fb      	strb	r3, [r7, #23]
 800d44a:	e017      	b.n	800d47c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d44c:	4b0e      	ldr	r3, [pc, #56]	@ (800d488 <SD_write+0xa8>)
 800d44e:	2200      	movs	r2, #0
 800d450:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d452:	f7f5 ff87 	bl	8003364 <HAL_GetTick>
 800d456:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d458:	e007      	b.n	800d46a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d45a:	f7ff fe99 	bl	800d190 <BSP_SD_GetCardState>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <SD_write+0x8a>
          {
            res = RES_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	75fb      	strb	r3, [r7, #23]
            break;
 800d468:	e008      	b.n	800d47c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d46a:	f7f5 ff7b 	bl	8003364 <HAL_GetTick>
 800d46e:	4602      	mov	r2, r0
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d478:	4293      	cmp	r3, r2
 800d47a:	d9ee      	bls.n	800d45a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	20000810 	.word	0x20000810

0800d48c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b08c      	sub	sp, #48	@ 0x30
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	603a      	str	r2, [r7, #0]
 800d496:	71fb      	strb	r3, [r7, #7]
 800d498:	460b      	mov	r3, r1
 800d49a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d4a2:	4b25      	ldr	r3, [pc, #148]	@ (800d538 <SD_ioctl+0xac>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <SD_ioctl+0x28>
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e03c      	b.n	800d52e <SD_ioctl+0xa2>

  switch (cmd)
 800d4b4:	79bb      	ldrb	r3, [r7, #6]
 800d4b6:	2b03      	cmp	r3, #3
 800d4b8:	d834      	bhi.n	800d524 <SD_ioctl+0x98>
 800d4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c0 <SD_ioctl+0x34>)
 800d4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c0:	0800d4d1 	.word	0x0800d4d1
 800d4c4:	0800d4d9 	.word	0x0800d4d9
 800d4c8:	0800d4f1 	.word	0x0800d4f1
 800d4cc:	0800d50b 	.word	0x0800d50b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d4d6:	e028      	b.n	800d52a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4d8:	f107 030c 	add.w	r3, r7, #12
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff fe67 	bl	800d1b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d4e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d4ee:	e01c      	b.n	800d52a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4f0:	f107 030c 	add.w	r3, r7, #12
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fe5b 	bl	800d1b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d508:	e00f      	b.n	800d52a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d50a:	f107 030c 	add.w	r3, r7, #12
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fe4e 	bl	800d1b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d516:	0a5a      	lsrs	r2, r3, #9
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d522:	e002      	b.n	800d52a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d524:	2304      	movs	r3, #4
 800d526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d52a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3730      	adds	r7, #48	@ 0x30
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20000009 	.word	0x20000009

0800d53c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d53c:	b480      	push	{r7}
 800d53e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d540:	4b03      	ldr	r3, [pc, #12]	@ (800d550 <BSP_SD_WriteCpltCallback+0x14>)
 800d542:	2201      	movs	r2, #1
 800d544:	601a      	str	r2, [r3, #0]
}
 800d546:	bf00      	nop
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	20000810 	.word	0x20000810

0800d554 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d554:	b480      	push	{r7}
 800d556:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d558:	4b03      	ldr	r3, [pc, #12]	@ (800d568 <BSP_SD_ReadCpltCallback+0x14>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	601a      	str	r2, [r3, #0]
}
 800d55e:	bf00      	nop
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	20000814 	.word	0x20000814

0800d56c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d56c:	b590      	push	{r4, r7, lr}
 800d56e:	b089      	sub	sp, #36	@ 0x24
 800d570:	af04      	add	r7, sp, #16
 800d572:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d574:	2301      	movs	r3, #1
 800d576:	2202      	movs	r2, #2
 800d578:	2102      	movs	r1, #2
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fc85 	bl	800de8a <USBH_FindInterface>
 800d580:	4603      	mov	r3, r0
 800d582:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d584:	7bfb      	ldrb	r3, [r7, #15]
 800d586:	2bff      	cmp	r3, #255	@ 0xff
 800d588:	d002      	beq.n	800d590 <USBH_CDC_InterfaceInit+0x24>
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d901      	bls.n	800d594 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d590:	2302      	movs	r3, #2
 800d592:	e13d      	b.n	800d810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fc5a 	bl	800de52 <USBH_SelectInterface>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d5a2:	7bbb      	ldrb	r3, [r7, #14]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	e131      	b.n	800d810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800d5b2:	2050      	movs	r0, #80	@ 0x50
 800d5b4:	f005 fdc0 	bl	8013138 <malloc>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d101      	bne.n	800d5d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	e11f      	b.n	800d810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d5d0:	2250      	movs	r2, #80	@ 0x50
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	68b8      	ldr	r0, [r7, #8]
 800d5d6:	f006 f891 	bl	80136fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	211a      	movs	r1, #26
 800d5e0:	fb01 f303 	mul.w	r3, r1, r3
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	b25b      	sxtb	r3, r3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	da15      	bge.n	800d61e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	211a      	movs	r1, #26
 800d5f8:	fb01 f303 	mul.w	r3, r1, r3
 800d5fc:	4413      	add	r3, r2
 800d5fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d602:	781a      	ldrb	r2, [r3, #0]
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d608:	7bfb      	ldrb	r3, [r7, #15]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	211a      	movs	r1, #26
 800d60e:	fb01 f303 	mul.w	r3, r1, r3
 800d612:	4413      	add	r3, r2
 800d614:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d618:	881a      	ldrh	r2, [r3, #0]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	785b      	ldrb	r3, [r3, #1]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f001 ffbe 	bl	800f5a6 <USBH_AllocPipe>
 800d62a:	4603      	mov	r3, r0
 800d62c:	461a      	mov	r2, r3
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	7819      	ldrb	r1, [r3, #0]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	7858      	ldrb	r0, [r3, #1]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	8952      	ldrh	r2, [r2, #10]
 800d64a:	9202      	str	r2, [sp, #8]
 800d64c:	2203      	movs	r2, #3
 800d64e:	9201      	str	r2, [sp, #4]
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	4623      	mov	r3, r4
 800d654:	4602      	mov	r2, r0
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f001 ff76 	bl	800f548 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2200      	movs	r2, #0
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f005 fb11 	bl	8012c8c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d66a:	2300      	movs	r3, #0
 800d66c:	2200      	movs	r2, #0
 800d66e:	210a      	movs	r1, #10
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fc0a 	bl	800de8a <USBH_FindInterface>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	2bff      	cmp	r3, #255	@ 0xff
 800d67e:	d002      	beq.n	800d686 <USBH_CDC_InterfaceInit+0x11a>
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d901      	bls.n	800d68a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d686:	2302      	movs	r3, #2
 800d688:	e0c2      	b.n	800d810 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	211a      	movs	r1, #26
 800d690:	fb01 f303 	mul.w	r3, r1, r3
 800d694:	4413      	add	r3, r2
 800d696:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	b25b      	sxtb	r3, r3
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	da16      	bge.n	800d6d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	211a      	movs	r1, #26
 800d6a8:	fb01 f303 	mul.w	r3, r1, r3
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d6b2:	781a      	ldrb	r2, [r3, #0]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	211a      	movs	r1, #26
 800d6be:	fb01 f303 	mul.w	r3, r1, r3
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d6c8:	881a      	ldrh	r2, [r3, #0]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	835a      	strh	r2, [r3, #26]
 800d6ce:	e015      	b.n	800d6fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	211a      	movs	r1, #26
 800d6d6:	fb01 f303 	mul.w	r3, r1, r3
 800d6da:	4413      	add	r3, r2
 800d6dc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d6e0:	781a      	ldrb	r2, [r3, #0]
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	211a      	movs	r1, #26
 800d6ec:	fb01 f303 	mul.w	r3, r1, r3
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d6f6:	881a      	ldrh	r2, [r3, #0]
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	211a      	movs	r1, #26
 800d702:	fb01 f303 	mul.w	r3, r1, r3
 800d706:	4413      	add	r3, r2
 800d708:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	b25b      	sxtb	r3, r3
 800d710:	2b00      	cmp	r3, #0
 800d712:	da16      	bge.n	800d742 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	211a      	movs	r1, #26
 800d71a:	fb01 f303 	mul.w	r3, r1, r3
 800d71e:	4413      	add	r3, r2
 800d720:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d724:	781a      	ldrb	r2, [r3, #0]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	211a      	movs	r1, #26
 800d730:	fb01 f303 	mul.w	r3, r1, r3
 800d734:	4413      	add	r3, r2
 800d736:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800d73a:	881a      	ldrh	r2, [r3, #0]
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	835a      	strh	r2, [r3, #26]
 800d740:	e015      	b.n	800d76e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	211a      	movs	r1, #26
 800d748:	fb01 f303 	mul.w	r3, r1, r3
 800d74c:	4413      	add	r3, r2
 800d74e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d752:	781a      	ldrb	r2, [r3, #0]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d758:	7bfb      	ldrb	r3, [r7, #15]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	211a      	movs	r1, #26
 800d75e:	fb01 f303 	mul.w	r3, r1, r3
 800d762:	4413      	add	r3, r2
 800d764:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800d768:	881a      	ldrh	r2, [r3, #0]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	7b9b      	ldrb	r3, [r3, #14]
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f001 ff16 	bl	800f5a6 <USBH_AllocPipe>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	7bdb      	ldrb	r3, [r3, #15]
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f001 ff0c 	bl	800f5a6 <USBH_AllocPipe>
 800d78e:	4603      	mov	r3, r0
 800d790:	461a      	mov	r2, r3
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	7b59      	ldrb	r1, [r3, #13]
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	7b98      	ldrb	r0, [r3, #14]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	8b12      	ldrh	r2, [r2, #24]
 800d7ae:	9202      	str	r2, [sp, #8]
 800d7b0:	2202      	movs	r2, #2
 800d7b2:	9201      	str	r2, [sp, #4]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	4623      	mov	r3, r4
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f001 fec4 	bl	800f548 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	7b19      	ldrb	r1, [r3, #12]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	7bd8      	ldrb	r0, [r3, #15]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	8b52      	ldrh	r2, [r2, #26]
 800d7d8:	9202      	str	r2, [sp, #8]
 800d7da:	2202      	movs	r2, #2
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	4623      	mov	r3, r4
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f001 feaf 	bl	800f548 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	7b5b      	ldrb	r3, [r3, #13]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f005 fa46 	bl	8012c8c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	7b1b      	ldrb	r3, [r3, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f005 fa3f 	bl	8012c8c <USBH_LL_SetToggle>

  return USBH_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3714      	adds	r7, #20
 800d814:	46bd      	mov	sp, r7
 800d816:	bd90      	pop	{r4, r7, pc}

0800d818 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d826:	69db      	ldr	r3, [r3, #28]
 800d828:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00e      	beq.n	800d850 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 fea4 	bl	800f586 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f001 fecf 	bl	800f5e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	7b1b      	ldrb	r3, [r3, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	7b1b      	ldrb	r3, [r3, #12]
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f001 fe91 	bl	800f586 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	7b1b      	ldrb	r3, [r3, #12]
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f001 febc 	bl	800f5e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2200      	movs	r2, #0
 800d874:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	7b5b      	ldrb	r3, [r3, #13]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00e      	beq.n	800d89c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	7b5b      	ldrb	r3, [r3, #13]
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f001 fe7e 	bl	800f586 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	7b5b      	ldrb	r3, [r3, #13]
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f001 fea9 	bl	800f5e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d8a2:	69db      	ldr	r3, [r3, #28]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d8ae:	69db      	ldr	r3, [r3, #28]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f005 fc49 	bl	8013148 <free>
    phost->pActiveClass->pData = 0U;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d8bc:	2200      	movs	r2, #0
 800d8be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b084      	sub	sp, #16
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d8d8:	69db      	ldr	r3, [r3, #28]
 800d8da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3340      	adds	r3, #64	@ 0x40
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f8b1 	bl	800da4a <GetLineCoding>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d8ec:	7afb      	ldrb	r3, [r7, #11]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d105      	bne.n	800d8fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d8f8:	2102      	movs	r1, #2
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d8fe:	7afb      	ldrb	r3, [r7, #11]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d910:	2301      	movs	r3, #1
 800d912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800d928:	2b04      	cmp	r3, #4
 800d92a:	d877      	bhi.n	800da1c <USBH_CDC_Process+0x114>
 800d92c:	a201      	add	r2, pc, #4	@ (adr r2, 800d934 <USBH_CDC_Process+0x2c>)
 800d92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d932:	bf00      	nop
 800d934:	0800d949 	.word	0x0800d949
 800d938:	0800d94f 	.word	0x0800d94f
 800d93c:	0800d97f 	.word	0x0800d97f
 800d940:	0800d9f3 	.word	0x0800d9f3
 800d944:	0800da01 	.word	0x0800da01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	73fb      	strb	r3, [r7, #15]
      break;
 800d94c:	e06d      	b.n	800da2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f897 	bl	800da88 <SetLineCoding>
 800d95a:	4603      	mov	r3, r0
 800d95c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d104      	bne.n	800d96e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d96c:	e058      	b.n	800da20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d96e:	7bbb      	ldrb	r3, [r7, #14]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d055      	beq.n	800da20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2204      	movs	r2, #4
 800d978:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800d97c:	e050      	b.n	800da20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	3340      	adds	r3, #64	@ 0x40
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f860 	bl	800da4a <GetLineCoding>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d126      	bne.n	800d9e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	2200      	movs	r2, #0
 800d998:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9a6:	791b      	ldrb	r3, [r3, #4]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d13b      	bne.n	800da24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d133      	bne.n	800da24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d12b      	bne.n	800da24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d124      	bne.n	800da24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f958 	bl	800dc90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d9e0:	e020      	b.n	800da24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d9e2:	7bbb      	ldrb	r3, [r7, #14]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d01d      	beq.n	800da24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2204      	movs	r2, #4
 800d9ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800d9f0:	e018      	b.n	800da24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f867 	bl	800dac6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f8da 	bl	800dbb2 <CDC_ProcessReception>
      break;
 800d9fe:	e014      	b.n	800da2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800da00:	2100      	movs	r1, #0
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 f81a 	bl	800ea3c <USBH_ClrFeature>
 800da08:	4603      	mov	r3, r0
 800da0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da0c:	7bbb      	ldrb	r3, [r7, #14]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10a      	bne.n	800da28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800da1a:	e005      	b.n	800da28 <USBH_CDC_Process+0x120>

    default:
      break;
 800da1c:	bf00      	nop
 800da1e:	e004      	b.n	800da2a <USBH_CDC_Process+0x122>
      break;
 800da20:	bf00      	nop
 800da22:	e002      	b.n	800da2a <USBH_CDC_Process+0x122>
      break;
 800da24:	bf00      	nop
 800da26:	e000      	b.n	800da2a <USBH_CDC_Process+0x122>
      break;
 800da28:	bf00      	nop

  }

  return status;
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	22a1      	movs	r2, #161	@ 0xa1
 800da58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2221      	movs	r2, #33	@ 0x21
 800da5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2207      	movs	r2, #7
 800da70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2207      	movs	r2, #7
 800da76:	4619      	mov	r1, r3
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f001 fb14 	bl	800f0a6 <USBH_CtlReq>
 800da7e:	4603      	mov	r3, r0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2221      	movs	r2, #33	@ 0x21
 800da96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2220      	movs	r2, #32
 800da9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2207      	movs	r2, #7
 800daae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2207      	movs	r2, #7
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f001 faf5 	bl	800f0a6 <USBH_CtlReq>
 800dabc:	4603      	mov	r3, r0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b086      	sub	sp, #24
 800daca:	af02      	add	r7, sp, #8
 800dacc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dad8:	2300      	movs	r3, #0
 800dada:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d002      	beq.n	800daec <CDC_ProcessTransmission+0x26>
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d023      	beq.n	800db32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800daea:	e05e      	b.n	800dbaa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	8b12      	ldrh	r2, [r2, #24]
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d90b      	bls.n	800db10 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	69d9      	ldr	r1, [r3, #28]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	8b1a      	ldrh	r2, [r3, #24]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	7b5b      	ldrb	r3, [r3, #13]
 800db04:	2001      	movs	r0, #1
 800db06:	9000      	str	r0, [sp, #0]
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f001 fcda 	bl	800f4c2 <USBH_BulkSendData>
 800db0e:	e00b      	b.n	800db28 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800db18:	b29a      	uxth	r2, r3
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	7b5b      	ldrb	r3, [r3, #13]
 800db1e:	2001      	movs	r0, #1
 800db20:	9000      	str	r0, [sp, #0]
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f001 fccd 	bl	800f4c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800db30:	e03b      	b.n	800dbaa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	7b5b      	ldrb	r3, [r3, #13]
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f005 f87d 	bl	8012c38 <USBH_LL_GetURBState>
 800db3e:	4603      	mov	r3, r0
 800db40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800db42:	7afb      	ldrb	r3, [r7, #11]
 800db44:	2b01      	cmp	r3, #1
 800db46:	d128      	bne.n	800db9a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	8b12      	ldrh	r2, [r2, #24]
 800db50:	4293      	cmp	r3, r2
 800db52:	d90e      	bls.n	800db72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	8b12      	ldrh	r2, [r2, #24]
 800db5c:	1a9a      	subs	r2, r3, r2
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	69db      	ldr	r3, [r3, #28]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	8b12      	ldrh	r2, [r2, #24]
 800db6a:	441a      	add	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	61da      	str	r2, [r3, #28]
 800db70:	e002      	b.n	800db78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d004      	beq.n	800db8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800db88:	e00e      	b.n	800dba8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f868 	bl	800dc68 <USBH_CDC_TransmitCallback>
      break;
 800db98:	e006      	b.n	800dba8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800db9a:	7afb      	ldrb	r3, [r7, #11]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d103      	bne.n	800dba8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800dba8:	bf00      	nop
  }
}
 800dbaa:	bf00      	nop
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b086      	sub	sp, #24
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dbc0:	69db      	ldr	r3, [r3, #28]
 800dbc2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d002      	beq.n	800dbd8 <CDC_ProcessReception+0x26>
 800dbd2:	2b04      	cmp	r3, #4
 800dbd4:	d00e      	beq.n	800dbf4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dbd6:	e043      	b.n	800dc60 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	6a19      	ldr	r1, [r3, #32]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	8b5a      	ldrh	r2, [r3, #26]
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	7b1b      	ldrb	r3, [r3, #12]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 fc91 	bl	800f50c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2204      	movs	r2, #4
 800dbee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800dbf2:	e035      	b.n	800dc60 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	7b1b      	ldrb	r3, [r3, #12]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f005 f81c 	bl	8012c38 <USBH_LL_GetURBState>
 800dc00:	4603      	mov	r3, r0
 800dc02:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dc04:	7cfb      	ldrb	r3, [r7, #19]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d129      	bne.n	800dc5e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	7b1b      	ldrb	r3, [r3, #12]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f004 ff7f 	bl	8012b14 <USBH_LL_GetLastXferSize>
 800dc16:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d016      	beq.n	800dc50 <CDC_ProcessReception+0x9e>
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	8b5b      	ldrh	r3, [r3, #26]
 800dc26:	461a      	mov	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d110      	bne.n	800dc50 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	1ad2      	subs	r2, r2, r3
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6a1a      	ldr	r2, [r3, #32]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	441a      	add	r2, r3
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	2203      	movs	r2, #3
 800dc4a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800dc4e:	e006      	b.n	800dc5e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 f80f 	bl	800dc7c <USBH_CDC_ReceiveCallback>
      break;
 800dc5e:	bf00      	nop
  }
}
 800dc60:	bf00      	nop
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dcb8:	2302      	movs	r3, #2
 800dcba:	e029      	b.n	800dd10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	79fa      	ldrb	r2, [r7, #7]
 800dcc0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 f81f 	bl	800dd18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f004 fe4f 	bl	80129ac <USBH_LL_Init>

  return USBH_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dd20:	2300      	movs	r3, #0
 800dd22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd24:	2300      	movs	r3, #0
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	e009      	b.n	800dd3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	33e0      	adds	r3, #224	@ 0xe0
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	4413      	add	r3, r2
 800dd34:	2200      	movs	r2, #0
 800dd36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2b0f      	cmp	r3, #15
 800dd42:	d9f2      	bls.n	800dd2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd44:	2300      	movs	r3, #0
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	e009      	b.n	800dd5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800dd54:	2200      	movs	r2, #0
 800dd56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd64:	d3f1      	bcc.n	800dd4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2240      	movs	r2, #64	@ 0x40
 800dd8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	331c      	adds	r3, #28
 800ddb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ddba:	2100      	movs	r1, #0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f005 fc9d 	bl	80136fc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ddc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddcc:	2100      	movs	r1, #0
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f005 fc94 	bl	80136fc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ddda:	2212      	movs	r2, #18
 800dddc:	2100      	movs	r1, #0
 800ddde:	4618      	mov	r0, r3
 800dde0:	f005 fc8c 	bl	80136fc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ddea:	223e      	movs	r2, #62	@ 0x3e
 800ddec:	2100      	movs	r1, #0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f005 fc84 	bl	80136fc <memset>

  return USBH_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ddfe:	b480      	push	{r7}
 800de00:	b085      	sub	sp, #20
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800de08:	2300      	movs	r3, #0
 800de0a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d016      	beq.n	800de40 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10e      	bne.n	800de3a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800de22:	1c59      	adds	r1, r3, #1
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	33de      	adds	r3, #222	@ 0xde
 800de2e:	6839      	ldr	r1, [r7, #0]
 800de30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	73fb      	strb	r3, [r7, #15]
 800de38:	e004      	b.n	800de44 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800de3a:	2302      	movs	r3, #2
 800de3c:	73fb      	strb	r3, [r7, #15]
 800de3e:	e001      	b.n	800de44 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800de40:	2302      	movs	r3, #2
 800de42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de44:	7bfb      	ldrb	r3, [r7, #15]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800de52:	b480      	push	{r7}
 800de54:	b085      	sub	sp, #20
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	460b      	mov	r3, r1
 800de5c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800de68:	78fa      	ldrb	r2, [r7, #3]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d204      	bcs.n	800de78 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	78fa      	ldrb	r2, [r7, #3]
 800de72:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800de76:	e001      	b.n	800de7c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800de78:	2302      	movs	r3, #2
 800de7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b087      	sub	sp, #28
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
 800de92:	4608      	mov	r0, r1
 800de94:	4611      	mov	r1, r2
 800de96:	461a      	mov	r2, r3
 800de98:	4603      	mov	r3, r0
 800de9a:	70fb      	strb	r3, [r7, #3]
 800de9c:	460b      	mov	r3, r1
 800de9e:	70bb      	strb	r3, [r7, #2]
 800dea0:	4613      	mov	r3, r2
 800dea2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dea4:	2300      	movs	r3, #0
 800dea6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800deb2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800deb4:	e025      	b.n	800df02 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	221a      	movs	r2, #26
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	3308      	adds	r3, #8
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	4413      	add	r3, r2
 800dec4:	3302      	adds	r3, #2
 800dec6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	795b      	ldrb	r3, [r3, #5]
 800decc:	78fa      	ldrb	r2, [r7, #3]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d002      	beq.n	800ded8 <USBH_FindInterface+0x4e>
 800ded2:	78fb      	ldrb	r3, [r7, #3]
 800ded4:	2bff      	cmp	r3, #255	@ 0xff
 800ded6:	d111      	bne.n	800defc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dedc:	78ba      	ldrb	r2, [r7, #2]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d002      	beq.n	800dee8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dee2:	78bb      	ldrb	r3, [r7, #2]
 800dee4:	2bff      	cmp	r3, #255	@ 0xff
 800dee6:	d109      	bne.n	800defc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800deec:	787a      	ldrb	r2, [r7, #1]
 800deee:	429a      	cmp	r2, r3
 800def0:	d002      	beq.n	800def8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800def2:	787b      	ldrb	r3, [r7, #1]
 800def4:	2bff      	cmp	r3, #255	@ 0xff
 800def6:	d101      	bne.n	800defc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800def8:	7dfb      	ldrb	r3, [r7, #23]
 800defa:	e006      	b.n	800df0a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800defc:	7dfb      	ldrb	r3, [r7, #23]
 800defe:	3301      	adds	r3, #1
 800df00:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800df02:	7dfb      	ldrb	r3, [r7, #23]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d9d6      	bls.n	800deb6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800df08:	23ff      	movs	r3, #255	@ 0xff
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f004 fd80 	bl	8012a24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800df24:	2101      	movs	r1, #1
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f004 fe99 	bl	8012c5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af04      	add	r7, sp, #16
 800df3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800df40:	2302      	movs	r3, #2
 800df42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800df44:	2300      	movs	r3, #0
 800df46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b01      	cmp	r3, #1
 800df52:	d102      	bne.n	800df5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2203      	movs	r2, #3
 800df58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b0b      	cmp	r3, #11
 800df62:	f200 81bb 	bhi.w	800e2dc <USBH_Process+0x3a4>
 800df66:	a201      	add	r2, pc, #4	@ (adr r2, 800df6c <USBH_Process+0x34>)
 800df68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6c:	0800df9d 	.word	0x0800df9d
 800df70:	0800dfcf 	.word	0x0800dfcf
 800df74:	0800e037 	.word	0x0800e037
 800df78:	0800e277 	.word	0x0800e277
 800df7c:	0800e2dd 	.word	0x0800e2dd
 800df80:	0800e0d7 	.word	0x0800e0d7
 800df84:	0800e21d 	.word	0x0800e21d
 800df88:	0800e10d 	.word	0x0800e10d
 800df8c:	0800e12d 	.word	0x0800e12d
 800df90:	0800e14b 	.word	0x0800e14b
 800df94:	0800e18f 	.word	0x0800e18f
 800df98:	0800e25f 	.word	0x0800e25f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 819b 	beq.w	800e2e0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2201      	movs	r2, #1
 800dfae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dfb0:	20c8      	movs	r0, #200	@ 0xc8
 800dfb2:	f004 fe9e 	bl	8012cf2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f004 fd91 	bl	8012ade <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dfcc:	e188      	b.n	800e2e0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d107      	bne.n	800dfe8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2202      	movs	r2, #2
 800dfe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dfe6:	e18a      	b.n	800e2fe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800dfee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dff2:	d914      	bls.n	800e01e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800dffa:	3301      	adds	r3, #1
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	d903      	bls.n	800e016 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	220d      	movs	r2, #13
 800e012:	701a      	strb	r2, [r3, #0]
      break;
 800e014:	e173      	b.n	800e2fe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	701a      	strb	r2, [r3, #0]
      break;
 800e01c:	e16f      	b.n	800e2fe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800e024:	f103 020a 	add.w	r2, r3, #10
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800e02e:	200a      	movs	r0, #10
 800e030:	f004 fe5f 	bl	8012cf2 <USBH_Delay>
      break;
 800e034:	e163      	b.n	800e2fe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e046:	2104      	movs	r1, #4
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e04c:	2064      	movs	r0, #100	@ 0x64
 800e04e:	f004 fe50 	bl	8012cf2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f004 fd1c 	bl	8012a90 <USBH_LL_GetSpeed>
 800e058:	4603      	mov	r3, r0
 800e05a:	461a      	mov	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2205      	movs	r2, #5
 800e066:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e068:	2100      	movs	r1, #0
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f001 fa9b 	bl	800f5a6 <USBH_AllocPipe>
 800e070:	4603      	mov	r3, r0
 800e072:	461a      	mov	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e078:	2180      	movs	r1, #128	@ 0x80
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f001 fa93 	bl	800f5a6 <USBH_AllocPipe>
 800e080:	4603      	mov	r3, r0
 800e082:	461a      	mov	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7919      	ldrb	r1, [r3, #4]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e09c:	9202      	str	r2, [sp, #8]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	9201      	str	r2, [sp, #4]
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2280      	movs	r2, #128	@ 0x80
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f001 fa4d 	bl	800f548 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	7959      	ldrb	r1, [r3, #5]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e0c2:	9202      	str	r2, [sp, #8]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	9201      	str	r2, [sp, #4]
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f001 fa3a 	bl	800f548 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e0d4:	e113      	b.n	800e2fe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f916 	bl	800e308 <USBH_HandleEnum>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f040 80fd 	bne.w	800e2e4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d103      	bne.n	800e104 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2208      	movs	r2, #8
 800e100:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e102:	e0ef      	b.n	800e2e4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2207      	movs	r2, #7
 800e108:	701a      	strb	r2, [r3, #0]
      break;
 800e10a:	e0eb      	b.n	800e2e4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 80e8 	beq.w	800e2e8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e11e:	2101      	movs	r1, #1
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2208      	movs	r2, #8
 800e128:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e12a:	e0dd      	b.n	800e2e8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 fc3a 	bl	800e9ae <USBH_SetCfg>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 80d5 	bne.w	800e2ec <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2209      	movs	r2, #9
 800e146:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e148:	e0d0      	b.n	800e2ec <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800e150:	f003 0320 	and.w	r3, r3, #32
 800e154:	2b00      	cmp	r3, #0
 800e156:	d016      	beq.n	800e186 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e158:	2101      	movs	r1, #1
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 fc4a 	bl	800e9f4 <USBH_SetFeature>
 800e160:	4603      	mov	r3, r0
 800e162:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e164:	7bbb      	ldrb	r3, [r7, #14]
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d103      	bne.n	800e174 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	220a      	movs	r2, #10
 800e170:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e172:	e0bd      	b.n	800e2f0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800e174:	7bbb      	ldrb	r3, [r7, #14]
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b03      	cmp	r3, #3
 800e17a:	f040 80b9 	bne.w	800e2f0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	220a      	movs	r2, #10
 800e182:	701a      	strb	r2, [r3, #0]
      break;
 800e184:	e0b4      	b.n	800e2f0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	220a      	movs	r2, #10
 800e18a:	701a      	strb	r2, [r3, #0]
      break;
 800e18c:	e0b0      	b.n	800e2f0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 80ad 	beq.w	800e2f4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
 800e1a6:	e016      	b.n	800e1d6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e1a8:	7bfa      	ldrb	r2, [r7, #15]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	32de      	adds	r2, #222	@ 0xde
 800e1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b2:	791a      	ldrb	r2, [r3, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d108      	bne.n	800e1d0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e1be:	7bfa      	ldrb	r2, [r7, #15]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	32de      	adds	r2, #222	@ 0xde
 800e1c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800e1ce:	e005      	b.n	800e1dc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	73fb      	strb	r3, [r7, #15]
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0e5      	beq.n	800e1a8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d016      	beq.n	800e214 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	4798      	blx	r3
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d109      	bne.n	800e20c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2206      	movs	r2, #6
 800e1fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e204:	2103      	movs	r1, #3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e20a:	e073      	b.n	800e2f4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	220d      	movs	r2, #13
 800e210:	701a      	strb	r2, [r3, #0]
      break;
 800e212:	e06f      	b.n	800e2f4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	220d      	movs	r2, #13
 800e218:	701a      	strb	r2, [r3, #0]
      break;
 800e21a:	e06b      	b.n	800e2f4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e222:	2b00      	cmp	r3, #0
 800e224:	d017      	beq.n	800e256 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	4798      	blx	r3
 800e232:	4603      	mov	r3, r0
 800e234:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e236:	7bbb      	ldrb	r3, [r7, #14]
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d103      	bne.n	800e246 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	220b      	movs	r2, #11
 800e242:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e244:	e058      	b.n	800e2f8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800e246:	7bbb      	ldrb	r3, [r7, #14]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b02      	cmp	r3, #2
 800e24c:	d154      	bne.n	800e2f8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	220d      	movs	r2, #13
 800e252:	701a      	strb	r2, [r3, #0]
      break;
 800e254:	e050      	b.n	800e2f8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	220d      	movs	r2, #13
 800e25a:	701a      	strb	r2, [r3, #0]
      break;
 800e25c:	e04c      	b.n	800e2f8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e264:	2b00      	cmp	r3, #0
 800e266:	d049      	beq.n	800e2fc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	4798      	blx	r3
      }
      break;
 800e274:	e042      	b.n	800e2fc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fd4a 	bl	800dd18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d009      	beq.n	800e2a2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d005      	beq.n	800e2b8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e2b2:	2105      	movs	r1, #5
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d107      	bne.n	800e2d4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff fe22 	bl	800df16 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e2d2:	e014      	b.n	800e2fe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f004 fba5 	bl	8012a24 <USBH_LL_Start>
      break;
 800e2da:	e010      	b.n	800e2fe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e2dc:	bf00      	nop
 800e2de:	e00e      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2e0:	bf00      	nop
 800e2e2:	e00c      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2e4:	bf00      	nop
 800e2e6:	e00a      	b.n	800e2fe <USBH_Process+0x3c6>
    break;
 800e2e8:	bf00      	nop
 800e2ea:	e008      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2ec:	bf00      	nop
 800e2ee:	e006      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2f0:	bf00      	nop
 800e2f2:	e004      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2f4:	bf00      	nop
 800e2f6:	e002      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2f8:	bf00      	nop
 800e2fa:	e000      	b.n	800e2fe <USBH_Process+0x3c6>
      break;
 800e2fc:	bf00      	nop
  }
  return USBH_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b088      	sub	sp, #32
 800e30c:	af04      	add	r7, sp, #16
 800e30e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e310:	2301      	movs	r3, #1
 800e312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e314:	2301      	movs	r3, #1
 800e316:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	785b      	ldrb	r3, [r3, #1]
 800e31c:	2b07      	cmp	r3, #7
 800e31e:	f200 81bd 	bhi.w	800e69c <USBH_HandleEnum+0x394>
 800e322:	a201      	add	r2, pc, #4	@ (adr r2, 800e328 <USBH_HandleEnum+0x20>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e349 	.word	0x0800e349
 800e32c:	0800e403 	.word	0x0800e403
 800e330:	0800e46d 	.word	0x0800e46d
 800e334:	0800e4f7 	.word	0x0800e4f7
 800e338:	0800e561 	.word	0x0800e561
 800e33c:	0800e5d1 	.word	0x0800e5d1
 800e340:	0800e617 	.word	0x0800e617
 800e344:	0800e65d 	.word	0x0800e65d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e348:	2108      	movs	r1, #8
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa4c 	bl	800e7e8 <USBH_Get_DevDesc>
 800e350:	4603      	mov	r3, r0
 800e352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e354:	7bbb      	ldrb	r3, [r7, #14]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d12e      	bne.n	800e3b8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2201      	movs	r2, #1
 800e368:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	7919      	ldrb	r1, [r3, #4]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e37e:	9202      	str	r2, [sp, #8]
 800e380:	2200      	movs	r2, #0
 800e382:	9201      	str	r2, [sp, #4]
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	4603      	mov	r3, r0
 800e388:	2280      	movs	r2, #128	@ 0x80
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f001 f8dc 	bl	800f548 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7959      	ldrb	r1, [r3, #5]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3a4:	9202      	str	r2, [sp, #8]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	9201      	str	r2, [sp, #4]
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f001 f8c9 	bl	800f548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e3b6:	e173      	b.n	800e6a0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e3b8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	f040 8170 	bne.w	800e6a0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	d903      	bls.n	800e3e2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	220d      	movs	r2, #13
 800e3de:	701a      	strb	r2, [r3, #0]
      break;
 800e3e0:	e15e      	b.n	800e6a0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	795b      	ldrb	r3, [r3, #5]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f001 f8fd 	bl	800f5e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	791b      	ldrb	r3, [r3, #4]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f001 f8f7 	bl	800f5e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	701a      	strb	r2, [r3, #0]
      break;
 800e400:	e14e      	b.n	800e6a0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e402:	2112      	movs	r1, #18
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f9ef 	bl	800e7e8 <USBH_Get_DevDesc>
 800e40a:	4603      	mov	r3, r0
 800e40c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e40e:	7bbb      	ldrb	r3, [r7, #14]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d103      	bne.n	800e41c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2202      	movs	r2, #2
 800e418:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e41a:	e143      	b.n	800e6a4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e41c:	7bbb      	ldrb	r3, [r7, #14]
 800e41e:	2b03      	cmp	r3, #3
 800e420:	f040 8140 	bne.w	800e6a4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e42a:	3301      	adds	r3, #1
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e43a:	2b03      	cmp	r3, #3
 800e43c:	d903      	bls.n	800e446 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	220d      	movs	r2, #13
 800e442:	701a      	strb	r2, [r3, #0]
      break;
 800e444:	e12e      	b.n	800e6a4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	795b      	ldrb	r3, [r3, #5]
 800e44a:	4619      	mov	r1, r3
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f001 f8cb 	bl	800f5e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	791b      	ldrb	r3, [r3, #4]
 800e456:	4619      	mov	r1, r3
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f001 f8c5 	bl	800f5e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	701a      	strb	r2, [r3, #0]
      break;
 800e46a:	e11b      	b.n	800e6a4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e46c:	2101      	movs	r1, #1
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa79 	bl	800e966 <USBH_SetAddress>
 800e474:	4603      	mov	r3, r0
 800e476:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e478:	7bbb      	ldrb	r3, [r7, #14]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d130      	bne.n	800e4e0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800e47e:	2002      	movs	r0, #2
 800e480:	f004 fc37 	bl	8012cf2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2203      	movs	r2, #3
 800e490:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	7919      	ldrb	r1, [r3, #4]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e4a6:	9202      	str	r2, [sp, #8]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	9201      	str	r2, [sp, #4]
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2280      	movs	r2, #128	@ 0x80
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 f848 	bl	800f548 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7959      	ldrb	r1, [r3, #5]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4cc:	9202      	str	r2, [sp, #8]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	9201      	str	r2, [sp, #4]
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f001 f835 	bl	800f548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e4de:	e0e3      	b.n	800e6a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4e0:	7bbb      	ldrb	r3, [r7, #14]
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	f040 80e0 	bne.w	800e6a8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	220d      	movs	r2, #13
 800e4ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	705a      	strb	r2, [r3, #1]
      break;
 800e4f4:	e0d8      	b.n	800e6a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e4f6:	2109      	movs	r1, #9
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f9a1 	bl	800e840 <USBH_Get_CfgDesc>
 800e4fe:	4603      	mov	r3, r0
 800e500:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e502:	7bbb      	ldrb	r3, [r7, #14]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d103      	bne.n	800e510 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2204      	movs	r2, #4
 800e50c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e50e:	e0cd      	b.n	800e6ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e510:	7bbb      	ldrb	r3, [r7, #14]
 800e512:	2b03      	cmp	r3, #3
 800e514:	f040 80ca 	bne.w	800e6ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e51e:	3301      	adds	r3, #1
 800e520:	b2da      	uxtb	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d903      	bls.n	800e53a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	220d      	movs	r2, #13
 800e536:	701a      	strb	r2, [r3, #0]
      break;
 800e538:	e0b8      	b.n	800e6ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	795b      	ldrb	r3, [r3, #5]
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f001 f851 	bl	800f5e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	791b      	ldrb	r3, [r3, #4]
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f001 f84b 	bl	800f5e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	701a      	strb	r2, [r3, #0]
      break;
 800e55e:	e0a5      	b.n	800e6ac <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800e566:	4619      	mov	r1, r3
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f969 	bl	800e840 <USBH_Get_CfgDesc>
 800e56e:	4603      	mov	r3, r0
 800e570:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e572:	7bbb      	ldrb	r3, [r7, #14]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d103      	bne.n	800e580 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2205      	movs	r2, #5
 800e57c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e57e:	e097      	b.n	800e6b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e580:	7bbb      	ldrb	r3, [r7, #14]
 800e582:	2b03      	cmp	r3, #3
 800e584:	f040 8094 	bne.w	800e6b0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e58e:	3301      	adds	r3, #1
 800e590:	b2da      	uxtb	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e59e:	2b03      	cmp	r3, #3
 800e5a0:	d903      	bls.n	800e5aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	220d      	movs	r2, #13
 800e5a6:	701a      	strb	r2, [r3, #0]
      break;
 800e5a8:	e082      	b.n	800e6b0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	795b      	ldrb	r3, [r3, #5]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 f819 	bl	800f5e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	791b      	ldrb	r3, [r3, #4]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f001 f813 	bl	800f5e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	701a      	strb	r2, [r3, #0]
      break;
 800e5ce:	e06f      	b.n	800e6b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d019      	beq.n	800e60e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e5e6:	23ff      	movs	r3, #255	@ 0xff
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f953 	bl	800e894 <USBH_Get_StringDesc>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e5f2:	7bbb      	ldrb	r3, [r7, #14]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d103      	bne.n	800e600 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2206      	movs	r2, #6
 800e5fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e5fe:	e059      	b.n	800e6b4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e600:	7bbb      	ldrb	r3, [r7, #14]
 800e602:	2b03      	cmp	r3, #3
 800e604:	d156      	bne.n	800e6b4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2206      	movs	r2, #6
 800e60a:	705a      	strb	r2, [r3, #1]
      break;
 800e60c:	e052      	b.n	800e6b4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2206      	movs	r2, #6
 800e612:	705a      	strb	r2, [r3, #1]
      break;
 800e614:	e04e      	b.n	800e6b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d019      	beq.n	800e654 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e62c:	23ff      	movs	r3, #255	@ 0xff
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 f930 	bl	800e894 <USBH_Get_StringDesc>
 800e634:	4603      	mov	r3, r0
 800e636:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d103      	bne.n	800e646 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2207      	movs	r2, #7
 800e642:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e644:	e038      	b.n	800e6b8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e646:	7bbb      	ldrb	r3, [r7, #14]
 800e648:	2b03      	cmp	r3, #3
 800e64a:	d135      	bne.n	800e6b8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2207      	movs	r2, #7
 800e650:	705a      	strb	r2, [r3, #1]
      break;
 800e652:	e031      	b.n	800e6b8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2207      	movs	r2, #7
 800e658:	705a      	strb	r2, [r3, #1]
      break;
 800e65a:	e02d      	b.n	800e6b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800e662:	2b00      	cmp	r3, #0
 800e664:	d017      	beq.n	800e696 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e672:	23ff      	movs	r3, #255	@ 0xff
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 f90d 	bl	800e894 <USBH_Get_StringDesc>
 800e67a:	4603      	mov	r3, r0
 800e67c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e684:	2300      	movs	r3, #0
 800e686:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e688:	e018      	b.n	800e6bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e68a:	7bbb      	ldrb	r3, [r7, #14]
 800e68c:	2b03      	cmp	r3, #3
 800e68e:	d115      	bne.n	800e6bc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
      break;
 800e694:	e012      	b.n	800e6bc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	73fb      	strb	r3, [r7, #15]
      break;
 800e69a:	e00f      	b.n	800e6bc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800e69c:	bf00      	nop
 800e69e:	e00e      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6a0:	bf00      	nop
 800e6a2:	e00c      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6a4:	bf00      	nop
 800e6a6:	e00a      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6a8:	bf00      	nop
 800e6aa:	e008      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6ac:	bf00      	nop
 800e6ae:	e006      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6b0:	bf00      	nop
 800e6b2:	e004      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6b4:	bf00      	nop
 800e6b6:	e002      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6b8:	bf00      	nop
 800e6ba:	e000      	b.n	800e6be <USBH_HandleEnum+0x3b6>
      break;
 800e6bc:	bf00      	nop
  }
  return Status;
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800e6da:	bf00      	nop
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b082      	sub	sp, #8
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e6f4:	1c5a      	adds	r2, r3, #1
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 f804 	bl	800e70a <USBH_HandleSof>
}
 800e702:	bf00      	nop
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b082      	sub	sp, #8
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b0b      	cmp	r3, #11
 800e71a:	d10a      	bne.n	800e732 <USBH_HandleSof+0x28>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e722:	2b00      	cmp	r3, #0
 800e724:	d005      	beq.n	800e732 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	4798      	blx	r3
  }
}
 800e732:	bf00      	nop
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e73a:	b480      	push	{r7}
 800e73c:	b083      	sub	sp, #12
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2201      	movs	r2, #1
 800e746:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e74a:	bf00      	nop
}
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e756:	b480      	push	{r7}
 800e758:	b083      	sub	sp, #12
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800e766:	bf00      	nop
}
 800e768:	370c      	adds	r7, #12
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr

0800e772 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e772:	b480      	push	{r7}
 800e774:	b083      	sub	sp, #12
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e792:	2300      	movs	r3, #0
}
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f004 f94a 	bl	8012a5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	791b      	ldrb	r3, [r3, #4]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 ff0b 	bl	800f5e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	795b      	ldrb	r3, [r3, #5]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 ff05 	bl	800f5e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b086      	sub	sp, #24
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e7f4:	887b      	ldrh	r3, [r7, #2]
 800e7f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7fa:	d901      	bls.n	800e800 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	e01b      	b.n	800e838 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e806:	887b      	ldrh	r3, [r7, #2]
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	4613      	mov	r3, r2
 800e80c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e810:	2100      	movs	r1, #0
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f872 	bl	800e8fc <USBH_GetDescriptor>
 800e818:	4603      	mov	r3, r0
 800e81a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d109      	bne.n	800e836 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e828:	887a      	ldrh	r2, [r7, #2]
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f929 	bl	800ea84 <USBH_ParseDevDesc>
 800e832:	4603      	mov	r3, r0
 800e834:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e836:	7bfb      	ldrb	r3, [r7, #15]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af02      	add	r7, sp, #8
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	331c      	adds	r3, #28
 800e850:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e852:	887b      	ldrh	r3, [r7, #2]
 800e854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e858:	d901      	bls.n	800e85e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e85a:	2303      	movs	r3, #3
 800e85c:	e016      	b.n	800e88c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e85e:	887b      	ldrh	r3, [r7, #2]
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e868:	2100      	movs	r1, #0
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f846 	bl	800e8fc <USBH_GetDescriptor>
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d107      	bne.n	800e88a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e87a:	887b      	ldrh	r3, [r7, #2]
 800e87c:	461a      	mov	r2, r3
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f9af 	bl	800ebe4 <USBH_ParseCfgDesc>
 800e886:	4603      	mov	r3, r0
 800e888:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af02      	add	r7, sp, #8
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	607a      	str	r2, [r7, #4]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	72fb      	strb	r3, [r7, #11]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e8a8:	893b      	ldrh	r3, [r7, #8]
 800e8aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8ae:	d802      	bhi.n	800e8b6 <USBH_Get_StringDesc+0x22>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	e01c      	b.n	800e8f4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800e8ba:	7afb      	ldrb	r3, [r7, #11]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e8c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e8ca:	893b      	ldrh	r3, [r7, #8]
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f000 f812 	bl	800e8fc <USBH_GetDescriptor>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d107      	bne.n	800e8f2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e8e8:	893a      	ldrh	r2, [r7, #8]
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 fb8d 	bl	800f00c <USBH_ParseStringDesc>
  }

  return status;
 800e8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	607b      	str	r3, [r7, #4]
 800e906:	460b      	mov	r3, r1
 800e908:	72fb      	strb	r3, [r7, #11]
 800e90a:	4613      	mov	r3, r2
 800e90c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	789b      	ldrb	r3, [r3, #2]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d11c      	bne.n	800e950 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e916:	7afb      	ldrb	r3, [r7, #11]
 800e918:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2206      	movs	r2, #6
 800e926:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	893a      	ldrh	r2, [r7, #8]
 800e92c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e92e:	893b      	ldrh	r3, [r7, #8]
 800e930:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e938:	d104      	bne.n	800e944 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f240 4209 	movw	r2, #1033	@ 0x409
 800e940:	829a      	strh	r2, [r3, #20]
 800e942:	e002      	b.n	800e94a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	8b3a      	ldrh	r2, [r7, #24]
 800e94e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e950:	8b3b      	ldrh	r3, [r7, #24]
 800e952:	461a      	mov	r2, r3
 800e954:	6879      	ldr	r1, [r7, #4]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f000 fba5 	bl	800f0a6 <USBH_CtlReq>
 800e95c:	4603      	mov	r3, r0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	460b      	mov	r3, r1
 800e970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	789b      	ldrb	r3, [r3, #2]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d10f      	bne.n	800e99a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2205      	movs	r2, #5
 800e984:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e986:	78fb      	ldrb	r3, [r7, #3]
 800e988:	b29a      	uxth	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e99a:	2200      	movs	r2, #0
 800e99c:	2100      	movs	r1, #0
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 fb81 	bl	800f0a6 <USBH_CtlReq>
 800e9a4:	4603      	mov	r3, r0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	789b      	ldrb	r3, [r3, #2]
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d10e      	bne.n	800e9e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2209      	movs	r2, #9
 800e9cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	887a      	ldrh	r2, [r7, #2]
 800e9d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fb5e 	bl	800f0a6 <USBH_CtlReq>
 800e9ea:	4603      	mov	r3, r0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3708      	adds	r7, #8
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	789b      	ldrb	r3, [r3, #2]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d10f      	bne.n	800ea28 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2203      	movs	r2, #3
 800ea12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ea14:	78fb      	ldrb	r3, [r7, #3]
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ea28:	2200      	movs	r2, #0
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fb3a 	bl	800f0a6 <USBH_CtlReq>
 800ea32:	4603      	mov	r3, r0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	789b      	ldrb	r3, [r3, #2]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d10f      	bne.n	800ea70 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2202      	movs	r2, #2
 800ea54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ea62:	78fb      	ldrb	r3, [r7, #3]
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ea70:	2200      	movs	r2, #0
 800ea72:	2100      	movs	r1, #0
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fb16 	bl	800f0a6 <USBH_CtlReq>
 800ea7a:	4603      	mov	r3, r0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ea98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	e094      	b.n	800ebd2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	781a      	ldrb	r2, [r3, #0]
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	785a      	ldrb	r2, [r3, #1]
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	3302      	adds	r3, #2
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	3303      	adds	r3, #3
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	021b      	lsls	r3, r3, #8
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	4313      	orrs	r3, r2
 800eacc:	b29a      	uxth	r2, r3
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	791a      	ldrb	r2, [r3, #4]
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	795a      	ldrb	r2, [r3, #5]
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	799a      	ldrb	r2, [r3, #6]
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	79da      	ldrb	r2, [r3, #7]
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d004      	beq.n	800eb06 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d11b      	bne.n	800eb3e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	79db      	ldrb	r3, [r3, #7]
 800eb0a:	2b20      	cmp	r3, #32
 800eb0c:	dc0f      	bgt.n	800eb2e <USBH_ParseDevDesc+0xaa>
 800eb0e:	2b08      	cmp	r3, #8
 800eb10:	db0f      	blt.n	800eb32 <USBH_ParseDevDesc+0xae>
 800eb12:	3b08      	subs	r3, #8
 800eb14:	4a32      	ldr	r2, [pc, #200]	@ (800ebe0 <USBH_ParseDevDesc+0x15c>)
 800eb16:	fa22 f303 	lsr.w	r3, r2, r3
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	bf14      	ite	ne
 800eb22:	2301      	movne	r3, #1
 800eb24:	2300      	moveq	r3, #0
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <USBH_ParseDevDesc+0xb6>
 800eb2c:	e001      	b.n	800eb32 <USBH_ParseDevDesc+0xae>
 800eb2e:	2b40      	cmp	r3, #64	@ 0x40
 800eb30:	d003      	beq.n	800eb3a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2208      	movs	r2, #8
 800eb36:	71da      	strb	r2, [r3, #7]
        break;
 800eb38:	e000      	b.n	800eb3c <USBH_ParseDevDesc+0xb8>
        break;
 800eb3a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800eb3c:	e00e      	b.n	800eb5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eb44:	2b02      	cmp	r3, #2
 800eb46:	d107      	bne.n	800eb58 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	79db      	ldrb	r3, [r3, #7]
 800eb4c:	2b08      	cmp	r3, #8
 800eb4e:	d005      	beq.n	800eb5c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	2208      	movs	r2, #8
 800eb54:	71da      	strb	r2, [r3, #7]
 800eb56:	e001      	b.n	800eb5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800eb5c:	88fb      	ldrh	r3, [r7, #6]
 800eb5e:	2b08      	cmp	r3, #8
 800eb60:	d936      	bls.n	800ebd0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	3308      	adds	r3, #8
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	3309      	adds	r3, #9
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	021b      	lsls	r3, r3, #8
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4313      	orrs	r3, r2
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	330a      	adds	r3, #10
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	330b      	adds	r3, #11
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	021b      	lsls	r3, r3, #8
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	330c      	adds	r3, #12
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	330d      	adds	r3, #13
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	7b9a      	ldrb	r2, [r3, #14]
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	7bda      	ldrb	r2, [r3, #15]
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	7c1a      	ldrb	r2, [r3, #16]
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	7c5a      	ldrb	r2, [r3, #17]
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	371c      	adds	r7, #28
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	01000101 	.word	0x01000101

0800ebe4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08c      	sub	sp, #48	@ 0x30
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	4613      	mov	r3, r2
 800ebf0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ebf8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ec06:	2300      	movs	r3, #0
 800ec08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ec12:	2302      	movs	r3, #2
 800ec14:	e0da      	b.n	800edcc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ec1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b09      	cmp	r3, #9
 800ec20:	d002      	beq.n	800ec28 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ec22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec24:	2209      	movs	r2, #9
 800ec26:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	781a      	ldrb	r2, [r3, #0]
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	785a      	ldrb	r2, [r3, #1]
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	3302      	adds	r3, #2
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	3303      	adds	r3, #3
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	021b      	lsls	r3, r3, #8
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec52:	bf28      	it	cs
 800ec54:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	791a      	ldrb	r2, [r3, #4]
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	795a      	ldrb	r2, [r3, #5]
 800ec6a:	6a3b      	ldr	r3, [r7, #32]
 800ec6c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	799a      	ldrb	r2, [r3, #6]
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	79da      	ldrb	r2, [r3, #7]
 800ec7a:	6a3b      	ldr	r3, [r7, #32]
 800ec7c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	7a1a      	ldrb	r2, [r3, #8]
 800ec82:	6a3b      	ldr	r3, [r7, #32]
 800ec84:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ec86:	88fb      	ldrh	r3, [r7, #6]
 800ec88:	2b09      	cmp	r3, #9
 800ec8a:	f240 809d 	bls.w	800edc8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800ec8e:	2309      	movs	r3, #9
 800ec90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ec96:	e081      	b.n	800ed9c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ec98:	f107 0316 	add.w	r3, r7, #22
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eca0:	f000 f9e7 	bl	800f072 <USBH_GetNextDesc>
 800eca4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800eca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca8:	785b      	ldrb	r3, [r3, #1]
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d176      	bne.n	800ed9c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ecae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2b09      	cmp	r3, #9
 800ecb4:	d002      	beq.n	800ecbc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ecb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb8:	2209      	movs	r2, #9
 800ecba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ecbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecc0:	221a      	movs	r2, #26
 800ecc2:	fb02 f303 	mul.w	r3, r2, r3
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	6a3a      	ldr	r2, [r7, #32]
 800ecca:	4413      	add	r3, r2
 800eccc:	3302      	adds	r3, #2
 800ecce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ecd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ecd2:	69f8      	ldr	r0, [r7, #28]
 800ecd4:	f000 f87e 	bl	800edd4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ecde:	2300      	movs	r3, #0
 800ece0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ece2:	e043      	b.n	800ed6c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ece4:	f107 0316 	add.w	r3, r7, #22
 800ece8:	4619      	mov	r1, r3
 800ecea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecec:	f000 f9c1 	bl	800f072 <USBH_GetNextDesc>
 800ecf0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ecf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf4:	785b      	ldrb	r3, [r3, #1]
 800ecf6:	2b05      	cmp	r3, #5
 800ecf8:	d138      	bne.n	800ed6c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	795b      	ldrb	r3, [r3, #5]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d113      	bne.n	800ed2a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d003      	beq.n	800ed12 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	799b      	ldrb	r3, [r3, #6]
 800ed0e:	2b03      	cmp	r3, #3
 800ed10:	d10b      	bne.n	800ed2a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	79db      	ldrb	r3, [r3, #7]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10b      	bne.n	800ed32 <USBH_ParseCfgDesc+0x14e>
 800ed1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	2b09      	cmp	r3, #9
 800ed20:	d007      	beq.n	800ed32 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ed22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed24:	2209      	movs	r2, #9
 800ed26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ed28:	e003      	b.n	800ed32 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ed2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2c:	2207      	movs	r2, #7
 800ed2e:	701a      	strb	r2, [r3, #0]
 800ed30:	e000      	b.n	800ed34 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ed32:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ed3c:	3201      	adds	r2, #1
 800ed3e:	00d2      	lsls	r2, r2, #3
 800ed40:	211a      	movs	r1, #26
 800ed42:	fb01 f303 	mul.w	r3, r1, r3
 800ed46:	4413      	add	r3, r2
 800ed48:	3308      	adds	r3, #8
 800ed4a:	6a3a      	ldr	r2, [r7, #32]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	3304      	adds	r3, #4
 800ed50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ed52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed54:	69b9      	ldr	r1, [r7, #24]
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f000 f870 	bl	800ee3c <USBH_ParseEPDesc>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ed62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed66:	3301      	adds	r3, #1
 800ed68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	791b      	ldrb	r3, [r3, #4]
 800ed70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d204      	bcs.n	800ed82 <USBH_ParseCfgDesc+0x19e>
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	885a      	ldrh	r2, [r3, #2]
 800ed7c:	8afb      	ldrh	r3, [r7, #22]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d8b0      	bhi.n	800ece4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	791b      	ldrb	r3, [r3, #4]
 800ed86:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d201      	bcs.n	800ed92 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e01c      	b.n	800edcc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800ed92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed96:	3301      	adds	r3, #1
 800ed98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ed9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d805      	bhi.n	800edb0 <USBH_ParseCfgDesc+0x1cc>
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	885a      	ldrh	r2, [r3, #2]
 800eda8:	8afb      	ldrh	r3, [r7, #22]
 800edaa:	429a      	cmp	r2, r3
 800edac:	f63f af74 	bhi.w	800ec98 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	791b      	ldrb	r3, [r3, #4]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	bf28      	it	cs
 800edb8:	2302      	movcs	r3, #2
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d201      	bcs.n	800edc8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e001      	b.n	800edcc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800edc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3730      	adds	r7, #48	@ 0x30
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	781a      	ldrb	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	785a      	ldrb	r2, [r3, #1]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	789a      	ldrb	r2, [r3, #2]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	78da      	ldrb	r2, [r3, #3]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	3304      	adds	r3, #4
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	bf28      	it	cs
 800ee08:	2302      	movcs	r3, #2
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	795a      	ldrb	r2, [r3, #5]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	799a      	ldrb	r2, [r3, #6]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	79da      	ldrb	r2, [r3, #7]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	7a1a      	ldrb	r2, [r3, #8]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	721a      	strb	r2, [r3, #8]
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b087      	sub	sp, #28
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	781a      	ldrb	r2, [r3, #0]
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	785a      	ldrb	r2, [r3, #1]
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	789a      	ldrb	r2, [r3, #2]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	78da      	ldrb	r2, [r3, #3]
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	3304      	adds	r3, #4
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3305      	adds	r3, #5
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	021b      	lsls	r3, r3, #8
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	799a      	ldrb	r2, [r3, #6]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	889b      	ldrh	r3, [r3, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d009      	beq.n	800eeaa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ee9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee9e:	d804      	bhi.n	800eeaa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800eea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eea8:	d901      	bls.n	800eeae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d136      	bne.n	800ef26 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	78db      	ldrb	r3, [r3, #3]
 800eebc:	f003 0303 	and.w	r3, r3, #3
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d108      	bne.n	800eed6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	889b      	ldrh	r3, [r3, #4]
 800eec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eecc:	f240 8097 	bls.w	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eed0:	2303      	movs	r3, #3
 800eed2:	75fb      	strb	r3, [r7, #23]
 800eed4:	e093      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	78db      	ldrb	r3, [r3, #3]
 800eeda:	f003 0303 	and.w	r3, r3, #3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d107      	bne.n	800eef2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	889b      	ldrh	r3, [r3, #4]
 800eee6:	2b40      	cmp	r3, #64	@ 0x40
 800eee8:	f240 8089 	bls.w	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eeec:	2303      	movs	r3, #3
 800eeee:	75fb      	strb	r3, [r7, #23]
 800eef0:	e085      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	78db      	ldrb	r3, [r3, #3]
 800eef6:	f003 0303 	and.w	r3, r3, #3
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d005      	beq.n	800ef0a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	78db      	ldrb	r3, [r3, #3]
 800ef02:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d10a      	bne.n	800ef20 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	799b      	ldrb	r3, [r3, #6]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <USBH_ParseEPDesc+0xde>
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	799b      	ldrb	r3, [r3, #6]
 800ef16:	2b10      	cmp	r3, #16
 800ef18:	d970      	bls.n	800effc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800ef1a:	2303      	movs	r3, #3
 800ef1c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ef1e:	e06d      	b.n	800effc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ef20:	2303      	movs	r3, #3
 800ef22:	75fb      	strb	r3, [r7, #23]
 800ef24:	e06b      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d13c      	bne.n	800efaa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	78db      	ldrb	r3, [r3, #3]
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d005      	beq.n	800ef48 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	78db      	ldrb	r3, [r3, #3]
 800ef40:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d106      	bne.n	800ef56 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	889b      	ldrh	r3, [r3, #4]
 800ef4c:	2b40      	cmp	r3, #64	@ 0x40
 800ef4e:	d956      	bls.n	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ef50:	2303      	movs	r3, #3
 800ef52:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ef54:	e053      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	78db      	ldrb	r3, [r3, #3]
 800ef5a:	f003 0303 	and.w	r3, r3, #3
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d10e      	bne.n	800ef80 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	799b      	ldrb	r3, [r3, #6]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d007      	beq.n	800ef7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ef6e:	2b10      	cmp	r3, #16
 800ef70:	d803      	bhi.n	800ef7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ef76:	2b40      	cmp	r3, #64	@ 0x40
 800ef78:	d941      	bls.n	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	75fb      	strb	r3, [r7, #23]
 800ef7e:	e03e      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	78db      	ldrb	r3, [r3, #3]
 800ef84:	f003 0303 	and.w	r3, r3, #3
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d10b      	bne.n	800efa4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	799b      	ldrb	r3, [r3, #6]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <USBH_ParseEPDesc+0x162>
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	889b      	ldrh	r3, [r3, #4]
 800ef98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef9c:	d32f      	bcc.n	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	75fb      	strb	r3, [r7, #23]
 800efa2:	e02c      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800efa4:	2303      	movs	r3, #3
 800efa6:	75fb      	strb	r3, [r7, #23]
 800efa8:	e029      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d120      	bne.n	800eff6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	78db      	ldrb	r3, [r3, #3]
 800efb8:	f003 0303 	and.w	r3, r3, #3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d106      	bne.n	800efce <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	889b      	ldrh	r3, [r3, #4]
 800efc4:	2b08      	cmp	r3, #8
 800efc6:	d01a      	beq.n	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800efc8:	2303      	movs	r3, #3
 800efca:	75fb      	strb	r3, [r7, #23]
 800efcc:	e017      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	78db      	ldrb	r3, [r3, #3]
 800efd2:	f003 0303 	and.w	r3, r3, #3
 800efd6:	2b03      	cmp	r3, #3
 800efd8:	d10a      	bne.n	800eff0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	799b      	ldrb	r3, [r3, #6]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d003      	beq.n	800efea <USBH_ParseEPDesc+0x1ae>
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	889b      	ldrh	r3, [r3, #4]
 800efe6:	2b08      	cmp	r3, #8
 800efe8:	d909      	bls.n	800effe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800efea:	2303      	movs	r3, #3
 800efec:	75fb      	strb	r3, [r7, #23]
 800efee:	e006      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eff0:	2303      	movs	r3, #3
 800eff2:	75fb      	strb	r3, [r7, #23]
 800eff4:	e003      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800eff6:	2303      	movs	r3, #3
 800eff8:	75fb      	strb	r3, [r7, #23]
 800effa:	e000      	b.n	800effe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800effc:	bf00      	nop
  }

  return status;
 800effe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f000:	4618      	mov	r0, r3
 800f002:	371c      	adds	r7, #28
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b087      	sub	sp, #28
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	4613      	mov	r3, r2
 800f018:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3301      	adds	r3, #1
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b03      	cmp	r3, #3
 800f022:	d120      	bne.n	800f066 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	1e9a      	subs	r2, r3, #2
 800f02a:	88fb      	ldrh	r3, [r7, #6]
 800f02c:	4293      	cmp	r3, r2
 800f02e:	bf28      	it	cs
 800f030:	4613      	movcs	r3, r2
 800f032:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	3302      	adds	r3, #2
 800f038:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f03a:	2300      	movs	r3, #0
 800f03c:	82fb      	strh	r3, [r7, #22]
 800f03e:	e00b      	b.n	800f058 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f040:	8afb      	ldrh	r3, [r7, #22]
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	4413      	add	r3, r2
 800f046:	781a      	ldrb	r2, [r3, #0]
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	3301      	adds	r3, #1
 800f050:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f052:	8afb      	ldrh	r3, [r7, #22]
 800f054:	3302      	adds	r3, #2
 800f056:	82fb      	strh	r3, [r7, #22]
 800f058:	8afa      	ldrh	r2, [r7, #22]
 800f05a:	8abb      	ldrh	r3, [r7, #20]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d3ef      	bcc.n	800f040 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2200      	movs	r2, #0
 800f064:	701a      	strb	r2, [r3, #0]
  }
}
 800f066:	bf00      	nop
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f072:	b480      	push	{r7}
 800f074:	b085      	sub	sp, #20
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
 800f07a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	881b      	ldrh	r3, [r3, #0]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	7812      	ldrb	r2, [r2, #0]
 800f084:	4413      	add	r3, r2
 800f086:	b29a      	uxth	r2, r3
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4413      	add	r3, r2
 800f096:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f098:	68fb      	ldr	r3, [r7, #12]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b086      	sub	sp, #24
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	60f8      	str	r0, [r7, #12]
 800f0ae:	60b9      	str	r1, [r7, #8]
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	789b      	ldrb	r3, [r3, #2]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d002      	beq.n	800f0c6 <USBH_CtlReq+0x20>
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d00f      	beq.n	800f0e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f0c4:	e027      	b.n	800f116 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	68ba      	ldr	r2, [r7, #8]
 800f0ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	88fa      	ldrh	r2, [r7, #6]
 800f0d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2202      	movs	r2, #2
 800f0dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800f0e2:	e018      	b.n	800f116 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f000 f81b 	bl	800f120 <USBH_HandleControl>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d002      	beq.n	800f0fa <USBH_CtlReq+0x54>
 800f0f4:	7dfb      	ldrb	r3, [r7, #23]
 800f0f6:	2b03      	cmp	r3, #3
 800f0f8:	d106      	bne.n	800f108 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2200      	movs	r2, #0
 800f104:	761a      	strb	r2, [r3, #24]
      break;
 800f106:	e005      	b.n	800f114 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f108:	7dfb      	ldrb	r3, [r7, #23]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d102      	bne.n	800f114 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2201      	movs	r2, #1
 800f112:	709a      	strb	r2, [r3, #2]
      break;
 800f114:	bf00      	nop
  }
  return status;
 800f116:	7dfb      	ldrb	r3, [r7, #23]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af02      	add	r7, sp, #8
 800f126:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f128:	2301      	movs	r3, #1
 800f12a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7e1b      	ldrb	r3, [r3, #24]
 800f134:	3b01      	subs	r3, #1
 800f136:	2b0a      	cmp	r3, #10
 800f138:	f200 8156 	bhi.w	800f3e8 <USBH_HandleControl+0x2c8>
 800f13c:	a201      	add	r2, pc, #4	@ (adr r2, 800f144 <USBH_HandleControl+0x24>)
 800f13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f142:	bf00      	nop
 800f144:	0800f171 	.word	0x0800f171
 800f148:	0800f18b 	.word	0x0800f18b
 800f14c:	0800f1f5 	.word	0x0800f1f5
 800f150:	0800f21b 	.word	0x0800f21b
 800f154:	0800f253 	.word	0x0800f253
 800f158:	0800f27d 	.word	0x0800f27d
 800f15c:	0800f2cf 	.word	0x0800f2cf
 800f160:	0800f2f1 	.word	0x0800f2f1
 800f164:	0800f32d 	.word	0x0800f32d
 800f168:	0800f353 	.word	0x0800f353
 800f16c:	0800f391 	.word	0x0800f391
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f103 0110 	add.w	r1, r3, #16
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	795b      	ldrb	r3, [r3, #5]
 800f17a:	461a      	mov	r2, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f943 	bl	800f408 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2202      	movs	r2, #2
 800f186:	761a      	strb	r2, [r3, #24]
      break;
 800f188:	e139      	b.n	800f3fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	795b      	ldrb	r3, [r3, #5]
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f003 fd51 	bl	8012c38 <USBH_LL_GetURBState>
 800f196:	4603      	mov	r3, r0
 800f198:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f19a:	7bbb      	ldrb	r3, [r7, #14]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d11e      	bne.n	800f1de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	7c1b      	ldrb	r3, [r3, #16]
 800f1a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f1a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	8adb      	ldrh	r3, [r3, #22]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00a      	beq.n	800f1c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f1b2:	7b7b      	ldrb	r3, [r7, #13]
 800f1b4:	2b80      	cmp	r3, #128	@ 0x80
 800f1b6:	d103      	bne.n	800f1c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2203      	movs	r2, #3
 800f1bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f1be:	e115      	b.n	800f3ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2205      	movs	r2, #5
 800f1c4:	761a      	strb	r2, [r3, #24]
      break;
 800f1c6:	e111      	b.n	800f3ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f1c8:	7b7b      	ldrb	r3, [r7, #13]
 800f1ca:	2b80      	cmp	r3, #128	@ 0x80
 800f1cc:	d103      	bne.n	800f1d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2209      	movs	r2, #9
 800f1d2:	761a      	strb	r2, [r3, #24]
      break;
 800f1d4:	e10a      	b.n	800f3ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2207      	movs	r2, #7
 800f1da:	761a      	strb	r2, [r3, #24]
      break;
 800f1dc:	e106      	b.n	800f3ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
 800f1e0:	2b04      	cmp	r3, #4
 800f1e2:	d003      	beq.n	800f1ec <USBH_HandleControl+0xcc>
 800f1e4:	7bbb      	ldrb	r3, [r7, #14]
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	f040 8100 	bne.w	800f3ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	220b      	movs	r2, #11
 800f1f0:	761a      	strb	r2, [r3, #24]
      break;
 800f1f2:	e0fb      	b.n	800f3ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6899      	ldr	r1, [r3, #8]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	899a      	ldrh	r2, [r3, #12]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	791b      	ldrb	r3, [r3, #4]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 f93a 	bl	800f486 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2204      	movs	r2, #4
 800f216:	761a      	strb	r2, [r3, #24]
      break;
 800f218:	e0f1      	b.n	800f3fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	791b      	ldrb	r3, [r3, #4]
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f003 fd09 	bl	8012c38 <USBH_LL_GetURBState>
 800f226:	4603      	mov	r3, r0
 800f228:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f22a:	7bbb      	ldrb	r3, [r7, #14]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d102      	bne.n	800f236 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2209      	movs	r2, #9
 800f234:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	2b05      	cmp	r3, #5
 800f23a:	d102      	bne.n	800f242 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f23c:	2303      	movs	r3, #3
 800f23e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f240:	e0d6      	b.n	800f3f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f242:	7bbb      	ldrb	r3, [r7, #14]
 800f244:	2b04      	cmp	r3, #4
 800f246:	f040 80d3 	bne.w	800f3f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	220b      	movs	r2, #11
 800f24e:	761a      	strb	r2, [r3, #24]
      break;
 800f250:	e0ce      	b.n	800f3f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6899      	ldr	r1, [r3, #8]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	899a      	ldrh	r2, [r3, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	795b      	ldrb	r3, [r3, #5]
 800f25e:	2001      	movs	r0, #1
 800f260:	9000      	str	r0, [sp, #0]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f8ea 	bl	800f43c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2206      	movs	r2, #6
 800f278:	761a      	strb	r2, [r3, #24]
      break;
 800f27a:	e0c0      	b.n	800f3fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	795b      	ldrb	r3, [r3, #5]
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f003 fcd8 	bl	8012c38 <USBH_LL_GetURBState>
 800f288:	4603      	mov	r3, r0
 800f28a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f28c:	7bbb      	ldrb	r3, [r7, #14]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d103      	bne.n	800f29a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2207      	movs	r2, #7
 800f296:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f298:	e0ac      	b.n	800f3f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	2b05      	cmp	r3, #5
 800f29e:	d105      	bne.n	800f2ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	220c      	movs	r2, #12
 800f2a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f2a6:	2303      	movs	r3, #3
 800f2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800f2aa:	e0a3      	b.n	800f3f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f2ac:	7bbb      	ldrb	r3, [r7, #14]
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d103      	bne.n	800f2ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2205      	movs	r2, #5
 800f2b6:	761a      	strb	r2, [r3, #24]
      break;
 800f2b8:	e09c      	b.n	800f3f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
 800f2bc:	2b04      	cmp	r3, #4
 800f2be:	f040 8099 	bne.w	800f3f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	220b      	movs	r2, #11
 800f2c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f2cc:	e092      	b.n	800f3f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	791b      	ldrb	r3, [r3, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 f8d5 	bl	800f486 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2208      	movs	r2, #8
 800f2ec:	761a      	strb	r2, [r3, #24]

      break;
 800f2ee:	e086      	b.n	800f3fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	791b      	ldrb	r3, [r3, #4]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f003 fc9e 	bl	8012c38 <USBH_LL_GetURBState>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d105      	bne.n	800f312 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	220d      	movs	r2, #13
 800f30a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f30c:	2300      	movs	r3, #0
 800f30e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f310:	e072      	b.n	800f3f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f312:	7bbb      	ldrb	r3, [r7, #14]
 800f314:	2b04      	cmp	r3, #4
 800f316:	d103      	bne.n	800f320 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	220b      	movs	r2, #11
 800f31c:	761a      	strb	r2, [r3, #24]
      break;
 800f31e:	e06b      	b.n	800f3f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f320:	7bbb      	ldrb	r3, [r7, #14]
 800f322:	2b05      	cmp	r3, #5
 800f324:	d168      	bne.n	800f3f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f326:	2303      	movs	r3, #3
 800f328:	73fb      	strb	r3, [r7, #15]
      break;
 800f32a:	e065      	b.n	800f3f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	795b      	ldrb	r3, [r3, #5]
 800f330:	2201      	movs	r2, #1
 800f332:	9200      	str	r2, [sp, #0]
 800f334:	2200      	movs	r2, #0
 800f336:	2100      	movs	r1, #0
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f87f 	bl	800f43c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f344:	b29a      	uxth	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	220a      	movs	r2, #10
 800f34e:	761a      	strb	r2, [r3, #24]
      break;
 800f350:	e055      	b.n	800f3fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	795b      	ldrb	r3, [r3, #5]
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f003 fc6d 	bl	8012c38 <USBH_LL_GetURBState>
 800f35e:	4603      	mov	r3, r0
 800f360:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f362:	7bbb      	ldrb	r3, [r7, #14]
 800f364:	2b01      	cmp	r3, #1
 800f366:	d105      	bne.n	800f374 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f368:	2300      	movs	r3, #0
 800f36a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	220d      	movs	r2, #13
 800f370:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f372:	e043      	b.n	800f3fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f374:	7bbb      	ldrb	r3, [r7, #14]
 800f376:	2b02      	cmp	r3, #2
 800f378:	d103      	bne.n	800f382 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2209      	movs	r2, #9
 800f37e:	761a      	strb	r2, [r3, #24]
      break;
 800f380:	e03c      	b.n	800f3fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	2b04      	cmp	r3, #4
 800f386:	d139      	bne.n	800f3fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	220b      	movs	r2, #11
 800f38c:	761a      	strb	r2, [r3, #24]
      break;
 800f38e:	e035      	b.n	800f3fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	7e5b      	ldrb	r3, [r3, #25]
 800f394:	3301      	adds	r3, #1
 800f396:	b2da      	uxtb	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	765a      	strb	r2, [r3, #25]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	7e5b      	ldrb	r3, [r3, #25]
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d806      	bhi.n	800f3b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f3b0:	e025      	b.n	800f3fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f3b8:	2106      	movs	r1, #6
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	795b      	ldrb	r3, [r3, #5]
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f90c 	bl	800f5e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	791b      	ldrb	r3, [r3, #4]
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 f906 	bl	800f5e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f3e2:	2302      	movs	r3, #2
 800f3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800f3e6:	e00a      	b.n	800f3fe <USBH_HandleControl+0x2de>

    default:
      break;
 800f3e8:	bf00      	nop
 800f3ea:	e008      	b.n	800f3fe <USBH_HandleControl+0x2de>
      break;
 800f3ec:	bf00      	nop
 800f3ee:	e006      	b.n	800f3fe <USBH_HandleControl+0x2de>
      break;
 800f3f0:	bf00      	nop
 800f3f2:	e004      	b.n	800f3fe <USBH_HandleControl+0x2de>
      break;
 800f3f4:	bf00      	nop
 800f3f6:	e002      	b.n	800f3fe <USBH_HandleControl+0x2de>
      break;
 800f3f8:	bf00      	nop
 800f3fa:	e000      	b.n	800f3fe <USBH_HandleControl+0x2de>
      break;
 800f3fc:	bf00      	nop
  }

  return status;
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af04      	add	r7, sp, #16
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	4613      	mov	r3, r2
 800f414:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f416:	79f9      	ldrb	r1, [r7, #7]
 800f418:	2300      	movs	r3, #0
 800f41a:	9303      	str	r3, [sp, #12]
 800f41c:	2308      	movs	r3, #8
 800f41e:	9302      	str	r3, [sp, #8]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	9301      	str	r3, [sp, #4]
 800f424:	2300      	movs	r3, #0
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	2300      	movs	r3, #0
 800f42a:	2200      	movs	r2, #0
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f003 fbd2 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	3710      	adds	r7, #16
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af04      	add	r7, sp, #16
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	4611      	mov	r1, r2
 800f448:	461a      	mov	r2, r3
 800f44a:	460b      	mov	r3, r1
 800f44c:	80fb      	strh	r3, [r7, #6]
 800f44e:	4613      	mov	r3, r2
 800f450:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f45c:	2300      	movs	r3, #0
 800f45e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f460:	7979      	ldrb	r1, [r7, #5]
 800f462:	7e3b      	ldrb	r3, [r7, #24]
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	88fb      	ldrh	r3, [r7, #6]
 800f468:	9302      	str	r3, [sp, #8]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	2301      	movs	r3, #1
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	2300      	movs	r3, #0
 800f474:	2200      	movs	r2, #0
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f003 fbad 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}

0800f486 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f486:	b580      	push	{r7, lr}
 800f488:	b088      	sub	sp, #32
 800f48a:	af04      	add	r7, sp, #16
 800f48c:	60f8      	str	r0, [r7, #12]
 800f48e:	60b9      	str	r1, [r7, #8]
 800f490:	4611      	mov	r1, r2
 800f492:	461a      	mov	r2, r3
 800f494:	460b      	mov	r3, r1
 800f496:	80fb      	strh	r3, [r7, #6]
 800f498:	4613      	mov	r3, r2
 800f49a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f49c:	7979      	ldrb	r1, [r7, #5]
 800f49e:	2300      	movs	r3, #0
 800f4a0:	9303      	str	r3, [sp, #12]
 800f4a2:	88fb      	ldrh	r3, [r7, #6]
 800f4a4:	9302      	str	r3, [sp, #8]
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	9301      	str	r3, [sp, #4]
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f003 fb8f 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f4b8:	2300      	movs	r3, #0

}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b088      	sub	sp, #32
 800f4c6:	af04      	add	r7, sp, #16
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	80fb      	strh	r3, [r7, #6]
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f4e6:	7979      	ldrb	r1, [r7, #5]
 800f4e8:	7e3b      	ldrb	r3, [r7, #24]
 800f4ea:	9303      	str	r3, [sp, #12]
 800f4ec:	88fb      	ldrh	r3, [r7, #6]
 800f4ee:	9302      	str	r3, [sp, #8]
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f003 fb6a 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3710      	adds	r7, #16
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af04      	add	r7, sp, #16
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	4611      	mov	r1, r2
 800f518:	461a      	mov	r2, r3
 800f51a:	460b      	mov	r3, r1
 800f51c:	80fb      	strh	r3, [r7, #6]
 800f51e:	4613      	mov	r3, r2
 800f520:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f522:	7979      	ldrb	r1, [r7, #5]
 800f524:	2300      	movs	r3, #0
 800f526:	9303      	str	r3, [sp, #12]
 800f528:	88fb      	ldrh	r3, [r7, #6]
 800f52a:	9302      	str	r3, [sp, #8]
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	9301      	str	r3, [sp, #4]
 800f530:	2301      	movs	r3, #1
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	2302      	movs	r3, #2
 800f536:	2201      	movs	r2, #1
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f003 fb4c 	bl	8012bd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af04      	add	r7, sp, #16
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	4608      	mov	r0, r1
 800f552:	4611      	mov	r1, r2
 800f554:	461a      	mov	r2, r3
 800f556:	4603      	mov	r3, r0
 800f558:	70fb      	strb	r3, [r7, #3]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70bb      	strb	r3, [r7, #2]
 800f55e:	4613      	mov	r3, r2
 800f560:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f562:	7878      	ldrb	r0, [r7, #1]
 800f564:	78ba      	ldrb	r2, [r7, #2]
 800f566:	78f9      	ldrb	r1, [r7, #3]
 800f568:	8b3b      	ldrh	r3, [r7, #24]
 800f56a:	9302      	str	r3, [sp, #8]
 800f56c:	7d3b      	ldrb	r3, [r7, #20]
 800f56e:	9301      	str	r3, [sp, #4]
 800f570:	7c3b      	ldrb	r3, [r7, #16]
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	4603      	mov	r3, r0
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f003 fadf 	bl	8012b3a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	460b      	mov	r3, r1
 800f590:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f592:	78fb      	ldrb	r3, [r7, #3]
 800f594:	4619      	mov	r1, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f003 fafe 	bl	8012b98 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b084      	sub	sp, #16
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 f836 	bl	800f624 <USBH_GetFreePipe>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f5bc:	89fb      	ldrh	r3, [r7, #14]
 800f5be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d00a      	beq.n	800f5dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f5c6:	78fa      	ldrb	r2, [r7, #3]
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	f003 030f 	and.w	r3, r3, #15
 800f5ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	33e0      	adds	r3, #224	@ 0xe0
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	440b      	add	r3, r1
 800f5da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f5dc:	89fb      	ldrh	r3, [r7, #14]
 800f5de:	b2db      	uxtb	r3, r3
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f5f4:	78fb      	ldrb	r3, [r7, #3]
 800f5f6:	2b0f      	cmp	r3, #15
 800f5f8:	d80d      	bhi.n	800f616 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f5fa:	78fb      	ldrb	r3, [r7, #3]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	33e0      	adds	r3, #224	@ 0xe0
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4413      	add	r3, r2
 800f604:	685a      	ldr	r2, [r3, #4]
 800f606:	78fb      	ldrb	r3, [r7, #3]
 800f608:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f60c:	6879      	ldr	r1, [r7, #4]
 800f60e:	33e0      	adds	r3, #224	@ 0xe0
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	440b      	add	r3, r1
 800f614:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f630:	2300      	movs	r3, #0
 800f632:	73fb      	strb	r3, [r7, #15]
 800f634:	e00f      	b.n	800f656 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f636:	7bfb      	ldrb	r3, [r7, #15]
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	33e0      	adds	r3, #224	@ 0xe0
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f646:	2b00      	cmp	r3, #0
 800f648:	d102      	bne.n	800f650 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	e007      	b.n	800f660 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	3301      	adds	r3, #1
 800f654:	73fb      	strb	r3, [r7, #15]
 800f656:	7bfb      	ldrb	r3, [r7, #15]
 800f658:	2b0f      	cmp	r3, #15
 800f65a:	d9ec      	bls.n	800f636 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f65c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800f660:	4618      	mov	r0, r3
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	4603      	mov	r3, r0
 800f674:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f676:	79fb      	ldrb	r3, [r7, #7]
 800f678:	4a08      	ldr	r2, [pc, #32]	@ (800f69c <disk_status+0x30>)
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	4413      	add	r3, r2
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	79fa      	ldrb	r2, [r7, #7]
 800f684:	4905      	ldr	r1, [pc, #20]	@ (800f69c <disk_status+0x30>)
 800f686:	440a      	add	r2, r1
 800f688:	7a12      	ldrb	r2, [r2, #8]
 800f68a:	4610      	mov	r0, r2
 800f68c:	4798      	blx	r3
 800f68e:	4603      	mov	r3, r0
 800f690:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f692:	7bfb      	ldrb	r3, [r7, #15]
}
 800f694:	4618      	mov	r0, r3
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	20000840 	.word	0x20000840

0800f6a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f6ae:	79fb      	ldrb	r3, [r7, #7]
 800f6b0:	4a0e      	ldr	r2, [pc, #56]	@ (800f6ec <disk_initialize+0x4c>)
 800f6b2:	5cd3      	ldrb	r3, [r2, r3]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d114      	bne.n	800f6e2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f6b8:	79fb      	ldrb	r3, [r7, #7]
 800f6ba:	4a0c      	ldr	r2, [pc, #48]	@ (800f6ec <disk_initialize+0x4c>)
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4413      	add	r3, r2
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	79fa      	ldrb	r2, [r7, #7]
 800f6c6:	4909      	ldr	r1, [pc, #36]	@ (800f6ec <disk_initialize+0x4c>)
 800f6c8:	440a      	add	r2, r1
 800f6ca:	7a12      	ldrb	r2, [r2, #8]
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	4798      	blx	r3
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f6d4:	7bfb      	ldrb	r3, [r7, #15]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d103      	bne.n	800f6e2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f6da:	79fb      	ldrb	r3, [r7, #7]
 800f6dc:	4a03      	ldr	r2, [pc, #12]	@ (800f6ec <disk_initialize+0x4c>)
 800f6de:	2101      	movs	r1, #1
 800f6e0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20000840 	.word	0x20000840

0800f6f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f6f0:	b590      	push	{r4, r7, lr}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60b9      	str	r1, [r7, #8]
 800f6f8:	607a      	str	r2, [r7, #4]
 800f6fa:	603b      	str	r3, [r7, #0]
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	4a0a      	ldr	r2, [pc, #40]	@ (800f72c <disk_read+0x3c>)
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	689c      	ldr	r4, [r3, #8]
 800f70c:	7bfb      	ldrb	r3, [r7, #15]
 800f70e:	4a07      	ldr	r2, [pc, #28]	@ (800f72c <disk_read+0x3c>)
 800f710:	4413      	add	r3, r2
 800f712:	7a18      	ldrb	r0, [r3, #8]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	47a0      	blx	r4
 800f71c:	4603      	mov	r3, r0
 800f71e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f720:	7dfb      	ldrb	r3, [r7, #23]
}
 800f722:	4618      	mov	r0, r3
 800f724:	371c      	adds	r7, #28
 800f726:	46bd      	mov	sp, r7
 800f728:	bd90      	pop	{r4, r7, pc}
 800f72a:	bf00      	nop
 800f72c:	20000840 	.word	0x20000840

0800f730 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f730:	b590      	push	{r4, r7, lr}
 800f732:	b087      	sub	sp, #28
 800f734:	af00      	add	r7, sp, #0
 800f736:	60b9      	str	r1, [r7, #8]
 800f738:	607a      	str	r2, [r7, #4]
 800f73a:	603b      	str	r3, [r7, #0]
 800f73c:	4603      	mov	r3, r0
 800f73e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f740:	7bfb      	ldrb	r3, [r7, #15]
 800f742:	4a0a      	ldr	r2, [pc, #40]	@ (800f76c <disk_write+0x3c>)
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	4413      	add	r3, r2
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	68dc      	ldr	r4, [r3, #12]
 800f74c:	7bfb      	ldrb	r3, [r7, #15]
 800f74e:	4a07      	ldr	r2, [pc, #28]	@ (800f76c <disk_write+0x3c>)
 800f750:	4413      	add	r3, r2
 800f752:	7a18      	ldrb	r0, [r3, #8]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	68b9      	ldr	r1, [r7, #8]
 800f75a:	47a0      	blx	r4
 800f75c:	4603      	mov	r3, r0
 800f75e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f760:	7dfb      	ldrb	r3, [r7, #23]
}
 800f762:	4618      	mov	r0, r3
 800f764:	371c      	adds	r7, #28
 800f766:	46bd      	mov	sp, r7
 800f768:	bd90      	pop	{r4, r7, pc}
 800f76a:	bf00      	nop
 800f76c:	20000840 	.word	0x20000840

0800f770 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	603a      	str	r2, [r7, #0]
 800f77a:	71fb      	strb	r3, [r7, #7]
 800f77c:	460b      	mov	r3, r1
 800f77e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f780:	79fb      	ldrb	r3, [r7, #7]
 800f782:	4a09      	ldr	r2, [pc, #36]	@ (800f7a8 <disk_ioctl+0x38>)
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	4413      	add	r3, r2
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	691b      	ldr	r3, [r3, #16]
 800f78c:	79fa      	ldrb	r2, [r7, #7]
 800f78e:	4906      	ldr	r1, [pc, #24]	@ (800f7a8 <disk_ioctl+0x38>)
 800f790:	440a      	add	r2, r1
 800f792:	7a10      	ldrb	r0, [r2, #8]
 800f794:	79b9      	ldrb	r1, [r7, #6]
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	4798      	blx	r3
 800f79a:	4603      	mov	r3, r0
 800f79c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	20000840 	.word	0x20000840

0800f7ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f7bc:	89fb      	ldrh	r3, [r7, #14]
 800f7be:	021b      	lsls	r3, r3, #8
 800f7c0:	b21a      	sxth	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	b21b      	sxth	r3, r3
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	b21b      	sxth	r3, r3
 800f7cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f7ce:	89fb      	ldrh	r3, [r7, #14]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3714      	adds	r7, #20
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	3303      	adds	r3, #3
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	021b      	lsls	r3, r3, #8
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	3202      	adds	r2, #2
 800f7f4:	7812      	ldrb	r2, [r2, #0]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	021b      	lsls	r3, r3, #8
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	3201      	adds	r2, #1
 800f802:	7812      	ldrb	r2, [r2, #0]
 800f804:	4313      	orrs	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	021b      	lsls	r3, r3, #8
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7812      	ldrb	r2, [r2, #0]
 800f810:	4313      	orrs	r3, r2
 800f812:	60fb      	str	r3, [r7, #12]
	return rv;
 800f814:	68fb      	ldr	r3, [r7, #12]
}
 800f816:	4618      	mov	r0, r3
 800f818:	3714      	adds	r7, #20
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr

0800f822 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f822:	b480      	push	{r7}
 800f824:	b083      	sub	sp, #12
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	460b      	mov	r3, r1
 800f82c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	607a      	str	r2, [r7, #4]
 800f834:	887a      	ldrh	r2, [r7, #2]
 800f836:	b2d2      	uxtb	r2, r2
 800f838:	701a      	strb	r2, [r3, #0]
 800f83a:	887b      	ldrh	r3, [r7, #2]
 800f83c:	0a1b      	lsrs	r3, r3, #8
 800f83e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	607a      	str	r2, [r7, #4]
 800f846:	887a      	ldrh	r2, [r7, #2]
 800f848:	b2d2      	uxtb	r2, r2
 800f84a:	701a      	strb	r2, [r3, #0]
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	1c5a      	adds	r2, r3, #1
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	683a      	ldr	r2, [r7, #0]
 800f86a:	b2d2      	uxtb	r2, r2
 800f86c:	701a      	strb	r2, [r3, #0]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	0a1b      	lsrs	r3, r3, #8
 800f872:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	1c5a      	adds	r2, r3, #1
 800f878:	607a      	str	r2, [r7, #4]
 800f87a:	683a      	ldr	r2, [r7, #0]
 800f87c:	b2d2      	uxtb	r2, r2
 800f87e:	701a      	strb	r2, [r3, #0]
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	0a1b      	lsrs	r3, r3, #8
 800f884:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	1c5a      	adds	r2, r3, #1
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	b2d2      	uxtb	r2, r2
 800f890:	701a      	strb	r2, [r3, #0]
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	0a1b      	lsrs	r3, r3, #8
 800f896:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	1c5a      	adds	r2, r3, #1
 800f89c:	607a      	str	r2, [r7, #4]
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	b2d2      	uxtb	r2, r2
 800f8a2:	701a      	strb	r2, [r3, #0]
}
 800f8a4:	bf00      	nop
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8b0:	b480      	push	{r7}
 800f8b2:	b087      	sub	sp, #28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00d      	beq.n	800f8e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f8ca:	693a      	ldr	r2, [r7, #16]
 800f8cc:	1c53      	adds	r3, r2, #1
 800f8ce:	613b      	str	r3, [r7, #16]
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	1c59      	adds	r1, r3, #1
 800f8d4:	6179      	str	r1, [r7, #20]
 800f8d6:	7812      	ldrb	r2, [r2, #0]
 800f8d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	607b      	str	r3, [r7, #4]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1f1      	bne.n	800f8ca <mem_cpy+0x1a>
	}
}
 800f8e6:	bf00      	nop
 800f8e8:	371c      	adds	r7, #28
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f8f2:	b480      	push	{r7}
 800f8f4:	b087      	sub	sp, #28
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	60f8      	str	r0, [r7, #12]
 800f8fa:	60b9      	str	r1, [r7, #8]
 800f8fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	617a      	str	r2, [r7, #20]
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	b2d2      	uxtb	r2, r2
 800f90c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	3b01      	subs	r3, #1
 800f912:	607b      	str	r3, [r7, #4]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1f3      	bne.n	800f902 <mem_set+0x10>
}
 800f91a:	bf00      	nop
 800f91c:	bf00      	nop
 800f91e:	371c      	adds	r7, #28
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f928:	b480      	push	{r7}
 800f92a:	b089      	sub	sp, #36	@ 0x24
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	61fb      	str	r3, [r7, #28]
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f93c:	2300      	movs	r3, #0
 800f93e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	61fa      	str	r2, [r7, #28]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	4619      	mov	r1, r3
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	1c5a      	adds	r2, r3, #1
 800f94e:	61ba      	str	r2, [r7, #24]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	1acb      	subs	r3, r1, r3
 800f954:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	3b01      	subs	r3, #1
 800f95a:	607b      	str	r3, [r7, #4]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <mem_cmp+0x40>
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d0eb      	beq.n	800f940 <mem_cmp+0x18>

	return r;
 800f968:	697b      	ldr	r3, [r7, #20]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3724      	adds	r7, #36	@ 0x24
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr

0800f976 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f976:	b480      	push	{r7}
 800f978:	b083      	sub	sp, #12
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f980:	e002      	b.n	800f988 <chk_chr+0x12>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	3301      	adds	r3, #1
 800f986:	607b      	str	r3, [r7, #4]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d005      	beq.n	800f99c <chk_chr+0x26>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	461a      	mov	r2, r3
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	4293      	cmp	r3, r2
 800f99a:	d1f2      	bne.n	800f982 <chk_chr+0xc>
	return *str;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	781b      	ldrb	r3, [r3, #0]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	60bb      	str	r3, [r7, #8]
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	60fb      	str	r3, [r7, #12]
 800f9be:	e029      	b.n	800fa14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f9c0:	4a27      	ldr	r2, [pc, #156]	@ (800fa60 <chk_lock+0xb4>)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	011b      	lsls	r3, r3, #4
 800f9c6:	4413      	add	r3, r2
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d01d      	beq.n	800fa0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f9ce:	4a24      	ldr	r2, [pc, #144]	@ (800fa60 <chk_lock+0xb4>)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	4413      	add	r3, r2
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d116      	bne.n	800fa0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f9e0:	4a1f      	ldr	r2, [pc, #124]	@ (800fa60 <chk_lock+0xb4>)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	011b      	lsls	r3, r3, #4
 800f9e6:	4413      	add	r3, r2
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d10c      	bne.n	800fa0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f9f4:	4a1a      	ldr	r2, [pc, #104]	@ (800fa60 <chk_lock+0xb4>)
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	011b      	lsls	r3, r3, #4
 800f9fa:	4413      	add	r3, r2
 800f9fc:	3308      	adds	r3, #8
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d102      	bne.n	800fa0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa08:	e007      	b.n	800fa1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	3301      	adds	r3, #1
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d9d2      	bls.n	800f9c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	d109      	bne.n	800fa34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d102      	bne.n	800fa2c <chk_lock+0x80>
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d101      	bne.n	800fa30 <chk_lock+0x84>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e010      	b.n	800fa52 <chk_lock+0xa6>
 800fa30:	2312      	movs	r3, #18
 800fa32:	e00e      	b.n	800fa52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d108      	bne.n	800fa4c <chk_lock+0xa0>
 800fa3a:	4a09      	ldr	r2, [pc, #36]	@ (800fa60 <chk_lock+0xb4>)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	011b      	lsls	r3, r3, #4
 800fa40:	4413      	add	r3, r2
 800fa42:	330c      	adds	r3, #12
 800fa44:	881b      	ldrh	r3, [r3, #0]
 800fa46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa4a:	d101      	bne.n	800fa50 <chk_lock+0xa4>
 800fa4c:	2310      	movs	r3, #16
 800fa4e:	e000      	b.n	800fa52 <chk_lock+0xa6>
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3714      	adds	r7, #20
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	20000820 	.word	0x20000820

0800fa64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	607b      	str	r3, [r7, #4]
 800fa6e:	e002      	b.n	800fa76 <enq_lock+0x12>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	3301      	adds	r3, #1
 800fa74:	607b      	str	r3, [r7, #4]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d806      	bhi.n	800fa8a <enq_lock+0x26>
 800fa7c:	4a09      	ldr	r2, [pc, #36]	@ (800faa4 <enq_lock+0x40>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	011b      	lsls	r3, r3, #4
 800fa82:	4413      	add	r3, r2
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1f2      	bne.n	800fa70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	bf14      	ite	ne
 800fa90:	2301      	movne	r3, #1
 800fa92:	2300      	moveq	r3, #0
 800fa94:	b2db      	uxtb	r3, r3
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	20000820 	.word	0x20000820

0800faa8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fab2:	2300      	movs	r3, #0
 800fab4:	60fb      	str	r3, [r7, #12]
 800fab6:	e01f      	b.n	800faf8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fab8:	4a41      	ldr	r2, [pc, #260]	@ (800fbc0 <inc_lock+0x118>)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	011b      	lsls	r3, r3, #4
 800fabe:	4413      	add	r3, r2
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d113      	bne.n	800faf2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800faca:	4a3d      	ldr	r2, [pc, #244]	@ (800fbc0 <inc_lock+0x118>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	011b      	lsls	r3, r3, #4
 800fad0:	4413      	add	r3, r2
 800fad2:	3304      	adds	r3, #4
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fada:	429a      	cmp	r2, r3
 800fadc:	d109      	bne.n	800faf2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fade:	4a38      	ldr	r2, [pc, #224]	@ (800fbc0 <inc_lock+0x118>)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	011b      	lsls	r3, r3, #4
 800fae4:	4413      	add	r3, r2
 800fae6:	3308      	adds	r3, #8
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800faee:	429a      	cmp	r2, r3
 800faf0:	d006      	beq.n	800fb00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3301      	adds	r3, #1
 800faf6:	60fb      	str	r3, [r7, #12]
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d9dc      	bls.n	800fab8 <inc_lock+0x10>
 800fafe:	e000      	b.n	800fb02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fb00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d132      	bne.n	800fb6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	60fb      	str	r3, [r7, #12]
 800fb0c:	e002      	b.n	800fb14 <inc_lock+0x6c>
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3301      	adds	r3, #1
 800fb12:	60fb      	str	r3, [r7, #12]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d806      	bhi.n	800fb28 <inc_lock+0x80>
 800fb1a:	4a29      	ldr	r2, [pc, #164]	@ (800fbc0 <inc_lock+0x118>)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	011b      	lsls	r3, r3, #4
 800fb20:	4413      	add	r3, r2
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1f2      	bne.n	800fb0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d101      	bne.n	800fb32 <inc_lock+0x8a>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e040      	b.n	800fbb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	4922      	ldr	r1, [pc, #136]	@ (800fbc0 <inc_lock+0x118>)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	011b      	lsls	r3, r3, #4
 800fb3c:	440b      	add	r3, r1
 800fb3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	689a      	ldr	r2, [r3, #8]
 800fb44:	491e      	ldr	r1, [pc, #120]	@ (800fbc0 <inc_lock+0x118>)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	011b      	lsls	r3, r3, #4
 800fb4a:	440b      	add	r3, r1
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	695a      	ldr	r2, [r3, #20]
 800fb54:	491a      	ldr	r1, [pc, #104]	@ (800fbc0 <inc_lock+0x118>)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	011b      	lsls	r3, r3, #4
 800fb5a:	440b      	add	r3, r1
 800fb5c:	3308      	adds	r3, #8
 800fb5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fb60:	4a17      	ldr	r2, [pc, #92]	@ (800fbc0 <inc_lock+0x118>)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	011b      	lsls	r3, r3, #4
 800fb66:	4413      	add	r3, r2
 800fb68:	330c      	adds	r3, #12
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d009      	beq.n	800fb88 <inc_lock+0xe0>
 800fb74:	4a12      	ldr	r2, [pc, #72]	@ (800fbc0 <inc_lock+0x118>)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	011b      	lsls	r3, r3, #4
 800fb7a:	4413      	add	r3, r2
 800fb7c:	330c      	adds	r3, #12
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <inc_lock+0xe0>
 800fb84:	2300      	movs	r3, #0
 800fb86:	e015      	b.n	800fbb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d108      	bne.n	800fba0 <inc_lock+0xf8>
 800fb8e:	4a0c      	ldr	r2, [pc, #48]	@ (800fbc0 <inc_lock+0x118>)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	011b      	lsls	r3, r3, #4
 800fb94:	4413      	add	r3, r2
 800fb96:	330c      	adds	r3, #12
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	e001      	b.n	800fba4 <inc_lock+0xfc>
 800fba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fba4:	4906      	ldr	r1, [pc, #24]	@ (800fbc0 <inc_lock+0x118>)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	011b      	lsls	r3, r3, #4
 800fbaa:	440b      	add	r3, r1
 800fbac:	330c      	adds	r3, #12
 800fbae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	3301      	adds	r3, #1
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr
 800fbc0:	20000820 	.word	0x20000820

0800fbc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	607b      	str	r3, [r7, #4]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d825      	bhi.n	800fc24 <dec_lock+0x60>
		n = Files[i].ctr;
 800fbd8:	4a17      	ldr	r2, [pc, #92]	@ (800fc38 <dec_lock+0x74>)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	011b      	lsls	r3, r3, #4
 800fbde:	4413      	add	r3, r2
 800fbe0:	330c      	adds	r3, #12
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fbe6:	89fb      	ldrh	r3, [r7, #14]
 800fbe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbec:	d101      	bne.n	800fbf2 <dec_lock+0x2e>
 800fbee:	2300      	movs	r3, #0
 800fbf0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fbf2:	89fb      	ldrh	r3, [r7, #14]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d002      	beq.n	800fbfe <dec_lock+0x3a>
 800fbf8:	89fb      	ldrh	r3, [r7, #14]
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fbfe:	4a0e      	ldr	r2, [pc, #56]	@ (800fc38 <dec_lock+0x74>)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	011b      	lsls	r3, r3, #4
 800fc04:	4413      	add	r3, r2
 800fc06:	330c      	adds	r3, #12
 800fc08:	89fa      	ldrh	r2, [r7, #14]
 800fc0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fc0c:	89fb      	ldrh	r3, [r7, #14]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d105      	bne.n	800fc1e <dec_lock+0x5a>
 800fc12:	4a09      	ldr	r2, [pc, #36]	@ (800fc38 <dec_lock+0x74>)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	4413      	add	r3, r2
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	737b      	strb	r3, [r7, #13]
 800fc22:	e001      	b.n	800fc28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fc24:	2302      	movs	r3, #2
 800fc26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fc28:	7b7b      	ldrb	r3, [r7, #13]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	20000820 	.word	0x20000820

0800fc3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fc44:	2300      	movs	r3, #0
 800fc46:	60fb      	str	r3, [r7, #12]
 800fc48:	e010      	b.n	800fc6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fc4a:	4a0d      	ldr	r2, [pc, #52]	@ (800fc80 <clear_lock+0x44>)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	4413      	add	r3, r2
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d105      	bne.n	800fc66 <clear_lock+0x2a>
 800fc5a:	4a09      	ldr	r2, [pc, #36]	@ (800fc80 <clear_lock+0x44>)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	011b      	lsls	r3, r3, #4
 800fc60:	4413      	add	r3, r2
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d9eb      	bls.n	800fc4a <clear_lock+0xe>
	}
}
 800fc72:	bf00      	nop
 800fc74:	bf00      	nop
 800fc76:	3714      	adds	r7, #20
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr
 800fc80:	20000820 	.word	0x20000820

0800fc84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	78db      	ldrb	r3, [r3, #3]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d034      	beq.n	800fd02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7858      	ldrb	r0, [r3, #1]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fca8:	2301      	movs	r3, #1
 800fcaa:	697a      	ldr	r2, [r7, #20]
 800fcac:	f7ff fd40 	bl	800f730 <disk_write>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d002      	beq.n	800fcbc <sync_window+0x38>
			res = FR_DISK_ERR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	73fb      	strb	r3, [r7, #15]
 800fcba:	e022      	b.n	800fd02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	1ad2      	subs	r2, r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d217      	bcs.n	800fd02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	789b      	ldrb	r3, [r3, #2]
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	e010      	b.n	800fcfc <sync_window+0x78>
					wsect += fs->fsize;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	699b      	ldr	r3, [r3, #24]
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	4413      	add	r3, r2
 800fce2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	7858      	ldrb	r0, [r3, #1]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fcee:	2301      	movs	r3, #1
 800fcf0:	697a      	ldr	r2, [r7, #20]
 800fcf2:	f7ff fd1d 	bl	800f730 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	613b      	str	r3, [r7, #16]
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d8eb      	bhi.n	800fcda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3718      	adds	r7, #24
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d01b      	beq.n	800fd5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7ff ffad 	bl	800fc84 <sync_window>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d113      	bne.n	800fd5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	7858      	ldrb	r0, [r3, #1]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd3e:	2301      	movs	r3, #1
 800fd40:	683a      	ldr	r2, [r7, #0]
 800fd42:	f7ff fcd5 	bl	800f6f0 <disk_read>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d004      	beq.n	800fd56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fd52:	2301      	movs	r3, #1
 800fd54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
	...

0800fd68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7ff ff87 	bl	800fc84 <sync_window>
 800fd76:	4603      	mov	r3, r0
 800fd78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd7a:	7bfb      	ldrb	r3, [r7, #15]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d158      	bne.n	800fe32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b03      	cmp	r3, #3
 800fd86:	d148      	bne.n	800fe1a <sync_fs+0xb2>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	791b      	ldrb	r3, [r3, #4]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d144      	bne.n	800fe1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	3330      	adds	r3, #48	@ 0x30
 800fd94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd98:	2100      	movs	r1, #0
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7ff fda9 	bl	800f8f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	3330      	adds	r3, #48	@ 0x30
 800fda4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fda8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7ff fd38 	bl	800f822 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	3330      	adds	r3, #48	@ 0x30
 800fdb6:	4921      	ldr	r1, [pc, #132]	@ (800fe3c <sync_fs+0xd4>)
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fd4d 	bl	800f858 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	3330      	adds	r3, #48	@ 0x30
 800fdc2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fdc6:	491e      	ldr	r1, [pc, #120]	@ (800fe40 <sync_fs+0xd8>)
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff fd45 	bl	800f858 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	3330      	adds	r3, #48	@ 0x30
 800fdd2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	691b      	ldr	r3, [r3, #16]
 800fdda:	4619      	mov	r1, r3
 800fddc:	4610      	mov	r0, r2
 800fdde:	f7ff fd3b 	bl	800f858 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3330      	adds	r3, #48	@ 0x30
 800fde6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	f7ff fd31 	bl	800f858 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	69db      	ldr	r3, [r3, #28]
 800fdfa:	1c5a      	adds	r2, r3, #1
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	7858      	ldrb	r0, [r3, #1]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f7ff fc8e 	bl	800f730 <disk_write>
			fs->fsi_flag = 0;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2200      	movs	r2, #0
 800fe18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	785b      	ldrb	r3, [r3, #1]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	2100      	movs	r1, #0
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7ff fca4 	bl	800f770 <disk_ioctl>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <sync_fs+0xca>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	41615252 	.word	0x41615252
 800fe40:	61417272 	.word	0x61417272

0800fe44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	3b02      	subs	r3, #2
 800fe52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	695b      	ldr	r3, [r3, #20]
 800fe58:	3b02      	subs	r3, #2
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d301      	bcc.n	800fe64 <clust2sect+0x20>
 800fe60:	2300      	movs	r3, #0
 800fe62:	e008      	b.n	800fe76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	895b      	ldrh	r3, [r3, #10]
 800fe68:	461a      	mov	r2, r3
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	fb03 f202 	mul.w	r2, r3, r2
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe74:	4413      	add	r3, r2
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr

0800fe82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b086      	sub	sp, #24
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d904      	bls.n	800fea2 <get_fat+0x20>
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	683a      	ldr	r2, [r7, #0]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d302      	bcc.n	800fea8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fea2:	2301      	movs	r3, #1
 800fea4:	617b      	str	r3, [r7, #20]
 800fea6:	e08e      	b.n	800ffc6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fea8:	f04f 33ff 	mov.w	r3, #4294967295
 800feac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d061      	beq.n	800ff7a <get_fat+0xf8>
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	dc7b      	bgt.n	800ffb2 <get_fat+0x130>
 800feba:	2b01      	cmp	r3, #1
 800febc:	d002      	beq.n	800fec4 <get_fat+0x42>
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d041      	beq.n	800ff46 <get_fat+0xc4>
 800fec2:	e076      	b.n	800ffb2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	60fb      	str	r3, [r7, #12]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	085b      	lsrs	r3, r3, #1
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	4413      	add	r3, r2
 800fed0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	6a1a      	ldr	r2, [r3, #32]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	0a5b      	lsrs	r3, r3, #9
 800feda:	4413      	add	r3, r2
 800fedc:	4619      	mov	r1, r3
 800fede:	6938      	ldr	r0, [r7, #16]
 800fee0:	f7ff ff14 	bl	800fd0c <move_window>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d166      	bne.n	800ffb8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	1c5a      	adds	r2, r3, #1
 800feee:	60fa      	str	r2, [r7, #12]
 800fef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fef4:	693a      	ldr	r2, [r7, #16]
 800fef6:	4413      	add	r3, r2
 800fef8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fefc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	6a1a      	ldr	r2, [r3, #32]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	0a5b      	lsrs	r3, r3, #9
 800ff06:	4413      	add	r3, r2
 800ff08:	4619      	mov	r1, r3
 800ff0a:	6938      	ldr	r0, [r7, #16]
 800ff0c:	f7ff fefe 	bl	800fd0c <move_window>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d152      	bne.n	800ffbc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff1c:	693a      	ldr	r2, [r7, #16]
 800ff1e:	4413      	add	r3, r2
 800ff20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff24:	021b      	lsls	r3, r3, #8
 800ff26:	68ba      	ldr	r2, [r7, #8]
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	f003 0301 	and.w	r3, r3, #1
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <get_fat+0xba>
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	091b      	lsrs	r3, r3, #4
 800ff3a:	e002      	b.n	800ff42 <get_fat+0xc0>
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ff42:	617b      	str	r3, [r7, #20]
			break;
 800ff44:	e03f      	b.n	800ffc6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	6a1a      	ldr	r2, [r3, #32]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	0a1b      	lsrs	r3, r3, #8
 800ff4e:	4413      	add	r3, r2
 800ff50:	4619      	mov	r1, r3
 800ff52:	6938      	ldr	r0, [r7, #16]
 800ff54:	f7ff feda 	bl	800fd0c <move_window>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d130      	bne.n	800ffc0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ff6c:	4413      	add	r3, r2
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7ff fc1c 	bl	800f7ac <ld_word>
 800ff74:	4603      	mov	r3, r0
 800ff76:	617b      	str	r3, [r7, #20]
			break;
 800ff78:	e025      	b.n	800ffc6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	6a1a      	ldr	r2, [r3, #32]
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	09db      	lsrs	r3, r3, #7
 800ff82:	4413      	add	r3, r2
 800ff84:	4619      	mov	r1, r3
 800ff86:	6938      	ldr	r0, [r7, #16]
 800ff88:	f7ff fec0 	bl	800fd0c <move_window>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d118      	bne.n	800ffc4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ffa0:	4413      	add	r3, r2
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fc1a 	bl	800f7dc <ld_dword>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ffae:	617b      	str	r3, [r7, #20]
			break;
 800ffb0:	e009      	b.n	800ffc6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	617b      	str	r3, [r7, #20]
 800ffb6:	e006      	b.n	800ffc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffb8:	bf00      	nop
 800ffba:	e004      	b.n	800ffc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffbc:	bf00      	nop
 800ffbe:	e002      	b.n	800ffc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ffc0:	bf00      	nop
 800ffc2:	e000      	b.n	800ffc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ffc4:	bf00      	nop
		}
	}

	return val;
 800ffc6:	697b      	ldr	r3, [r7, #20]
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3718      	adds	r7, #24
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ffd0:	b590      	push	{r4, r7, lr}
 800ffd2:	b089      	sub	sp, #36	@ 0x24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ffdc:	2302      	movs	r3, #2
 800ffde:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	f240 80d9 	bls.w	801019a <put_fat+0x1ca>
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	695b      	ldr	r3, [r3, #20]
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	f080 80d3 	bcs.w	801019a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	2b03      	cmp	r3, #3
 800fffa:	f000 8096 	beq.w	801012a <put_fat+0x15a>
 800fffe:	2b03      	cmp	r3, #3
 8010000:	f300 80cb 	bgt.w	801019a <put_fat+0x1ca>
 8010004:	2b01      	cmp	r3, #1
 8010006:	d002      	beq.n	801000e <put_fat+0x3e>
 8010008:	2b02      	cmp	r3, #2
 801000a:	d06e      	beq.n	80100ea <put_fat+0x11a>
 801000c:	e0c5      	b.n	801019a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	61bb      	str	r3, [r7, #24]
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	085b      	lsrs	r3, r3, #1
 8010016:	69ba      	ldr	r2, [r7, #24]
 8010018:	4413      	add	r3, r2
 801001a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6a1a      	ldr	r2, [r3, #32]
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	0a5b      	lsrs	r3, r3, #9
 8010024:	4413      	add	r3, r2
 8010026:	4619      	mov	r1, r3
 8010028:	68f8      	ldr	r0, [r7, #12]
 801002a:	f7ff fe6f 	bl	800fd0c <move_window>
 801002e:	4603      	mov	r3, r0
 8010030:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010032:	7ffb      	ldrb	r3, [r7, #31]
 8010034:	2b00      	cmp	r3, #0
 8010036:	f040 80a9 	bne.w	801018c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	1c59      	adds	r1, r3, #1
 8010044:	61b9      	str	r1, [r7, #24]
 8010046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801004a:	4413      	add	r3, r2
 801004c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	f003 0301 	and.w	r3, r3, #1
 8010054:	2b00      	cmp	r3, #0
 8010056:	d00d      	beq.n	8010074 <put_fat+0xa4>
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	b25b      	sxtb	r3, r3
 801005e:	f003 030f 	and.w	r3, r3, #15
 8010062:	b25a      	sxtb	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	b2db      	uxtb	r3, r3
 8010068:	011b      	lsls	r3, r3, #4
 801006a:	b25b      	sxtb	r3, r3
 801006c:	4313      	orrs	r3, r2
 801006e:	b25b      	sxtb	r3, r3
 8010070:	b2db      	uxtb	r3, r3
 8010072:	e001      	b.n	8010078 <put_fat+0xa8>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	b2db      	uxtb	r3, r3
 8010078:	697a      	ldr	r2, [r7, #20]
 801007a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2201      	movs	r2, #1
 8010080:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6a1a      	ldr	r2, [r3, #32]
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	0a5b      	lsrs	r3, r3, #9
 801008a:	4413      	add	r3, r2
 801008c:	4619      	mov	r1, r3
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff fe3c 	bl	800fd0c <move_window>
 8010094:	4603      	mov	r3, r0
 8010096:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010098:	7ffb      	ldrb	r3, [r7, #31]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d178      	bne.n	8010190 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100aa:	4413      	add	r3, r2
 80100ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d003      	beq.n	80100c0 <put_fat+0xf0>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	091b      	lsrs	r3, r3, #4
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	e00e      	b.n	80100de <put_fat+0x10e>
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	b25b      	sxtb	r3, r3
 80100c6:	f023 030f 	bic.w	r3, r3, #15
 80100ca:	b25a      	sxtb	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	0a1b      	lsrs	r3, r3, #8
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	f003 030f 	and.w	r3, r3, #15
 80100d6:	b25b      	sxtb	r3, r3
 80100d8:	4313      	orrs	r3, r2
 80100da:	b25b      	sxtb	r3, r3
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	697a      	ldr	r2, [r7, #20]
 80100e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2201      	movs	r2, #1
 80100e6:	70da      	strb	r2, [r3, #3]
			break;
 80100e8:	e057      	b.n	801019a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6a1a      	ldr	r2, [r3, #32]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	0a1b      	lsrs	r3, r3, #8
 80100f2:	4413      	add	r3, r2
 80100f4:	4619      	mov	r1, r3
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f7ff fe08 	bl	800fd0c <move_window>
 80100fc:	4603      	mov	r3, r0
 80100fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010100:	7ffb      	ldrb	r3, [r7, #31]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d146      	bne.n	8010194 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010114:	4413      	add	r3, r2
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	b292      	uxth	r2, r2
 801011a:	4611      	mov	r1, r2
 801011c:	4618      	mov	r0, r3
 801011e:	f7ff fb80 	bl	800f822 <st_word>
			fs->wflag = 1;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2201      	movs	r2, #1
 8010126:	70da      	strb	r2, [r3, #3]
			break;
 8010128:	e037      	b.n	801019a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6a1a      	ldr	r2, [r3, #32]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	09db      	lsrs	r3, r3, #7
 8010132:	4413      	add	r3, r2
 8010134:	4619      	mov	r1, r3
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f7ff fde8 	bl	800fd0c <move_window>
 801013c:	4603      	mov	r3, r0
 801013e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010140:	7ffb      	ldrb	r3, [r7, #31]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d128      	bne.n	8010198 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801015a:	4413      	add	r3, r2
 801015c:	4618      	mov	r0, r3
 801015e:	f7ff fb3d 	bl	800f7dc <ld_dword>
 8010162:	4603      	mov	r3, r0
 8010164:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010168:	4323      	orrs	r3, r4
 801016a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801017a:	4413      	add	r3, r2
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	4618      	mov	r0, r3
 8010180:	f7ff fb6a 	bl	800f858 <st_dword>
			fs->wflag = 1;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2201      	movs	r2, #1
 8010188:	70da      	strb	r2, [r3, #3]
			break;
 801018a:	e006      	b.n	801019a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801018c:	bf00      	nop
 801018e:	e004      	b.n	801019a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010190:	bf00      	nop
 8010192:	e002      	b.n	801019a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010194:	bf00      	nop
 8010196:	e000      	b.n	801019a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010198:	bf00      	nop
		}
	}
	return res;
 801019a:	7ffb      	ldrb	r3, [r7, #31]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3724      	adds	r7, #36	@ 0x24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd90      	pop	{r4, r7, pc}

080101a4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b088      	sub	sp, #32
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80101b0:	2300      	movs	r3, #0
 80101b2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d904      	bls.n	80101ca <remove_chain+0x26>
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d301      	bcc.n	80101ce <remove_chain+0x2a>
 80101ca:	2302      	movs	r3, #2
 80101cc:	e04b      	b.n	8010266 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00c      	beq.n	80101ee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80101d4:	f04f 32ff 	mov.w	r2, #4294967295
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	69b8      	ldr	r0, [r7, #24]
 80101dc:	f7ff fef8 	bl	800ffd0 <put_fat>
 80101e0:	4603      	mov	r3, r0
 80101e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80101e4:	7ffb      	ldrb	r3, [r7, #31]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <remove_chain+0x4a>
 80101ea:	7ffb      	ldrb	r3, [r7, #31]
 80101ec:	e03b      	b.n	8010266 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80101ee:	68b9      	ldr	r1, [r7, #8]
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff fe46 	bl	800fe82 <get_fat>
 80101f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d031      	beq.n	8010262 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d101      	bne.n	8010208 <remove_chain+0x64>
 8010204:	2302      	movs	r3, #2
 8010206:	e02e      	b.n	8010266 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801020e:	d101      	bne.n	8010214 <remove_chain+0x70>
 8010210:	2301      	movs	r3, #1
 8010212:	e028      	b.n	8010266 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010214:	2200      	movs	r2, #0
 8010216:	68b9      	ldr	r1, [r7, #8]
 8010218:	69b8      	ldr	r0, [r7, #24]
 801021a:	f7ff fed9 	bl	800ffd0 <put_fat>
 801021e:	4603      	mov	r3, r0
 8010220:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010222:	7ffb      	ldrb	r3, [r7, #31]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <remove_chain+0x88>
 8010228:	7ffb      	ldrb	r3, [r7, #31]
 801022a:	e01c      	b.n	8010266 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	691a      	ldr	r2, [r3, #16]
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	695b      	ldr	r3, [r3, #20]
 8010234:	3b02      	subs	r3, #2
 8010236:	429a      	cmp	r2, r3
 8010238:	d20b      	bcs.n	8010252 <remove_chain+0xae>
			fs->free_clst++;
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	1c5a      	adds	r2, r3, #1
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	791b      	ldrb	r3, [r3, #4]
 8010248:	f043 0301 	orr.w	r3, r3, #1
 801024c:	b2da      	uxtb	r2, r3
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	695b      	ldr	r3, [r3, #20]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	429a      	cmp	r2, r3
 801025e:	d3c6      	bcc.n	80101ee <remove_chain+0x4a>
 8010260:	e000      	b.n	8010264 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010262:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3720      	adds	r7, #32
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b088      	sub	sp, #32
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
 8010276:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d10d      	bne.n	80102a0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d004      	beq.n	801029a <create_chain+0x2c>
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	695b      	ldr	r3, [r3, #20]
 8010294:	69ba      	ldr	r2, [r7, #24]
 8010296:	429a      	cmp	r2, r3
 8010298:	d31b      	bcc.n	80102d2 <create_chain+0x64>
 801029a:	2301      	movs	r3, #1
 801029c:	61bb      	str	r3, [r7, #24]
 801029e:	e018      	b.n	80102d2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7ff fded 	bl	800fe82 <get_fat>
 80102a8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d801      	bhi.n	80102b4 <create_chain+0x46>
 80102b0:	2301      	movs	r3, #1
 80102b2:	e070      	b.n	8010396 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ba:	d101      	bne.n	80102c0 <create_chain+0x52>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	e06a      	b.n	8010396 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d201      	bcs.n	80102ce <create_chain+0x60>
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	e063      	b.n	8010396 <create_chain+0x128>
		scl = clst;
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	3301      	adds	r3, #1
 80102da:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	695b      	ldr	r3, [r3, #20]
 80102e0:	69fa      	ldr	r2, [r7, #28]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d307      	bcc.n	80102f6 <create_chain+0x88>
				ncl = 2;
 80102e6:	2302      	movs	r3, #2
 80102e8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80102ea:	69fa      	ldr	r2, [r7, #28]
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d901      	bls.n	80102f6 <create_chain+0x88>
 80102f2:	2300      	movs	r3, #0
 80102f4:	e04f      	b.n	8010396 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80102f6:	69f9      	ldr	r1, [r7, #28]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff fdc2 	bl	800fe82 <get_fat>
 80102fe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00e      	beq.n	8010324 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d003      	beq.n	8010314 <create_chain+0xa6>
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010312:	d101      	bne.n	8010318 <create_chain+0xaa>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	e03e      	b.n	8010396 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010318:	69fa      	ldr	r2, [r7, #28]
 801031a:	69bb      	ldr	r3, [r7, #24]
 801031c:	429a      	cmp	r2, r3
 801031e:	d1da      	bne.n	80102d6 <create_chain+0x68>
 8010320:	2300      	movs	r3, #0
 8010322:	e038      	b.n	8010396 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010324:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010326:	f04f 32ff 	mov.w	r2, #4294967295
 801032a:	69f9      	ldr	r1, [r7, #28]
 801032c:	6938      	ldr	r0, [r7, #16]
 801032e:	f7ff fe4f 	bl	800ffd0 <put_fat>
 8010332:	4603      	mov	r3, r0
 8010334:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010336:	7dfb      	ldrb	r3, [r7, #23]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d109      	bne.n	8010350 <create_chain+0xe2>
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d006      	beq.n	8010350 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010342:	69fa      	ldr	r2, [r7, #28]
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	6938      	ldr	r0, [r7, #16]
 8010348:	f7ff fe42 	bl	800ffd0 <put_fat>
 801034c:	4603      	mov	r3, r0
 801034e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010350:	7dfb      	ldrb	r3, [r7, #23]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d116      	bne.n	8010384 <create_chain+0x116>
		fs->last_clst = ncl;
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	69fa      	ldr	r2, [r7, #28]
 801035a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	691a      	ldr	r2, [r3, #16]
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	695b      	ldr	r3, [r3, #20]
 8010364:	3b02      	subs	r3, #2
 8010366:	429a      	cmp	r2, r3
 8010368:	d804      	bhi.n	8010374 <create_chain+0x106>
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	1e5a      	subs	r2, r3, #1
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	791b      	ldrb	r3, [r3, #4]
 8010378:	f043 0301 	orr.w	r3, r3, #1
 801037c:	b2da      	uxtb	r2, r3
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	711a      	strb	r2, [r3, #4]
 8010382:	e007      	b.n	8010394 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010384:	7dfb      	ldrb	r3, [r7, #23]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d102      	bne.n	8010390 <create_chain+0x122>
 801038a:	f04f 33ff 	mov.w	r3, #4294967295
 801038e:	e000      	b.n	8010392 <create_chain+0x124>
 8010390:	2301      	movs	r3, #1
 8010392:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010394:	69fb      	ldr	r3, [r7, #28]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3720      	adds	r7, #32
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801039e:	b480      	push	{r7}
 80103a0:	b087      	sub	sp, #28
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b2:	3304      	adds	r3, #4
 80103b4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	0a5b      	lsrs	r3, r3, #9
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	8952      	ldrh	r2, [r2, #10]
 80103be:	fbb3 f3f2 	udiv	r3, r3, r2
 80103c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	1d1a      	adds	r2, r3, #4
 80103c8:	613a      	str	r2, [r7, #16]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d101      	bne.n	80103d8 <clmt_clust+0x3a>
 80103d4:	2300      	movs	r3, #0
 80103d6:	e010      	b.n	80103fa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80103d8:	697a      	ldr	r2, [r7, #20]
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d307      	bcc.n	80103f0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80103e0:	697a      	ldr	r2, [r7, #20]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	617b      	str	r3, [r7, #20]
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	3304      	adds	r3, #4
 80103ec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80103ee:	e7e9      	b.n	80103c4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80103f0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	4413      	add	r3, r2
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	371c      	adds	r7, #28
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr

08010406 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b086      	sub	sp, #24
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801041c:	d204      	bcs.n	8010428 <dir_sdi+0x22>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	f003 031f 	and.w	r3, r3, #31
 8010424:	2b00      	cmp	r3, #0
 8010426:	d001      	beq.n	801042c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010428:	2302      	movs	r3, #2
 801042a:	e063      	b.n	80104f4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d106      	bne.n	801044c <dir_sdi+0x46>
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	2b02      	cmp	r3, #2
 8010444:	d902      	bls.n	801044c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801044a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10c      	bne.n	801046c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	095b      	lsrs	r3, r3, #5
 8010456:	693a      	ldr	r2, [r7, #16]
 8010458:	8912      	ldrh	r2, [r2, #8]
 801045a:	4293      	cmp	r3, r2
 801045c:	d301      	bcc.n	8010462 <dir_sdi+0x5c>
 801045e:	2302      	movs	r3, #2
 8010460:	e048      	b.n	80104f4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	61da      	str	r2, [r3, #28]
 801046a:	e029      	b.n	80104c0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	895b      	ldrh	r3, [r3, #10]
 8010470:	025b      	lsls	r3, r3, #9
 8010472:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010474:	e019      	b.n	80104aa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6979      	ldr	r1, [r7, #20]
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff fd01 	bl	800fe82 <get_fat>
 8010480:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010488:	d101      	bne.n	801048e <dir_sdi+0x88>
 801048a:	2301      	movs	r3, #1
 801048c:	e032      	b.n	80104f4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	2b01      	cmp	r3, #1
 8010492:	d904      	bls.n	801049e <dir_sdi+0x98>
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	695b      	ldr	r3, [r3, #20]
 8010498:	697a      	ldr	r2, [r7, #20]
 801049a:	429a      	cmp	r2, r3
 801049c:	d301      	bcc.n	80104a2 <dir_sdi+0x9c>
 801049e:	2302      	movs	r3, #2
 80104a0:	e028      	b.n	80104f4 <dir_sdi+0xee>
			ofs -= csz;
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80104aa:	683a      	ldr	r2, [r7, #0]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d2e1      	bcs.n	8010476 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80104b2:	6979      	ldr	r1, [r7, #20]
 80104b4:	6938      	ldr	r0, [r7, #16]
 80104b6:	f7ff fcc5 	bl	800fe44 <clust2sect>
 80104ba:	4602      	mov	r2, r0
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	697a      	ldr	r2, [r7, #20]
 80104c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	69db      	ldr	r3, [r3, #28]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <dir_sdi+0xcc>
 80104ce:	2302      	movs	r3, #2
 80104d0:	e010      	b.n	80104f4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	69da      	ldr	r2, [r3, #28]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	0a5b      	lsrs	r3, r3, #9
 80104da:	441a      	add	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ec:	441a      	add	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	695b      	ldr	r3, [r3, #20]
 8010510:	3320      	adds	r3, #32
 8010512:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d003      	beq.n	8010524 <dir_next+0x28>
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010522:	d301      	bcc.n	8010528 <dir_next+0x2c>
 8010524:	2304      	movs	r3, #4
 8010526:	e0aa      	b.n	801067e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801052e:	2b00      	cmp	r3, #0
 8010530:	f040 8098 	bne.w	8010664 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	69db      	ldr	r3, [r3, #28]
 8010538:	1c5a      	adds	r2, r3, #1
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	699b      	ldr	r3, [r3, #24]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d10b      	bne.n	801055e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	095b      	lsrs	r3, r3, #5
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	8912      	ldrh	r2, [r2, #8]
 801054e:	4293      	cmp	r3, r2
 8010550:	f0c0 8088 	bcc.w	8010664 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	61da      	str	r2, [r3, #28]
 801055a:	2304      	movs	r3, #4
 801055c:	e08f      	b.n	801067e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	0a5b      	lsrs	r3, r3, #9
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	8952      	ldrh	r2, [r2, #10]
 8010566:	3a01      	subs	r2, #1
 8010568:	4013      	ands	r3, r2
 801056a:	2b00      	cmp	r3, #0
 801056c:	d17a      	bne.n	8010664 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	699b      	ldr	r3, [r3, #24]
 8010574:	4619      	mov	r1, r3
 8010576:	4610      	mov	r0, r2
 8010578:	f7ff fc83 	bl	800fe82 <get_fat>
 801057c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	2b01      	cmp	r3, #1
 8010582:	d801      	bhi.n	8010588 <dir_next+0x8c>
 8010584:	2302      	movs	r3, #2
 8010586:	e07a      	b.n	801067e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058e:	d101      	bne.n	8010594 <dir_next+0x98>
 8010590:	2301      	movs	r3, #1
 8010592:	e074      	b.n	801067e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	695b      	ldr	r3, [r3, #20]
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	429a      	cmp	r2, r3
 801059c:	d358      	bcc.n	8010650 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d104      	bne.n	80105ae <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	61da      	str	r2, [r3, #28]
 80105aa:	2304      	movs	r3, #4
 80105ac:	e067      	b.n	801067e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	699b      	ldr	r3, [r3, #24]
 80105b4:	4619      	mov	r1, r3
 80105b6:	4610      	mov	r0, r2
 80105b8:	f7ff fe59 	bl	801026e <create_chain>
 80105bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <dir_next+0xcc>
 80105c4:	2307      	movs	r3, #7
 80105c6:	e05a      	b.n	801067e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d101      	bne.n	80105d2 <dir_next+0xd6>
 80105ce:	2302      	movs	r3, #2
 80105d0:	e055      	b.n	801067e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d8:	d101      	bne.n	80105de <dir_next+0xe2>
 80105da:	2301      	movs	r3, #1
 80105dc:	e04f      	b.n	801067e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f7ff fb50 	bl	800fc84 <sync_window>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d001      	beq.n	80105ee <dir_next+0xf2>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e047      	b.n	801067e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	3330      	adds	r3, #48	@ 0x30
 80105f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105f6:	2100      	movs	r1, #0
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7ff f97a 	bl	800f8f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80105fe:	2300      	movs	r3, #0
 8010600:	613b      	str	r3, [r7, #16]
 8010602:	6979      	ldr	r1, [r7, #20]
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f7ff fc1d 	bl	800fe44 <clust2sect>
 801060a:	4602      	mov	r2, r0
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010610:	e012      	b.n	8010638 <dir_next+0x13c>
						fs->wflag = 1;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2201      	movs	r2, #1
 8010616:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f7ff fb33 	bl	800fc84 <sync_window>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d001      	beq.n	8010628 <dir_next+0x12c>
 8010624:	2301      	movs	r3, #1
 8010626:	e02a      	b.n	801067e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	3301      	adds	r3, #1
 801062c:	613b      	str	r3, [r7, #16]
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	895b      	ldrh	r3, [r3, #10]
 801063c:	461a      	mov	r2, r3
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	4293      	cmp	r3, r2
 8010642:	d3e6      	bcc.n	8010612 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	1ad2      	subs	r2, r2, r3
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010656:	6979      	ldr	r1, [r7, #20]
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f7ff fbf3 	bl	800fe44 <clust2sect>
 801065e:	4602      	mov	r2, r0
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010676:	441a      	add	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801067c:	2300      	movs	r3, #0
}
 801067e:	4618      	mov	r0, r3
 8010680:	3718      	adds	r7, #24
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b086      	sub	sp, #24
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010696:	2100      	movs	r1, #0
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7ff feb4 	bl	8010406 <dir_sdi>
 801069e:	4603      	mov	r3, r0
 80106a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106a2:	7dfb      	ldrb	r3, [r7, #23]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d12b      	bne.n	8010700 <dir_alloc+0x7a>
		n = 0;
 80106a8:	2300      	movs	r3, #0
 80106aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	4619      	mov	r1, r3
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7ff fb2a 	bl	800fd0c <move_window>
 80106b8:	4603      	mov	r3, r0
 80106ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106bc:	7dfb      	ldrb	r3, [r7, #23]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d11d      	bne.n	80106fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6a1b      	ldr	r3, [r3, #32]
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	2be5      	cmp	r3, #229	@ 0xe5
 80106ca:	d004      	beq.n	80106d6 <dir_alloc+0x50>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6a1b      	ldr	r3, [r3, #32]
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d107      	bne.n	80106e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	3301      	adds	r3, #1
 80106da:	613b      	str	r3, [r7, #16]
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d102      	bne.n	80106ea <dir_alloc+0x64>
 80106e4:	e00c      	b.n	8010700 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80106e6:	2300      	movs	r3, #0
 80106e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80106ea:	2101      	movs	r1, #1
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f7ff ff05 	bl	80104fc <dir_next>
 80106f2:	4603      	mov	r3, r0
 80106f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d0d7      	beq.n	80106ac <dir_alloc+0x26>
 80106fc:	e000      	b.n	8010700 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80106fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010700:	7dfb      	ldrb	r3, [r7, #23]
 8010702:	2b04      	cmp	r3, #4
 8010704:	d101      	bne.n	801070a <dir_alloc+0x84>
 8010706:	2307      	movs	r3, #7
 8010708:	75fb      	strb	r3, [r7, #23]
	return res;
 801070a:	7dfb      	ldrb	r3, [r7, #23]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	331a      	adds	r3, #26
 8010722:	4618      	mov	r0, r3
 8010724:	f7ff f842 	bl	800f7ac <ld_word>
 8010728:	4603      	mov	r3, r0
 801072a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	2b03      	cmp	r3, #3
 8010732:	d109      	bne.n	8010748 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	3314      	adds	r3, #20
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff f837 	bl	800f7ac <ld_word>
 801073e:	4603      	mov	r3, r0
 8010740:	041b      	lsls	r3, r3, #16
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	4313      	orrs	r3, r2
 8010746:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010748:	68fb      	ldr	r3, [r7, #12]
}
 801074a:	4618      	mov	r0, r3
 801074c:	3710      	adds	r7, #16
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b084      	sub	sp, #16
 8010756:	af00      	add	r7, sp, #0
 8010758:	60f8      	str	r0, [r7, #12]
 801075a:	60b9      	str	r1, [r7, #8]
 801075c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	331a      	adds	r3, #26
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	b292      	uxth	r2, r2
 8010766:	4611      	mov	r1, r2
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff f85a 	bl	800f822 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	2b03      	cmp	r3, #3
 8010774:	d109      	bne.n	801078a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	f103 0214 	add.w	r2, r3, #20
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	0c1b      	lsrs	r3, r3, #16
 8010780:	b29b      	uxth	r3, r3
 8010782:	4619      	mov	r1, r3
 8010784:	4610      	mov	r0, r2
 8010786:	f7ff f84c 	bl	800f822 <st_word>
	}
}
 801078a:	bf00      	nop
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b086      	sub	sp, #24
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801079c:	2304      	movs	r3, #4
 801079e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80107a6:	e03c      	b.n	8010822 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	69db      	ldr	r3, [r3, #28]
 80107ac:	4619      	mov	r1, r3
 80107ae:	6938      	ldr	r0, [r7, #16]
 80107b0:	f7ff faac 	bl	800fd0c <move_window>
 80107b4:	4603      	mov	r3, r0
 80107b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d136      	bne.n	801082c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a1b      	ldr	r3, [r3, #32]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80107c6:	7bfb      	ldrb	r3, [r7, #15]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d102      	bne.n	80107d2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80107cc:	2304      	movs	r3, #4
 80107ce:	75fb      	strb	r3, [r7, #23]
 80107d0:	e031      	b.n	8010836 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a1b      	ldr	r3, [r3, #32]
 80107d6:	330b      	adds	r3, #11
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80107de:	73bb      	strb	r3, [r7, #14]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7bba      	ldrb	r2, [r7, #14]
 80107e4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80107e6:	7bfb      	ldrb	r3, [r7, #15]
 80107e8:	2be5      	cmp	r3, #229	@ 0xe5
 80107ea:	d011      	beq.n	8010810 <dir_read+0x7e>
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80107f0:	d00e      	beq.n	8010810 <dir_read+0x7e>
 80107f2:	7bbb      	ldrb	r3, [r7, #14]
 80107f4:	2b0f      	cmp	r3, #15
 80107f6:	d00b      	beq.n	8010810 <dir_read+0x7e>
 80107f8:	7bbb      	ldrb	r3, [r7, #14]
 80107fa:	f023 0320 	bic.w	r3, r3, #32
 80107fe:	2b08      	cmp	r3, #8
 8010800:	bf0c      	ite	eq
 8010802:	2301      	moveq	r3, #1
 8010804:	2300      	movne	r3, #0
 8010806:	b2db      	uxtb	r3, r3
 8010808:	461a      	mov	r2, r3
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	4293      	cmp	r3, r2
 801080e:	d00f      	beq.n	8010830 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010810:	2100      	movs	r1, #0
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff fe72 	bl	80104fc <dir_next>
 8010818:	4603      	mov	r3, r0
 801081a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801081c:	7dfb      	ldrb	r3, [r7, #23]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d108      	bne.n	8010834 <dir_read+0xa2>
	while (dp->sect) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	69db      	ldr	r3, [r3, #28]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1be      	bne.n	80107a8 <dir_read+0x16>
 801082a:	e004      	b.n	8010836 <dir_read+0xa4>
		if (res != FR_OK) break;
 801082c:	bf00      	nop
 801082e:	e002      	b.n	8010836 <dir_read+0xa4>
				break;
 8010830:	bf00      	nop
 8010832:	e000      	b.n	8010836 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010834:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010836:	7dfb      	ldrb	r3, [r7, #23]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <dir_read+0xb0>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2200      	movs	r2, #0
 8010840:	61da      	str	r2, [r3, #28]
	return res;
 8010842:	7dfb      	ldrb	r3, [r7, #23]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3718      	adds	r7, #24
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801085a:	2100      	movs	r1, #0
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7ff fdd2 	bl	8010406 <dir_sdi>
 8010862:	4603      	mov	r3, r0
 8010864:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010866:	7dfb      	ldrb	r3, [r7, #23]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d001      	beq.n	8010870 <dir_find+0x24>
 801086c:	7dfb      	ldrb	r3, [r7, #23]
 801086e:	e03e      	b.n	80108ee <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	69db      	ldr	r3, [r3, #28]
 8010874:	4619      	mov	r1, r3
 8010876:	6938      	ldr	r0, [r7, #16]
 8010878:	f7ff fa48 	bl	800fd0c <move_window>
 801087c:	4603      	mov	r3, r0
 801087e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010880:	7dfb      	ldrb	r3, [r7, #23]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d12f      	bne.n	80108e6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6a1b      	ldr	r3, [r3, #32]
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801088e:	7bfb      	ldrb	r3, [r7, #15]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d102      	bne.n	801089a <dir_find+0x4e>
 8010894:	2304      	movs	r3, #4
 8010896:	75fb      	strb	r3, [r7, #23]
 8010898:	e028      	b.n	80108ec <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a1b      	ldr	r3, [r3, #32]
 801089e:	330b      	adds	r3, #11
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6a1b      	ldr	r3, [r3, #32]
 80108b0:	330b      	adds	r3, #11
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	f003 0308 	and.w	r3, r3, #8
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d10a      	bne.n	80108d2 <dir_find+0x86>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6a18      	ldr	r0, [r3, #32]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	3324      	adds	r3, #36	@ 0x24
 80108c4:	220b      	movs	r2, #11
 80108c6:	4619      	mov	r1, r3
 80108c8:	f7ff f82e 	bl	800f928 <mem_cmp>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00b      	beq.n	80108ea <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80108d2:	2100      	movs	r1, #0
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7ff fe11 	bl	80104fc <dir_next>
 80108da:	4603      	mov	r3, r0
 80108dc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80108de:	7dfb      	ldrb	r3, [r7, #23]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0c5      	beq.n	8010870 <dir_find+0x24>
 80108e4:	e002      	b.n	80108ec <dir_find+0xa0>
		if (res != FR_OK) break;
 80108e6:	bf00      	nop
 80108e8:	e000      	b.n	80108ec <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80108ea:	bf00      	nop

	return res;
 80108ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3718      	adds	r7, #24
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010904:	2101      	movs	r1, #1
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff febd 	bl	8010686 <dir_alloc>
 801090c:	4603      	mov	r3, r0
 801090e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010910:	7bfb      	ldrb	r3, [r7, #15]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d11c      	bne.n	8010950 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	69db      	ldr	r3, [r3, #28]
 801091a:	4619      	mov	r1, r3
 801091c:	68b8      	ldr	r0, [r7, #8]
 801091e:	f7ff f9f5 	bl	800fd0c <move_window>
 8010922:	4603      	mov	r3, r0
 8010924:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010926:	7bfb      	ldrb	r3, [r7, #15]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d111      	bne.n	8010950 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6a1b      	ldr	r3, [r3, #32]
 8010930:	2220      	movs	r2, #32
 8010932:	2100      	movs	r1, #0
 8010934:	4618      	mov	r0, r3
 8010936:	f7fe ffdc 	bl	800f8f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a18      	ldr	r0, [r3, #32]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3324      	adds	r3, #36	@ 0x24
 8010942:	220b      	movs	r2, #11
 8010944:	4619      	mov	r1, r3
 8010946:	f7fe ffb3 	bl	800f8b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	2201      	movs	r2, #1
 801094e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010950:	7bfb      	ldrb	r3, [r7, #15]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b084      	sub	sp, #16
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	69db      	ldr	r3, [r3, #28]
 801096c:	4619      	mov	r1, r3
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f7ff f9cc 	bl	800fd0c <move_window>
 8010974:	4603      	mov	r3, r0
 8010976:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010978:	7afb      	ldrb	r3, [r7, #11]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d106      	bne.n	801098c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6a1b      	ldr	r3, [r3, #32]
 8010982:	22e5      	movs	r2, #229	@ 0xe5
 8010984:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2201      	movs	r2, #1
 801098a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801098c:	7afb      	ldrb	r3, [r7, #11]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b086      	sub	sp, #24
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
 801099e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	2200      	movs	r2, #0
 80109a4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	69db      	ldr	r3, [r3, #28]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d04f      	beq.n	8010a4e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	613b      	str	r3, [r7, #16]
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80109b6:	e022      	b.n	80109fe <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6a1a      	ldr	r2, [r3, #32]
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	1c59      	adds	r1, r3, #1
 80109c0:	6179      	str	r1, [r7, #20]
 80109c2:	4413      	add	r3, r2
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
 80109ca:	2b20      	cmp	r3, #32
 80109cc:	d016      	beq.n	80109fc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80109ce:	7bfb      	ldrb	r3, [r7, #15]
 80109d0:	2b05      	cmp	r3, #5
 80109d2:	d101      	bne.n	80109d8 <get_fileinfo+0x42>
 80109d4:	23e5      	movs	r3, #229	@ 0xe5
 80109d6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	2b09      	cmp	r3, #9
 80109dc:	d106      	bne.n	80109ec <get_fileinfo+0x56>
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	1c5a      	adds	r2, r3, #1
 80109e2:	613a      	str	r2, [r7, #16]
 80109e4:	683a      	ldr	r2, [r7, #0]
 80109e6:	4413      	add	r3, r2
 80109e8:	222e      	movs	r2, #46	@ 0x2e
 80109ea:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	613a      	str	r2, [r7, #16]
 80109f2:	683a      	ldr	r2, [r7, #0]
 80109f4:	4413      	add	r3, r2
 80109f6:	7bfa      	ldrb	r2, [r7, #15]
 80109f8:	725a      	strb	r2, [r3, #9]
 80109fa:	e000      	b.n	80109fe <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80109fc:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	2b0a      	cmp	r3, #10
 8010a02:	d9d9      	bls.n	80109b8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010a04:	683a      	ldr	r2, [r7, #0]
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	4413      	add	r3, r2
 8010a0a:	3309      	adds	r3, #9
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a1b      	ldr	r3, [r3, #32]
 8010a14:	7ada      	ldrb	r2, [r3, #11]
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a1b      	ldr	r3, [r3, #32]
 8010a1e:	331c      	adds	r3, #28
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fe fedb 	bl	800f7dc <ld_dword>
 8010a26:	4602      	mov	r2, r0
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a1b      	ldr	r3, [r3, #32]
 8010a30:	3316      	adds	r3, #22
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fe fed2 	bl	800f7dc <ld_dword>
 8010a38:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	80da      	strh	r2, [r3, #6]
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	0c1b      	lsrs	r3, r3, #16
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	809a      	strh	r2, [r3, #4]
 8010a4c:	e000      	b.n	8010a50 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010a4e:	bf00      	nop
}
 8010a50:	3718      	adds	r7, #24
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
	...

08010a58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b088      	sub	sp, #32
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	60fb      	str	r3, [r7, #12]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	3324      	adds	r3, #36	@ 0x24
 8010a6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010a6e:	220b      	movs	r2, #11
 8010a70:	2120      	movs	r1, #32
 8010a72:	68b8      	ldr	r0, [r7, #8]
 8010a74:	f7fe ff3d 	bl	800f8f2 <mem_set>
	si = i = 0; ni = 8;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	613b      	str	r3, [r7, #16]
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	61fb      	str	r3, [r7, #28]
 8010a80:	2308      	movs	r3, #8
 8010a82:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	1c5a      	adds	r2, r3, #1
 8010a88:	61fa      	str	r2, [r7, #28]
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010a92:	7efb      	ldrb	r3, [r7, #27]
 8010a94:	2b20      	cmp	r3, #32
 8010a96:	d94e      	bls.n	8010b36 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010a98:	7efb      	ldrb	r3, [r7, #27]
 8010a9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a9c:	d006      	beq.n	8010aac <create_name+0x54>
 8010a9e:	7efb      	ldrb	r3, [r7, #27]
 8010aa0:	2b5c      	cmp	r3, #92	@ 0x5c
 8010aa2:	d110      	bne.n	8010ac6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010aa4:	e002      	b.n	8010aac <create_name+0x54>
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	61fb      	str	r3, [r7, #28]
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ab6:	d0f6      	beq.n	8010aa6 <create_name+0x4e>
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	4413      	add	r3, r2
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	2b5c      	cmp	r3, #92	@ 0x5c
 8010ac2:	d0f0      	beq.n	8010aa6 <create_name+0x4e>
			break;
 8010ac4:	e038      	b.n	8010b38 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010ac6:	7efb      	ldrb	r3, [r7, #27]
 8010ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010aca:	d003      	beq.n	8010ad4 <create_name+0x7c>
 8010acc:	693a      	ldr	r2, [r7, #16]
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d30c      	bcc.n	8010aee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	2b0b      	cmp	r3, #11
 8010ad8:	d002      	beq.n	8010ae0 <create_name+0x88>
 8010ada:	7efb      	ldrb	r3, [r7, #27]
 8010adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ade:	d001      	beq.n	8010ae4 <create_name+0x8c>
 8010ae0:	2306      	movs	r3, #6
 8010ae2:	e044      	b.n	8010b6e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010ae4:	2308      	movs	r3, #8
 8010ae6:	613b      	str	r3, [r7, #16]
 8010ae8:	230b      	movs	r3, #11
 8010aea:	617b      	str	r3, [r7, #20]
			continue;
 8010aec:	e022      	b.n	8010b34 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010aee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da04      	bge.n	8010b00 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010af6:	7efb      	ldrb	r3, [r7, #27]
 8010af8:	3b80      	subs	r3, #128	@ 0x80
 8010afa:	4a1f      	ldr	r2, [pc, #124]	@ (8010b78 <create_name+0x120>)
 8010afc:	5cd3      	ldrb	r3, [r2, r3]
 8010afe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010b00:	7efb      	ldrb	r3, [r7, #27]
 8010b02:	4619      	mov	r1, r3
 8010b04:	481d      	ldr	r0, [pc, #116]	@ (8010b7c <create_name+0x124>)
 8010b06:	f7fe ff36 	bl	800f976 <chk_chr>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d001      	beq.n	8010b14 <create_name+0xbc>
 8010b10:	2306      	movs	r3, #6
 8010b12:	e02c      	b.n	8010b6e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010b14:	7efb      	ldrb	r3, [r7, #27]
 8010b16:	2b60      	cmp	r3, #96	@ 0x60
 8010b18:	d905      	bls.n	8010b26 <create_name+0xce>
 8010b1a:	7efb      	ldrb	r3, [r7, #27]
 8010b1c:	2b7a      	cmp	r3, #122	@ 0x7a
 8010b1e:	d802      	bhi.n	8010b26 <create_name+0xce>
 8010b20:	7efb      	ldrb	r3, [r7, #27]
 8010b22:	3b20      	subs	r3, #32
 8010b24:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	613a      	str	r2, [r7, #16]
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	4413      	add	r3, r2
 8010b30:	7efa      	ldrb	r2, [r7, #27]
 8010b32:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010b34:	e7a6      	b.n	8010a84 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b36:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	441a      	add	r2, r3
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <create_name+0xf4>
 8010b48:	2306      	movs	r3, #6
 8010b4a:	e010      	b.n	8010b6e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2be5      	cmp	r3, #229	@ 0xe5
 8010b52:	d102      	bne.n	8010b5a <create_name+0x102>
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	2205      	movs	r2, #5
 8010b58:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010b5a:	7efb      	ldrb	r3, [r7, #27]
 8010b5c:	2b20      	cmp	r3, #32
 8010b5e:	d801      	bhi.n	8010b64 <create_name+0x10c>
 8010b60:	2204      	movs	r2, #4
 8010b62:	e000      	b.n	8010b66 <create_name+0x10e>
 8010b64:	2200      	movs	r2, #0
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	330b      	adds	r3, #11
 8010b6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010b6c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3720      	adds	r7, #32
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	080143ac 	.word	0x080143ac
 8010b7c:	080142cc 	.word	0x080142cc

08010b80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010b94:	e002      	b.n	8010b9c <follow_path+0x1c>
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	3301      	adds	r3, #1
 8010b9a:	603b      	str	r3, [r7, #0]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ba2:	d0f8      	beq.n	8010b96 <follow_path+0x16>
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	2b5c      	cmp	r3, #92	@ 0x5c
 8010baa:	d0f4      	beq.n	8010b96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	2b1f      	cmp	r3, #31
 8010bb8:	d80a      	bhi.n	8010bd0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2280      	movs	r2, #128	@ 0x80
 8010bbe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff fc1e 	bl	8010406 <dir_sdi>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	75fb      	strb	r3, [r7, #23]
 8010bce:	e043      	b.n	8010c58 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010bd0:	463b      	mov	r3, r7
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff ff3f 	bl	8010a58 <create_name>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d134      	bne.n	8010c4e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7ff fe31 	bl	801084c <dir_find>
 8010bea:	4603      	mov	r3, r0
 8010bec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010bf4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010bf6:	7dfb      	ldrb	r3, [r7, #23]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d00a      	beq.n	8010c12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	2b04      	cmp	r3, #4
 8010c00:	d127      	bne.n	8010c52 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010c02:	7afb      	ldrb	r3, [r7, #11]
 8010c04:	f003 0304 	and.w	r3, r3, #4
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d122      	bne.n	8010c52 <follow_path+0xd2>
 8010c0c:	2305      	movs	r3, #5
 8010c0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010c10:	e01f      	b.n	8010c52 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c12:	7afb      	ldrb	r3, [r7, #11]
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d11c      	bne.n	8010c56 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	799b      	ldrb	r3, [r3, #6]
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d102      	bne.n	8010c2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010c28:	2305      	movs	r3, #5
 8010c2a:	75fb      	strb	r3, [r7, #23]
 8010c2c:	e014      	b.n	8010c58 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	695b      	ldr	r3, [r3, #20]
 8010c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c3c:	4413      	add	r3, r2
 8010c3e:	4619      	mov	r1, r3
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f7ff fd67 	bl	8010714 <ld_clust>
 8010c46:	4602      	mov	r2, r0
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c4c:	e7c0      	b.n	8010bd0 <follow_path+0x50>
			if (res != FR_OK) break;
 8010c4e:	bf00      	nop
 8010c50:	e002      	b.n	8010c58 <follow_path+0xd8>
				break;
 8010c52:	bf00      	nop
 8010c54:	e000      	b.n	8010c58 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c56:	bf00      	nop
			}
		}
	}

	return res;
 8010c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3718      	adds	r7, #24
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010c62:	b480      	push	{r7}
 8010c64:	b087      	sub	sp, #28
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010c6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d031      	beq.n	8010cdc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	617b      	str	r3, [r7, #20]
 8010c7e:	e002      	b.n	8010c86 <get_ldnumber+0x24>
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	3301      	adds	r3, #1
 8010c84:	617b      	str	r3, [r7, #20]
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	2b20      	cmp	r3, #32
 8010c8c:	d903      	bls.n	8010c96 <get_ldnumber+0x34>
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	2b3a      	cmp	r3, #58	@ 0x3a
 8010c94:	d1f4      	bne.n	8010c80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	2b3a      	cmp	r3, #58	@ 0x3a
 8010c9c:	d11c      	bne.n	8010cd8 <get_ldnumber+0x76>
			tp = *path;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	1c5a      	adds	r2, r3, #1
 8010ca8:	60fa      	str	r2, [r7, #12]
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	3b30      	subs	r3, #48	@ 0x30
 8010cae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2b09      	cmp	r3, #9
 8010cb4:	d80e      	bhi.n	8010cd4 <get_ldnumber+0x72>
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d10a      	bne.n	8010cd4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d107      	bne.n	8010cd4 <get_ldnumber+0x72>
					vol = (int)i;
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	617b      	str	r3, [r7, #20]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	697a      	ldr	r2, [r7, #20]
 8010cd2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	e002      	b.n	8010cde <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010cd8:	2300      	movs	r3, #0
 8010cda:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010cdc:	693b      	ldr	r3, [r7, #16]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	371c      	adds	r7, #28
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
	...

08010cec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	70da      	strb	r2, [r3, #3]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8010d02:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7ff f800 	bl	800fd0c <move_window>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <check_fs+0x2a>
 8010d12:	2304      	movs	r3, #4
 8010d14:	e038      	b.n	8010d88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	3330      	adds	r3, #48	@ 0x30
 8010d1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fe fd44 	bl	800f7ac <ld_word>
 8010d24:	4603      	mov	r3, r0
 8010d26:	461a      	mov	r2, r3
 8010d28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d001      	beq.n	8010d34 <check_fs+0x48>
 8010d30:	2303      	movs	r3, #3
 8010d32:	e029      	b.n	8010d88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d3a:	2be9      	cmp	r3, #233	@ 0xe9
 8010d3c:	d009      	beq.n	8010d52 <check_fs+0x66>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d44:	2beb      	cmp	r3, #235	@ 0xeb
 8010d46:	d11e      	bne.n	8010d86 <check_fs+0x9a>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010d4e:	2b90      	cmp	r3, #144	@ 0x90
 8010d50:	d119      	bne.n	8010d86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	3330      	adds	r3, #48	@ 0x30
 8010d56:	3336      	adds	r3, #54	@ 0x36
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe fd3f 	bl	800f7dc <ld_dword>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010d64:	4a0a      	ldr	r2, [pc, #40]	@ (8010d90 <check_fs+0xa4>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d101      	bne.n	8010d6e <check_fs+0x82>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	e00c      	b.n	8010d88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	3330      	adds	r3, #48	@ 0x30
 8010d72:	3352      	adds	r3, #82	@ 0x52
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fe fd31 	bl	800f7dc <ld_dword>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	4a05      	ldr	r2, [pc, #20]	@ (8010d94 <check_fs+0xa8>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d101      	bne.n	8010d86 <check_fs+0x9a>
 8010d82:	2300      	movs	r3, #0
 8010d84:	e000      	b.n	8010d88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010d86:	2302      	movs	r3, #2
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3708      	adds	r7, #8
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	00544146 	.word	0x00544146
 8010d94:	33544146 	.word	0x33544146

08010d98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b096      	sub	sp, #88	@ 0x58
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	4613      	mov	r3, r2
 8010da4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2200      	movs	r2, #0
 8010daa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f7ff ff58 	bl	8010c62 <get_ldnumber>
 8010db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	da01      	bge.n	8010dbe <find_volume+0x26>
 8010dba:	230b      	movs	r3, #11
 8010dbc:	e22d      	b.n	801121a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010dbe:	4aa1      	ldr	r2, [pc, #644]	@ (8011044 <find_volume+0x2ac>)
 8010dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d101      	bne.n	8010dd2 <find_volume+0x3a>
 8010dce:	230c      	movs	r3, #12
 8010dd0:	e223      	b.n	801121a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	f023 0301 	bic.w	r3, r3, #1
 8010dde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d01a      	beq.n	8010e1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dea:	785b      	ldrb	r3, [r3, #1]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fe fc3d 	bl	800f66c <disk_status>
 8010df2:	4603      	mov	r3, r0
 8010df4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010df8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010dfc:	f003 0301 	and.w	r3, r3, #1
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10c      	bne.n	8010e1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010e04:	79fb      	ldrb	r3, [r7, #7]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d007      	beq.n	8010e1a <find_volume+0x82>
 8010e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e0e:	f003 0304 	and.w	r3, r3, #4
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d001      	beq.n	8010e1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010e16:	230a      	movs	r3, #10
 8010e18:	e1ff      	b.n	801121a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e1fd      	b.n	801121a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e20:	2200      	movs	r2, #0
 8010e22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e26:	b2da      	uxtb	r2, r3
 8010e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e2e:	785b      	ldrb	r3, [r3, #1]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fe fc35 	bl	800f6a0 <disk_initialize>
 8010e36:	4603      	mov	r3, r0
 8010e38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e40:	f003 0301 	and.w	r3, r3, #1
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010e48:	2303      	movs	r3, #3
 8010e4a:	e1e6      	b.n	801121a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010e4c:	79fb      	ldrb	r3, [r7, #7]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d007      	beq.n	8010e62 <find_volume+0xca>
 8010e52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e56:	f003 0304 	and.w	r3, r3, #4
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d001      	beq.n	8010e62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010e5e:	230a      	movs	r3, #10
 8010e60:	e1db      	b.n	801121a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010e66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010e68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e6a:	f7ff ff3f 	bl	8010cec <check_fs>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010e74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e78:	2b02      	cmp	r3, #2
 8010e7a:	d149      	bne.n	8010f10 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e80:	e01e      	b.n	8010ec0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e8a:	011b      	lsls	r3, r3, #4
 8010e8c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010e90:	4413      	add	r3, r2
 8010e92:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e96:	3304      	adds	r3, #4
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d006      	beq.n	8010eac <find_volume+0x114>
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea0:	3308      	adds	r3, #8
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fe fc9a 	bl	800f7dc <ld_dword>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	e000      	b.n	8010eae <find_volume+0x116>
 8010eac:	2200      	movs	r2, #0
 8010eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	3358      	adds	r3, #88	@ 0x58
 8010eb4:	443b      	add	r3, r7
 8010eb6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ec2:	2b03      	cmp	r3, #3
 8010ec4:	d9dd      	bls.n	8010e82 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <find_volume+0x13e>
 8010ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	3358      	adds	r3, #88	@ 0x58
 8010edc:	443b      	add	r3, r7
 8010ede:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010ee2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d005      	beq.n	8010ef6 <find_volume+0x15e>
 8010eea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010eec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010eee:	f7ff fefd 	bl	8010cec <check_fs>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	e000      	b.n	8010ef8 <find_volume+0x160>
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010efc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d905      	bls.n	8010f10 <find_volume+0x178>
 8010f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f06:	3301      	adds	r3, #1
 8010f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f0c:	2b03      	cmp	r3, #3
 8010f0e:	d9e2      	bls.n	8010ed6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010f10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f14:	2b04      	cmp	r3, #4
 8010f16:	d101      	bne.n	8010f1c <find_volume+0x184>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e17e      	b.n	801121a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d901      	bls.n	8010f28 <find_volume+0x190>
 8010f24:	230d      	movs	r3, #13
 8010f26:	e178      	b.n	801121a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2a:	3330      	adds	r3, #48	@ 0x30
 8010f2c:	330b      	adds	r3, #11
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fe fc3c 	bl	800f7ac <ld_word>
 8010f34:	4603      	mov	r3, r0
 8010f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f3a:	d001      	beq.n	8010f40 <find_volume+0x1a8>
 8010f3c:	230d      	movs	r3, #13
 8010f3e:	e16c      	b.n	801121a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	3330      	adds	r3, #48	@ 0x30
 8010f44:	3316      	adds	r3, #22
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fe fc30 	bl	800f7ac <ld_word>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d106      	bne.n	8010f64 <find_volume+0x1cc>
 8010f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f58:	3330      	adds	r3, #48	@ 0x30
 8010f5a:	3324      	adds	r3, #36	@ 0x24
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fe fc3d 	bl	800f7dc <ld_dword>
 8010f62:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010f68:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8010f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f76:	789b      	ldrb	r3, [r3, #2]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d005      	beq.n	8010f88 <find_volume+0x1f0>
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7e:	789b      	ldrb	r3, [r3, #2]
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d001      	beq.n	8010f88 <find_volume+0x1f0>
 8010f84:	230d      	movs	r3, #13
 8010f86:	e148      	b.n	801121a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8a:	789b      	ldrb	r3, [r3, #2]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f90:	fb02 f303 	mul.w	r3, r2, r3
 8010f94:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	895b      	ldrh	r3, [r3, #10]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d008      	beq.n	8010fbc <find_volume+0x224>
 8010faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fac:	895b      	ldrh	r3, [r3, #10]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb2:	895b      	ldrh	r3, [r3, #10]
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	4013      	ands	r3, r2
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <find_volume+0x228>
 8010fbc:	230d      	movs	r3, #13
 8010fbe:	e12c      	b.n	801121a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc2:	3330      	adds	r3, #48	@ 0x30
 8010fc4:	3311      	adds	r3, #17
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fe fbf0 	bl	800f7ac <ld_word>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	461a      	mov	r2, r3
 8010fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd6:	891b      	ldrh	r3, [r3, #8]
 8010fd8:	f003 030f 	and.w	r3, r3, #15
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d001      	beq.n	8010fe6 <find_volume+0x24e>
 8010fe2:	230d      	movs	r3, #13
 8010fe4:	e119      	b.n	801121a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe8:	3330      	adds	r3, #48	@ 0x30
 8010fea:	3313      	adds	r3, #19
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fe fbdd 	bl	800f7ac <ld_word>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d106      	bne.n	801100a <find_volume+0x272>
 8010ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ffe:	3330      	adds	r3, #48	@ 0x30
 8011000:	3320      	adds	r3, #32
 8011002:	4618      	mov	r0, r3
 8011004:	f7fe fbea 	bl	800f7dc <ld_dword>
 8011008:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801100a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100c:	3330      	adds	r3, #48	@ 0x30
 801100e:	330e      	adds	r3, #14
 8011010:	4618      	mov	r0, r3
 8011012:	f7fe fbcb 	bl	800f7ac <ld_word>
 8011016:	4603      	mov	r3, r0
 8011018:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801101a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801101c:	2b00      	cmp	r3, #0
 801101e:	d101      	bne.n	8011024 <find_volume+0x28c>
 8011020:	230d      	movs	r3, #13
 8011022:	e0fa      	b.n	801121a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011024:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011028:	4413      	add	r3, r2
 801102a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801102c:	8912      	ldrh	r2, [r2, #8]
 801102e:	0912      	lsrs	r2, r2, #4
 8011030:	b292      	uxth	r2, r2
 8011032:	4413      	add	r3, r2
 8011034:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801103a:	429a      	cmp	r2, r3
 801103c:	d204      	bcs.n	8011048 <find_volume+0x2b0>
 801103e:	230d      	movs	r3, #13
 8011040:	e0eb      	b.n	801121a <find_volume+0x482>
 8011042:	bf00      	nop
 8011044:	20000818 	.word	0x20000818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011050:	8952      	ldrh	r2, [r2, #10]
 8011052:	fbb3 f3f2 	udiv	r3, r3, r2
 8011056:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <find_volume+0x2ca>
 801105e:	230d      	movs	r3, #13
 8011060:	e0db      	b.n	801121a <find_volume+0x482>
		fmt = FS_FAT32;
 8011062:	2303      	movs	r3, #3
 8011064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801106a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801106e:	4293      	cmp	r3, r2
 8011070:	d802      	bhi.n	8011078 <find_volume+0x2e0>
 8011072:	2302      	movs	r3, #2
 8011074:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801107e:	4293      	cmp	r3, r2
 8011080:	d802      	bhi.n	8011088 <find_volume+0x2f0>
 8011082:	2301      	movs	r3, #1
 8011084:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108a:	1c9a      	adds	r2, r3, #2
 801108c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011092:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011094:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011096:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801109a:	441a      	add	r2, r3
 801109c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801109e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80110a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80110a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a4:	441a      	add	r2, r3
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80110aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80110ae:	2b03      	cmp	r3, #3
 80110b0:	d11e      	bne.n	80110f0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80110b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b4:	3330      	adds	r3, #48	@ 0x30
 80110b6:	332a      	adds	r3, #42	@ 0x2a
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fe fb77 	bl	800f7ac <ld_word>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d001      	beq.n	80110c8 <find_volume+0x330>
 80110c4:	230d      	movs	r3, #13
 80110c6:	e0a8      	b.n	801121a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80110c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ca:	891b      	ldrh	r3, [r3, #8]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d001      	beq.n	80110d4 <find_volume+0x33c>
 80110d0:	230d      	movs	r3, #13
 80110d2:	e0a2      	b.n	801121a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80110d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d6:	3330      	adds	r3, #48	@ 0x30
 80110d8:	332c      	adds	r3, #44	@ 0x2c
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fe fb7e 	bl	800f7dc <ld_dword>
 80110e0:	4602      	mov	r2, r0
 80110e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	695b      	ldr	r3, [r3, #20]
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80110ee:	e01f      	b.n	8011130 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80110f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f2:	891b      	ldrh	r3, [r3, #8]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d101      	bne.n	80110fc <find_volume+0x364>
 80110f8:	230d      	movs	r3, #13
 80110fa:	e08e      	b.n	801121a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80110fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fe:	6a1a      	ldr	r2, [r3, #32]
 8011100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011102:	441a      	add	r2, r3
 8011104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011106:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011108:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801110c:	2b02      	cmp	r3, #2
 801110e:	d103      	bne.n	8011118 <find_volume+0x380>
 8011110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011112:	695b      	ldr	r3, [r3, #20]
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	e00a      	b.n	801112e <find_volume+0x396>
 8011118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801111a:	695a      	ldr	r2, [r3, #20]
 801111c:	4613      	mov	r3, r2
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	4413      	add	r3, r2
 8011122:	085a      	lsrs	r2, r3, #1
 8011124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011126:	695b      	ldr	r3, [r3, #20]
 8011128:	f003 0301 	and.w	r3, r3, #1
 801112c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801112e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011132:	699a      	ldr	r2, [r3, #24]
 8011134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011136:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801113a:	0a5b      	lsrs	r3, r3, #9
 801113c:	429a      	cmp	r2, r3
 801113e:	d201      	bcs.n	8011144 <find_volume+0x3ac>
 8011140:	230d      	movs	r3, #13
 8011142:	e06a      	b.n	801121a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011146:	f04f 32ff 	mov.w	r2, #4294967295
 801114a:	611a      	str	r2, [r3, #16]
 801114c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114e:	691a      	ldr	r2, [r3, #16]
 8011150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011152:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011156:	2280      	movs	r2, #128	@ 0x80
 8011158:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801115a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801115e:	2b03      	cmp	r3, #3
 8011160:	d149      	bne.n	80111f6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011164:	3330      	adds	r3, #48	@ 0x30
 8011166:	3330      	adds	r3, #48	@ 0x30
 8011168:	4618      	mov	r0, r3
 801116a:	f7fe fb1f 	bl	800f7ac <ld_word>
 801116e:	4603      	mov	r3, r0
 8011170:	2b01      	cmp	r3, #1
 8011172:	d140      	bne.n	80111f6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011176:	3301      	adds	r3, #1
 8011178:	4619      	mov	r1, r3
 801117a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801117c:	f7fe fdc6 	bl	800fd0c <move_window>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d137      	bne.n	80111f6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011188:	2200      	movs	r2, #0
 801118a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801118c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801118e:	3330      	adds	r3, #48	@ 0x30
 8011190:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011194:	4618      	mov	r0, r3
 8011196:	f7fe fb09 	bl	800f7ac <ld_word>
 801119a:	4603      	mov	r3, r0
 801119c:	461a      	mov	r2, r3
 801119e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d127      	bne.n	80111f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80111a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a8:	3330      	adds	r3, #48	@ 0x30
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe fb16 	bl	800f7dc <ld_dword>
 80111b0:	4603      	mov	r3, r0
 80111b2:	4a1c      	ldr	r2, [pc, #112]	@ (8011224 <find_volume+0x48c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d11e      	bne.n	80111f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80111b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ba:	3330      	adds	r3, #48	@ 0x30
 80111bc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fe fb0b 	bl	800f7dc <ld_dword>
 80111c6:	4603      	mov	r3, r0
 80111c8:	4a17      	ldr	r2, [pc, #92]	@ (8011228 <find_volume+0x490>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d113      	bne.n	80111f6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80111ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111d0:	3330      	adds	r3, #48	@ 0x30
 80111d2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fe fb00 	bl	800f7dc <ld_dword>
 80111dc:	4602      	mov	r2, r0
 80111de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80111e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e4:	3330      	adds	r3, #48	@ 0x30
 80111e6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fe faf6 	bl	800f7dc <ld_dword>
 80111f0:	4602      	mov	r2, r0
 80111f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80111f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80111fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80111fe:	4b0b      	ldr	r3, [pc, #44]	@ (801122c <find_volume+0x494>)
 8011200:	881b      	ldrh	r3, [r3, #0]
 8011202:	3301      	adds	r3, #1
 8011204:	b29a      	uxth	r2, r3
 8011206:	4b09      	ldr	r3, [pc, #36]	@ (801122c <find_volume+0x494>)
 8011208:	801a      	strh	r2, [r3, #0]
 801120a:	4b08      	ldr	r3, [pc, #32]	@ (801122c <find_volume+0x494>)
 801120c:	881a      	ldrh	r2, [r3, #0]
 801120e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011210:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011212:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011214:	f7fe fd12 	bl	800fc3c <clear_lock>
#endif
	return FR_OK;
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3758      	adds	r7, #88	@ 0x58
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	41615252 	.word	0x41615252
 8011228:	61417272 	.word	0x61417272
 801122c:	2000081c 	.word	0x2000081c

08011230 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801123a:	2309      	movs	r3, #9
 801123c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d01c      	beq.n	801127e <validate+0x4e>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d018      	beq.n	801127e <validate+0x4e>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d013      	beq.n	801127e <validate+0x4e>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	889a      	ldrh	r2, [r3, #4]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	88db      	ldrh	r3, [r3, #6]
 8011260:	429a      	cmp	r2, r3
 8011262:	d10c      	bne.n	801127e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	785b      	ldrb	r3, [r3, #1]
 801126a:	4618      	mov	r0, r3
 801126c:	f7fe f9fe 	bl	800f66c <disk_status>
 8011270:	4603      	mov	r3, r0
 8011272:	f003 0301 	and.w	r3, r3, #1
 8011276:	2b00      	cmp	r3, #0
 8011278:	d101      	bne.n	801127e <validate+0x4e>
			res = FR_OK;
 801127a:	2300      	movs	r3, #0
 801127c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801127e:	7bfb      	ldrb	r3, [r7, #15]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <validate+0x5a>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	e000      	b.n	801128c <validate+0x5c>
 801128a:	2300      	movs	r3, #0
 801128c:	683a      	ldr	r2, [r7, #0]
 801128e:	6013      	str	r3, [r2, #0]
	return res;
 8011290:	7bfb      	ldrb	r3, [r7, #15]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
	...

0801129c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	4613      	mov	r3, r2
 80112a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80112ae:	f107 0310 	add.w	r3, r7, #16
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7ff fcd5 	bl	8010c62 <get_ldnumber>
 80112b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	da01      	bge.n	80112c4 <f_mount+0x28>
 80112c0:	230b      	movs	r3, #11
 80112c2:	e02b      	b.n	801131c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80112c4:	4a17      	ldr	r2, [pc, #92]	@ (8011324 <f_mount+0x88>)
 80112c6:	69fb      	ldr	r3, [r7, #28]
 80112c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d005      	beq.n	80112e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80112d4:	69b8      	ldr	r0, [r7, #24]
 80112d6:	f7fe fcb1 	bl	800fc3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	2200      	movs	r2, #0
 80112de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	490d      	ldr	r1, [pc, #52]	@ (8011324 <f_mount+0x88>)
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d002      	beq.n	8011302 <f_mount+0x66>
 80112fc:	79fb      	ldrb	r3, [r7, #7]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d001      	beq.n	8011306 <f_mount+0x6a>
 8011302:	2300      	movs	r3, #0
 8011304:	e00a      	b.n	801131c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011306:	f107 010c 	add.w	r1, r7, #12
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	2200      	movs	r2, #0
 8011310:	4618      	mov	r0, r3
 8011312:	f7ff fd41 	bl	8010d98 <find_volume>
 8011316:	4603      	mov	r3, r0
 8011318:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801131a:	7dfb      	ldrb	r3, [r7, #23]
}
 801131c:	4618      	mov	r0, r3
 801131e:	3720      	adds	r7, #32
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	20000818 	.word	0x20000818

08011328 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b098      	sub	sp, #96	@ 0x60
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	4613      	mov	r3, r2
 8011334:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d101      	bne.n	8011340 <f_open+0x18>
 801133c:	2309      	movs	r3, #9
 801133e:	e1a9      	b.n	8011694 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011340:	79fb      	ldrb	r3, [r7, #7]
 8011342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011346:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011348:	79fa      	ldrb	r2, [r7, #7]
 801134a:	f107 0110 	add.w	r1, r7, #16
 801134e:	f107 0308 	add.w	r3, r7, #8
 8011352:	4618      	mov	r0, r3
 8011354:	f7ff fd20 	bl	8010d98 <find_volume>
 8011358:	4603      	mov	r3, r0
 801135a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801135e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011362:	2b00      	cmp	r3, #0
 8011364:	f040 818d 	bne.w	8011682 <f_open+0x35a>
		dj.obj.fs = fs;
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801136c:	68ba      	ldr	r2, [r7, #8]
 801136e:	f107 0314 	add.w	r3, r7, #20
 8011372:	4611      	mov	r1, r2
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff fc03 	bl	8010b80 <follow_path>
 801137a:	4603      	mov	r3, r0
 801137c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011380:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011384:	2b00      	cmp	r3, #0
 8011386:	d118      	bne.n	80113ba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011388:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801138c:	b25b      	sxtb	r3, r3
 801138e:	2b00      	cmp	r3, #0
 8011390:	da03      	bge.n	801139a <f_open+0x72>
				res = FR_INVALID_NAME;
 8011392:	2306      	movs	r3, #6
 8011394:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011398:	e00f      	b.n	80113ba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801139a:	79fb      	ldrb	r3, [r7, #7]
 801139c:	2b01      	cmp	r3, #1
 801139e:	bf8c      	ite	hi
 80113a0:	2301      	movhi	r3, #1
 80113a2:	2300      	movls	r3, #0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	461a      	mov	r2, r3
 80113a8:	f107 0314 	add.w	r3, r7, #20
 80113ac:	4611      	mov	r1, r2
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fe fafc 	bl	800f9ac <chk_lock>
 80113b4:	4603      	mov	r3, r0
 80113b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	f003 031c 	and.w	r3, r3, #28
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d07f      	beq.n	80114c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80113c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d017      	beq.n	80113fc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80113cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113d0:	2b04      	cmp	r3, #4
 80113d2:	d10e      	bne.n	80113f2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80113d4:	f7fe fb46 	bl	800fa64 <enq_lock>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d006      	beq.n	80113ec <f_open+0xc4>
 80113de:	f107 0314 	add.w	r3, r7, #20
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7ff fa87 	bl	80108f6 <dir_register>
 80113e8:	4603      	mov	r3, r0
 80113ea:	e000      	b.n	80113ee <f_open+0xc6>
 80113ec:	2312      	movs	r3, #18
 80113ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	f043 0308 	orr.w	r3, r3, #8
 80113f8:	71fb      	strb	r3, [r7, #7]
 80113fa:	e010      	b.n	801141e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80113fc:	7ebb      	ldrb	r3, [r7, #26]
 80113fe:	f003 0311 	and.w	r3, r3, #17
 8011402:	2b00      	cmp	r3, #0
 8011404:	d003      	beq.n	801140e <f_open+0xe6>
					res = FR_DENIED;
 8011406:	2307      	movs	r3, #7
 8011408:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801140c:	e007      	b.n	801141e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801140e:	79fb      	ldrb	r3, [r7, #7]
 8011410:	f003 0304 	and.w	r3, r3, #4
 8011414:	2b00      	cmp	r3, #0
 8011416:	d002      	beq.n	801141e <f_open+0xf6>
 8011418:	2308      	movs	r3, #8
 801141a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801141e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011422:	2b00      	cmp	r3, #0
 8011424:	d168      	bne.n	80114f8 <f_open+0x1d0>
 8011426:	79fb      	ldrb	r3, [r7, #7]
 8011428:	f003 0308 	and.w	r3, r3, #8
 801142c:	2b00      	cmp	r3, #0
 801142e:	d063      	beq.n	80114f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011430:	f7fb fe5a 	bl	800d0e8 <get_fattime>
 8011434:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011438:	330e      	adds	r3, #14
 801143a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801143c:	4618      	mov	r0, r3
 801143e:	f7fe fa0b 	bl	800f858 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011444:	3316      	adds	r3, #22
 8011446:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011448:	4618      	mov	r0, r3
 801144a:	f7fe fa05 	bl	800f858 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801144e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011450:	330b      	adds	r3, #11
 8011452:	2220      	movs	r2, #32
 8011454:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801145a:	4611      	mov	r1, r2
 801145c:	4618      	mov	r0, r3
 801145e:	f7ff f959 	bl	8010714 <ld_clust>
 8011462:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011468:	2200      	movs	r2, #0
 801146a:	4618      	mov	r0, r3
 801146c:	f7ff f971 	bl	8010752 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011472:	331c      	adds	r3, #28
 8011474:	2100      	movs	r1, #0
 8011476:	4618      	mov	r0, r3
 8011478:	f7fe f9ee 	bl	800f858 <st_dword>
					fs->wflag = 1;
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	2201      	movs	r2, #1
 8011480:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011484:	2b00      	cmp	r3, #0
 8011486:	d037      	beq.n	80114f8 <f_open+0x1d0>
						dw = fs->winsect;
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801148c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801148e:	f107 0314 	add.w	r3, r7, #20
 8011492:	2200      	movs	r2, #0
 8011494:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011496:	4618      	mov	r0, r3
 8011498:	f7fe fe84 	bl	80101a4 <remove_chain>
 801149c:	4603      	mov	r3, r0
 801149e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80114a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d126      	bne.n	80114f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fe fc2c 	bl	800fd0c <move_window>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114be:	3a01      	subs	r2, #1
 80114c0:	60da      	str	r2, [r3, #12]
 80114c2:	e019      	b.n	80114f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80114c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d115      	bne.n	80114f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80114cc:	7ebb      	ldrb	r3, [r7, #26]
 80114ce:	f003 0310 	and.w	r3, r3, #16
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d003      	beq.n	80114de <f_open+0x1b6>
					res = FR_NO_FILE;
 80114d6:	2304      	movs	r3, #4
 80114d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80114dc:	e00c      	b.n	80114f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80114de:	79fb      	ldrb	r3, [r7, #7]
 80114e0:	f003 0302 	and.w	r3, r3, #2
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d007      	beq.n	80114f8 <f_open+0x1d0>
 80114e8:	7ebb      	ldrb	r3, [r7, #26]
 80114ea:	f003 0301 	and.w	r3, r3, #1
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d002      	beq.n	80114f8 <f_open+0x1d0>
						res = FR_DENIED;
 80114f2:	2307      	movs	r3, #7
 80114f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80114f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d126      	bne.n	801154e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011500:	79fb      	ldrb	r3, [r7, #7]
 8011502:	f003 0308 	and.w	r3, r3, #8
 8011506:	2b00      	cmp	r3, #0
 8011508:	d003      	beq.n	8011512 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801150a:	79fb      	ldrb	r3, [r7, #7]
 801150c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011510:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801151a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011520:	79fb      	ldrb	r3, [r7, #7]
 8011522:	2b01      	cmp	r3, #1
 8011524:	bf8c      	ite	hi
 8011526:	2301      	movhi	r3, #1
 8011528:	2300      	movls	r3, #0
 801152a:	b2db      	uxtb	r3, r3
 801152c:	461a      	mov	r2, r3
 801152e:	f107 0314 	add.w	r3, r7, #20
 8011532:	4611      	mov	r1, r2
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe fab7 	bl	800faa8 <inc_lock>
 801153a:	4602      	mov	r2, r0
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d102      	bne.n	801154e <f_open+0x226>
 8011548:	2302      	movs	r3, #2
 801154a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801154e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011552:	2b00      	cmp	r3, #0
 8011554:	f040 8095 	bne.w	8011682 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801155c:	4611      	mov	r1, r2
 801155e:	4618      	mov	r0, r3
 8011560:	f7ff f8d8 	bl	8010714 <ld_clust>
 8011564:	4602      	mov	r2, r0
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801156a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801156c:	331c      	adds	r3, #28
 801156e:	4618      	mov	r0, r3
 8011570:	f7fe f934 	bl	800f7dc <ld_dword>
 8011574:	4602      	mov	r2, r0
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2200      	movs	r2, #0
 801157e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011580:	693a      	ldr	r2, [r7, #16]
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	88da      	ldrh	r2, [r3, #6]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	79fa      	ldrb	r2, [r7, #7]
 8011592:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2200      	movs	r2, #0
 8011598:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2200      	movs	r2, #0
 80115a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	3330      	adds	r3, #48	@ 0x30
 80115aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115ae:	2100      	movs	r1, #0
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fe f99e 	bl	800f8f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80115b6:	79fb      	ldrb	r3, [r7, #7]
 80115b8:	f003 0320 	and.w	r3, r3, #32
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d060      	beq.n	8011682 <f_open+0x35a>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d05c      	beq.n	8011682 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	68da      	ldr	r2, [r3, #12]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	895b      	ldrh	r3, [r3, #10]
 80115d4:	025b      	lsls	r3, r3, #9
 80115d6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80115e4:	e016      	b.n	8011614 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fe fc49 	bl	800fe82 <get_fat>
 80115f0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80115f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d802      	bhi.n	80115fe <f_open+0x2d6>
 80115f8:	2302      	movs	r3, #2
 80115fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80115fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011604:	d102      	bne.n	801160c <f_open+0x2e4>
 8011606:	2301      	movs	r3, #1
 8011608:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801160c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801160e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	657b      	str	r3, [r7, #84]	@ 0x54
 8011614:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011618:	2b00      	cmp	r3, #0
 801161a:	d103      	bne.n	8011624 <f_open+0x2fc>
 801161c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801161e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011620:	429a      	cmp	r2, r3
 8011622:	d8e0      	bhi.n	80115e6 <f_open+0x2be>
				}
				fp->clust = clst;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011628:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801162a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801162e:	2b00      	cmp	r3, #0
 8011630:	d127      	bne.n	8011682 <f_open+0x35a>
 8011632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011638:	2b00      	cmp	r3, #0
 801163a:	d022      	beq.n	8011682 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011640:	4618      	mov	r0, r3
 8011642:	f7fe fbff 	bl	800fe44 <clust2sect>
 8011646:	6478      	str	r0, [r7, #68]	@ 0x44
 8011648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801164a:	2b00      	cmp	r3, #0
 801164c:	d103      	bne.n	8011656 <f_open+0x32e>
						res = FR_INT_ERR;
 801164e:	2302      	movs	r3, #2
 8011650:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011654:	e015      	b.n	8011682 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011658:	0a5a      	lsrs	r2, r3, #9
 801165a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801165c:	441a      	add	r2, r3
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	7858      	ldrb	r0, [r3, #1]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	6a1a      	ldr	r2, [r3, #32]
 8011670:	2301      	movs	r3, #1
 8011672:	f7fe f83d 	bl	800f6f0 <disk_read>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d002      	beq.n	8011682 <f_open+0x35a>
 801167c:	2301      	movs	r3, #1
 801167e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011682:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011686:	2b00      	cmp	r3, #0
 8011688:	d002      	beq.n	8011690 <f_open+0x368>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2200      	movs	r2, #0
 801168e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011690:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8011694:	4618      	mov	r0, r3
 8011696:	3760      	adds	r7, #96	@ 0x60
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b08e      	sub	sp, #56	@ 0x38
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
 80116a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	2200      	movs	r2, #0
 80116b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f107 0214 	add.w	r2, r7, #20
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ff fdb7 	bl	8011230 <validate>
 80116c2:	4603      	mov	r3, r0
 80116c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80116c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d107      	bne.n	80116e0 <f_read+0x44>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	7d5b      	ldrb	r3, [r3, #21]
 80116d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80116d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d002      	beq.n	80116e6 <f_read+0x4a>
 80116e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116e4:	e115      	b.n	8011912 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	7d1b      	ldrb	r3, [r3, #20]
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d101      	bne.n	80116f6 <f_read+0x5a>
 80116f2:	2307      	movs	r3, #7
 80116f4:	e10d      	b.n	8011912 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	68da      	ldr	r2, [r3, #12]
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	699b      	ldr	r3, [r3, #24]
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	6a3b      	ldr	r3, [r7, #32]
 8011706:	429a      	cmp	r2, r3
 8011708:	f240 80fe 	bls.w	8011908 <f_read+0x26c>
 801170c:	6a3b      	ldr	r3, [r7, #32]
 801170e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011710:	e0fa      	b.n	8011908 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	699b      	ldr	r3, [r3, #24]
 8011716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801171a:	2b00      	cmp	r3, #0
 801171c:	f040 80c6 	bne.w	80118ac <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	699b      	ldr	r3, [r3, #24]
 8011724:	0a5b      	lsrs	r3, r3, #9
 8011726:	697a      	ldr	r2, [r7, #20]
 8011728:	8952      	ldrh	r2, [r2, #10]
 801172a:	3a01      	subs	r2, #1
 801172c:	4013      	ands	r3, r2
 801172e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d12f      	bne.n	8011796 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	699b      	ldr	r3, [r3, #24]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d103      	bne.n	8011746 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	633b      	str	r3, [r7, #48]	@ 0x30
 8011744:	e013      	b.n	801176e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801174a:	2b00      	cmp	r3, #0
 801174c:	d007      	beq.n	801175e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	699b      	ldr	r3, [r3, #24]
 8011752:	4619      	mov	r1, r3
 8011754:	68f8      	ldr	r0, [r7, #12]
 8011756:	f7fe fe22 	bl	801039e <clmt_clust>
 801175a:	6338      	str	r0, [r7, #48]	@ 0x30
 801175c:	e007      	b.n	801176e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801175e:	68fa      	ldr	r2, [r7, #12]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	4619      	mov	r1, r3
 8011766:	4610      	mov	r0, r2
 8011768:	f7fe fb8b 	bl	800fe82 <get_fat>
 801176c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011770:	2b01      	cmp	r3, #1
 8011772:	d804      	bhi.n	801177e <f_read+0xe2>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2202      	movs	r2, #2
 8011778:	755a      	strb	r2, [r3, #21]
 801177a:	2302      	movs	r3, #2
 801177c:	e0c9      	b.n	8011912 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801177e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011784:	d104      	bne.n	8011790 <f_read+0xf4>
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2201      	movs	r2, #1
 801178a:	755a      	strb	r2, [r3, #21]
 801178c:	2301      	movs	r3, #1
 801178e:	e0c0      	b.n	8011912 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011794:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011796:	697a      	ldr	r2, [r7, #20]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	4619      	mov	r1, r3
 801179e:	4610      	mov	r0, r2
 80117a0:	f7fe fb50 	bl	800fe44 <clust2sect>
 80117a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d104      	bne.n	80117b6 <f_read+0x11a>
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2202      	movs	r2, #2
 80117b0:	755a      	strb	r2, [r3, #21]
 80117b2:	2302      	movs	r3, #2
 80117b4:	e0ad      	b.n	8011912 <f_read+0x276>
			sect += csect;
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	4413      	add	r3, r2
 80117bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	0a5b      	lsrs	r3, r3, #9
 80117c2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80117c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d039      	beq.n	801183e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80117ca:	69fa      	ldr	r2, [r7, #28]
 80117cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ce:	4413      	add	r3, r2
 80117d0:	697a      	ldr	r2, [r7, #20]
 80117d2:	8952      	ldrh	r2, [r2, #10]
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d905      	bls.n	80117e4 <f_read+0x148>
					cc = fs->csize - csect;
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	895b      	ldrh	r3, [r3, #10]
 80117dc:	461a      	mov	r2, r3
 80117de:	69fb      	ldr	r3, [r7, #28]
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	7858      	ldrb	r0, [r3, #1]
 80117e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ea:	69ba      	ldr	r2, [r7, #24]
 80117ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80117ee:	f7fd ff7f 	bl	800f6f0 <disk_read>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d004      	beq.n	8011802 <f_read+0x166>
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2201      	movs	r2, #1
 80117fc:	755a      	strb	r2, [r3, #21]
 80117fe:	2301      	movs	r3, #1
 8011800:	e087      	b.n	8011912 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	7d1b      	ldrb	r3, [r3, #20]
 8011806:	b25b      	sxtb	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	da14      	bge.n	8011836 <f_read+0x19a>
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	6a1a      	ldr	r2, [r3, #32]
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011816:	429a      	cmp	r2, r3
 8011818:	d90d      	bls.n	8011836 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6a1a      	ldr	r2, [r3, #32]
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	025b      	lsls	r3, r3, #9
 8011824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011826:	18d0      	adds	r0, r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	3330      	adds	r3, #48	@ 0x30
 801182c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011830:	4619      	mov	r1, r3
 8011832:	f7fe f83d 	bl	800f8b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011838:	025b      	lsls	r3, r3, #9
 801183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801183c:	e050      	b.n	80118e0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	6a1b      	ldr	r3, [r3, #32]
 8011842:	69ba      	ldr	r2, [r7, #24]
 8011844:	429a      	cmp	r2, r3
 8011846:	d02e      	beq.n	80118a6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	7d1b      	ldrb	r3, [r3, #20]
 801184c:	b25b      	sxtb	r3, r3
 801184e:	2b00      	cmp	r3, #0
 8011850:	da18      	bge.n	8011884 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	7858      	ldrb	r0, [r3, #1]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	6a1a      	ldr	r2, [r3, #32]
 8011860:	2301      	movs	r3, #1
 8011862:	f7fd ff65 	bl	800f730 <disk_write>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d004      	beq.n	8011876 <f_read+0x1da>
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2201      	movs	r2, #1
 8011870:	755a      	strb	r2, [r3, #21]
 8011872:	2301      	movs	r3, #1
 8011874:	e04d      	b.n	8011912 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	7d1b      	ldrb	r3, [r3, #20]
 801187a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801187e:	b2da      	uxtb	r2, r3
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	7858      	ldrb	r0, [r3, #1]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801188e:	2301      	movs	r3, #1
 8011890:	69ba      	ldr	r2, [r7, #24]
 8011892:	f7fd ff2d 	bl	800f6f0 <disk_read>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d004      	beq.n	80118a6 <f_read+0x20a>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2201      	movs	r2, #1
 80118a0:	755a      	strb	r2, [r3, #21]
 80118a2:	2301      	movs	r3, #1
 80118a4:	e035      	b.n	8011912 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	69ba      	ldr	r2, [r7, #24]
 80118aa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	699b      	ldr	r3, [r3, #24]
 80118b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118b4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80118b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80118ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d901      	bls.n	80118c6 <f_read+0x22a>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	699b      	ldr	r3, [r3, #24]
 80118d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118d4:	4413      	add	r3, r2
 80118d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118d8:	4619      	mov	r1, r3
 80118da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80118dc:	f7fd ffe8 	bl	800f8b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80118e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e4:	4413      	add	r3, r2
 80118e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	699a      	ldr	r2, [r3, #24]
 80118ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ee:	441a      	add	r2, r3
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	619a      	str	r2, [r3, #24]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fa:	441a      	add	r2, r3
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	601a      	str	r2, [r3, #0]
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	f47f af01 	bne.w	8011712 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011910:	2300      	movs	r3, #0
}
 8011912:	4618      	mov	r0, r3
 8011914:	3738      	adds	r7, #56	@ 0x38
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b08c      	sub	sp, #48	@ 0x30
 801191e:	af00      	add	r7, sp, #0
 8011920:	60f8      	str	r0, [r7, #12]
 8011922:	60b9      	str	r1, [r7, #8]
 8011924:	607a      	str	r2, [r7, #4]
 8011926:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2200      	movs	r2, #0
 8011930:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f107 0210 	add.w	r2, r7, #16
 8011938:	4611      	mov	r1, r2
 801193a:	4618      	mov	r0, r3
 801193c:	f7ff fc78 	bl	8011230 <validate>
 8011940:	4603      	mov	r3, r0
 8011942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <f_write+0x44>
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	7d5b      	ldrb	r3, [r3, #21]
 8011952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801195a:	2b00      	cmp	r3, #0
 801195c:	d002      	beq.n	8011964 <f_write+0x4a>
 801195e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011962:	e14b      	b.n	8011bfc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	7d1b      	ldrb	r3, [r3, #20]
 8011968:	f003 0302 	and.w	r3, r3, #2
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <f_write+0x5a>
 8011970:	2307      	movs	r3, #7
 8011972:	e143      	b.n	8011bfc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	699a      	ldr	r2, [r3, #24]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	441a      	add	r2, r3
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	699b      	ldr	r3, [r3, #24]
 8011980:	429a      	cmp	r2, r3
 8011982:	f080 812d 	bcs.w	8011be0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	699b      	ldr	r3, [r3, #24]
 801198a:	43db      	mvns	r3, r3
 801198c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801198e:	e127      	b.n	8011be0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	699b      	ldr	r3, [r3, #24]
 8011994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011998:	2b00      	cmp	r3, #0
 801199a:	f040 80e3 	bne.w	8011b64 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	0a5b      	lsrs	r3, r3, #9
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	8952      	ldrh	r2, [r2, #10]
 80119a8:	3a01      	subs	r2, #1
 80119aa:	4013      	ands	r3, r2
 80119ac:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d143      	bne.n	8011a3c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	699b      	ldr	r3, [r3, #24]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d10c      	bne.n	80119d6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80119c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d11a      	bne.n	80119fe <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2100      	movs	r1, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fe fc4e 	bl	801026e <create_chain>
 80119d2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80119d4:	e013      	b.n	80119fe <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d007      	beq.n	80119ee <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	4619      	mov	r1, r3
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f7fe fcda 	bl	801039e <clmt_clust>
 80119ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 80119ec:	e007      	b.n	80119fe <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	69db      	ldr	r3, [r3, #28]
 80119f4:	4619      	mov	r1, r3
 80119f6:	4610      	mov	r0, r2
 80119f8:	f7fe fc39 	bl	801026e <create_chain>
 80119fc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80119fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	f000 80f2 	beq.w	8011bea <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d104      	bne.n	8011a16 <f_write+0xfc>
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2202      	movs	r2, #2
 8011a10:	755a      	strb	r2, [r3, #21]
 8011a12:	2302      	movs	r3, #2
 8011a14:	e0f2      	b.n	8011bfc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a1c:	d104      	bne.n	8011a28 <f_write+0x10e>
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2201      	movs	r2, #1
 8011a22:	755a      	strb	r2, [r3, #21]
 8011a24:	2301      	movs	r3, #1
 8011a26:	e0e9      	b.n	8011bfc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a2c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	689b      	ldr	r3, [r3, #8]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d102      	bne.n	8011a3c <f_write+0x122>
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a3a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
 8011a40:	b25b      	sxtb	r3, r3
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	da18      	bge.n	8011a78 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	7858      	ldrb	r0, [r3, #1]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	6a1a      	ldr	r2, [r3, #32]
 8011a54:	2301      	movs	r3, #1
 8011a56:	f7fd fe6b 	bl	800f730 <disk_write>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d004      	beq.n	8011a6a <f_write+0x150>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2201      	movs	r2, #1
 8011a64:	755a      	strb	r2, [r3, #21]
 8011a66:	2301      	movs	r3, #1
 8011a68:	e0c8      	b.n	8011bfc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	7d1b      	ldrb	r3, [r3, #20]
 8011a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011a78:	693a      	ldr	r2, [r7, #16]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	69db      	ldr	r3, [r3, #28]
 8011a7e:	4619      	mov	r1, r3
 8011a80:	4610      	mov	r0, r2
 8011a82:	f7fe f9df 	bl	800fe44 <clust2sect>
 8011a86:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d104      	bne.n	8011a98 <f_write+0x17e>
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2202      	movs	r2, #2
 8011a92:	755a      	strb	r2, [r3, #21]
 8011a94:	2302      	movs	r3, #2
 8011a96:	e0b1      	b.n	8011bfc <f_write+0x2e2>
			sect += csect;
 8011a98:	697a      	ldr	r2, [r7, #20]
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	0a5b      	lsrs	r3, r3, #9
 8011aa4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011aa6:	6a3b      	ldr	r3, [r7, #32]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d03c      	beq.n	8011b26 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011aac:	69ba      	ldr	r2, [r7, #24]
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	693a      	ldr	r2, [r7, #16]
 8011ab4:	8952      	ldrh	r2, [r2, #10]
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d905      	bls.n	8011ac6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	895b      	ldrh	r3, [r3, #10]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	1ad3      	subs	r3, r2, r3
 8011ac4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	7858      	ldrb	r0, [r3, #1]
 8011aca:	6a3b      	ldr	r3, [r7, #32]
 8011acc:	697a      	ldr	r2, [r7, #20]
 8011ace:	69f9      	ldr	r1, [r7, #28]
 8011ad0:	f7fd fe2e 	bl	800f730 <disk_write>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d004      	beq.n	8011ae4 <f_write+0x1ca>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2201      	movs	r2, #1
 8011ade:	755a      	strb	r2, [r3, #21]
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	e08b      	b.n	8011bfc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	6a1a      	ldr	r2, [r3, #32]
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	6a3a      	ldr	r2, [r7, #32]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d915      	bls.n	8011b1e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	6a1a      	ldr	r2, [r3, #32]
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	025b      	lsls	r3, r3, #9
 8011b02:	69fa      	ldr	r2, [r7, #28]
 8011b04:	4413      	add	r3, r2
 8011b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	f7fd fed0 	bl	800f8b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	7d1b      	ldrb	r3, [r3, #20]
 8011b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011b1e:	6a3b      	ldr	r3, [r7, #32]
 8011b20:	025b      	lsls	r3, r3, #9
 8011b22:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011b24:	e03f      	b.n	8011ba6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	6a1b      	ldr	r3, [r3, #32]
 8011b2a:	697a      	ldr	r2, [r7, #20]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d016      	beq.n	8011b5e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	699a      	ldr	r2, [r3, #24]
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d210      	bcs.n	8011b5e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	7858      	ldrb	r0, [r3, #1]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b46:	2301      	movs	r3, #1
 8011b48:	697a      	ldr	r2, [r7, #20]
 8011b4a:	f7fd fdd1 	bl	800f6f0 <disk_read>
 8011b4e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d004      	beq.n	8011b5e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2201      	movs	r2, #1
 8011b58:	755a      	strb	r2, [r3, #21]
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e04e      	b.n	8011bfc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	697a      	ldr	r2, [r7, #20]
 8011b62:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	699b      	ldr	r3, [r3, #24]
 8011b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b6c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011b70:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d901      	bls.n	8011b7e <f_write+0x264>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	699b      	ldr	r3, [r3, #24]
 8011b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b8c:	4413      	add	r3, r2
 8011b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b90:	69f9      	ldr	r1, [r7, #28]
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fd fe8c 	bl	800f8b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	7d1b      	ldrb	r3, [r3, #20]
 8011b9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011ba0:	b2da      	uxtb	r2, r3
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011ba6:	69fa      	ldr	r2, [r7, #28]
 8011ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011baa:	4413      	add	r3, r2
 8011bac:	61fb      	str	r3, [r7, #28]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	699a      	ldr	r2, [r3, #24]
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb4:	441a      	add	r2, r3
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	619a      	str	r2, [r3, #24]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	68da      	ldr	r2, [r3, #12]
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	699b      	ldr	r3, [r3, #24]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	bf38      	it	cc
 8011bc6:	461a      	movcc	r2, r3
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	60da      	str	r2, [r3, #12]
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd2:	441a      	add	r2, r3
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	601a      	str	r2, [r3, #0]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bdc:	1ad3      	subs	r3, r2, r3
 8011bde:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f47f aed4 	bne.w	8011990 <f_write+0x76>
 8011be8:	e000      	b.n	8011bec <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011bea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	7d1b      	ldrb	r3, [r3, #20]
 8011bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3730      	adds	r7, #48	@ 0x30
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b086      	sub	sp, #24
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f107 0208 	add.w	r2, r7, #8
 8011c12:	4611      	mov	r1, r2
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7ff fb0b 	bl	8011230 <validate>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d168      	bne.n	8011cf6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	7d1b      	ldrb	r3, [r3, #20]
 8011c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d062      	beq.n	8011cf6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	7d1b      	ldrb	r3, [r3, #20]
 8011c34:	b25b      	sxtb	r3, r3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	da15      	bge.n	8011c66 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	7858      	ldrb	r0, [r3, #1]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6a1a      	ldr	r2, [r3, #32]
 8011c48:	2301      	movs	r3, #1
 8011c4a:	f7fd fd71 	bl	800f730 <disk_write>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d001      	beq.n	8011c58 <f_sync+0x54>
 8011c54:	2301      	movs	r3, #1
 8011c56:	e04f      	b.n	8011cf8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	7d1b      	ldrb	r3, [r3, #20]
 8011c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011c66:	f7fb fa3f 	bl	800d0e8 <get_fattime>
 8011c6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c72:	4619      	mov	r1, r3
 8011c74:	4610      	mov	r0, r2
 8011c76:	f7fe f849 	bl	800fd0c <move_window>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011c7e:	7dfb      	ldrb	r3, [r7, #23]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d138      	bne.n	8011cf6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	330b      	adds	r3, #11
 8011c8e:	781a      	ldrb	r2, [r3, #0]
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	330b      	adds	r3, #11
 8011c94:	f042 0220 	orr.w	r2, r2, #32
 8011c98:	b2d2      	uxtb	r2, r2
 8011c9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6818      	ldr	r0, [r3, #0]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	68f9      	ldr	r1, [r7, #12]
 8011ca8:	f7fe fd53 	bl	8010752 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f103 021c 	add.w	r2, r3, #28
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	4610      	mov	r0, r2
 8011cba:	f7fd fdcd 	bl	800f858 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	3316      	adds	r3, #22
 8011cc2:	6939      	ldr	r1, [r7, #16]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fd fdc7 	bl	800f858 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	3312      	adds	r3, #18
 8011cce:	2100      	movs	r1, #0
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fd fda6 	bl	800f822 <st_word>
					fs->wflag = 1;
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	2201      	movs	r2, #1
 8011cda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fe f842 	bl	800fd68 <sync_fs>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	7d1b      	ldrb	r3, [r3, #20]
 8011cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3718      	adds	r7, #24
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ff ff7b 	bl	8011c04 <f_sync>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d118      	bne.n	8011d4a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f107 0208 	add.w	r2, r7, #8
 8011d1e:	4611      	mov	r1, r2
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff fa85 	bl	8011230 <validate>
 8011d26:	4603      	mov	r3, r0
 8011d28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011d2a:	7bfb      	ldrb	r3, [r7, #15]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d10c      	bne.n	8011d4a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	691b      	ldr	r3, [r3, #16]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fd ff45 	bl	800fbc4 <dec_lock>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011d3e:	7bfb      	ldrb	r3, [r7, #15]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d102      	bne.n	8011d4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3710      	adds	r7, #16
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b090      	sub	sp, #64	@ 0x40
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f107 0208 	add.w	r2, r7, #8
 8011d64:	4611      	mov	r1, r2
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff fa62 	bl	8011230 <validate>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011d72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d103      	bne.n	8011d82 <f_lseek+0x2e>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	7d5b      	ldrb	r3, [r3, #21]
 8011d7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011d82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d002      	beq.n	8011d90 <f_lseek+0x3c>
 8011d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011d8e:	e1e6      	b.n	801215e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	f000 80d1 	beq.w	8011f3c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011da0:	d15a      	bne.n	8011e58 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011da6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011daa:	1d1a      	adds	r2, r3, #4
 8011dac:	627a      	str	r2, [r7, #36]	@ 0x24
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	617b      	str	r3, [r7, #20]
 8011db2:	2302      	movs	r3, #2
 8011db4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d03a      	beq.n	8011e38 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dc4:	613b      	str	r3, [r7, #16]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dcc:	3302      	adds	r3, #2
 8011dce:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dd2:	60fb      	str	r3, [r7, #12]
 8011dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fe f84f 	bl	800fe82 <get_fat>
 8011de4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d804      	bhi.n	8011df6 <f_lseek+0xa2>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2202      	movs	r2, #2
 8011df0:	755a      	strb	r2, [r3, #21]
 8011df2:	2302      	movs	r3, #2
 8011df4:	e1b3      	b.n	801215e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfc:	d104      	bne.n	8011e08 <f_lseek+0xb4>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2201      	movs	r2, #1
 8011e02:	755a      	strb	r2, [r3, #21]
 8011e04:	2301      	movs	r3, #1
 8011e06:	e1aa      	b.n	801215e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d0de      	beq.n	8011dd0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d809      	bhi.n	8011e2e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1c:	1d1a      	adds	r2, r3, #4
 8011e1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e26:	1d1a      	adds	r2, r3, #4
 8011e28:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e2a:	693a      	ldr	r2, [r7, #16]
 8011e2c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	695b      	ldr	r3, [r3, #20]
 8011e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d3c4      	bcc.n	8011dc2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e3e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d803      	bhi.n	8011e50 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	601a      	str	r2, [r3, #0]
 8011e4e:	e184      	b.n	801215a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011e50:	2311      	movs	r3, #17
 8011e52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011e56:	e180      	b.n	801215a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	683a      	ldr	r2, [r7, #0]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d902      	bls.n	8011e68 <f_lseek+0x114>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	683a      	ldr	r2, [r7, #0]
 8011e6c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f000 8172 	beq.w	801215a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fe fa8e 	bl	801039e <clmt_clust>
 8011e82:	4602      	mov	r2, r0
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	69db      	ldr	r3, [r3, #28]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	4610      	mov	r0, r2
 8011e92:	f7fd ffd7 	bl	800fe44 <clust2sect>
 8011e96:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d104      	bne.n	8011ea8 <f_lseek+0x154>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2202      	movs	r2, #2
 8011ea2:	755a      	strb	r2, [r3, #21]
 8011ea4:	2302      	movs	r3, #2
 8011ea6:	e15a      	b.n	801215e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	3b01      	subs	r3, #1
 8011eac:	0a5b      	lsrs	r3, r3, #9
 8011eae:	68ba      	ldr	r2, [r7, #8]
 8011eb0:	8952      	ldrh	r2, [r2, #10]
 8011eb2:	3a01      	subs	r2, #1
 8011eb4:	4013      	ands	r3, r2
 8011eb6:	69ba      	ldr	r2, [r7, #24]
 8011eb8:	4413      	add	r3, r2
 8011eba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f000 8148 	beq.w	801215a <f_lseek+0x406>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	69ba      	ldr	r2, [r7, #24]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	f000 8142 	beq.w	801215a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	7d1b      	ldrb	r3, [r3, #20]
 8011eda:	b25b      	sxtb	r3, r3
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	da18      	bge.n	8011f12 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	7858      	ldrb	r0, [r3, #1]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6a1a      	ldr	r2, [r3, #32]
 8011eee:	2301      	movs	r3, #1
 8011ef0:	f7fd fc1e 	bl	800f730 <disk_write>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d004      	beq.n	8011f04 <f_lseek+0x1b0>
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2201      	movs	r2, #1
 8011efe:	755a      	strb	r2, [r3, #21]
 8011f00:	2301      	movs	r3, #1
 8011f02:	e12c      	b.n	801215e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	7d1b      	ldrb	r3, [r3, #20]
 8011f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f0c:	b2da      	uxtb	r2, r3
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	7858      	ldrb	r0, [r3, #1]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	69ba      	ldr	r2, [r7, #24]
 8011f20:	f7fd fbe6 	bl	800f6f0 <disk_read>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d004      	beq.n	8011f34 <f_lseek+0x1e0>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	755a      	strb	r2, [r3, #21]
 8011f30:	2301      	movs	r3, #1
 8011f32:	e114      	b.n	801215e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	69ba      	ldr	r2, [r7, #24]
 8011f38:	621a      	str	r2, [r3, #32]
 8011f3a:	e10e      	b.n	801215a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d908      	bls.n	8011f58 <f_lseek+0x204>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	7d1b      	ldrb	r3, [r3, #20]
 8011f4a:	f003 0302 	and.w	r3, r3, #2
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d102      	bne.n	8011f58 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	699b      	ldr	r3, [r3, #24]
 8011f5c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f66:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	f000 80a7 	beq.w	80120be <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	895b      	ldrh	r3, [r3, #10]
 8011f74:	025b      	lsls	r3, r3, #9
 8011f76:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011f78:	6a3b      	ldr	r3, [r7, #32]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d01b      	beq.n	8011fb6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	1e5a      	subs	r2, r3, #1
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8011f88:	6a3b      	ldr	r3, [r7, #32]
 8011f8a:	1e59      	subs	r1, r3, #1
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d30f      	bcc.n	8011fb6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011f96:	6a3b      	ldr	r3, [r7, #32]
 8011f98:	1e5a      	subs	r2, r3, #1
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	425b      	negs	r3, r3
 8011f9e:	401a      	ands	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	699b      	ldr	r3, [r3, #24]
 8011fa8:	683a      	ldr	r2, [r7, #0]
 8011faa:	1ad3      	subs	r3, r2, r3
 8011fac:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	69db      	ldr	r3, [r3, #28]
 8011fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011fb4:	e022      	b.n	8011ffc <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d119      	bne.n	8011ff6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2100      	movs	r1, #0
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7fe f951 	bl	801026e <create_chain>
 8011fcc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d104      	bne.n	8011fde <f_lseek+0x28a>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2202      	movs	r2, #2
 8011fd8:	755a      	strb	r2, [r3, #21]
 8011fda:	2302      	movs	r3, #2
 8011fdc:	e0bf      	b.n	801215e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe4:	d104      	bne.n	8011ff0 <f_lseek+0x29c>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	755a      	strb	r2, [r3, #21]
 8011fec:	2301      	movs	r3, #1
 8011fee:	e0b6      	b.n	801215e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ff4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ffa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d05d      	beq.n	80120be <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8012002:	e03a      	b.n	801207a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8012004:	683a      	ldr	r2, [r7, #0]
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	603b      	str	r3, [r7, #0]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	699a      	ldr	r2, [r3, #24]
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	441a      	add	r2, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	7d1b      	ldrb	r3, [r3, #20]
 801201c:	f003 0302 	and.w	r3, r3, #2
 8012020:	2b00      	cmp	r3, #0
 8012022:	d00b      	beq.n	801203c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe f920 	bl	801026e <create_chain>
 801202e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012032:	2b00      	cmp	r3, #0
 8012034:	d108      	bne.n	8012048 <f_lseek+0x2f4>
							ofs = 0; break;
 8012036:	2300      	movs	r3, #0
 8012038:	603b      	str	r3, [r7, #0]
 801203a:	e022      	b.n	8012082 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012040:	4618      	mov	r0, r3
 8012042:	f7fd ff1e 	bl	800fe82 <get_fat>
 8012046:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204e:	d104      	bne.n	801205a <f_lseek+0x306>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	755a      	strb	r2, [r3, #21]
 8012056:	2301      	movs	r3, #1
 8012058:	e081      	b.n	801215e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801205c:	2b01      	cmp	r3, #1
 801205e:	d904      	bls.n	801206a <f_lseek+0x316>
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	695b      	ldr	r3, [r3, #20]
 8012064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012066:	429a      	cmp	r2, r3
 8012068:	d304      	bcc.n	8012074 <f_lseek+0x320>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2202      	movs	r2, #2
 801206e:	755a      	strb	r2, [r3, #21]
 8012070:	2302      	movs	r3, #2
 8012072:	e074      	b.n	801215e <f_lseek+0x40a>
					fp->clust = clst;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012078:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801207a:	683a      	ldr	r2, [r7, #0]
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	429a      	cmp	r2, r3
 8012080:	d8c0      	bhi.n	8012004 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	699a      	ldr	r2, [r3, #24]
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	441a      	add	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012094:	2b00      	cmp	r3, #0
 8012096:	d012      	beq.n	80120be <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801209c:	4618      	mov	r0, r3
 801209e:	f7fd fed1 	bl	800fe44 <clust2sect>
 80120a2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80120a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d104      	bne.n	80120b4 <f_lseek+0x360>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2202      	movs	r2, #2
 80120ae:	755a      	strb	r2, [r3, #21]
 80120b0:	2302      	movs	r3, #2
 80120b2:	e054      	b.n	801215e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	0a5b      	lsrs	r3, r3, #9
 80120b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120ba:	4413      	add	r3, r2
 80120bc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	699a      	ldr	r2, [r3, #24]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d90a      	bls.n	80120e0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	699a      	ldr	r2, [r3, #24]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	7d1b      	ldrb	r3, [r3, #20]
 80120d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d036      	beq.n	801215a <f_lseek+0x406>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6a1b      	ldr	r3, [r3, #32]
 80120f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d031      	beq.n	801215a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	7d1b      	ldrb	r3, [r3, #20]
 80120fa:	b25b      	sxtb	r3, r3
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	da18      	bge.n	8012132 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	7858      	ldrb	r0, [r3, #1]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a1a      	ldr	r2, [r3, #32]
 801210e:	2301      	movs	r3, #1
 8012110:	f7fd fb0e 	bl	800f730 <disk_write>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d004      	beq.n	8012124 <f_lseek+0x3d0>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2201      	movs	r2, #1
 801211e:	755a      	strb	r2, [r3, #21]
 8012120:	2301      	movs	r3, #1
 8012122:	e01c      	b.n	801215e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	7d1b      	ldrb	r3, [r3, #20]
 8012128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801212c:	b2da      	uxtb	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	7858      	ldrb	r0, [r3, #1]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801213c:	2301      	movs	r3, #1
 801213e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012140:	f7fd fad6 	bl	800f6f0 <disk_read>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	d004      	beq.n	8012154 <f_lseek+0x400>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2201      	movs	r2, #1
 801214e:	755a      	strb	r2, [r3, #21]
 8012150:	2301      	movs	r3, #1
 8012152:	e004      	b.n	801215e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012158:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801215a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801215e:	4618      	mov	r0, r3
 8012160:	3740      	adds	r7, #64	@ 0x40
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b086      	sub	sp, #24
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d101      	bne.n	801217a <f_opendir+0x14>
 8012176:	2309      	movs	r3, #9
 8012178:	e064      	b.n	8012244 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801217e:	f107 010c 	add.w	r1, r7, #12
 8012182:	463b      	mov	r3, r7
 8012184:	2200      	movs	r2, #0
 8012186:	4618      	mov	r0, r3
 8012188:	f7fe fe06 	bl	8010d98 <find_volume>
 801218c:	4603      	mov	r3, r0
 801218e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012190:	7dfb      	ldrb	r3, [r7, #23]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d14f      	bne.n	8012236 <f_opendir+0xd0>
		obj->fs = fs;
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	4619      	mov	r1, r3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f7fe fced 	bl	8010b80 <follow_path>
 80121a6:	4603      	mov	r3, r0
 80121a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80121aa:	7dfb      	ldrb	r3, [r7, #23]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d13d      	bne.n	801222c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80121b6:	b25b      	sxtb	r3, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	db12      	blt.n	80121e2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	799b      	ldrb	r3, [r3, #6]
 80121c0:	f003 0310 	and.w	r3, r3, #16
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00a      	beq.n	80121de <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6a1b      	ldr	r3, [r3, #32]
 80121ce:	4619      	mov	r1, r3
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7fe fa9f 	bl	8010714 <ld_clust>
 80121d6:	4602      	mov	r2, r0
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	609a      	str	r2, [r3, #8]
 80121dc:	e001      	b.n	80121e2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80121de:	2305      	movs	r3, #5
 80121e0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80121e2:	7dfb      	ldrb	r3, [r7, #23]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d121      	bne.n	801222c <f_opendir+0xc6>
				obj->id = fs->id;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	88da      	ldrh	r2, [r3, #6]
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80121f0:	2100      	movs	r1, #0
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f7fe f907 	bl	8010406 <dir_sdi>
 80121f8:	4603      	mov	r3, r0
 80121fa:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80121fc:	7dfb      	ldrb	r3, [r7, #23]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d114      	bne.n	801222c <f_opendir+0xc6>
					if (obj->sclust) {
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	689b      	ldr	r3, [r3, #8]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d00d      	beq.n	8012226 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801220a:	2100      	movs	r1, #0
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7fd fc4b 	bl	800faa8 <inc_lock>
 8012212:	4602      	mov	r2, r0
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	691b      	ldr	r3, [r3, #16]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d105      	bne.n	801222c <f_opendir+0xc6>
 8012220:	2312      	movs	r3, #18
 8012222:	75fb      	strb	r3, [r7, #23]
 8012224:	e002      	b.n	801222c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	2200      	movs	r2, #0
 801222a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801222c:	7dfb      	ldrb	r3, [r7, #23]
 801222e:	2b04      	cmp	r3, #4
 8012230:	d101      	bne.n	8012236 <f_opendir+0xd0>
 8012232:	2305      	movs	r3, #5
 8012234:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <f_opendir+0xdc>
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	2200      	movs	r2, #0
 8012240:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012242:	7dfb      	ldrb	r3, [r7, #23]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f107 0208 	add.w	r2, r7, #8
 801225a:	4611      	mov	r1, r2
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe ffe7 	bl	8011230 <validate>
 8012262:	4603      	mov	r3, r0
 8012264:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012266:	7bfb      	ldrb	r3, [r7, #15]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d110      	bne.n	801228e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	691b      	ldr	r3, [r3, #16]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d006      	beq.n	8012282 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	691b      	ldr	r3, [r3, #16]
 8012278:	4618      	mov	r0, r3
 801227a:	f7fd fca3 	bl	800fbc4 <dec_lock>
 801227e:	4603      	mov	r3, r0
 8012280:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012282:	7bfb      	ldrb	r3, [r7, #15]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d102      	bne.n	801228e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012290:	4618      	mov	r0, r3
 8012292:	3710      	adds	r7, #16
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f107 0208 	add.w	r2, r7, #8
 80122a8:	4611      	mov	r1, r2
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fe ffc0 	bl	8011230 <validate>
 80122b0:	4603      	mov	r3, r0
 80122b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80122b4:	7bfb      	ldrb	r3, [r7, #15]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d126      	bne.n	8012308 <f_readdir+0x70>
		if (!fno) {
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d106      	bne.n	80122ce <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80122c0:	2100      	movs	r1, #0
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f7fe f89f 	bl	8010406 <dir_sdi>
 80122c8:	4603      	mov	r3, r0
 80122ca:	73fb      	strb	r3, [r7, #15]
 80122cc:	e01c      	b.n	8012308 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80122ce:	2100      	movs	r1, #0
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7fe fa5e 	bl	8010792 <dir_read>
 80122d6:	4603      	mov	r3, r0
 80122d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80122da:	7bfb      	ldrb	r3, [r7, #15]
 80122dc:	2b04      	cmp	r3, #4
 80122de:	d101      	bne.n	80122e4 <f_readdir+0x4c>
 80122e0:	2300      	movs	r3, #0
 80122e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d10e      	bne.n	8012308 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80122ea:	6839      	ldr	r1, [r7, #0]
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f7fe fb52 	bl	8010996 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80122f2:	2100      	movs	r1, #0
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7fe f901 	bl	80104fc <dir_next>
 80122fa:	4603      	mov	r3, r0
 80122fc:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80122fe:	7bfb      	ldrb	r3, [r7, #15]
 8012300:	2b04      	cmp	r3, #4
 8012302:	d101      	bne.n	8012308 <f_readdir+0x70>
 8012304:	2300      	movs	r3, #0
 8012306:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012308:	7bfb      	ldrb	r3, [r7, #15]
}
 801230a:	4618      	mov	r0, r3
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012312:	b580      	push	{r7, lr}
 8012314:	b090      	sub	sp, #64	@ 0x40
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801231c:	f107 010c 	add.w	r1, r7, #12
 8012320:	1d3b      	adds	r3, r7, #4
 8012322:	2200      	movs	r2, #0
 8012324:	4618      	mov	r0, r3
 8012326:	f7fe fd37 	bl	8010d98 <find_volume>
 801232a:	4603      	mov	r3, r0
 801232c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8012330:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012334:	2b00      	cmp	r3, #0
 8012336:	d11f      	bne.n	8012378 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012338:	687a      	ldr	r2, [r7, #4]
 801233a:	f107 030c 	add.w	r3, r7, #12
 801233e:	4611      	mov	r1, r2
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe fc1d 	bl	8010b80 <follow_path>
 8012346:	4603      	mov	r3, r0
 8012348:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801234c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012350:	2b00      	cmp	r3, #0
 8012352:	d111      	bne.n	8012378 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012354:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012358:	b25b      	sxtb	r3, r3
 801235a:	2b00      	cmp	r3, #0
 801235c:	da03      	bge.n	8012366 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801235e:	2306      	movs	r3, #6
 8012360:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012364:	e008      	b.n	8012378 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d005      	beq.n	8012378 <f_stat+0x66>
 801236c:	f107 030c 	add.w	r3, r7, #12
 8012370:	6839      	ldr	r1, [r7, #0]
 8012372:	4618      	mov	r0, r3
 8012374:	f7fe fb0f 	bl	8010996 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8012378:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801237c:	4618      	mov	r0, r3
 801237e:	3740      	adds	r7, #64	@ 0x40
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b09e      	sub	sp, #120	@ 0x78
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801238c:	2300      	movs	r3, #0
 801238e:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012390:	f107 010c 	add.w	r1, r7, #12
 8012394:	1d3b      	adds	r3, r7, #4
 8012396:	2202      	movs	r2, #2
 8012398:	4618      	mov	r0, r3
 801239a:	f7fe fcfd 	bl	8010d98 <find_volume>
 801239e:	4603      	mov	r3, r0
 80123a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 80123a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f040 808e 	bne.w	80124ce <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80123b8:	4611      	mov	r1, r2
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fe fbe0 	bl	8010b80 <follow_path>
 80123c0:	4603      	mov	r3, r0
 80123c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80123c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d108      	bne.n	80123e0 <f_unlink+0x5c>
 80123ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80123d2:	2102      	movs	r1, #2
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fd fae9 	bl	800f9ac <chk_lock>
 80123da:	4603      	mov	r3, r0
 80123dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80123e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d172      	bne.n	80124ce <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80123e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80123ec:	b25b      	sxtb	r3, r3
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	da03      	bge.n	80123fa <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80123f2:	2306      	movs	r3, #6
 80123f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80123f8:	e008      	b.n	801240c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80123fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80123fe:	f003 0301 	and.w	r3, r3, #1
 8012402:	2b00      	cmp	r3, #0
 8012404:	d002      	beq.n	801240c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012406:	2307      	movs	r3, #7
 8012408:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 801240c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012410:	2b00      	cmp	r3, #0
 8012412:	d134      	bne.n	801247e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012418:	4611      	mov	r1, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f7fe f97a 	bl	8010714 <ld_clust>
 8012420:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012422:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8012426:	f003 0310 	and.w	r3, r3, #16
 801242a:	2b00      	cmp	r3, #0
 801242c:	d027      	beq.n	801247e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8012432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012434:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8012436:	f107 0310 	add.w	r3, r7, #16
 801243a:	2100      	movs	r1, #0
 801243c:	4618      	mov	r0, r3
 801243e:	f7fd ffe2 	bl	8010406 <dir_sdi>
 8012442:	4603      	mov	r3, r0
 8012444:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8012448:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801244c:	2b00      	cmp	r3, #0
 801244e:	d116      	bne.n	801247e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012450:	f107 0310 	add.w	r3, r7, #16
 8012454:	2100      	movs	r1, #0
 8012456:	4618      	mov	r0, r3
 8012458:	f7fe f99b 	bl	8010792 <dir_read>
 801245c:	4603      	mov	r3, r0
 801245e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012462:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012466:	2b00      	cmp	r3, #0
 8012468:	d102      	bne.n	8012470 <f_unlink+0xec>
 801246a:	2307      	movs	r3, #7
 801246c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012470:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012474:	2b04      	cmp	r3, #4
 8012476:	d102      	bne.n	801247e <f_unlink+0xfa>
 8012478:	2300      	movs	r3, #0
 801247a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801247e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012482:	2b00      	cmp	r3, #0
 8012484:	d123      	bne.n	80124ce <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012486:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801248a:	4618      	mov	r0, r3
 801248c:	f7fe fa65 	bl	801095a <dir_remove>
 8012490:	4603      	mov	r3, r0
 8012492:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012496:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801249a:	2b00      	cmp	r3, #0
 801249c:	d10c      	bne.n	80124b8 <f_unlink+0x134>
 801249e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d009      	beq.n	80124b8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80124a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80124a8:	2200      	movs	r2, #0
 80124aa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fd fe79 	bl	80101a4 <remove_chain>
 80124b2:	4603      	mov	r3, r0
 80124b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80124b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d106      	bne.n	80124ce <f_unlink+0x14a>
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fd fc50 	bl	800fd68 <sync_fs>
 80124c8:	4603      	mov	r3, r0
 80124ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80124ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3778      	adds	r7, #120	@ 0x78
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 80124da:	b590      	push	{r4, r7, lr}
 80124dc:	b0a5      	sub	sp, #148	@ 0x94
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
 80124e2:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 80124e4:	463b      	mov	r3, r7
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7fe fbbb 	bl	8010c62 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 80124ec:	f107 0120 	add.w	r1, r7, #32
 80124f0:	1d3b      	adds	r3, r7, #4
 80124f2:	2202      	movs	r2, #2
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7fe fc4f 	bl	8010d98 <find_volume>
 80124fa:	4603      	mov	r3, r0
 80124fc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 8012500:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012504:	2b00      	cmp	r3, #0
 8012506:	f040 80db 	bne.w	80126c0 <f_rename+0x1e6>
		djo.obj.fs = fs;
 801250a:	6a3b      	ldr	r3, [r7, #32]
 801250c:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8012514:	4611      	mov	r1, r2
 8012516:	4618      	mov	r0, r3
 8012518:	f7fe fb32 	bl	8010b80 <follow_path>
 801251c:	4603      	mov	r3, r0
 801251e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8012522:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012526:	2b00      	cmp	r3, #0
 8012528:	d108      	bne.n	801253c <f_rename+0x62>
 801252a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801252e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d002      	beq.n	801253c <f_rename+0x62>
 8012536:	2306      	movs	r3, #6
 8012538:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 801253c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012540:	2b00      	cmp	r3, #0
 8012542:	d108      	bne.n	8012556 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 8012544:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8012548:	2102      	movs	r1, #2
 801254a:	4618      	mov	r0, r3
 801254c:	f7fd fa2e 	bl	800f9ac <chk_lock>
 8012550:	4603      	mov	r3, r0
 8012552:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8012556:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801255a:	2b00      	cmp	r3, #0
 801255c:	f040 80b0 	bne.w	80126c0 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8012560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012562:	f103 010b 	add.w	r1, r3, #11
 8012566:	f107 0308 	add.w	r3, r7, #8
 801256a:	2215      	movs	r2, #21
 801256c:	4618      	mov	r0, r3
 801256e:	f7fd f99f 	bl	800f8b0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8012572:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8012576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801257a:	2230      	movs	r2, #48	@ 0x30
 801257c:	4618      	mov	r0, r3
 801257e:	f7fd f997 	bl	800f8b0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8012582:	683a      	ldr	r2, [r7, #0]
 8012584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012588:	4611      	mov	r1, r2
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe faf8 	bl	8010b80 <follow_path>
 8012590:	4603      	mov	r3, r0
 8012592:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8012596:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801259a:	2b00      	cmp	r3, #0
 801259c:	d10c      	bne.n	80125b8 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 801259e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d105      	bne.n	80125b2 <f_rename+0xd8>
 80125a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80125a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d101      	bne.n	80125b2 <f_rename+0xd8>
 80125ae:	2304      	movs	r3, #4
 80125b0:	e000      	b.n	80125b4 <f_rename+0xda>
 80125b2:	2308      	movs	r3, #8
 80125b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 80125b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80125bc:	2b04      	cmp	r3, #4
 80125be:	d168      	bne.n	8012692 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 80125c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fe f996 	bl	80108f6 <dir_register>
 80125ca:	4603      	mov	r3, r0
 80125cc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 80125d0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d15c      	bne.n	8012692 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 80125d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 80125de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80125e2:	f103 000d 	add.w	r0, r3, #13
 80125e6:	f107 0308 	add.w	r3, r7, #8
 80125ea:	3302      	adds	r3, #2
 80125ec:	2213      	movs	r2, #19
 80125ee:	4619      	mov	r1, r3
 80125f0:	f7fd f95e 	bl	800f8b0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 80125f4:	7a3a      	ldrb	r2, [r7, #8]
 80125f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80125fa:	330b      	adds	r3, #11
 80125fc:	f042 0220 	orr.w	r2, r2, #32
 8012600:	b2d2      	uxtb	r2, r2
 8012602:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8012604:	6a3b      	ldr	r3, [r7, #32]
 8012606:	2201      	movs	r2, #1
 8012608:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 801260a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801260e:	330b      	adds	r3, #11
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	f003 0310 	and.w	r3, r3, #16
 8012616:	2b00      	cmp	r3, #0
 8012618:	d03b      	beq.n	8012692 <f_rename+0x1b8>
 801261a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801261c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801261e:	429a      	cmp	r2, r3
 8012620:	d037      	beq.n	8012692 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8012622:	6a3c      	ldr	r4, [r7, #32]
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe f872 	bl	8010714 <ld_clust>
 8012630:	4603      	mov	r3, r0
 8012632:	4619      	mov	r1, r3
 8012634:	4620      	mov	r0, r4
 8012636:	f7fd fc05 	bl	800fe44 <clust2sect>
 801263a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 801263e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012642:	2b00      	cmp	r3, #0
 8012644:	d103      	bne.n	801264e <f_rename+0x174>
								res = FR_INT_ERR;
 8012646:	2302      	movs	r3, #2
 8012648:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 801264c:	e021      	b.n	8012692 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 801264e:	6a3b      	ldr	r3, [r7, #32]
 8012650:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8012654:	4618      	mov	r0, r3
 8012656:	f7fd fb59 	bl	800fd0c <move_window>
 801265a:	4603      	mov	r3, r0
 801265c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8012660:	6a3b      	ldr	r3, [r7, #32]
 8012662:	3330      	adds	r3, #48	@ 0x30
 8012664:	3320      	adds	r3, #32
 8012666:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 801266a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801266e:	2b00      	cmp	r3, #0
 8012670:	d10f      	bne.n	8012692 <f_rename+0x1b8>
 8012672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012676:	3301      	adds	r3, #1
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b2e      	cmp	r3, #46	@ 0x2e
 801267c:	d109      	bne.n	8012692 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 801267e:	6a3b      	ldr	r3, [r7, #32]
 8012680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012682:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8012686:	4618      	mov	r0, r3
 8012688:	f7fe f863 	bl	8010752 <st_clust>
									fs->wflag = 1;
 801268c:	6a3b      	ldr	r3, [r7, #32]
 801268e:	2201      	movs	r2, #1
 8012690:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8012692:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012696:	2b00      	cmp	r3, #0
 8012698:	d112      	bne.n	80126c0 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 801269a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801269e:	4618      	mov	r0, r3
 80126a0:	f7fe f95b 	bl	801095a <dir_remove>
 80126a4:	4603      	mov	r3, r0
 80126a6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 80126aa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d106      	bne.n	80126c0 <f_rename+0x1e6>
					res = sync_fs(fs);
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fd fb57 	bl	800fd68 <sync_fs>
 80126ba:	4603      	mov	r3, r0
 80126bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80126c0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3794      	adds	r7, #148	@ 0x94
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd90      	pop	{r4, r7, pc}

080126cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80126cc:	b480      	push	{r7}
 80126ce:	b087      	sub	sp, #28
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	60f8      	str	r0, [r7, #12]
 80126d4:	60b9      	str	r1, [r7, #8]
 80126d6:	4613      	mov	r3, r2
 80126d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80126da:	2301      	movs	r3, #1
 80126dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80126e2:	4b1f      	ldr	r3, [pc, #124]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 80126e4:	7a5b      	ldrb	r3, [r3, #9]
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d131      	bne.n	8012750 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80126ec:	4b1c      	ldr	r3, [pc, #112]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 80126ee:	7a5b      	ldrb	r3, [r3, #9]
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	461a      	mov	r2, r3
 80126f4:	4b1a      	ldr	r3, [pc, #104]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 80126f6:	2100      	movs	r1, #0
 80126f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80126fa:	4b19      	ldr	r3, [pc, #100]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 80126fc:	7a5b      	ldrb	r3, [r3, #9]
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	4a17      	ldr	r2, [pc, #92]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	4413      	add	r3, r2
 8012706:	68fa      	ldr	r2, [r7, #12]
 8012708:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801270a:	4b15      	ldr	r3, [pc, #84]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 801270c:	7a5b      	ldrb	r3, [r3, #9]
 801270e:	b2db      	uxtb	r3, r3
 8012710:	461a      	mov	r2, r3
 8012712:	4b13      	ldr	r3, [pc, #76]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 8012714:	4413      	add	r3, r2
 8012716:	79fa      	ldrb	r2, [r7, #7]
 8012718:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801271a:	4b11      	ldr	r3, [pc, #68]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 801271c:	7a5b      	ldrb	r3, [r3, #9]
 801271e:	b2db      	uxtb	r3, r3
 8012720:	1c5a      	adds	r2, r3, #1
 8012722:	b2d1      	uxtb	r1, r2
 8012724:	4a0e      	ldr	r2, [pc, #56]	@ (8012760 <FATFS_LinkDriverEx+0x94>)
 8012726:	7251      	strb	r1, [r2, #9]
 8012728:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801272a:	7dbb      	ldrb	r3, [r7, #22]
 801272c:	3330      	adds	r3, #48	@ 0x30
 801272e:	b2da      	uxtb	r2, r3
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	3301      	adds	r3, #1
 8012738:	223a      	movs	r2, #58	@ 0x3a
 801273a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	3302      	adds	r3, #2
 8012740:	222f      	movs	r2, #47	@ 0x2f
 8012742:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	3303      	adds	r3, #3
 8012748:	2200      	movs	r2, #0
 801274a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801274c:	2300      	movs	r3, #0
 801274e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012750:	7dfb      	ldrb	r3, [r7, #23]
}
 8012752:	4618      	mov	r0, r3
 8012754:	371c      	adds	r7, #28
 8012756:	46bd      	mov	sp, r7
 8012758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275c:	4770      	bx	lr
 801275e:	bf00      	nop
 8012760:	20000840 	.word	0x20000840

08012764 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801276e:	2200      	movs	r2, #0
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7ff ffaa 	bl	80126cc <FATFS_LinkDriverEx>
 8012778:	4603      	mov	r3, r0
}
 801277a:	4618      	mov	r0, r3
 801277c:	3708      	adds	r7, #8
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
	...

08012784 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012788:	2201      	movs	r2, #1
 801278a:	490e      	ldr	r1, [pc, #56]	@ (80127c4 <MX_USB_HOST_Init+0x40>)
 801278c:	480e      	ldr	r0, [pc, #56]	@ (80127c8 <MX_USB_HOST_Init+0x44>)
 801278e:	f7fb fa89 	bl	800dca4 <USBH_Init>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	d001      	beq.n	801279c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012798:	f7ef ff18 	bl	80025cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801279c:	490b      	ldr	r1, [pc, #44]	@ (80127cc <MX_USB_HOST_Init+0x48>)
 801279e:	480a      	ldr	r0, [pc, #40]	@ (80127c8 <MX_USB_HOST_Init+0x44>)
 80127a0:	f7fb fb2d 	bl	800ddfe <USBH_RegisterClass>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d001      	beq.n	80127ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80127aa:	f7ef ff0f 	bl	80025cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80127ae:	4806      	ldr	r0, [pc, #24]	@ (80127c8 <MX_USB_HOST_Init+0x44>)
 80127b0:	f7fb fbb1 	bl	800df16 <USBH_Start>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d001      	beq.n	80127be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80127ba:	f7ef ff07 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80127be:	bf00      	nop
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	080127e5 	.word	0x080127e5
 80127c8:	2000084c 	.word	0x2000084c
 80127cc:	2000000c 	.word	0x2000000c

080127d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80127d4:	4802      	ldr	r0, [pc, #8]	@ (80127e0 <MX_USB_HOST_Process+0x10>)
 80127d6:	f7fb fbaf 	bl	800df38 <USBH_Process>
}
 80127da:	bf00      	nop
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	2000084c 	.word	0x2000084c

080127e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	460b      	mov	r3, r1
 80127ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80127f0:	78fb      	ldrb	r3, [r7, #3]
 80127f2:	3b01      	subs	r3, #1
 80127f4:	2b04      	cmp	r3, #4
 80127f6:	d819      	bhi.n	801282c <USBH_UserProcess+0x48>
 80127f8:	a201      	add	r2, pc, #4	@ (adr r2, 8012800 <USBH_UserProcess+0x1c>)
 80127fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127fe:	bf00      	nop
 8012800:	0801282d 	.word	0x0801282d
 8012804:	0801281d 	.word	0x0801281d
 8012808:	0801282d 	.word	0x0801282d
 801280c:	08012825 	.word	0x08012825
 8012810:	08012815 	.word	0x08012815
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012814:	4b09      	ldr	r3, [pc, #36]	@ (801283c <USBH_UserProcess+0x58>)
 8012816:	2203      	movs	r2, #3
 8012818:	701a      	strb	r2, [r3, #0]
  break;
 801281a:	e008      	b.n	801282e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801281c:	4b07      	ldr	r3, [pc, #28]	@ (801283c <USBH_UserProcess+0x58>)
 801281e:	2202      	movs	r2, #2
 8012820:	701a      	strb	r2, [r3, #0]
  break;
 8012822:	e004      	b.n	801282e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012824:	4b05      	ldr	r3, [pc, #20]	@ (801283c <USBH_UserProcess+0x58>)
 8012826:	2201      	movs	r2, #1
 8012828:	701a      	strb	r2, [r3, #0]
  break;
 801282a:	e000      	b.n	801282e <USBH_UserProcess+0x4a>

  default:
  break;
 801282c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801282e:	bf00      	nop
 8012830:	370c      	adds	r7, #12
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	20000c24 	.word	0x20000c24

08012840 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b08a      	sub	sp, #40	@ 0x28
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012848:	f107 0314 	add.w	r3, r7, #20
 801284c:	2200      	movs	r2, #0
 801284e:	601a      	str	r2, [r3, #0]
 8012850:	605a      	str	r2, [r3, #4]
 8012852:	609a      	str	r2, [r3, #8]
 8012854:	60da      	str	r2, [r3, #12]
 8012856:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012860:	d147      	bne.n	80128f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012862:	2300      	movs	r3, #0
 8012864:	613b      	str	r3, [r7, #16]
 8012866:	4b25      	ldr	r3, [pc, #148]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 8012868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801286a:	4a24      	ldr	r2, [pc, #144]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 801286c:	f043 0301 	orr.w	r3, r3, #1
 8012870:	6313      	str	r3, [r2, #48]	@ 0x30
 8012872:	4b22      	ldr	r3, [pc, #136]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 8012874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012876:	f003 0301 	and.w	r3, r3, #1
 801287a:	613b      	str	r3, [r7, #16]
 801287c:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 801287e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8012882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012884:	2302      	movs	r3, #2
 8012886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012888:	2300      	movs	r3, #0
 801288a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801288c:	2303      	movs	r3, #3
 801288e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012890:	230a      	movs	r3, #10
 8012892:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012894:	f107 0314 	add.w	r3, r7, #20
 8012898:	4619      	mov	r1, r3
 801289a:	4819      	ldr	r0, [pc, #100]	@ (8012900 <HAL_HCD_MspInit+0xc0>)
 801289c:	f7f2 fa22 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80128a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128a6:	2302      	movs	r3, #2
 80128a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128aa:	2300      	movs	r3, #0
 80128ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80128ae:	f107 0314 	add.w	r3, r7, #20
 80128b2:	4619      	mov	r1, r3
 80128b4:	4812      	ldr	r0, [pc, #72]	@ (8012900 <HAL_HCD_MspInit+0xc0>)
 80128b6:	f7f2 fa15 	bl	8004ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80128ba:	4b10      	ldr	r3, [pc, #64]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 80128bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128be:	4a0f      	ldr	r2, [pc, #60]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 80128c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80128c6:	2300      	movs	r3, #0
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	4b0c      	ldr	r3, [pc, #48]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 80128cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128ce:	4a0b      	ldr	r2, [pc, #44]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 80128d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80128d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80128d6:	4b09      	ldr	r3, [pc, #36]	@ (80128fc <HAL_HCD_MspInit+0xbc>)
 80128d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80128de:	60fb      	str	r3, [r7, #12]
 80128e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80128e2:	2200      	movs	r2, #0
 80128e4:	2100      	movs	r1, #0
 80128e6:	2043      	movs	r0, #67	@ 0x43
 80128e8:	f7f0 fe24 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80128ec:	2043      	movs	r0, #67	@ 0x43
 80128ee:	f7f0 fe3d 	bl	800356c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80128f2:	bf00      	nop
 80128f4:	3728      	adds	r7, #40	@ 0x28
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	40023800 	.word	0x40023800
 8012900:	40020000 	.word	0x40020000

08012904 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012912:	4618      	mov	r0, r3
 8012914:	f7fb fee7 	bl	800e6e6 <USBH_LL_IncTimer>
}
 8012918:	bf00      	nop
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801292e:	4618      	mov	r0, r3
 8012930:	f7fb ff1f 	bl	800e772 <USBH_LL_Connect>
}
 8012934:	bf00      	nop
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801294a:	4618      	mov	r0, r3
 801294c:	f7fb ff28 	bl	800e7a0 <USBH_LL_Disconnect>
}
 8012950:	bf00      	nop
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	460b      	mov	r3, r1
 8012962:	70fb      	strb	r3, [r7, #3]
 8012964:	4613      	mov	r3, r2
 8012966:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012982:	4618      	mov	r0, r3
 8012984:	f7fb fed9 	bl	800e73a <USBH_LL_PortEnabled>
}
 8012988:	bf00      	nop
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fb fed9 	bl	800e756 <USBH_LL_PortDisabled>
}
 80129a4:	bf00      	nop
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d12a      	bne.n	8012a14 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80129be:	4a18      	ldr	r2, [pc, #96]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	4a15      	ldr	r2, [pc, #84]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129ca:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80129ce:	4b14      	ldr	r3, [pc, #80]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80129d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80129d6:	4b12      	ldr	r3, [pc, #72]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129d8:	2208      	movs	r2, #8
 80129da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80129dc:	4b10      	ldr	r3, [pc, #64]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129de:	2201      	movs	r2, #1
 80129e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80129e2:	4b0f      	ldr	r3, [pc, #60]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129e4:	2200      	movs	r2, #0
 80129e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80129e8:	4b0d      	ldr	r3, [pc, #52]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129ea:	2202      	movs	r2, #2
 80129ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80129ee:	4b0c      	ldr	r3, [pc, #48]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129f0:	2200      	movs	r2, #0
 80129f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80129f4:	480a      	ldr	r0, [pc, #40]	@ (8012a20 <USBH_LL_Init+0x74>)
 80129f6:	f7f2 fb52 	bl	800509e <HAL_HCD_Init>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012a00:	f7ef fde4 	bl	80025cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012a04:	4806      	ldr	r0, [pc, #24]	@ (8012a20 <USBH_LL_Init+0x74>)
 8012a06:	f7f2 ffb3 	bl	8005970 <HAL_HCD_GetCurrentFrame>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7fb fe5a 	bl	800e6c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012a14:	2300      	movs	r3, #0
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3708      	adds	r7, #8
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	20000c28 	.word	0x20000c28

08012a24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f2 ff20 	bl	8005880 <HAL_HCD_Start>
 8012a40:	4603      	mov	r3, r0
 8012a42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a44:	7bfb      	ldrb	r3, [r7, #15]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f000 f95e 	bl	8012d08 <USBH_Get_USB_Status>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3710      	adds	r7, #16
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b084      	sub	sp, #16
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a62:	2300      	movs	r3, #0
 8012a64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a66:	2300      	movs	r3, #0
 8012a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7f2 ff28 	bl	80058c6 <HAL_HCD_Stop>
 8012a76:	4603      	mov	r3, r0
 8012a78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a7a:	7bfb      	ldrb	r3, [r7, #15]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f000 f943 	bl	8012d08 <USBH_Get_USB_Status>
 8012a82:	4603      	mov	r3, r0
 8012a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7f2 ff72 	bl	800598c <HAL_HCD_GetCurrentSpeed>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d00c      	beq.n	8012ac8 <USBH_LL_GetSpeed+0x38>
 8012aae:	2b02      	cmp	r3, #2
 8012ab0:	d80d      	bhi.n	8012ace <USBH_LL_GetSpeed+0x3e>
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d002      	beq.n	8012abc <USBH_LL_GetSpeed+0x2c>
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d003      	beq.n	8012ac2 <USBH_LL_GetSpeed+0x32>
 8012aba:	e008      	b.n	8012ace <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012abc:	2300      	movs	r3, #0
 8012abe:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac0:	e008      	b.n	8012ad4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac6:	e005      	b.n	8012ad4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012ac8:	2302      	movs	r3, #2
 8012aca:	73fb      	strb	r3, [r7, #15]
    break;
 8012acc:	e002      	b.n	8012ad4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8012ad2:	bf00      	nop
  }
  return  speed;
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}

08012ade <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012ade:	b580      	push	{r7, lr}
 8012ae0:	b084      	sub	sp, #16
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7f2 ff03 	bl	8005900 <HAL_HCD_ResetPort>
 8012afa:	4603      	mov	r3, r0
 8012afc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012afe:	7bfb      	ldrb	r3, [r7, #15]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f000 f901 	bl	8012d08 <USBH_Get_USB_Status>
 8012b06:	4603      	mov	r3, r0
 8012b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012b26:	78fa      	ldrb	r2, [r7, #3]
 8012b28:	4611      	mov	r1, r2
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7f2 ff0b 	bl	8005946 <HAL_HCD_HC_GetXferCount>
 8012b30:	4603      	mov	r3, r0
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012b3a:	b590      	push	{r4, r7, lr}
 8012b3c:	b089      	sub	sp, #36	@ 0x24
 8012b3e:	af04      	add	r7, sp, #16
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	4608      	mov	r0, r1
 8012b44:	4611      	mov	r1, r2
 8012b46:	461a      	mov	r2, r3
 8012b48:	4603      	mov	r3, r0
 8012b4a:	70fb      	strb	r3, [r7, #3]
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	70bb      	strb	r3, [r7, #2]
 8012b50:	4613      	mov	r3, r2
 8012b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012b62:	787c      	ldrb	r4, [r7, #1]
 8012b64:	78ba      	ldrb	r2, [r7, #2]
 8012b66:	78f9      	ldrb	r1, [r7, #3]
 8012b68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012b6a:	9302      	str	r3, [sp, #8]
 8012b6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b76:	9300      	str	r3, [sp, #0]
 8012b78:	4623      	mov	r3, r4
 8012b7a:	f7f2 faf7 	bl	800516c <HAL_HCD_HC_Init>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b82:	7bfb      	ldrb	r3, [r7, #15]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f000 f8bf 	bl	8012d08 <USBH_Get_USB_Status>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3714      	adds	r7, #20
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd90      	pop	{r4, r7, pc}

08012b98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	460b      	mov	r3, r1
 8012ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012bb2:	78fa      	ldrb	r2, [r7, #3]
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7f2 fb90 	bl	80052dc <HAL_HCD_HC_Halt>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f000 f8a0 	bl	8012d08 <USBH_Get_USB_Status>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3710      	adds	r7, #16
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012bd6:	b590      	push	{r4, r7, lr}
 8012bd8:	b089      	sub	sp, #36	@ 0x24
 8012bda:	af04      	add	r7, sp, #16
 8012bdc:	6078      	str	r0, [r7, #4]
 8012bde:	4608      	mov	r0, r1
 8012be0:	4611      	mov	r1, r2
 8012be2:	461a      	mov	r2, r3
 8012be4:	4603      	mov	r3, r0
 8012be6:	70fb      	strb	r3, [r7, #3]
 8012be8:	460b      	mov	r3, r1
 8012bea:	70bb      	strb	r3, [r7, #2]
 8012bec:	4613      	mov	r3, r2
 8012bee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012bfe:	787c      	ldrb	r4, [r7, #1]
 8012c00:	78ba      	ldrb	r2, [r7, #2]
 8012c02:	78f9      	ldrb	r1, [r7, #3]
 8012c04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012c08:	9303      	str	r3, [sp, #12]
 8012c0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012c0c:	9302      	str	r3, [sp, #8]
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c16:	9300      	str	r3, [sp, #0]
 8012c18:	4623      	mov	r3, r4
 8012c1a:	f7f2 fb83 	bl	8005324 <HAL_HCD_HC_SubmitRequest>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012c22:	7bfb      	ldrb	r3, [r7, #15]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f000 f86f 	bl	8012d08 <USBH_Get_USB_Status>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3714      	adds	r7, #20
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd90      	pop	{r4, r7, pc}

08012c38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	460b      	mov	r3, r1
 8012c42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012c4a:	78fa      	ldrb	r2, [r7, #3]
 8012c4c:	4611      	mov	r1, r2
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f2 fe64 	bl	800591c <HAL_HCD_HC_GetURBState>
 8012c54:	4603      	mov	r3, r0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}

08012c5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b082      	sub	sp, #8
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
 8012c66:	460b      	mov	r3, r1
 8012c68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d103      	bne.n	8012c7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	4618      	mov	r0, r3
 8012c78:	f000 f872 	bl	8012d60 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012c7c:	20c8      	movs	r0, #200	@ 0xc8
 8012c7e:	f7f0 fb7d 	bl	800337c <HAL_Delay>
  return USBH_OK;
 8012c82:	2300      	movs	r3, #0
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	460b      	mov	r3, r1
 8012c96:	70fb      	strb	r3, [r7, #3]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012ca2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012ca4:	78fa      	ldrb	r2, [r7, #3]
 8012ca6:	68f9      	ldr	r1, [r7, #12]
 8012ca8:	4613      	mov	r3, r2
 8012caa:	011b      	lsls	r3, r3, #4
 8012cac:	1a9b      	subs	r3, r3, r2
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	440b      	add	r3, r1
 8012cb2:	3317      	adds	r3, #23
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00a      	beq.n	8012cd0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012cba:	78fa      	ldrb	r2, [r7, #3]
 8012cbc:	68f9      	ldr	r1, [r7, #12]
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	011b      	lsls	r3, r3, #4
 8012cc2:	1a9b      	subs	r3, r3, r2
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	440b      	add	r3, r1
 8012cc8:	333c      	adds	r3, #60	@ 0x3c
 8012cca:	78ba      	ldrb	r2, [r7, #2]
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	e009      	b.n	8012ce4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012cd0:	78fa      	ldrb	r2, [r7, #3]
 8012cd2:	68f9      	ldr	r1, [r7, #12]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	011b      	lsls	r3, r3, #4
 8012cd8:	1a9b      	subs	r3, r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	440b      	add	r3, r1
 8012cde:	333d      	adds	r3, #61	@ 0x3d
 8012ce0:	78ba      	ldrb	r2, [r7, #2]
 8012ce2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012ce4:	2300      	movs	r3, #0
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3714      	adds	r7, #20
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr

08012cf2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7f0 fb3e 	bl	800337c <HAL_Delay>
}
 8012d00:	bf00      	nop
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	4603      	mov	r3, r0
 8012d10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012d12:	2300      	movs	r3, #0
 8012d14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012d16:	79fb      	ldrb	r3, [r7, #7]
 8012d18:	2b03      	cmp	r3, #3
 8012d1a:	d817      	bhi.n	8012d4c <USBH_Get_USB_Status+0x44>
 8012d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8012d24 <USBH_Get_USB_Status+0x1c>)
 8012d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d22:	bf00      	nop
 8012d24:	08012d35 	.word	0x08012d35
 8012d28:	08012d3b 	.word	0x08012d3b
 8012d2c:	08012d41 	.word	0x08012d41
 8012d30:	08012d47 	.word	0x08012d47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	73fb      	strb	r3, [r7, #15]
    break;
 8012d38:	e00b      	b.n	8012d52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8012d3e:	e008      	b.n	8012d52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012d40:	2301      	movs	r3, #1
 8012d42:	73fb      	strb	r3, [r7, #15]
    break;
 8012d44:	e005      	b.n	8012d52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012d46:	2302      	movs	r3, #2
 8012d48:	73fb      	strb	r3, [r7, #15]
    break;
 8012d4a:	e002      	b.n	8012d52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8012d50:	bf00      	nop
  }
  return usb_status;
 8012d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3714      	adds	r7, #20
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr

08012d60 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	4603      	mov	r3, r0
 8012d68:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012d6a:	79fb      	ldrb	r3, [r7, #7]
 8012d6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012d6e:	79fb      	ldrb	r3, [r7, #7]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d102      	bne.n	8012d7a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012d74:	2300      	movs	r3, #0
 8012d76:	73fb      	strb	r3, [r7, #15]
 8012d78:	e001      	b.n	8012d7e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8012d7e:	7bfb      	ldrb	r3, [r7, #15]
 8012d80:	461a      	mov	r2, r3
 8012d82:	2104      	movs	r1, #4
 8012d84:	4803      	ldr	r0, [pc, #12]	@ (8012d94 <MX_DriverVbusFS+0x34>)
 8012d86:	f7f2 f971 	bl	800506c <HAL_GPIO_WritePin>
}
 8012d8a:	bf00      	nop
 8012d8c:	3710      	adds	r7, #16
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	40020400 	.word	0x40020400

08012d98 <_ZdlPvj>:
 8012d98:	f000 b9bc 	b.w	8013114 <_ZdlPv>

08012d9c <_Znwj>:
 8012d9c:	2801      	cmp	r0, #1
 8012d9e:	bf38      	it	cc
 8012da0:	2001      	movcc	r0, #1
 8012da2:	b510      	push	{r4, lr}
 8012da4:	4604      	mov	r4, r0
 8012da6:	4620      	mov	r0, r4
 8012da8:	f000 f9c6 	bl	8013138 <malloc>
 8012dac:	b100      	cbz	r0, 8012db0 <_Znwj+0x14>
 8012dae:	bd10      	pop	{r4, pc}
 8012db0:	f000 f9b2 	bl	8013118 <_ZSt15get_new_handlerv>
 8012db4:	b908      	cbnz	r0, 8012dba <_Znwj+0x1e>
 8012db6:	f000 f9b7 	bl	8013128 <abort>
 8012dba:	4780      	blx	r0
 8012dbc:	e7f3      	b.n	8012da6 <_Znwj+0xa>

08012dbe <_ZNSaIcEC1Ev>:
 8012dbe:	4770      	bx	lr

08012dc0 <_ZNSaIcED1Ev>:
 8012dc0:	4770      	bx	lr

08012dc2 <_ZSt17__throw_bad_allocv>:
 8012dc2:	b508      	push	{r3, lr}
 8012dc4:	f000 f9b0 	bl	8013128 <abort>

08012dc8 <_ZSt28__throw_bad_array_new_lengthv>:
 8012dc8:	b508      	push	{r3, lr}
 8012dca:	f000 f9ad 	bl	8013128 <abort>

08012dce <_ZSt19__throw_logic_errorPKc>:
 8012dce:	b508      	push	{r3, lr}
 8012dd0:	f000 f9aa 	bl	8013128 <abort>

08012dd4 <_ZSt20__throw_length_errorPKc>:
 8012dd4:	b508      	push	{r3, lr}
 8012dd6:	f000 f9a7 	bl	8013128 <abort>

08012dda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8012dda:	b10a      	cbz	r2, 8012de0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8012ddc:	f000 bd5d 	b.w	801389a <memcpy>
 8012de0:	4770      	bx	lr

08012de2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8012de2:	f850 3b08 	ldr.w	r3, [r0], #8
 8012de6:	1a1b      	subs	r3, r3, r0
 8012de8:	4258      	negs	r0, r3
 8012dea:	4158      	adcs	r0, r3
 8012dec:	4770      	bx	lr
	...

08012df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012df0:	b508      	push	{r3, lr}
 8012df2:	680b      	ldr	r3, [r1, #0]
 8012df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012df8:	d302      	bcc.n	8012e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012dfa:	480d      	ldr	r0, [pc, #52]	@ (8012e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012dfc:	f7ff ffea 	bl	8012dd4 <_ZSt20__throw_length_errorPKc>
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d90b      	bls.n	8012e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012e04:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012e08:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012e0c:	d206      	bcs.n	8012e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012e0e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8012e12:	bf2a      	itet	cs
 8012e14:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8012e18:	6008      	strcc	r0, [r1, #0]
 8012e1a:	600b      	strcs	r3, [r1, #0]
 8012e1c:	6808      	ldr	r0, [r1, #0]
 8012e1e:	3001      	adds	r0, #1
 8012e20:	d501      	bpl.n	8012e26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012e22:	f7ff ffce 	bl	8012dc2 <_ZSt17__throw_bad_allocv>
 8012e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e2a:	f7ff bfb7 	b.w	8012d9c <_Znwj>
 8012e2e:	bf00      	nop
 8012e30:	0801442c 	.word	0x0801442c

08012e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012e34:	b510      	push	{r4, lr}
 8012e36:	4604      	mov	r4, r0
 8012e38:	f7ff ffd3 	bl	8012de2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012e3c:	b920      	cbnz	r0, 8012e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8012e3e:	6820      	ldr	r0, [r4, #0]
 8012e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e44:	f000 b966 	b.w	8013114 <_ZdlPv>
 8012e48:	bd10      	pop	{r4, pc}

08012e4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012e4a:	6840      	ldr	r0, [r0, #4]
 8012e4c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8012e50:	3901      	subs	r1, #1
 8012e52:	1a09      	subs	r1, r1, r0
 8012e54:	4291      	cmp	r1, r2
 8012e56:	b508      	push	{r3, lr}
 8012e58:	d202      	bcs.n	8012e60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff ffba 	bl	8012dd4 <_ZSt20__throw_length_errorPKc>
 8012e60:	bd08      	pop	{r3, pc}

08012e62 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8012e62:	6803      	ldr	r3, [r0, #0]
 8012e64:	428b      	cmp	r3, r1
 8012e66:	d806      	bhi.n	8012e76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8012e68:	6842      	ldr	r2, [r0, #4]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	4299      	cmp	r1, r3
 8012e6e:	bf94      	ite	ls
 8012e70:	2000      	movls	r0, #0
 8012e72:	2001      	movhi	r0, #1
 8012e74:	4770      	bx	lr
 8012e76:	2001      	movs	r0, #1
 8012e78:	4770      	bx	lr

08012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8012e7a:	2a01      	cmp	r2, #1
 8012e7c:	b410      	push	{r4}
 8012e7e:	d104      	bne.n	8012e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8012e80:	780a      	ldrb	r2, [r1, #0]
 8012e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e86:	7002      	strb	r2, [r0, #0]
 8012e88:	4770      	bx	lr
 8012e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e8e:	f7ff bfa4 	b.w	8012dda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012e92:	2a01      	cmp	r2, #1
 8012e94:	b430      	push	{r4, r5}
 8012e96:	d103      	bne.n	8012ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8012e98:	780b      	ldrb	r3, [r1, #0]
 8012e9a:	7003      	strb	r3, [r0, #0]
 8012e9c:	bc30      	pop	{r4, r5}
 8012e9e:	4770      	bx	lr
 8012ea0:	2a00      	cmp	r2, #0
 8012ea2:	d0fb      	beq.n	8012e9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012ea4:	bc30      	pop	{r4, r5}
 8012ea6:	f000 bc0f 	b.w	80136c8 <memmove>

08012eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8012eaa:	b508      	push	{r3, lr}
 8012eac:	1a52      	subs	r2, r2, r1
 8012eae:	f7ff ffe4 	bl	8012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012eb2:	bd08      	pop	{r3, pc}

08012eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8012eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eb6:	f100 0708 	add.w	r7, r0, #8
 8012eba:	6007      	str	r7, [r0, #0]
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	4608      	mov	r0, r1
 8012ec0:	460c      	mov	r4, r1
 8012ec2:	f7ff ff8e 	bl	8012de2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012ec6:	f104 0608 	add.w	r6, r4, #8
 8012eca:	6862      	ldr	r2, [r4, #4]
 8012ecc:	b160      	cbz	r0, 8012ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8012ece:	3201      	adds	r2, #1
 8012ed0:	4631      	mov	r1, r6
 8012ed2:	4638      	mov	r0, r7
 8012ed4:	f7ff ff81 	bl	8012dda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8012ed8:	6863      	ldr	r3, [r4, #4]
 8012eda:	606b      	str	r3, [r5, #4]
 8012edc:	2300      	movs	r3, #0
 8012ede:	7223      	strb	r3, [r4, #8]
 8012ee0:	6026      	str	r6, [r4, #0]
 8012ee2:	6063      	str	r3, [r4, #4]
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee8:	6823      	ldr	r3, [r4, #0]
 8012eea:	602b      	str	r3, [r5, #0]
 8012eec:	68a3      	ldr	r3, [r4, #8]
 8012eee:	60ab      	str	r3, [r5, #8]
 8012ef0:	e7f2      	b.n	8012ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08012ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012ef2:	b510      	push	{r4, lr}
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	f7ff ff9d 	bl	8012e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012efa:	4620      	mov	r0, r4
 8012efc:	bd10      	pop	{r4, pc}

08012efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8012efe:	b510      	push	{r4, lr}
 8012f00:	4604      	mov	r4, r0
 8012f02:	f7ff ff6e 	bl	8012de2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012f06:	b908      	cbnz	r0, 8012f0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8012f08:	68a0      	ldr	r0, [r4, #8]
 8012f0a:	bd10      	pop	{r4, pc}
 8012f0c:	200f      	movs	r0, #15
 8012f0e:	e7fc      	b.n	8012f0a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08012f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8012f10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f14:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012f16:	461f      	mov	r7, r3
 8012f18:	6843      	ldr	r3, [r0, #4]
 8012f1a:	eb01 0802 	add.w	r8, r1, r2
 8012f1e:	1ab2      	subs	r2, r6, r2
 8012f20:	441a      	add	r2, r3
 8012f22:	4604      	mov	r4, r0
 8012f24:	460d      	mov	r5, r1
 8012f26:	eba3 0908 	sub.w	r9, r3, r8
 8012f2a:	9201      	str	r2, [sp, #4]
 8012f2c:	f7ff ffe7 	bl	8012efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012f30:	a901      	add	r1, sp, #4
 8012f32:	4602      	mov	r2, r0
 8012f34:	4620      	mov	r0, r4
 8012f36:	f7ff ff5b 	bl	8012df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012f3a:	4682      	mov	sl, r0
 8012f3c:	b11d      	cbz	r5, 8012f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8012f3e:	6821      	ldr	r1, [r4, #0]
 8012f40:	462a      	mov	r2, r5
 8012f42:	f7ff ff9a 	bl	8012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012f46:	b137      	cbz	r7, 8012f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012f48:	b12e      	cbz	r6, 8012f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012f4a:	4632      	mov	r2, r6
 8012f4c:	4639      	mov	r1, r7
 8012f4e:	eb0a 0005 	add.w	r0, sl, r5
 8012f52:	f7ff ff92 	bl	8012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012f56:	f1b9 0f00 	cmp.w	r9, #0
 8012f5a:	d007      	beq.n	8012f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8012f5c:	6821      	ldr	r1, [r4, #0]
 8012f5e:	4435      	add	r5, r6
 8012f60:	464a      	mov	r2, r9
 8012f62:	4441      	add	r1, r8
 8012f64:	eb0a 0005 	add.w	r0, sl, r5
 8012f68:	f7ff ff87 	bl	8012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7ff ff61 	bl	8012e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012f72:	9b01      	ldr	r3, [sp, #4]
 8012f74:	f8c4 a000 	str.w	sl, [r4]
 8012f78:	60a3      	str	r3, [r4, #8]
 8012f7a:	b002      	add	sp, #8
 8012f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8012f80:	6802      	ldr	r2, [r0, #0]
 8012f82:	2300      	movs	r3, #0
 8012f84:	6043      	str	r3, [r0, #4]
 8012f86:	7013      	strb	r3, [r2, #0]
 8012f88:	4770      	bx	lr
	...

08012f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8012f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f90:	b085      	sub	sp, #20
 8012f92:	4680      	mov	r8, r0
 8012f94:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8012f96:	4614      	mov	r4, r2
 8012f98:	4689      	mov	r9, r1
 8012f9a:	462a      	mov	r2, r5
 8012f9c:	4621      	mov	r1, r4
 8012f9e:	461f      	mov	r7, r3
 8012fa0:	4b37      	ldr	r3, [pc, #220]	@ (8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8012fa2:	f7ff ff52 	bl	8012e4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012faa:	9303      	str	r3, [sp, #12]
 8012fac:	eba5 0b04 	sub.w	fp, r5, r4
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	eb03 0a0b 	add.w	sl, r3, fp
 8012fb6:	f7ff ffa2 	bl	8012efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012fba:	4550      	cmp	r0, sl
 8012fbc:	d354      	bcc.n	8013068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8012fbe:	f8d8 6000 	ldr.w	r6, [r8]
 8012fc2:	9b03      	ldr	r3, [sp, #12]
 8012fc4:	444e      	add	r6, r9
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	44a1      	add	r9, r4
 8012fca:	4640      	mov	r0, r8
 8012fcc:	eba3 0909 	sub.w	r9, r3, r9
 8012fd0:	f7ff ff47 	bl	8012e62 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8012fd4:	b180      	cbz	r0, 8012ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8012fd6:	f1b9 0f00 	cmp.w	r9, #0
 8012fda:	d006      	beq.n	8012fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8012fdc:	42ac      	cmp	r4, r5
 8012fde:	d004      	beq.n	8012fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8012fe0:	464a      	mov	r2, r9
 8012fe2:	1931      	adds	r1, r6, r4
 8012fe4:	1970      	adds	r0, r6, r5
 8012fe6:	f7ff ff54 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012fea:	b315      	cbz	r5, 8013032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012fec:	462a      	mov	r2, r5
 8012fee:	4639      	mov	r1, r7
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f7ff ff42 	bl	8012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012ff6:	e01c      	b.n	8013032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012ff8:	b135      	cbz	r5, 8013008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8012ffa:	42ac      	cmp	r4, r5
 8012ffc:	d33c      	bcc.n	8013078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8012ffe:	462a      	mov	r2, r5
 8013000:	4639      	mov	r1, r7
 8013002:	4630      	mov	r0, r6
 8013004:	f7ff ff45 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013008:	f1b9 0f00 	cmp.w	r9, #0
 801300c:	d011      	beq.n	8013032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 801300e:	42ac      	cmp	r4, r5
 8013010:	d00f      	beq.n	8013032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013012:	464a      	mov	r2, r9
 8013014:	1931      	adds	r1, r6, r4
 8013016:	1970      	adds	r0, r6, r5
 8013018:	f7ff ff3b 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801301c:	42ac      	cmp	r4, r5
 801301e:	d208      	bcs.n	8013032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013020:	4434      	add	r4, r6
 8013022:	197b      	adds	r3, r7, r5
 8013024:	429c      	cmp	r4, r3
 8013026:	d30f      	bcc.n	8013048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8013028:	462a      	mov	r2, r5
 801302a:	4639      	mov	r1, r7
 801302c:	4630      	mov	r0, r6
 801302e:	f7ff ff30 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013032:	f8d8 3000 	ldr.w	r3, [r8]
 8013036:	f8c8 a004 	str.w	sl, [r8, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	4640      	mov	r0, r8
 801303e:	f803 200a 	strb.w	r2, [r3, sl]
 8013042:	b005      	add	sp, #20
 8013044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013048:	42bc      	cmp	r4, r7
 801304a:	d803      	bhi.n	8013054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 801304c:	462a      	mov	r2, r5
 801304e:	eb07 010b 	add.w	r1, r7, fp
 8013052:	e7cd      	b.n	8012ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8013054:	1be4      	subs	r4, r4, r7
 8013056:	4622      	mov	r2, r4
 8013058:	4639      	mov	r1, r7
 801305a:	4630      	mov	r0, r6
 801305c:	f7ff ff19 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013060:	1b2a      	subs	r2, r5, r4
 8013062:	1971      	adds	r1, r6, r5
 8013064:	1930      	adds	r0, r6, r4
 8013066:	e7c4      	b.n	8012ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8013068:	9500      	str	r5, [sp, #0]
 801306a:	463b      	mov	r3, r7
 801306c:	4622      	mov	r2, r4
 801306e:	4649      	mov	r1, r9
 8013070:	4640      	mov	r0, r8
 8013072:	f7ff ff4d 	bl	8012f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8013076:	e7dc      	b.n	8013032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013078:	f1b9 0f00 	cmp.w	r9, #0
 801307c:	d0d0      	beq.n	8013020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 801307e:	e7c8      	b.n	8013012 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8013080:	08014444 	.word	0x08014444

08013084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8013084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013086:	4604      	mov	r4, r0
 8013088:	4608      	mov	r0, r1
 801308a:	460d      	mov	r5, r1
 801308c:	f7ed f908 	bl	80002a0 <strlen>
 8013090:	9000      	str	r0, [sp, #0]
 8013092:	6862      	ldr	r2, [r4, #4]
 8013094:	462b      	mov	r3, r5
 8013096:	2100      	movs	r1, #0
 8013098:	4620      	mov	r0, r4
 801309a:	f7ff ff77 	bl	8012f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801309e:	b003      	add	sp, #12
 80130a0:	bd30      	pop	{r4, r5, pc}

080130a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80130a2:	b508      	push	{r3, lr}
 80130a4:	f7ff ffee 	bl	8013084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80130a8:	bd08      	pop	{r3, pc}

080130aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80130aa:	6800      	ldr	r0, [r0, #0]
 80130ac:	4770      	bx	lr

080130ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80130ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130b0:	1a53      	subs	r3, r2, r1
 80130b2:	2b0f      	cmp	r3, #15
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	4616      	mov	r6, r2
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	d906      	bls.n	80130cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 80130be:	2200      	movs	r2, #0
 80130c0:	a901      	add	r1, sp, #4
 80130c2:	f7ff fe95 	bl	8012df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80130c6:	9b01      	ldr	r3, [sp, #4]
 80130c8:	6020      	str	r0, [r4, #0]
 80130ca:	60a3      	str	r3, [r4, #8]
 80130cc:	4632      	mov	r2, r6
 80130ce:	4629      	mov	r1, r5
 80130d0:	6820      	ldr	r0, [r4, #0]
 80130d2:	f7ff feea 	bl	8012eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80130d6:	9b01      	ldr	r3, [sp, #4]
 80130d8:	6822      	ldr	r2, [r4, #0]
 80130da:	6063      	str	r3, [r4, #4]
 80130dc:	2100      	movs	r1, #0
 80130de:	54d1      	strb	r1, [r2, r3]
 80130e0:	b002      	add	sp, #8
 80130e2:	bd70      	pop	{r4, r5, r6, pc}

080130e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	f100 0308 	add.w	r3, r0, #8
 80130ea:	4604      	mov	r4, r0
 80130ec:	6003      	str	r3, [r0, #0]
 80130ee:	460d      	mov	r5, r1
 80130f0:	b911      	cbnz	r1, 80130f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 80130f2:	4807      	ldr	r0, [pc, #28]	@ (8013110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 80130f4:	f7ff fe6b 	bl	8012dce <_ZSt19__throw_logic_errorPKc>
 80130f8:	4608      	mov	r0, r1
 80130fa:	f7ed f8d1 	bl	80002a0 <strlen>
 80130fe:	f04f 0300 	mov.w	r3, #0
 8013102:	182a      	adds	r2, r5, r0
 8013104:	4629      	mov	r1, r5
 8013106:	4620      	mov	r0, r4
 8013108:	f7ff ffd1 	bl	80130ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801310c:	4620      	mov	r0, r4
 801310e:	bd38      	pop	{r3, r4, r5, pc}
 8013110:	0801445d 	.word	0x0801445d

08013114 <_ZdlPv>:
 8013114:	f000 b818 	b.w	8013148 <free>

08013118 <_ZSt15get_new_handlerv>:
 8013118:	4b02      	ldr	r3, [pc, #8]	@ (8013124 <_ZSt15get_new_handlerv+0xc>)
 801311a:	6818      	ldr	r0, [r3, #0]
 801311c:	f3bf 8f5b 	dmb	ish
 8013120:	4770      	bx	lr
 8013122:	bf00      	nop
 8013124:	20001008 	.word	0x20001008

08013128 <abort>:
 8013128:	b508      	push	{r3, lr}
 801312a:	2006      	movs	r0, #6
 801312c:	f000 fb16 	bl	801375c <raise>
 8013130:	2001      	movs	r0, #1
 8013132:	f7ef fff7 	bl	8003124 <_exit>
	...

08013138 <malloc>:
 8013138:	4b02      	ldr	r3, [pc, #8]	@ (8013144 <malloc+0xc>)
 801313a:	4601      	mov	r1, r0
 801313c:	6818      	ldr	r0, [r3, #0]
 801313e:	f000 b82d 	b.w	801319c <_malloc_r>
 8013142:	bf00      	nop
 8013144:	20000038 	.word	0x20000038

08013148 <free>:
 8013148:	4b02      	ldr	r3, [pc, #8]	@ (8013154 <free+0xc>)
 801314a:	4601      	mov	r1, r0
 801314c:	6818      	ldr	r0, [r3, #0]
 801314e:	f000 bbb3 	b.w	80138b8 <_free_r>
 8013152:	bf00      	nop
 8013154:	20000038 	.word	0x20000038

08013158 <sbrk_aligned>:
 8013158:	b570      	push	{r4, r5, r6, lr}
 801315a:	4e0f      	ldr	r6, [pc, #60]	@ (8013198 <sbrk_aligned+0x40>)
 801315c:	460c      	mov	r4, r1
 801315e:	6831      	ldr	r1, [r6, #0]
 8013160:	4605      	mov	r5, r0
 8013162:	b911      	cbnz	r1, 801316a <sbrk_aligned+0x12>
 8013164:	f000 fb4a 	bl	80137fc <_sbrk_r>
 8013168:	6030      	str	r0, [r6, #0]
 801316a:	4621      	mov	r1, r4
 801316c:	4628      	mov	r0, r5
 801316e:	f000 fb45 	bl	80137fc <_sbrk_r>
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	d103      	bne.n	801317e <sbrk_aligned+0x26>
 8013176:	f04f 34ff 	mov.w	r4, #4294967295
 801317a:	4620      	mov	r0, r4
 801317c:	bd70      	pop	{r4, r5, r6, pc}
 801317e:	1cc4      	adds	r4, r0, #3
 8013180:	f024 0403 	bic.w	r4, r4, #3
 8013184:	42a0      	cmp	r0, r4
 8013186:	d0f8      	beq.n	801317a <sbrk_aligned+0x22>
 8013188:	1a21      	subs	r1, r4, r0
 801318a:	4628      	mov	r0, r5
 801318c:	f000 fb36 	bl	80137fc <_sbrk_r>
 8013190:	3001      	adds	r0, #1
 8013192:	d1f2      	bne.n	801317a <sbrk_aligned+0x22>
 8013194:	e7ef      	b.n	8013176 <sbrk_aligned+0x1e>
 8013196:	bf00      	nop
 8013198:	2000100c 	.word	0x2000100c

0801319c <_malloc_r>:
 801319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131a0:	1ccd      	adds	r5, r1, #3
 80131a2:	f025 0503 	bic.w	r5, r5, #3
 80131a6:	3508      	adds	r5, #8
 80131a8:	2d0c      	cmp	r5, #12
 80131aa:	bf38      	it	cc
 80131ac:	250c      	movcc	r5, #12
 80131ae:	2d00      	cmp	r5, #0
 80131b0:	4606      	mov	r6, r0
 80131b2:	db01      	blt.n	80131b8 <_malloc_r+0x1c>
 80131b4:	42a9      	cmp	r1, r5
 80131b6:	d904      	bls.n	80131c2 <_malloc_r+0x26>
 80131b8:	230c      	movs	r3, #12
 80131ba:	6033      	str	r3, [r6, #0]
 80131bc:	2000      	movs	r0, #0
 80131be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013298 <_malloc_r+0xfc>
 80131c6:	f000 f869 	bl	801329c <__malloc_lock>
 80131ca:	f8d8 3000 	ldr.w	r3, [r8]
 80131ce:	461c      	mov	r4, r3
 80131d0:	bb44      	cbnz	r4, 8013224 <_malloc_r+0x88>
 80131d2:	4629      	mov	r1, r5
 80131d4:	4630      	mov	r0, r6
 80131d6:	f7ff ffbf 	bl	8013158 <sbrk_aligned>
 80131da:	1c43      	adds	r3, r0, #1
 80131dc:	4604      	mov	r4, r0
 80131de:	d158      	bne.n	8013292 <_malloc_r+0xf6>
 80131e0:	f8d8 4000 	ldr.w	r4, [r8]
 80131e4:	4627      	mov	r7, r4
 80131e6:	2f00      	cmp	r7, #0
 80131e8:	d143      	bne.n	8013272 <_malloc_r+0xd6>
 80131ea:	2c00      	cmp	r4, #0
 80131ec:	d04b      	beq.n	8013286 <_malloc_r+0xea>
 80131ee:	6823      	ldr	r3, [r4, #0]
 80131f0:	4639      	mov	r1, r7
 80131f2:	4630      	mov	r0, r6
 80131f4:	eb04 0903 	add.w	r9, r4, r3
 80131f8:	f000 fb00 	bl	80137fc <_sbrk_r>
 80131fc:	4581      	cmp	r9, r0
 80131fe:	d142      	bne.n	8013286 <_malloc_r+0xea>
 8013200:	6821      	ldr	r1, [r4, #0]
 8013202:	1a6d      	subs	r5, r5, r1
 8013204:	4629      	mov	r1, r5
 8013206:	4630      	mov	r0, r6
 8013208:	f7ff ffa6 	bl	8013158 <sbrk_aligned>
 801320c:	3001      	adds	r0, #1
 801320e:	d03a      	beq.n	8013286 <_malloc_r+0xea>
 8013210:	6823      	ldr	r3, [r4, #0]
 8013212:	442b      	add	r3, r5
 8013214:	6023      	str	r3, [r4, #0]
 8013216:	f8d8 3000 	ldr.w	r3, [r8]
 801321a:	685a      	ldr	r2, [r3, #4]
 801321c:	bb62      	cbnz	r2, 8013278 <_malloc_r+0xdc>
 801321e:	f8c8 7000 	str.w	r7, [r8]
 8013222:	e00f      	b.n	8013244 <_malloc_r+0xa8>
 8013224:	6822      	ldr	r2, [r4, #0]
 8013226:	1b52      	subs	r2, r2, r5
 8013228:	d420      	bmi.n	801326c <_malloc_r+0xd0>
 801322a:	2a0b      	cmp	r2, #11
 801322c:	d917      	bls.n	801325e <_malloc_r+0xc2>
 801322e:	1961      	adds	r1, r4, r5
 8013230:	42a3      	cmp	r3, r4
 8013232:	6025      	str	r5, [r4, #0]
 8013234:	bf18      	it	ne
 8013236:	6059      	strne	r1, [r3, #4]
 8013238:	6863      	ldr	r3, [r4, #4]
 801323a:	bf08      	it	eq
 801323c:	f8c8 1000 	streq.w	r1, [r8]
 8013240:	5162      	str	r2, [r4, r5]
 8013242:	604b      	str	r3, [r1, #4]
 8013244:	4630      	mov	r0, r6
 8013246:	f000 f82f 	bl	80132a8 <__malloc_unlock>
 801324a:	f104 000b 	add.w	r0, r4, #11
 801324e:	1d23      	adds	r3, r4, #4
 8013250:	f020 0007 	bic.w	r0, r0, #7
 8013254:	1ac2      	subs	r2, r0, r3
 8013256:	bf1c      	itt	ne
 8013258:	1a1b      	subne	r3, r3, r0
 801325a:	50a3      	strne	r3, [r4, r2]
 801325c:	e7af      	b.n	80131be <_malloc_r+0x22>
 801325e:	6862      	ldr	r2, [r4, #4]
 8013260:	42a3      	cmp	r3, r4
 8013262:	bf0c      	ite	eq
 8013264:	f8c8 2000 	streq.w	r2, [r8]
 8013268:	605a      	strne	r2, [r3, #4]
 801326a:	e7eb      	b.n	8013244 <_malloc_r+0xa8>
 801326c:	4623      	mov	r3, r4
 801326e:	6864      	ldr	r4, [r4, #4]
 8013270:	e7ae      	b.n	80131d0 <_malloc_r+0x34>
 8013272:	463c      	mov	r4, r7
 8013274:	687f      	ldr	r7, [r7, #4]
 8013276:	e7b6      	b.n	80131e6 <_malloc_r+0x4a>
 8013278:	461a      	mov	r2, r3
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	42a3      	cmp	r3, r4
 801327e:	d1fb      	bne.n	8013278 <_malloc_r+0xdc>
 8013280:	2300      	movs	r3, #0
 8013282:	6053      	str	r3, [r2, #4]
 8013284:	e7de      	b.n	8013244 <_malloc_r+0xa8>
 8013286:	230c      	movs	r3, #12
 8013288:	6033      	str	r3, [r6, #0]
 801328a:	4630      	mov	r0, r6
 801328c:	f000 f80c 	bl	80132a8 <__malloc_unlock>
 8013290:	e794      	b.n	80131bc <_malloc_r+0x20>
 8013292:	6005      	str	r5, [r0, #0]
 8013294:	e7d6      	b.n	8013244 <_malloc_r+0xa8>
 8013296:	bf00      	nop
 8013298:	20001010 	.word	0x20001010

0801329c <__malloc_lock>:
 801329c:	4801      	ldr	r0, [pc, #4]	@ (80132a4 <__malloc_lock+0x8>)
 801329e:	f000 bafa 	b.w	8013896 <__retarget_lock_acquire_recursive>
 80132a2:	bf00      	nop
 80132a4:	20001154 	.word	0x20001154

080132a8 <__malloc_unlock>:
 80132a8:	4801      	ldr	r0, [pc, #4]	@ (80132b0 <__malloc_unlock+0x8>)
 80132aa:	f000 baf5 	b.w	8013898 <__retarget_lock_release_recursive>
 80132ae:	bf00      	nop
 80132b0:	20001154 	.word	0x20001154

080132b4 <std>:
 80132b4:	2300      	movs	r3, #0
 80132b6:	b510      	push	{r4, lr}
 80132b8:	4604      	mov	r4, r0
 80132ba:	e9c0 3300 	strd	r3, r3, [r0]
 80132be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132c2:	6083      	str	r3, [r0, #8]
 80132c4:	8181      	strh	r1, [r0, #12]
 80132c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80132c8:	81c2      	strh	r2, [r0, #14]
 80132ca:	6183      	str	r3, [r0, #24]
 80132cc:	4619      	mov	r1, r3
 80132ce:	2208      	movs	r2, #8
 80132d0:	305c      	adds	r0, #92	@ 0x5c
 80132d2:	f000 fa13 	bl	80136fc <memset>
 80132d6:	4b0d      	ldr	r3, [pc, #52]	@ (801330c <std+0x58>)
 80132d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80132da:	4b0d      	ldr	r3, [pc, #52]	@ (8013310 <std+0x5c>)
 80132dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80132de:	4b0d      	ldr	r3, [pc, #52]	@ (8013314 <std+0x60>)
 80132e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80132e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013318 <std+0x64>)
 80132e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80132e6:	4b0d      	ldr	r3, [pc, #52]	@ (801331c <std+0x68>)
 80132e8:	6224      	str	r4, [r4, #32]
 80132ea:	429c      	cmp	r4, r3
 80132ec:	d006      	beq.n	80132fc <std+0x48>
 80132ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80132f2:	4294      	cmp	r4, r2
 80132f4:	d002      	beq.n	80132fc <std+0x48>
 80132f6:	33d0      	adds	r3, #208	@ 0xd0
 80132f8:	429c      	cmp	r4, r3
 80132fa:	d105      	bne.n	8013308 <std+0x54>
 80132fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013304:	f000 bac6 	b.w	8013894 <__retarget_lock_init_recursive>
 8013308:	bd10      	pop	{r4, pc}
 801330a:	bf00      	nop
 801330c:	08013519 	.word	0x08013519
 8013310:	0801353b 	.word	0x0801353b
 8013314:	08013573 	.word	0x08013573
 8013318:	08013597 	.word	0x08013597
 801331c:	20001014 	.word	0x20001014

08013320 <stdio_exit_handler>:
 8013320:	4a02      	ldr	r2, [pc, #8]	@ (801332c <stdio_exit_handler+0xc>)
 8013322:	4903      	ldr	r1, [pc, #12]	@ (8013330 <stdio_exit_handler+0x10>)
 8013324:	4803      	ldr	r0, [pc, #12]	@ (8013334 <stdio_exit_handler+0x14>)
 8013326:	f000 b869 	b.w	80133fc <_fwalk_sglue>
 801332a:	bf00      	nop
 801332c:	2000002c 	.word	0x2000002c
 8013330:	08013ff5 	.word	0x08013ff5
 8013334:	2000003c 	.word	0x2000003c

08013338 <cleanup_stdio>:
 8013338:	6841      	ldr	r1, [r0, #4]
 801333a:	4b0c      	ldr	r3, [pc, #48]	@ (801336c <cleanup_stdio+0x34>)
 801333c:	4299      	cmp	r1, r3
 801333e:	b510      	push	{r4, lr}
 8013340:	4604      	mov	r4, r0
 8013342:	d001      	beq.n	8013348 <cleanup_stdio+0x10>
 8013344:	f000 fe56 	bl	8013ff4 <_fflush_r>
 8013348:	68a1      	ldr	r1, [r4, #8]
 801334a:	4b09      	ldr	r3, [pc, #36]	@ (8013370 <cleanup_stdio+0x38>)
 801334c:	4299      	cmp	r1, r3
 801334e:	d002      	beq.n	8013356 <cleanup_stdio+0x1e>
 8013350:	4620      	mov	r0, r4
 8013352:	f000 fe4f 	bl	8013ff4 <_fflush_r>
 8013356:	68e1      	ldr	r1, [r4, #12]
 8013358:	4b06      	ldr	r3, [pc, #24]	@ (8013374 <cleanup_stdio+0x3c>)
 801335a:	4299      	cmp	r1, r3
 801335c:	d004      	beq.n	8013368 <cleanup_stdio+0x30>
 801335e:	4620      	mov	r0, r4
 8013360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013364:	f000 be46 	b.w	8013ff4 <_fflush_r>
 8013368:	bd10      	pop	{r4, pc}
 801336a:	bf00      	nop
 801336c:	20001014 	.word	0x20001014
 8013370:	2000107c 	.word	0x2000107c
 8013374:	200010e4 	.word	0x200010e4

08013378 <global_stdio_init.part.0>:
 8013378:	b510      	push	{r4, lr}
 801337a:	4b0b      	ldr	r3, [pc, #44]	@ (80133a8 <global_stdio_init.part.0+0x30>)
 801337c:	4c0b      	ldr	r4, [pc, #44]	@ (80133ac <global_stdio_init.part.0+0x34>)
 801337e:	4a0c      	ldr	r2, [pc, #48]	@ (80133b0 <global_stdio_init.part.0+0x38>)
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	4620      	mov	r0, r4
 8013384:	2200      	movs	r2, #0
 8013386:	2104      	movs	r1, #4
 8013388:	f7ff ff94 	bl	80132b4 <std>
 801338c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013390:	2201      	movs	r2, #1
 8013392:	2109      	movs	r1, #9
 8013394:	f7ff ff8e 	bl	80132b4 <std>
 8013398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801339c:	2202      	movs	r2, #2
 801339e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133a2:	2112      	movs	r1, #18
 80133a4:	f7ff bf86 	b.w	80132b4 <std>
 80133a8:	2000114c 	.word	0x2000114c
 80133ac:	20001014 	.word	0x20001014
 80133b0:	08013321 	.word	0x08013321

080133b4 <__sfp_lock_acquire>:
 80133b4:	4801      	ldr	r0, [pc, #4]	@ (80133bc <__sfp_lock_acquire+0x8>)
 80133b6:	f000 ba6e 	b.w	8013896 <__retarget_lock_acquire_recursive>
 80133ba:	bf00      	nop
 80133bc:	20001155 	.word	0x20001155

080133c0 <__sfp_lock_release>:
 80133c0:	4801      	ldr	r0, [pc, #4]	@ (80133c8 <__sfp_lock_release+0x8>)
 80133c2:	f000 ba69 	b.w	8013898 <__retarget_lock_release_recursive>
 80133c6:	bf00      	nop
 80133c8:	20001155 	.word	0x20001155

080133cc <__sinit>:
 80133cc:	b510      	push	{r4, lr}
 80133ce:	4604      	mov	r4, r0
 80133d0:	f7ff fff0 	bl	80133b4 <__sfp_lock_acquire>
 80133d4:	6a23      	ldr	r3, [r4, #32]
 80133d6:	b11b      	cbz	r3, 80133e0 <__sinit+0x14>
 80133d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133dc:	f7ff bff0 	b.w	80133c0 <__sfp_lock_release>
 80133e0:	4b04      	ldr	r3, [pc, #16]	@ (80133f4 <__sinit+0x28>)
 80133e2:	6223      	str	r3, [r4, #32]
 80133e4:	4b04      	ldr	r3, [pc, #16]	@ (80133f8 <__sinit+0x2c>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d1f5      	bne.n	80133d8 <__sinit+0xc>
 80133ec:	f7ff ffc4 	bl	8013378 <global_stdio_init.part.0>
 80133f0:	e7f2      	b.n	80133d8 <__sinit+0xc>
 80133f2:	bf00      	nop
 80133f4:	08013339 	.word	0x08013339
 80133f8:	2000114c 	.word	0x2000114c

080133fc <_fwalk_sglue>:
 80133fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013400:	4607      	mov	r7, r0
 8013402:	4688      	mov	r8, r1
 8013404:	4614      	mov	r4, r2
 8013406:	2600      	movs	r6, #0
 8013408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801340c:	f1b9 0901 	subs.w	r9, r9, #1
 8013410:	d505      	bpl.n	801341e <_fwalk_sglue+0x22>
 8013412:	6824      	ldr	r4, [r4, #0]
 8013414:	2c00      	cmp	r4, #0
 8013416:	d1f7      	bne.n	8013408 <_fwalk_sglue+0xc>
 8013418:	4630      	mov	r0, r6
 801341a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801341e:	89ab      	ldrh	r3, [r5, #12]
 8013420:	2b01      	cmp	r3, #1
 8013422:	d907      	bls.n	8013434 <_fwalk_sglue+0x38>
 8013424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013428:	3301      	adds	r3, #1
 801342a:	d003      	beq.n	8013434 <_fwalk_sglue+0x38>
 801342c:	4629      	mov	r1, r5
 801342e:	4638      	mov	r0, r7
 8013430:	47c0      	blx	r8
 8013432:	4306      	orrs	r6, r0
 8013434:	3568      	adds	r5, #104	@ 0x68
 8013436:	e7e9      	b.n	801340c <_fwalk_sglue+0x10>

08013438 <iprintf>:
 8013438:	b40f      	push	{r0, r1, r2, r3}
 801343a:	b507      	push	{r0, r1, r2, lr}
 801343c:	4906      	ldr	r1, [pc, #24]	@ (8013458 <iprintf+0x20>)
 801343e:	ab04      	add	r3, sp, #16
 8013440:	6808      	ldr	r0, [r1, #0]
 8013442:	f853 2b04 	ldr.w	r2, [r3], #4
 8013446:	6881      	ldr	r1, [r0, #8]
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	f000 faa9 	bl	80139a0 <_vfiprintf_r>
 801344e:	b003      	add	sp, #12
 8013450:	f85d eb04 	ldr.w	lr, [sp], #4
 8013454:	b004      	add	sp, #16
 8013456:	4770      	bx	lr
 8013458:	20000038 	.word	0x20000038

0801345c <_puts_r>:
 801345c:	6a03      	ldr	r3, [r0, #32]
 801345e:	b570      	push	{r4, r5, r6, lr}
 8013460:	6884      	ldr	r4, [r0, #8]
 8013462:	4605      	mov	r5, r0
 8013464:	460e      	mov	r6, r1
 8013466:	b90b      	cbnz	r3, 801346c <_puts_r+0x10>
 8013468:	f7ff ffb0 	bl	80133cc <__sinit>
 801346c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801346e:	07db      	lsls	r3, r3, #31
 8013470:	d405      	bmi.n	801347e <_puts_r+0x22>
 8013472:	89a3      	ldrh	r3, [r4, #12]
 8013474:	0598      	lsls	r0, r3, #22
 8013476:	d402      	bmi.n	801347e <_puts_r+0x22>
 8013478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801347a:	f000 fa0c 	bl	8013896 <__retarget_lock_acquire_recursive>
 801347e:	89a3      	ldrh	r3, [r4, #12]
 8013480:	0719      	lsls	r1, r3, #28
 8013482:	d502      	bpl.n	801348a <_puts_r+0x2e>
 8013484:	6923      	ldr	r3, [r4, #16]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d135      	bne.n	80134f6 <_puts_r+0x9a>
 801348a:	4621      	mov	r1, r4
 801348c:	4628      	mov	r0, r5
 801348e:	f000 f8c5 	bl	801361c <__swsetup_r>
 8013492:	b380      	cbz	r0, 80134f6 <_puts_r+0x9a>
 8013494:	f04f 35ff 	mov.w	r5, #4294967295
 8013498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801349a:	07da      	lsls	r2, r3, #31
 801349c:	d405      	bmi.n	80134aa <_puts_r+0x4e>
 801349e:	89a3      	ldrh	r3, [r4, #12]
 80134a0:	059b      	lsls	r3, r3, #22
 80134a2:	d402      	bmi.n	80134aa <_puts_r+0x4e>
 80134a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134a6:	f000 f9f7 	bl	8013898 <__retarget_lock_release_recursive>
 80134aa:	4628      	mov	r0, r5
 80134ac:	bd70      	pop	{r4, r5, r6, pc}
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	da04      	bge.n	80134bc <_puts_r+0x60>
 80134b2:	69a2      	ldr	r2, [r4, #24]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	dc17      	bgt.n	80134e8 <_puts_r+0x8c>
 80134b8:	290a      	cmp	r1, #10
 80134ba:	d015      	beq.n	80134e8 <_puts_r+0x8c>
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	1c5a      	adds	r2, r3, #1
 80134c0:	6022      	str	r2, [r4, #0]
 80134c2:	7019      	strb	r1, [r3, #0]
 80134c4:	68a3      	ldr	r3, [r4, #8]
 80134c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80134ca:	3b01      	subs	r3, #1
 80134cc:	60a3      	str	r3, [r4, #8]
 80134ce:	2900      	cmp	r1, #0
 80134d0:	d1ed      	bne.n	80134ae <_puts_r+0x52>
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	da11      	bge.n	80134fa <_puts_r+0x9e>
 80134d6:	4622      	mov	r2, r4
 80134d8:	210a      	movs	r1, #10
 80134da:	4628      	mov	r0, r5
 80134dc:	f000 f85f 	bl	801359e <__swbuf_r>
 80134e0:	3001      	adds	r0, #1
 80134e2:	d0d7      	beq.n	8013494 <_puts_r+0x38>
 80134e4:	250a      	movs	r5, #10
 80134e6:	e7d7      	b.n	8013498 <_puts_r+0x3c>
 80134e8:	4622      	mov	r2, r4
 80134ea:	4628      	mov	r0, r5
 80134ec:	f000 f857 	bl	801359e <__swbuf_r>
 80134f0:	3001      	adds	r0, #1
 80134f2:	d1e7      	bne.n	80134c4 <_puts_r+0x68>
 80134f4:	e7ce      	b.n	8013494 <_puts_r+0x38>
 80134f6:	3e01      	subs	r6, #1
 80134f8:	e7e4      	b.n	80134c4 <_puts_r+0x68>
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	1c5a      	adds	r2, r3, #1
 80134fe:	6022      	str	r2, [r4, #0]
 8013500:	220a      	movs	r2, #10
 8013502:	701a      	strb	r2, [r3, #0]
 8013504:	e7ee      	b.n	80134e4 <_puts_r+0x88>
	...

08013508 <puts>:
 8013508:	4b02      	ldr	r3, [pc, #8]	@ (8013514 <puts+0xc>)
 801350a:	4601      	mov	r1, r0
 801350c:	6818      	ldr	r0, [r3, #0]
 801350e:	f7ff bfa5 	b.w	801345c <_puts_r>
 8013512:	bf00      	nop
 8013514:	20000038 	.word	0x20000038

08013518 <__sread>:
 8013518:	b510      	push	{r4, lr}
 801351a:	460c      	mov	r4, r1
 801351c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013520:	f000 f946 	bl	80137b0 <_read_r>
 8013524:	2800      	cmp	r0, #0
 8013526:	bfab      	itete	ge
 8013528:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801352a:	89a3      	ldrhlt	r3, [r4, #12]
 801352c:	181b      	addge	r3, r3, r0
 801352e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013532:	bfac      	ite	ge
 8013534:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013536:	81a3      	strhlt	r3, [r4, #12]
 8013538:	bd10      	pop	{r4, pc}

0801353a <__swrite>:
 801353a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801353e:	461f      	mov	r7, r3
 8013540:	898b      	ldrh	r3, [r1, #12]
 8013542:	05db      	lsls	r3, r3, #23
 8013544:	4605      	mov	r5, r0
 8013546:	460c      	mov	r4, r1
 8013548:	4616      	mov	r6, r2
 801354a:	d505      	bpl.n	8013558 <__swrite+0x1e>
 801354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013550:	2302      	movs	r3, #2
 8013552:	2200      	movs	r2, #0
 8013554:	f000 f91a 	bl	801378c <_lseek_r>
 8013558:	89a3      	ldrh	r3, [r4, #12]
 801355a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801355e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013562:	81a3      	strh	r3, [r4, #12]
 8013564:	4632      	mov	r2, r6
 8013566:	463b      	mov	r3, r7
 8013568:	4628      	mov	r0, r5
 801356a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801356e:	f000 b955 	b.w	801381c <_write_r>

08013572 <__sseek>:
 8013572:	b510      	push	{r4, lr}
 8013574:	460c      	mov	r4, r1
 8013576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801357a:	f000 f907 	bl	801378c <_lseek_r>
 801357e:	1c43      	adds	r3, r0, #1
 8013580:	89a3      	ldrh	r3, [r4, #12]
 8013582:	bf15      	itete	ne
 8013584:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013586:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801358a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801358e:	81a3      	strheq	r3, [r4, #12]
 8013590:	bf18      	it	ne
 8013592:	81a3      	strhne	r3, [r4, #12]
 8013594:	bd10      	pop	{r4, pc}

08013596 <__sclose>:
 8013596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801359a:	f000 b8e7 	b.w	801376c <_close_r>

0801359e <__swbuf_r>:
 801359e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a0:	460e      	mov	r6, r1
 80135a2:	4614      	mov	r4, r2
 80135a4:	4605      	mov	r5, r0
 80135a6:	b118      	cbz	r0, 80135b0 <__swbuf_r+0x12>
 80135a8:	6a03      	ldr	r3, [r0, #32]
 80135aa:	b90b      	cbnz	r3, 80135b0 <__swbuf_r+0x12>
 80135ac:	f7ff ff0e 	bl	80133cc <__sinit>
 80135b0:	69a3      	ldr	r3, [r4, #24]
 80135b2:	60a3      	str	r3, [r4, #8]
 80135b4:	89a3      	ldrh	r3, [r4, #12]
 80135b6:	071a      	lsls	r2, r3, #28
 80135b8:	d501      	bpl.n	80135be <__swbuf_r+0x20>
 80135ba:	6923      	ldr	r3, [r4, #16]
 80135bc:	b943      	cbnz	r3, 80135d0 <__swbuf_r+0x32>
 80135be:	4621      	mov	r1, r4
 80135c0:	4628      	mov	r0, r5
 80135c2:	f000 f82b 	bl	801361c <__swsetup_r>
 80135c6:	b118      	cbz	r0, 80135d0 <__swbuf_r+0x32>
 80135c8:	f04f 37ff 	mov.w	r7, #4294967295
 80135cc:	4638      	mov	r0, r7
 80135ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	6922      	ldr	r2, [r4, #16]
 80135d4:	1a98      	subs	r0, r3, r2
 80135d6:	6963      	ldr	r3, [r4, #20]
 80135d8:	b2f6      	uxtb	r6, r6
 80135da:	4283      	cmp	r3, r0
 80135dc:	4637      	mov	r7, r6
 80135de:	dc05      	bgt.n	80135ec <__swbuf_r+0x4e>
 80135e0:	4621      	mov	r1, r4
 80135e2:	4628      	mov	r0, r5
 80135e4:	f000 fd06 	bl	8013ff4 <_fflush_r>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d1ed      	bne.n	80135c8 <__swbuf_r+0x2a>
 80135ec:	68a3      	ldr	r3, [r4, #8]
 80135ee:	3b01      	subs	r3, #1
 80135f0:	60a3      	str	r3, [r4, #8]
 80135f2:	6823      	ldr	r3, [r4, #0]
 80135f4:	1c5a      	adds	r2, r3, #1
 80135f6:	6022      	str	r2, [r4, #0]
 80135f8:	701e      	strb	r6, [r3, #0]
 80135fa:	6962      	ldr	r2, [r4, #20]
 80135fc:	1c43      	adds	r3, r0, #1
 80135fe:	429a      	cmp	r2, r3
 8013600:	d004      	beq.n	801360c <__swbuf_r+0x6e>
 8013602:	89a3      	ldrh	r3, [r4, #12]
 8013604:	07db      	lsls	r3, r3, #31
 8013606:	d5e1      	bpl.n	80135cc <__swbuf_r+0x2e>
 8013608:	2e0a      	cmp	r6, #10
 801360a:	d1df      	bne.n	80135cc <__swbuf_r+0x2e>
 801360c:	4621      	mov	r1, r4
 801360e:	4628      	mov	r0, r5
 8013610:	f000 fcf0 	bl	8013ff4 <_fflush_r>
 8013614:	2800      	cmp	r0, #0
 8013616:	d0d9      	beq.n	80135cc <__swbuf_r+0x2e>
 8013618:	e7d6      	b.n	80135c8 <__swbuf_r+0x2a>
	...

0801361c <__swsetup_r>:
 801361c:	b538      	push	{r3, r4, r5, lr}
 801361e:	4b29      	ldr	r3, [pc, #164]	@ (80136c4 <__swsetup_r+0xa8>)
 8013620:	4605      	mov	r5, r0
 8013622:	6818      	ldr	r0, [r3, #0]
 8013624:	460c      	mov	r4, r1
 8013626:	b118      	cbz	r0, 8013630 <__swsetup_r+0x14>
 8013628:	6a03      	ldr	r3, [r0, #32]
 801362a:	b90b      	cbnz	r3, 8013630 <__swsetup_r+0x14>
 801362c:	f7ff fece 	bl	80133cc <__sinit>
 8013630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013634:	0719      	lsls	r1, r3, #28
 8013636:	d422      	bmi.n	801367e <__swsetup_r+0x62>
 8013638:	06da      	lsls	r2, r3, #27
 801363a:	d407      	bmi.n	801364c <__swsetup_r+0x30>
 801363c:	2209      	movs	r2, #9
 801363e:	602a      	str	r2, [r5, #0]
 8013640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013644:	81a3      	strh	r3, [r4, #12]
 8013646:	f04f 30ff 	mov.w	r0, #4294967295
 801364a:	e033      	b.n	80136b4 <__swsetup_r+0x98>
 801364c:	0758      	lsls	r0, r3, #29
 801364e:	d512      	bpl.n	8013676 <__swsetup_r+0x5a>
 8013650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013652:	b141      	cbz	r1, 8013666 <__swsetup_r+0x4a>
 8013654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013658:	4299      	cmp	r1, r3
 801365a:	d002      	beq.n	8013662 <__swsetup_r+0x46>
 801365c:	4628      	mov	r0, r5
 801365e:	f000 f92b 	bl	80138b8 <_free_r>
 8013662:	2300      	movs	r3, #0
 8013664:	6363      	str	r3, [r4, #52]	@ 0x34
 8013666:	89a3      	ldrh	r3, [r4, #12]
 8013668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801366c:	81a3      	strh	r3, [r4, #12]
 801366e:	2300      	movs	r3, #0
 8013670:	6063      	str	r3, [r4, #4]
 8013672:	6923      	ldr	r3, [r4, #16]
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	89a3      	ldrh	r3, [r4, #12]
 8013678:	f043 0308 	orr.w	r3, r3, #8
 801367c:	81a3      	strh	r3, [r4, #12]
 801367e:	6923      	ldr	r3, [r4, #16]
 8013680:	b94b      	cbnz	r3, 8013696 <__swsetup_r+0x7a>
 8013682:	89a3      	ldrh	r3, [r4, #12]
 8013684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801368c:	d003      	beq.n	8013696 <__swsetup_r+0x7a>
 801368e:	4621      	mov	r1, r4
 8013690:	4628      	mov	r0, r5
 8013692:	f000 fcfd 	bl	8014090 <__smakebuf_r>
 8013696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801369a:	f013 0201 	ands.w	r2, r3, #1
 801369e:	d00a      	beq.n	80136b6 <__swsetup_r+0x9a>
 80136a0:	2200      	movs	r2, #0
 80136a2:	60a2      	str	r2, [r4, #8]
 80136a4:	6962      	ldr	r2, [r4, #20]
 80136a6:	4252      	negs	r2, r2
 80136a8:	61a2      	str	r2, [r4, #24]
 80136aa:	6922      	ldr	r2, [r4, #16]
 80136ac:	b942      	cbnz	r2, 80136c0 <__swsetup_r+0xa4>
 80136ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80136b2:	d1c5      	bne.n	8013640 <__swsetup_r+0x24>
 80136b4:	bd38      	pop	{r3, r4, r5, pc}
 80136b6:	0799      	lsls	r1, r3, #30
 80136b8:	bf58      	it	pl
 80136ba:	6962      	ldrpl	r2, [r4, #20]
 80136bc:	60a2      	str	r2, [r4, #8]
 80136be:	e7f4      	b.n	80136aa <__swsetup_r+0x8e>
 80136c0:	2000      	movs	r0, #0
 80136c2:	e7f7      	b.n	80136b4 <__swsetup_r+0x98>
 80136c4:	20000038 	.word	0x20000038

080136c8 <memmove>:
 80136c8:	4288      	cmp	r0, r1
 80136ca:	b510      	push	{r4, lr}
 80136cc:	eb01 0402 	add.w	r4, r1, r2
 80136d0:	d902      	bls.n	80136d8 <memmove+0x10>
 80136d2:	4284      	cmp	r4, r0
 80136d4:	4623      	mov	r3, r4
 80136d6:	d807      	bhi.n	80136e8 <memmove+0x20>
 80136d8:	1e43      	subs	r3, r0, #1
 80136da:	42a1      	cmp	r1, r4
 80136dc:	d008      	beq.n	80136f0 <memmove+0x28>
 80136de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136e6:	e7f8      	b.n	80136da <memmove+0x12>
 80136e8:	4402      	add	r2, r0
 80136ea:	4601      	mov	r1, r0
 80136ec:	428a      	cmp	r2, r1
 80136ee:	d100      	bne.n	80136f2 <memmove+0x2a>
 80136f0:	bd10      	pop	{r4, pc}
 80136f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136fa:	e7f7      	b.n	80136ec <memmove+0x24>

080136fc <memset>:
 80136fc:	4402      	add	r2, r0
 80136fe:	4603      	mov	r3, r0
 8013700:	4293      	cmp	r3, r2
 8013702:	d100      	bne.n	8013706 <memset+0xa>
 8013704:	4770      	bx	lr
 8013706:	f803 1b01 	strb.w	r1, [r3], #1
 801370a:	e7f9      	b.n	8013700 <memset+0x4>

0801370c <_raise_r>:
 801370c:	291f      	cmp	r1, #31
 801370e:	b538      	push	{r3, r4, r5, lr}
 8013710:	4605      	mov	r5, r0
 8013712:	460c      	mov	r4, r1
 8013714:	d904      	bls.n	8013720 <_raise_r+0x14>
 8013716:	2316      	movs	r3, #22
 8013718:	6003      	str	r3, [r0, #0]
 801371a:	f04f 30ff 	mov.w	r0, #4294967295
 801371e:	bd38      	pop	{r3, r4, r5, pc}
 8013720:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013722:	b112      	cbz	r2, 801372a <_raise_r+0x1e>
 8013724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013728:	b94b      	cbnz	r3, 801373e <_raise_r+0x32>
 801372a:	4628      	mov	r0, r5
 801372c:	f000 f864 	bl	80137f8 <_getpid_r>
 8013730:	4622      	mov	r2, r4
 8013732:	4601      	mov	r1, r0
 8013734:	4628      	mov	r0, r5
 8013736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801373a:	f000 b84b 	b.w	80137d4 <_kill_r>
 801373e:	2b01      	cmp	r3, #1
 8013740:	d00a      	beq.n	8013758 <_raise_r+0x4c>
 8013742:	1c59      	adds	r1, r3, #1
 8013744:	d103      	bne.n	801374e <_raise_r+0x42>
 8013746:	2316      	movs	r3, #22
 8013748:	6003      	str	r3, [r0, #0]
 801374a:	2001      	movs	r0, #1
 801374c:	e7e7      	b.n	801371e <_raise_r+0x12>
 801374e:	2100      	movs	r1, #0
 8013750:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013754:	4620      	mov	r0, r4
 8013756:	4798      	blx	r3
 8013758:	2000      	movs	r0, #0
 801375a:	e7e0      	b.n	801371e <_raise_r+0x12>

0801375c <raise>:
 801375c:	4b02      	ldr	r3, [pc, #8]	@ (8013768 <raise+0xc>)
 801375e:	4601      	mov	r1, r0
 8013760:	6818      	ldr	r0, [r3, #0]
 8013762:	f7ff bfd3 	b.w	801370c <_raise_r>
 8013766:	bf00      	nop
 8013768:	20000038 	.word	0x20000038

0801376c <_close_r>:
 801376c:	b538      	push	{r3, r4, r5, lr}
 801376e:	4d06      	ldr	r5, [pc, #24]	@ (8013788 <_close_r+0x1c>)
 8013770:	2300      	movs	r3, #0
 8013772:	4604      	mov	r4, r0
 8013774:	4608      	mov	r0, r1
 8013776:	602b      	str	r3, [r5, #0]
 8013778:	f7ef fd18 	bl	80031ac <_close>
 801377c:	1c43      	adds	r3, r0, #1
 801377e:	d102      	bne.n	8013786 <_close_r+0x1a>
 8013780:	682b      	ldr	r3, [r5, #0]
 8013782:	b103      	cbz	r3, 8013786 <_close_r+0x1a>
 8013784:	6023      	str	r3, [r4, #0]
 8013786:	bd38      	pop	{r3, r4, r5, pc}
 8013788:	20001150 	.word	0x20001150

0801378c <_lseek_r>:
 801378c:	b538      	push	{r3, r4, r5, lr}
 801378e:	4d07      	ldr	r5, [pc, #28]	@ (80137ac <_lseek_r+0x20>)
 8013790:	4604      	mov	r4, r0
 8013792:	4608      	mov	r0, r1
 8013794:	4611      	mov	r1, r2
 8013796:	2200      	movs	r2, #0
 8013798:	602a      	str	r2, [r5, #0]
 801379a:	461a      	mov	r2, r3
 801379c:	f7ef fd2d 	bl	80031fa <_lseek>
 80137a0:	1c43      	adds	r3, r0, #1
 80137a2:	d102      	bne.n	80137aa <_lseek_r+0x1e>
 80137a4:	682b      	ldr	r3, [r5, #0]
 80137a6:	b103      	cbz	r3, 80137aa <_lseek_r+0x1e>
 80137a8:	6023      	str	r3, [r4, #0]
 80137aa:	bd38      	pop	{r3, r4, r5, pc}
 80137ac:	20001150 	.word	0x20001150

080137b0 <_read_r>:
 80137b0:	b538      	push	{r3, r4, r5, lr}
 80137b2:	4d07      	ldr	r5, [pc, #28]	@ (80137d0 <_read_r+0x20>)
 80137b4:	4604      	mov	r4, r0
 80137b6:	4608      	mov	r0, r1
 80137b8:	4611      	mov	r1, r2
 80137ba:	2200      	movs	r2, #0
 80137bc:	602a      	str	r2, [r5, #0]
 80137be:	461a      	mov	r2, r3
 80137c0:	f7ef fcbb 	bl	800313a <_read>
 80137c4:	1c43      	adds	r3, r0, #1
 80137c6:	d102      	bne.n	80137ce <_read_r+0x1e>
 80137c8:	682b      	ldr	r3, [r5, #0]
 80137ca:	b103      	cbz	r3, 80137ce <_read_r+0x1e>
 80137cc:	6023      	str	r3, [r4, #0]
 80137ce:	bd38      	pop	{r3, r4, r5, pc}
 80137d0:	20001150 	.word	0x20001150

080137d4 <_kill_r>:
 80137d4:	b538      	push	{r3, r4, r5, lr}
 80137d6:	4d07      	ldr	r5, [pc, #28]	@ (80137f4 <_kill_r+0x20>)
 80137d8:	2300      	movs	r3, #0
 80137da:	4604      	mov	r4, r0
 80137dc:	4608      	mov	r0, r1
 80137de:	4611      	mov	r1, r2
 80137e0:	602b      	str	r3, [r5, #0]
 80137e2:	f7ef fc8f 	bl	8003104 <_kill>
 80137e6:	1c43      	adds	r3, r0, #1
 80137e8:	d102      	bne.n	80137f0 <_kill_r+0x1c>
 80137ea:	682b      	ldr	r3, [r5, #0]
 80137ec:	b103      	cbz	r3, 80137f0 <_kill_r+0x1c>
 80137ee:	6023      	str	r3, [r4, #0]
 80137f0:	bd38      	pop	{r3, r4, r5, pc}
 80137f2:	bf00      	nop
 80137f4:	20001150 	.word	0x20001150

080137f8 <_getpid_r>:
 80137f8:	f7ef bc7c 	b.w	80030f4 <_getpid>

080137fc <_sbrk_r>:
 80137fc:	b538      	push	{r3, r4, r5, lr}
 80137fe:	4d06      	ldr	r5, [pc, #24]	@ (8013818 <_sbrk_r+0x1c>)
 8013800:	2300      	movs	r3, #0
 8013802:	4604      	mov	r4, r0
 8013804:	4608      	mov	r0, r1
 8013806:	602b      	str	r3, [r5, #0]
 8013808:	f7ef fd04 	bl	8003214 <_sbrk>
 801380c:	1c43      	adds	r3, r0, #1
 801380e:	d102      	bne.n	8013816 <_sbrk_r+0x1a>
 8013810:	682b      	ldr	r3, [r5, #0]
 8013812:	b103      	cbz	r3, 8013816 <_sbrk_r+0x1a>
 8013814:	6023      	str	r3, [r4, #0]
 8013816:	bd38      	pop	{r3, r4, r5, pc}
 8013818:	20001150 	.word	0x20001150

0801381c <_write_r>:
 801381c:	b538      	push	{r3, r4, r5, lr}
 801381e:	4d07      	ldr	r5, [pc, #28]	@ (801383c <_write_r+0x20>)
 8013820:	4604      	mov	r4, r0
 8013822:	4608      	mov	r0, r1
 8013824:	4611      	mov	r1, r2
 8013826:	2200      	movs	r2, #0
 8013828:	602a      	str	r2, [r5, #0]
 801382a:	461a      	mov	r2, r3
 801382c:	f7ef fca2 	bl	8003174 <_write>
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	d102      	bne.n	801383a <_write_r+0x1e>
 8013834:	682b      	ldr	r3, [r5, #0]
 8013836:	b103      	cbz	r3, 801383a <_write_r+0x1e>
 8013838:	6023      	str	r3, [r4, #0]
 801383a:	bd38      	pop	{r3, r4, r5, pc}
 801383c:	20001150 	.word	0x20001150

08013840 <__errno>:
 8013840:	4b01      	ldr	r3, [pc, #4]	@ (8013848 <__errno+0x8>)
 8013842:	6818      	ldr	r0, [r3, #0]
 8013844:	4770      	bx	lr
 8013846:	bf00      	nop
 8013848:	20000038 	.word	0x20000038

0801384c <__libc_init_array>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	4d0d      	ldr	r5, [pc, #52]	@ (8013884 <__libc_init_array+0x38>)
 8013850:	4c0d      	ldr	r4, [pc, #52]	@ (8013888 <__libc_init_array+0x3c>)
 8013852:	1b64      	subs	r4, r4, r5
 8013854:	10a4      	asrs	r4, r4, #2
 8013856:	2600      	movs	r6, #0
 8013858:	42a6      	cmp	r6, r4
 801385a:	d109      	bne.n	8013870 <__libc_init_array+0x24>
 801385c:	4d0b      	ldr	r5, [pc, #44]	@ (801388c <__libc_init_array+0x40>)
 801385e:	4c0c      	ldr	r4, [pc, #48]	@ (8013890 <__libc_init_array+0x44>)
 8013860:	f000 fc74 	bl	801414c <_init>
 8013864:	1b64      	subs	r4, r4, r5
 8013866:	10a4      	asrs	r4, r4, #2
 8013868:	2600      	movs	r6, #0
 801386a:	42a6      	cmp	r6, r4
 801386c:	d105      	bne.n	801387a <__libc_init_array+0x2e>
 801386e:	bd70      	pop	{r4, r5, r6, pc}
 8013870:	f855 3b04 	ldr.w	r3, [r5], #4
 8013874:	4798      	blx	r3
 8013876:	3601      	adds	r6, #1
 8013878:	e7ee      	b.n	8013858 <__libc_init_array+0xc>
 801387a:	f855 3b04 	ldr.w	r3, [r5], #4
 801387e:	4798      	blx	r3
 8013880:	3601      	adds	r6, #1
 8013882:	e7f2      	b.n	801386a <__libc_init_array+0x1e>
 8013884:	080144cc 	.word	0x080144cc
 8013888:	080144cc 	.word	0x080144cc
 801388c:	080144cc 	.word	0x080144cc
 8013890:	080144d0 	.word	0x080144d0

08013894 <__retarget_lock_init_recursive>:
 8013894:	4770      	bx	lr

08013896 <__retarget_lock_acquire_recursive>:
 8013896:	4770      	bx	lr

08013898 <__retarget_lock_release_recursive>:
 8013898:	4770      	bx	lr

0801389a <memcpy>:
 801389a:	440a      	add	r2, r1
 801389c:	4291      	cmp	r1, r2
 801389e:	f100 33ff 	add.w	r3, r0, #4294967295
 80138a2:	d100      	bne.n	80138a6 <memcpy+0xc>
 80138a4:	4770      	bx	lr
 80138a6:	b510      	push	{r4, lr}
 80138a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138b0:	4291      	cmp	r1, r2
 80138b2:	d1f9      	bne.n	80138a8 <memcpy+0xe>
 80138b4:	bd10      	pop	{r4, pc}
	...

080138b8 <_free_r>:
 80138b8:	b538      	push	{r3, r4, r5, lr}
 80138ba:	4605      	mov	r5, r0
 80138bc:	2900      	cmp	r1, #0
 80138be:	d041      	beq.n	8013944 <_free_r+0x8c>
 80138c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138c4:	1f0c      	subs	r4, r1, #4
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	bfb8      	it	lt
 80138ca:	18e4      	addlt	r4, r4, r3
 80138cc:	f7ff fce6 	bl	801329c <__malloc_lock>
 80138d0:	4a1d      	ldr	r2, [pc, #116]	@ (8013948 <_free_r+0x90>)
 80138d2:	6813      	ldr	r3, [r2, #0]
 80138d4:	b933      	cbnz	r3, 80138e4 <_free_r+0x2c>
 80138d6:	6063      	str	r3, [r4, #4]
 80138d8:	6014      	str	r4, [r2, #0]
 80138da:	4628      	mov	r0, r5
 80138dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138e0:	f7ff bce2 	b.w	80132a8 <__malloc_unlock>
 80138e4:	42a3      	cmp	r3, r4
 80138e6:	d908      	bls.n	80138fa <_free_r+0x42>
 80138e8:	6820      	ldr	r0, [r4, #0]
 80138ea:	1821      	adds	r1, r4, r0
 80138ec:	428b      	cmp	r3, r1
 80138ee:	bf01      	itttt	eq
 80138f0:	6819      	ldreq	r1, [r3, #0]
 80138f2:	685b      	ldreq	r3, [r3, #4]
 80138f4:	1809      	addeq	r1, r1, r0
 80138f6:	6021      	streq	r1, [r4, #0]
 80138f8:	e7ed      	b.n	80138d6 <_free_r+0x1e>
 80138fa:	461a      	mov	r2, r3
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	b10b      	cbz	r3, 8013904 <_free_r+0x4c>
 8013900:	42a3      	cmp	r3, r4
 8013902:	d9fa      	bls.n	80138fa <_free_r+0x42>
 8013904:	6811      	ldr	r1, [r2, #0]
 8013906:	1850      	adds	r0, r2, r1
 8013908:	42a0      	cmp	r0, r4
 801390a:	d10b      	bne.n	8013924 <_free_r+0x6c>
 801390c:	6820      	ldr	r0, [r4, #0]
 801390e:	4401      	add	r1, r0
 8013910:	1850      	adds	r0, r2, r1
 8013912:	4283      	cmp	r3, r0
 8013914:	6011      	str	r1, [r2, #0]
 8013916:	d1e0      	bne.n	80138da <_free_r+0x22>
 8013918:	6818      	ldr	r0, [r3, #0]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	6053      	str	r3, [r2, #4]
 801391e:	4408      	add	r0, r1
 8013920:	6010      	str	r0, [r2, #0]
 8013922:	e7da      	b.n	80138da <_free_r+0x22>
 8013924:	d902      	bls.n	801392c <_free_r+0x74>
 8013926:	230c      	movs	r3, #12
 8013928:	602b      	str	r3, [r5, #0]
 801392a:	e7d6      	b.n	80138da <_free_r+0x22>
 801392c:	6820      	ldr	r0, [r4, #0]
 801392e:	1821      	adds	r1, r4, r0
 8013930:	428b      	cmp	r3, r1
 8013932:	bf04      	itt	eq
 8013934:	6819      	ldreq	r1, [r3, #0]
 8013936:	685b      	ldreq	r3, [r3, #4]
 8013938:	6063      	str	r3, [r4, #4]
 801393a:	bf04      	itt	eq
 801393c:	1809      	addeq	r1, r1, r0
 801393e:	6021      	streq	r1, [r4, #0]
 8013940:	6054      	str	r4, [r2, #4]
 8013942:	e7ca      	b.n	80138da <_free_r+0x22>
 8013944:	bd38      	pop	{r3, r4, r5, pc}
 8013946:	bf00      	nop
 8013948:	20001010 	.word	0x20001010

0801394c <__sfputc_r>:
 801394c:	6893      	ldr	r3, [r2, #8]
 801394e:	3b01      	subs	r3, #1
 8013950:	2b00      	cmp	r3, #0
 8013952:	b410      	push	{r4}
 8013954:	6093      	str	r3, [r2, #8]
 8013956:	da08      	bge.n	801396a <__sfputc_r+0x1e>
 8013958:	6994      	ldr	r4, [r2, #24]
 801395a:	42a3      	cmp	r3, r4
 801395c:	db01      	blt.n	8013962 <__sfputc_r+0x16>
 801395e:	290a      	cmp	r1, #10
 8013960:	d103      	bne.n	801396a <__sfputc_r+0x1e>
 8013962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013966:	f7ff be1a 	b.w	801359e <__swbuf_r>
 801396a:	6813      	ldr	r3, [r2, #0]
 801396c:	1c58      	adds	r0, r3, #1
 801396e:	6010      	str	r0, [r2, #0]
 8013970:	7019      	strb	r1, [r3, #0]
 8013972:	4608      	mov	r0, r1
 8013974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013978:	4770      	bx	lr

0801397a <__sfputs_r>:
 801397a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397c:	4606      	mov	r6, r0
 801397e:	460f      	mov	r7, r1
 8013980:	4614      	mov	r4, r2
 8013982:	18d5      	adds	r5, r2, r3
 8013984:	42ac      	cmp	r4, r5
 8013986:	d101      	bne.n	801398c <__sfputs_r+0x12>
 8013988:	2000      	movs	r0, #0
 801398a:	e007      	b.n	801399c <__sfputs_r+0x22>
 801398c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013990:	463a      	mov	r2, r7
 8013992:	4630      	mov	r0, r6
 8013994:	f7ff ffda 	bl	801394c <__sfputc_r>
 8013998:	1c43      	adds	r3, r0, #1
 801399a:	d1f3      	bne.n	8013984 <__sfputs_r+0xa>
 801399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080139a0 <_vfiprintf_r>:
 80139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	460d      	mov	r5, r1
 80139a6:	b09d      	sub	sp, #116	@ 0x74
 80139a8:	4614      	mov	r4, r2
 80139aa:	4698      	mov	r8, r3
 80139ac:	4606      	mov	r6, r0
 80139ae:	b118      	cbz	r0, 80139b8 <_vfiprintf_r+0x18>
 80139b0:	6a03      	ldr	r3, [r0, #32]
 80139b2:	b90b      	cbnz	r3, 80139b8 <_vfiprintf_r+0x18>
 80139b4:	f7ff fd0a 	bl	80133cc <__sinit>
 80139b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139ba:	07d9      	lsls	r1, r3, #31
 80139bc:	d405      	bmi.n	80139ca <_vfiprintf_r+0x2a>
 80139be:	89ab      	ldrh	r3, [r5, #12]
 80139c0:	059a      	lsls	r2, r3, #22
 80139c2:	d402      	bmi.n	80139ca <_vfiprintf_r+0x2a>
 80139c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139c6:	f7ff ff66 	bl	8013896 <__retarget_lock_acquire_recursive>
 80139ca:	89ab      	ldrh	r3, [r5, #12]
 80139cc:	071b      	lsls	r3, r3, #28
 80139ce:	d501      	bpl.n	80139d4 <_vfiprintf_r+0x34>
 80139d0:	692b      	ldr	r3, [r5, #16]
 80139d2:	b99b      	cbnz	r3, 80139fc <_vfiprintf_r+0x5c>
 80139d4:	4629      	mov	r1, r5
 80139d6:	4630      	mov	r0, r6
 80139d8:	f7ff fe20 	bl	801361c <__swsetup_r>
 80139dc:	b170      	cbz	r0, 80139fc <_vfiprintf_r+0x5c>
 80139de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139e0:	07dc      	lsls	r4, r3, #31
 80139e2:	d504      	bpl.n	80139ee <_vfiprintf_r+0x4e>
 80139e4:	f04f 30ff 	mov.w	r0, #4294967295
 80139e8:	b01d      	add	sp, #116	@ 0x74
 80139ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ee:	89ab      	ldrh	r3, [r5, #12]
 80139f0:	0598      	lsls	r0, r3, #22
 80139f2:	d4f7      	bmi.n	80139e4 <_vfiprintf_r+0x44>
 80139f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139f6:	f7ff ff4f 	bl	8013898 <__retarget_lock_release_recursive>
 80139fa:	e7f3      	b.n	80139e4 <_vfiprintf_r+0x44>
 80139fc:	2300      	movs	r3, #0
 80139fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a00:	2320      	movs	r3, #32
 8013a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a0a:	2330      	movs	r3, #48	@ 0x30
 8013a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013bbc <_vfiprintf_r+0x21c>
 8013a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a14:	f04f 0901 	mov.w	r9, #1
 8013a18:	4623      	mov	r3, r4
 8013a1a:	469a      	mov	sl, r3
 8013a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a20:	b10a      	cbz	r2, 8013a26 <_vfiprintf_r+0x86>
 8013a22:	2a25      	cmp	r2, #37	@ 0x25
 8013a24:	d1f9      	bne.n	8013a1a <_vfiprintf_r+0x7a>
 8013a26:	ebba 0b04 	subs.w	fp, sl, r4
 8013a2a:	d00b      	beq.n	8013a44 <_vfiprintf_r+0xa4>
 8013a2c:	465b      	mov	r3, fp
 8013a2e:	4622      	mov	r2, r4
 8013a30:	4629      	mov	r1, r5
 8013a32:	4630      	mov	r0, r6
 8013a34:	f7ff ffa1 	bl	801397a <__sfputs_r>
 8013a38:	3001      	adds	r0, #1
 8013a3a:	f000 80a7 	beq.w	8013b8c <_vfiprintf_r+0x1ec>
 8013a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a40:	445a      	add	r2, fp
 8013a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a44:	f89a 3000 	ldrb.w	r3, [sl]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f000 809f 	beq.w	8013b8c <_vfiprintf_r+0x1ec>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	f04f 32ff 	mov.w	r2, #4294967295
 8013a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a58:	f10a 0a01 	add.w	sl, sl, #1
 8013a5c:	9304      	str	r3, [sp, #16]
 8013a5e:	9307      	str	r3, [sp, #28]
 8013a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a66:	4654      	mov	r4, sl
 8013a68:	2205      	movs	r2, #5
 8013a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a6e:	4853      	ldr	r0, [pc, #332]	@ (8013bbc <_vfiprintf_r+0x21c>)
 8013a70:	f7ec fbc6 	bl	8000200 <memchr>
 8013a74:	9a04      	ldr	r2, [sp, #16]
 8013a76:	b9d8      	cbnz	r0, 8013ab0 <_vfiprintf_r+0x110>
 8013a78:	06d1      	lsls	r1, r2, #27
 8013a7a:	bf44      	itt	mi
 8013a7c:	2320      	movmi	r3, #32
 8013a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a82:	0713      	lsls	r3, r2, #28
 8013a84:	bf44      	itt	mi
 8013a86:	232b      	movmi	r3, #43	@ 0x2b
 8013a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a92:	d015      	beq.n	8013ac0 <_vfiprintf_r+0x120>
 8013a94:	9a07      	ldr	r2, [sp, #28]
 8013a96:	4654      	mov	r4, sl
 8013a98:	2000      	movs	r0, #0
 8013a9a:	f04f 0c0a 	mov.w	ip, #10
 8013a9e:	4621      	mov	r1, r4
 8013aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aa4:	3b30      	subs	r3, #48	@ 0x30
 8013aa6:	2b09      	cmp	r3, #9
 8013aa8:	d94b      	bls.n	8013b42 <_vfiprintf_r+0x1a2>
 8013aaa:	b1b0      	cbz	r0, 8013ada <_vfiprintf_r+0x13a>
 8013aac:	9207      	str	r2, [sp, #28]
 8013aae:	e014      	b.n	8013ada <_vfiprintf_r+0x13a>
 8013ab0:	eba0 0308 	sub.w	r3, r0, r8
 8013ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	9304      	str	r3, [sp, #16]
 8013abc:	46a2      	mov	sl, r4
 8013abe:	e7d2      	b.n	8013a66 <_vfiprintf_r+0xc6>
 8013ac0:	9b03      	ldr	r3, [sp, #12]
 8013ac2:	1d19      	adds	r1, r3, #4
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	9103      	str	r1, [sp, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	bfbb      	ittet	lt
 8013acc:	425b      	neglt	r3, r3
 8013ace:	f042 0202 	orrlt.w	r2, r2, #2
 8013ad2:	9307      	strge	r3, [sp, #28]
 8013ad4:	9307      	strlt	r3, [sp, #28]
 8013ad6:	bfb8      	it	lt
 8013ad8:	9204      	strlt	r2, [sp, #16]
 8013ada:	7823      	ldrb	r3, [r4, #0]
 8013adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ade:	d10a      	bne.n	8013af6 <_vfiprintf_r+0x156>
 8013ae0:	7863      	ldrb	r3, [r4, #1]
 8013ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ae4:	d132      	bne.n	8013b4c <_vfiprintf_r+0x1ac>
 8013ae6:	9b03      	ldr	r3, [sp, #12]
 8013ae8:	1d1a      	adds	r2, r3, #4
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	9203      	str	r2, [sp, #12]
 8013aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013af2:	3402      	adds	r4, #2
 8013af4:	9305      	str	r3, [sp, #20]
 8013af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013bcc <_vfiprintf_r+0x22c>
 8013afa:	7821      	ldrb	r1, [r4, #0]
 8013afc:	2203      	movs	r2, #3
 8013afe:	4650      	mov	r0, sl
 8013b00:	f7ec fb7e 	bl	8000200 <memchr>
 8013b04:	b138      	cbz	r0, 8013b16 <_vfiprintf_r+0x176>
 8013b06:	9b04      	ldr	r3, [sp, #16]
 8013b08:	eba0 000a 	sub.w	r0, r0, sl
 8013b0c:	2240      	movs	r2, #64	@ 0x40
 8013b0e:	4082      	lsls	r2, r0
 8013b10:	4313      	orrs	r3, r2
 8013b12:	3401      	adds	r4, #1
 8013b14:	9304      	str	r3, [sp, #16]
 8013b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b1a:	4829      	ldr	r0, [pc, #164]	@ (8013bc0 <_vfiprintf_r+0x220>)
 8013b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b20:	2206      	movs	r2, #6
 8013b22:	f7ec fb6d 	bl	8000200 <memchr>
 8013b26:	2800      	cmp	r0, #0
 8013b28:	d03f      	beq.n	8013baa <_vfiprintf_r+0x20a>
 8013b2a:	4b26      	ldr	r3, [pc, #152]	@ (8013bc4 <_vfiprintf_r+0x224>)
 8013b2c:	bb1b      	cbnz	r3, 8013b76 <_vfiprintf_r+0x1d6>
 8013b2e:	9b03      	ldr	r3, [sp, #12]
 8013b30:	3307      	adds	r3, #7
 8013b32:	f023 0307 	bic.w	r3, r3, #7
 8013b36:	3308      	adds	r3, #8
 8013b38:	9303      	str	r3, [sp, #12]
 8013b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b3c:	443b      	add	r3, r7
 8013b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b40:	e76a      	b.n	8013a18 <_vfiprintf_r+0x78>
 8013b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b46:	460c      	mov	r4, r1
 8013b48:	2001      	movs	r0, #1
 8013b4a:	e7a8      	b.n	8013a9e <_vfiprintf_r+0xfe>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	3401      	adds	r4, #1
 8013b50:	9305      	str	r3, [sp, #20]
 8013b52:	4619      	mov	r1, r3
 8013b54:	f04f 0c0a 	mov.w	ip, #10
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b5e:	3a30      	subs	r2, #48	@ 0x30
 8013b60:	2a09      	cmp	r2, #9
 8013b62:	d903      	bls.n	8013b6c <_vfiprintf_r+0x1cc>
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d0c6      	beq.n	8013af6 <_vfiprintf_r+0x156>
 8013b68:	9105      	str	r1, [sp, #20]
 8013b6a:	e7c4      	b.n	8013af6 <_vfiprintf_r+0x156>
 8013b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b70:	4604      	mov	r4, r0
 8013b72:	2301      	movs	r3, #1
 8013b74:	e7f0      	b.n	8013b58 <_vfiprintf_r+0x1b8>
 8013b76:	ab03      	add	r3, sp, #12
 8013b78:	9300      	str	r3, [sp, #0]
 8013b7a:	462a      	mov	r2, r5
 8013b7c:	4b12      	ldr	r3, [pc, #72]	@ (8013bc8 <_vfiprintf_r+0x228>)
 8013b7e:	a904      	add	r1, sp, #16
 8013b80:	4630      	mov	r0, r6
 8013b82:	f3af 8000 	nop.w
 8013b86:	4607      	mov	r7, r0
 8013b88:	1c78      	adds	r0, r7, #1
 8013b8a:	d1d6      	bne.n	8013b3a <_vfiprintf_r+0x19a>
 8013b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b8e:	07d9      	lsls	r1, r3, #31
 8013b90:	d405      	bmi.n	8013b9e <_vfiprintf_r+0x1fe>
 8013b92:	89ab      	ldrh	r3, [r5, #12]
 8013b94:	059a      	lsls	r2, r3, #22
 8013b96:	d402      	bmi.n	8013b9e <_vfiprintf_r+0x1fe>
 8013b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b9a:	f7ff fe7d 	bl	8013898 <__retarget_lock_release_recursive>
 8013b9e:	89ab      	ldrh	r3, [r5, #12]
 8013ba0:	065b      	lsls	r3, r3, #25
 8013ba2:	f53f af1f 	bmi.w	80139e4 <_vfiprintf_r+0x44>
 8013ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ba8:	e71e      	b.n	80139e8 <_vfiprintf_r+0x48>
 8013baa:	ab03      	add	r3, sp, #12
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	462a      	mov	r2, r5
 8013bb0:	4b05      	ldr	r3, [pc, #20]	@ (8013bc8 <_vfiprintf_r+0x228>)
 8013bb2:	a904      	add	r1, sp, #16
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f000 f879 	bl	8013cac <_printf_i>
 8013bba:	e7e4      	b.n	8013b86 <_vfiprintf_r+0x1e6>
 8013bbc:	0801448f 	.word	0x0801448f
 8013bc0:	08014499 	.word	0x08014499
 8013bc4:	00000000 	.word	0x00000000
 8013bc8:	0801397b 	.word	0x0801397b
 8013bcc:	08014495 	.word	0x08014495

08013bd0 <_printf_common>:
 8013bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bd4:	4616      	mov	r6, r2
 8013bd6:	4698      	mov	r8, r3
 8013bd8:	688a      	ldr	r2, [r1, #8]
 8013bda:	690b      	ldr	r3, [r1, #16]
 8013bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013be0:	4293      	cmp	r3, r2
 8013be2:	bfb8      	it	lt
 8013be4:	4613      	movlt	r3, r2
 8013be6:	6033      	str	r3, [r6, #0]
 8013be8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013bec:	4607      	mov	r7, r0
 8013bee:	460c      	mov	r4, r1
 8013bf0:	b10a      	cbz	r2, 8013bf6 <_printf_common+0x26>
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	6033      	str	r3, [r6, #0]
 8013bf6:	6823      	ldr	r3, [r4, #0]
 8013bf8:	0699      	lsls	r1, r3, #26
 8013bfa:	bf42      	ittt	mi
 8013bfc:	6833      	ldrmi	r3, [r6, #0]
 8013bfe:	3302      	addmi	r3, #2
 8013c00:	6033      	strmi	r3, [r6, #0]
 8013c02:	6825      	ldr	r5, [r4, #0]
 8013c04:	f015 0506 	ands.w	r5, r5, #6
 8013c08:	d106      	bne.n	8013c18 <_printf_common+0x48>
 8013c0a:	f104 0a19 	add.w	sl, r4, #25
 8013c0e:	68e3      	ldr	r3, [r4, #12]
 8013c10:	6832      	ldr	r2, [r6, #0]
 8013c12:	1a9b      	subs	r3, r3, r2
 8013c14:	42ab      	cmp	r3, r5
 8013c16:	dc26      	bgt.n	8013c66 <_printf_common+0x96>
 8013c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013c1c:	6822      	ldr	r2, [r4, #0]
 8013c1e:	3b00      	subs	r3, #0
 8013c20:	bf18      	it	ne
 8013c22:	2301      	movne	r3, #1
 8013c24:	0692      	lsls	r2, r2, #26
 8013c26:	d42b      	bmi.n	8013c80 <_printf_common+0xb0>
 8013c28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013c2c:	4641      	mov	r1, r8
 8013c2e:	4638      	mov	r0, r7
 8013c30:	47c8      	blx	r9
 8013c32:	3001      	adds	r0, #1
 8013c34:	d01e      	beq.n	8013c74 <_printf_common+0xa4>
 8013c36:	6823      	ldr	r3, [r4, #0]
 8013c38:	6922      	ldr	r2, [r4, #16]
 8013c3a:	f003 0306 	and.w	r3, r3, #6
 8013c3e:	2b04      	cmp	r3, #4
 8013c40:	bf02      	ittt	eq
 8013c42:	68e5      	ldreq	r5, [r4, #12]
 8013c44:	6833      	ldreq	r3, [r6, #0]
 8013c46:	1aed      	subeq	r5, r5, r3
 8013c48:	68a3      	ldr	r3, [r4, #8]
 8013c4a:	bf0c      	ite	eq
 8013c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c50:	2500      	movne	r5, #0
 8013c52:	4293      	cmp	r3, r2
 8013c54:	bfc4      	itt	gt
 8013c56:	1a9b      	subgt	r3, r3, r2
 8013c58:	18ed      	addgt	r5, r5, r3
 8013c5a:	2600      	movs	r6, #0
 8013c5c:	341a      	adds	r4, #26
 8013c5e:	42b5      	cmp	r5, r6
 8013c60:	d11a      	bne.n	8013c98 <_printf_common+0xc8>
 8013c62:	2000      	movs	r0, #0
 8013c64:	e008      	b.n	8013c78 <_printf_common+0xa8>
 8013c66:	2301      	movs	r3, #1
 8013c68:	4652      	mov	r2, sl
 8013c6a:	4641      	mov	r1, r8
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	47c8      	blx	r9
 8013c70:	3001      	adds	r0, #1
 8013c72:	d103      	bne.n	8013c7c <_printf_common+0xac>
 8013c74:	f04f 30ff 	mov.w	r0, #4294967295
 8013c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c7c:	3501      	adds	r5, #1
 8013c7e:	e7c6      	b.n	8013c0e <_printf_common+0x3e>
 8013c80:	18e1      	adds	r1, r4, r3
 8013c82:	1c5a      	adds	r2, r3, #1
 8013c84:	2030      	movs	r0, #48	@ 0x30
 8013c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013c8a:	4422      	add	r2, r4
 8013c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013c94:	3302      	adds	r3, #2
 8013c96:	e7c7      	b.n	8013c28 <_printf_common+0x58>
 8013c98:	2301      	movs	r3, #1
 8013c9a:	4622      	mov	r2, r4
 8013c9c:	4641      	mov	r1, r8
 8013c9e:	4638      	mov	r0, r7
 8013ca0:	47c8      	blx	r9
 8013ca2:	3001      	adds	r0, #1
 8013ca4:	d0e6      	beq.n	8013c74 <_printf_common+0xa4>
 8013ca6:	3601      	adds	r6, #1
 8013ca8:	e7d9      	b.n	8013c5e <_printf_common+0x8e>
	...

08013cac <_printf_i>:
 8013cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb0:	7e0f      	ldrb	r7, [r1, #24]
 8013cb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013cb4:	2f78      	cmp	r7, #120	@ 0x78
 8013cb6:	4691      	mov	r9, r2
 8013cb8:	4680      	mov	r8, r0
 8013cba:	460c      	mov	r4, r1
 8013cbc:	469a      	mov	sl, r3
 8013cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013cc2:	d807      	bhi.n	8013cd4 <_printf_i+0x28>
 8013cc4:	2f62      	cmp	r7, #98	@ 0x62
 8013cc6:	d80a      	bhi.n	8013cde <_printf_i+0x32>
 8013cc8:	2f00      	cmp	r7, #0
 8013cca:	f000 80d2 	beq.w	8013e72 <_printf_i+0x1c6>
 8013cce:	2f58      	cmp	r7, #88	@ 0x58
 8013cd0:	f000 80b9 	beq.w	8013e46 <_printf_i+0x19a>
 8013cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013cdc:	e03a      	b.n	8013d54 <_printf_i+0xa8>
 8013cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013ce2:	2b15      	cmp	r3, #21
 8013ce4:	d8f6      	bhi.n	8013cd4 <_printf_i+0x28>
 8013ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8013cec <_printf_i+0x40>)
 8013ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013cec:	08013d45 	.word	0x08013d45
 8013cf0:	08013d59 	.word	0x08013d59
 8013cf4:	08013cd5 	.word	0x08013cd5
 8013cf8:	08013cd5 	.word	0x08013cd5
 8013cfc:	08013cd5 	.word	0x08013cd5
 8013d00:	08013cd5 	.word	0x08013cd5
 8013d04:	08013d59 	.word	0x08013d59
 8013d08:	08013cd5 	.word	0x08013cd5
 8013d0c:	08013cd5 	.word	0x08013cd5
 8013d10:	08013cd5 	.word	0x08013cd5
 8013d14:	08013cd5 	.word	0x08013cd5
 8013d18:	08013e59 	.word	0x08013e59
 8013d1c:	08013d83 	.word	0x08013d83
 8013d20:	08013e13 	.word	0x08013e13
 8013d24:	08013cd5 	.word	0x08013cd5
 8013d28:	08013cd5 	.word	0x08013cd5
 8013d2c:	08013e7b 	.word	0x08013e7b
 8013d30:	08013cd5 	.word	0x08013cd5
 8013d34:	08013d83 	.word	0x08013d83
 8013d38:	08013cd5 	.word	0x08013cd5
 8013d3c:	08013cd5 	.word	0x08013cd5
 8013d40:	08013e1b 	.word	0x08013e1b
 8013d44:	6833      	ldr	r3, [r6, #0]
 8013d46:	1d1a      	adds	r2, r3, #4
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	6032      	str	r2, [r6, #0]
 8013d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013d54:	2301      	movs	r3, #1
 8013d56:	e09d      	b.n	8013e94 <_printf_i+0x1e8>
 8013d58:	6833      	ldr	r3, [r6, #0]
 8013d5a:	6820      	ldr	r0, [r4, #0]
 8013d5c:	1d19      	adds	r1, r3, #4
 8013d5e:	6031      	str	r1, [r6, #0]
 8013d60:	0606      	lsls	r6, r0, #24
 8013d62:	d501      	bpl.n	8013d68 <_printf_i+0xbc>
 8013d64:	681d      	ldr	r5, [r3, #0]
 8013d66:	e003      	b.n	8013d70 <_printf_i+0xc4>
 8013d68:	0645      	lsls	r5, r0, #25
 8013d6a:	d5fb      	bpl.n	8013d64 <_printf_i+0xb8>
 8013d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013d70:	2d00      	cmp	r5, #0
 8013d72:	da03      	bge.n	8013d7c <_printf_i+0xd0>
 8013d74:	232d      	movs	r3, #45	@ 0x2d
 8013d76:	426d      	negs	r5, r5
 8013d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013d7c:	4859      	ldr	r0, [pc, #356]	@ (8013ee4 <_printf_i+0x238>)
 8013d7e:	230a      	movs	r3, #10
 8013d80:	e011      	b.n	8013da6 <_printf_i+0xfa>
 8013d82:	6821      	ldr	r1, [r4, #0]
 8013d84:	6833      	ldr	r3, [r6, #0]
 8013d86:	0608      	lsls	r0, r1, #24
 8013d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8013d8c:	d402      	bmi.n	8013d94 <_printf_i+0xe8>
 8013d8e:	0649      	lsls	r1, r1, #25
 8013d90:	bf48      	it	mi
 8013d92:	b2ad      	uxthmi	r5, r5
 8013d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8013d96:	4853      	ldr	r0, [pc, #332]	@ (8013ee4 <_printf_i+0x238>)
 8013d98:	6033      	str	r3, [r6, #0]
 8013d9a:	bf14      	ite	ne
 8013d9c:	230a      	movne	r3, #10
 8013d9e:	2308      	moveq	r3, #8
 8013da0:	2100      	movs	r1, #0
 8013da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013da6:	6866      	ldr	r6, [r4, #4]
 8013da8:	60a6      	str	r6, [r4, #8]
 8013daa:	2e00      	cmp	r6, #0
 8013dac:	bfa2      	ittt	ge
 8013dae:	6821      	ldrge	r1, [r4, #0]
 8013db0:	f021 0104 	bicge.w	r1, r1, #4
 8013db4:	6021      	strge	r1, [r4, #0]
 8013db6:	b90d      	cbnz	r5, 8013dbc <_printf_i+0x110>
 8013db8:	2e00      	cmp	r6, #0
 8013dba:	d04b      	beq.n	8013e54 <_printf_i+0x1a8>
 8013dbc:	4616      	mov	r6, r2
 8013dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8013dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8013dc6:	5dc7      	ldrb	r7, [r0, r7]
 8013dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013dcc:	462f      	mov	r7, r5
 8013dce:	42bb      	cmp	r3, r7
 8013dd0:	460d      	mov	r5, r1
 8013dd2:	d9f4      	bls.n	8013dbe <_printf_i+0x112>
 8013dd4:	2b08      	cmp	r3, #8
 8013dd6:	d10b      	bne.n	8013df0 <_printf_i+0x144>
 8013dd8:	6823      	ldr	r3, [r4, #0]
 8013dda:	07df      	lsls	r7, r3, #31
 8013ddc:	d508      	bpl.n	8013df0 <_printf_i+0x144>
 8013dde:	6923      	ldr	r3, [r4, #16]
 8013de0:	6861      	ldr	r1, [r4, #4]
 8013de2:	4299      	cmp	r1, r3
 8013de4:	bfde      	ittt	le
 8013de6:	2330      	movle	r3, #48	@ 0x30
 8013de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013dec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013df0:	1b92      	subs	r2, r2, r6
 8013df2:	6122      	str	r2, [r4, #16]
 8013df4:	f8cd a000 	str.w	sl, [sp]
 8013df8:	464b      	mov	r3, r9
 8013dfa:	aa03      	add	r2, sp, #12
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	4640      	mov	r0, r8
 8013e00:	f7ff fee6 	bl	8013bd0 <_printf_common>
 8013e04:	3001      	adds	r0, #1
 8013e06:	d14a      	bne.n	8013e9e <_printf_i+0x1f2>
 8013e08:	f04f 30ff 	mov.w	r0, #4294967295
 8013e0c:	b004      	add	sp, #16
 8013e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	f043 0320 	orr.w	r3, r3, #32
 8013e18:	6023      	str	r3, [r4, #0]
 8013e1a:	4833      	ldr	r0, [pc, #204]	@ (8013ee8 <_printf_i+0x23c>)
 8013e1c:	2778      	movs	r7, #120	@ 0x78
 8013e1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013e22:	6823      	ldr	r3, [r4, #0]
 8013e24:	6831      	ldr	r1, [r6, #0]
 8013e26:	061f      	lsls	r7, r3, #24
 8013e28:	f851 5b04 	ldr.w	r5, [r1], #4
 8013e2c:	d402      	bmi.n	8013e34 <_printf_i+0x188>
 8013e2e:	065f      	lsls	r7, r3, #25
 8013e30:	bf48      	it	mi
 8013e32:	b2ad      	uxthmi	r5, r5
 8013e34:	6031      	str	r1, [r6, #0]
 8013e36:	07d9      	lsls	r1, r3, #31
 8013e38:	bf44      	itt	mi
 8013e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8013e3e:	6023      	strmi	r3, [r4, #0]
 8013e40:	b11d      	cbz	r5, 8013e4a <_printf_i+0x19e>
 8013e42:	2310      	movs	r3, #16
 8013e44:	e7ac      	b.n	8013da0 <_printf_i+0xf4>
 8013e46:	4827      	ldr	r0, [pc, #156]	@ (8013ee4 <_printf_i+0x238>)
 8013e48:	e7e9      	b.n	8013e1e <_printf_i+0x172>
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	f023 0320 	bic.w	r3, r3, #32
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	e7f6      	b.n	8013e42 <_printf_i+0x196>
 8013e54:	4616      	mov	r6, r2
 8013e56:	e7bd      	b.n	8013dd4 <_printf_i+0x128>
 8013e58:	6833      	ldr	r3, [r6, #0]
 8013e5a:	6825      	ldr	r5, [r4, #0]
 8013e5c:	6961      	ldr	r1, [r4, #20]
 8013e5e:	1d18      	adds	r0, r3, #4
 8013e60:	6030      	str	r0, [r6, #0]
 8013e62:	062e      	lsls	r6, r5, #24
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	d501      	bpl.n	8013e6c <_printf_i+0x1c0>
 8013e68:	6019      	str	r1, [r3, #0]
 8013e6a:	e002      	b.n	8013e72 <_printf_i+0x1c6>
 8013e6c:	0668      	lsls	r0, r5, #25
 8013e6e:	d5fb      	bpl.n	8013e68 <_printf_i+0x1bc>
 8013e70:	8019      	strh	r1, [r3, #0]
 8013e72:	2300      	movs	r3, #0
 8013e74:	6123      	str	r3, [r4, #16]
 8013e76:	4616      	mov	r6, r2
 8013e78:	e7bc      	b.n	8013df4 <_printf_i+0x148>
 8013e7a:	6833      	ldr	r3, [r6, #0]
 8013e7c:	1d1a      	adds	r2, r3, #4
 8013e7e:	6032      	str	r2, [r6, #0]
 8013e80:	681e      	ldr	r6, [r3, #0]
 8013e82:	6862      	ldr	r2, [r4, #4]
 8013e84:	2100      	movs	r1, #0
 8013e86:	4630      	mov	r0, r6
 8013e88:	f7ec f9ba 	bl	8000200 <memchr>
 8013e8c:	b108      	cbz	r0, 8013e92 <_printf_i+0x1e6>
 8013e8e:	1b80      	subs	r0, r0, r6
 8013e90:	6060      	str	r0, [r4, #4]
 8013e92:	6863      	ldr	r3, [r4, #4]
 8013e94:	6123      	str	r3, [r4, #16]
 8013e96:	2300      	movs	r3, #0
 8013e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e9c:	e7aa      	b.n	8013df4 <_printf_i+0x148>
 8013e9e:	6923      	ldr	r3, [r4, #16]
 8013ea0:	4632      	mov	r2, r6
 8013ea2:	4649      	mov	r1, r9
 8013ea4:	4640      	mov	r0, r8
 8013ea6:	47d0      	blx	sl
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	d0ad      	beq.n	8013e08 <_printf_i+0x15c>
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	079b      	lsls	r3, r3, #30
 8013eb0:	d413      	bmi.n	8013eda <_printf_i+0x22e>
 8013eb2:	68e0      	ldr	r0, [r4, #12]
 8013eb4:	9b03      	ldr	r3, [sp, #12]
 8013eb6:	4298      	cmp	r0, r3
 8013eb8:	bfb8      	it	lt
 8013eba:	4618      	movlt	r0, r3
 8013ebc:	e7a6      	b.n	8013e0c <_printf_i+0x160>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	4632      	mov	r2, r6
 8013ec2:	4649      	mov	r1, r9
 8013ec4:	4640      	mov	r0, r8
 8013ec6:	47d0      	blx	sl
 8013ec8:	3001      	adds	r0, #1
 8013eca:	d09d      	beq.n	8013e08 <_printf_i+0x15c>
 8013ecc:	3501      	adds	r5, #1
 8013ece:	68e3      	ldr	r3, [r4, #12]
 8013ed0:	9903      	ldr	r1, [sp, #12]
 8013ed2:	1a5b      	subs	r3, r3, r1
 8013ed4:	42ab      	cmp	r3, r5
 8013ed6:	dcf2      	bgt.n	8013ebe <_printf_i+0x212>
 8013ed8:	e7eb      	b.n	8013eb2 <_printf_i+0x206>
 8013eda:	2500      	movs	r5, #0
 8013edc:	f104 0619 	add.w	r6, r4, #25
 8013ee0:	e7f5      	b.n	8013ece <_printf_i+0x222>
 8013ee2:	bf00      	nop
 8013ee4:	080144a0 	.word	0x080144a0
 8013ee8:	080144b1 	.word	0x080144b1

08013eec <__sflush_r>:
 8013eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef4:	0716      	lsls	r6, r2, #28
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	460c      	mov	r4, r1
 8013efa:	d454      	bmi.n	8013fa6 <__sflush_r+0xba>
 8013efc:	684b      	ldr	r3, [r1, #4]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	dc02      	bgt.n	8013f08 <__sflush_r+0x1c>
 8013f02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	dd48      	ble.n	8013f9a <__sflush_r+0xae>
 8013f08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013f0a:	2e00      	cmp	r6, #0
 8013f0c:	d045      	beq.n	8013f9a <__sflush_r+0xae>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013f14:	682f      	ldr	r7, [r5, #0]
 8013f16:	6a21      	ldr	r1, [r4, #32]
 8013f18:	602b      	str	r3, [r5, #0]
 8013f1a:	d030      	beq.n	8013f7e <__sflush_r+0x92>
 8013f1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013f1e:	89a3      	ldrh	r3, [r4, #12]
 8013f20:	0759      	lsls	r1, r3, #29
 8013f22:	d505      	bpl.n	8013f30 <__sflush_r+0x44>
 8013f24:	6863      	ldr	r3, [r4, #4]
 8013f26:	1ad2      	subs	r2, r2, r3
 8013f28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013f2a:	b10b      	cbz	r3, 8013f30 <__sflush_r+0x44>
 8013f2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013f2e:	1ad2      	subs	r2, r2, r3
 8013f30:	2300      	movs	r3, #0
 8013f32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013f34:	6a21      	ldr	r1, [r4, #32]
 8013f36:	4628      	mov	r0, r5
 8013f38:	47b0      	blx	r6
 8013f3a:	1c43      	adds	r3, r0, #1
 8013f3c:	89a3      	ldrh	r3, [r4, #12]
 8013f3e:	d106      	bne.n	8013f4e <__sflush_r+0x62>
 8013f40:	6829      	ldr	r1, [r5, #0]
 8013f42:	291d      	cmp	r1, #29
 8013f44:	d82b      	bhi.n	8013f9e <__sflush_r+0xb2>
 8013f46:	4a2a      	ldr	r2, [pc, #168]	@ (8013ff0 <__sflush_r+0x104>)
 8013f48:	410a      	asrs	r2, r1
 8013f4a:	07d6      	lsls	r6, r2, #31
 8013f4c:	d427      	bmi.n	8013f9e <__sflush_r+0xb2>
 8013f4e:	2200      	movs	r2, #0
 8013f50:	6062      	str	r2, [r4, #4]
 8013f52:	04d9      	lsls	r1, r3, #19
 8013f54:	6922      	ldr	r2, [r4, #16]
 8013f56:	6022      	str	r2, [r4, #0]
 8013f58:	d504      	bpl.n	8013f64 <__sflush_r+0x78>
 8013f5a:	1c42      	adds	r2, r0, #1
 8013f5c:	d101      	bne.n	8013f62 <__sflush_r+0x76>
 8013f5e:	682b      	ldr	r3, [r5, #0]
 8013f60:	b903      	cbnz	r3, 8013f64 <__sflush_r+0x78>
 8013f62:	6560      	str	r0, [r4, #84]	@ 0x54
 8013f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013f66:	602f      	str	r7, [r5, #0]
 8013f68:	b1b9      	cbz	r1, 8013f9a <__sflush_r+0xae>
 8013f6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f6e:	4299      	cmp	r1, r3
 8013f70:	d002      	beq.n	8013f78 <__sflush_r+0x8c>
 8013f72:	4628      	mov	r0, r5
 8013f74:	f7ff fca0 	bl	80138b8 <_free_r>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f7c:	e00d      	b.n	8013f9a <__sflush_r+0xae>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	4628      	mov	r0, r5
 8013f82:	47b0      	blx	r6
 8013f84:	4602      	mov	r2, r0
 8013f86:	1c50      	adds	r0, r2, #1
 8013f88:	d1c9      	bne.n	8013f1e <__sflush_r+0x32>
 8013f8a:	682b      	ldr	r3, [r5, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d0c6      	beq.n	8013f1e <__sflush_r+0x32>
 8013f90:	2b1d      	cmp	r3, #29
 8013f92:	d001      	beq.n	8013f98 <__sflush_r+0xac>
 8013f94:	2b16      	cmp	r3, #22
 8013f96:	d11e      	bne.n	8013fd6 <__sflush_r+0xea>
 8013f98:	602f      	str	r7, [r5, #0]
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	e022      	b.n	8013fe4 <__sflush_r+0xf8>
 8013f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fa2:	b21b      	sxth	r3, r3
 8013fa4:	e01b      	b.n	8013fde <__sflush_r+0xf2>
 8013fa6:	690f      	ldr	r7, [r1, #16]
 8013fa8:	2f00      	cmp	r7, #0
 8013faa:	d0f6      	beq.n	8013f9a <__sflush_r+0xae>
 8013fac:	0793      	lsls	r3, r2, #30
 8013fae:	680e      	ldr	r6, [r1, #0]
 8013fb0:	bf08      	it	eq
 8013fb2:	694b      	ldreq	r3, [r1, #20]
 8013fb4:	600f      	str	r7, [r1, #0]
 8013fb6:	bf18      	it	ne
 8013fb8:	2300      	movne	r3, #0
 8013fba:	eba6 0807 	sub.w	r8, r6, r7
 8013fbe:	608b      	str	r3, [r1, #8]
 8013fc0:	f1b8 0f00 	cmp.w	r8, #0
 8013fc4:	dde9      	ble.n	8013f9a <__sflush_r+0xae>
 8013fc6:	6a21      	ldr	r1, [r4, #32]
 8013fc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013fca:	4643      	mov	r3, r8
 8013fcc:	463a      	mov	r2, r7
 8013fce:	4628      	mov	r0, r5
 8013fd0:	47b0      	blx	r6
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	dc08      	bgt.n	8013fe8 <__sflush_r+0xfc>
 8013fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fde:	81a3      	strh	r3, [r4, #12]
 8013fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe8:	4407      	add	r7, r0
 8013fea:	eba8 0800 	sub.w	r8, r8, r0
 8013fee:	e7e7      	b.n	8013fc0 <__sflush_r+0xd4>
 8013ff0:	dfbffffe 	.word	0xdfbffffe

08013ff4 <_fflush_r>:
 8013ff4:	b538      	push	{r3, r4, r5, lr}
 8013ff6:	690b      	ldr	r3, [r1, #16]
 8013ff8:	4605      	mov	r5, r0
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	b913      	cbnz	r3, 8014004 <_fflush_r+0x10>
 8013ffe:	2500      	movs	r5, #0
 8014000:	4628      	mov	r0, r5
 8014002:	bd38      	pop	{r3, r4, r5, pc}
 8014004:	b118      	cbz	r0, 801400e <_fflush_r+0x1a>
 8014006:	6a03      	ldr	r3, [r0, #32]
 8014008:	b90b      	cbnz	r3, 801400e <_fflush_r+0x1a>
 801400a:	f7ff f9df 	bl	80133cc <__sinit>
 801400e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d0f3      	beq.n	8013ffe <_fflush_r+0xa>
 8014016:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014018:	07d0      	lsls	r0, r2, #31
 801401a:	d404      	bmi.n	8014026 <_fflush_r+0x32>
 801401c:	0599      	lsls	r1, r3, #22
 801401e:	d402      	bmi.n	8014026 <_fflush_r+0x32>
 8014020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014022:	f7ff fc38 	bl	8013896 <__retarget_lock_acquire_recursive>
 8014026:	4628      	mov	r0, r5
 8014028:	4621      	mov	r1, r4
 801402a:	f7ff ff5f 	bl	8013eec <__sflush_r>
 801402e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014030:	07da      	lsls	r2, r3, #31
 8014032:	4605      	mov	r5, r0
 8014034:	d4e4      	bmi.n	8014000 <_fflush_r+0xc>
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	059b      	lsls	r3, r3, #22
 801403a:	d4e1      	bmi.n	8014000 <_fflush_r+0xc>
 801403c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801403e:	f7ff fc2b 	bl	8013898 <__retarget_lock_release_recursive>
 8014042:	e7dd      	b.n	8014000 <_fflush_r+0xc>

08014044 <__swhatbuf_r>:
 8014044:	b570      	push	{r4, r5, r6, lr}
 8014046:	460c      	mov	r4, r1
 8014048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801404c:	2900      	cmp	r1, #0
 801404e:	b096      	sub	sp, #88	@ 0x58
 8014050:	4615      	mov	r5, r2
 8014052:	461e      	mov	r6, r3
 8014054:	da0d      	bge.n	8014072 <__swhatbuf_r+0x2e>
 8014056:	89a3      	ldrh	r3, [r4, #12]
 8014058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801405c:	f04f 0100 	mov.w	r1, #0
 8014060:	bf14      	ite	ne
 8014062:	2340      	movne	r3, #64	@ 0x40
 8014064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014068:	2000      	movs	r0, #0
 801406a:	6031      	str	r1, [r6, #0]
 801406c:	602b      	str	r3, [r5, #0]
 801406e:	b016      	add	sp, #88	@ 0x58
 8014070:	bd70      	pop	{r4, r5, r6, pc}
 8014072:	466a      	mov	r2, sp
 8014074:	f000 f848 	bl	8014108 <_fstat_r>
 8014078:	2800      	cmp	r0, #0
 801407a:	dbec      	blt.n	8014056 <__swhatbuf_r+0x12>
 801407c:	9901      	ldr	r1, [sp, #4]
 801407e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014086:	4259      	negs	r1, r3
 8014088:	4159      	adcs	r1, r3
 801408a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801408e:	e7eb      	b.n	8014068 <__swhatbuf_r+0x24>

08014090 <__smakebuf_r>:
 8014090:	898b      	ldrh	r3, [r1, #12]
 8014092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014094:	079d      	lsls	r5, r3, #30
 8014096:	4606      	mov	r6, r0
 8014098:	460c      	mov	r4, r1
 801409a:	d507      	bpl.n	80140ac <__smakebuf_r+0x1c>
 801409c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80140a0:	6023      	str	r3, [r4, #0]
 80140a2:	6123      	str	r3, [r4, #16]
 80140a4:	2301      	movs	r3, #1
 80140a6:	6163      	str	r3, [r4, #20]
 80140a8:	b003      	add	sp, #12
 80140aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ac:	ab01      	add	r3, sp, #4
 80140ae:	466a      	mov	r2, sp
 80140b0:	f7ff ffc8 	bl	8014044 <__swhatbuf_r>
 80140b4:	9f00      	ldr	r7, [sp, #0]
 80140b6:	4605      	mov	r5, r0
 80140b8:	4639      	mov	r1, r7
 80140ba:	4630      	mov	r0, r6
 80140bc:	f7ff f86e 	bl	801319c <_malloc_r>
 80140c0:	b948      	cbnz	r0, 80140d6 <__smakebuf_r+0x46>
 80140c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140c6:	059a      	lsls	r2, r3, #22
 80140c8:	d4ee      	bmi.n	80140a8 <__smakebuf_r+0x18>
 80140ca:	f023 0303 	bic.w	r3, r3, #3
 80140ce:	f043 0302 	orr.w	r3, r3, #2
 80140d2:	81a3      	strh	r3, [r4, #12]
 80140d4:	e7e2      	b.n	801409c <__smakebuf_r+0xc>
 80140d6:	89a3      	ldrh	r3, [r4, #12]
 80140d8:	6020      	str	r0, [r4, #0]
 80140da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80140de:	81a3      	strh	r3, [r4, #12]
 80140e0:	9b01      	ldr	r3, [sp, #4]
 80140e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80140e6:	b15b      	cbz	r3, 8014100 <__smakebuf_r+0x70>
 80140e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140ec:	4630      	mov	r0, r6
 80140ee:	f000 f81d 	bl	801412c <_isatty_r>
 80140f2:	b128      	cbz	r0, 8014100 <__smakebuf_r+0x70>
 80140f4:	89a3      	ldrh	r3, [r4, #12]
 80140f6:	f023 0303 	bic.w	r3, r3, #3
 80140fa:	f043 0301 	orr.w	r3, r3, #1
 80140fe:	81a3      	strh	r3, [r4, #12]
 8014100:	89a3      	ldrh	r3, [r4, #12]
 8014102:	431d      	orrs	r5, r3
 8014104:	81a5      	strh	r5, [r4, #12]
 8014106:	e7cf      	b.n	80140a8 <__smakebuf_r+0x18>

08014108 <_fstat_r>:
 8014108:	b538      	push	{r3, r4, r5, lr}
 801410a:	4d07      	ldr	r5, [pc, #28]	@ (8014128 <_fstat_r+0x20>)
 801410c:	2300      	movs	r3, #0
 801410e:	4604      	mov	r4, r0
 8014110:	4608      	mov	r0, r1
 8014112:	4611      	mov	r1, r2
 8014114:	602b      	str	r3, [r5, #0]
 8014116:	f7ef f855 	bl	80031c4 <_fstat>
 801411a:	1c43      	adds	r3, r0, #1
 801411c:	d102      	bne.n	8014124 <_fstat_r+0x1c>
 801411e:	682b      	ldr	r3, [r5, #0]
 8014120:	b103      	cbz	r3, 8014124 <_fstat_r+0x1c>
 8014122:	6023      	str	r3, [r4, #0]
 8014124:	bd38      	pop	{r3, r4, r5, pc}
 8014126:	bf00      	nop
 8014128:	20001150 	.word	0x20001150

0801412c <_isatty_r>:
 801412c:	b538      	push	{r3, r4, r5, lr}
 801412e:	4d06      	ldr	r5, [pc, #24]	@ (8014148 <_isatty_r+0x1c>)
 8014130:	2300      	movs	r3, #0
 8014132:	4604      	mov	r4, r0
 8014134:	4608      	mov	r0, r1
 8014136:	602b      	str	r3, [r5, #0]
 8014138:	f7ef f854 	bl	80031e4 <_isatty>
 801413c:	1c43      	adds	r3, r0, #1
 801413e:	d102      	bne.n	8014146 <_isatty_r+0x1a>
 8014140:	682b      	ldr	r3, [r5, #0]
 8014142:	b103      	cbz	r3, 8014146 <_isatty_r+0x1a>
 8014144:	6023      	str	r3, [r4, #0]
 8014146:	bd38      	pop	{r3, r4, r5, pc}
 8014148:	20001150 	.word	0x20001150

0801414c <_init>:
 801414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414e:	bf00      	nop
 8014150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014152:	bc08      	pop	{r3}
 8014154:	469e      	mov	lr, r3
 8014156:	4770      	bx	lr

08014158 <_fini>:
 8014158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801415a:	bf00      	nop
 801415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801415e:	bc08      	pop	{r3}
 8014160:	469e      	mov	lr, r3
 8014162:	4770      	bx	lr
