
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a9c  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08010c50  08010c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dd0  08010dd0  0001207c  2**0
                  CONTENTS
  4 .ARM          00000008  08010dd0  08010dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dd8  08010dd8  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dd8  08010dd8  00011dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ddc  08010ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010de0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001207c  2**0
                  CONTENTS
 10 .bss          000010cc  2000007c  2000007c  0001207c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001148  20001148  0001207c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000395ca  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000749e  00000000  00000000  0004b676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028a0  00000000  00000000  00052b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f64  00000000  00000000  000553b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038e63  00000000  00000000  0005731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a7d7  00000000  00000000  0009017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00126cec  00000000  00000000  000ca956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001f1642  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c5ec  00000000  00000000  001f1688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  001fdc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	@ (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08010c38 	.word	0x08010c38

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000080 	.word	0x20000080
 80001f0:	08010c38 	.word	0x08010c38

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN3VMB5IFileC1Ev>:
#define IFILE_HPP_


namespace VMB
{
	class IFile
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <_ZN3VMB5IFileC1Ev+0x1c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	08010cc8 	.word	0x08010cc8

08000514 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <_ZN3VMB5IFileD1Ev+0x1c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	08010cc8 	.word	0x08010cc8

08000534 <_ZN3VMB5IFileD0Ev>:
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ffe9 	bl	8000514 <_ZN3VMB5IFileD1Ev>
 8000542:	2104      	movs	r1, #4
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f010 f923 	bl	8010790 <_ZdlPvj>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <_ZN3VMB9FAT32FileC1Ev>:
	bool FAT32File::s_isMounted = false;
	FATFS FAT32File::s_SDFatFS;
    ///char FAT32File::s_SDPath[4] = "0:/";
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    	: m_fileHandle{ 0 }
		, m_isOpen(false)
		, m_currentMode(AccessMode::read)
		, m_path("")
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ffc8 	bl	80004f4 <_ZN3VMB5IFileC1Ev>
 8000564:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <_ZN3VMB9FAT32FileC1Ev+0x90>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
    	: m_fileHandle{ 0 }
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3304      	adds	r3, #4
 800056e:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f010 fa7f 	bl	8010a78 <memset>
		, m_isOpen(false)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		, m_currentMode(AccessMode::read)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2235 	strb.w	r2, [r3, #565]	@ 0x235
		, m_path("")
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f503 740e 	add.w	r4, r3, #568	@ 0x238
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	4618      	mov	r0, r3
 8000596:	f010 f8fd 	bl	8010794 <_ZNSaIcEC1Ev>
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	461a      	mov	r2, r3
 80005a0:	4911      	ldr	r1, [pc, #68]	@ (80005e8 <_ZN3VMB9FAT32FileC1Ev+0x94>)
 80005a2:	4620      	mov	r0, r4
 80005a4:	f010 f966 	bl	8010874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4618      	mov	r0, r3
 80005ae:	f010 f8f2 	bl	8010796 <_ZNSaIcED1Ev>
	{
		if(!s_isMounted)
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <_ZN3VMB9FAT32FileC1Ev+0x98>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f083 0301 	eor.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00c      	beq.n	80005da <_ZN3VMB9FAT32FileC1Ev+0x86>
		{
			FRESULT res =  f_mount(&s_SDFatFS, (TCHAR const*)SDPath, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	490b      	ldr	r1, [pc, #44]	@ (80005f0 <_ZN3VMB9FAT32FileC1Ev+0x9c>)
 80005c4:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <_ZN3VMB9FAT32FileC1Ev+0xa0>)
 80005c6:	f00f f95f 	bl	800f888 <f_mount>
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]
			if(res == FRESULT::FR_OK)
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_ZN3VMB9FAT32FileC1Ev+0x86>
				s_isMounted = true;
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <_ZN3VMB9FAT32FileC1Ev+0x98>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
			else
			{
				// Can't mount device
			}
		}
	}
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	08010cb8 	.word	0x08010cb8
 80005e8:	08010c50 	.word	0x08010c50
 80005ec:	20000098 	.word	0x20000098
 80005f0:	20000800 	.word	0x20000800
 80005f4:	2000009c 	.word	0x2000009c

080005f8 <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <_ZN3VMB9FAT32FileD1Ev+0x2c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	601a      	str	r2, [r3, #0]
	{

	}
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800060c:	4618      	mov	r0, r3
 800060e:	f010 f90b 	bl	8010828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff7d 	bl	8000514 <_ZN3VMB5IFileD1Ev>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	08010cb8 	.word	0x08010cb8

08000628 <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	}
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ffe1 	bl	80005f8 <_ZN3VMB9FAT32FileD1Ev>
 8000636:	f44f 7114 	mov.w	r1, #592	@ 0x250
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f010 f8a8 	bl	8010790 <_ZdlPvj>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>:

	bool FAT32File::open(const char* path, AccessMode mode)
	{
 800064a:	b580      	push	{r7, lr}
 800064c:	b08c      	sub	sp, #48	@ 0x30
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	4613      	mov	r3, r2
 8000656:	71fb      	strb	r3, [r7, #7]
		if(m_isOpen)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x1c>
		{
			// Already open
			return false;
 8000662:	2300      	movs	r3, #0
 8000664:	e037      	b.n	80006d6 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x8c>
		}
		bool success = false;
 8000666:	2300      	movs	r3, #0
 8000668:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		switch(mode)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d022      	beq.n	80006b8 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x6e>
 8000672:	2b02      	cmp	r3, #2
 8000674:	dc2e      	bgt.n	80006d4 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x8a>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x36>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00e      	beq.n	800069c <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x52>
 800067e:	e029      	b.n	80006d4 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x8a>
		{
			case AccessMode::read:
			{
				success = f_open(&m_fileHandle, path, FA_READ) == FRESULT::FR_OK;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3304      	adds	r3, #4
 8000684:	2201      	movs	r2, #1
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	4618      	mov	r0, r3
 800068a:	f00f f943 	bl	800f914 <f_open>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			}
			case AccessMode::write:
			{
				success = f_open(&m_fileHandle, path, FA_CREATE_ALWAYS | FA_WRITE) == FRESULT::FR_OK;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3304      	adds	r3, #4
 80006a0:	220a      	movs	r2, #10
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00f f935 	bl	800f914 <f_open>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			}
			case AccessMode::append:
			{
				success = f_open(&m_fileHandle, path, FA_OPEN_APPEND | FA_WRITE) == FRESULT::FR_OK;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3304      	adds	r3, #4
 80006bc:	2232      	movs	r2, #50	@ 0x32
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f00f f927 	bl	800f914 <f_open>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			}

			default:
			{
				// Unknown mode
				return false;
 80006d4:	2300      	movs	r3, #0
			m_currentMode = mode;
			m_path = std::move(std::string(path));
		}
		m_isOpen = success;
		return success;
	}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3730      	adds	r7, #48	@ 0x30
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
		m_path.clear();
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80006ec:	4618      	mov	r0, r3
 80006ee:	f010 f8a1 	bl	8010834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		m_isOpen = false;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		return f_close(&m_fileHandle) == FRESULT::FR_OK;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3304      	adds	r3, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f00f fcb5 	bl	801006e <f_close>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf0c      	ite	eq
 800070a:	2301      	moveq	r3, #1
 800070c:	2300      	movne	r3, #0
 800070e:	b2db      	uxtb	r3, r3
	}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text)
	{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
		if(!m_isOpen)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000728:	f083 0301 	eor.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <_ZN3VMB9FAT32File5writeEPKc+0x1e>
		{
			// File is not open
			return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e010      	b.n	8000758 <_ZN3VMB9FAT32File5writeEPKc+0x40>
		}
		size_t len = strlen(text);
 8000736:	6838      	ldr	r0, [r7, #0]
 8000738:	f7ff fd5c 	bl	80001f4 <strlen>
 800073c:	6178      	str	r0, [r7, #20]
		UINT bytesWritten = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
		FRESULT res = f_write(&m_fileHandle, text, len, &bytesWritten);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1d18      	adds	r0, r3, #4
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	6839      	ldr	r1, [r7, #0]
 800074e:	f00f fa9b 	bl	800fc88 <f_write>
 8000752:	4603      	mov	r3, r0
 8000754:	74fb      	strb	r3, [r7, #19]
		return bytesWritten;
 8000756:	68fb      	ldr	r3, [r7, #12]
	}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <setup>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "FAT32File.hpp"

void setup()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8000766:	af00      	add	r7, sp, #0
	//int a = VMB::test();
	VMB::FAT32File file;
 8000768:	463b      	mov	r3, r7
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fef2 	bl	8000554 <_ZN3VMB9FAT32FileC1Ev>

	if(file.open("test.txt", VMB::FAT32File::AccessMode::write))
 8000770:	463b      	mov	r3, r7
 8000772:	2201      	movs	r2, #1
 8000774:	490b      	ldr	r1, [pc, #44]	@ (80007a4 <setup+0x44>)
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff67 	bl	800064a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d008      	beq.n	8000794 <setup+0x34>
	{
		file.write("Text");
 8000782:	463b      	mov	r3, r7
 8000784:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <setup+0x48>)
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffc6 	bl	8000718 <_ZN3VMB9FAT32File5writeEPKc>
		file.close();
 800078c:	463b      	mov	r3, r7
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffa5 	bl	80006de <_ZN3VMB9FAT32File5closeEv>
	}


}
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff2e 	bl	80005f8 <_ZN3VMB9FAT32FileD1Ev>
 800079c:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08010c54 	.word	0x08010c54
 80007a8:	08010c60 	.word	0x08010c60

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f001 fc66 	bl	8002080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f82a 	bl	800080c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b8:	f000 f89a 	bl	80008f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f000 fcaa 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c0:	f000 fc30 	bl	8001024 <MX_DMA_Init>
  MX_CRC_Init();
 80007c4:	f000 f8c0 	bl	8000948 <MX_CRC_Init>
  MX_DMA2D_Init();
 80007c8:	f000 f8d2 	bl	8000970 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80007cc:	f000 f902 	bl	80009d4 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80007d0:	f000 fc50 	bl	8001074 <MX_FMC_Init>
  MX_I2C1_Init();
 80007d4:	f000 f9fe 	bl	8000bd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007d8:	f000 fa2a 	bl	8000c30 <MX_I2C2_Init>
  MX_LTDC_Init();
 80007dc:	f000 fa56 	bl	8000c8c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80007e0:	f000 fad2 	bl	8000d88 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80007e4:	f000 fafc 	bl	8000de0 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 80007e8:	f000 fb58 	bl	8000e9c <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80007ec:	f000 fb76 	bl	8000edc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 fbc4 	bl	8000f7c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80007f4:	f000 fbec 	bl	8000fd0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80007f8:	f00b f85e 	bl	800b8b8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80007fc:	f00f fcbe 	bl	801017c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000800:	f7ff ffae 	bl	8000760 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000804:	f00f fce0 	bl	80101c8 <MX_USB_HOST_Process>
 8000808:	e7fc      	b.n	8000804 <main+0x58>
	...

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2234      	movs	r2, #52	@ 0x34
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f010 f92c 	bl	8010a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <SystemClock_Config+0xdc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a2b      	ldr	r2, [pc, #172]	@ (80008e8 <SystemClock_Config+0xdc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <SystemClock_Config+0xdc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <SystemClock_Config+0xe0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <SystemClock_Config+0xe0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <SystemClock_Config+0xe0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000880:	23b4      	movs	r3, #180	@ 0xb4
 8000882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000888:	2306      	movs	r3, #6
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 800088c:	2306      	movs	r3, #6
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4618      	mov	r0, r3
 8000896:	f006 fe27 	bl	80074e8 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a0:	f000 fdd6 	bl	8001450 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a4:	f006 f87e 	bl	80069a4 <HAL_PWREx_EnableOverDrive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ae:	f000 fdcf 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2105      	movs	r1, #5
 80008d0:	4618      	mov	r0, r3
 80008d2:	f006 f979 	bl	8006bc8 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008dc:	f000 fdb8 	bl	8001450 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b090      	sub	sp, #64	@ 0x40
 80008f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	223c      	movs	r2, #60	@ 0x3c
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f010 f8bb 	bl	8010a78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000902:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000906:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000908:	2390      	movs	r3, #144	@ 0x90
 800090a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000914:	2306      	movs	r3, #6
 8000916:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800091c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000922:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f006 fb9c 	bl	800706c <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800093a:	f000 fd89 	bl	8001450 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	@ 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_CRC_Init+0x20>)
 800094e:	4a07      	ldr	r2, [pc, #28]	@ (800096c <MX_CRC_Init+0x24>)
 8000950:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_CRC_Init+0x20>)
 8000954:	f001 fcdc 	bl	8002310 <HAL_CRC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800095e:	f000 fd77 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200002cc 	.word	0x200002cc
 800096c:	40023000 	.word	0x40023000

08000970 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000976:	4a16      	ldr	r2, [pc, #88]	@ (80009d0 <MX_DMA2D_Init+0x60>)
 8000978:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000994:	2200      	movs	r2, #0
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a4:	4809      	ldr	r0, [pc, #36]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 80009a6:	f002 f84b 	bl	8002a40 <HAL_DMA2D_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009b0:	f000 fd4e 	bl	8001450 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b4:	2101      	movs	r1, #1
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 80009b8:	f002 f99c 	bl	8002cf4 <HAL_DMA2D_ConfigLayer>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009c2:	f000 fd45 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200002d4 	.word	0x200002d4
 80009d0:	4002b000 	.word	0x4002b000

080009d4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0aa      	sub	sp, #168	@ 0xa8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80009da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009e6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80009ea:	2224      	movs	r2, #36	@ 0x24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f010 f842 	bl	8010a78 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0a:	2234      	movs	r2, #52	@ 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f010 f832 	bl	8010a78 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	222c      	movs	r2, #44	@ 0x2c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f010 f82c 	bl	8010a78 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a20:	4b6a      	ldr	r3, [pc, #424]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a22:	4a6b      	ldr	r2, [pc, #428]	@ (8000bd0 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a24:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a26:	4b69      	ldr	r3, [pc, #420]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a2c:	4b67      	ldr	r3, [pc, #412]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a32:	4b66      	ldr	r3, [pc, #408]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000a38:	237d      	movs	r3, #125	@ 0x7d
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	485e      	ldr	r0, [pc, #376]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a52:	f002 f9e1 	bl	8002e18 <HAL_DSI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000a5c:	f000 fcf8 	bl	8001450 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a92:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a96:	4619      	mov	r1, r3
 8000a98:	484c      	ldr	r0, [pc, #304]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a9a:	f002 fed1 	bl	8003840 <HAL_DSI_ConfigHostTimeouts>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000aa4:	f000 fcd4 	bl	8001450 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000aa8:	231c      	movs	r3, #28
 8000aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000aac:	2321      	movs	r3, #33	@ 0x21
 8000aae:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000ab4:	2319      	movs	r3, #25
 8000ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000abc:	230a      	movs	r3, #10
 8000abe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000ac0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4841      	ldr	r0, [pc, #260]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ac8:	f002 fe50 	bl	800376c <HAL_DSI_ConfigPhyTimer>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000ad2:	f000 fcbd 	bl	8001450 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	483c      	ldr	r0, [pc, #240]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ada:	f002 fe1f 	bl	800371c <HAL_DSI_ConfigFlowControl>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000ae4:	f000 fcb4 	bl	8001450 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000ae8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000aec:	4837      	ldr	r0, [pc, #220]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aee:	f002 ff6d 	bl	80039cc <HAL_DSI_SetLowPowerRXFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000af8:	f000 fcaa 	bl	8001450 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4833      	ldr	r0, [pc, #204]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b00:	f002 fb0a 	bl	8003118 <HAL_DSI_ConfigErrorMonitor>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b0a:	f000 fca1 	bl	8001450 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b24:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b48:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000b4a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b54:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481a      	ldr	r0, [pc, #104]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b62:	f002 fd7d 	bl	8003660 <HAL_DSI_ConfigCommand>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000b6c:	f000 fc70 	bl	8001450 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000b74:	2305      	movs	r3, #5
 8000b76:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000b78:	23c8      	movs	r3, #200	@ 0xc8
 8000b7a:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000b84:	2304      	movs	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ba2:	f002 fc85 	bl	80034b0 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000bac:	f000 fc50 	bl	8001450 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bb4:	f002 fc54 	bl	8003460 <HAL_DSI_SetGenericVCID>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000bbe:	f000 fc47 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	37a8      	adds	r7, #168	@ 0xa8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000314 	.word	0x20000314
 8000bd0:	40016c00 	.word	0x40016c00

08000bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f005 fa1b 	bl	800604c <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fc18 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000330 	.word	0x20000330
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <MX_I2C2_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_I2C2_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c6e:	f005 f9ed 	bl	800604c <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 fbea 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000384 	.word	0x20000384
 8000c84:	40005800 	.word	0x40005800
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	@ 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2234      	movs	r2, #52	@ 0x34
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00f feed 	bl	8010a78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c9e:	4b38      	ldr	r3, [pc, #224]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000ca0:	4a38      	ldr	r2, [pc, #224]	@ (8000d84 <MX_LTDC_Init+0xf8>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ca4:	4b36      	ldr	r3, [pc, #216]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000caa:	4b35      	ldr	r3, [pc, #212]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cb0:	4b33      	ldr	r3, [pc, #204]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cb6:	4b32      	ldr	r3, [pc, #200]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cd6:	22c9      	movs	r2, #201	@ 0xc9
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cdc:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000ce4:	22ca      	movs	r2, #202	@ 0xca
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cea:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d08:	481d      	ldr	r0, [pc, #116]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000d0a:	f005 fae3 	bl	80062d4 <HAL_LTDC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 fb9c 	bl	8001450 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000d1c:	23c8      	movs	r3, #200	@ 0xc8
 8000d1e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000d24:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d28:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d2e:	23ff      	movs	r3, #255	@ 0xff
 8000d30:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d3a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d40:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000d46:	23c8      	movs	r3, #200	@ 0xc8
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000d4a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000d6a:	f005 fc45 	bl	80065f8 <HAL_LTDC_ConfigLayer>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000d74:	f000 fb6c 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3738      	adds	r7, #56	@ 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200003d8 	.word	0x200003d8
 8000d84:	40016800 	.word	0x40016800

08000d88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	@ (8000ddc <MX_QUADSPI_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000da6:	2218      	movs	r2, #24
 8000da8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dc6:	f005 fe3d 	bl	8006a44 <HAL_QSPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dd0:	f000 fb3e 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000480 	.word	0x20000480
 8000ddc:	a0001000 	.word	0xa0001000

08000de0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000de6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <MX_SAI1_Init+0xb4>)
 8000de8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dea:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000df8:	2240      	movs	r2, #64	@ 0x40
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <MX_SAI1_Init+0xb8>)
 8000e2a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e7c:	f006 fdb8 	bl	80079f0 <HAL_SAI_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000e86:	f000 fae3 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200004cc 	.word	0x200004cc
 8000e94:	40015804 	.word	0x40015804
 8000e98:	0002ee00 	.word	0x0002ee00

08000e9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <MX_SDIO_SD_Init+0x38>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000554 	.word	0x20000554
 8000ed8:	40012c00 	.word	0x40012c00

08000edc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000efa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <MX_TIM1_Init+0x9c>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f18:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f24:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f26:	f007 fe51 	bl	8008bcc <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f30:	f000 fa8e 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f42:	f007 fff3 	bl	8008f2c <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f4c:	f000 fa80 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_TIM1_Init+0x98>)
 8000f5e:	f008 fa1b 	bl	8009398 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f68:	f000 fa72 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000698 	.word	0x20000698
 8000f78:	40010000 	.word	0x40010000

08000f7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_USART3_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f008 fa80 	bl	80094b8 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 fa47 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200006e0 	.word	0x200006e0
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <MX_USART6_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_USART6_UART_Init+0x4c>)
 8001008:	f008 fa56 	bl	80094b8 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f000 fa1d 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000728 	.word	0x20000728
 8001020:	40011400 	.word	0x40011400

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_DMA_Init+0x4c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <MX_DMA_Init+0x4c>)
 8001034:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <MX_DMA_Init+0x4c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	203b      	movs	r0, #59	@ 0x3b
 800104c:	f001 f936 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001050:	203b      	movs	r0, #59	@ 0x3b
 8001052:	f001 f94f 	bl	80022f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2045      	movs	r0, #69	@ 0x45
 800105c:	f001 f92e 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001060:	2045      	movs	r0, #69	@ 0x45
 8001062:	f001 f947 	bl	80022f4 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <MX_FMC_Init+0x98>)
 800108e:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <MX_FMC_Init+0x9c>)
 8001090:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001092:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <MX_FMC_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <MX_FMC_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_FMC_Init+0x98>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <MX_FMC_Init+0x98>)
 80010a6:	2220      	movs	r2, #32
 80010a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_FMC_Init+0x98>)
 80010ac:	2240      	movs	r2, #64	@ 0x40
 80010ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <MX_FMC_Init+0x98>)
 80010b2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_FMC_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <MX_FMC_Init+0x98>)
 80010c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_FMC_Init+0x98>)
 80010c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_FMC_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80010e0:	2307      	movs	r3, #7
 80010e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80010e4:	2303      	movs	r3, #3
 80010e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_FMC_Init+0x98>)
 80010f6:	f007 fd35 	bl	8008b64 <HAL_SDRAM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001100:	f000 f9a6 	bl	8001450 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000770 	.word	0x20000770
 8001110:	a0000140 	.word	0xa0000140

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	@ 0x40
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800112e:	4bae      	ldr	r3, [pc, #696]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4aad      	ldr	r2, [pc, #692]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4bab      	ldr	r3, [pc, #684]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
 800114a:	4ba7      	ldr	r3, [pc, #668]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4aa6      	ldr	r2, [pc, #664]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4ba4      	ldr	r3, [pc, #656]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	4ba0      	ldr	r3, [pc, #640]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a9f      	ldr	r2, [pc, #636]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b9d      	ldr	r3, [pc, #628]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	4b99      	ldr	r3, [pc, #612]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a98      	ldr	r2, [pc, #608]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b96      	ldr	r3, [pc, #600]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	4b92      	ldr	r3, [pc, #584]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a91      	ldr	r2, [pc, #580]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b8f      	ldr	r3, [pc, #572]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	4b8b      	ldr	r3, [pc, #556]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a8a      	ldr	r2, [pc, #552]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b88      	ldr	r3, [pc, #544]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b84      	ldr	r3, [pc, #528]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a83      	ldr	r2, [pc, #524]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b81      	ldr	r3, [pc, #516]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b7d      	ldr	r3, [pc, #500]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a7c      	ldr	r2, [pc, #496]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b7a      	ldr	r3, [pc, #488]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a75      	ldr	r2, [pc, #468]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001214:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b73      	ldr	r3, [pc, #460]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a6e      	ldr	r2, [pc, #440]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b6c      	ldr	r3, [pc, #432]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a67      	ldr	r2, [pc, #412]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b65      	ldr	r3, [pc, #404]	@ (80013e8 <MX_GPIO_Init+0x2d4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	210c      	movs	r1, #12
 8001262:	4862      	ldr	r0, [pc, #392]	@ (80013ec <MX_GPIO_Init+0x2d8>)
 8001264:	f002 fda4 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2130      	movs	r1, #48	@ 0x30
 800126c:	4860      	ldr	r0, [pc, #384]	@ (80013f0 <MX_GPIO_Init+0x2dc>)
 800126e:	f002 fd9f 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2108      	movs	r1, #8
 8001276:	485f      	ldr	r0, [pc, #380]	@ (80013f4 <MX_GPIO_Init+0x2e0>)
 8001278:	f002 fd9a 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	485d      	ldr	r0, [pc, #372]	@ (80013f8 <MX_GPIO_Init+0x2e4>)
 8001282:	f002 fd95 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2105      	movs	r1, #5
 800128a:	485c      	ldr	r0, [pc, #368]	@ (80013fc <MX_GPIO_Init+0x2e8>)
 800128c:	f002 fd90 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	485a      	ldr	r0, [pc, #360]	@ (8001400 <MX_GPIO_Init+0x2ec>)
 8001296:	f002 fd8b 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2108      	movs	r1, #8
 800129e:	4859      	ldr	r0, [pc, #356]	@ (8001404 <MX_GPIO_Init+0x2f0>)
 80012a0:	f002 fd86 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80012a4:	230c      	movs	r3, #12
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b8:	4619      	mov	r1, r3
 80012ba:	484c      	ldr	r0, [pc, #304]	@ (80013ec <MX_GPIO_Init+0x2d8>)
 80012bc:	f002 fbb4 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 80012c0:	2308      	movs	r3, #8
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d0:	2306      	movs	r3, #6
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	4848      	ldr	r0, [pc, #288]	@ (80013fc <MX_GPIO_Init+0x2e8>)
 80012dc:	f002 fba4 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4841      	ldr	r0, [pc, #260]	@ (80013fc <MX_GPIO_Init+0x2e8>)
 80012f6:	f002 fb97 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80012fa:	2330      	movs	r3, #48	@ 0x30
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012fe:	2311      	movs	r3, #17
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130e:	4619      	mov	r1, r3
 8001310:	4837      	ldr	r0, [pc, #220]	@ (80013f0 <MX_GPIO_Init+0x2dc>)
 8001312:	f002 fb89 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001316:	2308      	movs	r3, #8
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800131a:	2311      	movs	r3, #17
 800131c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132a:	4619      	mov	r1, r3
 800132c:	4831      	ldr	r0, [pc, #196]	@ (80013f4 <MX_GPIO_Init+0x2e0>)
 800132e:	f002 fb7b 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001332:	2340      	movs	r3, #64	@ 0x40
 8001334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001336:	2311      	movs	r3, #17
 8001338:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001346:	4619      	mov	r1, r3
 8001348:	482b      	ldr	r0, [pc, #172]	@ (80013f8 <MX_GPIO_Init+0x2e4>)
 800134a:	f002 fb6d 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800134e:	2305      	movs	r3, #5
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001362:	4619      	mov	r1, r3
 8001364:	4825      	ldr	r0, [pc, #148]	@ (80013fc <MX_GPIO_Init+0x2e8>)
 8001366:	f002 fb5f 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800136a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800137c:	2302      	movs	r3, #2
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001384:	4619      	mov	r1, r3
 8001386:	481a      	ldr	r0, [pc, #104]	@ (80013f0 <MX_GPIO_Init+0x2dc>)
 8001388:	f002 fb4e 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800138c:	2304      	movs	r3, #4
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800139c:	4619      	mov	r1, r3
 800139e:	4816      	ldr	r0, [pc, #88]	@ (80013f8 <MX_GPIO_Init+0x2e4>)
 80013a0:	f002 fb42 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80013a4:	2320      	movs	r3, #32
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <MX_GPIO_Init+0x2f4>)
 80013ba:	f002 fb35 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	480a      	ldr	r0, [pc, #40]	@ (8001400 <MX_GPIO_Init+0x2ec>)
 80013d6:	f002 fb27 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013da:	2308      	movs	r3, #8
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e012      	b.n	800140c <MX_GPIO_Init+0x2f8>
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40022800 	.word	0x40022800
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40020400 	.word	0x40020400
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40020000 	.word	0x40020000
 8001408:	40022400 	.word	0x40022400
 800140c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001416:	4619      	mov	r1, r3
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <MX_GPIO_Init+0x314>)
 800141a:	f002 fb05 	bl	8003a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141e:	bf00      	nop
 8001420:	3740      	adds	r7, #64	@ 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800143e:	f000 fe41 	bl	80020c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40001000 	.word	0x40001000

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_MspInit+0x58>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <HAL_MspInit+0x58>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_MspInit+0x58>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_MspInit+0x58>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_MspInit+0x58>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_MspInit+0x58>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2005      	movs	r0, #5
 80014a0:	f000 ff0c 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014a4:	2005      	movs	r0, #5
 80014a6:	f000 ff25 	bl	80022f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_CRC_MspInit+0x3c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10d      	bne.n	80014e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_CRC_MspInit+0x40>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_CRC_MspInit+0x40>)
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_CRC_MspInit+0x40>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023000 	.word	0x40023000
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <HAL_DMA2D_MspInit+0x48>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d115      	bne.n	800153a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_DMA2D_MspInit+0x4c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a0c      	ldr	r2, [pc, #48]	@ (8001548 <HAL_DMA2D_MspInit+0x4c>)
 8001518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_DMA2D_MspInit+0x4c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	205a      	movs	r0, #90	@ 0x5a
 8001530:	f000 fec4 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001534:	205a      	movs	r0, #90	@ 0x5a
 8001536:	f000 fedd 	bl	80022f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	4002b000 	.word	0x4002b000
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <HAL_DSI_MspInit+0x94>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d133      	bne.n	80015d6 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_DSI_MspInit+0x98>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a1b      	ldr	r2, [pc, #108]	@ (80015e4 <HAL_DSI_MspInit+0x98>)
 8001578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_DSI_MspInit+0x98>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_DSI_MspInit+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_DSI_MspInit+0x98>)
 8001594:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_DSI_MspInit+0x98>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80015a6:	2304      	movs	r3, #4
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80015b6:	230d      	movs	r3, #13
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <HAL_DSI_MspInit+0x9c>)
 80015c2:	f002 fa31 	bl	8003a28 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	205c      	movs	r0, #92	@ 0x5c
 80015cc:	f000 fe76 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80015d0:	205c      	movs	r0, #92	@ 0x5c
 80015d2:	f000 fe8f 	bl	80022f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	@ 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40016c00 	.word	0x40016c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40022400 	.word	0x40022400

080015ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	@ 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a32      	ldr	r2, [pc, #200]	@ (80016d4 <HAL_I2C_MspInit+0xe8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12d      	bne.n	800166a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a30      	ldr	r2, [pc, #192]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800162a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001630:	2312      	movs	r3, #18
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163c:	2304      	movs	r3, #4
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4825      	ldr	r0, [pc, #148]	@ (80016dc <HAL_I2C_MspInit+0xf0>)
 8001648:	f002 f9ee 	bl	8003a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 8001656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001668:	e030      	b.n	80016cc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d12b      	bne.n	80016cc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 800167e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001690:	2330      	movs	r3, #48	@ 0x30
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016a0:	2304      	movs	r3, #4
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <HAL_I2C_MspInit+0xf8>)
 80016ac:	f002 f9bc 	bl	8003a28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 80016ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016be:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_I2C_MspInit+0xec>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	@ 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40005800 	.word	0x40005800
 80016e4:	40021c00 	.word	0x40021c00

080016e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_LTDC_MspInit+0x48>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d115      	bne.n	8001726 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <HAL_LTDC_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <HAL_LTDC_MspInit+0x4c>)
 8001704:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001708:	6453      	str	r3, [r2, #68]	@ 0x44
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_LTDC_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2058      	movs	r0, #88	@ 0x58
 800171c:	f000 fdce 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001720:	2058      	movs	r0, #88	@ 0x58
 8001722:	f000 fde7 	bl	80022f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40016800 	.word	0x40016800
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a31      	ldr	r2, [pc, #196]	@ (800181c <HAL_QSPI_MspInit+0xe4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d15b      	bne.n	8001812 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b30      	ldr	r3, [pc, #192]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	4a2f      	ldr	r2, [pc, #188]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6393      	str	r3, [r2, #56]	@ 0x38
 800176a:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 800176c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b29      	ldr	r3, [pc, #164]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a28      	ldr	r2, [pc, #160]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a21      	ldr	r2, [pc, #132]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_QSPI_MspInit+0xe8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017ae:	2340      	movs	r3, #64	@ 0x40
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80017be:	230a      	movs	r3, #10
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4816      	ldr	r0, [pc, #88]	@ (8001824 <HAL_QSPI_MspInit+0xec>)
 80017ca:	f002 f92d 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80017ce:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017e0:	2309      	movs	r3, #9
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	480f      	ldr	r0, [pc, #60]	@ (8001828 <HAL_QSPI_MspInit+0xf0>)
 80017ec:	f002 f91c 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80017f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001802:	230a      	movs	r3, #10
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4806      	ldr	r0, [pc, #24]	@ (8001828 <HAL_QSPI_MspInit+0xf0>)
 800180e:	f002 f90b 	bl	8003a28 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	a0001000 	.word	0xa0001000
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400
 8001828:	40021400 	.word	0x40021400

0800182c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a64      	ldr	r2, [pc, #400]	@ (80019dc <HAL_SD_MspInit+0x1b0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	f040 80c1 	bne.w	80019d2 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	4b62      	ldr	r3, [pc, #392]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 8001856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001858:	4a61      	ldr	r2, [pc, #388]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 800185a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800185e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001860:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 8001862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	4a5a      	ldr	r2, [pc, #360]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6313      	str	r3, [r2, #48]	@ 0x30
 800187c:	4b58      	ldr	r3, [pc, #352]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	4a53      	ldr	r2, [pc, #332]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6313      	str	r3, [r2, #48]	@ 0x30
 8001898:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <HAL_SD_MspInit+0x1b4>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80018a4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018a8:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018b6:	230c      	movs	r3, #12
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4848      	ldr	r0, [pc, #288]	@ (80019e4 <HAL_SD_MspInit+0x1b8>)
 80018c2:	f002 f8b1 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80018c6:	2304      	movs	r3, #4
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018d6:	230c      	movs	r3, #12
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4841      	ldr	r0, [pc, #260]	@ (80019e8 <HAL_SD_MspInit+0x1bc>)
 80018e2:	f002 f8a1 	bl	8003a28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 80018e8:	4a41      	ldr	r2, [pc, #260]	@ (80019f0 <HAL_SD_MspInit+0x1c4>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80018ec:	4b3f      	ldr	r3, [pc, #252]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 80018ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f4:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b3c      	ldr	r3, [pc, #240]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001908:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 800190a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800190e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001912:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001916:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001918:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 800191a:	2220      	movs	r2, #32
 800191c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800191e:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001924:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001926:	2204      	movs	r2, #4
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 800192c:	2203      	movs	r2, #3
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001930:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001932:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001938:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 800193a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001940:	482a      	ldr	r0, [pc, #168]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001942:	f000 fd01 	bl	8002348 <HAL_DMA_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800194c:	f7ff fd80 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a26      	ldr	r2, [pc, #152]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
 8001956:	4a25      	ldr	r2, [pc, #148]	@ (80019ec <HAL_SD_MspInit+0x1c0>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800195c:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 800195e:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <HAL_SD_MspInit+0x1cc>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001964:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001968:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800196a:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 800196c:	2240      	movs	r2, #64	@ 0x40
 800196e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800197c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001980:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001984:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001988:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800198c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001990:	2220      	movs	r2, #32
 8001992:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 800199c:	2204      	movs	r2, #4
 800199e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 80019a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 80019b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019b4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80019b6:	480f      	ldr	r0, [pc, #60]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 80019b8:	f000 fcc6 	bl	8002348 <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80019c2:	f7ff fd45 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 80019ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <HAL_SD_MspInit+0x1c8>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	@ 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020c00 	.word	0x40020c00
 80019ec:	200005d8 	.word	0x200005d8
 80019f0:	40026458 	.word	0x40026458
 80019f4:	20000638 	.word	0x20000638
 80019f8:	400264a0 	.word	0x400264a0

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10d      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a33      	ldr	r2, [pc, #204]	@ (8001b2c <HAL_UART_MspInit+0xec>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12d      	bne.n	8001abe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a31      	ldr	r2, [pc, #196]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a2a      	ldr	r2, [pc, #168]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aac:	2307      	movs	r3, #7
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481f      	ldr	r0, [pc, #124]	@ (8001b34 <HAL_UART_MspInit+0xf4>)
 8001ab8:	f001 ffb6 	bl	8003a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001abc:	e031      	b.n	8001b22 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b38 <HAL_UART_MspInit+0xf8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d12c      	bne.n	8001b22 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad8:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	4a10      	ldr	r2, [pc, #64]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_UART_MspInit+0xf0>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001b00:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b12:	2308      	movs	r3, #8
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4807      	ldr	r0, [pc, #28]	@ (8001b3c <HAL_UART_MspInit+0xfc>)
 8001b1e:	f001 ff83 	bl	8003a28 <HAL_GPIO_Init>
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40004800 	.word	0x40004800
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	40021800 	.word	0x40021800

08001b40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b54:	4b44      	ldr	r3, [pc, #272]	@ (8001c68 <HAL_FMC_MspInit+0x128>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 8081 	bne.w	8001c60 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001b5e:	4b42      	ldr	r3, [pc, #264]	@ (8001c68 <HAL_FMC_MspInit+0x128>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4b40      	ldr	r3, [pc, #256]	@ (8001c6c <HAL_FMC_MspInit+0x12c>)
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8001c6c <HAL_FMC_MspInit+0x12c>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b74:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_FMC_MspInit+0x12c>)
 8001b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001b80:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001b84:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b92:	230c      	movs	r3, #12
 8001b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4835      	ldr	r0, [pc, #212]	@ (8001c70 <HAL_FMC_MspInit+0x130>)
 8001b9c:	f001 ff44 	bl	8003a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001ba0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ba4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	482e      	ldr	r0, [pc, #184]	@ (8001c74 <HAL_FMC_MspInit+0x134>)
 8001bbc:	f001 ff34 	bl	8003a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001bc0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001bc4:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4827      	ldr	r0, [pc, #156]	@ (8001c78 <HAL_FMC_MspInit+0x138>)
 8001bdc:	f001 ff24 	bl	8003a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001be0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001be4:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4820      	ldr	r0, [pc, #128]	@ (8001c7c <HAL_FMC_MspInit+0x13c>)
 8001bfc:	f001 ff14 	bl	8003a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001c00:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c04:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c12:	230c      	movs	r3, #12
 8001c14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4819      	ldr	r0, [pc, #100]	@ (8001c80 <HAL_FMC_MspInit+0x140>)
 8001c1c:	f001 ff04 	bl	8003a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001c20:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001c24:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c32:	230c      	movs	r3, #12
 8001c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4812      	ldr	r0, [pc, #72]	@ (8001c84 <HAL_FMC_MspInit+0x144>)
 8001c3c:	f001 fef4 	bl	8003a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001c40:	2301      	movs	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c50:	230c      	movs	r3, #12
 8001c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	480b      	ldr	r0, [pc, #44]	@ (8001c88 <HAL_FMC_MspInit+0x148>)
 8001c5a:	f001 fee5 	bl	8003a28 <HAL_GPIO_Init>
 8001c5e:	e000      	b.n	8001c62 <HAL_FMC_MspInit+0x122>
    return;
 8001c60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200007a4 	.word	0x200007a4
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021400 	.word	0x40021400
 8001c84:	40021c00 	.word	0x40021c00
 8001c88:	40020800 	.word	0x40020800

08001c8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c94:	f7ff ff54 	bl	8001b40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a26      	ldr	r2, [pc, #152]	@ (8001d48 <HAL_SAI_MspInit+0xa8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d146      	bne.n	8001d40 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001cb2:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <HAL_SAI_MspInit+0xac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_SAI_MspInit+0xb0>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a23      	ldr	r2, [pc, #140]	@ (8001d50 <HAL_SAI_MspInit+0xb0>)
 8001cc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_SAI_MspInit+0xb0>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_SAI_MspInit+0xac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_SAI_MspInit+0xac>)
 8001cde:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001ce0:	2330      	movs	r3, #48	@ 0x30
 8001ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4816      	ldr	r0, [pc, #88]	@ (8001d54 <HAL_SAI_MspInit+0xb4>)
 8001cfc:	f001 fe94 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001d00:	2340      	movs	r3, #64	@ 0x40
 8001d02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d10:	2306      	movs	r3, #6
 8001d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480f      	ldr	r0, [pc, #60]	@ (8001d58 <HAL_SAI_MspInit+0xb8>)
 8001d1c:	f001 fe84 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d30:	2306      	movs	r3, #6
 8001d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4808      	ldr	r0, [pc, #32]	@ (8001d5c <HAL_SAI_MspInit+0xbc>)
 8001d3c:	f001 fe74 	bl	8003a28 <HAL_GPIO_Init>

    }
}
 8001d40:	bf00      	nop
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40015804 	.word	0x40015804
 8001d4c:	200007a8 	.word	0x200007a8
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021800 	.word	0x40021800

08001d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	@ 0x38
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_InitTick+0xe4>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a32      	ldr	r2, [pc, #200]	@ (8001e44 <HAL_InitTick+0xe4>)
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_InitTick+0xe4>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d8c:	f107 0210 	add.w	r2, r7, #16
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 f936 	bl	8007008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001da6:	f005 f907 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8001daa:	6378      	str	r0, [r7, #52]	@ 0x34
 8001dac:	e004      	b.n	8001db8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dae:	f005 f903 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8001db2:	4603      	mov	r3, r0
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dba:	4a23      	ldr	r2, [pc, #140]	@ (8001e48 <HAL_InitTick+0xe8>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0c9b      	lsrs	r3, r3, #18
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_InitTick+0xec>)
 8001dc8:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <HAL_InitTick+0xf0>)
 8001dca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <HAL_InitTick+0xec>)
 8001dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <HAL_InitTick+0xec>)
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_InitTick+0xec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_InitTick+0xec>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_InitTick+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001dec:	4817      	ldr	r0, [pc, #92]	@ (8001e4c <HAL_InitTick+0xec>)
 8001dee:	f006 feed 	bl	8008bcc <HAL_TIM_Base_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001df8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11b      	bne.n	8001e38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e00:	4812      	ldr	r0, [pc, #72]	@ (8001e4c <HAL_InitTick+0xec>)
 8001e02:	f006 ff33 	bl	8008c6c <HAL_TIM_Base_Start_IT>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d111      	bne.n	8001e38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e14:	2036      	movs	r0, #54	@ 0x36
 8001e16:	f000 fa6d 	bl	80022f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d808      	bhi.n	8001e32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	2036      	movs	r0, #54	@ 0x36
 8001e26:	f000 fa49 	bl	80022bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_InitTick+0xf4>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e002      	b.n	8001e38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3738      	adds	r7, #56	@ 0x38
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	200007ac 	.word	0x200007ac
 8001e50:	40001000 	.word	0x40001000
 8001e54:	20000004 	.word	0x20000004

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <NMI_Handler+0x4>

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <TIM6_DAC_IRQHandler+0x10>)
 8001ece:	f006 ff3d 	bl	8008d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200007ac 	.word	0x200007ac

08001edc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <DMA2_Stream3_IRQHandler+0x10>)
 8001ee2:	f000 fb37 	bl	8002554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200005d8 	.word	0x200005d8

08001ef0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <OTG_FS_IRQHandler+0x10>)
 8001ef6:	f002 fa55 	bl	80043a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000c1c 	.word	0x20000c1c

08001f04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA2_Stream6_IRQHandler+0x10>)
 8001f0a:	f000 fb23 	bl	8002554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000638 	.word	0x20000638

08001f18 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <LTDC_IRQHandler+0x10>)
 8001f1e:	f004 faa9 	bl	8006474 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200003d8 	.word	0x200003d8

08001f2c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <DMA2D_IRQHandler+0x10>)
 8001f32:	f000 fdce 	bl	8002ad2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200002d4 	.word	0x200002d4

08001f40 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DSI_IRQHandler+0x10>)
 8001f46:	f001 f9a4 	bl	8003292 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000314 	.word	0x20000314

08001f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return 1;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_kill>:

int _kill(int pid, int sig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f6e:	f00e fddf 	bl	8010b30 <__errno>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2216      	movs	r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
  return -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_exit>:

void _exit (int status)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe7 	bl	8001f64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f96:	bf00      	nop
 8001f98:	e7fd      	b.n	8001f96 <_exit+0x12>
	...

08001f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <_sbrk+0x5c>)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <_sbrk+0x60>)
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <_sbrk+0x64>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <_sbrk+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d207      	bcs.n	8001fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fcc:	f00e fdb0 	bl	8010b30 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20050000 	.word	0x20050000
 8001ffc:	00000400 	.word	0x00000400
 8002000:	200007f4 	.word	0x200007f4
 8002004:	20001148 	.word	0x20001148

08002008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <SystemInit+0x20>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002012:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <SystemInit+0x20>)
 8002014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002064 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002030:	f7ff ffea 	bl	8002008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480c      	ldr	r0, [pc, #48]	@ (8002068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002036:	490d      	ldr	r1, [pc, #52]	@ (800206c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800204c:	4c0a      	ldr	r4, [pc, #40]	@ (8002078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800205a:	f00e fd6f 	bl	8010b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205e:	f7fe fba5 	bl	80007ac <main>
  bx  lr    
 8002062:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002064:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800206c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002070:	08010de0 	.word	0x08010de0
  ldr r2, =_sbss
 8002074:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002078:	20001148 	.word	0x20001148

0800207c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC_IRQHandler>
	...

08002080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <HAL_Init+0x40>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_Init+0x40>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <HAL_Init+0x40>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 f8fc 	bl	80022a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f7ff fe56 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff f9d2 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008
 80020e8:	200007f8 	.word	0x200007f8

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200007f8 	.word	0x200007f8

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000008 	.word	0x20000008

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	@ (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	@ (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff4c 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ce:	f7ff ff61 	bl	8002194 <__NVIC_GetPriorityGrouping>
 80022d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7ff ffb1 	bl	8002240 <NVIC_EncodePriority>
 80022de:	4602      	mov	r2, r0
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff80 	bl	80021ec <__NVIC_SetPriority>
}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff54 	bl	80021b0 <__NVIC_EnableIRQ>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	795b      	ldrb	r3, [r3, #5]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff f8c0 	bl	80014b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff feca 	bl	80020ec <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e099      	b.n	8002498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002384:	e00f      	b.n	80023a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002386:	f7ff feb1 	bl	80020ec <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b05      	cmp	r3, #5
 8002392:	d908      	bls.n	80023a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2203      	movs	r2, #3
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e078      	b.n	8002498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e8      	bne.n	8002386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_DMA_Init+0x158>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	4313      	orrs	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0307 	bic.w	r3, r3, #7
 8002426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	2b04      	cmp	r3, #4
 8002438:	d117      	bne.n	800246a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa7b 	bl	8002948 <DMA_CheckFifoParam>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2240      	movs	r2, #64	@ 0x40
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002466:	2301      	movs	r3, #1
 8002468:	e016      	b.n	8002498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fa32 	bl	80028dc <DMA_CalcBaseAndBitshift>
 8002478:	4603      	mov	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	223f      	movs	r2, #63	@ 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	f010803f 	.word	0xf010803f

080024a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Start_IT+0x26>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e040      	b.n	800254c <HAL_DMA_Start_IT+0xa8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d12f      	bne.n	800253e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f9c4 	bl	8002880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	223f      	movs	r2, #63	@ 0x3f
 80024fe:	409a      	lsls	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0216 	orr.w	r2, r2, #22
 8002512:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e005      	b.n	800254a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002560:	4b8e      	ldr	r3, [pc, #568]	@ (800279c <HAL_DMA_IRQHandler+0x248>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a8e      	ldr	r2, [pc, #568]	@ (80027a0 <HAL_DMA_IRQHandler+0x24c>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0a9b      	lsrs	r3, r3, #10
 800256c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257e:	2208      	movs	r2, #8
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01a      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0204 	bic.w	r2, r2, #4
 80025a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	2208      	movs	r2, #8
 80025ae:	409a      	lsls	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e2:	2201      	movs	r2, #1
 80025e4:	409a      	lsls	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f043 0202 	orr.w	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	2204      	movs	r2, #4
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d012      	beq.n	800262c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00b      	beq.n	800262c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002618:	2204      	movs	r2, #4
 800261a:	409a      	lsls	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	2210      	movs	r2, #16
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d043      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d03c      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	2210      	movs	r2, #16
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d018      	beq.n	8002696 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d024      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
 8002682:	e01f      	b.n	80026c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e016      	b.n	80026c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0208 	bic.w	r2, r2, #8
 80026b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	2220      	movs	r2, #32
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 808f 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8087 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	2220      	movs	r2, #32
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d136      	bne.n	800276c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0216 	bic.w	r2, r2, #22
 800270c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800271c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <HAL_DMA_IRQHandler+0x1da>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0208 	bic.w	r2, r2, #8
 800273c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	223f      	movs	r2, #63	@ 0x3f
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d07e      	beq.n	8002860 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
        }
        return;
 800276a:	e079      	b.n	8002860 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01d      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
 8002798:	e02c      	b.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000
 80027a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d023      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
 80027b4:	e01e      	b.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10f      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0210 	bic.w	r2, r2, #16
 80027d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d032      	beq.n	8002862 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d022      	beq.n	800284e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2205      	movs	r2, #5
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3301      	adds	r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d307      	bcc.n	800283c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f2      	bne.n	8002820 <HAL_DMA_IRQHandler+0x2cc>
 800283a:	e000      	b.n	800283e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800283c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
 800285e:	e000      	b.n	8002862 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002860:	bf00      	nop
    }
  }
}
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800289c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b40      	cmp	r3, #64	@ 0x40
 80028ac:	d108      	bne.n	80028c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028be:	e007      	b.n	80028d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	60da      	str	r2, [r3, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3b10      	subs	r3, #16
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <DMA_CalcBaseAndBitshift+0x64>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028f6:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <DMA_CalcBaseAndBitshift+0x68>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d909      	bls.n	800291e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	659a      	str	r2, [r3, #88]	@ 0x58
 800291c:	e007      	b.n	800292e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	aaaaaaab 	.word	0xaaaaaaab
 8002944:	08010ce8 	.word	0x08010ce8

08002948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11f      	bne.n	80029a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d856      	bhi.n	8002a16 <DMA_CheckFifoParam+0xce>
 8002968:	a201      	add	r2, pc, #4	@ (adr r2, 8002970 <DMA_CheckFifoParam+0x28>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002981 	.word	0x08002981
 8002974:	08002993 	.word	0x08002993
 8002978:	08002981 	.word	0x08002981
 800297c:	08002a17 	.word	0x08002a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d046      	beq.n	8002a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e043      	b.n	8002a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002996:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800299a:	d140      	bne.n	8002a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e03d      	b.n	8002a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029aa:	d121      	bne.n	80029f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d837      	bhi.n	8002a22 <DMA_CheckFifoParam+0xda>
 80029b2:	a201      	add	r2, pc, #4	@ (adr r2, 80029b8 <DMA_CheckFifoParam+0x70>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029cf 	.word	0x080029cf
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	080029e1 	.word	0x080029e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e030      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d025      	beq.n	8002a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029de:	e022      	b.n	8002a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029e8:	d11f      	bne.n	8002a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ee:	e01c      	b.n	8002a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d903      	bls.n	80029fe <DMA_CheckFifoParam+0xb6>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d003      	beq.n	8002a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029fc:	e018      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      break;
 8002a02:	e015      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e00b      	b.n	8002a2e <DMA_CheckFifoParam+0xe6>
      break;
 8002a16:	bf00      	nop
 8002a18:	e00a      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e008      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e006      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e004      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop

08002a40 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e03b      	b.n	8002aca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe fd48 	bl	80014fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a90:	f023 0107 	bic.w	r1, r3, #7
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002aaa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68d1      	ldr	r1, [r2, #12]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d026      	beq.n	8002b42 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d021      	beq.n	8002b42 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2204      	movs	r2, #4
 8002b26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d026      	beq.n	8002b9a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d021      	beq.n	8002b9a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b64:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d026      	beq.n	8002bf2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d021      	beq.n	8002bf2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00e      	beq.n	8002c24 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c14:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f853 	bl	8002cca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d024      	beq.n	8002c78 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01f      	beq.n	8002c78 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01f      	beq.n	8002cc2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f80e 	bl	8002cde <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA2D_ConfigLayer+0x20>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e079      	b.n	8002e08 <HAL_DMA2D_ConfigLayer+0x114>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	3318      	adds	r3, #24
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002d3e:	4b35      	ldr	r3, [pc, #212]	@ (8002e14 <HAL_DMA2D_ConfigLayer+0x120>)
 8002d40:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b0a      	cmp	r3, #10
 8002d48:	d003      	beq.n	8002d52 <HAL_DMA2D_ConfigLayer+0x5e>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b09      	cmp	r3, #9
 8002d50:	d107      	bne.n	8002d62 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e005      	b.n	8002d6e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d120      	bne.n	8002db6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	ea02 0103 	and.w	r1, r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b0a      	cmp	r3, #10
 8002d9c:	d003      	beq.n	8002da6 <HAL_DMA2D_ConfigLayer+0xb2>
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	d127      	bne.n	8002df6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002db4:	e01f      	b.n	8002df6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	ea02 0103 	and.w	r1, r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	d003      	beq.n	8002de8 <HAL_DMA2D_ConfigLayer+0xf4>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	d106      	bne.n	8002df6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002df4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	ff03000f 	.word	0xff03000f

08002e18 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e16e      	b.n	800310a <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7c5b      	ldrb	r3, [r3, #17]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe fb88 	bl	800154c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2203      	movs	r2, #3
 8002e40:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002e56:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6a:	f7ff f93f 	bl	80020ec <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002e70:	e009      	b.n	8002e86 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e72:	f7ff f93b 	bl	80020ec <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e80:	d901      	bls.n	8002e86 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e141      	b.n	800310a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ed      	beq.n	8002e72 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002ea6:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002eaa:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002ec2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002eca:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7ff f900 	bl	8002104 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f04:	f7ff f8f2 	bl	80020ec <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002f0a:	e009      	b.n	8002f20 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f0c:	f7ff f8ee 	bl	80020ec <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f1a:	d901      	bls.n	8002f20 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0f4      	b.n	800310a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ed      	beq.n	8002f0c <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f60:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6899      	ldr	r1, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0202 	orr.w	r2, r2, #2
 8002f84:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0204 	orr.w	r2, r2, #4
 8002f98:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0203 	bic.w	r2, r2, #3
 8002fac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc6:	f7ff f891 	bl	80020ec <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d123      	bne.n	8003024 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002fdc:	e00c      	b.n	8002ff8 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002fde:	f7ff f885 	bl	80020ec <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fec:	d904      	bls.n	8002ff8 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e088      	b.n	800310a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003000:	f003 0314 	and.w	r3, r3, #20
 8003004:	2b14      	cmp	r3, #20
 8003006:	d1ea      	bne.n	8002fde <HAL_DSI_Init+0x1c6>
 8003008:	e014      	b.n	8003034 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800300a:	f7ff f86f 	bl	80020ec <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003018:	d904      	bls.n	8003024 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e072      	b.n	800310a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800302c:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8003030:	2b94      	cmp	r3, #148	@ 0x94
 8003032:	d1ea      	bne.n	800300a <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_DSI_Init+0x22a>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	e000      	b.n	8003044 <HAL_DSI_Init+0x22c>
 8003042:	2301      	movs	r3, #1
 8003044:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	4a32      	ldr	r2, [pc, #200]	@ (8003114 <HAL_DSI_Init+0x2fc>)
 800304a:	fb03 f202 	mul.w	r2, r3, r2
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	409a      	lsls	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800307a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	430a      	orrs	r2, r1
 800308e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0203 	bic.w	r2, r2, #3
 80030de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3728      	adds	r7, #40	@ 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7c1b      	ldrb	r3, [r3, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_DSI_ConfigErrorMonitor+0x16>
 800312a:	2302      	movs	r3, #2
 800312c:	e0ab      	b.n	8003286 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003168:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800316c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800318a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0202 	orr.w	r2, r2, #2
 80031c6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 020c 	orr.w	r2, r2, #12
 80031e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0210 	orr.w	r2, r2, #16
 8003202:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800323e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800325c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800327a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00f      	beq.n	80032ca <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8ad 	bl	8003424 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00f      	beq.n	80032fa <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f89f 	bl	8003438 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808c 	beq.w	800341c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800330c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003324:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f043 0204 	orr.w	r2, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f043 0208 	orr.w	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f818 	bl	800344c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7c1b      	ldrb	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_DSI_SetGenericVCID+0x16>
 8003472:	2302      	movs	r3, #2
 8003474:	e016      	b.n	80034a4 <HAL_DSI_SetGenericVCID+0x44>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0203 	bic.w	r2, r2, #3
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7c1b      	ldrb	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e0c5      	b.n	8003652 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0203 	bic.w	r2, r2, #3
 8003512:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68d9      	ldr	r1, [r3, #12]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0207 	bic.w	r2, r2, #7
 8003534:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6959      	ldr	r1, [r3, #20]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	431a      	orrs	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020f 	bic.w	r2, r2, #15
 8003562:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 020e 	bic.w	r2, r2, #14
 8003586:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005a      	lsls	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80035d4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0202 	orr.w	r2, r2, #2
 8003646:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7c1b      	ldrb	r3, [r3, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_DSI_ConfigCommand+0x16>
 8003672:	2302      	movs	r3, #2
 8003674:	e049      	b.n	800370a <HAL_DSI_ConfigCommand+0xaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_DSI_ConfigCommand+0xb8>)
 8003688:	400b      	ands	r3, r1
 800368a:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800369a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80036a0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80036a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80036ac:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80036b2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80036b8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80036be:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80036c4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80036ca:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80036d0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80036d6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0202 	bic.w	r2, r2, #2
 80036ee:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	fef080ff 	.word	0xfef080ff

0800371c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7c1b      	ldrb	r3, [r3, #16]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_DSI_ConfigFlowControl+0x16>
 800372e:	2302      	movs	r3, #2
 8003730:	e016      	b.n	8003760 <HAL_DSI_ConfigFlowControl+0x44>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 021f 	bic.w	r2, r2, #31
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7c1b      	ldrb	r3, [r3, #16]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_DSI_ConfigPhyTimer+0x16>
 800377e:	2302      	movs	r3, #2
 8003780:	e058      	b.n	8003834 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4293      	cmp	r3, r2
 8003792:	bf38      	it	cc
 8003794:	4613      	movcc	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80037a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	041a      	lsls	r2, r3, #16
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80037d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003810:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7c1b      	ldrb	r3, [r3, #16]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003852:	2302      	movs	r3, #2
 8003854:	e0b4      	b.n	80039c0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800386a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b292      	uxth	r2, r2
 800388c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	041a      	lsls	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800394a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	041b      	lsls	r3, r3, #16
 800399e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7c1b      	ldrb	r3, [r3, #16]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80039de:	2302      	movs	r3, #2
 80039e0:	e01b      	b.n	8003a1a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80039f8:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	065a      	lsls	r2, r3, #25
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	@ 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	e177      	b.n	8003d34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a44:	2201      	movs	r2, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	f040 8166 	bne.w	8003d2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d005      	beq.n	8003a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d130      	bne.n	8003adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0201 	and.w	r2, r3, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d017      	beq.n	8003b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d123      	bne.n	8003b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	220f      	movs	r2, #15
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	08da      	lsrs	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	69b9      	ldr	r1, [r7, #24]
 8003b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2203      	movs	r2, #3
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0203 	and.w	r2, r3, #3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80c0 	beq.w	8003d2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b66      	ldr	r3, [pc, #408]	@ (8003d4c <HAL_GPIO_Init+0x324>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	4a65      	ldr	r2, [pc, #404]	@ (8003d4c <HAL_GPIO_Init+0x324>)
 8003bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bbe:	4b63      	ldr	r3, [pc, #396]	@ (8003d4c <HAL_GPIO_Init+0x324>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bca:	4a61      	ldr	r2, [pc, #388]	@ (8003d50 <HAL_GPIO_Init+0x328>)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	220f      	movs	r2, #15
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	@ (8003d54 <HAL_GPIO_Init+0x32c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d037      	beq.n	8003c66 <HAL_GPIO_Init+0x23e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a57      	ldr	r2, [pc, #348]	@ (8003d58 <HAL_GPIO_Init+0x330>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_GPIO_Init+0x23a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a56      	ldr	r2, [pc, #344]	@ (8003d5c <HAL_GPIO_Init+0x334>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02b      	beq.n	8003c5e <HAL_GPIO_Init+0x236>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a55      	ldr	r2, [pc, #340]	@ (8003d60 <HAL_GPIO_Init+0x338>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d025      	beq.n	8003c5a <HAL_GPIO_Init+0x232>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a54      	ldr	r2, [pc, #336]	@ (8003d64 <HAL_GPIO_Init+0x33c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <HAL_GPIO_Init+0x22e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a53      	ldr	r2, [pc, #332]	@ (8003d68 <HAL_GPIO_Init+0x340>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_Init+0x22a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a52      	ldr	r2, [pc, #328]	@ (8003d6c <HAL_GPIO_Init+0x344>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0x226>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a51      	ldr	r2, [pc, #324]	@ (8003d70 <HAL_GPIO_Init+0x348>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_Init+0x222>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a50      	ldr	r2, [pc, #320]	@ (8003d74 <HAL_GPIO_Init+0x34c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_Init+0x21e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4f      	ldr	r2, [pc, #316]	@ (8003d78 <HAL_GPIO_Init+0x350>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_Init+0x21a>
 8003c3e:	2309      	movs	r3, #9
 8003c40:	e012      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c42:	230a      	movs	r3, #10
 8003c44:	e010      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c46:	2308      	movs	r3, #8
 8003c48:	e00e      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e00c      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e00a      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c52:	2305      	movs	r3, #5
 8003c54:	e008      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c56:	2304      	movs	r3, #4
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e004      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e002      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_GPIO_Init+0x240>
 8003c66:	2300      	movs	r3, #0
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	f002 0203 	and.w	r2, r2, #3
 8003c6e:	0092      	lsls	r2, r2, #2
 8003c70:	4093      	lsls	r3, r2
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c78:	4935      	ldr	r1, [pc, #212]	@ (8003d50 <HAL_GPIO_Init+0x328>)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	3302      	adds	r3, #2
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c86:	4b3d      	ldr	r3, [pc, #244]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003caa:	4a34      	ldr	r2, [pc, #208]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb0:	4b32      	ldr	r3, [pc, #200]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd4:	4a29      	ldr	r2, [pc, #164]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cda:	4b28      	ldr	r3, [pc, #160]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <HAL_GPIO_Init+0x354>)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3301      	adds	r3, #1
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	f67f ae84 	bls.w	8003a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	3724      	adds	r7, #36	@ 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40013800 	.word	0x40013800
 8003d54:	40020000 	.word	0x40020000
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40021400 	.word	0x40021400
 8003d6c:	40021800 	.word	0x40021800
 8003d70:	40021c00 	.word	0x40021c00
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40022400 	.word	0x40022400
 8003d7c:	40013c00 	.word	0x40013c00

08003d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e001      	b.n	8003da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af02      	add	r7, sp, #8
 8003de8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e059      	b.n	8003ea8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f00c fa12 	bl	8010238 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e22:	d102      	bne.n	8003e2a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f006 fc55 	bl	800a6de <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7c1a      	ldrb	r2, [r3, #16]
 8003e3c:	f88d 2000 	strb.w	r2, [sp]
 8003e40:	3304      	adds	r3, #4
 8003e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e44:	f006 fbd6 	bl	800a5f4 <USB_CoreInit>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e026      	b.n	8003ea8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f006 fc4d 	bl	800a700 <USB_SetCurrentMode>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e017      	b.n	8003ea8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7c1a      	ldrb	r2, [r3, #16]
 8003e80:	f88d 2000 	strb.w	r2, [sp]
 8003e84:	3304      	adds	r3, #4
 8003e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e88:	f006 fdf0 	bl	800aa6c <USB_HostInit>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e004      	b.n	8003ea8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b08b      	sub	sp, #44	@ 0x2c
 8003eb4:	af04      	add	r7, sp, #16
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	70fb      	strb	r3, [r7, #3]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	70bb      	strb	r3, [r7, #2]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003eca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003ecc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_HCD_HC_Init+0x2c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e09d      	b.n	8004018 <HAL_HCD_HC_Init+0x168>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3319      	adds	r3, #25
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3314      	adds	r3, #20
 8003f08:	787a      	ldrb	r2, [r7, #1]
 8003f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3315      	adds	r3, #21
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3326      	adds	r3, #38	@ 0x26
 8003f30:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003f34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	78bb      	ldrb	r3, [r7, #2]
 8003f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3e:	b2d8      	uxtb	r0, r3
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3316      	adds	r3, #22
 8003f4e:	4602      	mov	r2, r0
 8003f50:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fbc8 	bl	80046ec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003f5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da0a      	bge.n	8003f7a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3317      	adds	r3, #23
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e009      	b.n	8003f8e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3317      	adds	r3, #23
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f006 fec2 	bl	800ad1c <USB_GetHostSpeed>
 8003f98:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10b      	bne.n	8003fba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_HCD_HC_Init+0x10a>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2bbc      	cmp	r3, #188	@ 0xbc
 8003fb4:	d901      	bls.n	8003fba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003fb6:	23bc      	movs	r3, #188	@ 0xbc
 8003fb8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3318      	adds	r3, #24
 8003fca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	b298      	uxth	r0, r3
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3328      	adds	r3, #40	@ 0x28
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	787c      	ldrb	r4, [r7, #1]
 8003ff2:	78ba      	ldrb	r2, [r7, #2]
 8003ff4:	78f9      	ldrb	r1, [r7, #3]
 8003ff6:	9302      	str	r3, [sp, #8]
 8003ff8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	4623      	mov	r3, r4
 8004006:	f006 feb1 	bl	800ad6c <USB_HC_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_HCD_HC_Halt+0x1e>
 800403a:	2302      	movs	r3, #2
 800403c:	e00f      	b.n	800405e <HAL_HCD_HC_Halt+0x3e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f007 fa43 	bl	800b4da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	70fb      	strb	r3, [r7, #3]
 800407a:	460b      	mov	r3, r1
 800407c:	70bb      	strb	r3, [r7, #2]
 800407e:	4613      	mov	r3, r2
 8004080:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3317      	adds	r3, #23
 8004092:	78ba      	ldrb	r2, [r7, #2]
 8004094:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3326      	adds	r3, #38	@ 0x26
 80040a6:	787a      	ldrb	r2, [r7, #1]
 80040a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80040aa:	7c3b      	ldrb	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d114      	bne.n	80040da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	332a      	adds	r3, #42	@ 0x2a
 80040c0:	2203      	movs	r2, #3
 80040c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3319      	adds	r3, #25
 80040d4:	7f3a      	ldrb	r2, [r7, #28]
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e009      	b.n	80040ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	332a      	adds	r3, #42	@ 0x2a
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80040ee:	787b      	ldrb	r3, [r7, #1]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	f200 8102 	bhi.w	80042fa <HAL_HCD_HC_SubmitRequest+0x292>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	080042e5 	.word	0x080042e5
 8004104:	080041d1 	.word	0x080041d1
 8004108:	0800425b 	.word	0x0800425b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800410c:	7c3b      	ldrb	r3, [r7, #16]
 800410e:	2b01      	cmp	r3, #1
 8004110:	f040 80f5 	bne.w	80042fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004114:	78bb      	ldrb	r3, [r7, #2]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d12d      	bne.n	8004176 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800411a:	8b3b      	ldrh	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	333d      	adds	r3, #61	@ 0x3d
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	333d      	adds	r3, #61	@ 0x3d
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	332a      	adds	r3, #42	@ 0x2a
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800415e:	e0ce      	b.n	80042fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	332a      	adds	r3, #42	@ 0x2a
 8004170:	2202      	movs	r2, #2
 8004172:	701a      	strb	r2, [r3, #0]
      break;
 8004174:	e0c3      	b.n	80042fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	331a      	adds	r3, #26
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 80b8 	bne.w	80042fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	333c      	adds	r3, #60	@ 0x3c
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	332a      	adds	r3, #42	@ 0x2a
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
      break;
 80041b8:	e0a1      	b.n	80042fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	332a      	adds	r3, #42	@ 0x2a
 80041ca:	2202      	movs	r2, #2
 80041cc:	701a      	strb	r2, [r3, #0]
      break;
 80041ce:	e096      	b.n	80042fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80041d0:	78bb      	ldrb	r3, [r7, #2]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d120      	bne.n	8004218 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	333d      	adds	r3, #61	@ 0x3d
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	332a      	adds	r3, #42	@ 0x2a
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004200:	e07e      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	332a      	adds	r3, #42	@ 0x2a
 8004212:	2202      	movs	r2, #2
 8004214:	701a      	strb	r2, [r3, #0]
      break;
 8004216:	e073      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	333c      	adds	r3, #60	@ 0x3c
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	332a      	adds	r3, #42	@ 0x2a
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
      break;
 8004242:	e05d      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	332a      	adds	r3, #42	@ 0x2a
 8004254:	2202      	movs	r2, #2
 8004256:	701a      	strb	r2, [r3, #0]
      break;
 8004258:	e052      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800425a:	78bb      	ldrb	r3, [r7, #2]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d120      	bne.n	80042a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	333d      	adds	r3, #61	@ 0x3d
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	332a      	adds	r3, #42	@ 0x2a
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800428a:	e039      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	332a      	adds	r3, #42	@ 0x2a
 800429c:	2202      	movs	r2, #2
 800429e:	701a      	strb	r2, [r3, #0]
      break;
 80042a0:	e02e      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	333c      	adds	r3, #60	@ 0x3c
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	332a      	adds	r3, #42	@ 0x2a
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
      break;
 80042cc:	e018      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	332a      	adds	r3, #42	@ 0x2a
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]
      break;
 80042e2:	e00d      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	332a      	adds	r3, #42	@ 0x2a
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
      break;
 80042f8:	e002      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80042fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	332c      	adds	r3, #44	@ 0x2c
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	8b39      	ldrh	r1, [r7, #24]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4403      	add	r3, r0
 8004324:	3334      	adds	r3, #52	@ 0x34
 8004326:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334c      	adds	r3, #76	@ 0x4c
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3338      	adds	r3, #56	@ 0x38
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3315      	adds	r3, #21
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334d      	adds	r3, #77	@ 0x4d
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3310      	adds	r3, #16
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	1d19      	adds	r1, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	799b      	ldrb	r3, [r3, #6]
 8004392:	461a      	mov	r2, r3
 8004394:	f006 fe16 	bl	800afc4 <USB_HC_StartXfer>
 8004398:	4603      	mov	r3, r0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f006 fb16 	bl	800a9ec <USB_GetMode>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	f040 80fb 	bne.w	80045be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 fad9 	bl	800a984 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80f1 	beq.w	80045bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f006 fad0 	bl	800a984 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ee:	d104      	bne.n	80043fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80043f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f006 fac0 	bl	800a984 <USB_ReadInterrupts>
 8004404:	4603      	mov	r3, r0
 8004406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800440a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800440e:	d104      	bne.n	800441a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f006 fab0 	bl	800a984 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800442a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800442e:	d104      	bne.n	800443a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004438:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f006 faa0 	bl	800a984 <USB_ReadInterrupts>
 8004444:	4603      	mov	r3, r0
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2202      	movs	r2, #2
 8004454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f006 fa92 	bl	800a984 <USB_ReadInterrupts>
 8004460:	4603      	mov	r3, r0
 8004462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800446a:	d120      	bne.n	80044ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004474:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d113      	bne.n	80044ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004486:	2110      	movs	r1, #16
 8004488:	6938      	ldr	r0, [r7, #16]
 800448a:	f006 f985 	bl	800a798 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800448e:	6938      	ldr	r0, [r7, #16]
 8004490:	f006 f9b4 	bl	800a7fc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7a5b      	ldrb	r3, [r3, #9]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d105      	bne.n	80044a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f006 fb9a 	bl	800abdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f00b ff43 	bl	8010334 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f006 fa66 	bl	800a984 <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044c2:	d102      	bne.n	80044ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f001 fd4d 	bl	8005f64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f006 fa58 	bl	800a984 <USB_ReadInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d106      	bne.n	80044ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f00b ff0c 	bl	80102fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2208      	movs	r2, #8
 80044ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f006 fa47 	bl	800a984 <USB_ReadInterrupts>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004500:	d139      	bne.n	8004576 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f006 ffd6 	bl	800b4b8 <USB_HC_ReadInterrupt>
 800450c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e025      	b.n	8004560 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d018      	beq.n	800455a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800453a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453e:	d106      	bne.n	800454e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f905 	bl	8004756 <HCD_HC_IN_IRQHandler>
 800454c:	e005      	b.n	800455a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 ff67 	bl	8005428 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3301      	adds	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	795b      	ldrb	r3, [r3, #5]
 8004564:	461a      	mov	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4293      	cmp	r3, r2
 800456a:	d3d3      	bcc.n	8004514 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f006 fa02 	bl	800a984 <USB_ReadInterrupts>
 8004580:	4603      	mov	r3, r0
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d101      	bne.n	800458e <HAL_HCD_IRQHandler+0x1ea>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_HCD_IRQHandler+0x1ec>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d014      	beq.n	80045be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0210 	bic.w	r2, r2, #16
 80045a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fbfe 	bl	8005da6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0210 	orr.w	r2, r2, #16
 80045b8:	619a      	str	r2, [r3, #24]
 80045ba:	e000      	b.n	80045be <HAL_HCD_IRQHandler+0x21a>
      return;
 80045bc:	bf00      	nop
    }
  }
}
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_HCD_Start+0x16>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e013      	b.n	8004602 <HAL_HCD_Start+0x3e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f006 fb5e 	bl	800acaa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f006 f862 	bl	800a6bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_HCD_Stop+0x16>
 800461c:	2302      	movs	r3, #2
 800461e:	e00d      	b.n	800463c <HAL_HCD_Stop+0x32>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f007 f8b1 	bl	800b794 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f006 fb00 	bl	800ac56 <USB_ResetPort>
 8004656:	4603      	mov	r3, r0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334c      	adds	r3, #76	@ 0x4c
 800467c:	781b      	ldrb	r3, [r3, #0]
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	3338      	adds	r3, #56	@ 0x38
 80046a6:	681b      	ldr	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 fb42 	bl	800ad4a <USB_GetCurrentFrame>
 80046c6:	4603      	mov	r3, r0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f006 fb1d 	bl	800ad1c <USB_GetHostSpeed>
 80046e2:	4603      	mov	r3, r0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	331a      	adds	r3, #26
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	331b      	adds	r3, #27
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3325      	adds	r3, #37	@ 0x25
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3324      	adds	r3, #36	@ 0x24
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f006 f918 	bl	800a9aa <USB_ReadChInterrupts>
 800477a:	4603      	mov	r3, r0
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d11a      	bne.n	80047ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004790:	461a      	mov	r2, r3
 8004792:	2304      	movs	r3, #4
 8004794:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	334d      	adds	r3, #77	@ 0x4d
 80047a6:	2207      	movs	r2, #7
 80047a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f006 fe91 	bl	800b4da <USB_HC_Halt>
 80047b8:	e09e      	b.n	80048f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f006 f8f1 	bl	800a9aa <USB_ReadChInterrupts>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d2:	d11b      	bne.n	800480c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	334d      	adds	r3, #77	@ 0x4d
 80047f8:	2208      	movs	r2, #8
 80047fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f006 fe68 	bl	800b4da <USB_HC_Halt>
 800480a:	e075      	b.n	80048f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f006 f8c8 	bl	800a9aa <USB_ReadChInterrupts>
 800481a:	4603      	mov	r3, r0
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d11a      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	2308      	movs	r3, #8
 8004834:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	334d      	adds	r3, #77	@ 0x4d
 8004846:	2206      	movs	r2, #6
 8004848:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f006 fe41 	bl	800b4da <USB_HC_Halt>
 8004858:	e04e      	b.n	80048f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f006 f8a1 	bl	800a9aa <USB_ReadChInterrupts>
 8004868:	4603      	mov	r3, r0
 800486a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004872:	d11b      	bne.n	80048ac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004880:	461a      	mov	r2, r3
 8004882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004886:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334d      	adds	r3, #77	@ 0x4d
 8004898:	2209      	movs	r2, #9
 800489a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f006 fe18 	bl	800b4da <USB_HC_Halt>
 80048aa:	e025      	b.n	80048f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f006 f878 	bl	800a9aa <USB_ReadChInterrupts>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c0:	2b80      	cmp	r3, #128	@ 0x80
 80048c2:	d119      	bne.n	80048f8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	334d      	adds	r3, #77	@ 0x4d
 80048e6:	2207      	movs	r2, #7
 80048e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f006 fdf1 	bl	800b4da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f006 f852 	bl	800a9aa <USB_ReadChInterrupts>
 8004906:	4603      	mov	r3, r0
 8004908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800490c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004910:	d112      	bne.n	8004938 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f006 fddd 	bl	800b4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004932:	6093      	str	r3, [r2, #8]
 8004934:	f000 bd75 	b.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f006 f832 	bl	800a9aa <USB_ReadChInterrupts>
 8004946:	4603      	mov	r3, r0
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	f040 8128 	bne.w	8004ba2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800495e:	461a      	mov	r2, r3
 8004960:	2320      	movs	r3, #32
 8004962:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	331b      	adds	r3, #27
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d119      	bne.n	80049ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	331b      	adds	r3, #27
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	799b      	ldrb	r3, [r3, #6]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3330      	adds	r3, #48	@ 0x30
 80049c6:	6819      	ldr	r1, [r3, #0]
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	1ac9      	subs	r1, r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4403      	add	r3, r0
 80049ea:	3338      	adds	r3, #56	@ 0x38
 80049ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	334d      	adds	r3, #77	@ 0x4d
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3344      	adds	r3, #68	@ 0x44
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a22:	461a      	mov	r2, r3
 8004a24:	2301      	movs	r3, #1
 8004a26:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3326      	adds	r3, #38	@ 0x26
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3326      	adds	r3, #38	@ 0x26
 8004a4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d110      	bne.n	8004a76 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f006 fd3c 	bl	800b4da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2310      	movs	r3, #16
 8004a72:	6093      	str	r3, [r2, #8]
 8004a74:	e03d      	b.n	8004af2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3326      	adds	r3, #38	@ 0x26
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d00a      	beq.n	8004aa2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3326      	adds	r3, #38	@ 0x26
 8004a9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d127      	bne.n	8004af2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004abc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ac0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	334c      	adds	r3, #76	@ 0x4c
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	334c      	adds	r3, #76	@ 0x4c
 8004ae6:	781a      	ldrb	r2, [r3, #0]
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f00b fc2f 	bl	8010350 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	799b      	ldrb	r3, [r3, #6]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d13b      	bne.n	8004b72 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3338      	adds	r3, #56	@ 0x38
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4403      	add	r3, r0
 8004b1a:	3328      	adds	r3, #40	@ 0x28
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	440b      	add	r3, r1
 8004b20:	1e59      	subs	r1, r3, #1
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4403      	add	r3, r0
 8004b30:	3328      	adds	r3, #40	@ 0x28
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8470 	beq.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	333c      	adds	r3, #60	@ 0x3c
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	f083 0301 	eor.w	r3, r3, #1
 8004b5a:	b2d8      	uxtb	r0, r3
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	333c      	adds	r3, #60	@ 0x3c
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	f000 bc58 	b.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	333c      	adds	r3, #60	@ 0x3c
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	f083 0301 	eor.w	r3, r3, #1
 8004b8a:	b2d8      	uxtb	r0, r3
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	333c      	adds	r3, #60	@ 0x3c
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	f000 bc40 	b.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	78fa      	ldrb	r2, [r7, #3]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f005 fefd 	bl	800a9aa <USB_ReadChInterrupts>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d131      	bne.n	8004c1e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2320      	movs	r3, #32
 8004bca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	331a      	adds	r3, #26
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	f040 841f 	bne.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	331b      	adds	r3, #27
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	334d      	adds	r3, #77	@ 0x4d
 8004c08:	2203      	movs	r2, #3
 8004c0a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f006 fc60 	bl	800b4da <USB_HC_Halt>
 8004c1a:	f000 bc02 	b.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f005 febf 	bl	800a9aa <USB_ReadChInterrupts>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	f040 8305 	bne.w	8005242 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c44:	461a      	mov	r2, r3
 8004c46:	2302      	movs	r3, #2
 8004c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	334d      	adds	r3, #77	@ 0x4d
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d114      	bne.n	8004c8a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	334d      	adds	r3, #77	@ 0x4d
 8004c70:	2202      	movs	r2, #2
 8004c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	334c      	adds	r3, #76	@ 0x4c
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e2cc      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	334d      	adds	r3, #77	@ 0x4d
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b06      	cmp	r3, #6
 8004c9e:	d114      	bne.n	8004cca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	334d      	adds	r3, #77	@ 0x4d
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	334c      	adds	r3, #76	@ 0x4c
 8004cc4:	2205      	movs	r2, #5
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e2ac      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	334d      	adds	r3, #77	@ 0x4d
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	d00b      	beq.n	8004cf8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	334d      	adds	r3, #77	@ 0x4d
 8004cf0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	f040 80a6 	bne.w	8004e44 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	334d      	adds	r3, #77	@ 0x4d
 8004d08:	2202      	movs	r2, #2
 8004d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	3344      	adds	r3, #68	@ 0x44
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	1c59      	adds	r1, r3, #1
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4403      	add	r3, r0
 8004d2c:	3344      	adds	r3, #68	@ 0x44
 8004d2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	3344      	adds	r3, #68	@ 0x44
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d943      	bls.n	8004dce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d46:	78fa      	ldrb	r2, [r7, #3]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	3344      	adds	r3, #68	@ 0x44
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	331a      	adds	r3, #26
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d123      	bne.n	8004db8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	331b      	adds	r3, #27
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	331c      	adds	r3, #28
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334c      	adds	r3, #76	@ 0x4c
 8004dc8:	2204      	movs	r2, #4
 8004dca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004dcc:	e229      	b.n	8005222 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	334c      	adds	r3, #76	@ 0x4c
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3326      	adds	r3, #38	@ 0x26
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3326      	adds	r3, #38	@ 0x26
 8004e08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	f040 8209 	bne.w	8005222 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e42:	e1ee      	b.n	8005222 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	334d      	adds	r3, #77	@ 0x4d
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	f040 80c8 	bne.w	8004fec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	334d      	adds	r3, #77	@ 0x4d
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	331b      	adds	r3, #27
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	f040 81ce 	bne.w	8005224 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3326      	adds	r3, #38	@ 0x26
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d16b      	bne.n	8004f76 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3348      	adds	r3, #72	@ 0x48
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4403      	add	r3, r0
 8004ebe:	3348      	adds	r3, #72	@ 0x48
 8004ec0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3348      	adds	r3, #72	@ 0x48
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d943      	bls.n	8004f60 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3348      	adds	r3, #72	@ 0x48
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	331b      	adds	r3, #27
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	3344      	adds	r3, #68	@ 0x44
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d809      	bhi.n	8004f2a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	331c      	adds	r3, #28
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f48:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	334c      	adds	r3, #76	@ 0x4c
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e014      	b.n	8004f8a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	334c      	adds	r3, #76	@ 0x4c
 8004f70:	2202      	movs	r2, #2
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e009      	b.n	8004f8a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	334c      	adds	r3, #76	@ 0x4c
 8004f86:	2202      	movs	r2, #2
 8004f88:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3326      	adds	r3, #38	@ 0x26
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	3326      	adds	r3, #38	@ 0x26
 8004fb0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	f040 8136 	bne.w	8005224 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fd6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e11b      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334d      	adds	r3, #77	@ 0x4d
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	f040 8081 	bne.w	8005106 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	334d      	adds	r3, #77	@ 0x4d
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	331b      	adds	r3, #27
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b01      	cmp	r3, #1
 800502c:	f040 80fa 	bne.w	8005224 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	334c      	adds	r3, #76	@ 0x4c
 8005040:	2202      	movs	r2, #2
 8005042:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	440a      	add	r2, r1
 800505a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800505e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005062:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	440a      	add	r2, r1
 800507a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800507e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005082:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	440a      	add	r2, r1
 800509a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800509e:	f023 0320 	bic.w	r3, r3, #32
 80050a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3326      	adds	r3, #38	@ 0x26
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3326      	adds	r3, #38	@ 0x26
 80050ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	f040 80a9 	bne.w	8005224 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e08e      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	334d      	adds	r3, #77	@ 0x4d
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d143      	bne.n	80051a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	334d      	adds	r3, #77	@ 0x4d
 800512c:	2202      	movs	r2, #2
 800512e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	334c      	adds	r3, #76	@ 0x4c
 8005140:	2202      	movs	r2, #2
 8005142:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	3326      	adds	r3, #38	@ 0x26
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3326      	adds	r3, #38	@ 0x26
 800516a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800516c:	2b02      	cmp	r3, #2
 800516e:	d159      	bne.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005186:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800518e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800519c:	461a      	mov	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	e03f      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	334d      	adds	r3, #77	@ 0x4d
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d126      	bne.n	8005208 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	334d      	adds	r3, #77	@ 0x4d
 80051ca:	2202      	movs	r2, #2
 80051cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	3344      	adds	r3, #68	@ 0x44
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	1c59      	adds	r1, r3, #1
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4403      	add	r3, r0
 80051ee:	3344      	adds	r3, #68	@ 0x44
 80051f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	334c      	adds	r3, #76	@ 0x4c
 8005202:	2204      	movs	r2, #4
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e00d      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	334d      	adds	r3, #77	@ 0x4d
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	f000 8100 	beq.w	8005420 <HCD_HC_IN_IRQHandler+0xcca>
 8005220:	e000      	b.n	8005224 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005222:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	334c      	adds	r3, #76	@ 0x4c
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f00b f888 	bl	8010350 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005240:	e0ef      	b.n	8005422 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f005 fbad 	bl	800a9aa <USB_ReadChInterrupts>
 8005250:	4603      	mov	r3, r0
 8005252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005256:	2b40      	cmp	r3, #64	@ 0x40
 8005258:	d12f      	bne.n	80052ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005266:	461a      	mov	r2, r3
 8005268:	2340      	movs	r3, #64	@ 0x40
 800526a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	334d      	adds	r3, #77	@ 0x4d
 800527c:	2205      	movs	r2, #5
 800527e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	331a      	adds	r3, #26
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3344      	adds	r3, #68	@ 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f006 f911 	bl	800b4da <USB_HC_Halt>
 80052b8:	e0b3      	b.n	8005422 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	78fa      	ldrb	r2, [r7, #3]
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f005 fb71 	bl	800a9aa <USB_ReadChInterrupts>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	f040 80a7 	bne.w	8005422 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3326      	adds	r3, #38	@ 0x26
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d11b      	bne.n	8005322 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	3344      	adds	r3, #68	@ 0x44
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	334d      	adds	r3, #77	@ 0x4d
 800530e:	2204      	movs	r2, #4
 8005310:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f006 f8dd 	bl	800b4da <USB_HC_Halt>
 8005320:	e03f      	b.n	80053a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3326      	adds	r3, #38	@ 0x26
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	3326      	adds	r3, #38	@ 0x26
 8005348:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800534a:	2b02      	cmp	r3, #2
 800534c:	d129      	bne.n	80053a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3344      	adds	r3, #68	@ 0x44
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	799b      	ldrb	r3, [r3, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HCD_HC_IN_IRQHandler+0xc2a>
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	331b      	adds	r3, #27
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d110      	bne.n	80053a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	334d      	adds	r3, #77	@ 0x4d
 8005390:	2204      	movs	r2, #4
 8005392:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f006 f89c 	bl	800b4da <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	331b      	adds	r3, #27
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d129      	bne.n	800540c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	331b      	adds	r3, #27
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	440a      	add	r2, r1
 8005402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005406:	f043 0320 	orr.w	r3, r3, #32
 800540a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005418:	461a      	mov	r2, r3
 800541a:	2310      	movs	r3, #16
 800541c:	6093      	str	r3, [r2, #8]
 800541e:	e000      	b.n	8005422 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005420:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f005 faaf 	bl	800a9aa <USB_ReadChInterrupts>
 800544c:	4603      	mov	r3, r0
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d11b      	bne.n	800548e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005462:	461a      	mov	r2, r3
 8005464:	2304      	movs	r3, #4
 8005466:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	334d      	adds	r3, #77	@ 0x4d
 8005478:	2207      	movs	r2, #7
 800547a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	4611      	mov	r1, r2
 8005484:	4618      	mov	r0, r3
 8005486:	f006 f828 	bl	800b4da <USB_HC_Halt>
 800548a:	f000 bc89 	b.w	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f005 fa87 	bl	800a9aa <USB_ReadChInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	f040 8082 	bne.w	80055ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b4:	461a      	mov	r2, r3
 80054b6:	2320      	movs	r3, #32
 80054b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	3319      	adds	r3, #25
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d124      	bne.n	800551a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3319      	adds	r3, #25
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	334c      	adds	r3, #76	@ 0x4c
 80054f4:	2202      	movs	r2, #2
 80054f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	334d      	adds	r3, #77	@ 0x4d
 8005508:	2203      	movs	r2, #3
 800550a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f005 ffe0 	bl	800b4da <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	331a      	adds	r3, #26
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	f040 8437 	bne.w	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	331b      	adds	r3, #27
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 842b 	bne.w	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	3326      	adds	r3, #38	@ 0x26
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d009      	beq.n	8005574 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	331b      	adds	r3, #27
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	334d      	adds	r3, #77	@ 0x4d
 8005584:	2203      	movs	r2, #3
 8005586:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f005 ffa2 	bl	800b4da <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3344      	adds	r3, #68	@ 0x44
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e3f9      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f005 f9f8 	bl	800a9aa <USB_ReadChInterrupts>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c4:	d111      	bne.n	80055ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d2:	461a      	mov	r2, r3
 80055d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f005 ff79 	bl	800b4da <USB_HC_Halt>
 80055e8:	e3da      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f005 f9d9 	bl	800a9aa <USB_ReadChInterrupts>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d168      	bne.n	80056d4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3344      	adds	r3, #68	@ 0x44
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f005 f9c3 	bl	800a9aa <USB_ReadChInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d112      	bne.n	8005654 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3319      	adds	r3, #25
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564e:	461a      	mov	r2, r3
 8005650:	2340      	movs	r3, #64	@ 0x40
 8005652:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005654:	78fa      	ldrb	r2, [r7, #3]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	331b      	adds	r3, #27
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d019      	beq.n	800569e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	331b      	adds	r3, #27
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4413      	add	r3, r2
 8005686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	440a      	add	r2, r1
 8005694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056aa:	461a      	mov	r2, r3
 80056ac:	2301      	movs	r3, #1
 80056ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334d      	adds	r3, #77	@ 0x4d
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f005 ff04 	bl	800b4da <USB_HC_Halt>
 80056d2:	e365      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f005 f964 	bl	800a9aa <USB_ReadChInterrupts>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b40      	cmp	r3, #64	@ 0x40
 80056ea:	d139      	bne.n	8005760 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	334d      	adds	r3, #77	@ 0x4d
 80056fc:	2205      	movs	r2, #5
 80056fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	331a      	adds	r3, #26
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3319      	adds	r3, #25
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3344      	adds	r3, #68	@ 0x44
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	78fa      	ldrb	r2, [r7, #3]
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f005 fec7 	bl	800b4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005758:	461a      	mov	r2, r3
 800575a:	2340      	movs	r3, #64	@ 0x40
 800575c:	6093      	str	r3, [r2, #8]
 800575e:	e31f      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f005 f91e 	bl	800a9aa <USB_ReadChInterrupts>
 800576e:	4603      	mov	r3, r0
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b08      	cmp	r3, #8
 8005776:	d11a      	bne.n	80057ae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005784:	461a      	mov	r2, r3
 8005786:	2308      	movs	r3, #8
 8005788:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	334d      	adds	r3, #77	@ 0x4d
 800579a:	2206      	movs	r2, #6
 800579c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f005 fe97 	bl	800b4da <USB_HC_Halt>
 80057ac:	e2f8      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4611      	mov	r1, r2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f005 f8f7 	bl	800a9aa <USB_ReadChInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d144      	bne.n	8005850 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3344      	adds	r3, #68	@ 0x44
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	334d      	adds	r3, #77	@ 0x4d
 80057ea:	2204      	movs	r2, #4
 80057ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80057ee:	78fa      	ldrb	r2, [r7, #3]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	3319      	adds	r3, #25
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d114      	bne.n	800582e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	3318      	adds	r3, #24
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	3319      	adds	r3, #25
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f005 fe4f 	bl	800b4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005848:	461a      	mov	r2, r3
 800584a:	2310      	movs	r3, #16
 800584c:	6093      	str	r3, [r2, #8]
 800584e:	e2a7      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f005 f8a6 	bl	800a9aa <USB_ReadChInterrupts>
 800585e:	4603      	mov	r3, r0
 8005860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005864:	2b80      	cmp	r3, #128	@ 0x80
 8005866:	f040 8083 	bne.w	8005970 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	799b      	ldrb	r3, [r3, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d111      	bne.n	8005896 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	334d      	adds	r3, #77	@ 0x4d
 8005882:	2207      	movs	r2, #7
 8005884:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f005 fe23 	bl	800b4da <USB_HC_Halt>
 8005894:	e062      	b.n	800595c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005896:	78fa      	ldrb	r2, [r7, #3]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	3344      	adds	r3, #68	@ 0x44
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4403      	add	r3, r0
 80058b6:	3344      	adds	r3, #68	@ 0x44
 80058b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3344      	adds	r3, #68	@ 0x44
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d922      	bls.n	8005916 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	3344      	adds	r3, #68	@ 0x44
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	334c      	adds	r3, #76	@ 0x4c
 80058f4:	2204      	movs	r2, #4
 80058f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	334c      	adds	r3, #76	@ 0x4c
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f00a fd1e 	bl	8010350 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005914:	e022      	b.n	800595c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	334c      	adds	r3, #76	@ 0x4c
 8005926:	2202      	movs	r2, #2
 8005928:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005940:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005948:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005968:	461a      	mov	r2, r3
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	e217      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f005 f816 	bl	800a9aa <USB_ReadChInterrupts>
 800597e:	4603      	mov	r3, r0
 8005980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005988:	d11b      	bne.n	80059c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	334d      	adds	r3, #77	@ 0x4d
 800599a:	2209      	movs	r2, #9
 800599c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f005 fd97 	bl	800b4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059b8:	461a      	mov	r2, r3
 80059ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059be:	6093      	str	r3, [r2, #8]
 80059c0:	e1ee      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 ffed 	bl	800a9aa <USB_ReadChInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f040 81df 	bne.w	8005d9a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e8:	461a      	mov	r2, r3
 80059ea:	2302      	movs	r3, #2
 80059ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	334d      	adds	r3, #77	@ 0x4d
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 8093 	bne.w	8005b2c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	334d      	adds	r3, #77	@ 0x4d
 8005a16:	2202      	movs	r2, #2
 8005a18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	334c      	adds	r3, #76	@ 0x4c
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3326      	adds	r3, #38	@ 0x26
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d00b      	beq.n	8005a5c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	3326      	adds	r3, #38	@ 0x26
 8005a54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	f040 8190 	bne.w	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	799b      	ldrb	r3, [r3, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d115      	bne.n	8005a90 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005a64:	78fa      	ldrb	r2, [r7, #3]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	333d      	adds	r3, #61	@ 0x3d
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	f083 0301 	eor.w	r3, r3, #1
 8005a7c:	b2d8      	uxtb	r0, r3
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	333d      	adds	r3, #61	@ 0x3d
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	799b      	ldrb	r3, [r3, #6]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	f040 8171 	bne.w	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3334      	adds	r3, #52	@ 0x34
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8165 	beq.w	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3334      	adds	r3, #52	@ 0x34
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4403      	add	r3, r0
 8005ad2:	3328      	adds	r3, #40	@ 0x28
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	440b      	add	r3, r1
 8005ad8:	1e59      	subs	r1, r3, #1
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4403      	add	r3, r0
 8005ae8:	3328      	adds	r3, #40	@ 0x28
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 813f 	beq.w	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	333d      	adds	r3, #61	@ 0x3d
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2d8      	uxtb	r0, r3
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	333d      	adds	r3, #61	@ 0x3d
 8005b26:	4602      	mov	r2, r0
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e127      	b.n	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	334d      	adds	r3, #77	@ 0x4d
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d120      	bne.n	8005b84 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b42:	78fa      	ldrb	r2, [r7, #3]
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	334d      	adds	r3, #77	@ 0x4d
 8005b52:	2202      	movs	r2, #2
 8005b54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	331b      	adds	r3, #27
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 8107 	bne.w	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	334c      	adds	r3, #76	@ 0x4c
 8005b7e:	2202      	movs	r2, #2
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e0fb      	b.n	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	334d      	adds	r3, #77	@ 0x4d
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d13a      	bne.n	8005c10 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b9a:	78fa      	ldrb	r2, [r7, #3]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	334d      	adds	r3, #77	@ 0x4d
 8005baa:	2202      	movs	r2, #2
 8005bac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	334c      	adds	r3, #76	@ 0x4c
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	331b      	adds	r3, #27
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 80d1 	bne.w	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	331b      	adds	r3, #27
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c0c:	6053      	str	r3, [r2, #4]
 8005c0e:	e0b5      	b.n	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005c10:	78fa      	ldrb	r2, [r7, #3]
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	334d      	adds	r3, #77	@ 0x4d
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d114      	bne.n	8005c50 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	334d      	adds	r3, #77	@ 0x4d
 8005c36:	2202      	movs	r2, #2
 8005c38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	334c      	adds	r3, #76	@ 0x4c
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e095      	b.n	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005c50:	78fa      	ldrb	r2, [r7, #3]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	334d      	adds	r3, #77	@ 0x4d
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d114      	bne.n	8005c90 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c66:	78fa      	ldrb	r2, [r7, #3]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	334d      	adds	r3, #77	@ 0x4d
 8005c76:	2202      	movs	r2, #2
 8005c78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	334c      	adds	r3, #76	@ 0x4c
 8005c8a:	2205      	movs	r2, #5
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e075      	b.n	8005d7c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	334d      	adds	r3, #77	@ 0x4d
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	d00a      	beq.n	8005cbc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	334d      	adds	r3, #77	@ 0x4d
 8005cb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005cb8:	2b09      	cmp	r3, #9
 8005cba:	d170      	bne.n	8005d9e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	334d      	adds	r3, #77	@ 0x4d
 8005ccc:	2202      	movs	r2, #2
 8005cce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	3344      	adds	r3, #68	@ 0x44
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4403      	add	r3, r0
 8005cf0:	3344      	adds	r3, #68	@ 0x44
 8005cf2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005cf4:	78fa      	ldrb	r2, [r7, #3]
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	3344      	adds	r3, #68	@ 0x44
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d914      	bls.n	8005d34 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3344      	adds	r3, #68	@ 0x44
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	334c      	adds	r3, #76	@ 0x4c
 8005d2e:	2204      	movs	r2, #4
 8005d30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d32:	e022      	b.n	8005d7a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	334c      	adds	r3, #76	@ 0x4c
 8005d44:	2202      	movs	r2, #2
 8005d46:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d74:	461a      	mov	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d7a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	334c      	adds	r3, #76	@ 0x4c
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f00a fadc 	bl	8010350 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d98:	e002      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005d9e:	bf00      	nop
  }
}
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08a      	sub	sp, #40	@ 0x28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	0c5b      	lsrs	r3, r3, #17
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d004      	beq.n	8005dec <HCD_RXQLVL_IRQHandler+0x46>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	f000 80b6 	beq.w	8005f56 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005dea:	e0b7      	b.n	8005f5c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80b3 	beq.w	8005f5a <HCD_RXQLVL_IRQHandler+0x1b4>
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	332c      	adds	r3, #44	@ 0x2c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80a7 	beq.w	8005f5a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4613      	mov	r3, r2
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	3338      	adds	r3, #56	@ 0x38
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	18d1      	adds	r1, r2, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4613      	mov	r3, r2
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4403      	add	r3, r0
 8005e30:	3334      	adds	r3, #52	@ 0x34
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4299      	cmp	r1, r3
 8005e36:	f200 8083 	bhi.w	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	332c      	adds	r3, #44	@ 0x2c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	b292      	uxth	r2, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	f004 fd3d 	bl	800a8d4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	332c      	adds	r3, #44	@ 0x2c
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	18d1      	adds	r1, r2, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4613      	mov	r3, r2
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4403      	add	r3, r0
 8005e7e:	332c      	adds	r3, #44	@ 0x2c
 8005e80:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3338      	adds	r3, #56	@ 0x38
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	18d1      	adds	r1, r2, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4403      	add	r3, r0
 8005ea6:	3338      	adds	r3, #56	@ 0x38
 8005ea8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	0cdb      	lsrs	r3, r3, #19
 8005eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ebe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3328      	adds	r3, #40	@ 0x28
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d13f      	bne.n	8005f5a <HCD_RXQLVL_IRQHandler+0x1b4>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d03c      	beq.n	8005f5a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ef6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005efe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4613      	mov	r3, r2
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	333c      	adds	r3, #60	@ 0x3c
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f083 0301 	eor.w	r3, r3, #1
 8005f28:	b2d8      	uxtb	r0, r3
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	333c      	adds	r3, #60	@ 0x3c
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	701a      	strb	r2, [r3, #0]
      break;
 8005f3e:	e00c      	b.n	8005f5a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4613      	mov	r3, r2
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	334c      	adds	r3, #76	@ 0x4c
 8005f50:	2204      	movs	r2, #4
 8005f52:	701a      	strb	r2, [r3, #0]
      break;
 8005f54:	e001      	b.n	8005f5a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005f5a:	bf00      	nop
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	3728      	adds	r7, #40	@ 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d10b      	bne.n	8005fb4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d102      	bne.n	8005fac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f00a f9b6 	bl	8010318 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f043 0302 	orr.w	r3, r3, #2
 8005fb2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d132      	bne.n	8006024 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f043 0308 	orr.w	r3, r3, #8
 8005fc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d126      	bne.n	800601e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7a5b      	ldrb	r3, [r3, #9]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d113      	bne.n	8006000 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005fde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fe2:	d106      	bne.n	8005ff2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f004 fdf6 	bl	800abdc <USB_InitFSLSPClkSel>
 8005ff0:	e011      	b.n	8006016 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f004 fdef 	bl	800abdc <USB_InitFSLSPClkSel>
 8005ffe:	e00a      	b.n	8006016 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	79db      	ldrb	r3, [r3, #7]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d106      	bne.n	8006016 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800600e:	461a      	mov	r2, r3
 8006010:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006014:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f00a f9a8 	bl	801036c <HAL_HCD_PortEnabled_Callback>
 800601c:	e002      	b.n	8006024 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f00a f9b2 	bl	8010388 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b20      	cmp	r3, #32
 800602c:	d103      	bne.n	8006036 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f043 0320 	orr.w	r3, r3, #32
 8006034:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6013      	str	r3, [r2, #0]
}
 8006042:	bf00      	nop
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e12b      	b.n	80062b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb faba 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2224      	movs	r2, #36	@ 0x24
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800609e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060b0:	f000 ff82 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 80060b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4a81      	ldr	r2, [pc, #516]	@ (80062c0 <HAL_I2C_Init+0x274>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d807      	bhi.n	80060d0 <HAL_I2C_Init+0x84>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a80      	ldr	r2, [pc, #512]	@ (80062c4 <HAL_I2C_Init+0x278>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bf94      	ite	ls
 80060c8:	2301      	movls	r3, #1
 80060ca:	2300      	movhi	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e006      	b.n	80060de <HAL_I2C_Init+0x92>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a7d      	ldr	r2, [pc, #500]	@ (80062c8 <HAL_I2C_Init+0x27c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bf94      	ite	ls
 80060d8:	2301      	movls	r3, #1
 80060da:	2300      	movhi	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e0e7      	b.n	80062b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a78      	ldr	r2, [pc, #480]	@ (80062cc <HAL_I2C_Init+0x280>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	0c9b      	lsrs	r3, r3, #18
 80060f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	4a6a      	ldr	r2, [pc, #424]	@ (80062c0 <HAL_I2C_Init+0x274>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d802      	bhi.n	8006120 <HAL_I2C_Init+0xd4>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	3301      	adds	r3, #1
 800611e:	e009      	b.n	8006134 <HAL_I2C_Init+0xe8>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	4a69      	ldr	r2, [pc, #420]	@ (80062d0 <HAL_I2C_Init+0x284>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	099b      	lsrs	r3, r3, #6
 8006132:	3301      	adds	r3, #1
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	430b      	orrs	r3, r1
 800613a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006146:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	495c      	ldr	r1, [pc, #368]	@ (80062c0 <HAL_I2C_Init+0x274>)
 8006150:	428b      	cmp	r3, r1
 8006152:	d819      	bhi.n	8006188 <HAL_I2C_Init+0x13c>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1e59      	subs	r1, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006162:	1c59      	adds	r1, r3, #1
 8006164:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006168:	400b      	ands	r3, r1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_I2C_Init+0x138>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1e59      	subs	r1, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	fbb1 f3f3 	udiv	r3, r1, r3
 800617c:	3301      	adds	r3, #1
 800617e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006182:	e051      	b.n	8006228 <HAL_I2C_Init+0x1dc>
 8006184:	2304      	movs	r3, #4
 8006186:	e04f      	b.n	8006228 <HAL_I2C_Init+0x1dc>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d111      	bne.n	80061b4 <HAL_I2C_Init+0x168>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1e58      	subs	r0, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6859      	ldr	r1, [r3, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	440b      	add	r3, r1
 800619e:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e012      	b.n	80061da <HAL_I2C_Init+0x18e>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	1e58      	subs	r0, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	0099      	lsls	r1, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ca:	3301      	adds	r3, #1
 80061cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_I2C_Init+0x196>
 80061de:	2301      	movs	r3, #1
 80061e0:	e022      	b.n	8006228 <HAL_I2C_Init+0x1dc>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10e      	bne.n	8006208 <HAL_I2C_Init+0x1bc>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1e58      	subs	r0, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6859      	ldr	r1, [r3, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	440b      	add	r3, r1
 80061f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80061fc:	3301      	adds	r3, #1
 80061fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006206:	e00f      	b.n	8006228 <HAL_I2C_Init+0x1dc>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1e58      	subs	r0, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	0099      	lsls	r1, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	fbb0 f3f3 	udiv	r3, r0, r3
 800621e:	3301      	adds	r3, #1
 8006220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	6809      	ldr	r1, [r1, #0]
 800622c:	4313      	orrs	r3, r2
 800622e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006256:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6911      	ldr	r1, [r2, #16]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68d2      	ldr	r2, [r2, #12]
 8006262:	4311      	orrs	r1, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	430b      	orrs	r3, r1
 800626a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	000186a0 	.word	0x000186a0
 80062c4:	001e847f 	.word	0x001e847f
 80062c8:	003d08ff 	.word	0x003d08ff
 80062cc:	431bde83 	.word	0x431bde83
 80062d0:	10624dd3 	.word	0x10624dd3

080062d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e0bf      	b.n	8006466 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb f9f4 	bl	80016e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006316:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6999      	ldr	r1, [r3, #24]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800632c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6899      	ldr	r1, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b4a      	ldr	r3, [pc, #296]	@ (8006470 <HAL_LTDC_Init+0x19c>)
 8006348:	400b      	ands	r3, r1
 800634a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68d9      	ldr	r1, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b3e      	ldr	r3, [pc, #248]	@ (8006470 <HAL_LTDC_Init+0x19c>)
 8006376:	400b      	ands	r3, r1
 8006378:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68d9      	ldr	r1, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1a      	ldr	r2, [r3, #32]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6919      	ldr	r1, [r3, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b33      	ldr	r3, [pc, #204]	@ (8006470 <HAL_LTDC_Init+0x19c>)
 80063a4:	400b      	ands	r3, r1
 80063a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6919      	ldr	r1, [r3, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6959      	ldr	r1, [r3, #20]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4b27      	ldr	r3, [pc, #156]	@ (8006470 <HAL_LTDC_Init+0x19c>)
 80063d2:	400b      	ands	r3, r1
 80063d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6959      	ldr	r1, [r3, #20]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0206 	orr.w	r2, r2, #6
 8006442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	f000f800 	.word	0xf000f800

08006474 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d023      	beq.n	80064de <HAL_LTDC_IRQHandler+0x6a>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0204 	bic.w	r2, r2, #4
 80064ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2204      	movs	r2, #4
 80064b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064be:	f043 0201 	orr.w	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f86f 	bl	80065bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d023      	beq.n	8006530 <HAL_LTDC_IRQHandler+0xbc>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01e      	beq.n	8006530 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0202 	bic.w	r2, r2, #2
 8006500:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2202      	movs	r2, #2
 8006508:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006510:	f043 0202 	orr.w	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2204      	movs	r2, #4
 800651e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f846 	bl	80065bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01b      	beq.n	8006572 <HAL_LTDC_IRQHandler+0xfe>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d016      	beq.n	8006572 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2201      	movs	r2, #1
 800655a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f82f 	bl	80065d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <HAL_LTDC_IRQHandler+0x140>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0208 	bic.w	r2, r2, #8
 8006594:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2208      	movs	r2, #8
 800659c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f818 	bl	80065e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065f8:	b5b0      	push	{r4, r5, r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_LTDC_ConfigLayer+0x1a>
 800660e:	2302      	movs	r3, #2
 8006610:	e02c      	b.n	800666c <HAL_LTDC_ConfigLayer+0x74>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2134      	movs	r1, #52	@ 0x34
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	4413      	add	r3, r2
 800662e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800663a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800663e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f811 	bl	8006674 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2201      	movs	r2, #1
 8006658:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bdb0      	pop	{r4, r5, r7, pc}

08006674 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006674:	b480      	push	{r7}
 8006676:	b089      	sub	sp, #36	@ 0x24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006690:	4413      	add	r3, r2
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	01db      	lsls	r3, r3, #7
 80066a0:	4413      	add	r3, r2
 80066a2:	3384      	adds	r3, #132	@ 0x84
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	4611      	mov	r1, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	01d2      	lsls	r2, r2, #7
 80066b0:	440a      	add	r2, r1
 80066b2:	3284      	adds	r2, #132	@ 0x84
 80066b4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80066b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	01db      	lsls	r3, r3, #7
 80066d8:	440b      	add	r3, r1
 80066da:	3384      	adds	r3, #132	@ 0x84
 80066dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f2:	4413      	add	r3, r2
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	01db      	lsls	r3, r3, #7
 8006702:	4413      	add	r3, r2
 8006704:	3384      	adds	r3, #132	@ 0x84
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	4611      	mov	r1, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	01d2      	lsls	r2, r2, #7
 8006712:	440a      	add	r2, r1
 8006714:	3284      	adds	r2, #132	@ 0x84
 8006716:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800671a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800672a:	4413      	add	r3, r2
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	01db      	lsls	r3, r3, #7
 8006738:	440b      	add	r3, r1
 800673a:	3384      	adds	r3, #132	@ 0x84
 800673c:	4619      	mov	r1, r3
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	01db      	lsls	r3, r3, #7
 800674e:	4413      	add	r3, r2
 8006750:	3384      	adds	r3, #132	@ 0x84
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	4611      	mov	r1, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	01d2      	lsls	r2, r2, #7
 800675e:	440a      	add	r2, r1
 8006760:	3284      	adds	r2, #132	@ 0x84
 8006762:	f023 0307 	bic.w	r3, r3, #7
 8006766:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	01db      	lsls	r3, r3, #7
 8006772:	4413      	add	r3, r2
 8006774:	3384      	adds	r3, #132	@ 0x84
 8006776:	461a      	mov	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800678e:	041b      	lsls	r3, r3, #16
 8006790:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	01db      	lsls	r3, r3, #7
 80067a4:	4413      	add	r3, r2
 80067a6:	3384      	adds	r3, #132	@ 0x84
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	01db      	lsls	r3, r3, #7
 80067b4:	4413      	add	r3, r2
 80067b6:	3384      	adds	r3, #132	@ 0x84
 80067b8:	461a      	mov	r2, r3
 80067ba:	2300      	movs	r3, #0
 80067bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067c4:	461a      	mov	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	431a      	orrs	r2, r3
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	01db      	lsls	r3, r3, #7
 80067d8:	440b      	add	r3, r1
 80067da:	3384      	adds	r3, #132	@ 0x84
 80067dc:	4619      	mov	r1, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	01db      	lsls	r3, r3, #7
 80067ee:	4413      	add	r3, r2
 80067f0:	3384      	adds	r3, #132	@ 0x84
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	4611      	mov	r1, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	01d2      	lsls	r2, r2, #7
 80067fe:	440a      	add	r2, r1
 8006800:	3284      	adds	r2, #132	@ 0x84
 8006802:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006806:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	01db      	lsls	r3, r3, #7
 8006812:	4413      	add	r3, r2
 8006814:	3384      	adds	r3, #132	@ 0x84
 8006816:	461a      	mov	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	01db      	lsls	r3, r3, #7
 8006828:	4413      	add	r3, r2
 800682a:	3384      	adds	r3, #132	@ 0x84
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	4611      	mov	r1, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	01d2      	lsls	r2, r2, #7
 8006838:	440a      	add	r2, r1
 800683a:	3284      	adds	r2, #132	@ 0x84
 800683c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006840:	f023 0307 	bic.w	r3, r3, #7
 8006844:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	6809      	ldr	r1, [r1, #0]
 8006852:	4608      	mov	r0, r1
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	01c9      	lsls	r1, r1, #7
 8006858:	4401      	add	r1, r0
 800685a:	3184      	adds	r1, #132	@ 0x84
 800685c:	4313      	orrs	r3, r2
 800685e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	01db      	lsls	r3, r3, #7
 800686a:	4413      	add	r3, r2
 800686c:	3384      	adds	r3, #132	@ 0x84
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	01db      	lsls	r3, r3, #7
 800687a:	4413      	add	r3, r2
 800687c:	3384      	adds	r3, #132	@ 0x84
 800687e:	461a      	mov	r2, r3
 8006880:	2300      	movs	r3, #0
 8006882:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	01db      	lsls	r3, r3, #7
 800688e:	4413      	add	r3, r2
 8006890:	3384      	adds	r3, #132	@ 0x84
 8006892:	461a      	mov	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80068a2:	2304      	movs	r3, #4
 80068a4:	61fb      	str	r3, [r7, #28]
 80068a6:	e01b      	b.n	80068e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d102      	bne.n	80068b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80068b0:	2303      	movs	r3, #3
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e014      	b.n	80068e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d00b      	beq.n	80068d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d007      	beq.n	80068d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d003      	beq.n	80068d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068d2:	2b07      	cmp	r3, #7
 80068d4:	d102      	bne.n	80068dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80068d6:	2302      	movs	r3, #2
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	e001      	b.n	80068e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80068dc:	2301      	movs	r3, #1
 80068de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	01db      	lsls	r3, r3, #7
 80068ea:	4413      	add	r3, r2
 80068ec:	3384      	adds	r3, #132	@ 0x84
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	4611      	mov	r1, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	01d2      	lsls	r2, r2, #7
 80068fa:	440a      	add	r2, r1
 80068fc:	3284      	adds	r2, #132	@ 0x84
 80068fe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006902:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	1acb      	subs	r3, r1, r3
 800691a:	69f9      	ldr	r1, [r7, #28]
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	6809      	ldr	r1, [r1, #0]
 8006926:	4608      	mov	r0, r1
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	01c9      	lsls	r1, r1, #7
 800692c:	4401      	add	r1, r0
 800692e:	3184      	adds	r1, #132	@ 0x84
 8006930:	4313      	orrs	r3, r2
 8006932:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	01db      	lsls	r3, r3, #7
 800693e:	4413      	add	r3, r2
 8006940:	3384      	adds	r3, #132	@ 0x84
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	4611      	mov	r1, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	01d2      	lsls	r2, r2, #7
 800694e:	440a      	add	r2, r1
 8006950:	3284      	adds	r2, #132	@ 0x84
 8006952:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	01db      	lsls	r3, r3, #7
 8006966:	4413      	add	r3, r2
 8006968:	3384      	adds	r3, #132	@ 0x84
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	01db      	lsls	r3, r3, #7
 800697c:	4413      	add	r3, r2
 800697e:	3384      	adds	r3, #132	@ 0x84
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	4611      	mov	r1, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	01d2      	lsls	r2, r2, #7
 800698c:	440a      	add	r2, r1
 800698e:	3284      	adds	r2, #132	@ 0x84
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	6013      	str	r3, [r2, #0]
}
 8006996:	bf00      	nop
 8006998:	3724      	adds	r7, #36	@ 0x24
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069ae:	2300      	movs	r3, #0
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4b20      	ldr	r3, [pc, #128]	@ (8006a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80069b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80069be:	4b1d      	ldr	r3, [pc, #116]	@ (8006a34 <HAL_PWREx_EnableOverDrive+0x90>)
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80069ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006a38 <HAL_PWREx_EnableOverDrive+0x94>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069d0:	f7fb fb8c 	bl	80020ec <HAL_GetTick>
 80069d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80069d6:	e009      	b.n	80069ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069d8:	f7fb fb88 	bl	80020ec <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069e6:	d901      	bls.n	80069ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e01f      	b.n	8006a2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80069ec:	4b13      	ldr	r3, [pc, #76]	@ (8006a3c <HAL_PWREx_EnableOverDrive+0x98>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f8:	d1ee      	bne.n	80069d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80069fa:	4b11      	ldr	r3, [pc, #68]	@ (8006a40 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a00:	f7fb fb74 	bl	80020ec <HAL_GetTick>
 8006a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a06:	e009      	b.n	8006a1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a08:	f7fb fb70 	bl	80020ec <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a16:	d901      	bls.n	8006a1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e007      	b.n	8006a2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a1c:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a28:	d1ee      	bne.n	8006a08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40023800 	.word	0x40023800
 8006a38:	420e0040 	.word	0x420e0040
 8006a3c:	40007000 	.word	0x40007000
 8006a40:	420e0044 	.word	0x420e0044

08006a44 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a4c:	f7fb fb4e 	bl	80020ec <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e069      	b.n	8006b30 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fa fe61 	bl	8001738 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006a76:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f85e 	bl	8006b3c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	021a      	lsls	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2120      	movs	r1, #32
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f856 	bl	8006b58 <QSPI_WaitFlagStateUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d137      	bne.n	8006b26 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ac0:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6852      	ldr	r2, [r2, #4]
 8006ac8:	0611      	lsls	r1, r2, #24
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68d2      	ldr	r2, [r2, #12]
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	69d2      	ldr	r2, [r2, #28]
 8006ad4:	4311      	orrs	r1, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6a12      	ldr	r2, [r2, #32]
 8006ada:	4311      	orrs	r1, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	4b13      	ldr	r3, [pc, #76]	@ (8006b38 <HAL_QSPI_Init+0xf4>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6912      	ldr	r2, [r2, #16]
 8006af2:	0411      	lsls	r1, r2, #16
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6952      	ldr	r2, [r2, #20]
 8006af8:	4311      	orrs	r1, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6992      	ldr	r2, [r2, #24]
 8006afe:	4311      	orrs	r1, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	ffe0f8fe 	.word	0xffe0f8fe

08006b3c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b68:	e01a      	b.n	8006ba0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d016      	beq.n	8006ba0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b72:	f7fb fabb 	bl	80020ec <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d302      	bcc.n	8006b88 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10b      	bne.n	8006ba0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b94:	f043 0201 	orr.w	r2, r3, #1
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e00e      	b.n	8006bbe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	2300      	moveq	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1d6      	bne.n	8006b6a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0cc      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bdc:	4b68      	ldr	r3, [pc, #416]	@ (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d90c      	bls.n	8006c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bea:	4b65      	ldr	r3, [pc, #404]	@ (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf2:	4b63      	ldr	r3, [pc, #396]	@ (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0b8      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d020      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c1c:	4b59      	ldr	r3, [pc, #356]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4a58      	ldr	r2, [pc, #352]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c34:	4b53      	ldr	r3, [pc, #332]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4a52      	ldr	r2, [pc, #328]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c40:	4b50      	ldr	r3, [pc, #320]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	494d      	ldr	r1, [pc, #308]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d044      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d107      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	4b47      	ldr	r3, [pc, #284]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d119      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e07f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c86:	4b3f      	ldr	r3, [pc, #252]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e06f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c96:	4b3b      	ldr	r3, [pc, #236]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e067      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ca6:	4b37      	ldr	r3, [pc, #220]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 0203 	bic.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4934      	ldr	r1, [pc, #208]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb8:	f7fb fa18 	bl	80020ec <HAL_GetTick>
 8006cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc0:	f7fb fa14 	bl	80020ec <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e04f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 020c 	and.w	r2, r3, #12
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1eb      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b25      	ldr	r3, [pc, #148]	@ (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20c      	bcs.n	8006d10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b22      	ldr	r3, [pc, #136]	@ (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b20      	ldr	r3, [pc, #128]	@ (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e032      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d1c:	4b19      	ldr	r3, [pc, #100]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4916      	ldr	r1, [pc, #88]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d3a:	4b12      	ldr	r3, [pc, #72]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	490e      	ldr	r1, [pc, #56]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d4e:	f000 f821 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	490a      	ldr	r1, [pc, #40]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006d60:	5ccb      	ldrb	r3, [r1, r3]
 8006d62:	fa22 f303 	lsr.w	r3, r2, r3
 8006d66:	4a09      	ldr	r2, [pc, #36]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d6a:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa fff6 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023c00 	.word	0x40023c00
 8006d84:	40023800 	.word	0x40023800
 8006d88:	08010cd0 	.word	0x08010cd0
 8006d8c:	20000000 	.word	0x20000000
 8006d90:	20000004 	.word	0x20000004

08006d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d98:	b094      	sub	sp, #80	@ 0x50
 8006d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dac:	4b79      	ldr	r3, [pc, #484]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d00d      	beq.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	f200 80e1 	bhi.w	8006f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d003      	beq.n	8006dce <HAL_RCC_GetSysClockFreq+0x3a>
 8006dc6:	e0db      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dc8:	4b73      	ldr	r3, [pc, #460]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dcc:	e0db      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dce:	4b73      	ldr	r3, [pc, #460]	@ (8006f9c <HAL_RCC_GetSysClockFreq+0x208>)
 8006dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dd2:	e0d8      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ddc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dde:	4b6d      	ldr	r3, [pc, #436]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d063      	beq.n	8006eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dea:	4b6a      	ldr	r3, [pc, #424]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	099b      	lsrs	r3, r3, #6
 8006df0:	2200      	movs	r2, #0
 8006df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006df4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	f04f 0000 	mov.w	r0, #0
 8006e0e:	f04f 0100 	mov.w	r1, #0
 8006e12:	0159      	lsls	r1, r3, #5
 8006e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e18:	0150      	lsls	r0, r2, #5
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4621      	mov	r1, r4
 8006e20:	1a51      	subs	r1, r2, r1
 8006e22:	6139      	str	r1, [r7, #16]
 8006e24:	4629      	mov	r1, r5
 8006e26:	eb63 0301 	sbc.w	r3, r3, r1
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e38:	4659      	mov	r1, fp
 8006e3a:	018b      	lsls	r3, r1, #6
 8006e3c:	4651      	mov	r1, sl
 8006e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e42:	4651      	mov	r1, sl
 8006e44:	018a      	lsls	r2, r1, #6
 8006e46:	4651      	mov	r1, sl
 8006e48:	ebb2 0801 	subs.w	r8, r2, r1
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e66:	4690      	mov	r8, r2
 8006e68:	4699      	mov	r9, r3
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	eb18 0303 	adds.w	r3, r8, r3
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	462b      	mov	r3, r5
 8006e74:	eb49 0303 	adc.w	r3, r9, r3
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e86:	4629      	mov	r1, r5
 8006e88:	024b      	lsls	r3, r1, #9
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e90:	4621      	mov	r1, r4
 8006e92:	024a      	lsls	r2, r1, #9
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ea4:	f7f9 f9ae 	bl	8000204 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4613      	mov	r3, r2
 8006eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb0:	e058      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb2:	4b38      	ldr	r3, [pc, #224]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ec2:	623b      	str	r3, [r7, #32]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	f04f 0000 	mov.w	r0, #0
 8006ed4:	f04f 0100 	mov.w	r1, #0
 8006ed8:	0159      	lsls	r1, r3, #5
 8006eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ede:	0150      	lsls	r0, r2, #5
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006eea:	4649      	mov	r1, r9
 8006eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f04:	ebb2 040a 	subs.w	r4, r2, sl
 8006f08:	eb63 050b 	sbc.w	r5, r3, fp
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	00eb      	lsls	r3, r5, #3
 8006f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f1a:	00e2      	lsls	r2, r4, #3
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	461d      	mov	r5, r3
 8006f20:	4643      	mov	r3, r8
 8006f22:	18e3      	adds	r3, r4, r3
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	464b      	mov	r3, r9
 8006f28:	eb45 0303 	adc.w	r3, r5, r3
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	028b      	lsls	r3, r1, #10
 8006f3e:	4621      	mov	r1, r4
 8006f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f44:	4621      	mov	r1, r4
 8006f46:	028a      	lsls	r2, r1, #10
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f4e:	2200      	movs	r2, #0
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	61fa      	str	r2, [r7, #28]
 8006f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f58:	f7f9 f954 	bl	8000204 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4613      	mov	r3, r2
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f64:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	3301      	adds	r3, #1
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f7e:	e002      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f80:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3750      	adds	r7, #80	@ 0x50
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800
 8006f98:	00f42400 	.word	0x00f42400
 8006f9c:	007a1200 	.word	0x007a1200

08006fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	@ (8006fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000000 	.word	0x20000000

08006fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fbc:	f7ff fff0 	bl	8006fa0 <HAL_RCC_GetHCLKFreq>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b05      	ldr	r3, [pc, #20]	@ (8006fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	0a9b      	lsrs	r3, r3, #10
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	4903      	ldr	r1, [pc, #12]	@ (8006fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fce:	5ccb      	ldrb	r3, [r1, r3]
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	08010ce0 	.word	0x08010ce0

08006fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fe4:	f7ff ffdc 	bl	8006fa0 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b05      	ldr	r3, [pc, #20]	@ (8007000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	0b5b      	lsrs	r3, r3, #13
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4903      	ldr	r1, [pc, #12]	@ (8007004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	08010ce0 	.word	0x08010ce0

08007008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	220f      	movs	r2, #15
 8007016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007018:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <HAL_RCC_GetClockConfig+0x5c>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 0203 	and.w	r2, r3, #3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007024:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <HAL_RCC_GetClockConfig+0x5c>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <HAL_RCC_GetClockConfig+0x5c>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800703c:	4b09      	ldr	r3, [pc, #36]	@ (8007064 <HAL_RCC_GetClockConfig+0x5c>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	08db      	lsrs	r3, r3, #3
 8007042:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800704a:	4b07      	ldr	r3, [pc, #28]	@ (8007068 <HAL_RCC_GetClockConfig+0x60>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	601a      	str	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40023800 	.word	0x40023800
 8007068:	40023c00 	.word	0x40023c00

0800706c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007094:	4b66      	ldr	r3, [pc, #408]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800709a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a2:	4963      	ldr	r1, [pc, #396]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80070b6:	4b5e      	ldr	r3, [pc, #376]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c4:	495a      	ldr	r1, [pc, #360]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d075      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070f0:	4b50      	ldr	r3, [pc, #320]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070f6:	f7fa fff9 	bl	80020ec <HAL_GetTick>
 80070fa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070fc:	e008      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070fe:	f7fa fff5 	bl	80020ec <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e1dc      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007110:	4b47      	ldr	r3, [pc, #284]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f0      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	019a      	lsls	r2, r3, #6
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	071b      	lsls	r3, r3, #28
 8007134:	493e      	ldr	r1, [pc, #248]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01f      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007148:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800714a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714e:	0f1b      	lsrs	r3, r3, #28
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	019a      	lsls	r2, r3, #6
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	061b      	lsls	r3, r3, #24
 8007162:	431a      	orrs	r2, r3
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	071b      	lsls	r3, r3, #28
 8007168:	4931      	ldr	r1, [pc, #196]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007170:	4b2f      	ldr	r3, [pc, #188]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007176:	f023 021f 	bic.w	r2, r3, #31
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	3b01      	subs	r3, #1
 8007180:	492b      	ldr	r1, [pc, #172]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00d      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	019a      	lsls	r2, r3, #6
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	071b      	lsls	r3, r3, #28
 80071a8:	4921      	ldr	r1, [pc, #132]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071b0:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071b6:	f7fa ff99 	bl	80020ec <HAL_GetTick>
 80071ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071bc:	e008      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071be:	f7fa ff95 	bl	80020ec <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e17c      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071d0:	4b17      	ldr	r3, [pc, #92]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d112      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10c      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80ce 	beq.w	800739e <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800720a:	f040 80c8 	bne.w	800739e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800720e:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007214:	f7fa ff6a 	bl	80020ec <HAL_GetTick>
 8007218:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800721a:	e00f      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800721c:	f7fa ff66 	bl	80020ec <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d908      	bls.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e14d      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800722e:	bf00      	nop
 8007230:	40023800 	.word	0x40023800
 8007234:	42470068 	.word	0x42470068
 8007238:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800723c:	4ba5      	ldr	r3, [pc, #660]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007248:	d0e8      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d02e      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007256:	4b9f      	ldr	r3, [pc, #636]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	3301      	adds	r3, #1
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007268:	4b9a      	ldr	r3, [pc, #616]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726e:	0f1b      	lsrs	r3, r3, #28
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	019a      	lsls	r2, r3, #6
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	3b01      	subs	r3, #1
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	071b      	lsls	r3, r3, #28
 8007292:	4990      	ldr	r1, [pc, #576]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800729a:	4b8e      	ldr	r3, [pc, #568]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800729c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a8:	3b01      	subs	r3, #1
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	4989      	ldr	r1, [pc, #548]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02c      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80072c0:	4b84      	ldr	r3, [pc, #528]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c6:	0c1b      	lsrs	r3, r3, #16
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	3301      	adds	r3, #1
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072d2:	4b80      	ldr	r3, [pc, #512]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	0e1b      	lsrs	r3, r3, #24
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	019a      	lsls	r2, r3, #6
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	3b01      	subs	r3, #1
 80072ec:	041b      	lsls	r3, r3, #16
 80072ee:	431a      	orrs	r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	061b      	lsls	r3, r3, #24
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	071b      	lsls	r3, r3, #28
 80072fc:	4975      	ldr	r1, [pc, #468]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007304:	4b73      	ldr	r3, [pc, #460]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800730a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	4970      	ldr	r1, [pc, #448]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d024      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800732a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732e:	d11f      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007330:	4b68      	ldr	r3, [pc, #416]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007336:	0e1b      	lsrs	r3, r3, #24
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800733e:	4b65      	ldr	r3, [pc, #404]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007344:	0f1b      	lsrs	r3, r3, #28
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	019a      	lsls	r2, r3, #6
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	3b01      	subs	r3, #1
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	431a      	orrs	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	061b      	lsls	r3, r3, #24
 8007362:	431a      	orrs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	071b      	lsls	r3, r3, #28
 8007368:	495a      	ldr	r1, [pc, #360]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007370:	4b59      	ldr	r3, [pc, #356]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007376:	f7fa feb9 	bl	80020ec <HAL_GetTick>
 800737a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800737c:	e008      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800737e:	f7fa feb5 	bl	80020ec <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e09c      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007390:	4b50      	ldr	r3, [pc, #320]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800739c:	d1ef      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8083 	beq.w	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073ac:	2300      	movs	r3, #0
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	4b48      	ldr	r3, [pc, #288]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b4:	4a47      	ldr	r2, [pc, #284]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80073bc:	4b45      	ldr	r3, [pc, #276]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073c8:	4b44      	ldr	r3, [pc, #272]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a43      	ldr	r2, [pc, #268]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80073ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073d4:	f7fa fe8a 	bl	80020ec <HAL_GetTick>
 80073d8:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073da:	e008      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073dc:	f7fa fe86 	bl	80020ec <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d901      	bls.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e06d      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073ee:	4b3b      	ldr	r3, [pc, #236]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0f0      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073fa:	4b36      	ldr	r3, [pc, #216]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007402:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d02f      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	429a      	cmp	r2, r3
 8007416:	d028      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007418:	4b2e      	ldr	r3, [pc, #184]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007420:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007422:	4b2f      	ldr	r3, [pc, #188]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007424:	2201      	movs	r2, #1
 8007426:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007428:	4b2d      	ldr	r3, [pc, #180]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800742e:	4a29      	ldr	r2, [pc, #164]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007434:	4b27      	ldr	r3, [pc, #156]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b01      	cmp	r3, #1
 800743e:	d114      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007440:	f7fa fe54 	bl	80020ec <HAL_GetTick>
 8007444:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007446:	e00a      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007448:	f7fa fe50 	bl	80020ec <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e035      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800745e:	4b1d      	ldr	r3, [pc, #116]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0ee      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007476:	d10d      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007478:	4b16      	ldr	r3, [pc, #88]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800748c:	4911      	ldr	r1, [pc, #68]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
 8007492:	e005      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007494:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4a0e      	ldr	r2, [pc, #56]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800749a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800749e:	6093      	str	r3, [r2, #8]
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ac:	4909      	ldr	r1, [pc, #36]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80074c4:	4b07      	ldr	r3, [pc, #28]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80074c6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	42470070 	.word	0x42470070
 80074dc:	40007000 	.word	0x40007000
 80074e0:	42470e40 	.word	0x42470e40
 80074e4:	424711e0 	.word	0x424711e0

080074e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e273      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d075      	beq.n	80075f2 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007506:	4b88      	ldr	r3, [pc, #544]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
 800750e:	2b04      	cmp	r3, #4
 8007510:	d00c      	beq.n	800752c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007512:	4b85      	ldr	r3, [pc, #532]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 030c 	and.w	r3, r3, #12
        || \
 800751a:	2b08      	cmp	r3, #8
 800751c:	d112      	bne.n	8007544 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800751e:	4b82      	ldr	r3, [pc, #520]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800752a:	d10b      	bne.n	8007544 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800752c:	4b7e      	ldr	r3, [pc, #504]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05b      	beq.n	80075f0 <HAL_RCC_OscConfig+0x108>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d157      	bne.n	80075f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e24e      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800754c:	d106      	bne.n	800755c <HAL_RCC_OscConfig+0x74>
 800754e:	4b76      	ldr	r3, [pc, #472]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a75      	ldr	r2, [pc, #468]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e01d      	b.n	8007598 <HAL_RCC_OscConfig+0xb0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007564:	d10c      	bne.n	8007580 <HAL_RCC_OscConfig+0x98>
 8007566:	4b70      	ldr	r3, [pc, #448]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a6f      	ldr	r2, [pc, #444]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800756c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4b6d      	ldr	r3, [pc, #436]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a6c      	ldr	r2, [pc, #432]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e00b      	b.n	8007598 <HAL_RCC_OscConfig+0xb0>
 8007580:	4b69      	ldr	r3, [pc, #420]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a68      	ldr	r2, [pc, #416]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	4b66      	ldr	r3, [pc, #408]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a65      	ldr	r2, [pc, #404]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d013      	beq.n	80075c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fa fda4 	bl	80020ec <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a8:	f7fa fda0 	bl	80020ec <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b64      	cmp	r3, #100	@ 0x64
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e213      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f0      	beq.n	80075a8 <HAL_RCC_OscConfig+0xc0>
 80075c6:	e014      	b.n	80075f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fa fd90 	bl	80020ec <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d0:	f7fa fd8c 	bl	80020ec <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b64      	cmp	r3, #100	@ 0x64
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e1ff      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075e2:	4b51      	ldr	r3, [pc, #324]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f0      	bne.n	80075d0 <HAL_RCC_OscConfig+0xe8>
 80075ee:	e000      	b.n	80075f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d063      	beq.n	80076c6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 030c 	and.w	r3, r3, #12
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800760a:	4b47      	ldr	r3, [pc, #284]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007612:	2b08      	cmp	r3, #8
 8007614:	d11c      	bne.n	8007650 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007616:	4b44      	ldr	r3, [pc, #272]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d116      	bne.n	8007650 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007622:	4b41      	ldr	r3, [pc, #260]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <HAL_RCC_OscConfig+0x152>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e1d3      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763a:	4b3b      	ldr	r3, [pc, #236]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4937      	ldr	r1, [pc, #220]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800764a:	4313      	orrs	r3, r2
 800764c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800764e:	e03a      	b.n	80076c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007658:	4b34      	ldr	r3, [pc, #208]	@ (800772c <HAL_RCC_OscConfig+0x244>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fa fd45 	bl	80020ec <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007666:	f7fa fd41 	bl	80020ec <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e1b4      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007678:	4b2b      	ldr	r3, [pc, #172]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007684:	4b28      	ldr	r3, [pc, #160]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4925      	ldr	r1, [pc, #148]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 8007694:	4313      	orrs	r3, r2
 8007696:	600b      	str	r3, [r1, #0]
 8007698:	e015      	b.n	80076c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800769a:	4b24      	ldr	r3, [pc, #144]	@ (800772c <HAL_RCC_OscConfig+0x244>)
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a0:	f7fa fd24 	bl	80020ec <HAL_GetTick>
 80076a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a8:	f7fa fd20 	bl	80020ec <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e193      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f0      	bne.n	80076a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d036      	beq.n	8007740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d016      	beq.n	8007708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076da:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <HAL_RCC_OscConfig+0x248>)
 80076dc:	2201      	movs	r2, #1
 80076de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e0:	f7fa fd04 	bl	80020ec <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e8:	f7fa fd00 	bl	80020ec <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e173      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <HAL_RCC_OscConfig+0x240>)
 80076fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCC_OscConfig+0x200>
 8007706:	e01b      	b.n	8007740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007708:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <HAL_RCC_OscConfig+0x248>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fa fced 	bl	80020ec <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007714:	e00e      	b.n	8007734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7fa fce9 	bl	80020ec <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d907      	bls.n	8007734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e15c      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
 8007728:	40023800 	.word	0x40023800
 800772c:	42470000 	.word	0x42470000
 8007730:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007734:	4b8a      	ldr	r3, [pc, #552]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1ea      	bne.n	8007716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8097 	beq.w	800787c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007752:	4b83      	ldr	r3, [pc, #524]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10f      	bne.n	800777e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	4b7f      	ldr	r3, [pc, #508]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	4a7e      	ldr	r2, [pc, #504]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800776c:	6413      	str	r3, [r2, #64]	@ 0x40
 800776e:	4b7c      	ldr	r3, [pc, #496]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800777e:	4b79      	ldr	r3, [pc, #484]	@ (8007964 <HAL_RCC_OscConfig+0x47c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d118      	bne.n	80077bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800778a:	4b76      	ldr	r3, [pc, #472]	@ (8007964 <HAL_RCC_OscConfig+0x47c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a75      	ldr	r2, [pc, #468]	@ (8007964 <HAL_RCC_OscConfig+0x47c>)
 8007790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007796:	f7fa fca9 	bl	80020ec <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800779e:	f7fa fca5 	bl	80020ec <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e118      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007964 <HAL_RCC_OscConfig+0x47c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d106      	bne.n	80077d2 <HAL_RCC_OscConfig+0x2ea>
 80077c4:	4b66      	ldr	r3, [pc, #408]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c8:	4a65      	ldr	r2, [pc, #404]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d0:	e01c      	b.n	800780c <HAL_RCC_OscConfig+0x324>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCC_OscConfig+0x30c>
 80077da:	4b61      	ldr	r3, [pc, #388]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077de:	4a60      	ldr	r2, [pc, #384]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077e0:	f043 0304 	orr.w	r3, r3, #4
 80077e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ea:	4a5d      	ldr	r2, [pc, #372]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f2:	e00b      	b.n	800780c <HAL_RCC_OscConfig+0x324>
 80077f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f8:	4a59      	ldr	r2, [pc, #356]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007800:	4b57      	ldr	r3, [pc, #348]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007804:	4a56      	ldr	r2, [pc, #344]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007806:	f023 0304 	bic.w	r3, r3, #4
 800780a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d015      	beq.n	8007840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007814:	f7fa fc6a 	bl	80020ec <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800781a:	e00a      	b.n	8007832 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800781c:	f7fa fc66 	bl	80020ec <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782a:	4293      	cmp	r3, r2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e0d7      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007832:	4b4b      	ldr	r3, [pc, #300]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0ee      	beq.n	800781c <HAL_RCC_OscConfig+0x334>
 800783e:	e014      	b.n	800786a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007840:	f7fa fc54 	bl	80020ec <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007846:	e00a      	b.n	800785e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007848:	f7fa fc50 	bl	80020ec <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007856:	4293      	cmp	r3, r2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e0c1      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785e:	4b40      	ldr	r3, [pc, #256]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1ee      	bne.n	8007848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d105      	bne.n	800787c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007870:	4b3b      	ldr	r3, [pc, #236]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007874:	4a3a      	ldr	r2, [pc, #232]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800787a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80ad 	beq.w	80079e0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007886:	4b36      	ldr	r3, [pc, #216]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 030c 	and.w	r3, r3, #12
 800788e:	2b08      	cmp	r3, #8
 8007890:	d060      	beq.n	8007954 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d145      	bne.n	8007926 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789a:	4b33      	ldr	r3, [pc, #204]	@ (8007968 <HAL_RCC_OscConfig+0x480>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a0:	f7fa fc24 	bl	80020ec <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a8:	f7fa fc20 	bl	80020ec <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e093      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ba:	4b29      	ldr	r3, [pc, #164]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f0      	bne.n	80078a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	019b      	lsls	r3, r3, #6
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	3b01      	subs	r3, #1
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	061b      	lsls	r3, r3, #24
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f0:	071b      	lsls	r3, r3, #28
 80078f2:	491b      	ldr	r1, [pc, #108]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007968 <HAL_RCC_OscConfig+0x480>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fe:	f7fa fbf5 	bl	80020ec <HAL_GetTick>
 8007902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007906:	f7fa fbf1 	bl	80020ec <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e064      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007918:	4b11      	ldr	r3, [pc, #68]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0f0      	beq.n	8007906 <HAL_RCC_OscConfig+0x41e>
 8007924:	e05c      	b.n	80079e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007926:	4b10      	ldr	r3, [pc, #64]	@ (8007968 <HAL_RCC_OscConfig+0x480>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792c:	f7fa fbde 	bl	80020ec <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007934:	f7fa fbda 	bl	80020ec <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e04d      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007946:	4b06      	ldr	r3, [pc, #24]	@ (8007960 <HAL_RCC_OscConfig+0x478>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0x44c>
 8007952:	e045      	b.n	80079e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d107      	bne.n	800796c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e040      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
 8007960:	40023800 	.word	0x40023800
 8007964:	40007000 	.word	0x40007000
 8007968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800796c:	4b1f      	ldr	r3, [pc, #124]	@ (80079ec <HAL_RCC_OscConfig+0x504>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d030      	beq.n	80079dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007984:	429a      	cmp	r2, r3
 8007986:	d129      	bne.n	80079dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d122      	bne.n	80079dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800799c:	4013      	ands	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d119      	bne.n	80079dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	3b01      	subs	r3, #1
 80079b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d10f      	bne.n	80079dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d107      	bne.n	80079dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d001      	beq.n	80079e0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40023800 	.word	0x40023800

080079f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e10c      	b.n	8007c2c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fa f93a 	bl	8001ca0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f903 	bl	8007c40 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f938 	bl	8007cb0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d030      	beq.n	8007aaa <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f957 	bl	8007cfc <SAI_GetInputClock>
 8007a4e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	025b      	lsls	r3, r3, #9
 8007a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a66:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a72      	ldr	r2, [pc, #456]	@ (8007c34 <HAL_SAI_Init+0x244>)
 8007a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a70:	08da      	lsrs	r2, r3, #3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	4b6e      	ldr	r3, [pc, #440]	@ (8007c34 <HAL_SAI_Init+0x244>)
 8007a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a7e:	08da      	lsrs	r2, r3, #3
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	1aca      	subs	r2, r1, r3
 8007a8a:	2a08      	cmp	r2, #8
 8007a8c:	d904      	bls.n	8007a98 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d104      	bne.n	8007aaa <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	085a      	lsrs	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_SAI_Init+0xca>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d109      	bne.n	8007ace <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_SAI_Init+0xd6>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e001      	b.n	8007aca <HAL_SAI_Init+0xda>
 8007ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e008      	b.n	8007ae0 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d102      	bne.n	8007adc <HAL_SAI_Init+0xec>
 8007ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ada:	e000      	b.n	8007ade <HAL_SAI_Init+0xee>
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d811      	bhi.n	8007b0c <HAL_SAI_Init+0x11c>
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d20b      	bcs.n	8007b04 <HAL_SAI_Init+0x114>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SAI_Init+0x106>
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d003      	beq.n	8007afc <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007af4:	e00a      	b.n	8007b0c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
    break;
 8007afa:	e008      	b.n	8007b0e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b00:	613b      	str	r3, [r7, #16]
    break;
 8007b02:	e004      	b.n	8007b0e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b08:	613b      	str	r3, [r7, #16]
    break;
 8007b0a:	e000      	b.n	8007b0e <HAL_SAI_Init+0x11e>
      break;
 8007b0c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b47      	ldr	r3, [pc, #284]	@ (8007c38 <HAL_SAI_Init+0x248>)
 8007b1a:	400b      	ands	r3, r1
 8007b1c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007b46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	051b      	lsls	r3, r3, #20
 8007b5a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007b72:	f023 030f 	bic.w	r3, r3, #15
 8007b76:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6859      	ldr	r1, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6899      	ldr	r1, [r3, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	4b26      	ldr	r3, [pc, #152]	@ (8007c3c <HAL_SAI_Init+0x24c>)
 8007ba2:	400b      	ands	r3, r1
 8007ba4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6899      	ldr	r1, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007bb6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007bbc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007bc2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007bcc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68d9      	ldr	r1, [r3, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007be4:	400b      	ands	r3, r1
 8007be6:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68d9      	ldr	r1, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bfc:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007bfe:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c04:	3b01      	subs	r3, #1
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	cccccccd 	.word	0xcccccccd
 8007c38:	ff05c010 	.word	0xff05c010
 8007c3c:	fff88000 	.word	0xfff88000

08007c40 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c48:	4b17      	ldr	r3, [pc, #92]	@ (8007ca8 <SAI_Disable+0x68>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a17      	ldr	r2, [pc, #92]	@ (8007cac <SAI_Disable+0x6c>)
 8007c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c52:	0b1b      	lsrs	r3, r3, #12
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c6a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	1e5a      	subs	r2, r3, #1
 8007c70:	60fa      	str	r2, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	72fb      	strb	r3, [r7, #11]
      break;
 8007c8a:	e006      	b.n	8007c9a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e8      	bne.n	8007c6c <SAI_Disable+0x2c>

  return status;
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	20000000 	.word	0x20000000
 8007cac:	95cbec1b 	.word	0x95cbec1b

08007cb0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d00c      	beq.n	8007cda <SAI_BlockSynchroConfig+0x2a>
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d80d      	bhi.n	8007ce0 <SAI_BlockSynchroConfig+0x30>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <SAI_BlockSynchroConfig+0x1e>
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d003      	beq.n	8007cd4 <SAI_BlockSynchroConfig+0x24>
 8007ccc:	e008      	b.n	8007ce0 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
      break;
 8007cd2:	e008      	b.n	8007ce6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	60fb      	str	r3, [r7, #12]
      break;
 8007cd8:	e005      	b.n	8007ce6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007cda:	2320      	movs	r3, #32
 8007cdc:	60fb      	str	r3, [r7, #12]
      break;
 8007cde:	e002      	b.n	8007ce6 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
      break;
 8007ce4:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007ce6:	4a04      	ldr	r2, [pc, #16]	@ (8007cf8 <SAI_BlockSynchroConfig+0x48>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	40015800 	.word	0x40015800

08007cfc <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a46      	ldr	r2, [pc, #280]	@ (8007e30 <SAI_GetInputClock+0x134>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10b      	bne.n	8007d32 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007d1a:	4b46      	ldr	r3, [pc, #280]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	4942      	ldr	r1, [pc, #264]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007d30:	e00b      	b.n	8007d4a <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007d32:	4b40      	ldr	r3, [pc, #256]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	493c      	ldr	r1, [pc, #240]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d108      	bne.n	8007d68 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d56:	4b37      	ldr	r3, [pc, #220]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d5e:	4a36      	ldr	r2, [pc, #216]	@ (8007e38 <SAI_GetInputClock+0x13c>)
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	e007      	b.n	8007d78 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d68:	4b32      	ldr	r3, [pc, #200]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d70:	4a32      	ldr	r2, [pc, #200]	@ (8007e3c <SAI_GetInputClock+0x140>)
 8007d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d76:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d121      	bne.n	8007dc4 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007d80:	4b2c      	ldr	r3, [pc, #176]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d86:	0e1b      	lsrs	r3, r3, #24
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007d8e:	4b29      	ldr	r3, [pc, #164]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d94:	099b      	lsrs	r3, r3, #6
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	fb03 f202 	mul.w	r2, r3, r2
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da6:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007da8:	4b22      	ldr	r3, [pc, #136]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e02d      	b.n	8007e20 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dcc:	d120      	bne.n	8007e10 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007dce:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd4:	0e1b      	lsrs	r3, r3, #24
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007ddc:	4b15      	ldr	r3, [pc, #84]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de2:	099b      	lsrs	r3, r3, #6
 8007de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	fb03 f202 	mul.w	r2, r3, r2
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007df6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	e007      	b.n	8007e20 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007e10:	4b08      	ldr	r3, [pc, #32]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4a07      	ldr	r2, [pc, #28]	@ (8007e34 <SAI_GetInputClock+0x138>)
 8007e16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e1a:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007e1c:	4b08      	ldr	r3, [pc, #32]	@ (8007e40 <SAI_GetInputClock+0x144>)
 8007e1e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007e20:	697b      	ldr	r3, [r7, #20]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40015804 	.word	0x40015804
 8007e34:	40023800 	.word	0x40023800
 8007e38:	00f42400 	.word	0x00f42400
 8007e3c:	007a1200 	.word	0x007a1200
 8007e40:	00bb8000 	.word	0x00bb8000

08007e44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e022      	b.n	8007e9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d105      	bne.n	8007e6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7f9 fcdf 	bl	800182c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2203      	movs	r2, #3
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f814 	bl	8007ea4 <HAL_SD_InitCard>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e00a      	b.n	8007e9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ea4:	b5b0      	push	{r4, r5, r7, lr}
 8007ea6:	b08e      	sub	sp, #56	@ 0x38
 8007ea8:	af04      	add	r7, sp, #16
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007ec0:	2376      	movs	r3, #118	@ 0x76
 8007ec2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681d      	ldr	r5, [r3, #0]
 8007ec8:	466c      	mov	r4, sp
 8007eca:	f107 0314 	add.w	r3, r7, #20
 8007ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ed2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ed6:	f107 0308 	add.w	r3, r7, #8
 8007eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007edc:	4628      	mov	r0, r5
 8007ede:	f001 fe75 	bl	8009bcc <SDIO_Init>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e04f      	b.n	8007f94 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007ef4:	4b29      	ldr	r3, [pc, #164]	@ (8007f9c <HAL_SD_InitCard+0xf8>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fe8f 	bl	8009c22 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007f04:	4b25      	ldr	r3, [pc, #148]	@ (8007f9c <HAL_SD_InitCard+0xf8>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007f0a:	2002      	movs	r0, #2
 8007f0c:	f7fa f8fa 	bl	8002104 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fd71 	bl	80089f8 <SD_PowerON>
 8007f16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e02e      	b.n	8007f94 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fc90 	bl	800885c <SD_InitCard>
 8007f3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e01b      	b.n	8007f94 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 feee 	bl	8009d46 <SDMMC_CmdBlockLength>
 8007f6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00f      	beq.n	8007f92 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a0a      	ldr	r2, [pc, #40]	@ (8007fa0 <HAL_SD_InitCard+0xfc>)
 8007f78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e000      	b.n	8007f94 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3728      	adds	r7, #40	@ 0x28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9c:	422580a0 	.word	0x422580a0
 8007fa0:	004005ff 	.word	0x004005ff

08007fa4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08c      	sub	sp, #48	@ 0x30
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d107      	bne.n	8007fcc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e0be      	b.n	800814a <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f040 80b7 	bne.w	8008148 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d907      	bls.n	8007ffe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e0a5      	b.n	800814a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2203      	movs	r2, #3
 8008002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800801c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	4a4c      	ldr	r2, [pc, #304]	@ (8008154 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8008024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802a:	4a4b      	ldr	r2, [pc, #300]	@ (8008158 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800802c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008032:	2200      	movs	r2, #0
 8008034:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	2200      	movs	r2, #0
 800803c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3380      	adds	r3, #128	@ 0x80
 8008064:	4619      	mov	r1, r3
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	025b      	lsls	r3, r3, #9
 800806c:	089b      	lsrs	r3, r3, #2
 800806e:	f7fa fa19 	bl	80024a4 <HAL_DMA_Start_IT>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d017      	beq.n	80080a8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008086:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a33      	ldr	r2, [pc, #204]	@ (800815c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008094:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e050      	b.n	800814a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80080a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008160 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d002      	beq.n	80080bc <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	025b      	lsls	r3, r3, #9
 80080ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080bc:	f04f 33ff 	mov.w	r3, #4294967295
 80080c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	025b      	lsls	r3, r3, #9
 80080c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80080c8:	2390      	movs	r3, #144	@ 0x90
 80080ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80080cc:	2302      	movs	r3, #2
 80080ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f107 0210 	add.w	r2, r7, #16
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fe03 	bl	8009cee <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d90a      	bls.n	8008104 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2282      	movs	r2, #130	@ 0x82
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fe67 	bl	8009dce <SDMMC_CmdReadMultiBlock>
 8008100:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008102:	e009      	b.n	8008118 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2281      	movs	r2, #129	@ 0x81
 8008108:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008110:	4618      	mov	r0, r3
 8008112:	f001 fe3a 	bl	8009d8a <SDMMC_CmdReadSingleBlock>
 8008116:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d012      	beq.n	8008144 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a0e      	ldr	r2, [pc, #56]	@ (800815c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	431a      	orrs	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e002      	b.n	800814a <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3730      	adds	r7, #48	@ 0x30
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	08008747 	.word	0x08008747
 8008158:	080087b9 	.word	0x080087b9
 800815c:	004005ff 	.word	0x004005ff
 8008160:	4225858c 	.word	0x4225858c

08008164 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08c      	sub	sp, #48	@ 0x30
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d107      	bne.n	800818c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008180:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0c1      	b.n	8008310 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	f040 80ba 	bne.w	800830e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	441a      	add	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d907      	bls.n	80081be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e0a8      	b.n	8008310 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2203      	movs	r2, #3
 80081c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 021a 	orr.w	r2, r2, #26
 80081dc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e2:	4a4d      	ldr	r2, [pc, #308]	@ (8008318 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80081e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ea:	4a4c      	ldr	r2, [pc, #304]	@ (800831c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80081ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f2:	2200      	movs	r2, #0
 80081f4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d002      	beq.n	8008204 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	025b      	lsls	r3, r3, #9
 8008202:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d90a      	bls.n	8008220 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22a0      	movs	r2, #160	@ 0xa0
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008216:	4618      	mov	r0, r3
 8008218:	f001 fe1d 	bl	8009e56 <SDMMC_CmdWriteMultiBlock>
 800821c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800821e:	e009      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2290      	movs	r2, #144	@ 0x90
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fdf0 	bl	8009e12 <SDMMC_CmdWriteSingleBlock>
 8008232:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d012      	beq.n	8008260 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a38      	ldr	r2, [pc, #224]	@ (8008320 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008240:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	431a      	orrs	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e057      	b.n	8008310 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008260:	4b30      	ldr	r3, [pc, #192]	@ (8008324 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008262:	2201      	movs	r2, #1
 8008264:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800826a:	2240      	movs	r2, #64	@ 0x40
 800826c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3380      	adds	r3, #128	@ 0x80
 8008296:	461a      	mov	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	025b      	lsls	r3, r3, #9
 800829c:	089b      	lsrs	r3, r3, #2
 800829e:	f7fa f901 	bl	80024a4 <HAL_DMA_Start_IT>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01a      	beq.n	80082de <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 021a 	bic.w	r2, r2, #26
 80082b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a18      	ldr	r2, [pc, #96]	@ (8008320 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80082be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e018      	b.n	8008310 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	025b      	lsls	r3, r3, #9
 80082e8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80082ea:	2390      	movs	r3, #144	@ 0x90
 80082ec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80082f6:	2301      	movs	r3, #1
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f107 0210 	add.w	r2, r7, #16
 8008302:	4611      	mov	r1, r2
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fcf2 	bl	8009cee <SDIO_ConfigData>

      return HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	e000      	b.n	8008310 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800830e:	2302      	movs	r3, #2
  }
}
 8008310:	4618      	mov	r0, r3
 8008312:	3730      	adds	r7, #48	@ 0x30
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	0800871d 	.word	0x0800871d
 800831c:	080087b9 	.word	0x080087b9
 8008320:	004005ff 	.word	0x004005ff
 8008324:	4225858c 	.word	0x4225858c

08008328 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800834a:	0f9b      	lsrs	r3, r3, #30
 800834c:	b2da      	uxtb	r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008356:	0e9b      	lsrs	r3, r3, #26
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	b2da      	uxtb	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008368:	0e1b      	lsrs	r3, r3, #24
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	b2da      	uxtb	r2, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837a:	0c1b      	lsrs	r3, r3, #16
 800837c:	b2da      	uxtb	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	b2da      	uxtb	r2, r3
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008392:	b2da      	uxtb	r2, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800839c:	0d1b      	lsrs	r3, r3, #20
 800839e:	b29a      	uxth	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ba:	0bdb      	lsrs	r3, r3, #15
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083cc:	0b9b      	lsrs	r3, r3, #14
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083de:	0b5b      	lsrs	r3, r3, #13
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083f0:	0b1b      	lsrs	r3, r3, #12
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008408:	2b00      	cmp	r3, #0
 800840a:	d163      	bne.n	80084d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008410:	009a      	lsls	r2, r3, #2
 8008412:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008416:	4013      	ands	r3, r2
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800841c:	0f92      	lsrs	r2, r2, #30
 800841e:	431a      	orrs	r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008428:	0edb      	lsrs	r3, r3, #27
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	b2da      	uxtb	r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	b2da      	uxtb	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800844c:	0d5b      	lsrs	r3, r3, #21
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	b2da      	uxtb	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800845e:	0c9b      	lsrs	r3, r3, #18
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	b2da      	uxtb	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008470:	0bdb      	lsrs	r3, r3, #15
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	b2da      	uxtb	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	7e1b      	ldrb	r3, [r3, #24]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	3302      	adds	r3, #2
 8008494:	2201      	movs	r2, #1
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800849e:	fb03 f202 	mul.w	r2, r3, r2
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	7a1b      	ldrb	r3, [r3, #8]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	2201      	movs	r2, #1
 80084b2:	409a      	lsls	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80084c0:	0a52      	lsrs	r2, r2, #9
 80084c2:	fb03 f202 	mul.w	r2, r3, r2
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80084d2:	e031      	b.n	8008538 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d11d      	bne.n	8008518 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084e0:	041b      	lsls	r3, r3, #16
 80084e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	431a      	orrs	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	3301      	adds	r3, #1
 80084f8:	029a      	lsls	r2, r3, #10
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800850c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	661a      	str	r2, [r3, #96]	@ 0x60
 8008516:	e00f      	b.n	8008538 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a58      	ldr	r2, [pc, #352]	@ (8008680 <HAL_SD_GetCardCSD+0x344>)
 800851e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008524:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e09d      	b.n	8008674 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853c:	0b9b      	lsrs	r3, r3, #14
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	b2da      	uxtb	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854e:	09db      	lsrs	r3, r3, #7
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008556:	b2da      	uxtb	r2, r3
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008566:	b2da      	uxtb	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008570:	0fdb      	lsrs	r3, r3, #31
 8008572:	b2da      	uxtb	r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857c:	0f5b      	lsrs	r3, r3, #29
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	b2da      	uxtb	r2, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858e:	0e9b      	lsrs	r3, r3, #26
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	b2da      	uxtb	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a0:	0d9b      	lsrs	r3, r3, #22
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b2:	0d5b      	lsrs	r3, r3, #21
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ce:	0c1b      	lsrs	r3, r3, #16
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e2:	0bdb      	lsrs	r3, r3, #15
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f6:	0b9b      	lsrs	r3, r3, #14
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	0b5b      	lsrs	r3, r3, #13
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800861e:	0b1b      	lsrs	r3, r3, #12
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008632:	0a9b      	lsrs	r3, r3, #10
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	b2da      	uxtb	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	b2db      	uxtb	r3, r3
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	b2da      	uxtb	r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	004005ff 	.word	0x004005ff

08008684 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa10 	bl	8008b14 <SD_SendStatus>
 80086f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	0a5b      	lsrs	r3, r3, #9
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008712:	693b      	ldr	r3, [r7, #16]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008728:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008738:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	2b82      	cmp	r3, #130	@ 0x82
 800875a:	d111      	bne.n	8008780 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fb9b 	bl	8009e9c <SDMMC_CmdStopTransfer>
 8008766:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d008      	beq.n	8008780 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	431a      	orrs	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7ff fdd4 	bl	8008328 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0208 	bic.w	r2, r2, #8
 800878e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f003 f909 	bl	800b9c0 <HAL_SD_RxCpltCallback>
#endif
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7fa f84e 	bl	8002868 <HAL_DMA_GetError>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d03e      	beq.n	8008850 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d002      	beq.n	80087ee <SD_DMAError+0x36>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d12d      	bne.n	800884a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a19      	ldr	r2, [pc, #100]	@ (8008858 <SD_DMAError+0xa0>)
 80087f4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008804:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008812:	6978      	ldr	r0, [r7, #20]
 8008814:	f7ff ff62 	bl	80086dc <HAL_SD_GetCardState>
 8008818:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b06      	cmp	r3, #6
 800881e:	d002      	beq.n	8008826 <SD_DMAError+0x6e>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b05      	cmp	r3, #5
 8008824:	d10a      	bne.n	800883c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fb36 	bl	8009e9c <SDMMC_CmdStopTransfer>
 8008830:	4602      	mov	r2, r0
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008836:	431a      	orrs	r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800884a:	6978      	ldr	r0, [r7, #20]
 800884c:	f7ff fd6c 	bl	8008328 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008850:	bf00      	nop
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	004005ff 	.word	0x004005ff

0800885c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800885c:	b5b0      	push	{r4, r5, r7, lr}
 800885e:	b094      	sub	sp, #80	@ 0x50
 8008860:	af04      	add	r7, sp, #16
 8008862:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008864:	2301      	movs	r3, #1
 8008866:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4618      	mov	r0, r3
 800886e:	f001 f9e6 	bl	8009c3e <SDIO_GetPowerState>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008878:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800887c:	e0b8      	b.n	80089f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008882:	2b03      	cmp	r3, #3
 8008884:	d02f      	beq.n	80088e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fbcd 	bl	800a02a <SDMMC_CmdSendCID>
 8008890:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <SD_InitCard+0x40>
    {
      return errorstate;
 8008898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800889a:	e0a9      	b.n	80089f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fa10 	bl	8009cc8 <SDIO_GetResponse>
 80088a8:	4602      	mov	r2, r0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2104      	movs	r1, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 fa07 	bl	8009cc8 <SDIO_GetResponse>
 80088ba:	4602      	mov	r2, r0
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2108      	movs	r1, #8
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 f9fe 	bl	8009cc8 <SDIO_GetResponse>
 80088cc:	4602      	mov	r2, r0
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	210c      	movs	r1, #12
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 f9f5 	bl	8009cc8 <SDIO_GetResponse>
 80088de:	4602      	mov	r2, r0
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d00d      	beq.n	800890a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f107 020e 	add.w	r2, r7, #14
 80088f6:	4611      	mov	r1, r2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fbd3 	bl	800a0a4 <SDMMC_CmdSetRelAdd>
 80088fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <SD_InitCard+0xae>
    {
      return errorstate;
 8008906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008908:	e072      	b.n	80089f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890e:	2b03      	cmp	r3, #3
 8008910:	d036      	beq.n	8008980 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008912:	89fb      	ldrh	r3, [r7, #14]
 8008914:	461a      	mov	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f001 fb9d 	bl	800a066 <SDMMC_CmdSendCSD>
 800892c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800892e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008936:	e05b      	b.n	80089f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f001 f9c2 	bl	8009cc8 <SDIO_GetResponse>
 8008944:	4602      	mov	r2, r0
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2104      	movs	r1, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f001 f9b9 	bl	8009cc8 <SDIO_GetResponse>
 8008956:	4602      	mov	r2, r0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2108      	movs	r1, #8
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f9b0 	bl	8009cc8 <SDIO_GetResponse>
 8008968:	4602      	mov	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	210c      	movs	r1, #12
 8008974:	4618      	mov	r0, r3
 8008976:	f001 f9a7 	bl	8009cc8 <SDIO_GetResponse>
 800897a:	4602      	mov	r2, r0
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2104      	movs	r1, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f001 f99e 	bl	8009cc8 <SDIO_GetResponse>
 800898c:	4603      	mov	r3, r0
 800898e:	0d1a      	lsrs	r2, r3, #20
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008994:	f107 0310 	add.w	r3, r7, #16
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff fcce 	bl	800833c <HAL_SD_GetCardCSD>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089aa:	e021      	b.n	80089f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6819      	ldr	r1, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b4:	041b      	lsls	r3, r3, #16
 80089b6:	2200      	movs	r2, #0
 80089b8:	461c      	mov	r4, r3
 80089ba:	4615      	mov	r5, r2
 80089bc:	4622      	mov	r2, r4
 80089be:	462b      	mov	r3, r5
 80089c0:	4608      	mov	r0, r1
 80089c2:	f001 fa8d 	bl	8009ee0 <SDMMC_CmdSelDesel>
 80089c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80089ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d0:	e00e      	b.n	80089f0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681d      	ldr	r5, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	466c      	mov	r4, sp
 80089da:	f103 0210 	add.w	r2, r3, #16
 80089de:	ca07      	ldmia	r2, {r0, r1, r2}
 80089e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089e4:	3304      	adds	r3, #4
 80089e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089e8:	4628      	mov	r0, r5
 80089ea:	f001 f8ef 	bl	8009bcc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3740      	adds	r7, #64	@ 0x40
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bdb0      	pop	{r4, r5, r7, pc}

080089f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 fa88 	bl	8009f26 <SDMMC_CmdGoIdleState>
 8008a16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	e072      	b.n	8008b08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 fa9b 	bl	8009f62 <SDMMC_CmdOperCond>
 8008a2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00d      	beq.n	8008a50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fa71 	bl	8009f26 <SDMMC_CmdGoIdleState>
 8008a44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	e05b      	b.n	8008b08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d137      	bne.n	8008ace <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 fa9b 	bl	8009fa0 <SDMMC_CmdAppCommand>
 8008a6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d02d      	beq.n	8008ace <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a76:	e047      	b.n	8008b08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 fa8e 	bl	8009fa0 <SDMMC_CmdAppCommand>
 8008a84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	e03b      	b.n	8008b08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	491e      	ldr	r1, [pc, #120]	@ (8008b10 <SD_PowerON+0x118>)
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 faa4 	bl	8009fe4 <SDMMC_CmdAppOperCommand>
 8008a9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008aa8:	e02e      	b.n	8008b08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f909 	bl	8009cc8 <SDIO_GetResponse>
 8008ab6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	0fdb      	lsrs	r3, r3, #31
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <SD_PowerON+0xcc>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <SD_PowerON+0xce>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]

    count++;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d802      	bhi.n	8008ade <SD_PowerON+0xe6>
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0cc      	beq.n	8008a78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d902      	bls.n	8008aee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008aec:	e00c      	b.n	8008b08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	645a      	str	r2, [r3, #68]	@ 0x44
 8008afe:	e002      	b.n	8008b06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	c1100000 	.word	0xc1100000

08008b14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d102      	bne.n	8008b2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b28:	e018      	b.n	8008b5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b32:	041b      	lsls	r3, r3, #16
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f001 fad5 	bl	800a0e6 <SDMMC_CmdSendStatus>
 8008b3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	e009      	b.n	8008b5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 f8ba 	bl	8009cc8 <SDIO_GetResponse>
 8008b54:	4602      	mov	r2, r0
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e025      	b.n	8008bc4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d106      	bne.n	8008b92 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7f9 f87d 	bl	8001c8c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	f000 ff4b 	bl	8009a40 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	f000 ffa0 	bl	8009afa <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e041      	b.n	8008c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d106      	bne.n	8008bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f8 ff02 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3304      	adds	r3, #4
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f000 fa7e 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d001      	beq.n	8008c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e04e      	b.n	8008d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0201 	orr.w	r2, r2, #1
 8008c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a23      	ldr	r2, [pc, #140]	@ (8008d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d022      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cae:	d01d      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d018      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d013      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00e      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8008d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d009      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a19      	ldr	r2, [pc, #100]	@ (8008d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x80>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	@ (8008d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d111      	bne.n	8008d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b06      	cmp	r3, #6
 8008cfc:	d010      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0e:	e007      	b.n	8008d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	40010000 	.word	0x40010000
 8008d34:	40000400 	.word	0x40000400
 8008d38:	40000800 	.word	0x40000800
 8008d3c:	40000c00 	.word	0x40000c00
 8008d40:	40010400 	.word	0x40010400
 8008d44:	40014000 	.word	0x40014000
 8008d48:	40001800 	.word	0x40001800

08008d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d020      	beq.n	8008db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01b      	beq.n	8008db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0202 	mvn.w	r2, #2
 8008d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f999 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008d9c:	e005      	b.n	8008daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f98b 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f99c 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f003 0304 	and.w	r3, r3, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d020      	beq.n	8008dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01b      	beq.n	8008dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f06f 0204 	mvn.w	r2, #4
 8008dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f973 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008de8:	e005      	b.n	8008df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f965 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f976 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d020      	beq.n	8008e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f003 0308 	and.w	r3, r3, #8
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01b      	beq.n	8008e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f06f 0208 	mvn.w	r2, #8
 8008e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f94d 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008e34:	e005      	b.n	8008e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f93f 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f950 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d020      	beq.n	8008e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01b      	beq.n	8008e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0210 	mvn.w	r2, #16
 8008e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f927 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008e80:	e005      	b.n	8008e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f919 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f92a 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d007      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0201 	mvn.w	r2, #1
 8008eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7f8 faba 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00c      	beq.n	8008edc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fae4 	bl	80094a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00c      	beq.n	8008f00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f8fb 	bl	80090f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00c      	beq.n	8008f24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f003 0320 	and.w	r3, r3, #32
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f06f 0220 	mvn.w	r2, #32
 8008f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fab6 	bl	8009490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_TIM_ConfigClockSource+0x1c>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e0b4      	b.n	80090b2 <HAL_TIM_ConfigClockSource+0x186>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f80:	d03e      	beq.n	8009000 <HAL_TIM_ConfigClockSource+0xd4>
 8008f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f86:	f200 8087 	bhi.w	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f8e:	f000 8086 	beq.w	800909e <HAL_TIM_ConfigClockSource+0x172>
 8008f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f96:	d87f      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008f98:	2b70      	cmp	r3, #112	@ 0x70
 8008f9a:	d01a      	beq.n	8008fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8008f9c:	2b70      	cmp	r3, #112	@ 0x70
 8008f9e:	d87b      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa0:	2b60      	cmp	r3, #96	@ 0x60
 8008fa2:	d050      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0x11a>
 8008fa4:	2b60      	cmp	r3, #96	@ 0x60
 8008fa6:	d877      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa8:	2b50      	cmp	r3, #80	@ 0x50
 8008faa:	d03c      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0xfa>
 8008fac:	2b50      	cmp	r3, #80	@ 0x50
 8008fae:	d873      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb0:	2b40      	cmp	r3, #64	@ 0x40
 8008fb2:	d058      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x13a>
 8008fb4:	2b40      	cmp	r3, #64	@ 0x40
 8008fb6:	d86f      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb8:	2b30      	cmp	r3, #48	@ 0x30
 8008fba:	d064      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fbc:	2b30      	cmp	r3, #48	@ 0x30
 8008fbe:	d86b      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d060      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d867      	bhi.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d05c      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d05a      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x15a>
 8008fd0:	e062      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fe2:	f000 f9b9 	bl	8009358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	609a      	str	r2, [r3, #8]
      break;
 8008ffe:	e04f      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009010:	f000 f9a2 	bl	8009358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009022:	609a      	str	r2, [r3, #8]
      break;
 8009024:	e03c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009032:	461a      	mov	r2, r3
 8009034:	f000 f916 	bl	8009264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2150      	movs	r1, #80	@ 0x50
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f96f 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 8009044:	e02c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009052:	461a      	mov	r2, r3
 8009054:	f000 f935 	bl	80092c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2160      	movs	r1, #96	@ 0x60
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f95f 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 8009064:	e01c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009072:	461a      	mov	r2, r3
 8009074:	f000 f8f6 	bl	8009264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2140      	movs	r1, #64	@ 0x40
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f94f 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 8009084:	e00c      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f000 f946 	bl	8009322 <TIM_ITRx_SetConfig>
      break;
 8009096:	e003      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
      break;
 800909c:	e000      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800909e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a46      	ldr	r2, [pc, #280]	@ (8009238 <TIM_Base_SetConfig+0x12c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d013      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912a:	d00f      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a43      	ldr	r2, [pc, #268]	@ (800923c <TIM_Base_SetConfig+0x130>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a42      	ldr	r2, [pc, #264]	@ (8009240 <TIM_Base_SetConfig+0x134>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a41      	ldr	r2, [pc, #260]	@ (8009244 <TIM_Base_SetConfig+0x138>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a40      	ldr	r2, [pc, #256]	@ (8009248 <TIM_Base_SetConfig+0x13c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d108      	bne.n	800915e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a35      	ldr	r2, [pc, #212]	@ (8009238 <TIM_Base_SetConfig+0x12c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d02b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800916c:	d027      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a32      	ldr	r2, [pc, #200]	@ (800923c <TIM_Base_SetConfig+0x130>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d023      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a31      	ldr	r2, [pc, #196]	@ (8009240 <TIM_Base_SetConfig+0x134>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01f      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a30      	ldr	r2, [pc, #192]	@ (8009244 <TIM_Base_SetConfig+0x138>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d01b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2f      	ldr	r2, [pc, #188]	@ (8009248 <TIM_Base_SetConfig+0x13c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d017      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a2e      	ldr	r2, [pc, #184]	@ (800924c <TIM_Base_SetConfig+0x140>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2d      	ldr	r2, [pc, #180]	@ (8009250 <TIM_Base_SetConfig+0x144>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00f      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009254 <TIM_Base_SetConfig+0x148>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009258 <TIM_Base_SetConfig+0x14c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a2a      	ldr	r2, [pc, #168]	@ (800925c <TIM_Base_SetConfig+0x150>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a29      	ldr	r2, [pc, #164]	@ (8009260 <TIM_Base_SetConfig+0x154>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d108      	bne.n	80091d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a10      	ldr	r2, [pc, #64]	@ (8009238 <TIM_Base_SetConfig+0x12c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d003      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a12      	ldr	r2, [pc, #72]	@ (8009248 <TIM_Base_SetConfig+0x13c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d103      	bne.n	800920c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b01      	cmp	r3, #1
 800921c:	d105      	bne.n	800922a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f023 0201 	bic.w	r2, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	611a      	str	r2, [r3, #16]
  }
}
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40010000 	.word	0x40010000
 800923c:	40000400 	.word	0x40000400
 8009240:	40000800 	.word	0x40000800
 8009244:	40000c00 	.word	0x40000c00
 8009248:	40010400 	.word	0x40010400
 800924c:	40014000 	.word	0x40014000
 8009250:	40014400 	.word	0x40014400
 8009254:	40014800 	.word	0x40014800
 8009258:	40001800 	.word	0x40001800
 800925c:	40001c00 	.word	0x40001c00
 8009260:	40002000 	.word	0x40002000

08009264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f023 0201 	bic.w	r2, r3, #1
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800928e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	4313      	orrs	r3, r2
 8009298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f023 030a 	bic.w	r3, r3, #10
 80092a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	621a      	str	r2, [r3, #32]
}
 80092b6:	bf00      	nop
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b087      	sub	sp, #28
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	f023 0210 	bic.w	r2, r3, #16
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	031b      	lsls	r3, r3, #12
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	621a      	str	r2, [r3, #32]
}
 8009316:	bf00      	nop
 8009318:	371c      	adds	r7, #28
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	f043 0307 	orr.w	r3, r3, #7
 8009344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	431a      	orrs	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4313      	orrs	r3, r2
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	609a      	str	r2, [r3, #8]
}
 800938c:	bf00      	nop
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e05a      	b.n	8009466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a21      	ldr	r2, [pc, #132]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d022      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fc:	d01d      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1d      	ldr	r2, [pc, #116]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d018      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1b      	ldr	r2, [pc, #108]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1a      	ldr	r2, [pc, #104]	@ (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00e      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d009      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a17      	ldr	r2, [pc, #92]	@ (8009488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a15      	ldr	r2, [pc, #84]	@ (800948c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d10c      	bne.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	4313      	orrs	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40010000 	.word	0x40010000
 8009478:	40000400 	.word	0x40000400
 800947c:	40000800 	.word	0x40000800
 8009480:	40000c00 	.word	0x40000c00
 8009484:	40010400 	.word	0x40010400
 8009488:	40014000 	.word	0x40014000
 800948c:	40001800 	.word	0x40001800

08009490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e042      	b.n	8009550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d106      	bne.n	80094e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7f8 faae 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2224      	movs	r2, #36	@ 0x24
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f82b 	bl	8009558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800955c:	b0c0      	sub	sp, #256	@ 0x100
 800955e:	af00      	add	r7, sp, #0
 8009560:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009574:	68d9      	ldr	r1, [r3, #12]
 8009576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	ea40 0301 	orr.w	r3, r0, r1
 8009580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	431a      	orrs	r2, r3
 8009590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	431a      	orrs	r2, r3
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	4313      	orrs	r3, r2
 80095a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80095b0:	f021 010c 	bic.w	r1, r1, #12
 80095b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80095be:	430b      	orrs	r3, r1
 80095c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d2:	6999      	ldr	r1, [r3, #24]
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	ea40 0301 	orr.w	r3, r0, r1
 80095de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	4b8f      	ldr	r3, [pc, #572]	@ (8009824 <UART_SetConfig+0x2cc>)
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d005      	beq.n	80095f8 <UART_SetConfig+0xa0>
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b8d      	ldr	r3, [pc, #564]	@ (8009828 <UART_SetConfig+0x2d0>)
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d104      	bne.n	8009602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095f8:	f7fd fcf2 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 80095fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009600:	e003      	b.n	800960a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009602:	f7fd fcd9 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8009606:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800960a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009614:	f040 810c 	bne.w	8009830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800961c:	2200      	movs	r2, #0
 800961e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009622:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800962a:	4622      	mov	r2, r4
 800962c:	462b      	mov	r3, r5
 800962e:	1891      	adds	r1, r2, r2
 8009630:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009632:	415b      	adcs	r3, r3
 8009634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800963a:	4621      	mov	r1, r4
 800963c:	eb12 0801 	adds.w	r8, r2, r1
 8009640:	4629      	mov	r1, r5
 8009642:	eb43 0901 	adc.w	r9, r3, r1
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800965a:	4690      	mov	r8, r2
 800965c:	4699      	mov	r9, r3
 800965e:	4623      	mov	r3, r4
 8009660:	eb18 0303 	adds.w	r3, r8, r3
 8009664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009668:	462b      	mov	r3, r5
 800966a:	eb49 0303 	adc.w	r3, r9, r3
 800966e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800967e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009686:	460b      	mov	r3, r1
 8009688:	18db      	adds	r3, r3, r3
 800968a:	653b      	str	r3, [r7, #80]	@ 0x50
 800968c:	4613      	mov	r3, r2
 800968e:	eb42 0303 	adc.w	r3, r2, r3
 8009692:	657b      	str	r3, [r7, #84]	@ 0x54
 8009694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800969c:	f7f6 fdb2 	bl	8000204 <__aeabi_uldivmod>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4b61      	ldr	r3, [pc, #388]	@ (800982c <UART_SetConfig+0x2d4>)
 80096a6:	fba3 2302 	umull	r2, r3, r3, r2
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	011c      	lsls	r4, r3, #4
 80096ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80096bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80096c0:	4642      	mov	r2, r8
 80096c2:	464b      	mov	r3, r9
 80096c4:	1891      	adds	r1, r2, r2
 80096c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80096c8:	415b      	adcs	r3, r3
 80096ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80096d0:	4641      	mov	r1, r8
 80096d2:	eb12 0a01 	adds.w	sl, r2, r1
 80096d6:	4649      	mov	r1, r9
 80096d8:	eb43 0b01 	adc.w	fp, r3, r1
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096f0:	4692      	mov	sl, r2
 80096f2:	469b      	mov	fp, r3
 80096f4:	4643      	mov	r3, r8
 80096f6:	eb1a 0303 	adds.w	r3, sl, r3
 80096fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096fe:	464b      	mov	r3, r9
 8009700:	eb4b 0303 	adc.w	r3, fp, r3
 8009704:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009714:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800971c:	460b      	mov	r3, r1
 800971e:	18db      	adds	r3, r3, r3
 8009720:	643b      	str	r3, [r7, #64]	@ 0x40
 8009722:	4613      	mov	r3, r2
 8009724:	eb42 0303 	adc.w	r3, r2, r3
 8009728:	647b      	str	r3, [r7, #68]	@ 0x44
 800972a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800972e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009732:	f7f6 fd67 	bl	8000204 <__aeabi_uldivmod>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4611      	mov	r1, r2
 800973c:	4b3b      	ldr	r3, [pc, #236]	@ (800982c <UART_SetConfig+0x2d4>)
 800973e:	fba3 2301 	umull	r2, r3, r3, r1
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	2264      	movs	r2, #100	@ 0x64
 8009746:	fb02 f303 	mul.w	r3, r2, r3
 800974a:	1acb      	subs	r3, r1, r3
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009752:	4b36      	ldr	r3, [pc, #216]	@ (800982c <UART_SetConfig+0x2d4>)
 8009754:	fba3 2302 	umull	r2, r3, r3, r2
 8009758:	095b      	lsrs	r3, r3, #5
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009760:	441c      	add	r4, r3
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800976c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	1891      	adds	r1, r2, r2
 800977a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800977c:	415b      	adcs	r3, r3
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009784:	4641      	mov	r1, r8
 8009786:	1851      	adds	r1, r2, r1
 8009788:	6339      	str	r1, [r7, #48]	@ 0x30
 800978a:	4649      	mov	r1, r9
 800978c:	414b      	adcs	r3, r1
 800978e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800979c:	4659      	mov	r1, fp
 800979e:	00cb      	lsls	r3, r1, #3
 80097a0:	4651      	mov	r1, sl
 80097a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097a6:	4651      	mov	r1, sl
 80097a8:	00ca      	lsls	r2, r1, #3
 80097aa:	4610      	mov	r0, r2
 80097ac:	4619      	mov	r1, r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	4642      	mov	r2, r8
 80097b2:	189b      	adds	r3, r3, r2
 80097b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097b8:	464b      	mov	r3, r9
 80097ba:	460a      	mov	r2, r1
 80097bc:	eb42 0303 	adc.w	r3, r2, r3
 80097c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80097d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097d8:	460b      	mov	r3, r1
 80097da:	18db      	adds	r3, r3, r3
 80097dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097de:	4613      	mov	r3, r2
 80097e0:	eb42 0303 	adc.w	r3, r2, r3
 80097e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80097ee:	f7f6 fd09 	bl	8000204 <__aeabi_uldivmod>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <UART_SetConfig+0x2d4>)
 80097f8:	fba3 1302 	umull	r1, r3, r3, r2
 80097fc:	095b      	lsrs	r3, r3, #5
 80097fe:	2164      	movs	r1, #100	@ 0x64
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	3332      	adds	r3, #50	@ 0x32
 800980a:	4a08      	ldr	r2, [pc, #32]	@ (800982c <UART_SetConfig+0x2d4>)
 800980c:	fba2 2303 	umull	r2, r3, r2, r3
 8009810:	095b      	lsrs	r3, r3, #5
 8009812:	f003 0207 	and.w	r2, r3, #7
 8009816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4422      	add	r2, r4
 800981e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009820:	e106      	b.n	8009a30 <UART_SetConfig+0x4d8>
 8009822:	bf00      	nop
 8009824:	40011000 	.word	0x40011000
 8009828:	40011400 	.word	0x40011400
 800982c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009834:	2200      	movs	r2, #0
 8009836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800983a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800983e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009842:	4642      	mov	r2, r8
 8009844:	464b      	mov	r3, r9
 8009846:	1891      	adds	r1, r2, r2
 8009848:	6239      	str	r1, [r7, #32]
 800984a:	415b      	adcs	r3, r3
 800984c:	627b      	str	r3, [r7, #36]	@ 0x24
 800984e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009852:	4641      	mov	r1, r8
 8009854:	1854      	adds	r4, r2, r1
 8009856:	4649      	mov	r1, r9
 8009858:	eb43 0501 	adc.w	r5, r3, r1
 800985c:	f04f 0200 	mov.w	r2, #0
 8009860:	f04f 0300 	mov.w	r3, #0
 8009864:	00eb      	lsls	r3, r5, #3
 8009866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800986a:	00e2      	lsls	r2, r4, #3
 800986c:	4614      	mov	r4, r2
 800986e:	461d      	mov	r5, r3
 8009870:	4643      	mov	r3, r8
 8009872:	18e3      	adds	r3, r4, r3
 8009874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009878:	464b      	mov	r3, r9
 800987a:	eb45 0303 	adc.w	r3, r5, r3
 800987e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800988e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009892:	f04f 0200 	mov.w	r2, #0
 8009896:	f04f 0300 	mov.w	r3, #0
 800989a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800989e:	4629      	mov	r1, r5
 80098a0:	008b      	lsls	r3, r1, #2
 80098a2:	4621      	mov	r1, r4
 80098a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098a8:	4621      	mov	r1, r4
 80098aa:	008a      	lsls	r2, r1, #2
 80098ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80098b0:	f7f6 fca8 	bl	8000204 <__aeabi_uldivmod>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4b60      	ldr	r3, [pc, #384]	@ (8009a3c <UART_SetConfig+0x4e4>)
 80098ba:	fba3 2302 	umull	r2, r3, r3, r2
 80098be:	095b      	lsrs	r3, r3, #5
 80098c0:	011c      	lsls	r4, r3, #4
 80098c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80098d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80098d4:	4642      	mov	r2, r8
 80098d6:	464b      	mov	r3, r9
 80098d8:	1891      	adds	r1, r2, r2
 80098da:	61b9      	str	r1, [r7, #24]
 80098dc:	415b      	adcs	r3, r3
 80098de:	61fb      	str	r3, [r7, #28]
 80098e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098e4:	4641      	mov	r1, r8
 80098e6:	1851      	adds	r1, r2, r1
 80098e8:	6139      	str	r1, [r7, #16]
 80098ea:	4649      	mov	r1, r9
 80098ec:	414b      	adcs	r3, r1
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098fc:	4659      	mov	r1, fp
 80098fe:	00cb      	lsls	r3, r1, #3
 8009900:	4651      	mov	r1, sl
 8009902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009906:	4651      	mov	r1, sl
 8009908:	00ca      	lsls	r2, r1, #3
 800990a:	4610      	mov	r0, r2
 800990c:	4619      	mov	r1, r3
 800990e:	4603      	mov	r3, r0
 8009910:	4642      	mov	r2, r8
 8009912:	189b      	adds	r3, r3, r2
 8009914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009918:	464b      	mov	r3, r9
 800991a:	460a      	mov	r2, r1
 800991c:	eb42 0303 	adc.w	r3, r2, r3
 8009920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800992e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800993c:	4649      	mov	r1, r9
 800993e:	008b      	lsls	r3, r1, #2
 8009940:	4641      	mov	r1, r8
 8009942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009946:	4641      	mov	r1, r8
 8009948:	008a      	lsls	r2, r1, #2
 800994a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800994e:	f7f6 fc59 	bl	8000204 <__aeabi_uldivmod>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4611      	mov	r1, r2
 8009958:	4b38      	ldr	r3, [pc, #224]	@ (8009a3c <UART_SetConfig+0x4e4>)
 800995a:	fba3 2301 	umull	r2, r3, r3, r1
 800995e:	095b      	lsrs	r3, r3, #5
 8009960:	2264      	movs	r2, #100	@ 0x64
 8009962:	fb02 f303 	mul.w	r3, r2, r3
 8009966:	1acb      	subs	r3, r1, r3
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	3332      	adds	r3, #50	@ 0x32
 800996c:	4a33      	ldr	r2, [pc, #204]	@ (8009a3c <UART_SetConfig+0x4e4>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	095b      	lsrs	r3, r3, #5
 8009974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009978:	441c      	add	r4, r3
 800997a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800997e:	2200      	movs	r2, #0
 8009980:	673b      	str	r3, [r7, #112]	@ 0x70
 8009982:	677a      	str	r2, [r7, #116]	@ 0x74
 8009984:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	1891      	adds	r1, r2, r2
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	415b      	adcs	r3, r3
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009998:	4641      	mov	r1, r8
 800999a:	1851      	adds	r1, r2, r1
 800999c:	6039      	str	r1, [r7, #0]
 800999e:	4649      	mov	r1, r9
 80099a0:	414b      	adcs	r3, r1
 80099a2:	607b      	str	r3, [r7, #4]
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f04f 0300 	mov.w	r3, #0
 80099ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099b0:	4659      	mov	r1, fp
 80099b2:	00cb      	lsls	r3, r1, #3
 80099b4:	4651      	mov	r1, sl
 80099b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099ba:	4651      	mov	r1, sl
 80099bc:	00ca      	lsls	r2, r1, #3
 80099be:	4610      	mov	r0, r2
 80099c0:	4619      	mov	r1, r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	4642      	mov	r2, r8
 80099c6:	189b      	adds	r3, r3, r2
 80099c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099ca:	464b      	mov	r3, r9
 80099cc:	460a      	mov	r2, r1
 80099ce:	eb42 0303 	adc.w	r3, r2, r3
 80099d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80099de:	667a      	str	r2, [r7, #100]	@ 0x64
 80099e0:	f04f 0200 	mov.w	r2, #0
 80099e4:	f04f 0300 	mov.w	r3, #0
 80099e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80099ec:	4649      	mov	r1, r9
 80099ee:	008b      	lsls	r3, r1, #2
 80099f0:	4641      	mov	r1, r8
 80099f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099f6:	4641      	mov	r1, r8
 80099f8:	008a      	lsls	r2, r1, #2
 80099fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80099fe:	f7f6 fc01 	bl	8000204 <__aeabi_uldivmod>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <UART_SetConfig+0x4e4>)
 8009a08:	fba3 1302 	umull	r1, r3, r3, r2
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	2164      	movs	r1, #100	@ 0x64
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	3332      	adds	r3, #50	@ 0x32
 8009a1a:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <UART_SetConfig+0x4e4>)
 8009a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	f003 020f 	and.w	r2, r3, #15
 8009a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4422      	add	r2, r4
 8009a2e:	609a      	str	r2, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009a36:	46bd      	mov	sp, r7
 8009a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a3c:	51eb851f 	.word	0x51eb851f

08009a40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d123      	bne.n	8009a9a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009a5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	6851      	ldr	r1, [r2, #4]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	6892      	ldr	r2, [r2, #8]
 8009a66:	4311      	orrs	r1, r2
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	68d2      	ldr	r2, [r2, #12]
 8009a6c:	4311      	orrs	r1, r2
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6912      	ldr	r2, [r2, #16]
 8009a72:	4311      	orrs	r1, r2
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	6952      	ldr	r2, [r2, #20]
 8009a78:	4311      	orrs	r1, r2
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	6992      	ldr	r2, [r2, #24]
 8009a7e:	4311      	orrs	r1, r2
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	69d2      	ldr	r2, [r2, #28]
 8009a84:	4311      	orrs	r1, r2
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	6a12      	ldr	r2, [r2, #32]
 8009a8a:	4311      	orrs	r1, r2
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a90:	430a      	orrs	r2, r1
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e028      	b.n	8009aec <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	69d9      	ldr	r1, [r3, #28]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	4319      	orrs	r1, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009ac0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	6851      	ldr	r1, [r2, #4]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	6892      	ldr	r2, [r2, #8]
 8009acc:	4311      	orrs	r1, r2
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	68d2      	ldr	r2, [r2, #12]
 8009ad2:	4311      	orrs	r1, r2
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	6912      	ldr	r2, [r2, #16]
 8009ad8:	4311      	orrs	r1, r2
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	6952      	ldr	r2, [r2, #20]
 8009ade:	4311      	orrs	r1, r2
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	6992      	ldr	r2, [r2, #24]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d128      	bne.n	8009b5e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	1e59      	subs	r1, r3, #1
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	4319      	orrs	r1, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	4319      	orrs	r1, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	031b      	lsls	r3, r3, #12
 8009b36:	4319      	orrs	r1, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	4319      	orrs	r1, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	051b      	lsls	r3, r3, #20
 8009b4a:	4319      	orrs	r1, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	061b      	lsls	r3, r3, #24
 8009b54:	430b      	orrs	r3, r1
 8009b56:	431a      	orrs	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	609a      	str	r2, [r3, #8]
 8009b5c:	e02f      	b.n	8009bbe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	68d2      	ldr	r2, [r2, #12]
 8009b6e:	3a01      	subs	r2, #1
 8009b70:	0311      	lsls	r1, r2, #12
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	6952      	ldr	r2, [r2, #20]
 8009b76:	3a01      	subs	r2, #1
 8009b78:	0512      	lsls	r2, r2, #20
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	1e59      	subs	r1, r3, #1
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	4319      	orrs	r1, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	4319      	orrs	r1, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	4319      	orrs	r1, r3
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	061b      	lsls	r3, r3, #24
 8009bb6:	430b      	orrs	r3, r1
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009bcc:	b084      	sub	sp, #16
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	f107 001c 	add.w	r0, r7, #28
 8009bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009be2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009be4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009be6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009bea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009bee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009bf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009bf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009c06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	b004      	add	sp, #16
 8009c20:	4770      	bx	lr

08009c22 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2203      	movs	r2, #3
 8009c2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0303 	and.w	r3, r3, #3
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009c78:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009c7e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009c84:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009c94:	f023 030f 	bic.w	r3, r3, #15
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	b2db      	uxtb	r3, r3
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	4413      	add	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
}  
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d14:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009d1a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009d20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	431a      	orrs	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009d38:	2300      	movs	r3, #0

}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b088      	sub	sp, #32
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009d54:	2310      	movs	r3, #16
 8009d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d58:	2340      	movs	r3, #64	@ 0x40
 8009d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d66:	f107 0308 	add.w	r3, r7, #8
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff ff74 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d76:	2110      	movs	r1, #16
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f9d7 	bl	800a12c <SDMMC_GetCmdResp1>
 8009d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d80:	69fb      	ldr	r3, [r7, #28]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009d98:	2311      	movs	r3, #17
 8009d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d9c:	2340      	movs	r3, #64	@ 0x40
 8009d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff ff52 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dba:	2111      	movs	r1, #17
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f9b5 	bl	800a12c <SDMMC_GetCmdResp1>
 8009dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3720      	adds	r7, #32
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b088      	sub	sp, #32
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ddc:	2312      	movs	r3, #18
 8009dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009de0:	2340      	movs	r3, #64	@ 0x40
 8009de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009de4:	2300      	movs	r3, #0
 8009de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff30 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dfe:	2112      	movs	r1, #18
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f993 	bl	800a12c <SDMMC_GetCmdResp1>
 8009e06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e08:	69fb      	ldr	r3, [r7, #28]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b088      	sub	sp, #32
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009e20:	2318      	movs	r3, #24
 8009e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e24:	2340      	movs	r3, #64	@ 0x40
 8009e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e32:	f107 0308 	add.w	r3, r7, #8
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff ff0e 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e42:	2118      	movs	r1, #24
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f971 	bl	800a12c <SDMMC_GetCmdResp1>
 8009e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3720      	adds	r7, #32
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b088      	sub	sp, #32
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009e64:	2319      	movs	r3, #25
 8009e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e68:	2340      	movs	r3, #64	@ 0x40
 8009e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e76:	f107 0308 	add.w	r3, r7, #8
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff feec 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e86:	2119      	movs	r1, #25
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f94f 	bl	800a12c <SDMMC_GetCmdResp1>
 8009e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e90:	69fb      	ldr	r3, [r7, #28]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eac:	2340      	movs	r3, #64	@ 0x40
 8009eae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eba:	f107 0308 	add.w	r3, r7, #8
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff feca 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009ec6:	4a05      	ldr	r2, [pc, #20]	@ (8009edc <SDMMC_CmdStopTransfer+0x40>)
 8009ec8:	210c      	movs	r1, #12
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f92e 	bl	800a12c <SDMMC_GetCmdResp1>
 8009ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	05f5e100 	.word	0x05f5e100

08009ee0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	@ 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009ef0:	2307      	movs	r3, #7
 8009ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ef4:	2340      	movs	r3, #64	@ 0x40
 8009ef6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f00:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f02:	f107 0310 	add.w	r3, r7, #16
 8009f06:	4619      	mov	r1, r3
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f7ff fea6 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f12:	2107      	movs	r1, #7
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f909 	bl	800a12c <SDMMC_GetCmdResp1>
 8009f1a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3728      	adds	r7, #40	@ 0x28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b088      	sub	sp, #32
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009f36:	2300      	movs	r3, #0
 8009f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fe85 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fb23 	bl	800a59c <SDMMC_GetCmdError>
 8009f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f58:	69fb      	ldr	r3, [r7, #28]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009f6a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009f70:	2308      	movs	r3, #8
 8009f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f74:	2340      	movs	r3, #64	@ 0x40
 8009f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f82:	f107 0308 	add.w	r3, r7, #8
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fe66 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fab6 	bl	800a500 <SDMMC_GetCmdResp7>
 8009f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f96:	69fb      	ldr	r3, [r7, #28]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3720      	adds	r7, #32
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009fae:	2337      	movs	r3, #55	@ 0x37
 8009fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fb2:	2340      	movs	r3, #64	@ 0x40
 8009fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fe47 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fd0:	2137      	movs	r1, #55	@ 0x37
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f8aa 	bl	800a12c <SDMMC_GetCmdResp1>
 8009fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fda:	69fb      	ldr	r3, [r7, #28]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3720      	adds	r7, #32
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ff4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ffa:	2329      	movs	r3, #41	@ 0x29
 8009ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ffe:	2340      	movs	r3, #64	@ 0x40
 800a000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a00a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fe21 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f9bd 	bl	800a398 <SDMMC_GetCmdResp3>
 800a01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a020:	69fb      	ldr	r3, [r7, #28]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a036:	2302      	movs	r3, #2
 800a038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a03a:	23c0      	movs	r3, #192	@ 0xc0
 800a03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a048:	f107 0308 	add.w	r3, r7, #8
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff fe03 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f957 	bl	800a308 <SDMMC_GetCmdResp2>
 800a05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a05c:	69fb      	ldr	r3, [r7, #28]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b088      	sub	sp, #32
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a074:	2309      	movs	r3, #9
 800a076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a078:	23c0      	movs	r3, #192	@ 0xc0
 800a07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a084:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fde4 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f938 	bl	800a308 <SDMMC_GetCmdResp2>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0b6:	2340      	movs	r3, #64	@ 0x40
 800a0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fdc5 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	2103      	movs	r1, #3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f99d 	bl	800a414 <SDMMC_GetCmdResp6>
 800a0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b088      	sub	sp, #32
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a0f4:	230d      	movs	r3, #13
 800a0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0f8:	2340      	movs	r3, #64	@ 0x40
 800a0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a104:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a106:	f107 0308 	add.w	r3, r7, #8
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff fda4 	bl	8009c5a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a112:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a116:	210d      	movs	r1, #13
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f807 	bl	800a12c <SDMMC_GetCmdResp1>
 800a11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a120:	69fb      	ldr	r3, [r7, #28]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	460b      	mov	r3, r1
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a13a:	4b70      	ldr	r3, [pc, #448]	@ (800a2fc <SDMMC_GetCmdResp1+0x1d0>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a70      	ldr	r2, [pc, #448]	@ (800a300 <SDMMC_GetCmdResp1+0x1d4>)
 800a140:	fba2 2303 	umull	r2, r3, r2, r3
 800a144:	0a5a      	lsrs	r2, r3, #9
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	fb02 f303 	mul.w	r3, r2, r3
 800a14c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	1e5a      	subs	r2, r3, #1
 800a152:	61fa      	str	r2, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a158:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a15c:	e0c9      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a162:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0ef      	beq.n	800a14e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1ea      	bne.n	800a14e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	d004      	beq.n	800a18e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2204      	movs	r2, #4
 800a188:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a18a:	2304      	movs	r3, #4
 800a18c:	e0b1      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e0a6      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	22c5      	movs	r2, #197	@ 0xc5
 800a1a8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fd7f 	bl	8009cae <SDIO_GetCommandResponse>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d001      	beq.n	800a1be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e099      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a1be:	2100      	movs	r1, #0
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7ff fd81 	bl	8009cc8 <SDIO_GetResponse>
 800a1c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4b4e      	ldr	r3, [pc, #312]	@ (800a304 <SDMMC_GetCmdResp1+0x1d8>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	e08d      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	da02      	bge.n	800a1e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a1dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1e0:	e087      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a1ec:	2340      	movs	r3, #64	@ 0x40
 800a1ee:	e080      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a1fa:	2380      	movs	r3, #128	@ 0x80
 800a1fc:	e079      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a20c:	e071      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a21c:	e069      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a22c:	e061      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a238:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a23c:	e059      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a24c:	e051      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a25c:	e049      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a268:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a26c:	e041      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a27c:	e039      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a28c:	e031      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a298:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a29c:	e029      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a2ac:	e021      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a2b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a2bc:	e019      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a2c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a2cc:	e011      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a2d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a2dc:	e009      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a2e8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a2ec:	e001      	b.n	800a2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000000 	.word	0x20000000
 800a300:	10624dd3 	.word	0x10624dd3
 800a304:	fdffe008 	.word	0xfdffe008

0800a308 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a310:	4b1f      	ldr	r3, [pc, #124]	@ (800a390 <SDMMC_GetCmdResp2+0x88>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a1f      	ldr	r2, [pc, #124]	@ (800a394 <SDMMC_GetCmdResp2+0x8c>)
 800a316:	fba2 2303 	umull	r2, r3, r2, r3
 800a31a:	0a5b      	lsrs	r3, r3, #9
 800a31c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	1e5a      	subs	r2, r3, #1
 800a32a:	60fa      	str	r2, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a330:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a334:	e026      	b.n	800a384 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a33a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0ef      	beq.n	800a326 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1ea      	bne.n	800a326 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2204      	movs	r2, #4
 800a360:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a362:	2304      	movs	r3, #4
 800a364:	e00e      	b.n	800a384 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d004      	beq.n	800a37c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a378:	2301      	movs	r3, #1
 800a37a:	e003      	b.n	800a384 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	22c5      	movs	r2, #197	@ 0xc5
 800a380:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20000000 	.word	0x20000000
 800a394:	10624dd3 	.word	0x10624dd3

0800a398 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a40c <SDMMC_GetCmdResp3+0x74>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1a      	ldr	r2, [pc, #104]	@ (800a410 <SDMMC_GetCmdResp3+0x78>)
 800a3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3aa:	0a5b      	lsrs	r3, r3, #9
 800a3ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3b0:	fb02 f303 	mul.w	r3, r2, r3
 800a3b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	1e5a      	subs	r2, r3, #1
 800a3ba:	60fa      	str	r2, [r7, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3c4:	e01b      	b.n	800a3fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0ef      	beq.n	800a3b6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1ea      	bne.n	800a3b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d004      	beq.n	800a3f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2204      	movs	r2, #4
 800a3f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	e003      	b.n	800a3fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	22c5      	movs	r2, #197	@ 0xc5
 800a3fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000000 	.word	0x20000000
 800a410:	10624dd3 	.word	0x10624dd3

0800a414 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	460b      	mov	r3, r1
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a422:	4b35      	ldr	r3, [pc, #212]	@ (800a4f8 <SDMMC_GetCmdResp6+0xe4>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a35      	ldr	r2, [pc, #212]	@ (800a4fc <SDMMC_GetCmdResp6+0xe8>)
 800a428:	fba2 2303 	umull	r2, r3, r2, r3
 800a42c:	0a5b      	lsrs	r3, r3, #9
 800a42e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a432:	fb02 f303 	mul.w	r3, r2, r3
 800a436:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	1e5a      	subs	r2, r3, #1
 800a43c:	61fa      	str	r2, [r7, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d102      	bne.n	800a448 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a442:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a446:	e052      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0ef      	beq.n	800a438 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1ea      	bne.n	800a438 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d004      	beq.n	800a478 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2204      	movs	r2, #4
 800a472:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a474:	2304      	movs	r3, #4
 800a476:	e03a      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d004      	beq.n	800a48e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e02f      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fc0d 	bl	8009cae <SDIO_GetCommandResponse>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d001      	beq.n	800a4a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e025      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	22c5      	movs	r2, #197	@ 0xc5
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fc0c 	bl	8009cc8 <SDIO_GetResponse>
 800a4b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	0c1b      	lsrs	r3, r3, #16
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e011      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a4d8:	e009      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4e8:	e001      	b.n	800a4ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3720      	adds	r7, #32
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000000 	.word	0x20000000
 800a4fc:	10624dd3 	.word	0x10624dd3

0800a500 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a508:	4b22      	ldr	r3, [pc, #136]	@ (800a594 <SDMMC_GetCmdResp7+0x94>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a22      	ldr	r2, [pc, #136]	@ (800a598 <SDMMC_GetCmdResp7+0x98>)
 800a50e:	fba2 2303 	umull	r2, r3, r2, r3
 800a512:	0a5b      	lsrs	r3, r3, #9
 800a514:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a518:	fb02 f303 	mul.w	r3, r2, r3
 800a51c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1e5a      	subs	r2, r3, #1
 800a522:	60fa      	str	r2, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a528:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a52c:	e02c      	b.n	800a588 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a532:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0ef      	beq.n	800a51e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1ea      	bne.n	800a51e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2204      	movs	r2, #4
 800a558:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a55a:	2304      	movs	r3, #4
 800a55c:	e014      	b.n	800a588 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d004      	beq.n	800a574 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a570:	2301      	movs	r3, #1
 800a572:	e009      	b.n	800a588 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2240      	movs	r2, #64	@ 0x40
 800a584:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a586:	2300      	movs	r3, #0
  
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	20000000 	.word	0x20000000
 800a598:	10624dd3 	.word	0x10624dd3

0800a59c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5a4:	4b11      	ldr	r3, [pc, #68]	@ (800a5ec <SDMMC_GetCmdError+0x50>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a11      	ldr	r2, [pc, #68]	@ (800a5f0 <SDMMC_GetCmdError+0x54>)
 800a5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ae:	0a5b      	lsrs	r3, r3, #9
 800a5b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5b4:	fb02 f303 	mul.w	r3, r2, r3
 800a5b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	1e5a      	subs	r2, r3, #1
 800a5be:	60fa      	str	r2, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5c8:	e009      	b.n	800a5de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0f1      	beq.n	800a5ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	22c5      	movs	r2, #197	@ 0xc5
 800a5da:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	20000000 	.word	0x20000000
 800a5f0:	10624dd3 	.word	0x10624dd3

0800a5f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	f107 001c 	add.w	r0, r7, #28
 800a602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a606:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d123      	bne.n	800a656 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a612:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a636:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d105      	bne.n	800a64a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f9dc 	bl	800aa08 <USB_CoreReset>
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]
 800a654:	e01b      	b.n	800a68e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f9d0 	bl	800aa08 <USB_CoreReset>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a66c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a678:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a680:	e005      	b.n	800a68e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a686:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a68e:	7fbb      	ldrb	r3, [r7, #30]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d10b      	bne.n	800a6ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f043 0206 	orr.w	r2, r3, #6
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f043 0220 	orr.w	r2, r3, #32
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6b8:	b004      	add	sp, #16
 800a6ba:	4770      	bx	lr

0800a6bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f043 0201 	orr.w	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f023 0201 	bic.w	r2, r3, #1
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d115      	bne.n	800a74e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a72e:	200a      	movs	r0, #10
 800a730:	f7f7 fce8 	bl	8002104 <HAL_Delay>
      ms += 10U;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	330a      	adds	r3, #10
 800a738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f956 	bl	800a9ec <USB_GetMode>
 800a740:	4603      	mov	r3, r0
 800a742:	2b01      	cmp	r3, #1
 800a744:	d01e      	beq.n	800a784 <USB_SetCurrentMode+0x84>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2bc7      	cmp	r3, #199	@ 0xc7
 800a74a:	d9f0      	bls.n	800a72e <USB_SetCurrentMode+0x2e>
 800a74c:	e01a      	b.n	800a784 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a74e:	78fb      	ldrb	r3, [r7, #3]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d115      	bne.n	800a780 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a760:	200a      	movs	r0, #10
 800a762:	f7f7 fccf 	bl	8002104 <HAL_Delay>
      ms += 10U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	330a      	adds	r3, #10
 800a76a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f93d 	bl	800a9ec <USB_GetMode>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <USB_SetCurrentMode+0x84>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a77c:	d9f0      	bls.n	800a760 <USB_SetCurrentMode+0x60>
 800a77e:	e001      	b.n	800a784 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e005      	b.n	800a790 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2bc8      	cmp	r3, #200	@ 0xc8
 800a788:	d101      	bne.n	800a78e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e000      	b.n	800a790 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7b2:	d901      	bls.n	800a7b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e01b      	b.n	800a7f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	daf2      	bge.n	800a7a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	019b      	lsls	r3, r3, #6
 800a7c8:	f043 0220 	orr.w	r2, r3, #32
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7dc:	d901      	bls.n	800a7e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e006      	b.n	800a7f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d0f0      	beq.n	800a7d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a814:	d901      	bls.n	800a81a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e018      	b.n	800a84c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	daf2      	bge.n	800a808 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2210      	movs	r2, #16
 800a82a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	3301      	adds	r3, #1
 800a830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a838:	d901      	bls.n	800a83e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e006      	b.n	800a84c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f003 0310 	and.w	r3, r3, #16
 800a846:	2b10      	cmp	r3, #16
 800a848:	d0f0      	beq.n	800a82c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a858:	b480      	push	{r7}
 800a85a:	b089      	sub	sp, #36	@ 0x24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4611      	mov	r1, r2
 800a864:	461a      	mov	r2, r3
 800a866:	460b      	mov	r3, r1
 800a868:	71fb      	strb	r3, [r7, #7]
 800a86a:	4613      	mov	r3, r2
 800a86c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d123      	bne.n	800a8c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a87e:	88bb      	ldrh	r3, [r7, #4]
 800a880:	3303      	adds	r3, #3
 800a882:	089b      	lsrs	r3, r3, #2
 800a884:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a886:	2300      	movs	r3, #0
 800a888:	61bb      	str	r3, [r7, #24]
 800a88a:	e018      	b.n	800a8be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	031a      	lsls	r2, r3, #12
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	4413      	add	r3, r2
 800a894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a898:	461a      	mov	r2, r3
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d3e2      	bcc.n	800a88c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3724      	adds	r7, #36	@ 0x24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b08b      	sub	sp, #44	@ 0x2c
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a8ea:	88fb      	ldrh	r3, [r7, #6]
 800a8ec:	089b      	lsrs	r3, r3, #2
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	f003 0303 	and.w	r3, r3, #3
 800a8f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	623b      	str	r3, [r7, #32]
 800a8fe:	e014      	b.n	800a92a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90e:	3301      	adds	r3, #1
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a914:	3301      	adds	r3, #1
 800a916:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91a:	3301      	adds	r3, #1
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	3301      	adds	r3, #1
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	3301      	adds	r3, #1
 800a928:	623b      	str	r3, [r7, #32]
 800a92a:	6a3a      	ldr	r2, [r7, #32]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d3e6      	bcc.n	800a900 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a932:	8bfb      	ldrh	r3, [r7, #30]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01e      	beq.n	800a976 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a942:	461a      	mov	r2, r3
 800a944:	f107 0310 	add.w	r3, r7, #16
 800a948:	6812      	ldr	r2, [r2, #0]
 800a94a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	701a      	strb	r2, [r3, #0]
      i++;
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	3301      	adds	r3, #1
 800a962:	623b      	str	r3, [r7, #32]
      pDest++;
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	3301      	adds	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a96a:	8bfb      	ldrh	r3, [r7, #30]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a970:	8bfb      	ldrh	r3, [r7, #30]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1ea      	bne.n	800a94c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a978:	4618      	mov	r0, r3
 800a97a:	372c      	adds	r7, #44	@ 0x2c
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	4013      	ands	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a99c:	68fb      	ldr	r3, [r7, #12]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9de:	68bb      	ldr	r3, [r7, #8]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	f003 0301 	and.w	r3, r3, #1
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3301      	adds	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa20:	d901      	bls.n	800aa26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e01b      	b.n	800aa5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	daf2      	bge.n	800aa14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	f043 0201 	orr.w	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3301      	adds	r3, #1
 800aa42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa4a:	d901      	bls.n	800aa50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e006      	b.n	800aa5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d0f0      	beq.n	800aa3e <USB_CoreReset+0x36>

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
	...

0800aa6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b086      	sub	sp, #24
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aa7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	2300      	movs	r3, #0
 800aa90:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d119      	bne.n	800aade <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aaaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d10a      	bne.n	800aac8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	e014      	b.n	800aaf2 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aad6:	f023 0304 	bic.w	r3, r3, #4
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	e009      	b.n	800aaf2 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aaec:	f023 0304 	bic.w	r3, r3, #4
 800aaf0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aaf2:	2110      	movs	r1, #16
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff fe4f 	bl	800a798 <USB_FlushTxFifo>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fe79 	bl	800a7fc <USB_FlushRxFifo>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab14:	2300      	movs	r3, #0
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	e015      	b.n	800ab46 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab26:	461a      	mov	r2, r3
 800ab28:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3301      	adds	r3, #1
 800ab44:	613b      	str	r3, [r7, #16]
 800ab46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d3e3      	bcc.n	800ab1a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a18      	ldr	r2, [pc, #96]	@ (800abc4 <USB_HostInit+0x158>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d10b      	bne.n	800ab80 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab6e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a15      	ldr	r2, [pc, #84]	@ (800abc8 <USB_HostInit+0x15c>)
 800ab74:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a14      	ldr	r2, [pc, #80]	@ (800abcc <USB_HostInit+0x160>)
 800ab7a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ab7e:	e009      	b.n	800ab94 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2280      	movs	r2, #128	@ 0x80
 800ab84:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a11      	ldr	r2, [pc, #68]	@ (800abd0 <USB_HostInit+0x164>)
 800ab8a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a11      	ldr	r2, [pc, #68]	@ (800abd4 <USB_HostInit+0x168>)
 800ab90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d105      	bne.n	800aba8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	f043 0210 	orr.w	r2, r3, #16
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	699a      	ldr	r2, [r3, #24]
 800abac:	4b0a      	ldr	r3, [pc, #40]	@ (800abd8 <USB_HostInit+0x16c>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abc0:	b004      	add	sp, #16
 800abc2:	4770      	bx	lr
 800abc4:	40040000 	.word	0x40040000
 800abc8:	01000200 	.word	0x01000200
 800abcc:	00e00300 	.word	0x00e00300
 800abd0:	00600080 	.word	0x00600080
 800abd4:	004000e0 	.word	0x004000e0
 800abd8:	a3200008 	.word	0xa3200008

0800abdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	68f9      	ldr	r1, [r7, #12]
 800ac10:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ac14:	4313      	orrs	r3, r2
 800ac16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d107      	bne.n	800ac2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac24:	461a      	mov	r2, r3
 800ac26:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ac2a:	6053      	str	r3, [r2, #4]
 800ac2c:	e00c      	b.n	800ac48 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d107      	bne.n	800ac44 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ac40:	6053      	str	r3, [r2, #4]
 800ac42:	e001      	b.n	800ac48 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ac76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ac80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac84:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ac86:	2064      	movs	r0, #100	@ 0x64
 800ac88:	f7f7 fa3c 	bl	8002104 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ac94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac98:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ac9a:	200a      	movs	r0, #10
 800ac9c:	f7f7 fa32 	bl	8002104 <HAL_Delay>

  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800acce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <USB_DriveVbus+0x44>
 800acda:	78fb      	ldrb	r3, [r7, #3]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d106      	bne.n	800acee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ace8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800acec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800acf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acf8:	d109      	bne.n	800ad0e <USB_DriveVbus+0x64>
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ad08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad0c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	0c5b      	lsrs	r3, r3, #17
 800ad3a:	f003 0303 	and.w	r3, r3, #3
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	b29b      	uxth	r3, r3
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	70fb      	strb	r3, [r7, #3]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70bb      	strb	r3, [r7, #2]
 800ad82:	4613      	mov	r3, r2
 800ad84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ada0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ada2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d87c      	bhi.n	800aea4 <USB_HC_Init+0x138>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <USB_HC_Init+0x44>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800adc1 	.word	0x0800adc1
 800adb4:	0800ae67 	.word	0x0800ae67
 800adb8:	0800adc1 	.word	0x0800adc1
 800adbc:	0800ae29 	.word	0x0800ae29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adcc:	461a      	mov	r2, r3
 800adce:	f240 439d 	movw	r3, #1181	@ 0x49d
 800add2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800add4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da10      	bge.n	800adfe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	78fa      	ldrb	r2, [r7, #3]
 800adec:	0151      	lsls	r1, r2, #5
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	440a      	add	r2, r1
 800adf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adfa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800adfc:	e055      	b.n	800aeaa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a6f      	ldr	r2, [pc, #444]	@ (800afc0 <USB_HC_Init+0x254>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d151      	bne.n	800aeaa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ae24:	60d3      	str	r3, [r2, #12]
      break;
 800ae26:	e040      	b.n	800aeaa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae34:	461a      	mov	r2, r3
 800ae36:	f240 639d 	movw	r3, #1693	@ 0x69d
 800ae3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ae3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	da34      	bge.n	800aeae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	78fa      	ldrb	r2, [r7, #3]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae62:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ae64:	e023      	b.n	800aeae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae66:	78fb      	ldrb	r3, [r7, #3]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae72:	461a      	mov	r2, r3
 800ae74:	f240 2325 	movw	r3, #549	@ 0x225
 800ae78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ae7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	da17      	bge.n	800aeb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ae82:	78fb      	ldrb	r3, [r7, #3]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	0151      	lsls	r1, r2, #5
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	440a      	add	r2, r1
 800ae98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae9c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800aea0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800aea2:	e006      	b.n	800aeb2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	77fb      	strb	r3, [r7, #31]
      break;
 800aea8:	e004      	b.n	800aeb4 <USB_HC_Init+0x148>
      break;
 800aeaa:	bf00      	nop
 800aeac:	e002      	b.n	800aeb4 <USB_HC_Init+0x148>
      break;
 800aeae:	bf00      	nop
 800aeb0:	e000      	b.n	800aeb4 <USB_HC_Init+0x148>
      break;
 800aeb2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800aeb4:	78fb      	ldrb	r3, [r7, #3]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aec0:	461a      	mov	r2, r3
 800aec2:	2300      	movs	r3, #0
 800aec4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	78fa      	ldrb	r2, [r7, #3]
 800aed6:	0151      	lsls	r1, r2, #5
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	440a      	add	r2, r1
 800aedc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aee0:	f043 0302 	orr.w	r3, r3, #2
 800aee4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aeec:	699a      	ldr	r2, [r3, #24]
 800aeee:	78fb      	ldrb	r3, [r7, #3]
 800aef0:	f003 030f 	and.w	r3, r3, #15
 800aef4:	2101      	movs	r1, #1
 800aef6:	fa01 f303 	lsl.w	r3, r1, r3
 800aefa:	6939      	ldr	r1, [r7, #16]
 800aefc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800af00:	4313      	orrs	r3, r2
 800af02:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800af10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af14:	2b00      	cmp	r3, #0
 800af16:	da03      	bge.n	800af20 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800af18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	e001      	b.n	800af24 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fef9 	bl	800ad1c <USB_GetHostSpeed>
 800af2a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800af2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af30:	2b02      	cmp	r3, #2
 800af32:	d106      	bne.n	800af42 <USB_HC_Init+0x1d6>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b02      	cmp	r3, #2
 800af38:	d003      	beq.n	800af42 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800af3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	e001      	b.n	800af46 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af46:	787b      	ldrb	r3, [r7, #1]
 800af48:	059b      	lsls	r3, r3, #22
 800af4a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af4e:	78bb      	ldrb	r3, [r7, #2]
 800af50:	02db      	lsls	r3, r3, #11
 800af52:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af56:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af5c:	049b      	lsls	r3, r3, #18
 800af5e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800af64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800af66:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af6a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	431a      	orrs	r2, r3
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af74:	78fa      	ldrb	r2, [r7, #3]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800af80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af84:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800af86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d003      	beq.n	800af96 <USB_HC_Init+0x22a>
 800af8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af92:	2b01      	cmp	r3, #1
 800af94:	d10f      	bne.n	800afb6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	015a      	lsls	r2, r3, #5
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	4413      	add	r3, r2
 800af9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	0151      	lsls	r1, r2, #5
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	440a      	add	r2, r1
 800afac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800afb4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800afb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3720      	adds	r7, #32
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	40040000 	.word	0x40040000

0800afc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08c      	sub	sp, #48	@ 0x30
 800afc8:	af02      	add	r7, sp, #8
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	785b      	ldrb	r3, [r3, #1]
 800afda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800afdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afe0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4a5d      	ldr	r2, [pc, #372]	@ (800b15c <USB_HC_StartXfer+0x198>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d12f      	bne.n	800b04a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d11c      	bne.n	800b02a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	7c9b      	ldrb	r3, [r3, #18]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <USB_HC_StartXfer+0x3c>
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	7c9b      	ldrb	r3, [r3, #18]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d124      	bne.n	800b04a <USB_HC_StartXfer+0x86>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	799b      	ldrb	r3, [r3, #6]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d120      	bne.n	800b04a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	0151      	lsls	r1, r2, #5
 800b01a:	6a3a      	ldr	r2, [r7, #32]
 800b01c:	440a      	add	r2, r1
 800b01e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b026:	60d3      	str	r3, [r2, #12]
 800b028:	e00f      	b.n	800b04a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	791b      	ldrb	r3, [r3, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10b      	bne.n	800b04a <USB_HC_StartXfer+0x86>
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	795b      	ldrb	r3, [r3, #5]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d107      	bne.n	800b04a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	4619      	mov	r1, r3
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 fb6b 	bl	800b71c <USB_DoPing>
        return HAL_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	e232      	b.n	800b4b0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	799b      	ldrb	r3, [r3, #6]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d158      	bne.n	800b104 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b052:	2301      	movs	r3, #1
 800b054:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	78db      	ldrb	r3, [r3, #3]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b05e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	8a92      	ldrh	r2, [r2, #20]
 800b064:	fb03 f202 	mul.w	r2, r3, r2
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	61da      	str	r2, [r3, #28]
 800b06c:	e07c      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	7c9b      	ldrb	r3, [r3, #18]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d130      	bne.n	800b0d8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	2bbc      	cmp	r3, #188	@ 0xbc
 800b07c:	d918      	bls.n	800b0b0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	8a9b      	ldrh	r3, [r3, #20]
 800b082:	461a      	mov	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	69da      	ldr	r2, [r3, #28]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d003      	beq.n	800b0a0 <USB_HC_StartXfer+0xdc>
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d103      	bne.n	800b0a8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	60da      	str	r2, [r3, #12]
 800b0a6:	e05f      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	60da      	str	r2, [r3, #12]
 800b0ae:	e05b      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	6a1a      	ldr	r2, [r3, #32]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d007      	beq.n	800b0d0 <USB_HC_StartXfer+0x10c>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d003      	beq.n	800b0d0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2204      	movs	r2, #4
 800b0cc:	60da      	str	r2, [r3, #12]
 800b0ce:	e04b      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	e047      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b0d8:	79fb      	ldrb	r3, [r7, #7]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d10d      	bne.n	800b0fa <USB_HC_StartXfer+0x136>
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	8a92      	ldrh	r2, [r2, #20]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d907      	bls.n	800b0fa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b0ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	8a92      	ldrh	r2, [r2, #20]
 800b0f0:	fb03 f202 	mul.w	r2, r3, r2
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	61da      	str	r2, [r3, #28]
 800b0f8:	e036      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	6a1a      	ldr	r2, [r3, #32]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	61da      	str	r2, [r3, #28]
 800b102:	e031      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d018      	beq.n	800b13e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	8a92      	ldrh	r2, [r2, #20]
 800b114:	4413      	add	r3, r2
 800b116:	3b01      	subs	r3, #1
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	8a92      	ldrh	r2, [r2, #20]
 800b11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b120:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b122:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b124:	8b7b      	ldrh	r3, [r7, #26]
 800b126:	429a      	cmp	r2, r3
 800b128:	d90b      	bls.n	800b142 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b12a:	8b7b      	ldrh	r3, [r7, #26]
 800b12c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b12e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	8a92      	ldrh	r2, [r2, #20]
 800b134:	fb03 f202 	mul.w	r2, r3, r2
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	61da      	str	r2, [r3, #28]
 800b13c:	e001      	b.n	800b142 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b13e:	2301      	movs	r3, #1
 800b140:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	78db      	ldrb	r3, [r3, #3]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b14a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	8a92      	ldrh	r2, [r2, #20]
 800b150:	fb03 f202 	mul.w	r2, r3, r2
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	61da      	str	r2, [r3, #28]
 800b158:	e006      	b.n	800b168 <USB_HC_StartXfer+0x1a4>
 800b15a:	bf00      	nop
 800b15c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	6a1a      	ldr	r2, [r3, #32]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b170:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b172:	04d9      	lsls	r1, r3, #19
 800b174:	4ba3      	ldr	r3, [pc, #652]	@ (800b404 <USB_HC_StartXfer+0x440>)
 800b176:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b178:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	7d9b      	ldrb	r3, [r3, #22]
 800b17e:	075b      	lsls	r3, r3, #29
 800b180:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b184:	69f9      	ldr	r1, [r7, #28]
 800b186:	0148      	lsls	r0, r1, #5
 800b188:	6a39      	ldr	r1, [r7, #32]
 800b18a:	4401      	add	r1, r0
 800b18c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b190:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b192:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d009      	beq.n	800b1ae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6999      	ldr	r1, [r3, #24]
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1aa:	460a      	mov	r2, r1
 800b1ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bf0c      	ite	eq
 800b1be:	2301      	moveq	r3, #1
 800b1c0:	2300      	movne	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69fa      	ldr	r2, [r7, #28]
 800b1d6:	0151      	lsls	r1, r2, #5
 800b1d8:	6a3a      	ldr	r2, [r7, #32]
 800b1da:	440a      	add	r2, r1
 800b1dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b1e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	7e7b      	ldrb	r3, [r7, #25]
 800b1f6:	075b      	lsls	r3, r3, #29
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	0148      	lsls	r0, r1, #5
 800b1fc:	6a39      	ldr	r1, [r7, #32]
 800b1fe:	4401      	add	r1, r0
 800b200:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b204:	4313      	orrs	r3, r2
 800b206:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	799b      	ldrb	r3, [r3, #6]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	f040 80c3 	bne.w	800b398 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	7c5b      	ldrb	r3, [r3, #17]
 800b216:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b21c:	4313      	orrs	r3, r2
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	0151      	lsls	r1, r2, #5
 800b222:	6a3a      	ldr	r2, [r7, #32]
 800b224:	440a      	add	r2, r1
 800b226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b22a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b22e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	4413      	add	r3, r2
 800b238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	0151      	lsls	r1, r2, #5
 800b242:	6a3a      	ldr	r2, [r7, #32]
 800b244:	440a      	add	r2, r1
 800b246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b24a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b24e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	79db      	ldrb	r3, [r3, #7]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d123      	bne.n	800b2a0 <USB_HC_StartXfer+0x2dc>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	78db      	ldrb	r3, [r3, #3]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d11f      	bne.n	800b2a0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	4413      	add	r3, r2
 800b268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	69fa      	ldr	r2, [r7, #28]
 800b270:	0151      	lsls	r1, r2, #5
 800b272:	6a3a      	ldr	r2, [r7, #32]
 800b274:	440a      	add	r2, r1
 800b276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b27a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b27e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	4413      	add	r3, r2
 800b288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	0151      	lsls	r1, r2, #5
 800b292:	6a3a      	ldr	r2, [r7, #32]
 800b294:	440a      	add	r2, r1
 800b296:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b29e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	7c9b      	ldrb	r3, [r3, #18]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d003      	beq.n	800b2b0 <USB_HC_StartXfer+0x2ec>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	7c9b      	ldrb	r3, [r3, #18]
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d117      	bne.n	800b2e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d113      	bne.n	800b2e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	78db      	ldrb	r3, [r3, #3]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d10f      	bne.n	800b2e0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	6a3a      	ldr	r2, [r7, #32]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2de:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	7c9b      	ldrb	r3, [r3, #18]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d162      	bne.n	800b3ae <USB_HC_StartXfer+0x3ea>
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	78db      	ldrb	r3, [r3, #3]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d15e      	bne.n	800b3ae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d858      	bhi.n	800b3ac <USB_HC_StartXfer+0x3e8>
 800b2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b300 <USB_HC_StartXfer+0x33c>)
 800b2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b300:	0800b311 	.word	0x0800b311
 800b304:	0800b333 	.word	0x0800b333
 800b308:	0800b355 	.word	0x0800b355
 800b30c:	0800b377 	.word	0x0800b377
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	4413      	add	r3, r2
 800b318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	69fa      	ldr	r2, [r7, #28]
 800b320:	0151      	lsls	r1, r2, #5
 800b322:	6a3a      	ldr	r2, [r7, #32]
 800b324:	440a      	add	r2, r1
 800b326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b32a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b32e:	6053      	str	r3, [r2, #4]
          break;
 800b330:	e03d      	b.n	800b3ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	015a      	lsls	r2, r3, #5
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	4413      	add	r3, r2
 800b33a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	69fa      	ldr	r2, [r7, #28]
 800b342:	0151      	lsls	r1, r2, #5
 800b344:	6a3a      	ldr	r2, [r7, #32]
 800b346:	440a      	add	r2, r1
 800b348:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b34c:	f043 030e 	orr.w	r3, r3, #14
 800b350:	6053      	str	r3, [r2, #4]
          break;
 800b352:	e02c      	b.n	800b3ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	6a3a      	ldr	r2, [r7, #32]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b36e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b372:	6053      	str	r3, [r2, #4]
          break;
 800b374:	e01b      	b.n	800b3ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b394:	6053      	str	r3, [r2, #4]
          break;
 800b396:	e00a      	b.n	800b3ae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	6053      	str	r3, [r2, #4]
 800b3aa:	e000      	b.n	800b3ae <USB_HC_StartXfer+0x3ea>
          break;
 800b3ac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b3c4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	78db      	ldrb	r3, [r3, #3]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d004      	beq.n	800b3d8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3d4:	613b      	str	r3, [r7, #16]
 800b3d6:	e003      	b.n	800b3e0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3de:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b3e6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b3fa:	79fb      	ldrb	r3, [r7, #7]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	e055      	b.n	800b4b0 <USB_HC_StartXfer+0x4ec>
 800b404:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	78db      	ldrb	r3, [r3, #3]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d14e      	bne.n	800b4ae <USB_HC_StartXfer+0x4ea>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d04a      	beq.n	800b4ae <USB_HC_StartXfer+0x4ea>
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	79db      	ldrb	r3, [r3, #7]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d146      	bne.n	800b4ae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	7c9b      	ldrb	r3, [r3, #18]
 800b424:	2b03      	cmp	r3, #3
 800b426:	d831      	bhi.n	800b48c <USB_HC_StartXfer+0x4c8>
 800b428:	a201      	add	r2, pc, #4	@ (adr r2, 800b430 <USB_HC_StartXfer+0x46c>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b441 	.word	0x0800b441
 800b434:	0800b465 	.word	0x0800b465
 800b438:	0800b441 	.word	0x0800b441
 800b43c:	0800b465 	.word	0x0800b465
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	3303      	adds	r3, #3
 800b446:	089b      	lsrs	r3, r3, #2
 800b448:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b44a:	8afa      	ldrh	r2, [r7, #22]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b450:	b29b      	uxth	r3, r3
 800b452:	429a      	cmp	r2, r3
 800b454:	d91c      	bls.n	800b490 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f043 0220 	orr.w	r2, r3, #32
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	619a      	str	r2, [r3, #24]
        }
        break;
 800b462:	e015      	b.n	800b490 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	3303      	adds	r3, #3
 800b46a:	089b      	lsrs	r3, r3, #2
 800b46c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b46e:	8afa      	ldrh	r2, [r7, #22]
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d90a      	bls.n	800b494 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	619a      	str	r2, [r3, #24]
        }
        break;
 800b48a:	e003      	b.n	800b494 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b48c:	bf00      	nop
 800b48e:	e002      	b.n	800b496 <USB_HC_StartXfer+0x4d2>
        break;
 800b490:	bf00      	nop
 800b492:	e000      	b.n	800b496 <USB_HC_StartXfer+0x4d2>
        break;
 800b494:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6999      	ldr	r1, [r3, #24]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	785a      	ldrb	r2, [r3, #1]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	9000      	str	r0, [sp, #0]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7ff f9d5 	bl	800a858 <USB_WritePacket>
  }

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3728      	adds	r7, #40	@ 0x28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	b29b      	uxth	r3, r3
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b089      	sub	sp, #36	@ 0x24
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	0c9b      	lsrs	r3, r3, #18
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	0fdb      	lsrs	r3, r3, #31
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	0fdb      	lsrs	r3, r3, #31
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b20      	cmp	r3, #32
 800b53e:	d10d      	bne.n	800b55c <USB_HC_Halt+0x82>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10a      	bne.n	800b55c <USB_HC_Halt+0x82>
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d002      	beq.n	800b558 <USB_HC_Halt+0x7e>
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b03      	cmp	r3, #3
 800b556:	d101      	bne.n	800b55c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	e0d8      	b.n	800b70e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <USB_HC_Halt+0x8e>
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d173      	bne.n	800b650 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	0151      	lsls	r1, r2, #5
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	440a      	add	r2, r1
 800b57e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b582:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b586:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f003 0320 	and.w	r3, r3, #32
 800b590:	2b00      	cmp	r3, #0
 800b592:	d14a      	bne.n	800b62a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b598:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d133      	bne.n	800b608 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	0151      	lsls	r1, r2, #5
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	440a      	add	r2, r1
 800b5b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5be:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	0151      	lsls	r1, r2, #5
 800b5d2:	69fa      	ldr	r2, [r7, #28]
 800b5d4:	440a      	add	r2, r1
 800b5d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5de:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b5ec:	d82e      	bhi.n	800b64c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	015a      	lsls	r2, r3, #5
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b604:	d0ec      	beq.n	800b5e0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b606:	e081      	b.n	800b70c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	69ba      	ldr	r2, [r7, #24]
 800b618:	0151      	lsls	r1, r2, #5
 800b61a:	69fa      	ldr	r2, [r7, #28]
 800b61c:	440a      	add	r2, r1
 800b61e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b626:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b628:	e070      	b.n	800b70c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	4413      	add	r3, r2
 800b632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	0151      	lsls	r1, r2, #5
 800b63c:	69fa      	ldr	r2, [r7, #28]
 800b63e:	440a      	add	r2, r1
 800b640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b648:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b64a:	e05f      	b.n	800b70c <USB_HC_Halt+0x232>
            break;
 800b64c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b64e:	e05d      	b.n	800b70c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	4413      	add	r3, r2
 800b658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	69fa      	ldr	r2, [r7, #28]
 800b664:	440a      	add	r2, r1
 800b666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b66a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b66e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d133      	bne.n	800b6e8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	4413      	add	r3, r2
 800b688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	69ba      	ldr	r2, [r7, #24]
 800b690:	0151      	lsls	r1, r2, #5
 800b692:	69fa      	ldr	r2, [r7, #28]
 800b694:	440a      	add	r2, r1
 800b696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b69a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b69e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69ba      	ldr	r2, [r7, #24]
 800b6b0:	0151      	lsls	r1, r2, #5
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	440a      	add	r2, r1
 800b6b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6be:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6cc:	d81d      	bhi.n	800b70a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6e4:	d0ec      	beq.n	800b6c0 <USB_HC_Halt+0x1e6>
 800b6e6:	e011      	b.n	800b70c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	e000      	b.n	800b70c <USB_HC_Halt+0x232>
          break;
 800b70a:	bf00      	nop
    }
  }

  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3724      	adds	r7, #36	@ 0x24
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
	...

0800b71c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b730:	2301      	movs	r3, #1
 800b732:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	04da      	lsls	r2, r3, #19
 800b738:	4b15      	ldr	r3, [pc, #84]	@ (800b790 <USB_DoPing+0x74>)
 800b73a:	4013      	ands	r3, r2
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	0151      	lsls	r1, r2, #5
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	440a      	add	r2, r1
 800b744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b748:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b74c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	4413      	add	r3, r2
 800b756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b764:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b76c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	015a      	lsls	r2, r3, #5
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	4413      	add	r3, r2
 800b776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b77a:	461a      	mov	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	1ff80000 	.word	0x1ff80000

0800b794 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7fe ff98 	bl	800a6de <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7ae:	2110      	movs	r1, #16
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7fe fff1 	bl	800a798 <USB_FlushTxFifo>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff f81b 	bl	800a7fc <USB_FlushRxFifo>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	61bb      	str	r3, [r7, #24]
 800b7d4:	e01f      	b.n	800b816 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b7ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	4413      	add	r3, r2
 800b806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b80a:	461a      	mov	r2, r3
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	3301      	adds	r3, #1
 800b814:	61bb      	str	r3, [r7, #24]
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	2b0f      	cmp	r3, #15
 800b81a:	d9dc      	bls.n	800b7d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b81c:	2300      	movs	r3, #0
 800b81e:	61bb      	str	r3, [r7, #24]
 800b820:	e034      	b.n	800b88c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	015a      	lsls	r2, r3, #5
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	4413      	add	r3, r2
 800b82a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b838:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b840:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b848:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	015a      	lsls	r2, r3, #5
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	4413      	add	r3, r2
 800b852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b856:	461a      	mov	r2, r3
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3301      	adds	r3, #1
 800b860:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b868:	d80c      	bhi.n	800b884 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	4413      	add	r3, r2
 800b872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b87c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b880:	d0ec      	beq.n	800b85c <USB_StopHost+0xc8>
 800b882:	e000      	b.n	800b886 <USB_StopHost+0xf2>
        break;
 800b884:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	3301      	adds	r3, #1
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	2b0f      	cmp	r3, #15
 800b890:	d9c7      	bls.n	800b822 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b898:	461a      	mov	r2, r3
 800b89a:	f04f 33ff 	mov.w	r3, #4294967295
 800b89e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7fe ff07 	bl	800a6bc <USB_EnableGlobalInt>

  return ret;
 800b8ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b8bc:	4904      	ldr	r1, [pc, #16]	@ (800b8d0 <MX_FATFS_Init+0x18>)
 800b8be:	4805      	ldr	r0, [pc, #20]	@ (800b8d4 <MX_FATFS_Init+0x1c>)
 800b8c0:	f004 fc4c 	bl	801015c <FATFS_LinkDriver>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	4b03      	ldr	r3, [pc, #12]	@ (800b8d8 <MX_FATFS_Init+0x20>)
 800b8ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b8cc:	bf00      	nop
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20000800 	.word	0x20000800
 800b8d4:	08010cf0 	.word	0x08010cf0
 800b8d8:	200007fc 	.word	0x200007fc

0800b8dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b8e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b8f6:	f000 f86d 	bl	800b9d4 <BSP_SD_IsDetected>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d001      	beq.n	800b904 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e005      	b.n	800b910 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b904:	4804      	ldr	r0, [pc, #16]	@ (800b918 <BSP_SD_Init+0x2c>)
 800b906:	f7fc fa9d 	bl	8007e44 <HAL_SD_Init>
 800b90a:	4603      	mov	r3, r0
 800b90c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b90e:	79fb      	ldrb	r3, [r7, #7]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	20000554 	.word	0x20000554

0800b91c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	68f9      	ldr	r1, [r7, #12]
 800b932:	4806      	ldr	r0, [pc, #24]	@ (800b94c <BSP_SD_ReadBlocks_DMA+0x30>)
 800b934:	f7fc fb36 	bl	8007fa4 <HAL_SD_ReadBlocks_DMA>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b942:	7dfb      	ldrb	r3, [r7, #23]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20000554 	.word	0x20000554

0800b950 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	68f9      	ldr	r1, [r7, #12]
 800b966:	4806      	ldr	r0, [pc, #24]	@ (800b980 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b968:	f7fc fbfc 	bl	8008164 <HAL_SD_WriteBlocks_DMA>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b976:	7dfb      	ldrb	r3, [r7, #23]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	20000554 	.word	0x20000554

0800b984 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b988:	4805      	ldr	r0, [pc, #20]	@ (800b9a0 <BSP_SD_GetCardState+0x1c>)
 800b98a:	f7fc fea7 	bl	80086dc <HAL_SD_GetCardState>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b04      	cmp	r3, #4
 800b992:	bf14      	ite	ne
 800b994:	2301      	movne	r3, #1
 800b996:	2300      	moveq	r3, #0
 800b998:	b2db      	uxtb	r3, r3
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000554 	.word	0x20000554

0800b9a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	4803      	ldr	r0, [pc, #12]	@ (800b9bc <BSP_SD_GetCardInfo+0x18>)
 800b9b0:	f7fc fe68 	bl	8008684 <HAL_SD_GetCardInfo>
}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20000554 	.word	0x20000554

0800b9c0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b9c8:	f000 f996 	bl	800bcf8 <BSP_SD_ReadCpltCallback>
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b9de:	f000 f80b 	bl	800b9f8 <BSP_PlatformIsDetected>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	b2db      	uxtb	r3, r3
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ba02:	2104      	movs	r1, #4
 800ba04:	4806      	ldr	r0, [pc, #24]	@ (800ba20 <BSP_PlatformIsDetected+0x28>)
 800ba06:	f7f8 f9bb 	bl	8003d80 <HAL_GPIO_ReadPin>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ba10:	2300      	movs	r3, #0
 800ba12:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ba14:	79fb      	ldrb	r3, [r7, #7]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	40021800 	.word	0x40021800

0800ba24 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ba2c:	f7f6 fb5e 	bl	80020ec <HAL_GetTick>
 800ba30:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ba32:	e006      	b.n	800ba42 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba34:	f7ff ffa6 	bl	800b984 <BSP_SD_GetCardState>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e009      	b.n	800ba56 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ba42:	f7f6 fb53 	bl	80020ec <HAL_GetTick>
 800ba46:	4602      	mov	r2, r0
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d8f0      	bhi.n	800ba34 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ba52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ba6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ba98 <SD_CheckStatus+0x38>)
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ba70:	f7ff ff88 	bl	800b984 <BSP_SD_GetCardState>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d107      	bne.n	800ba8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ba7a:	4b07      	ldr	r3, [pc, #28]	@ (800ba98 <SD_CheckStatus+0x38>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	f023 0301 	bic.w	r3, r3, #1
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <SD_CheckStatus+0x38>)
 800ba88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ba8a:	4b03      	ldr	r3, [pc, #12]	@ (800ba98 <SD_CheckStatus+0x38>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b2db      	uxtb	r3, r3
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20000009 	.word	0x20000009

0800ba9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800baa6:	f7ff ff21 	bl	800b8ec <BSP_SD_Init>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d107      	bne.n	800bac0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff ffd4 	bl	800ba60 <SD_CheckStatus>
 800bab8:	4603      	mov	r3, r0
 800baba:	461a      	mov	r2, r3
 800babc:	4b04      	ldr	r3, [pc, #16]	@ (800bad0 <SD_initialize+0x34>)
 800babe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bac0:	4b03      	ldr	r3, [pc, #12]	@ (800bad0 <SD_initialize+0x34>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	b2db      	uxtb	r3, r3
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	20000009 	.word	0x20000009

0800bad4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bade:	79fb      	ldrb	r3, [r7, #7]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff ffbd 	bl	800ba60 <SD_CheckStatus>
 800bae6:	4603      	mov	r3, r0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb04:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bb08:	f7ff ff8c 	bl	800ba24 <SD_CheckStatusWithTimeout>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	da01      	bge.n	800bb16 <SD_read+0x26>
  {
    return res;
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	e03b      	b.n	800bb8e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	68b8      	ldr	r0, [r7, #8]
 800bb1c:	f7ff fefe 	bl	800b91c <BSP_SD_ReadBlocks_DMA>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d132      	bne.n	800bb8c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bb26:	4b1c      	ldr	r3, [pc, #112]	@ (800bb98 <SD_read+0xa8>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bb2c:	f7f6 fade 	bl	80020ec <HAL_GetTick>
 800bb30:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bb32:	bf00      	nop
 800bb34:	4b18      	ldr	r3, [pc, #96]	@ (800bb98 <SD_read+0xa8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d108      	bne.n	800bb4e <SD_read+0x5e>
 800bb3c:	f7f6 fad6 	bl	80020ec <HAL_GetTick>
 800bb40:	4602      	mov	r2, r0
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d9f2      	bls.n	800bb34 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bb4e:	4b12      	ldr	r3, [pc, #72]	@ (800bb98 <SD_read+0xa8>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	75fb      	strb	r3, [r7, #23]
 800bb5a:	e017      	b.n	800bb8c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bb5c:	4b0e      	ldr	r3, [pc, #56]	@ (800bb98 <SD_read+0xa8>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bb62:	f7f6 fac3 	bl	80020ec <HAL_GetTick>
 800bb66:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bb68:	e007      	b.n	800bb7a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb6a:	f7ff ff0b 	bl	800b984 <BSP_SD_GetCardState>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <SD_read+0x8a>
          {
            res = RES_OK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bb78:	e008      	b.n	800bb8c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bb7a:	f7f6 fab7 	bl	80020ec <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d9ee      	bls.n	800bb6a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20000808 	.word	0x20000808

0800bb9c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60b9      	str	r1, [r7, #8]
 800bba4:	607a      	str	r2, [r7, #4]
 800bba6:	603b      	str	r3, [r7, #0]
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bbb0:	4b24      	ldr	r3, [pc, #144]	@ (800bc44 <SD_write+0xa8>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bbb6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bbba:	f7ff ff33 	bl	800ba24 <SD_CheckStatusWithTimeout>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	da01      	bge.n	800bbc8 <SD_write+0x2c>
  {
    return res;
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	e038      	b.n	800bc3a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	68b8      	ldr	r0, [r7, #8]
 800bbce:	f7ff febf 	bl	800b950 <BSP_SD_WriteBlocks_DMA>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d12f      	bne.n	800bc38 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bbd8:	f7f6 fa88 	bl	80020ec <HAL_GetTick>
 800bbdc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bbde:	bf00      	nop
 800bbe0:	4b18      	ldr	r3, [pc, #96]	@ (800bc44 <SD_write+0xa8>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d108      	bne.n	800bbfa <SD_write+0x5e>
 800bbe8:	f7f6 fa80 	bl	80020ec <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d9f2      	bls.n	800bbe0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800bbfa:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <SD_write+0xa8>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	75fb      	strb	r3, [r7, #23]
 800bc06:	e017      	b.n	800bc38 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bc08:	4b0e      	ldr	r3, [pc, #56]	@ (800bc44 <SD_write+0xa8>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bc0e:	f7f6 fa6d 	bl	80020ec <HAL_GetTick>
 800bc12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc14:	e007      	b.n	800bc26 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc16:	f7ff feb5 	bl	800b984 <BSP_SD_GetCardState>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <SD_write+0x8a>
          {
            res = RES_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	75fb      	strb	r3, [r7, #23]
            break;
 800bc24:	e008      	b.n	800bc38 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc26:	f7f6 fa61 	bl	80020ec <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d9ee      	bls.n	800bc16 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000804 	.word	0x20000804

0800bc48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08c      	sub	sp, #48	@ 0x30
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	603a      	str	r2, [r7, #0]
 800bc52:	71fb      	strb	r3, [r7, #7]
 800bc54:	460b      	mov	r3, r1
 800bc56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bc5e:	4b25      	ldr	r3, [pc, #148]	@ (800bcf4 <SD_ioctl+0xac>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <SD_ioctl+0x28>
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e03c      	b.n	800bcea <SD_ioctl+0xa2>

  switch (cmd)
 800bc70:	79bb      	ldrb	r3, [r7, #6]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d834      	bhi.n	800bce0 <SD_ioctl+0x98>
 800bc76:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <SD_ioctl+0x34>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc95 	.word	0x0800bc95
 800bc84:	0800bcad 	.word	0x0800bcad
 800bc88:	0800bcc7 	.word	0x0800bcc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bc92:	e028      	b.n	800bce6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc94:	f107 030c 	add.w	r3, r7, #12
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fe83 	bl	800b9a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bcaa:	e01c      	b.n	800bce6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcac:	f107 030c 	add.w	r3, r7, #12
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff fe77 	bl	800b9a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bcc4:	e00f      	b.n	800bce6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcc6:	f107 030c 	add.w	r3, r7, #12
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff fe6a 	bl	800b9a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd2:	0a5a      	lsrs	r2, r3, #9
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bcde:	e002      	b.n	800bce6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bce0:	2304      	movs	r3, #4
 800bce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800bce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3730      	adds	r7, #48	@ 0x30
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000009 	.word	0x20000009

0800bcf8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bcfc:	4b03      	ldr	r3, [pc, #12]	@ (800bd0c <BSP_SD_ReadCpltCallback+0x14>)
 800bcfe:	2201      	movs	r2, #1
 800bd00:	601a      	str	r2, [r3, #0]
}
 800bd02:	bf00      	nop
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	20000808 	.word	0x20000808

0800bd10 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bd10:	b590      	push	{r4, r7, lr}
 800bd12:	b089      	sub	sp, #36	@ 0x24
 800bd14:	af04      	add	r7, sp, #16
 800bd16:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bd18:	2301      	movs	r3, #1
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	2102      	movs	r1, #2
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fc85 	bl	800c62e <USBH_FindInterface>
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	2bff      	cmp	r3, #255	@ 0xff
 800bd2c:	d002      	beq.n	800bd34 <USBH_CDC_InterfaceInit+0x24>
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d901      	bls.n	800bd38 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bd34:	2302      	movs	r3, #2
 800bd36:	e13d      	b.n	800bfb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fc5a 	bl	800c5f6 <USBH_SelectInterface>
 800bd42:	4603      	mov	r3, r0
 800bd44:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bd46:	7bbb      	ldrb	r3, [r7, #14]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	e131      	b.n	800bfb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800bd56:	2050      	movs	r0, #80	@ 0x50
 800bd58:	f004 fdd0 	bl	80108fc <malloc>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bd70:	2302      	movs	r3, #2
 800bd72:	e11f      	b.n	800bfb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bd74:	2250      	movs	r2, #80	@ 0x50
 800bd76:	2100      	movs	r1, #0
 800bd78:	68b8      	ldr	r0, [r7, #8]
 800bd7a:	f004 fe7d 	bl	8010a78 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	211a      	movs	r1, #26
 800bd84:	fb01 f303 	mul.w	r3, r1, r3
 800bd88:	4413      	add	r3, r2
 800bd8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	b25b      	sxtb	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	da15      	bge.n	800bdc2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	211a      	movs	r1, #26
 800bd9c:	fb01 f303 	mul.w	r3, r1, r3
 800bda0:	4413      	add	r3, r2
 800bda2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	211a      	movs	r1, #26
 800bdb2:	fb01 f303 	mul.w	r3, r1, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bdbc:	881a      	ldrh	r2, [r3, #0]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	785b      	ldrb	r3, [r3, #1]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f001 ffbe 	bl	800dd4a <USBH_AllocPipe>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	7819      	ldrb	r1, [r3, #0]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	7858      	ldrb	r0, [r3, #1]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	8952      	ldrh	r2, [r2, #10]
 800bdee:	9202      	str	r2, [sp, #8]
 800bdf0:	2203      	movs	r2, #3
 800bdf2:	9201      	str	r2, [sp, #4]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	4623      	mov	r3, r4
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 ff76 	bl	800dcec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2200      	movs	r2, #0
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f004 fc3b 	bl	8010684 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800be0e:	2300      	movs	r3, #0
 800be10:	2200      	movs	r2, #0
 800be12:	210a      	movs	r1, #10
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fc0a 	bl	800c62e <USBH_FindInterface>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	2bff      	cmp	r3, #255	@ 0xff
 800be22:	d002      	beq.n	800be2a <USBH_CDC_InterfaceInit+0x11a>
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d901      	bls.n	800be2e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800be2a:	2302      	movs	r3, #2
 800be2c:	e0c2      	b.n	800bfb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	211a      	movs	r1, #26
 800be34:	fb01 f303 	mul.w	r3, r1, r3
 800be38:	4413      	add	r3, r2
 800be3a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b25b      	sxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	da16      	bge.n	800be74 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	211a      	movs	r1, #26
 800be4c:	fb01 f303 	mul.w	r3, r1, r3
 800be50:	4413      	add	r3, r2
 800be52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800be56:	781a      	ldrb	r2, [r3, #0]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	211a      	movs	r1, #26
 800be62:	fb01 f303 	mul.w	r3, r1, r3
 800be66:	4413      	add	r3, r2
 800be68:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800be6c:	881a      	ldrh	r2, [r3, #0]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	835a      	strh	r2, [r3, #26]
 800be72:	e015      	b.n	800bea0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	211a      	movs	r1, #26
 800be7a:	fb01 f303 	mul.w	r3, r1, r3
 800be7e:	4413      	add	r3, r2
 800be80:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800be84:	781a      	ldrb	r2, [r3, #0]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	211a      	movs	r1, #26
 800be90:	fb01 f303 	mul.w	r3, r1, r3
 800be94:	4413      	add	r3, r2
 800be96:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800be9a:	881a      	ldrh	r2, [r3, #0]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	211a      	movs	r1, #26
 800bea6:	fb01 f303 	mul.w	r3, r1, r3
 800beaa:	4413      	add	r3, r2
 800beac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da16      	bge.n	800bee6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	211a      	movs	r1, #26
 800bebe:	fb01 f303 	mul.w	r3, r1, r3
 800bec2:	4413      	add	r3, r2
 800bec4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bec8:	781a      	ldrb	r2, [r3, #0]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	211a      	movs	r1, #26
 800bed4:	fb01 f303 	mul.w	r3, r1, r3
 800bed8:	4413      	add	r3, r2
 800beda:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bede:	881a      	ldrh	r2, [r3, #0]
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	835a      	strh	r2, [r3, #26]
 800bee4:	e015      	b.n	800bf12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	211a      	movs	r1, #26
 800beec:	fb01 f303 	mul.w	r3, r1, r3
 800bef0:	4413      	add	r3, r2
 800bef2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bef6:	781a      	ldrb	r2, [r3, #0]
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	211a      	movs	r1, #26
 800bf02:	fb01 f303 	mul.w	r3, r1, r3
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bf0c:	881a      	ldrh	r2, [r3, #0]
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	7b9b      	ldrb	r3, [r3, #14]
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f001 ff16 	bl	800dd4a <USBH_AllocPipe>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	461a      	mov	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	7bdb      	ldrb	r3, [r3, #15]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 ff0c 	bl	800dd4a <USBH_AllocPipe>
 800bf32:	4603      	mov	r3, r0
 800bf34:	461a      	mov	r2, r3
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	7b59      	ldrb	r1, [r3, #13]
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	7b98      	ldrb	r0, [r3, #14]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	8b12      	ldrh	r2, [r2, #24]
 800bf52:	9202      	str	r2, [sp, #8]
 800bf54:	2202      	movs	r2, #2
 800bf56:	9201      	str	r2, [sp, #4]
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fec4 	bl	800dcec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	7b19      	ldrb	r1, [r3, #12]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	7bd8      	ldrb	r0, [r3, #15]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	8b52      	ldrh	r2, [r2, #26]
 800bf7c:	9202      	str	r2, [sp, #8]
 800bf7e:	2202      	movs	r2, #2
 800bf80:	9201      	str	r2, [sp, #4]
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	4623      	mov	r3, r4
 800bf86:	4602      	mov	r2, r0
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 feaf 	bl	800dcec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	7b5b      	ldrb	r3, [r3, #13]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f004 fb70 	bl	8010684 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	7b1b      	ldrb	r3, [r3, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f004 fb69 	bl	8010684 <USBH_LL_SetToggle>

  return USBH_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd90      	pop	{r4, r7, pc}

0800bfbc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00e      	beq.n	800bff4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 fea4 	bl	800dd2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f001 fecf 	bl	800dd8c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	7b1b      	ldrb	r3, [r3, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00e      	beq.n	800c01a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	7b1b      	ldrb	r3, [r3, #12]
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 fe91 	bl	800dd2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	7b1b      	ldrb	r3, [r3, #12]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f001 febc 	bl	800dd8c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7b5b      	ldrb	r3, [r3, #13]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00e      	beq.n	800c040 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	7b5b      	ldrb	r3, [r3, #13]
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f001 fe7e 	bl	800dd2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	7b5b      	ldrb	r3, [r3, #13]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f001 fea9 	bl	800dd8c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c046:	69db      	ldr	r3, [r3, #28]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c052:	69db      	ldr	r3, [r3, #28]
 800c054:	4618      	mov	r0, r3
 800c056:	f004 fc59 	bl	801090c <free>
    phost->pActiveClass->pData = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c060:	2200      	movs	r2, #0
 800c062:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3340      	adds	r3, #64	@ 0x40
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f8b1 	bl	800c1ee <GetLineCoding>
 800c08c:	4603      	mov	r3, r0
 800c08e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c090:	7afb      	ldrb	r3, [r7, #11]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d105      	bne.n	800c0a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c09c:	2102      	movs	r1, #2
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c0a2:	7afb      	ldrb	r3, [r7, #11]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c0c2:	69db      	ldr	r3, [r3, #28]
 800c0c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c0cc:	2b04      	cmp	r3, #4
 800c0ce:	d877      	bhi.n	800c1c0 <USBH_CDC_Process+0x114>
 800c0d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d8 <USBH_CDC_Process+0x2c>)
 800c0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d6:	bf00      	nop
 800c0d8:	0800c0ed 	.word	0x0800c0ed
 800c0dc:	0800c0f3 	.word	0x0800c0f3
 800c0e0:	0800c123 	.word	0x0800c123
 800c0e4:	0800c197 	.word	0x0800c197
 800c0e8:	0800c1a5 	.word	0x0800c1a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c0f0:	e06d      	b.n	800c1ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f897 	bl	800c22c <SetLineCoding>
 800c0fe:	4603      	mov	r3, r0
 800c100:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c102:	7bbb      	ldrb	r3, [r7, #14]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2202      	movs	r2, #2
 800c10c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c110:	e058      	b.n	800c1c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d055      	beq.n	800c1c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2204      	movs	r2, #4
 800c11c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c120:	e050      	b.n	800c1c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	3340      	adds	r3, #64	@ 0x40
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f860 	bl	800c1ee <GetLineCoding>
 800c12e:	4603      	mov	r3, r0
 800c130:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d126      	bne.n	800c186 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c14a:	791b      	ldrb	r3, [r3, #4]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d13b      	bne.n	800c1c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c15a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d133      	bne.n	800c1c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c16a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d12b      	bne.n	800c1c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c178:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d124      	bne.n	800c1c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f958 	bl	800c434 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c184:	e020      	b.n	800c1c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d01d      	beq.n	800c1c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2204      	movs	r2, #4
 800c190:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c194:	e018      	b.n	800c1c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f867 	bl	800c26a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f8da 	bl	800c356 <CDC_ProcessReception>
      break;
 800c1a2:	e014      	b.n	800c1ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f001 f81a 	bl	800d1e0 <USBH_ClrFeature>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c1be:	e005      	b.n	800c1cc <USBH_CDC_Process+0x120>

    default:
      break;
 800c1c0:	bf00      	nop
 800c1c2:	e004      	b.n	800c1ce <USBH_CDC_Process+0x122>
      break;
 800c1c4:	bf00      	nop
 800c1c6:	e002      	b.n	800c1ce <USBH_CDC_Process+0x122>
      break;
 800c1c8:	bf00      	nop
 800c1ca:	e000      	b.n	800c1ce <USBH_CDC_Process+0x122>
      break;
 800c1cc:	bf00      	nop

  }

  return status;
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	22a1      	movs	r2, #161	@ 0xa1
 800c1fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2221      	movs	r2, #33	@ 0x21
 800c202:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2207      	movs	r2, #7
 800c214:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2207      	movs	r2, #7
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 fb14 	bl	800d84a <USBH_CtlReq>
 800c222:	4603      	mov	r3, r0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2221      	movs	r2, #33	@ 0x21
 800c23a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2207      	movs	r2, #7
 800c252:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2207      	movs	r2, #7
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 faf5 	bl	800d84a <USBH_CtlReq>
 800c260:	4603      	mov	r3, r0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b086      	sub	sp, #24
 800c26e:	af02      	add	r7, sp, #8
 800c270:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c27c:	2300      	movs	r3, #0
 800c27e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c286:	2b01      	cmp	r3, #1
 800c288:	d002      	beq.n	800c290 <CDC_ProcessTransmission+0x26>
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d023      	beq.n	800c2d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c28e:	e05e      	b.n	800c34e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	8b12      	ldrh	r2, [r2, #24]
 800c298:	4293      	cmp	r3, r2
 800c29a:	d90b      	bls.n	800c2b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	69d9      	ldr	r1, [r3, #28]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	8b1a      	ldrh	r2, [r3, #24]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	7b5b      	ldrb	r3, [r3, #13]
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	9000      	str	r0, [sp, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 fcda 	bl	800dc66 <USBH_BulkSendData>
 800c2b2:	e00b      	b.n	800c2cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	7b5b      	ldrb	r3, [r3, #13]
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	9000      	str	r0, [sp, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fccd 	bl	800dc66 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c2d4:	e03b      	b.n	800c34e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	7b5b      	ldrb	r3, [r3, #13]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f004 f9a7 	bl	8010630 <USBH_LL_GetURBState>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d128      	bne.n	800c33e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	8b12      	ldrh	r2, [r2, #24]
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d90e      	bls.n	800c316 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	8b12      	ldrh	r2, [r2, #24]
 800c300:	1a9a      	subs	r2, r3, r2
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	8b12      	ldrh	r2, [r2, #24]
 800c30e:	441a      	add	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	61da      	str	r2, [r3, #28]
 800c314:	e002      	b.n	800c31c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	d004      	beq.n	800c32e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c32c:	e00e      	b.n	800c34c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f868 	bl	800c40c <USBH_CDC_TransmitCallback>
      break;
 800c33c:	e006      	b.n	800c34c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c33e:	7afb      	ldrb	r3, [r7, #11]
 800c340:	2b02      	cmp	r3, #2
 800c342:	d103      	bne.n	800c34c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c34c:	bf00      	nop
  }
}
 800c34e:	bf00      	nop
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c364:	69db      	ldr	r3, [r3, #28]
 800c366:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c368:	2300      	movs	r3, #0
 800c36a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c372:	2b03      	cmp	r3, #3
 800c374:	d002      	beq.n	800c37c <CDC_ProcessReception+0x26>
 800c376:	2b04      	cmp	r3, #4
 800c378:	d00e      	beq.n	800c398 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c37a:	e043      	b.n	800c404 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	6a19      	ldr	r1, [r3, #32]
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	8b5a      	ldrh	r2, [r3, #26]
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	7b1b      	ldrb	r3, [r3, #12]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 fc91 	bl	800dcb0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2204      	movs	r2, #4
 800c392:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c396:	e035      	b.n	800c404 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	7b1b      	ldrb	r3, [r3, #12]
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f004 f946 	bl	8010630 <USBH_LL_GetURBState>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c3a8:	7cfb      	ldrb	r3, [r7, #19]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d129      	bne.n	800c402 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	7b1b      	ldrb	r3, [r3, #12]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f004 f8a9 	bl	801050c <USBH_LL_GetLastXferSize>
 800c3ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d016      	beq.n	800c3f4 <CDC_ProcessReception+0x9e>
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	8b5b      	ldrh	r3, [r3, #26]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d110      	bne.n	800c3f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	1ad2      	subs	r2, r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	6a1a      	ldr	r2, [r3, #32]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	441a      	add	r2, r3
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2203      	movs	r2, #3
 800c3ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c3f2:	e006      	b.n	800c402 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f80f 	bl	800c420 <USBH_CDC_ReceiveCallback>
      break;
 800c402:	bf00      	nop
  }
}
 800c404:	bf00      	nop
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c45c:	2302      	movs	r3, #2
 800c45e:	e029      	b.n	800c4b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	79fa      	ldrb	r2, [r7, #7]
 800c464:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f000 f81f 	bl	800c4bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f003 ff79 	bl	80103a4 <USBH_LL_Init>

  return USBH_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	e009      	b.n	800c4e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	33e0      	adds	r3, #224	@ 0xe0
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	2200      	movs	r2, #0
 800c4da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b0f      	cmp	r3, #15
 800c4e6:	d9f2      	bls.n	800c4ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	e009      	b.n	800c502 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3301      	adds	r3, #1
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c508:	d3f1      	bcc.n	800c4ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2240      	movs	r2, #64	@ 0x40
 800c52e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	331c      	adds	r3, #28
 800c55a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c55e:	2100      	movs	r1, #0
 800c560:	4618      	mov	r0, r3
 800c562:	f004 fa89 	bl	8010a78 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c56c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f004 fa80 	bl	8010a78 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c57e:	2212      	movs	r2, #18
 800c580:	2100      	movs	r1, #0
 800c582:	4618      	mov	r0, r3
 800c584:	f004 fa78 	bl	8010a78 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c58e:	223e      	movs	r2, #62	@ 0x3e
 800c590:	2100      	movs	r1, #0
 800c592:	4618      	mov	r0, r3
 800c594:	f004 fa70 	bl	8010a78 <memset>

  return USBH_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b085      	sub	sp, #20
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d016      	beq.n	800c5e4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10e      	bne.n	800c5de <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c5c6:	1c59      	adds	r1, r3, #1
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	33de      	adds	r3, #222	@ 0xde
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]
 800c5dc:	e004      	b.n	800c5e8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c5de:	2302      	movs	r3, #2
 800c5e0:	73fb      	strb	r3, [r7, #15]
 800c5e2:	e001      	b.n	800c5e8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c60c:	78fa      	ldrb	r2, [r7, #3]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d204      	bcs.n	800c61c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	78fa      	ldrb	r2, [r7, #3]
 800c616:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c61a:	e001      	b.n	800c620 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c61c:	2302      	movs	r3, #2
 800c61e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c62e:	b480      	push	{r7}
 800c630:	b087      	sub	sp, #28
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	4608      	mov	r0, r1
 800c638:	4611      	mov	r1, r2
 800c63a:	461a      	mov	r2, r3
 800c63c:	4603      	mov	r3, r0
 800c63e:	70fb      	strb	r3, [r7, #3]
 800c640:	460b      	mov	r3, r1
 800c642:	70bb      	strb	r3, [r7, #2]
 800c644:	4613      	mov	r3, r2
 800c646:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c648:	2300      	movs	r3, #0
 800c64a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c64c:	2300      	movs	r3, #0
 800c64e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c656:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c658:	e025      	b.n	800c6a6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	221a      	movs	r2, #26
 800c65e:	fb02 f303 	mul.w	r3, r2, r3
 800c662:	3308      	adds	r3, #8
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4413      	add	r3, r2
 800c668:	3302      	adds	r3, #2
 800c66a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	795b      	ldrb	r3, [r3, #5]
 800c670:	78fa      	ldrb	r2, [r7, #3]
 800c672:	429a      	cmp	r2, r3
 800c674:	d002      	beq.n	800c67c <USBH_FindInterface+0x4e>
 800c676:	78fb      	ldrb	r3, [r7, #3]
 800c678:	2bff      	cmp	r3, #255	@ 0xff
 800c67a:	d111      	bne.n	800c6a0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c680:	78ba      	ldrb	r2, [r7, #2]
 800c682:	429a      	cmp	r2, r3
 800c684:	d002      	beq.n	800c68c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c686:	78bb      	ldrb	r3, [r7, #2]
 800c688:	2bff      	cmp	r3, #255	@ 0xff
 800c68a:	d109      	bne.n	800c6a0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c690:	787a      	ldrb	r2, [r7, #1]
 800c692:	429a      	cmp	r2, r3
 800c694:	d002      	beq.n	800c69c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c696:	787b      	ldrb	r3, [r7, #1]
 800c698:	2bff      	cmp	r3, #255	@ 0xff
 800c69a:	d101      	bne.n	800c6a0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
 800c69e:	e006      	b.n	800c6ae <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d9d6      	bls.n	800c65a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c6ac:	23ff      	movs	r3, #255	@ 0xff
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f003 feaa 	bl	801041c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c6c8:	2101      	movs	r1, #1
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f003 ffc3 	bl	8010656 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
	...

0800c6dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b088      	sub	sp, #32
 800c6e0:	af04      	add	r7, sp, #16
 800c6e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d102      	bne.n	800c6fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b0b      	cmp	r3, #11
 800c706:	f200 81bb 	bhi.w	800ca80 <USBH_Process+0x3a4>
 800c70a:	a201      	add	r2, pc, #4	@ (adr r2, 800c710 <USBH_Process+0x34>)
 800c70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c710:	0800c741 	.word	0x0800c741
 800c714:	0800c773 	.word	0x0800c773
 800c718:	0800c7db 	.word	0x0800c7db
 800c71c:	0800ca1b 	.word	0x0800ca1b
 800c720:	0800ca81 	.word	0x0800ca81
 800c724:	0800c87b 	.word	0x0800c87b
 800c728:	0800c9c1 	.word	0x0800c9c1
 800c72c:	0800c8b1 	.word	0x0800c8b1
 800c730:	0800c8d1 	.word	0x0800c8d1
 800c734:	0800c8ef 	.word	0x0800c8ef
 800c738:	0800c933 	.word	0x0800c933
 800c73c:	0800ca03 	.word	0x0800ca03
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 819b 	beq.w	800ca84 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c754:	20c8      	movs	r0, #200	@ 0xc8
 800c756:	f003 ffc8 	bl	80106ea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f003 febb 	bl	80104d6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c770:	e188      	b.n	800ca84 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d107      	bne.n	800c78c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c78a:	e18a      	b.n	800caa2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c796:	d914      	bls.n	800c7c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c79e:	3301      	adds	r3, #1
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d903      	bls.n	800c7ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	220d      	movs	r2, #13
 800c7b6:	701a      	strb	r2, [r3, #0]
      break;
 800c7b8:	e173      	b.n	800caa2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
      break;
 800c7c0:	e16f      	b.n	800caa2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c7c8:	f103 020a 	add.w	r2, r3, #10
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c7d2:	200a      	movs	r0, #10
 800c7d4:	f003 ff89 	bl	80106ea <USBH_Delay>
      break;
 800c7d8:	e163      	b.n	800caa2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d005      	beq.n	800c7f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7ea:	2104      	movs	r1, #4
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c7f0:	2064      	movs	r0, #100	@ 0x64
 800c7f2:	f003 ff7a 	bl	80106ea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f003 fe46 	bl	8010488 <USBH_LL_GetSpeed>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	461a      	mov	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2205      	movs	r2, #5
 800c80a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c80c:	2100      	movs	r1, #0
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f001 fa9b 	bl	800dd4a <USBH_AllocPipe>
 800c814:	4603      	mov	r3, r0
 800c816:	461a      	mov	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c81c:	2180      	movs	r1, #128	@ 0x80
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f001 fa93 	bl	800dd4a <USBH_AllocPipe>
 800c824:	4603      	mov	r3, r0
 800c826:	461a      	mov	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	7919      	ldrb	r1, [r3, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	2200      	movs	r2, #0
 800c844:	9201      	str	r2, [sp, #4]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	4603      	mov	r3, r0
 800c84a:	2280      	movs	r2, #128	@ 0x80
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f001 fa4d 	bl	800dcec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7959      	ldrb	r1, [r3, #5]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c866:	9202      	str	r2, [sp, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	4603      	mov	r3, r0
 800c870:	2200      	movs	r2, #0
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 fa3a 	bl	800dcec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c878:	e113      	b.n	800caa2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f916 	bl	800caac <USBH_HandleEnum>
 800c880:	4603      	mov	r3, r0
 800c882:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f040 80fd 	bne.w	800ca88 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d103      	bne.n	800c8a8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2208      	movs	r2, #8
 800c8a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c8a6:	e0ef      	b.n	800ca88 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2207      	movs	r2, #7
 800c8ac:	701a      	strb	r2, [r3, #0]
      break;
 800c8ae:	e0eb      	b.n	800ca88 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 80e8 	beq.w	800ca8c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2208      	movs	r2, #8
 800c8cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c8ce:	e0dd      	b.n	800ca8c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fc3a 	bl	800d152 <USBH_SetCfg>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f040 80d5 	bne.w	800ca90 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2209      	movs	r2, #9
 800c8ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c8ec:	e0d0      	b.n	800ca90 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d016      	beq.n	800c92a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fc4a 	bl	800d198 <USBH_SetFeature>
 800c904:	4603      	mov	r3, r0
 800c906:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c908:	7bbb      	ldrb	r3, [r7, #14]
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d103      	bne.n	800c918 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	220a      	movs	r2, #10
 800c914:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c916:	e0bd      	b.n	800ca94 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	f040 80b9 	bne.w	800ca94 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	220a      	movs	r2, #10
 800c926:	701a      	strb	r2, [r3, #0]
      break;
 800c928:	e0b4      	b.n	800ca94 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	220a      	movs	r2, #10
 800c92e:	701a      	strb	r2, [r3, #0]
      break;
 800c930:	e0b0      	b.n	800ca94 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 80ad 	beq.w	800ca98 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]
 800c94a:	e016      	b.n	800c97a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c94c:	7bfa      	ldrb	r2, [r7, #15]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	32de      	adds	r2, #222	@ 0xde
 800c952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c956:	791a      	ldrb	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c95e:	429a      	cmp	r2, r3
 800c960:	d108      	bne.n	800c974 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c962:	7bfa      	ldrb	r2, [r7, #15]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	32de      	adds	r2, #222	@ 0xde
 800c968:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c972:	e005      	b.n	800c980 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	3301      	adds	r3, #1
 800c978:	73fb      	strb	r3, [r7, #15]
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0e5      	beq.n	800c94c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d016      	beq.n	800c9b8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	4798      	blx	r3
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d109      	bne.n	800c9b0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2206      	movs	r2, #6
 800c9a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c9a8:	2103      	movs	r1, #3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c9ae:	e073      	b.n	800ca98 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	220d      	movs	r2, #13
 800c9b4:	701a      	strb	r2, [r3, #0]
      break;
 800c9b6:	e06f      	b.n	800ca98 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	220d      	movs	r2, #13
 800c9bc:	701a      	strb	r2, [r3, #0]
      break;
 800c9be:	e06b      	b.n	800ca98 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d017      	beq.n	800c9fa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	4798      	blx	r3
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c9da:	7bbb      	ldrb	r3, [r7, #14]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d103      	bne.n	800c9ea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	220b      	movs	r2, #11
 800c9e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c9e8:	e058      	b.n	800ca9c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800c9ea:	7bbb      	ldrb	r3, [r7, #14]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d154      	bne.n	800ca9c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	220d      	movs	r2, #13
 800c9f6:	701a      	strb	r2, [r3, #0]
      break;
 800c9f8:	e050      	b.n	800ca9c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	220d      	movs	r2, #13
 800c9fe:	701a      	strb	r2, [r3, #0]
      break;
 800ca00:	e04c      	b.n	800ca9c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d049      	beq.n	800caa0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	4798      	blx	r3
      }
      break;
 800ca18:	e042      	b.n	800caa0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff fd4a 	bl	800c4bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d009      	beq.n	800ca46 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca56:	2105      	movs	r1, #5
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d107      	bne.n	800ca78 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fe22 	bl	800c6ba <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca76:	e014      	b.n	800caa2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f003 fccf 	bl	801041c <USBH_LL_Start>
      break;
 800ca7e:	e010      	b.n	800caa2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ca80:	bf00      	nop
 800ca82:	e00e      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800ca84:	bf00      	nop
 800ca86:	e00c      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800ca88:	bf00      	nop
 800ca8a:	e00a      	b.n	800caa2 <USBH_Process+0x3c6>
    break;
 800ca8c:	bf00      	nop
 800ca8e:	e008      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800ca90:	bf00      	nop
 800ca92:	e006      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800ca94:	bf00      	nop
 800ca96:	e004      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800ca98:	bf00      	nop
 800ca9a:	e002      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800ca9c:	bf00      	nop
 800ca9e:	e000      	b.n	800caa2 <USBH_Process+0x3c6>
      break;
 800caa0:	bf00      	nop
  }
  return USBH_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b088      	sub	sp, #32
 800cab0:	af04      	add	r7, sp, #16
 800cab2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cab4:	2301      	movs	r3, #1
 800cab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cab8:	2301      	movs	r3, #1
 800caba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	2b07      	cmp	r3, #7
 800cac2:	f200 81bd 	bhi.w	800ce40 <USBH_HandleEnum+0x394>
 800cac6:	a201      	add	r2, pc, #4	@ (adr r2, 800cacc <USBH_HandleEnum+0x20>)
 800cac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800cba7 	.word	0x0800cba7
 800cad4:	0800cc11 	.word	0x0800cc11
 800cad8:	0800cc9b 	.word	0x0800cc9b
 800cadc:	0800cd05 	.word	0x0800cd05
 800cae0:	0800cd75 	.word	0x0800cd75
 800cae4:	0800cdbb 	.word	0x0800cdbb
 800cae8:	0800ce01 	.word	0x0800ce01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800caec:	2108      	movs	r1, #8
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fa4c 	bl	800cf8c <USBH_Get_DevDesc>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d12e      	bne.n	800cb5c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7919      	ldrb	r1, [r3, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb22:	9202      	str	r2, [sp, #8]
 800cb24:	2200      	movs	r2, #0
 800cb26:	9201      	str	r2, [sp, #4]
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2280      	movs	r2, #128	@ 0x80
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 f8dc 	bl	800dcec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7959      	ldrb	r1, [r3, #5]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb48:	9202      	str	r2, [sp, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	9201      	str	r2, [sp, #4]
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4603      	mov	r3, r0
 800cb52:	2200      	movs	r2, #0
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f001 f8c9 	bl	800dcec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cb5a:	e173      	b.n	800ce44 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	f040 8170 	bne.w	800ce44 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d903      	bls.n	800cb86 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	220d      	movs	r2, #13
 800cb82:	701a      	strb	r2, [r3, #0]
      break;
 800cb84:	e15e      	b.n	800ce44 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	795b      	ldrb	r3, [r3, #5]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f001 f8fd 	bl	800dd8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	791b      	ldrb	r3, [r3, #4]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f001 f8f7 	bl	800dd8c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
      break;
 800cba4:	e14e      	b.n	800ce44 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cba6:	2112      	movs	r1, #18
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f9ef 	bl	800cf8c <USBH_Get_DevDesc>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d103      	bne.n	800cbc0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cbbe:	e143      	b.n	800ce48 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	f040 8140 	bne.w	800ce48 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cbce:	3301      	adds	r3, #1
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d903      	bls.n	800cbea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	220d      	movs	r2, #13
 800cbe6:	701a      	strb	r2, [r3, #0]
      break;
 800cbe8:	e12e      	b.n	800ce48 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	795b      	ldrb	r3, [r3, #5]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f001 f8cb 	bl	800dd8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	791b      	ldrb	r3, [r3, #4]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f001 f8c5 	bl	800dd8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	701a      	strb	r2, [r3, #0]
      break;
 800cc0e:	e11b      	b.n	800ce48 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cc10:	2101      	movs	r1, #1
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fa79 	bl	800d10a <USBH_SetAddress>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d130      	bne.n	800cc84 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800cc22:	2002      	movs	r0, #2
 800cc24:	f003 fd61 	bl	80106ea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2203      	movs	r2, #3
 800cc34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7919      	ldrb	r1, [r3, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc4a:	9202      	str	r2, [sp, #8]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	9201      	str	r2, [sp, #4]
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4603      	mov	r3, r0
 800cc54:	2280      	movs	r2, #128	@ 0x80
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f001 f848 	bl	800dcec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7959      	ldrb	r1, [r3, #5]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc70:	9202      	str	r2, [sp, #8]
 800cc72:	2200      	movs	r2, #0
 800cc74:	9201      	str	r2, [sp, #4]
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 f835 	bl	800dcec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cc82:	e0e3      	b.n	800ce4c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc84:	7bbb      	ldrb	r3, [r7, #14]
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	f040 80e0 	bne.w	800ce4c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	220d      	movs	r2, #13
 800cc90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	705a      	strb	r2, [r3, #1]
      break;
 800cc98:	e0d8      	b.n	800ce4c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cc9a:	2109      	movs	r1, #9
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f9a1 	bl	800cfe4 <USBH_Get_CfgDesc>
 800cca2:	4603      	mov	r3, r0
 800cca4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d103      	bne.n	800ccb4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2204      	movs	r2, #4
 800ccb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ccb2:	e0cd      	b.n	800ce50 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	f040 80ca 	bne.w	800ce50 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d903      	bls.n	800ccde <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	220d      	movs	r2, #13
 800ccda:	701a      	strb	r2, [r3, #0]
      break;
 800ccdc:	e0b8      	b.n	800ce50 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	795b      	ldrb	r3, [r3, #5]
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f001 f851 	bl	800dd8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	791b      	ldrb	r3, [r3, #4]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f001 f84b 	bl	800dd8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	701a      	strb	r2, [r3, #0]
      break;
 800cd02:	e0a5      	b.n	800ce50 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f969 	bl	800cfe4 <USBH_Get_CfgDesc>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d103      	bne.n	800cd24 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2205      	movs	r2, #5
 800cd20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd22:	e097      	b.n	800ce54 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	f040 8094 	bne.w	800ce54 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cd32:	3301      	adds	r3, #1
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d903      	bls.n	800cd4e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	220d      	movs	r2, #13
 800cd4a:	701a      	strb	r2, [r3, #0]
      break;
 800cd4c:	e082      	b.n	800ce54 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	795b      	ldrb	r3, [r3, #5]
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f001 f819 	bl	800dd8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	791b      	ldrb	r3, [r3, #4]
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f001 f813 	bl	800dd8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	701a      	strb	r2, [r3, #0]
      break;
 800cd72:	e06f      	b.n	800ce54 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d019      	beq.n	800cdb2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cd8a:	23ff      	movs	r3, #255	@ 0xff
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f953 	bl	800d038 <USBH_Get_StringDesc>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d103      	bne.n	800cda4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2206      	movs	r2, #6
 800cda0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cda2:	e059      	b.n	800ce58 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d156      	bne.n	800ce58 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2206      	movs	r2, #6
 800cdae:	705a      	strb	r2, [r3, #1]
      break;
 800cdb0:	e052      	b.n	800ce58 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2206      	movs	r2, #6
 800cdb6:	705a      	strb	r2, [r3, #1]
      break;
 800cdb8:	e04e      	b.n	800ce58 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d019      	beq.n	800cdf8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cdd0:	23ff      	movs	r3, #255	@ 0xff
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f930 	bl	800d038 <USBH_Get_StringDesc>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d103      	bne.n	800cdea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2207      	movs	r2, #7
 800cde6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cde8:	e038      	b.n	800ce5c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	d135      	bne.n	800ce5c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2207      	movs	r2, #7
 800cdf4:	705a      	strb	r2, [r3, #1]
      break;
 800cdf6:	e031      	b.n	800ce5c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2207      	movs	r2, #7
 800cdfc:	705a      	strb	r2, [r3, #1]
      break;
 800cdfe:	e02d      	b.n	800ce5c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d017      	beq.n	800ce3a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ce16:	23ff      	movs	r3, #255	@ 0xff
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f90d 	bl	800d038 <USBH_Get_StringDesc>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d102      	bne.n	800ce2e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ce2c:	e018      	b.n	800ce60 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce2e:	7bbb      	ldrb	r3, [r7, #14]
 800ce30:	2b03      	cmp	r3, #3
 800ce32:	d115      	bne.n	800ce60 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73fb      	strb	r3, [r7, #15]
      break;
 800ce38:	e012      	b.n	800ce60 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce3e:	e00f      	b.n	800ce60 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ce40:	bf00      	nop
 800ce42:	e00e      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce44:	bf00      	nop
 800ce46:	e00c      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce48:	bf00      	nop
 800ce4a:	e00a      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce4c:	bf00      	nop
 800ce4e:	e008      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce50:	bf00      	nop
 800ce52:	e006      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce54:	bf00      	nop
 800ce56:	e004      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce58:	bf00      	nop
 800ce5a:	e002      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce5c:	bf00      	nop
 800ce5e:	e000      	b.n	800ce62 <USBH_HandleEnum+0x3b6>
      break;
 800ce60:	bf00      	nop
  }
  return Status;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ce7e:	bf00      	nop
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f804 	bl	800ceae <USBH_HandleSof>
}
 800cea6:	bf00      	nop
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b082      	sub	sp, #8
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b0b      	cmp	r3, #11
 800cebe:	d10a      	bne.n	800ced6 <USBH_HandleSof+0x28>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d005      	beq.n	800ced6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	4798      	blx	r3
  }
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cede:	b480      	push	{r7}
 800cee0:	b083      	sub	sp, #12
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ceee:	bf00      	nop
}
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cefa:	b480      	push	{r7}
 800cefc:	b083      	sub	sp, #12
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800cf0a:	bf00      	nop
}
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f003 fa74 	bl	8010452 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	791b      	ldrb	r3, [r3, #4]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 ff0b 	bl	800dd8c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	795b      	ldrb	r3, [r3, #5]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 ff05 	bl	800dd8c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af02      	add	r7, sp, #8
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cf98:	887b      	ldrh	r3, [r7, #2]
 800cf9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf9e:	d901      	bls.n	800cfa4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	e01b      	b.n	800cfdc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cfaa:	887b      	ldrh	r3, [r7, #2]
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f872 	bl	800d0a0 <USBH_GetDescriptor>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cfcc:	887a      	ldrh	r2, [r7, #2]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 f929 	bl	800d228 <USBH_ParseDevDesc>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	331c      	adds	r3, #28
 800cff4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cff6:	887b      	ldrh	r3, [r7, #2]
 800cff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cffc:	d901      	bls.n	800d002 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cffe:	2303      	movs	r3, #3
 800d000:	e016      	b.n	800d030 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d002:	887b      	ldrh	r3, [r7, #2]
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d00c:	2100      	movs	r1, #0
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 f846 	bl	800d0a0 <USBH_GetDescriptor>
 800d014:	4603      	mov	r3, r0
 800d016:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d01e:	887b      	ldrh	r3, [r7, #2]
 800d020:	461a      	mov	r2, r3
 800d022:	68b9      	ldr	r1, [r7, #8]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f9af 	bl	800d388 <USBH_ParseCfgDesc>
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	461a      	mov	r2, r3
 800d044:	460b      	mov	r3, r1
 800d046:	72fb      	strb	r3, [r7, #11]
 800d048:	4613      	mov	r3, r2
 800d04a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d04c:	893b      	ldrh	r3, [r7, #8]
 800d04e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d052:	d802      	bhi.n	800d05a <USBH_Get_StringDesc+0x22>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e01c      	b.n	800d098 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d05e:	7afb      	ldrb	r3, [r7, #11]
 800d060:	b29b      	uxth	r3, r3
 800d062:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d066:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d06e:	893b      	ldrh	r3, [r7, #8]
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	460b      	mov	r3, r1
 800d074:	2100      	movs	r1, #0
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f000 f812 	bl	800d0a0 <USBH_GetDescriptor>
 800d07c:	4603      	mov	r3, r0
 800d07e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d107      	bne.n	800d096 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d08c:	893a      	ldrh	r2, [r7, #8]
 800d08e:	6879      	ldr	r1, [r7, #4]
 800d090:	4618      	mov	r0, r3
 800d092:	f000 fb8d 	bl	800d7b0 <USBH_ParseStringDesc>
  }

  return status;
 800d096:	7dfb      	ldrb	r3, [r7, #23]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	607b      	str	r3, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	72fb      	strb	r3, [r7, #11]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	789b      	ldrb	r3, [r3, #2]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d11c      	bne.n	800d0f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2206      	movs	r2, #6
 800d0ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	893a      	ldrh	r2, [r7, #8]
 800d0d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d0d2:	893b      	ldrh	r3, [r7, #8]
 800d0d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d0d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0dc:	d104      	bne.n	800d0e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f240 4209 	movw	r2, #1033	@ 0x409
 800d0e4:	829a      	strh	r2, [r3, #20]
 800d0e6:	e002      	b.n	800d0ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	8b3a      	ldrh	r2, [r7, #24]
 800d0f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d0f4:	8b3b      	ldrh	r3, [r7, #24]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 fba5 	bl	800d84a <USBH_CtlReq>
 800d100:	4603      	mov	r3, r0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b082      	sub	sp, #8
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	789b      	ldrb	r3, [r3, #2]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d10f      	bne.n	800d13e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2205      	movs	r2, #5
 800d128:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d12a:	78fb      	ldrb	r3, [r7, #3]
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d13e:	2200      	movs	r2, #0
 800d140:	2100      	movs	r1, #0
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fb81 	bl	800d84a <USBH_CtlReq>
 800d148:	4603      	mov	r3, r0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	789b      	ldrb	r3, [r3, #2]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d10e      	bne.n	800d184 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2209      	movs	r2, #9
 800d170:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	887a      	ldrh	r2, [r7, #2]
 800d176:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d184:	2200      	movs	r2, #0
 800d186:	2100      	movs	r1, #0
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fb5e 	bl	800d84a <USBH_CtlReq>
 800d18e:	4603      	mov	r3, r0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	789b      	ldrb	r3, [r3, #2]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d10f      	bne.n	800d1cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d1b8:	78fb      	ldrb	r3, [r7, #3]
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fb3a 	bl	800d84a <USBH_CtlReq>
 800d1d6:	4603      	mov	r3, r0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	789b      	ldrb	r3, [r3, #2]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d10f      	bne.n	800d214 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d206:	78fb      	ldrb	r3, [r7, #3]
 800d208:	b29a      	uxth	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d214:	2200      	movs	r2, #0
 800d216:	2100      	movs	r1, #0
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fb16 	bl	800d84a <USBH_CtlReq>
 800d21e:	4603      	mov	r3, r0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	4613      	mov	r3, r2
 800d234:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d23c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d248:	2302      	movs	r3, #2
 800d24a:	e094      	b.n	800d376 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	781a      	ldrb	r2, [r3, #0]
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	785a      	ldrb	r2, [r3, #1]
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	3302      	adds	r3, #2
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	3303      	adds	r3, #3
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	021b      	lsls	r3, r3, #8
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	4313      	orrs	r3, r2
 800d270:	b29a      	uxth	r2, r3
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	791a      	ldrb	r2, [r3, #4]
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	795a      	ldrb	r2, [r3, #5]
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	799a      	ldrb	r2, [r3, #6]
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	79da      	ldrb	r2, [r3, #7]
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d004      	beq.n	800d2aa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d11b      	bne.n	800d2e2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	79db      	ldrb	r3, [r3, #7]
 800d2ae:	2b20      	cmp	r3, #32
 800d2b0:	dc0f      	bgt.n	800d2d2 <USBH_ParseDevDesc+0xaa>
 800d2b2:	2b08      	cmp	r3, #8
 800d2b4:	db0f      	blt.n	800d2d6 <USBH_ParseDevDesc+0xae>
 800d2b6:	3b08      	subs	r3, #8
 800d2b8:	4a32      	ldr	r2, [pc, #200]	@ (800d384 <USBH_ParseDevDesc+0x15c>)
 800d2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bf14      	ite	ne
 800d2c6:	2301      	movne	r3, #1
 800d2c8:	2300      	moveq	r3, #0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <USBH_ParseDevDesc+0xb6>
 800d2d0:	e001      	b.n	800d2d6 <USBH_ParseDevDesc+0xae>
 800d2d2:	2b40      	cmp	r3, #64	@ 0x40
 800d2d4:	d003      	beq.n	800d2de <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	2208      	movs	r2, #8
 800d2da:	71da      	strb	r2, [r3, #7]
        break;
 800d2dc:	e000      	b.n	800d2e0 <USBH_ParseDevDesc+0xb8>
        break;
 800d2de:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d2e0:	e00e      	b.n	800d300 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d107      	bne.n	800d2fc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	79db      	ldrb	r3, [r3, #7]
 800d2f0:	2b08      	cmp	r3, #8
 800d2f2:	d005      	beq.n	800d300 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2208      	movs	r2, #8
 800d2f8:	71da      	strb	r2, [r3, #7]
 800d2fa:	e001      	b.n	800d300 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d300:	88fb      	ldrh	r3, [r7, #6]
 800d302:	2b08      	cmp	r3, #8
 800d304:	d936      	bls.n	800d374 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	3308      	adds	r3, #8
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	461a      	mov	r2, r3
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	3309      	adds	r3, #9
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	021b      	lsls	r3, r3, #8
 800d316:	b29b      	uxth	r3, r3
 800d318:	4313      	orrs	r3, r2
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	330a      	adds	r3, #10
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	461a      	mov	r2, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	330b      	adds	r3, #11
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	021b      	lsls	r3, r3, #8
 800d330:	b29b      	uxth	r3, r3
 800d332:	4313      	orrs	r3, r2
 800d334:	b29a      	uxth	r2, r3
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	330c      	adds	r3, #12
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	461a      	mov	r2, r3
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	330d      	adds	r3, #13
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	021b      	lsls	r3, r3, #8
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	4313      	orrs	r3, r2
 800d34e:	b29a      	uxth	r2, r3
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	7b9a      	ldrb	r2, [r3, #14]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	7bda      	ldrb	r2, [r3, #15]
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	7c1a      	ldrb	r2, [r3, #16]
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	7c5a      	ldrb	r2, [r3, #17]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d374:	7dfb      	ldrb	r3, [r7, #23]
}
 800d376:	4618      	mov	r0, r3
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	01000101 	.word	0x01000101

0800d388 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08c      	sub	sp, #48	@ 0x30
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	4613      	mov	r3, r2
 800d394:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d39c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	e0da      	b.n	800d570 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	2b09      	cmp	r3, #9
 800d3c4:	d002      	beq.n	800d3cc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c8:	2209      	movs	r2, #9
 800d3ca:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	785a      	ldrb	r2, [r3, #1]
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	3302      	adds	r3, #2
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	3303      	adds	r3, #3
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	021b      	lsls	r3, r3, #8
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3f6:	bf28      	it	cs
 800d3f8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	791a      	ldrb	r2, [r3, #4]
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	795a      	ldrb	r2, [r3, #5]
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	799a      	ldrb	r2, [r3, #6]
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	79da      	ldrb	r2, [r3, #7]
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	7a1a      	ldrb	r2, [r3, #8]
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d42a:	88fb      	ldrh	r3, [r7, #6]
 800d42c:	2b09      	cmp	r3, #9
 800d42e:	f240 809d 	bls.w	800d56c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d432:	2309      	movs	r3, #9
 800d434:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d436:	2300      	movs	r3, #0
 800d438:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d43a:	e081      	b.n	800d540 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d43c:	f107 0316 	add.w	r3, r7, #22
 800d440:	4619      	mov	r1, r3
 800d442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d444:	f000 f9e7 	bl	800d816 <USBH_GetNextDesc>
 800d448:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d44c:	785b      	ldrb	r3, [r3, #1]
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d176      	bne.n	800d540 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b09      	cmp	r3, #9
 800d458:	d002      	beq.n	800d460 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45c:	2209      	movs	r2, #9
 800d45e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d464:	221a      	movs	r2, #26
 800d466:	fb02 f303 	mul.w	r3, r2, r3
 800d46a:	3308      	adds	r3, #8
 800d46c:	6a3a      	ldr	r2, [r7, #32]
 800d46e:	4413      	add	r3, r2
 800d470:	3302      	adds	r3, #2
 800d472:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d476:	69f8      	ldr	r0, [r7, #28]
 800d478:	f000 f87e 	bl	800d578 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d47c:	2300      	movs	r3, #0
 800d47e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d486:	e043      	b.n	800d510 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d488:	f107 0316 	add.w	r3, r7, #22
 800d48c:	4619      	mov	r1, r3
 800d48e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d490:	f000 f9c1 	bl	800d816 <USBH_GetNextDesc>
 800d494:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d498:	785b      	ldrb	r3, [r3, #1]
 800d49a:	2b05      	cmp	r3, #5
 800d49c:	d138      	bne.n	800d510 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	795b      	ldrb	r3, [r3, #5]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d113      	bne.n	800d4ce <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d003      	beq.n	800d4b6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	799b      	ldrb	r3, [r3, #6]
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d10b      	bne.n	800d4ce <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	79db      	ldrb	r3, [r3, #7]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10b      	bne.n	800d4d6 <USBH_ParseCfgDesc+0x14e>
 800d4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2b09      	cmp	r3, #9
 800d4c4:	d007      	beq.n	800d4d6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c8:	2209      	movs	r2, #9
 800d4ca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d4cc:	e003      	b.n	800d4d6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d0:	2207      	movs	r2, #7
 800d4d2:	701a      	strb	r2, [r3, #0]
 800d4d4:	e000      	b.n	800d4d8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d4d6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d4e0:	3201      	adds	r2, #1
 800d4e2:	00d2      	lsls	r2, r2, #3
 800d4e4:	211a      	movs	r1, #26
 800d4e6:	fb01 f303 	mul.w	r3, r1, r3
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	6a3a      	ldr	r2, [r7, #32]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	3304      	adds	r3, #4
 800d4f4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d4f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4f8:	69b9      	ldr	r1, [r7, #24]
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f000 f870 	bl	800d5e0 <USBH_ParseEPDesc>
 800d500:	4603      	mov	r3, r0
 800d502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d506:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d50a:	3301      	adds	r3, #1
 800d50c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	791b      	ldrb	r3, [r3, #4]
 800d514:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d518:	429a      	cmp	r2, r3
 800d51a:	d204      	bcs.n	800d526 <USBH_ParseCfgDesc+0x19e>
 800d51c:	6a3b      	ldr	r3, [r7, #32]
 800d51e:	885a      	ldrh	r2, [r3, #2]
 800d520:	8afb      	ldrh	r3, [r7, #22]
 800d522:	429a      	cmp	r2, r3
 800d524:	d8b0      	bhi.n	800d488 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	791b      	ldrb	r3, [r3, #4]
 800d52a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d52e:	429a      	cmp	r2, r3
 800d530:	d201      	bcs.n	800d536 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d532:	2303      	movs	r3, #3
 800d534:	e01c      	b.n	800d570 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d53a:	3301      	adds	r3, #1
 800d53c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d544:	2b01      	cmp	r3, #1
 800d546:	d805      	bhi.n	800d554 <USBH_ParseCfgDesc+0x1cc>
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	885a      	ldrh	r2, [r3, #2]
 800d54c:	8afb      	ldrh	r3, [r7, #22]
 800d54e:	429a      	cmp	r2, r3
 800d550:	f63f af74 	bhi.w	800d43c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	791b      	ldrb	r3, [r3, #4]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	bf28      	it	cs
 800d55c:	2302      	movcs	r3, #2
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d564:	429a      	cmp	r2, r3
 800d566:	d201      	bcs.n	800d56c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d568:	2303      	movs	r3, #3
 800d56a:	e001      	b.n	800d570 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d56c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d570:	4618      	mov	r0, r3
 800d572:	3730      	adds	r7, #48	@ 0x30
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	781a      	ldrb	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	785a      	ldrb	r2, [r3, #1]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	789a      	ldrb	r2, [r3, #2]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	78da      	ldrb	r2, [r3, #3]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	bf28      	it	cs
 800d5ac:	2302      	movcs	r3, #2
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	795a      	ldrb	r2, [r3, #5]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	799a      	ldrb	r2, [r3, #6]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	79da      	ldrb	r2, [r3, #7]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	7a1a      	ldrb	r2, [r3, #8]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	721a      	strb	r2, [r3, #8]
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b087      	sub	sp, #28
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	781a      	ldrb	r2, [r3, #0]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	785a      	ldrb	r2, [r3, #1]
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	789a      	ldrb	r2, [r3, #2]
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	78da      	ldrb	r2, [r3, #3]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3304      	adds	r3, #4
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3305      	adds	r3, #5
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	b29b      	uxth	r3, r3
 800d622:	4313      	orrs	r3, r2
 800d624:	b29a      	uxth	r2, r3
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	799a      	ldrb	r2, [r3, #6]
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	889b      	ldrh	r3, [r3, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d009      	beq.n	800d64e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d63e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d642:	d804      	bhi.n	800d64e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d64c:	d901      	bls.n	800d652 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d64e:	2303      	movs	r3, #3
 800d650:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d136      	bne.n	800d6ca <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	78db      	ldrb	r3, [r3, #3]
 800d660:	f003 0303 	and.w	r3, r3, #3
 800d664:	2b02      	cmp	r3, #2
 800d666:	d108      	bne.n	800d67a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	889b      	ldrh	r3, [r3, #4]
 800d66c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d670:	f240 8097 	bls.w	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d674:	2303      	movs	r3, #3
 800d676:	75fb      	strb	r3, [r7, #23]
 800d678:	e093      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	78db      	ldrb	r3, [r3, #3]
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d107      	bne.n	800d696 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	889b      	ldrh	r3, [r3, #4]
 800d68a:	2b40      	cmp	r3, #64	@ 0x40
 800d68c:	f240 8089 	bls.w	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d690:	2303      	movs	r3, #3
 800d692:	75fb      	strb	r3, [r7, #23]
 800d694:	e085      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	78db      	ldrb	r3, [r3, #3]
 800d69a:	f003 0303 	and.w	r3, r3, #3
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d005      	beq.n	800d6ae <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	78db      	ldrb	r3, [r3, #3]
 800d6a6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d10a      	bne.n	800d6c4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	799b      	ldrb	r3, [r3, #6]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <USBH_ParseEPDesc+0xde>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	799b      	ldrb	r3, [r3, #6]
 800d6ba:	2b10      	cmp	r3, #16
 800d6bc:	d970      	bls.n	800d7a0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d6be:	2303      	movs	r3, #3
 800d6c0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d6c2:	e06d      	b.n	800d7a0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	75fb      	strb	r3, [r7, #23]
 800d6c8:	e06b      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d13c      	bne.n	800d74e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	78db      	ldrb	r3, [r3, #3]
 800d6d8:	f003 0303 	and.w	r3, r3, #3
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d005      	beq.n	800d6ec <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	78db      	ldrb	r3, [r3, #3]
 800d6e4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d106      	bne.n	800d6fa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	889b      	ldrh	r3, [r3, #4]
 800d6f0:	2b40      	cmp	r3, #64	@ 0x40
 800d6f2:	d956      	bls.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d6f8:	e053      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	78db      	ldrb	r3, [r3, #3]
 800d6fe:	f003 0303 	and.w	r3, r3, #3
 800d702:	2b01      	cmp	r3, #1
 800d704:	d10e      	bne.n	800d724 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	799b      	ldrb	r3, [r3, #6]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d007      	beq.n	800d71e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d712:	2b10      	cmp	r3, #16
 800d714:	d803      	bhi.n	800d71e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d71a:	2b40      	cmp	r3, #64	@ 0x40
 800d71c:	d941      	bls.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d71e:	2303      	movs	r3, #3
 800d720:	75fb      	strb	r3, [r7, #23]
 800d722:	e03e      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	78db      	ldrb	r3, [r3, #3]
 800d728:	f003 0303 	and.w	r3, r3, #3
 800d72c:	2b03      	cmp	r3, #3
 800d72e:	d10b      	bne.n	800d748 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	799b      	ldrb	r3, [r3, #6]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d004      	beq.n	800d742 <USBH_ParseEPDesc+0x162>
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	889b      	ldrh	r3, [r3, #4]
 800d73c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d740:	d32f      	bcc.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d742:	2303      	movs	r3, #3
 800d744:	75fb      	strb	r3, [r7, #23]
 800d746:	e02c      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d748:	2303      	movs	r3, #3
 800d74a:	75fb      	strb	r3, [r7, #23]
 800d74c:	e029      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d754:	2b02      	cmp	r3, #2
 800d756:	d120      	bne.n	800d79a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	78db      	ldrb	r3, [r3, #3]
 800d75c:	f003 0303 	and.w	r3, r3, #3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	889b      	ldrh	r3, [r3, #4]
 800d768:	2b08      	cmp	r3, #8
 800d76a:	d01a      	beq.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d76c:	2303      	movs	r3, #3
 800d76e:	75fb      	strb	r3, [r7, #23]
 800d770:	e017      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	78db      	ldrb	r3, [r3, #3]
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d10a      	bne.n	800d794 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	799b      	ldrb	r3, [r3, #6]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <USBH_ParseEPDesc+0x1ae>
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	889b      	ldrh	r3, [r3, #4]
 800d78a:	2b08      	cmp	r3, #8
 800d78c:	d909      	bls.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d78e:	2303      	movs	r3, #3
 800d790:	75fb      	strb	r3, [r7, #23]
 800d792:	e006      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d794:	2303      	movs	r3, #3
 800d796:	75fb      	strb	r3, [r7, #23]
 800d798:	e003      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d79a:	2303      	movs	r3, #3
 800d79c:	75fb      	strb	r3, [r7, #23]
 800d79e:	e000      	b.n	800d7a2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d7a0:	bf00      	nop
  }

  return status;
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	371c      	adds	r7, #28
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d120      	bne.n	800d80a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	1e9a      	subs	r2, r3, #2
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	bf28      	it	cs
 800d7d4:	4613      	movcs	r3, r2
 800d7d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3302      	adds	r3, #2
 800d7dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d7de:	2300      	movs	r3, #0
 800d7e0:	82fb      	strh	r3, [r7, #22]
 800d7e2:	e00b      	b.n	800d7fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d7e4:	8afb      	ldrh	r3, [r7, #22]
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	781a      	ldrb	r2, [r3, #0]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d7f6:	8afb      	ldrh	r3, [r7, #22]
 800d7f8:	3302      	adds	r3, #2
 800d7fa:	82fb      	strh	r3, [r7, #22]
 800d7fc:	8afa      	ldrh	r2, [r7, #22]
 800d7fe:	8abb      	ldrh	r3, [r7, #20]
 800d800:	429a      	cmp	r2, r3
 800d802:	d3ef      	bcc.n	800d7e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
  }
}
 800d80a:	bf00      	nop
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d816:	b480      	push	{r7}
 800d818:	b085      	sub	sp, #20
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	7812      	ldrb	r2, [r2, #0]
 800d828:	4413      	add	r3, r2
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4413      	add	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d83c:	68fb      	ldr	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b086      	sub	sp, #24
 800d84e:	af00      	add	r7, sp, #0
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	60b9      	str	r1, [r7, #8]
 800d854:	4613      	mov	r3, r2
 800d856:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d858:	2301      	movs	r3, #1
 800d85a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	789b      	ldrb	r3, [r3, #2]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d002      	beq.n	800d86a <USBH_CtlReq+0x20>
 800d864:	2b02      	cmp	r3, #2
 800d866:	d00f      	beq.n	800d888 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d868:	e027      	b.n	800d8ba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	88fa      	ldrh	r2, [r7, #6]
 800d874:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2201      	movs	r2, #1
 800d87a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2202      	movs	r2, #2
 800d880:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d882:	2301      	movs	r3, #1
 800d884:	75fb      	strb	r3, [r7, #23]
      break;
 800d886:	e018      	b.n	800d8ba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f000 f81b 	bl	800d8c4 <USBH_HandleControl>
 800d88e:	4603      	mov	r3, r0
 800d890:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d892:	7dfb      	ldrb	r3, [r7, #23]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <USBH_CtlReq+0x54>
 800d898:	7dfb      	ldrb	r3, [r7, #23]
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d106      	bne.n	800d8ac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	761a      	strb	r2, [r3, #24]
      break;
 800d8aa:	e005      	b.n	800d8b8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d102      	bne.n	800d8b8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	709a      	strb	r2, [r3, #2]
      break;
 800d8b8:	bf00      	nop
  }
  return status;
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3718      	adds	r7, #24
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af02      	add	r7, sp, #8
 800d8ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7e1b      	ldrb	r3, [r3, #24]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	2b0a      	cmp	r3, #10
 800d8dc:	f200 8156 	bhi.w	800db8c <USBH_HandleControl+0x2c8>
 800d8e0:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e8 <USBH_HandleControl+0x24>)
 800d8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e6:	bf00      	nop
 800d8e8:	0800d915 	.word	0x0800d915
 800d8ec:	0800d92f 	.word	0x0800d92f
 800d8f0:	0800d999 	.word	0x0800d999
 800d8f4:	0800d9bf 	.word	0x0800d9bf
 800d8f8:	0800d9f7 	.word	0x0800d9f7
 800d8fc:	0800da21 	.word	0x0800da21
 800d900:	0800da73 	.word	0x0800da73
 800d904:	0800da95 	.word	0x0800da95
 800d908:	0800dad1 	.word	0x0800dad1
 800d90c:	0800daf7 	.word	0x0800daf7
 800d910:	0800db35 	.word	0x0800db35
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f103 0110 	add.w	r1, r3, #16
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	795b      	ldrb	r3, [r3, #5]
 800d91e:	461a      	mov	r2, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f943 	bl	800dbac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2202      	movs	r2, #2
 800d92a:	761a      	strb	r2, [r3, #24]
      break;
 800d92c:	e139      	b.n	800dba2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	795b      	ldrb	r3, [r3, #5]
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f002 fe7b 	bl	8010630 <USBH_LL_GetURBState>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d11e      	bne.n	800d982 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7c1b      	ldrb	r3, [r3, #16]
 800d948:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d94c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	8adb      	ldrh	r3, [r3, #22]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d956:	7b7b      	ldrb	r3, [r7, #13]
 800d958:	2b80      	cmp	r3, #128	@ 0x80
 800d95a:	d103      	bne.n	800d964 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2203      	movs	r2, #3
 800d960:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d962:	e115      	b.n	800db90 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2205      	movs	r2, #5
 800d968:	761a      	strb	r2, [r3, #24]
      break;
 800d96a:	e111      	b.n	800db90 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d96c:	7b7b      	ldrb	r3, [r7, #13]
 800d96e:	2b80      	cmp	r3, #128	@ 0x80
 800d970:	d103      	bne.n	800d97a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2209      	movs	r2, #9
 800d976:	761a      	strb	r2, [r3, #24]
      break;
 800d978:	e10a      	b.n	800db90 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2207      	movs	r2, #7
 800d97e:	761a      	strb	r2, [r3, #24]
      break;
 800d980:	e106      	b.n	800db90 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	2b04      	cmp	r3, #4
 800d986:	d003      	beq.n	800d990 <USBH_HandleControl+0xcc>
 800d988:	7bbb      	ldrb	r3, [r7, #14]
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	f040 8100 	bne.w	800db90 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	220b      	movs	r2, #11
 800d994:	761a      	strb	r2, [r3, #24]
      break;
 800d996:	e0fb      	b.n	800db90 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6899      	ldr	r1, [r3, #8]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	899a      	ldrh	r2, [r3, #12]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	791b      	ldrb	r3, [r3, #4]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f93a 	bl	800dc2a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2204      	movs	r2, #4
 800d9ba:	761a      	strb	r2, [r3, #24]
      break;
 800d9bc:	e0f1      	b.n	800dba2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	791b      	ldrb	r3, [r3, #4]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f002 fe33 	bl	8010630 <USBH_LL_GetURBState>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d9ce:	7bbb      	ldrb	r3, [r7, #14]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d102      	bne.n	800d9da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2209      	movs	r2, #9
 800d9d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b05      	cmp	r3, #5
 800d9de:	d102      	bne.n	800d9e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d9e4:	e0d6      	b.n	800db94 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d9e6:	7bbb      	ldrb	r3, [r7, #14]
 800d9e8:	2b04      	cmp	r3, #4
 800d9ea:	f040 80d3 	bne.w	800db94 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	220b      	movs	r2, #11
 800d9f2:	761a      	strb	r2, [r3, #24]
      break;
 800d9f4:	e0ce      	b.n	800db94 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6899      	ldr	r1, [r3, #8]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	899a      	ldrh	r2, [r3, #12]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	795b      	ldrb	r3, [r3, #5]
 800da02:	2001      	movs	r0, #1
 800da04:	9000      	str	r0, [sp, #0]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f8ea 	bl	800dbe0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800da12:	b29a      	uxth	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2206      	movs	r2, #6
 800da1c:	761a      	strb	r2, [r3, #24]
      break;
 800da1e:	e0c0      	b.n	800dba2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	795b      	ldrb	r3, [r3, #5]
 800da24:	4619      	mov	r1, r3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f002 fe02 	bl	8010630 <USBH_LL_GetURBState>
 800da2c:	4603      	mov	r3, r0
 800da2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d103      	bne.n	800da3e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2207      	movs	r2, #7
 800da3a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800da3c:	e0ac      	b.n	800db98 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800da3e:	7bbb      	ldrb	r3, [r7, #14]
 800da40:	2b05      	cmp	r3, #5
 800da42:	d105      	bne.n	800da50 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	220c      	movs	r2, #12
 800da48:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800da4a:	2303      	movs	r3, #3
 800da4c:	73fb      	strb	r3, [r7, #15]
      break;
 800da4e:	e0a3      	b.n	800db98 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d103      	bne.n	800da5e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2205      	movs	r2, #5
 800da5a:	761a      	strb	r2, [r3, #24]
      break;
 800da5c:	e09c      	b.n	800db98 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	2b04      	cmp	r3, #4
 800da62:	f040 8099 	bne.w	800db98 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	220b      	movs	r2, #11
 800da6a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da6c:	2302      	movs	r3, #2
 800da6e:	73fb      	strb	r3, [r7, #15]
      break;
 800da70:	e092      	b.n	800db98 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	791b      	ldrb	r3, [r3, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	2100      	movs	r1, #0
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 f8d5 	bl	800dc2a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800da86:	b29a      	uxth	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2208      	movs	r2, #8
 800da90:	761a      	strb	r2, [r3, #24]

      break;
 800da92:	e086      	b.n	800dba2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	791b      	ldrb	r3, [r3, #4]
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f002 fdc8 	bl	8010630 <USBH_LL_GetURBState>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800daa4:	7bbb      	ldrb	r3, [r7, #14]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d105      	bne.n	800dab6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	220d      	movs	r2, #13
 800daae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dab4:	e072      	b.n	800db9c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dab6:	7bbb      	ldrb	r3, [r7, #14]
 800dab8:	2b04      	cmp	r3, #4
 800daba:	d103      	bne.n	800dac4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	220b      	movs	r2, #11
 800dac0:	761a      	strb	r2, [r3, #24]
      break;
 800dac2:	e06b      	b.n	800db9c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
 800dac6:	2b05      	cmp	r3, #5
 800dac8:	d168      	bne.n	800db9c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800daca:	2303      	movs	r3, #3
 800dacc:	73fb      	strb	r3, [r7, #15]
      break;
 800dace:	e065      	b.n	800db9c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	795b      	ldrb	r3, [r3, #5]
 800dad4:	2201      	movs	r2, #1
 800dad6:	9200      	str	r2, [sp, #0]
 800dad8:	2200      	movs	r2, #0
 800dada:	2100      	movs	r1, #0
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 f87f 	bl	800dbe0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dae8:	b29a      	uxth	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	220a      	movs	r2, #10
 800daf2:	761a      	strb	r2, [r3, #24]
      break;
 800daf4:	e055      	b.n	800dba2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	795b      	ldrb	r3, [r3, #5]
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f002 fd97 	bl	8010630 <USBH_LL_GetURBState>
 800db02:	4603      	mov	r3, r0
 800db04:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d105      	bne.n	800db18 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	220d      	movs	r2, #13
 800db14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800db16:	e043      	b.n	800dba0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db18:	7bbb      	ldrb	r3, [r7, #14]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d103      	bne.n	800db26 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2209      	movs	r2, #9
 800db22:	761a      	strb	r2, [r3, #24]
      break;
 800db24:	e03c      	b.n	800dba0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800db26:	7bbb      	ldrb	r3, [r7, #14]
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d139      	bne.n	800dba0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	220b      	movs	r2, #11
 800db30:	761a      	strb	r2, [r3, #24]
      break;
 800db32:	e035      	b.n	800dba0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7e5b      	ldrb	r3, [r3, #25]
 800db38:	3301      	adds	r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	765a      	strb	r2, [r3, #25]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	7e5b      	ldrb	r3, [r3, #25]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d806      	bhi.n	800db56 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db54:	e025      	b.n	800dba2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800db5c:	2106      	movs	r1, #6
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	795b      	ldrb	r3, [r3, #5]
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f90c 	bl	800dd8c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	791b      	ldrb	r3, [r3, #4]
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f906 	bl	800dd8c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800db86:	2302      	movs	r3, #2
 800db88:	73fb      	strb	r3, [r7, #15]
      break;
 800db8a:	e00a      	b.n	800dba2 <USBH_HandleControl+0x2de>

    default:
      break;
 800db8c:	bf00      	nop
 800db8e:	e008      	b.n	800dba2 <USBH_HandleControl+0x2de>
      break;
 800db90:	bf00      	nop
 800db92:	e006      	b.n	800dba2 <USBH_HandleControl+0x2de>
      break;
 800db94:	bf00      	nop
 800db96:	e004      	b.n	800dba2 <USBH_HandleControl+0x2de>
      break;
 800db98:	bf00      	nop
 800db9a:	e002      	b.n	800dba2 <USBH_HandleControl+0x2de>
      break;
 800db9c:	bf00      	nop
 800db9e:	e000      	b.n	800dba2 <USBH_HandleControl+0x2de>
      break;
 800dba0:	bf00      	nop
  }

  return status;
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b088      	sub	sp, #32
 800dbb0:	af04      	add	r7, sp, #16
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dbba:	79f9      	ldrb	r1, [r7, #7]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9303      	str	r3, [sp, #12]
 800dbc0:	2308      	movs	r3, #8
 800dbc2:	9302      	str	r3, [sp, #8]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	9301      	str	r3, [sp, #4]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	2200      	movs	r2, #0
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f002 fcfc 	bl	80105ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af04      	add	r7, sp, #16
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	4611      	mov	r1, r2
 800dbec:	461a      	mov	r2, r3
 800dbee:	460b      	mov	r3, r1
 800dbf0:	80fb      	strh	r3, [r7, #6]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d001      	beq.n	800dc04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dc00:	2300      	movs	r3, #0
 800dc02:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc04:	7979      	ldrb	r1, [r7, #5]
 800dc06:	7e3b      	ldrb	r3, [r7, #24]
 800dc08:	9303      	str	r3, [sp, #12]
 800dc0a:	88fb      	ldrh	r3, [r7, #6]
 800dc0c:	9302      	str	r3, [sp, #8]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	2301      	movs	r3, #1
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	2300      	movs	r3, #0
 800dc18:	2200      	movs	r2, #0
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f002 fcd7 	bl	80105ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b088      	sub	sp, #32
 800dc2e:	af04      	add	r7, sp, #16
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	4611      	mov	r1, r2
 800dc36:	461a      	mov	r2, r3
 800dc38:	460b      	mov	r3, r1
 800dc3a:	80fb      	strh	r3, [r7, #6]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc40:	7979      	ldrb	r1, [r7, #5]
 800dc42:	2300      	movs	r3, #0
 800dc44:	9303      	str	r3, [sp, #12]
 800dc46:	88fb      	ldrh	r3, [r7, #6]
 800dc48:	9302      	str	r3, [sp, #8]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	9301      	str	r3, [sp, #4]
 800dc4e:	2301      	movs	r3, #1
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	2300      	movs	r3, #0
 800dc54:	2201      	movs	r2, #1
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f002 fcb9 	bl	80105ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dc5c:	2300      	movs	r3, #0

}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b088      	sub	sp, #32
 800dc6a:	af04      	add	r7, sp, #16
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	4611      	mov	r1, r2
 800dc72:	461a      	mov	r2, r3
 800dc74:	460b      	mov	r3, r1
 800dc76:	80fb      	strh	r3, [r7, #6]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc8a:	7979      	ldrb	r1, [r7, #5]
 800dc8c:	7e3b      	ldrb	r3, [r7, #24]
 800dc8e:	9303      	str	r3, [sp, #12]
 800dc90:	88fb      	ldrh	r3, [r7, #6]
 800dc92:	9302      	str	r3, [sp, #8]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	2301      	movs	r3, #1
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	2200      	movs	r2, #0
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f002 fc94 	bl	80105ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b088      	sub	sp, #32
 800dcb4:	af04      	add	r7, sp, #16
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	4611      	mov	r1, r2
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	80fb      	strh	r3, [r7, #6]
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dcc6:	7979      	ldrb	r1, [r7, #5]
 800dcc8:	2300      	movs	r3, #0
 800dcca:	9303      	str	r3, [sp, #12]
 800dccc:	88fb      	ldrh	r3, [r7, #6]
 800dcce:	9302      	str	r3, [sp, #8]
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	9301      	str	r3, [sp, #4]
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	2302      	movs	r3, #2
 800dcda:	2201      	movs	r2, #1
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f002 fc76 	bl	80105ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af04      	add	r7, sp, #16
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	70fb      	strb	r3, [r7, #3]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	70bb      	strb	r3, [r7, #2]
 800dd02:	4613      	mov	r3, r2
 800dd04:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dd06:	7878      	ldrb	r0, [r7, #1]
 800dd08:	78ba      	ldrb	r2, [r7, #2]
 800dd0a:	78f9      	ldrb	r1, [r7, #3]
 800dd0c:	8b3b      	ldrh	r3, [r7, #24]
 800dd0e:	9302      	str	r3, [sp, #8]
 800dd10:	7d3b      	ldrb	r3, [r7, #20]
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	7c3b      	ldrb	r3, [r7, #16]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	4603      	mov	r3, r0
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f002 fc09 	bl	8010532 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	460b      	mov	r3, r1
 800dd34:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800dd36:	78fb      	ldrb	r3, [r7, #3]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f002 fc28 	bl	8010590 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	460b      	mov	r3, r1
 800dd54:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f836 	bl	800ddc8 <USBH_GetFreePipe>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd60:	89fb      	ldrh	r3, [r7, #14]
 800dd62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d00a      	beq.n	800dd80 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800dd6a:	78fa      	ldrb	r2, [r7, #3]
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	f003 030f 	and.w	r3, r3, #15
 800dd72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	33e0      	adds	r3, #224	@ 0xe0
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	440b      	add	r3, r1
 800dd7e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dd80:	89fb      	ldrh	r3, [r7, #14]
 800dd82:	b2db      	uxtb	r3, r3
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	2b0f      	cmp	r3, #15
 800dd9c:	d80d      	bhi.n	800ddba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dd9e:	78fb      	ldrb	r3, [r7, #3]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	33e0      	adds	r3, #224	@ 0xe0
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	78fb      	ldrb	r3, [r7, #3]
 800ddac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	33e0      	adds	r3, #224	@ 0xe0
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	440b      	add	r3, r1
 800ddb8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	73fb      	strb	r3, [r7, #15]
 800ddd8:	e00f      	b.n	800ddfa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ddda:	7bfb      	ldrb	r3, [r7, #15]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	33e0      	adds	r3, #224	@ 0xe0
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	4413      	add	r3, r2
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ddee:	7bfb      	ldrb	r3, [r7, #15]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	e007      	b.n	800de04 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	73fb      	strb	r3, [r7, #15]
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	2b0f      	cmp	r3, #15
 800ddfe:	d9ec      	bls.n	800ddda <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800de00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800de1a:	79fb      	ldrb	r3, [r7, #7]
 800de1c:	4a08      	ldr	r2, [pc, #32]	@ (800de40 <disk_status+0x30>)
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	4413      	add	r3, r2
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	79fa      	ldrb	r2, [r7, #7]
 800de28:	4905      	ldr	r1, [pc, #20]	@ (800de40 <disk_status+0x30>)
 800de2a:	440a      	add	r2, r1
 800de2c:	7a12      	ldrb	r2, [r2, #8]
 800de2e:	4610      	mov	r0, r2
 800de30:	4798      	blx	r3
 800de32:	4603      	mov	r3, r0
 800de34:	73fb      	strb	r3, [r7, #15]
  return stat;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	20000834 	.word	0x20000834

0800de44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	4a0e      	ldr	r2, [pc, #56]	@ (800de90 <disk_initialize+0x4c>)
 800de56:	5cd3      	ldrb	r3, [r2, r3]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d114      	bne.n	800de86 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de5c:	79fb      	ldrb	r3, [r7, #7]
 800de5e:	4a0c      	ldr	r2, [pc, #48]	@ (800de90 <disk_initialize+0x4c>)
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	79fa      	ldrb	r2, [r7, #7]
 800de6a:	4909      	ldr	r1, [pc, #36]	@ (800de90 <disk_initialize+0x4c>)
 800de6c:	440a      	add	r2, r1
 800de6e:	7a12      	ldrb	r2, [r2, #8]
 800de70:	4610      	mov	r0, r2
 800de72:	4798      	blx	r3
 800de74:	4603      	mov	r3, r0
 800de76:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d103      	bne.n	800de86 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	4a03      	ldr	r2, [pc, #12]	@ (800de90 <disk_initialize+0x4c>)
 800de82:	2101      	movs	r1, #1
 800de84:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800de86:	7bfb      	ldrb	r3, [r7, #15]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	20000834 	.word	0x20000834

0800de94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de94:	b590      	push	{r4, r7, lr}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	607a      	str	r2, [r7, #4]
 800de9e:	603b      	str	r3, [r7, #0]
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
 800dea6:	4a0a      	ldr	r2, [pc, #40]	@ (800ded0 <disk_read+0x3c>)
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	689c      	ldr	r4, [r3, #8]
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4a07      	ldr	r2, [pc, #28]	@ (800ded0 <disk_read+0x3c>)
 800deb4:	4413      	add	r3, r2
 800deb6:	7a18      	ldrb	r0, [r3, #8]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	47a0      	blx	r4
 800dec0:	4603      	mov	r3, r0
 800dec2:	75fb      	strb	r3, [r7, #23]
  return res;
 800dec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	bd90      	pop	{r4, r7, pc}
 800dece:	bf00      	nop
 800ded0:	20000834 	.word	0x20000834

0800ded4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60b9      	str	r1, [r7, #8]
 800dedc:	607a      	str	r2, [r7, #4]
 800dede:	603b      	str	r3, [r7, #0]
 800dee0:	4603      	mov	r3, r0
 800dee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	4a0a      	ldr	r2, [pc, #40]	@ (800df10 <disk_write+0x3c>)
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	68dc      	ldr	r4, [r3, #12]
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	4a07      	ldr	r2, [pc, #28]	@ (800df10 <disk_write+0x3c>)
 800def4:	4413      	add	r3, r2
 800def6:	7a18      	ldrb	r0, [r3, #8]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	68b9      	ldr	r1, [r7, #8]
 800defe:	47a0      	blx	r4
 800df00:	4603      	mov	r3, r0
 800df02:	75fb      	strb	r3, [r7, #23]
  return res;
 800df04:	7dfb      	ldrb	r3, [r7, #23]
}
 800df06:	4618      	mov	r0, r3
 800df08:	371c      	adds	r7, #28
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd90      	pop	{r4, r7, pc}
 800df0e:	bf00      	nop
 800df10:	20000834 	.word	0x20000834

0800df14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	4603      	mov	r3, r0
 800df1c:	603a      	str	r2, [r7, #0]
 800df1e:	71fb      	strb	r3, [r7, #7]
 800df20:	460b      	mov	r3, r1
 800df22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df24:	79fb      	ldrb	r3, [r7, #7]
 800df26:	4a09      	ldr	r2, [pc, #36]	@ (800df4c <disk_ioctl+0x38>)
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	79fa      	ldrb	r2, [r7, #7]
 800df32:	4906      	ldr	r1, [pc, #24]	@ (800df4c <disk_ioctl+0x38>)
 800df34:	440a      	add	r2, r1
 800df36:	7a10      	ldrb	r0, [r2, #8]
 800df38:	79b9      	ldrb	r1, [r7, #6]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	4798      	blx	r3
 800df3e:	4603      	mov	r3, r0
 800df40:	73fb      	strb	r3, [r7, #15]
  return res;
 800df42:	7bfb      	ldrb	r3, [r7, #15]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	20000834 	.word	0x20000834

0800df50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3301      	adds	r3, #1
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800df60:	89fb      	ldrh	r3, [r7, #14]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	b21a      	sxth	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	b21b      	sxth	r3, r3
 800df6c:	4313      	orrs	r3, r2
 800df6e:	b21b      	sxth	r3, r3
 800df70:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df72:	89fb      	ldrh	r3, [r7, #14]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3303      	adds	r3, #3
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	021b      	lsls	r3, r3, #8
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	3202      	adds	r2, #2
 800df98:	7812      	ldrb	r2, [r2, #0]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	021b      	lsls	r3, r3, #8
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	3201      	adds	r2, #1
 800dfa6:	7812      	ldrb	r2, [r2, #0]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	021b      	lsls	r3, r3, #8
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	7812      	ldrb	r2, [r2, #0]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	60fb      	str	r3, [r7, #12]
	return rv;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr

0800dfc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dfc6:	b480      	push	{r7}
 800dfc8:	b083      	sub	sp, #12
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
 800dfce:	460b      	mov	r3, r1
 800dfd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	887a      	ldrh	r2, [r7, #2]
 800dfda:	b2d2      	uxtb	r2, r2
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	887b      	ldrh	r3, [r7, #2]
 800dfe0:	0a1b      	lsrs	r3, r3, #8
 800dfe2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	607a      	str	r2, [r7, #4]
 800dfea:	887a      	ldrh	r2, [r7, #2]
 800dfec:	b2d2      	uxtb	r2, r2
 800dfee:	701a      	strb	r2, [r3, #0]
}
 800dff0:	bf00      	nop
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	1c5a      	adds	r2, r3, #1
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	b2d2      	uxtb	r2, r2
 800e010:	701a      	strb	r2, [r3, #0]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	0a1b      	lsrs	r3, r3, #8
 800e016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	607a      	str	r2, [r7, #4]
 800e01e:	683a      	ldr	r2, [r7, #0]
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	701a      	strb	r2, [r3, #0]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	0a1b      	lsrs	r3, r3, #8
 800e028:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	1c5a      	adds	r2, r3, #1
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	b2d2      	uxtb	r2, r2
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	0a1b      	lsrs	r3, r3, #8
 800e03a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	607a      	str	r2, [r7, #4]
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	b2d2      	uxtb	r2, r2
 800e046:	701a      	strb	r2, [r3, #0]
}
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e054:	b480      	push	{r7}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00d      	beq.n	800e08a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	1c53      	adds	r3, r2, #1
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	1c59      	adds	r1, r3, #1
 800e078:	6179      	str	r1, [r7, #20]
 800e07a:	7812      	ldrb	r2, [r2, #0]
 800e07c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	3b01      	subs	r3, #1
 800e082:	607b      	str	r3, [r7, #4]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1f1      	bne.n	800e06e <mem_cpy+0x1a>
	}
}
 800e08a:	bf00      	nop
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e096:	b480      	push	{r7}
 800e098:	b087      	sub	sp, #28
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	1c5a      	adds	r2, r3, #1
 800e0aa:	617a      	str	r2, [r7, #20]
 800e0ac:	68ba      	ldr	r2, [r7, #8]
 800e0ae:	b2d2      	uxtb	r2, r2
 800e0b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	607b      	str	r3, [r7, #4]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1f3      	bne.n	800e0a6 <mem_set+0x10>
}
 800e0be:	bf00      	nop
 800e0c0:	bf00      	nop
 800e0c2:	371c      	adds	r7, #28
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e0cc:	b480      	push	{r7}
 800e0ce:	b089      	sub	sp, #36	@ 0x24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	61fb      	str	r3, [r7, #28]
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	1c5a      	adds	r2, r3, #1
 800e0e8:	61fa      	str	r2, [r7, #28]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	1c5a      	adds	r2, r3, #1
 800e0f2:	61ba      	str	r2, [r7, #24]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	1acb      	subs	r3, r1, r3
 800e0f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	607b      	str	r3, [r7, #4]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <mem_cmp+0x40>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0eb      	beq.n	800e0e4 <mem_cmp+0x18>

	return r;
 800e10c:	697b      	ldr	r3, [r7, #20]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3724      	adds	r7, #36	@ 0x24
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e11a:	b480      	push	{r7}
 800e11c:	b083      	sub	sp, #12
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e124:	e002      	b.n	800e12c <chk_chr+0x12>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	3301      	adds	r3, #1
 800e12a:	607b      	str	r3, [r7, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d005      	beq.n	800e140 <chk_chr+0x26>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	461a      	mov	r2, r3
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d1f2      	bne.n	800e126 <chk_chr+0xc>
	return *str;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	781b      	ldrb	r3, [r3, #0]
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e15a:	2300      	movs	r3, #0
 800e15c:	60bb      	str	r3, [r7, #8]
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	60fb      	str	r3, [r7, #12]
 800e162:	e029      	b.n	800e1b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e164:	4a27      	ldr	r2, [pc, #156]	@ (800e204 <chk_lock+0xb4>)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	011b      	lsls	r3, r3, #4
 800e16a:	4413      	add	r3, r2
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d01d      	beq.n	800e1ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e172:	4a24      	ldr	r2, [pc, #144]	@ (800e204 <chk_lock+0xb4>)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	011b      	lsls	r3, r3, #4
 800e178:	4413      	add	r3, r2
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	429a      	cmp	r2, r3
 800e182:	d116      	bne.n	800e1b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e184:	4a1f      	ldr	r2, [pc, #124]	@ (800e204 <chk_lock+0xb4>)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	011b      	lsls	r3, r3, #4
 800e18a:	4413      	add	r3, r2
 800e18c:	3304      	adds	r3, #4
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e194:	429a      	cmp	r2, r3
 800e196:	d10c      	bne.n	800e1b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e198:	4a1a      	ldr	r2, [pc, #104]	@ (800e204 <chk_lock+0xb4>)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	011b      	lsls	r3, r3, #4
 800e19e:	4413      	add	r3, r2
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d102      	bne.n	800e1b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e1ac:	e007      	b.n	800e1be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d9d2      	bls.n	800e164 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2b02      	cmp	r3, #2
 800e1c2:	d109      	bne.n	800e1d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d102      	bne.n	800e1d0 <chk_lock+0x80>
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d101      	bne.n	800e1d4 <chk_lock+0x84>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e010      	b.n	800e1f6 <chk_lock+0xa6>
 800e1d4:	2312      	movs	r3, #18
 800e1d6:	e00e      	b.n	800e1f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d108      	bne.n	800e1f0 <chk_lock+0xa0>
 800e1de:	4a09      	ldr	r2, [pc, #36]	@ (800e204 <chk_lock+0xb4>)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	011b      	lsls	r3, r3, #4
 800e1e4:	4413      	add	r3, r2
 800e1e6:	330c      	adds	r3, #12
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1ee:	d101      	bne.n	800e1f4 <chk_lock+0xa4>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	e000      	b.n	800e1f6 <chk_lock+0xa6>
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	20000814 	.word	0x20000814

0800e208 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e20e:	2300      	movs	r3, #0
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	e002      	b.n	800e21a <enq_lock+0x12>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	3301      	adds	r3, #1
 800e218:	607b      	str	r3, [r7, #4]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d806      	bhi.n	800e22e <enq_lock+0x26>
 800e220:	4a09      	ldr	r2, [pc, #36]	@ (800e248 <enq_lock+0x40>)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	011b      	lsls	r3, r3, #4
 800e226:	4413      	add	r3, r2
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1f2      	bne.n	800e214 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b02      	cmp	r3, #2
 800e232:	bf14      	ite	ne
 800e234:	2301      	movne	r3, #1
 800e236:	2300      	moveq	r3, #0
 800e238:	b2db      	uxtb	r3, r3
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	20000814 	.word	0x20000814

0800e24c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e256:	2300      	movs	r3, #0
 800e258:	60fb      	str	r3, [r7, #12]
 800e25a:	e01f      	b.n	800e29c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e25c:	4a41      	ldr	r2, [pc, #260]	@ (800e364 <inc_lock+0x118>)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	011b      	lsls	r3, r3, #4
 800e262:	4413      	add	r3, r2
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d113      	bne.n	800e296 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e26e:	4a3d      	ldr	r2, [pc, #244]	@ (800e364 <inc_lock+0x118>)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	011b      	lsls	r3, r3, #4
 800e274:	4413      	add	r3, r2
 800e276:	3304      	adds	r3, #4
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e27e:	429a      	cmp	r2, r3
 800e280:	d109      	bne.n	800e296 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e282:	4a38      	ldr	r2, [pc, #224]	@ (800e364 <inc_lock+0x118>)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	011b      	lsls	r3, r3, #4
 800e288:	4413      	add	r3, r2
 800e28a:	3308      	adds	r3, #8
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e292:	429a      	cmp	r2, r3
 800e294:	d006      	beq.n	800e2a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3301      	adds	r3, #1
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d9dc      	bls.n	800e25c <inc_lock+0x10>
 800e2a2:	e000      	b.n	800e2a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e2a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d132      	bne.n	800e312 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	60fb      	str	r3, [r7, #12]
 800e2b0:	e002      	b.n	800e2b8 <inc_lock+0x6c>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	d806      	bhi.n	800e2cc <inc_lock+0x80>
 800e2be:	4a29      	ldr	r2, [pc, #164]	@ (800e364 <inc_lock+0x118>)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	011b      	lsls	r3, r3, #4
 800e2c4:	4413      	add	r3, r2
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1f2      	bne.n	800e2b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d101      	bne.n	800e2d6 <inc_lock+0x8a>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e040      	b.n	800e358 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4922      	ldr	r1, [pc, #136]	@ (800e364 <inc_lock+0x118>)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	011b      	lsls	r3, r3, #4
 800e2e0:	440b      	add	r3, r1
 800e2e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	689a      	ldr	r2, [r3, #8]
 800e2e8:	491e      	ldr	r1, [pc, #120]	@ (800e364 <inc_lock+0x118>)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	011b      	lsls	r3, r3, #4
 800e2ee:	440b      	add	r3, r1
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	695a      	ldr	r2, [r3, #20]
 800e2f8:	491a      	ldr	r1, [pc, #104]	@ (800e364 <inc_lock+0x118>)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	011b      	lsls	r3, r3, #4
 800e2fe:	440b      	add	r3, r1
 800e300:	3308      	adds	r3, #8
 800e302:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e304:	4a17      	ldr	r2, [pc, #92]	@ (800e364 <inc_lock+0x118>)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	011b      	lsls	r3, r3, #4
 800e30a:	4413      	add	r3, r2
 800e30c:	330c      	adds	r3, #12
 800e30e:	2200      	movs	r2, #0
 800e310:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d009      	beq.n	800e32c <inc_lock+0xe0>
 800e318:	4a12      	ldr	r2, [pc, #72]	@ (800e364 <inc_lock+0x118>)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	011b      	lsls	r3, r3, #4
 800e31e:	4413      	add	r3, r2
 800e320:	330c      	adds	r3, #12
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <inc_lock+0xe0>
 800e328:	2300      	movs	r3, #0
 800e32a:	e015      	b.n	800e358 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d108      	bne.n	800e344 <inc_lock+0xf8>
 800e332:	4a0c      	ldr	r2, [pc, #48]	@ (800e364 <inc_lock+0x118>)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	011b      	lsls	r3, r3, #4
 800e338:	4413      	add	r3, r2
 800e33a:	330c      	adds	r3, #12
 800e33c:	881b      	ldrh	r3, [r3, #0]
 800e33e:	3301      	adds	r3, #1
 800e340:	b29a      	uxth	r2, r3
 800e342:	e001      	b.n	800e348 <inc_lock+0xfc>
 800e344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e348:	4906      	ldr	r1, [pc, #24]	@ (800e364 <inc_lock+0x118>)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	440b      	add	r3, r1
 800e350:	330c      	adds	r3, #12
 800e352:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3301      	adds	r3, #1
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	20000814 	.word	0x20000814

0800e368 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3b01      	subs	r3, #1
 800e374:	607b      	str	r3, [r7, #4]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d825      	bhi.n	800e3c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e37c:	4a17      	ldr	r2, [pc, #92]	@ (800e3dc <dec_lock+0x74>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	011b      	lsls	r3, r3, #4
 800e382:	4413      	add	r3, r2
 800e384:	330c      	adds	r3, #12
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e38a:	89fb      	ldrh	r3, [r7, #14]
 800e38c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e390:	d101      	bne.n	800e396 <dec_lock+0x2e>
 800e392:	2300      	movs	r3, #0
 800e394:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e396:	89fb      	ldrh	r3, [r7, #14]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d002      	beq.n	800e3a2 <dec_lock+0x3a>
 800e39c:	89fb      	ldrh	r3, [r7, #14]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e3a2:	4a0e      	ldr	r2, [pc, #56]	@ (800e3dc <dec_lock+0x74>)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	011b      	lsls	r3, r3, #4
 800e3a8:	4413      	add	r3, r2
 800e3aa:	330c      	adds	r3, #12
 800e3ac:	89fa      	ldrh	r2, [r7, #14]
 800e3ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e3b0:	89fb      	ldrh	r3, [r7, #14]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d105      	bne.n	800e3c2 <dec_lock+0x5a>
 800e3b6:	4a09      	ldr	r2, [pc, #36]	@ (800e3dc <dec_lock+0x74>)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	011b      	lsls	r3, r3, #4
 800e3bc:	4413      	add	r3, r2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	737b      	strb	r3, [r7, #13]
 800e3c6:	e001      	b.n	800e3cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e3cc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	20000814 	.word	0x20000814

0800e3e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	e010      	b.n	800e410 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e3ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e424 <clear_lock+0x44>)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	011b      	lsls	r3, r3, #4
 800e3f4:	4413      	add	r3, r2
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d105      	bne.n	800e40a <clear_lock+0x2a>
 800e3fe:	4a09      	ldr	r2, [pc, #36]	@ (800e424 <clear_lock+0x44>)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	4413      	add	r3, r2
 800e406:	2200      	movs	r2, #0
 800e408:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3301      	adds	r3, #1
 800e40e:	60fb      	str	r3, [r7, #12]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d9eb      	bls.n	800e3ee <clear_lock+0xe>
	}
}
 800e416:	bf00      	nop
 800e418:	bf00      	nop
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	20000814 	.word	0x20000814

0800e428 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b086      	sub	sp, #24
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e430:	2300      	movs	r3, #0
 800e432:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	78db      	ldrb	r3, [r3, #3]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d034      	beq.n	800e4a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e440:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	7858      	ldrb	r0, [r3, #1]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e44c:	2301      	movs	r3, #1
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	f7ff fd40 	bl	800ded4 <disk_write>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e45a:	2301      	movs	r3, #1
 800e45c:	73fb      	strb	r3, [r7, #15]
 800e45e:	e022      	b.n	800e4a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	1ad2      	subs	r2, r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	429a      	cmp	r2, r3
 800e474:	d217      	bcs.n	800e4a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	789b      	ldrb	r3, [r3, #2]
 800e47a:	613b      	str	r3, [r7, #16]
 800e47c:	e010      	b.n	800e4a0 <sync_window+0x78>
					wsect += fs->fsize;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	4413      	add	r3, r2
 800e486:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7858      	ldrb	r0, [r3, #1]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e492:	2301      	movs	r3, #1
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	f7ff fd1d 	bl	800ded4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	613b      	str	r3, [r7, #16]
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d8eb      	bhi.n	800e47e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3718      	adds	r7, #24
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d01b      	beq.n	800e500 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff ffad 	bl	800e428 <sync_window>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d113      	bne.n	800e500 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	7858      	ldrb	r0, [r3, #1]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	f7ff fcd5 	bl	800de94 <disk_read>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d004      	beq.n	800e4fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e500:	7bfb      	ldrb	r3, [r7, #15]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
	...

0800e50c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff ff87 	bl	800e428 <sync_window>
 800e51a:	4603      	mov	r3, r0
 800e51c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e51e:	7bfb      	ldrb	r3, [r7, #15]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d158      	bne.n	800e5d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	2b03      	cmp	r3, #3
 800e52a:	d148      	bne.n	800e5be <sync_fs+0xb2>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	791b      	ldrb	r3, [r3, #4]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d144      	bne.n	800e5be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3330      	adds	r3, #48	@ 0x30
 800e538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e53c:	2100      	movs	r1, #0
 800e53e:	4618      	mov	r0, r3
 800e540:	f7ff fda9 	bl	800e096 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	3330      	adds	r3, #48	@ 0x30
 800e548:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e54c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e550:	4618      	mov	r0, r3
 800e552:	f7ff fd38 	bl	800dfc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3330      	adds	r3, #48	@ 0x30
 800e55a:	4921      	ldr	r1, [pc, #132]	@ (800e5e0 <sync_fs+0xd4>)
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff fd4d 	bl	800dffc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3330      	adds	r3, #48	@ 0x30
 800e566:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e56a:	491e      	ldr	r1, [pc, #120]	@ (800e5e4 <sync_fs+0xd8>)
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7ff fd45 	bl	800dffc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	3330      	adds	r3, #48	@ 0x30
 800e576:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	4619      	mov	r1, r3
 800e580:	4610      	mov	r0, r2
 800e582:	f7ff fd3b 	bl	800dffc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	3330      	adds	r3, #48	@ 0x30
 800e58a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	4619      	mov	r1, r3
 800e594:	4610      	mov	r0, r2
 800e596:	f7ff fd31 	bl	800dffc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	69db      	ldr	r3, [r3, #28]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	7858      	ldrb	r0, [r3, #1]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	f7ff fc8e 	bl	800ded4 <disk_write>
			fs->fsi_flag = 0;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	785b      	ldrb	r3, [r3, #1]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7ff fca4 	bl	800df14 <disk_ioctl>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <sync_fs+0xca>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3710      	adds	r7, #16
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	41615252 	.word	0x41615252
 800e5e4:	61417272 	.word	0x61417272

0800e5e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	3b02      	subs	r3, #2
 800e5f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	3b02      	subs	r3, #2
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	429a      	cmp	r2, r3
 800e602:	d301      	bcc.n	800e608 <clust2sect+0x20>
 800e604:	2300      	movs	r3, #0
 800e606:	e008      	b.n	800e61a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	895b      	ldrh	r3, [r3, #10]
 800e60c:	461a      	mov	r2, r3
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	fb03 f202 	mul.w	r2, r3, r2
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e618:	4413      	add	r3, r2
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b086      	sub	sp, #24
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d904      	bls.n	800e646 <get_fat+0x20>
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	683a      	ldr	r2, [r7, #0]
 800e642:	429a      	cmp	r2, r3
 800e644:	d302      	bcc.n	800e64c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e646:	2301      	movs	r3, #1
 800e648:	617b      	str	r3, [r7, #20]
 800e64a:	e08e      	b.n	800e76a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e64c:	f04f 33ff 	mov.w	r3, #4294967295
 800e650:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b03      	cmp	r3, #3
 800e658:	d061      	beq.n	800e71e <get_fat+0xf8>
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	dc7b      	bgt.n	800e756 <get_fat+0x130>
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d002      	beq.n	800e668 <get_fat+0x42>
 800e662:	2b02      	cmp	r3, #2
 800e664:	d041      	beq.n	800e6ea <get_fat+0xc4>
 800e666:	e076      	b.n	800e756 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	60fb      	str	r3, [r7, #12]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	085b      	lsrs	r3, r3, #1
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	6a1a      	ldr	r2, [r3, #32]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	0a5b      	lsrs	r3, r3, #9
 800e67e:	4413      	add	r3, r2
 800e680:	4619      	mov	r1, r3
 800e682:	6938      	ldr	r0, [r7, #16]
 800e684:	f7ff ff14 	bl	800e4b0 <move_window>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d166      	bne.n	800e75c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	60fa      	str	r2, [r7, #12]
 800e694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	4413      	add	r3, r2
 800e69c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	6a1a      	ldr	r2, [r3, #32]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	0a5b      	lsrs	r3, r3, #9
 800e6aa:	4413      	add	r3, r2
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6938      	ldr	r0, [r7, #16]
 800e6b0:	f7ff fefe 	bl	800e4b0 <move_window>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d152      	bne.n	800e760 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	4413      	add	r3, r2
 800e6c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6c8:	021b      	lsls	r3, r3, #8
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <get_fat+0xba>
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	091b      	lsrs	r3, r3, #4
 800e6de:	e002      	b.n	800e6e6 <get_fat+0xc0>
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6e6:	617b      	str	r3, [r7, #20]
			break;
 800e6e8:	e03f      	b.n	800e76a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	6a1a      	ldr	r2, [r3, #32]
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	0a1b      	lsrs	r3, r3, #8
 800e6f2:	4413      	add	r3, r2
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6938      	ldr	r0, [r7, #16]
 800e6f8:	f7ff feda 	bl	800e4b0 <move_window>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d130      	bne.n	800e764 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e710:	4413      	add	r3, r2
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff fc1c 	bl	800df50 <ld_word>
 800e718:	4603      	mov	r3, r0
 800e71a:	617b      	str	r3, [r7, #20]
			break;
 800e71c:	e025      	b.n	800e76a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	6a1a      	ldr	r2, [r3, #32]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	09db      	lsrs	r3, r3, #7
 800e726:	4413      	add	r3, r2
 800e728:	4619      	mov	r1, r3
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f7ff fec0 	bl	800e4b0 <move_window>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d118      	bne.n	800e768 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e744:	4413      	add	r3, r2
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff fc1a 	bl	800df80 <ld_dword>
 800e74c:	4603      	mov	r3, r0
 800e74e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e752:	617b      	str	r3, [r7, #20]
			break;
 800e754:	e009      	b.n	800e76a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e756:	2301      	movs	r3, #1
 800e758:	617b      	str	r3, [r7, #20]
 800e75a:	e006      	b.n	800e76a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e75c:	bf00      	nop
 800e75e:	e004      	b.n	800e76a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e760:	bf00      	nop
 800e762:	e002      	b.n	800e76a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e764:	bf00      	nop
 800e766:	e000      	b.n	800e76a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e768:	bf00      	nop
		}
	}

	return val;
 800e76a:	697b      	ldr	r3, [r7, #20]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3718      	adds	r7, #24
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e774:	b590      	push	{r4, r7, lr}
 800e776:	b089      	sub	sp, #36	@ 0x24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e780:	2302      	movs	r3, #2
 800e782:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2b01      	cmp	r3, #1
 800e788:	f240 80d9 	bls.w	800e93e <put_fat+0x1ca>
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	429a      	cmp	r2, r3
 800e794:	f080 80d3 	bcs.w	800e93e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	2b03      	cmp	r3, #3
 800e79e:	f000 8096 	beq.w	800e8ce <put_fat+0x15a>
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	f300 80cb 	bgt.w	800e93e <put_fat+0x1ca>
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d002      	beq.n	800e7b2 <put_fat+0x3e>
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d06e      	beq.n	800e88e <put_fat+0x11a>
 800e7b0:	e0c5      	b.n	800e93e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	61bb      	str	r3, [r7, #24]
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	085b      	lsrs	r3, r3, #1
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	4413      	add	r3, r2
 800e7be:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6a1a      	ldr	r2, [r3, #32]
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	0a5b      	lsrs	r3, r3, #9
 800e7c8:	4413      	add	r3, r2
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f7ff fe6f 	bl	800e4b0 <move_window>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7d6:	7ffb      	ldrb	r3, [r7, #31]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f040 80a9 	bne.w	800e930 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	1c59      	adds	r1, r3, #1
 800e7e8:	61b9      	str	r1, [r7, #24]
 800e7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ee:	4413      	add	r3, r2
 800e7f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00d      	beq.n	800e818 <put_fat+0xa4>
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	b25b      	sxtb	r3, r3
 800e802:	f003 030f 	and.w	r3, r3, #15
 800e806:	b25a      	sxtb	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	011b      	lsls	r3, r3, #4
 800e80e:	b25b      	sxtb	r3, r3
 800e810:	4313      	orrs	r3, r2
 800e812:	b25b      	sxtb	r3, r3
 800e814:	b2db      	uxtb	r3, r3
 800e816:	e001      	b.n	800e81c <put_fat+0xa8>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	697a      	ldr	r2, [r7, #20]
 800e81e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2201      	movs	r2, #1
 800e824:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6a1a      	ldr	r2, [r3, #32]
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	0a5b      	lsrs	r3, r3, #9
 800e82e:	4413      	add	r3, r2
 800e830:	4619      	mov	r1, r3
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f7ff fe3c 	bl	800e4b0 <move_window>
 800e838:	4603      	mov	r3, r0
 800e83a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e83c:	7ffb      	ldrb	r3, [r7, #31]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d178      	bne.n	800e934 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e84e:	4413      	add	r3, r2
 800e850:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	f003 0301 	and.w	r3, r3, #1
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d003      	beq.n	800e864 <put_fat+0xf0>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	091b      	lsrs	r3, r3, #4
 800e860:	b2db      	uxtb	r3, r3
 800e862:	e00e      	b.n	800e882 <put_fat+0x10e>
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	b25b      	sxtb	r3, r3
 800e86a:	f023 030f 	bic.w	r3, r3, #15
 800e86e:	b25a      	sxtb	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	0a1b      	lsrs	r3, r3, #8
 800e874:	b25b      	sxtb	r3, r3
 800e876:	f003 030f 	and.w	r3, r3, #15
 800e87a:	b25b      	sxtb	r3, r3
 800e87c:	4313      	orrs	r3, r2
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	b2db      	uxtb	r3, r3
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2201      	movs	r2, #1
 800e88a:	70da      	strb	r2, [r3, #3]
			break;
 800e88c:	e057      	b.n	800e93e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6a1a      	ldr	r2, [r3, #32]
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	0a1b      	lsrs	r3, r3, #8
 800e896:	4413      	add	r3, r2
 800e898:	4619      	mov	r1, r3
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f7ff fe08 	bl	800e4b0 <move_window>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8a4:	7ffb      	ldrb	r3, [r7, #31]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d146      	bne.n	800e938 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e8b8:	4413      	add	r3, r2
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	b292      	uxth	r2, r2
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff fb80 	bl	800dfc6 <st_word>
			fs->wflag = 1;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	70da      	strb	r2, [r3, #3]
			break;
 800e8cc:	e037      	b.n	800e93e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6a1a      	ldr	r2, [r3, #32]
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	09db      	lsrs	r3, r3, #7
 800e8d6:	4413      	add	r3, r2
 800e8d8:	4619      	mov	r1, r3
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7ff fde8 	bl	800e4b0 <move_window>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8e4:	7ffb      	ldrb	r3, [r7, #31]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d128      	bne.n	800e93c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e8fe:	4413      	add	r3, r2
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff fb3d 	bl	800df80 <ld_dword>
 800e906:	4603      	mov	r3, r0
 800e908:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e90c:	4323      	orrs	r3, r4
 800e90e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e91e:	4413      	add	r3, r2
 800e920:	6879      	ldr	r1, [r7, #4]
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff fb6a 	bl	800dffc <st_dword>
			fs->wflag = 1;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2201      	movs	r2, #1
 800e92c:	70da      	strb	r2, [r3, #3]
			break;
 800e92e:	e006      	b.n	800e93e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e930:	bf00      	nop
 800e932:	e004      	b.n	800e93e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e934:	bf00      	nop
 800e936:	e002      	b.n	800e93e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e938:	bf00      	nop
 800e93a:	e000      	b.n	800e93e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e93c:	bf00      	nop
		}
	}
	return res;
 800e93e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3724      	adds	r7, #36	@ 0x24
 800e944:	46bd      	mov	sp, r7
 800e946:	bd90      	pop	{r4, r7, pc}

0800e948 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b088      	sub	sp, #32
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d904      	bls.n	800e96e <remove_chain+0x26>
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d301      	bcc.n	800e972 <remove_chain+0x2a>
 800e96e:	2302      	movs	r3, #2
 800e970:	e04b      	b.n	800ea0a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00c      	beq.n	800e992 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e978:	f04f 32ff 	mov.w	r2, #4294967295
 800e97c:	6879      	ldr	r1, [r7, #4]
 800e97e:	69b8      	ldr	r0, [r7, #24]
 800e980:	f7ff fef8 	bl	800e774 <put_fat>
 800e984:	4603      	mov	r3, r0
 800e986:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e988:	7ffb      	ldrb	r3, [r7, #31]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <remove_chain+0x4a>
 800e98e:	7ffb      	ldrb	r3, [r7, #31]
 800e990:	e03b      	b.n	800ea0a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f7ff fe46 	bl	800e626 <get_fat>
 800e99a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d031      	beq.n	800ea06 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d101      	bne.n	800e9ac <remove_chain+0x64>
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	e02e      	b.n	800ea0a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b2:	d101      	bne.n	800e9b8 <remove_chain+0x70>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e028      	b.n	800ea0a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	69b8      	ldr	r0, [r7, #24]
 800e9be:	f7ff fed9 	bl	800e774 <put_fat>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e9c6:	7ffb      	ldrb	r3, [r7, #31]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <remove_chain+0x88>
 800e9cc:	7ffb      	ldrb	r3, [r7, #31]
 800e9ce:	e01c      	b.n	800ea0a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	691a      	ldr	r2, [r3, #16]
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	695b      	ldr	r3, [r3, #20]
 800e9d8:	3b02      	subs	r3, #2
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d20b      	bcs.n	800e9f6 <remove_chain+0xae>
			fs->free_clst++;
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	1c5a      	adds	r2, r3, #1
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	791b      	ldrb	r3, [r3, #4]
 800e9ec:	f043 0301 	orr.w	r3, r3, #1
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d3c6      	bcc.n	800e992 <remove_chain+0x4a>
 800ea04:	e000      	b.n	800ea08 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ea06:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3720      	adds	r7, #32
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b088      	sub	sp, #32
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10d      	bne.n	800ea44 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d004      	beq.n	800ea3e <create_chain+0x2c>
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	695b      	ldr	r3, [r3, #20]
 800ea38:	69ba      	ldr	r2, [r7, #24]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d31b      	bcc.n	800ea76 <create_chain+0x64>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	61bb      	str	r3, [r7, #24]
 800ea42:	e018      	b.n	800ea76 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff fded 	bl	800e626 <get_fat>
 800ea4c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d801      	bhi.n	800ea58 <create_chain+0x46>
 800ea54:	2301      	movs	r3, #1
 800ea56:	e070      	b.n	800eb3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5e:	d101      	bne.n	800ea64 <create_chain+0x52>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	e06a      	b.n	800eb3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	695b      	ldr	r3, [r3, #20]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d201      	bcs.n	800ea72 <create_chain+0x60>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	e063      	b.n	800eb3a <create_chain+0x128>
		scl = clst;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	695b      	ldr	r3, [r3, #20]
 800ea84:	69fa      	ldr	r2, [r7, #28]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d307      	bcc.n	800ea9a <create_chain+0x88>
				ncl = 2;
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d901      	bls.n	800ea9a <create_chain+0x88>
 800ea96:	2300      	movs	r3, #0
 800ea98:	e04f      	b.n	800eb3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ea9a:	69f9      	ldr	r1, [r7, #28]
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff fdc2 	bl	800e626 <get_fat>
 800eaa2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00e      	beq.n	800eac8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d003      	beq.n	800eab8 <create_chain+0xa6>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab6:	d101      	bne.n	800eabc <create_chain+0xaa>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	e03e      	b.n	800eb3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800eabc:	69fa      	ldr	r2, [r7, #28]
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d1da      	bne.n	800ea7a <create_chain+0x68>
 800eac4:	2300      	movs	r3, #0
 800eac6:	e038      	b.n	800eb3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800eac8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eaca:	f04f 32ff 	mov.w	r2, #4294967295
 800eace:	69f9      	ldr	r1, [r7, #28]
 800ead0:	6938      	ldr	r0, [r7, #16]
 800ead2:	f7ff fe4f 	bl	800e774 <put_fat>
 800ead6:	4603      	mov	r3, r0
 800ead8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d109      	bne.n	800eaf4 <create_chain+0xe2>
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d006      	beq.n	800eaf4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eae6:	69fa      	ldr	r2, [r7, #28]
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6938      	ldr	r0, [r7, #16]
 800eaec:	f7ff fe42 	bl	800e774 <put_fat>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d116      	bne.n	800eb28 <create_chain+0x116>
		fs->last_clst = ncl;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	69fa      	ldr	r2, [r7, #28]
 800eafe:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	691a      	ldr	r2, [r3, #16]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	3b02      	subs	r3, #2
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d804      	bhi.n	800eb18 <create_chain+0x106>
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	1e5a      	subs	r2, r3, #1
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	791b      	ldrb	r3, [r3, #4]
 800eb1c:	f043 0301 	orr.w	r3, r3, #1
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	711a      	strb	r2, [r3, #4]
 800eb26:	e007      	b.n	800eb38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d102      	bne.n	800eb34 <create_chain+0x122>
 800eb2e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb32:	e000      	b.n	800eb36 <create_chain+0x124>
 800eb34:	2301      	movs	r3, #1
 800eb36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eb38:	69fb      	ldr	r3, [r7, #28]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3720      	adds	r7, #32
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eb42:	b480      	push	{r7}
 800eb44:	b087      	sub	sp, #28
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
 800eb4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb56:	3304      	adds	r3, #4
 800eb58:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	0a5b      	lsrs	r3, r3, #9
 800eb5e:	68fa      	ldr	r2, [r7, #12]
 800eb60:	8952      	ldrh	r2, [r2, #10]
 800eb62:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb66:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	1d1a      	adds	r2, r3, #4
 800eb6c:	613a      	str	r2, [r7, #16]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <clmt_clust+0x3a>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	e010      	b.n	800eb9e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800eb7c:	697a      	ldr	r2, [r7, #20]
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d307      	bcc.n	800eb94 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800eb84:	697a      	ldr	r2, [r7, #20]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	617b      	str	r3, [r7, #20]
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb92:	e7e9      	b.n	800eb68 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800eb94:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	4413      	add	r3, r2
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	371c      	adds	r7, #28
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b086      	sub	sp, #24
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
 800ebb2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ebc0:	d204      	bcs.n	800ebcc <dir_sdi+0x22>
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	f003 031f 	and.w	r3, r3, #31
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d001      	beq.n	800ebd0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ebcc:	2302      	movs	r3, #2
 800ebce:	e063      	b.n	800ec98 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d106      	bne.n	800ebf0 <dir_sdi+0x46>
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d902      	bls.n	800ebf0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10c      	bne.n	800ec10 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	095b      	lsrs	r3, r3, #5
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	8912      	ldrh	r2, [r2, #8]
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d301      	bcc.n	800ec06 <dir_sdi+0x5c>
 800ec02:	2302      	movs	r3, #2
 800ec04:	e048      	b.n	800ec98 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	61da      	str	r2, [r3, #28]
 800ec0e:	e029      	b.n	800ec64 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	895b      	ldrh	r3, [r3, #10]
 800ec14:	025b      	lsls	r3, r3, #9
 800ec16:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec18:	e019      	b.n	800ec4e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6979      	ldr	r1, [r7, #20]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7ff fd01 	bl	800e626 <get_fat>
 800ec24:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2c:	d101      	bne.n	800ec32 <dir_sdi+0x88>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e032      	b.n	800ec98 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d904      	bls.n	800ec42 <dir_sdi+0x98>
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	695b      	ldr	r3, [r3, #20]
 800ec3c:	697a      	ldr	r2, [r7, #20]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d301      	bcc.n	800ec46 <dir_sdi+0x9c>
 800ec42:	2302      	movs	r3, #2
 800ec44:	e028      	b.n	800ec98 <dir_sdi+0xee>
			ofs -= csz;
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d2e1      	bcs.n	800ec1a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ec56:	6979      	ldr	r1, [r7, #20]
 800ec58:	6938      	ldr	r0, [r7, #16]
 800ec5a:	f7ff fcc5 	bl	800e5e8 <clust2sect>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	69db      	ldr	r3, [r3, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d101      	bne.n	800ec76 <dir_sdi+0xcc>
 800ec72:	2302      	movs	r3, #2
 800ec74:	e010      	b.n	800ec98 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	69da      	ldr	r2, [r3, #28]
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	0a5b      	lsrs	r3, r3, #9
 800ec7e:	441a      	add	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec90:	441a      	add	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec96:	2300      	movs	r3, #0
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	695b      	ldr	r3, [r3, #20]
 800ecb4:	3320      	adds	r3, #32
 800ecb6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d003      	beq.n	800ecc8 <dir_next+0x28>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ecc6:	d301      	bcc.n	800eccc <dir_next+0x2c>
 800ecc8:	2304      	movs	r3, #4
 800ecca:	e0aa      	b.n	800ee22 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f040 8098 	bne.w	800ee08 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	69db      	ldr	r3, [r3, #28]
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10b      	bne.n	800ed02 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	095b      	lsrs	r3, r3, #5
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	8912      	ldrh	r2, [r2, #8]
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	f0c0 8088 	bcc.w	800ee08 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	61da      	str	r2, [r3, #28]
 800ecfe:	2304      	movs	r3, #4
 800ed00:	e08f      	b.n	800ee22 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	0a5b      	lsrs	r3, r3, #9
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	8952      	ldrh	r2, [r2, #10]
 800ed0a:	3a01      	subs	r2, #1
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d17a      	bne.n	800ee08 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	4610      	mov	r0, r2
 800ed1c:	f7ff fc83 	bl	800e626 <get_fat>
 800ed20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d801      	bhi.n	800ed2c <dir_next+0x8c>
 800ed28:	2302      	movs	r3, #2
 800ed2a:	e07a      	b.n	800ee22 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed32:	d101      	bne.n	800ed38 <dir_next+0x98>
 800ed34:	2301      	movs	r3, #1
 800ed36:	e074      	b.n	800ee22 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	697a      	ldr	r2, [r7, #20]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d358      	bcc.n	800edf4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d104      	bne.n	800ed52 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	61da      	str	r2, [r3, #28]
 800ed4e:	2304      	movs	r3, #4
 800ed50:	e067      	b.n	800ee22 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	699b      	ldr	r3, [r3, #24]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7ff fe59 	bl	800ea12 <create_chain>
 800ed60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <dir_next+0xcc>
 800ed68:	2307      	movs	r3, #7
 800ed6a:	e05a      	b.n	800ee22 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d101      	bne.n	800ed76 <dir_next+0xd6>
 800ed72:	2302      	movs	r3, #2
 800ed74:	e055      	b.n	800ee22 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7c:	d101      	bne.n	800ed82 <dir_next+0xe2>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e04f      	b.n	800ee22 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7ff fb50 	bl	800e428 <sync_window>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <dir_next+0xf2>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e047      	b.n	800ee22 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	3330      	adds	r3, #48	@ 0x30
 800ed96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7ff f97a 	bl	800e096 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eda2:	2300      	movs	r3, #0
 800eda4:	613b      	str	r3, [r7, #16]
 800eda6:	6979      	ldr	r1, [r7, #20]
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff fc1d 	bl	800e5e8 <clust2sect>
 800edae:	4602      	mov	r2, r0
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800edb4:	e012      	b.n	800eddc <dir_next+0x13c>
						fs->wflag = 1;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2201      	movs	r2, #1
 800edba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f7ff fb33 	bl	800e428 <sync_window>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <dir_next+0x12c>
 800edc8:	2301      	movs	r3, #1
 800edca:	e02a      	b.n	800ee22 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	3301      	adds	r3, #1
 800edd0:	613b      	str	r3, [r7, #16]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	895b      	ldrh	r3, [r3, #10]
 800ede0:	461a      	mov	r2, r3
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d3e6      	bcc.n	800edb6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	1ad2      	subs	r2, r2, r3
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	697a      	ldr	r2, [r7, #20]
 800edf8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800edfa:	6979      	ldr	r1, [r7, #20]
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f7ff fbf3 	bl	800e5e8 <clust2sect>
 800ee02:	4602      	mov	r2, r0
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee1a:	441a      	add	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b086      	sub	sp, #24
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff feb4 	bl	800ebaa <dir_sdi>
 800ee42:	4603      	mov	r3, r0
 800ee44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee46:	7dfb      	ldrb	r3, [r7, #23]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d12b      	bne.n	800eea4 <dir_alloc+0x7a>
		n = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	69db      	ldr	r3, [r3, #28]
 800ee54:	4619      	mov	r1, r3
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7ff fb2a 	bl	800e4b0 <move_window>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee60:	7dfb      	ldrb	r3, [r7, #23]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d11d      	bne.n	800eea2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2be5      	cmp	r3, #229	@ 0xe5
 800ee6e:	d004      	beq.n	800ee7a <dir_alloc+0x50>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d107      	bne.n	800ee8a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	613b      	str	r3, [r7, #16]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d102      	bne.n	800ee8e <dir_alloc+0x64>
 800ee88:	e00c      	b.n	800eea4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ee8e:	2101      	movs	r1, #1
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7ff ff05 	bl	800eca0 <dir_next>
 800ee96:	4603      	mov	r3, r0
 800ee98:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee9a:	7dfb      	ldrb	r3, [r7, #23]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d0d7      	beq.n	800ee50 <dir_alloc+0x26>
 800eea0:	e000      	b.n	800eea4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800eea2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eea4:	7dfb      	ldrb	r3, [r7, #23]
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	d101      	bne.n	800eeae <dir_alloc+0x84>
 800eeaa:	2307      	movs	r3, #7
 800eeac:	75fb      	strb	r3, [r7, #23]
	return res;
 800eeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	331a      	adds	r3, #26
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7ff f842 	bl	800df50 <ld_word>
 800eecc:	4603      	mov	r3, r0
 800eece:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d109      	bne.n	800eeec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	3314      	adds	r3, #20
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff f837 	bl	800df50 <ld_word>
 800eee2:	4603      	mov	r3, r0
 800eee4:	041b      	lsls	r3, r3, #16
 800eee6:	68fa      	ldr	r2, [r7, #12]
 800eee8:	4313      	orrs	r3, r2
 800eeea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eeec:	68fb      	ldr	r3, [r7, #12]
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b084      	sub	sp, #16
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	60f8      	str	r0, [r7, #12]
 800eefe:	60b9      	str	r1, [r7, #8]
 800ef00:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	331a      	adds	r3, #26
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	b292      	uxth	r2, r2
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff f85a 	bl	800dfc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	2b03      	cmp	r3, #3
 800ef18:	d109      	bne.n	800ef2e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f103 0214 	add.w	r2, r3, #20
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	0c1b      	lsrs	r3, r3, #16
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	4619      	mov	r1, r3
 800ef28:	4610      	mov	r0, r2
 800ef2a:	f7ff f84c 	bl	800dfc6 <st_word>
	}
}
 800ef2e:	bf00      	nop
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b086      	sub	sp, #24
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ef44:	2100      	movs	r1, #0
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff fe2f 	bl	800ebaa <dir_sdi>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ef50:	7dfb      	ldrb	r3, [r7, #23]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <dir_find+0x24>
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
 800ef58:	e03e      	b.n	800efd8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	6938      	ldr	r0, [r7, #16]
 800ef62:	f7ff faa5 	bl	800e4b0 <move_window>
 800ef66:	4603      	mov	r3, r0
 800ef68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef6a:	7dfb      	ldrb	r3, [r7, #23]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d12f      	bne.n	800efd0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6a1b      	ldr	r3, [r3, #32]
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d102      	bne.n	800ef84 <dir_find+0x4e>
 800ef7e:	2304      	movs	r3, #4
 800ef80:	75fb      	strb	r3, [r7, #23]
 800ef82:	e028      	b.n	800efd6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6a1b      	ldr	r3, [r3, #32]
 800ef88:	330b      	adds	r3, #11
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	330b      	adds	r3, #11
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	f003 0308 	and.w	r3, r3, #8
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10a      	bne.n	800efbc <dir_find+0x86>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6a18      	ldr	r0, [r3, #32]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	3324      	adds	r3, #36	@ 0x24
 800efae:	220b      	movs	r2, #11
 800efb0:	4619      	mov	r1, r3
 800efb2:	f7ff f88b 	bl	800e0cc <mem_cmp>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00b      	beq.n	800efd4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800efbc:	2100      	movs	r1, #0
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7ff fe6e 	bl	800eca0 <dir_next>
 800efc4:	4603      	mov	r3, r0
 800efc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800efc8:	7dfb      	ldrb	r3, [r7, #23]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0c5      	beq.n	800ef5a <dir_find+0x24>
 800efce:	e002      	b.n	800efd6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800efd0:	bf00      	nop
 800efd2:	e000      	b.n	800efd6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800efd4:	bf00      	nop

	return res;
 800efd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800efee:	2101      	movs	r1, #1
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7ff ff1a 	bl	800ee2a <dir_alloc>
 800eff6:	4603      	mov	r3, r0
 800eff8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800effa:	7bfb      	ldrb	r3, [r7, #15]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d11c      	bne.n	800f03a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	69db      	ldr	r3, [r3, #28]
 800f004:	4619      	mov	r1, r3
 800f006:	68b8      	ldr	r0, [r7, #8]
 800f008:	f7ff fa52 	bl	800e4b0 <move_window>
 800f00c:	4603      	mov	r3, r0
 800f00e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f010:	7bfb      	ldrb	r3, [r7, #15]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d111      	bne.n	800f03a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	2220      	movs	r2, #32
 800f01c:	2100      	movs	r1, #0
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff f839 	bl	800e096 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6a18      	ldr	r0, [r3, #32]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	3324      	adds	r3, #36	@ 0x24
 800f02c:	220b      	movs	r2, #11
 800f02e:	4619      	mov	r1, r3
 800f030:	f7ff f810 	bl	800e054 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2201      	movs	r2, #1
 800f038:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	60fb      	str	r3, [r7, #12]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3324      	adds	r3, #36	@ 0x24
 800f058:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f05a:	220b      	movs	r2, #11
 800f05c:	2120      	movs	r1, #32
 800f05e:	68b8      	ldr	r0, [r7, #8]
 800f060:	f7ff f819 	bl	800e096 <mem_set>
	si = i = 0; ni = 8;
 800f064:	2300      	movs	r3, #0
 800f066:	613b      	str	r3, [r7, #16]
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	61fb      	str	r3, [r7, #28]
 800f06c:	2308      	movs	r3, #8
 800f06e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	61fa      	str	r2, [r7, #28]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	4413      	add	r3, r2
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f07e:	7efb      	ldrb	r3, [r7, #27]
 800f080:	2b20      	cmp	r3, #32
 800f082:	d94e      	bls.n	800f122 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f084:	7efb      	ldrb	r3, [r7, #27]
 800f086:	2b2f      	cmp	r3, #47	@ 0x2f
 800f088:	d006      	beq.n	800f098 <create_name+0x54>
 800f08a:	7efb      	ldrb	r3, [r7, #27]
 800f08c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f08e:	d110      	bne.n	800f0b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f090:	e002      	b.n	800f098 <create_name+0x54>
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	3301      	adds	r3, #1
 800f096:	61fb      	str	r3, [r7, #28]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	4413      	add	r3, r2
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f0a2:	d0f6      	beq.n	800f092 <create_name+0x4e>
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800f0ae:	d0f0      	beq.n	800f092 <create_name+0x4e>
			break;
 800f0b0:	e038      	b.n	800f124 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f0b2:	7efb      	ldrb	r3, [r7, #27]
 800f0b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0b6:	d003      	beq.n	800f0c0 <create_name+0x7c>
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d30c      	bcc.n	800f0da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	2b0b      	cmp	r3, #11
 800f0c4:	d002      	beq.n	800f0cc <create_name+0x88>
 800f0c6:	7efb      	ldrb	r3, [r7, #27]
 800f0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0ca:	d001      	beq.n	800f0d0 <create_name+0x8c>
 800f0cc:	2306      	movs	r3, #6
 800f0ce:	e044      	b.n	800f15a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f0d0:	2308      	movs	r3, #8
 800f0d2:	613b      	str	r3, [r7, #16]
 800f0d4:	230b      	movs	r3, #11
 800f0d6:	617b      	str	r3, [r7, #20]
			continue;
 800f0d8:	e022      	b.n	800f120 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f0da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	da04      	bge.n	800f0ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f0e2:	7efb      	ldrb	r3, [r7, #27]
 800f0e4:	3b80      	subs	r3, #128	@ 0x80
 800f0e6:	4a1f      	ldr	r2, [pc, #124]	@ (800f164 <create_name+0x120>)
 800f0e8:	5cd3      	ldrb	r3, [r2, r3]
 800f0ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f0ec:	7efb      	ldrb	r3, [r7, #27]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	481d      	ldr	r0, [pc, #116]	@ (800f168 <create_name+0x124>)
 800f0f2:	f7ff f812 	bl	800e11a <chk_chr>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <create_name+0xbc>
 800f0fc:	2306      	movs	r3, #6
 800f0fe:	e02c      	b.n	800f15a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f100:	7efb      	ldrb	r3, [r7, #27]
 800f102:	2b60      	cmp	r3, #96	@ 0x60
 800f104:	d905      	bls.n	800f112 <create_name+0xce>
 800f106:	7efb      	ldrb	r3, [r7, #27]
 800f108:	2b7a      	cmp	r3, #122	@ 0x7a
 800f10a:	d802      	bhi.n	800f112 <create_name+0xce>
 800f10c:	7efb      	ldrb	r3, [r7, #27]
 800f10e:	3b20      	subs	r3, #32
 800f110:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	613a      	str	r2, [r7, #16]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	4413      	add	r3, r2
 800f11c:	7efa      	ldrb	r2, [r7, #27]
 800f11e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f120:	e7a6      	b.n	800f070 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f122:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	441a      	add	r2, r3
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d101      	bne.n	800f138 <create_name+0xf4>
 800f134:	2306      	movs	r3, #6
 800f136:	e010      	b.n	800f15a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2be5      	cmp	r3, #229	@ 0xe5
 800f13e:	d102      	bne.n	800f146 <create_name+0x102>
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2205      	movs	r2, #5
 800f144:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f146:	7efb      	ldrb	r3, [r7, #27]
 800f148:	2b20      	cmp	r3, #32
 800f14a:	d801      	bhi.n	800f150 <create_name+0x10c>
 800f14c:	2204      	movs	r2, #4
 800f14e:	e000      	b.n	800f152 <create_name+0x10e>
 800f150:	2200      	movs	r2, #0
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	330b      	adds	r3, #11
 800f156:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f158:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3720      	adds	r7, #32
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	08010d04 	.word	0x08010d04
 800f168:	08010c6c 	.word	0x08010c6c

0800f16c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f180:	e002      	b.n	800f188 <follow_path+0x1c>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	3301      	adds	r3, #1
 800f186:	603b      	str	r3, [r7, #0]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f18e:	d0f8      	beq.n	800f182 <follow_path+0x16>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b5c      	cmp	r3, #92	@ 0x5c
 800f196:	d0f4      	beq.n	800f182 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	2200      	movs	r2, #0
 800f19c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	2b1f      	cmp	r3, #31
 800f1a4:	d80a      	bhi.n	800f1bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2280      	movs	r2, #128	@ 0x80
 800f1aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7ff fcfa 	bl	800ebaa <dir_sdi>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	75fb      	strb	r3, [r7, #23]
 800f1ba:	e043      	b.n	800f244 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f1bc:	463b      	mov	r3, r7
 800f1be:	4619      	mov	r1, r3
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7ff ff3f 	bl	800f044 <create_name>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f1ca:	7dfb      	ldrb	r3, [r7, #23]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d134      	bne.n	800f23a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff feb0 	bl	800ef36 <dir_find>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f1e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f1e2:	7dfb      	ldrb	r3, [r7, #23]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00a      	beq.n	800f1fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f1e8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ea:	2b04      	cmp	r3, #4
 800f1ec:	d127      	bne.n	800f23e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f1ee:	7afb      	ldrb	r3, [r7, #11]
 800f1f0:	f003 0304 	and.w	r3, r3, #4
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d122      	bne.n	800f23e <follow_path+0xd2>
 800f1f8:	2305      	movs	r3, #5
 800f1fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f1fc:	e01f      	b.n	800f23e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f1fe:	7afb      	ldrb	r3, [r7, #11]
 800f200:	f003 0304 	and.w	r3, r3, #4
 800f204:	2b00      	cmp	r3, #0
 800f206:	d11c      	bne.n	800f242 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	799b      	ldrb	r3, [r3, #6]
 800f20c:	f003 0310 	and.w	r3, r3, #16
 800f210:	2b00      	cmp	r3, #0
 800f212:	d102      	bne.n	800f21a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f214:	2305      	movs	r3, #5
 800f216:	75fb      	strb	r3, [r7, #23]
 800f218:	e014      	b.n	800f244 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f228:	4413      	add	r3, r2
 800f22a:	4619      	mov	r1, r3
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff fe43 	bl	800eeb8 <ld_clust>
 800f232:	4602      	mov	r2, r0
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f238:	e7c0      	b.n	800f1bc <follow_path+0x50>
			if (res != FR_OK) break;
 800f23a:	bf00      	nop
 800f23c:	e002      	b.n	800f244 <follow_path+0xd8>
				break;
 800f23e:	bf00      	nop
 800f240:	e000      	b.n	800f244 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f242:	bf00      	nop
			}
		}
	}

	return res;
 800f244:	7dfb      	ldrb	r3, [r7, #23]
}
 800f246:	4618      	mov	r0, r3
 800f248:	3718      	adds	r7, #24
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f24e:	b480      	push	{r7}
 800f250:	b087      	sub	sp, #28
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f256:	f04f 33ff 	mov.w	r3, #4294967295
 800f25a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d031      	beq.n	800f2c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	617b      	str	r3, [r7, #20]
 800f26a:	e002      	b.n	800f272 <get_ldnumber+0x24>
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	3301      	adds	r3, #1
 800f270:	617b      	str	r3, [r7, #20]
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b20      	cmp	r3, #32
 800f278:	d903      	bls.n	800f282 <get_ldnumber+0x34>
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f280:	d1f4      	bne.n	800f26c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b3a      	cmp	r3, #58	@ 0x3a
 800f288:	d11c      	bne.n	800f2c4 <get_ldnumber+0x76>
			tp = *path;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	1c5a      	adds	r2, r3, #1
 800f294:	60fa      	str	r2, [r7, #12]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	3b30      	subs	r3, #48	@ 0x30
 800f29a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b09      	cmp	r3, #9
 800f2a0:	d80e      	bhi.n	800f2c0 <get_ldnumber+0x72>
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d10a      	bne.n	800f2c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d107      	bne.n	800f2c0 <get_ldnumber+0x72>
					vol = (int)i;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	697a      	ldr	r2, [r7, #20]
 800f2be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	e002      	b.n	800f2ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f2c8:	693b      	ldr	r3, [r7, #16]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	371c      	adds	r7, #28
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
	...

0800f2d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	70da      	strb	r2, [r3, #3]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff f8dc 	bl	800e4b0 <move_window>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <check_fs+0x2a>
 800f2fe:	2304      	movs	r3, #4
 800f300:	e038      	b.n	800f374 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3330      	adds	r3, #48	@ 0x30
 800f306:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe fe20 	bl	800df50 <ld_word>
 800f310:	4603      	mov	r3, r0
 800f312:	461a      	mov	r2, r3
 800f314:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f318:	429a      	cmp	r2, r3
 800f31a:	d001      	beq.n	800f320 <check_fs+0x48>
 800f31c:	2303      	movs	r3, #3
 800f31e:	e029      	b.n	800f374 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f326:	2be9      	cmp	r3, #233	@ 0xe9
 800f328:	d009      	beq.n	800f33e <check_fs+0x66>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f330:	2beb      	cmp	r3, #235	@ 0xeb
 800f332:	d11e      	bne.n	800f372 <check_fs+0x9a>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f33a:	2b90      	cmp	r3, #144	@ 0x90
 800f33c:	d119      	bne.n	800f372 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	3330      	adds	r3, #48	@ 0x30
 800f342:	3336      	adds	r3, #54	@ 0x36
 800f344:	4618      	mov	r0, r3
 800f346:	f7fe fe1b 	bl	800df80 <ld_dword>
 800f34a:	4603      	mov	r3, r0
 800f34c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f350:	4a0a      	ldr	r2, [pc, #40]	@ (800f37c <check_fs+0xa4>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d101      	bne.n	800f35a <check_fs+0x82>
 800f356:	2300      	movs	r3, #0
 800f358:	e00c      	b.n	800f374 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	3330      	adds	r3, #48	@ 0x30
 800f35e:	3352      	adds	r3, #82	@ 0x52
 800f360:	4618      	mov	r0, r3
 800f362:	f7fe fe0d 	bl	800df80 <ld_dword>
 800f366:	4603      	mov	r3, r0
 800f368:	4a05      	ldr	r2, [pc, #20]	@ (800f380 <check_fs+0xa8>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d101      	bne.n	800f372 <check_fs+0x9a>
 800f36e:	2300      	movs	r3, #0
 800f370:	e000      	b.n	800f374 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f372:	2302      	movs	r3, #2
}
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	00544146 	.word	0x00544146
 800f380:	33544146 	.word	0x33544146

0800f384 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b096      	sub	sp, #88	@ 0x58
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	4613      	mov	r3, r2
 800f390:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2200      	movs	r2, #0
 800f396:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f7ff ff58 	bl	800f24e <get_ldnumber>
 800f39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	da01      	bge.n	800f3aa <find_volume+0x26>
 800f3a6:	230b      	movs	r3, #11
 800f3a8:	e22d      	b.n	800f806 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f3aa:	4aa1      	ldr	r2, [pc, #644]	@ (800f630 <find_volume+0x2ac>)
 800f3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <find_volume+0x3a>
 800f3ba:	230c      	movs	r3, #12
 800f3bc:	e223      	b.n	800f806 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f3c4:	79fb      	ldrb	r3, [r7, #7]
 800f3c6:	f023 0301 	bic.w	r3, r3, #1
 800f3ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d01a      	beq.n	800f40a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d6:	785b      	ldrb	r3, [r3, #1]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7fe fd19 	bl	800de10 <disk_status>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3e8:	f003 0301 	and.w	r3, r3, #1
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d10c      	bne.n	800f40a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d007      	beq.n	800f406 <find_volume+0x82>
 800f3f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3fa:	f003 0304 	and.w	r3, r3, #4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f402:	230a      	movs	r3, #10
 800f404:	e1ff      	b.n	800f806 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f406:	2300      	movs	r3, #0
 800f408:	e1fd      	b.n	800f806 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f40c:	2200      	movs	r2, #0
 800f40e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f412:	b2da      	uxtb	r2, r3
 800f414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f416:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f41a:	785b      	ldrb	r3, [r3, #1]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fe fd11 	bl	800de44 <disk_initialize>
 800f422:	4603      	mov	r3, r0
 800f424:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f428:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	2b00      	cmp	r3, #0
 800f432:	d001      	beq.n	800f438 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f434:	2303      	movs	r3, #3
 800f436:	e1e6      	b.n	800f806 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d007      	beq.n	800f44e <find_volume+0xca>
 800f43e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f442:	f003 0304 	and.w	r3, r3, #4
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f44a:	230a      	movs	r3, #10
 800f44c:	e1db      	b.n	800f806 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f452:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f454:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f456:	f7ff ff3f 	bl	800f2d8 <check_fs>
 800f45a:	4603      	mov	r3, r0
 800f45c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f460:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f464:	2b02      	cmp	r3, #2
 800f466:	d149      	bne.n	800f4fc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f468:	2300      	movs	r3, #0
 800f46a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f46c:	e01e      	b.n	800f4ac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f470:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f476:	011b      	lsls	r3, r3, #4
 800f478:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f47c:	4413      	add	r3, r2
 800f47e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f482:	3304      	adds	r3, #4
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d006      	beq.n	800f498 <find_volume+0x114>
 800f48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48c:	3308      	adds	r3, #8
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fe fd76 	bl	800df80 <ld_dword>
 800f494:	4602      	mov	r2, r0
 800f496:	e000      	b.n	800f49a <find_volume+0x116>
 800f498:	2200      	movs	r2, #0
 800f49a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	3358      	adds	r3, #88	@ 0x58
 800f4a0:	443b      	add	r3, r7
 800f4a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f4a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4ae:	2b03      	cmp	r3, #3
 800f4b0:	d9dd      	bls.n	800f46e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d002      	beq.n	800f4c2 <find_volume+0x13e>
 800f4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f4c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	3358      	adds	r3, #88	@ 0x58
 800f4c8:	443b      	add	r3, r7
 800f4ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f4ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d005      	beq.n	800f4e2 <find_volume+0x15e>
 800f4d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f4da:	f7ff fefd 	bl	800f2d8 <check_fs>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	e000      	b.n	800f4e4 <find_volume+0x160>
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d905      	bls.n	800f4fc <find_volume+0x178>
 800f4f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4f8:	2b03      	cmp	r3, #3
 800f4fa:	d9e2      	bls.n	800f4c2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f4fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f500:	2b04      	cmp	r3, #4
 800f502:	d101      	bne.n	800f508 <find_volume+0x184>
 800f504:	2301      	movs	r3, #1
 800f506:	e17e      	b.n	800f806 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f508:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d901      	bls.n	800f514 <find_volume+0x190>
 800f510:	230d      	movs	r3, #13
 800f512:	e178      	b.n	800f806 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f516:	3330      	adds	r3, #48	@ 0x30
 800f518:	330b      	adds	r3, #11
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fe fd18 	bl	800df50 <ld_word>
 800f520:	4603      	mov	r3, r0
 800f522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f526:	d001      	beq.n	800f52c <find_volume+0x1a8>
 800f528:	230d      	movs	r3, #13
 800f52a:	e16c      	b.n	800f806 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52e:	3330      	adds	r3, #48	@ 0x30
 800f530:	3316      	adds	r3, #22
 800f532:	4618      	mov	r0, r3
 800f534:	f7fe fd0c 	bl	800df50 <ld_word>
 800f538:	4603      	mov	r3, r0
 800f53a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <find_volume+0x1cc>
 800f542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f544:	3330      	adds	r3, #48	@ 0x30
 800f546:	3324      	adds	r3, #36	@ 0x24
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fe fd19 	bl	800df80 <ld_dword>
 800f54e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f554:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f558:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f55e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f562:	789b      	ldrb	r3, [r3, #2]
 800f564:	2b01      	cmp	r3, #1
 800f566:	d005      	beq.n	800f574 <find_volume+0x1f0>
 800f568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56a:	789b      	ldrb	r3, [r3, #2]
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d001      	beq.n	800f574 <find_volume+0x1f0>
 800f570:	230d      	movs	r3, #13
 800f572:	e148      	b.n	800f806 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f576:	789b      	ldrb	r3, [r3, #2]
 800f578:	461a      	mov	r2, r3
 800f57a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f57c:	fb02 f303 	mul.w	r3, r2, r3
 800f580:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f588:	461a      	mov	r2, r3
 800f58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f590:	895b      	ldrh	r3, [r3, #10]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d008      	beq.n	800f5a8 <find_volume+0x224>
 800f596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f598:	895b      	ldrh	r3, [r3, #10]
 800f59a:	461a      	mov	r2, r3
 800f59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59e:	895b      	ldrh	r3, [r3, #10]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d001      	beq.n	800f5ac <find_volume+0x228>
 800f5a8:	230d      	movs	r3, #13
 800f5aa:	e12c      	b.n	800f806 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ae:	3330      	adds	r3, #48	@ 0x30
 800f5b0:	3311      	adds	r3, #17
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fccc 	bl	800df50 <ld_word>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c2:	891b      	ldrh	r3, [r3, #8]
 800f5c4:	f003 030f 	and.w	r3, r3, #15
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d001      	beq.n	800f5d2 <find_volume+0x24e>
 800f5ce:	230d      	movs	r3, #13
 800f5d0:	e119      	b.n	800f806 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d4:	3330      	adds	r3, #48	@ 0x30
 800f5d6:	3313      	adds	r3, #19
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fe fcb9 	bl	800df50 <ld_word>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d106      	bne.n	800f5f6 <find_volume+0x272>
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	3330      	adds	r3, #48	@ 0x30
 800f5ec:	3320      	adds	r3, #32
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fe fcc6 	bl	800df80 <ld_dword>
 800f5f4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f8:	3330      	adds	r3, #48	@ 0x30
 800f5fa:	330e      	adds	r3, #14
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe fca7 	bl	800df50 <ld_word>
 800f602:	4603      	mov	r3, r0
 800f604:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f606:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d101      	bne.n	800f610 <find_volume+0x28c>
 800f60c:	230d      	movs	r3, #13
 800f60e:	e0fa      	b.n	800f806 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f610:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f614:	4413      	add	r3, r2
 800f616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f618:	8912      	ldrh	r2, [r2, #8]
 800f61a:	0912      	lsrs	r2, r2, #4
 800f61c:	b292      	uxth	r2, r2
 800f61e:	4413      	add	r3, r2
 800f620:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f626:	429a      	cmp	r2, r3
 800f628:	d204      	bcs.n	800f634 <find_volume+0x2b0>
 800f62a:	230d      	movs	r3, #13
 800f62c:	e0eb      	b.n	800f806 <find_volume+0x482>
 800f62e:	bf00      	nop
 800f630:	2000080c 	.word	0x2000080c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f63c:	8952      	ldrh	r2, [r2, #10]
 800f63e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f642:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	2b00      	cmp	r3, #0
 800f648:	d101      	bne.n	800f64e <find_volume+0x2ca>
 800f64a:	230d      	movs	r3, #13
 800f64c:	e0db      	b.n	800f806 <find_volume+0x482>
		fmt = FS_FAT32;
 800f64e:	2303      	movs	r3, #3
 800f650:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f656:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d802      	bhi.n	800f664 <find_volume+0x2e0>
 800f65e:	2302      	movs	r3, #2
 800f660:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f666:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d802      	bhi.n	800f674 <find_volume+0x2f0>
 800f66e:	2301      	movs	r3, #1
 800f670:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f676:	1c9a      	adds	r2, r3, #2
 800f678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f67a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f67e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f680:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f682:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f686:	441a      	add	r2, r3
 800f688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f68c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f690:	441a      	add	r2, r3
 800f692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f694:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f696:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f69a:	2b03      	cmp	r3, #3
 800f69c:	d11e      	bne.n	800f6dc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a0:	3330      	adds	r3, #48	@ 0x30
 800f6a2:	332a      	adds	r3, #42	@ 0x2a
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fe fc53 	bl	800df50 <ld_word>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <find_volume+0x330>
 800f6b0:	230d      	movs	r3, #13
 800f6b2:	e0a8      	b.n	800f806 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b6:	891b      	ldrh	r3, [r3, #8]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <find_volume+0x33c>
 800f6bc:	230d      	movs	r3, #13
 800f6be:	e0a2      	b.n	800f806 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c2:	3330      	adds	r3, #48	@ 0x30
 800f6c4:	332c      	adds	r3, #44	@ 0x2c
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe fc5a 	bl	800df80 <ld_dword>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d4:	695b      	ldr	r3, [r3, #20]
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6da:	e01f      	b.n	800f71c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6de:	891b      	ldrh	r3, [r3, #8]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <find_volume+0x364>
 800f6e4:	230d      	movs	r3, #13
 800f6e6:	e08e      	b.n	800f806 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ea:	6a1a      	ldr	r2, [r3, #32]
 800f6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6ee:	441a      	add	r2, r3
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f6f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d103      	bne.n	800f704 <find_volume+0x380>
 800f6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	e00a      	b.n	800f71a <find_volume+0x396>
 800f704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f706:	695a      	ldr	r2, [r3, #20]
 800f708:	4613      	mov	r3, r2
 800f70a:	005b      	lsls	r3, r3, #1
 800f70c:	4413      	add	r3, r2
 800f70e:	085a      	lsrs	r2, r3, #1
 800f710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f712:	695b      	ldr	r3, [r3, #20]
 800f714:	f003 0301 	and.w	r3, r3, #1
 800f718:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f71a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71e:	699a      	ldr	r2, [r3, #24]
 800f720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f722:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f726:	0a5b      	lsrs	r3, r3, #9
 800f728:	429a      	cmp	r2, r3
 800f72a:	d201      	bcs.n	800f730 <find_volume+0x3ac>
 800f72c:	230d      	movs	r3, #13
 800f72e:	e06a      	b.n	800f806 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f732:	f04f 32ff 	mov.w	r2, #4294967295
 800f736:	611a      	str	r2, [r3, #16]
 800f738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73a:	691a      	ldr	r2, [r3, #16]
 800f73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	2280      	movs	r2, #128	@ 0x80
 800f744:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f746:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d149      	bne.n	800f7e2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f750:	3330      	adds	r3, #48	@ 0x30
 800f752:	3330      	adds	r3, #48	@ 0x30
 800f754:	4618      	mov	r0, r3
 800f756:	f7fe fbfb 	bl	800df50 <ld_word>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d140      	bne.n	800f7e2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f762:	3301      	adds	r3, #1
 800f764:	4619      	mov	r1, r3
 800f766:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f768:	f7fe fea2 	bl	800e4b0 <move_window>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d137      	bne.n	800f7e2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f774:	2200      	movs	r2, #0
 800f776:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77a:	3330      	adds	r3, #48	@ 0x30
 800f77c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f780:	4618      	mov	r0, r3
 800f782:	f7fe fbe5 	bl	800df50 <ld_word>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
 800f78a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f78e:	429a      	cmp	r2, r3
 800f790:	d127      	bne.n	800f7e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f794:	3330      	adds	r3, #48	@ 0x30
 800f796:	4618      	mov	r0, r3
 800f798:	f7fe fbf2 	bl	800df80 <ld_dword>
 800f79c:	4603      	mov	r3, r0
 800f79e:	4a1c      	ldr	r2, [pc, #112]	@ (800f810 <find_volume+0x48c>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d11e      	bne.n	800f7e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a6:	3330      	adds	r3, #48	@ 0x30
 800f7a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fe fbe7 	bl	800df80 <ld_dword>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	4a17      	ldr	r2, [pc, #92]	@ (800f814 <find_volume+0x490>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d113      	bne.n	800f7e2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7bc:	3330      	adds	r3, #48	@ 0x30
 800f7be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fe fbdc 	bl	800df80 <ld_dword>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7cc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d0:	3330      	adds	r3, #48	@ 0x30
 800f7d2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fe fbd2 	bl	800df80 <ld_dword>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f7e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f818 <find_volume+0x494>)
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <find_volume+0x494>)
 800f7f4:	801a      	strh	r2, [r3, #0]
 800f7f6:	4b08      	ldr	r3, [pc, #32]	@ (800f818 <find_volume+0x494>)
 800f7f8:	881a      	ldrh	r2, [r3, #0]
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f7fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f800:	f7fe fdee 	bl	800e3e0 <clear_lock>
#endif
	return FR_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3758      	adds	r7, #88	@ 0x58
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	41615252 	.word	0x41615252
 800f814:	61417272 	.word	0x61417272
 800f818:	20000810 	.word	0x20000810

0800f81c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f826:	2309      	movs	r3, #9
 800f828:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d01c      	beq.n	800f86a <validate+0x4e>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d018      	beq.n	800f86a <validate+0x4e>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d013      	beq.n	800f86a <validate+0x4e>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	889a      	ldrh	r2, [r3, #4]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	88db      	ldrh	r3, [r3, #6]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d10c      	bne.n	800f86a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	785b      	ldrb	r3, [r3, #1]
 800f856:	4618      	mov	r0, r3
 800f858:	f7fe fada 	bl	800de10 <disk_status>
 800f85c:	4603      	mov	r3, r0
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b00      	cmp	r3, #0
 800f864:	d101      	bne.n	800f86a <validate+0x4e>
			res = FR_OK;
 800f866:	2300      	movs	r3, #0
 800f868:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d102      	bne.n	800f876 <validate+0x5a>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	e000      	b.n	800f878 <validate+0x5c>
 800f876:	2300      	movs	r3, #0
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	6013      	str	r3, [r2, #0]
	return res;
 800f87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
	...

0800f888 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b088      	sub	sp, #32
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	4613      	mov	r3, r2
 800f894:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f89a:	f107 0310 	add.w	r3, r7, #16
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7ff fcd5 	bl	800f24e <get_ldnumber>
 800f8a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	da01      	bge.n	800f8b0 <f_mount+0x28>
 800f8ac:	230b      	movs	r3, #11
 800f8ae:	e02b      	b.n	800f908 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f8b0:	4a17      	ldr	r2, [pc, #92]	@ (800f910 <f_mount+0x88>)
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d005      	beq.n	800f8cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f8c0:	69b8      	ldr	r0, [r7, #24]
 800f8c2:	f7fe fd8d 	bl	800e3e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d002      	beq.n	800f8d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	490d      	ldr	r1, [pc, #52]	@ (800f910 <f_mount+0x88>)
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <f_mount+0x66>
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d001      	beq.n	800f8f2 <f_mount+0x6a>
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e00a      	b.n	800f908 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f8f2:	f107 010c 	add.w	r1, r7, #12
 800f8f6:	f107 0308 	add.w	r3, r7, #8
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff fd41 	bl	800f384 <find_volume>
 800f902:	4603      	mov	r3, r0
 800f904:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f906:	7dfb      	ldrb	r3, [r7, #23]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3720      	adds	r7, #32
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	2000080c 	.word	0x2000080c

0800f914 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b098      	sub	sp, #96	@ 0x60
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	4613      	mov	r3, r2
 800f920:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <f_open+0x18>
 800f928:	2309      	movs	r3, #9
 800f92a:	e1a9      	b.n	800fc80 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f92c:	79fb      	ldrb	r3, [r7, #7]
 800f92e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f932:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f934:	79fa      	ldrb	r2, [r7, #7]
 800f936:	f107 0110 	add.w	r1, r7, #16
 800f93a:	f107 0308 	add.w	r3, r7, #8
 800f93e:	4618      	mov	r0, r3
 800f940:	f7ff fd20 	bl	800f384 <find_volume>
 800f944:	4603      	mov	r3, r0
 800f946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800f94a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f040 818d 	bne.w	800fc6e <f_open+0x35a>
		dj.obj.fs = fs;
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	f107 0314 	add.w	r3, r7, #20
 800f95e:	4611      	mov	r1, r2
 800f960:	4618      	mov	r0, r3
 800f962:	f7ff fc03 	bl	800f16c <follow_path>
 800f966:	4603      	mov	r3, r0
 800f968:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f96c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f970:	2b00      	cmp	r3, #0
 800f972:	d118      	bne.n	800f9a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f974:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f978:	b25b      	sxtb	r3, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da03      	bge.n	800f986 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f97e:	2306      	movs	r3, #6
 800f980:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f984:	e00f      	b.n	800f9a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f986:	79fb      	ldrb	r3, [r7, #7]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	bf8c      	ite	hi
 800f98c:	2301      	movhi	r3, #1
 800f98e:	2300      	movls	r3, #0
 800f990:	b2db      	uxtb	r3, r3
 800f992:	461a      	mov	r2, r3
 800f994:	f107 0314 	add.w	r3, r7, #20
 800f998:	4611      	mov	r1, r2
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fe fbd8 	bl	800e150 <chk_lock>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	f003 031c 	and.w	r3, r3, #28
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d07f      	beq.n	800fab0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f9b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d017      	beq.n	800f9e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f9b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f9bc:	2b04      	cmp	r3, #4
 800f9be:	d10e      	bne.n	800f9de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f9c0:	f7fe fc22 	bl	800e208 <enq_lock>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d006      	beq.n	800f9d8 <f_open+0xc4>
 800f9ca:	f107 0314 	add.w	r3, r7, #20
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff fb06 	bl	800efe0 <dir_register>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	e000      	b.n	800f9da <f_open+0xc6>
 800f9d8:	2312      	movs	r3, #18
 800f9da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f9de:	79fb      	ldrb	r3, [r7, #7]
 800f9e0:	f043 0308 	orr.w	r3, r3, #8
 800f9e4:	71fb      	strb	r3, [r7, #7]
 800f9e6:	e010      	b.n	800fa0a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f9e8:	7ebb      	ldrb	r3, [r7, #26]
 800f9ea:	f003 0311 	and.w	r3, r3, #17
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <f_open+0xe6>
					res = FR_DENIED;
 800f9f2:	2307      	movs	r3, #7
 800f9f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f9f8:	e007      	b.n	800fa0a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f9fa:	79fb      	ldrb	r3, [r7, #7]
 800f9fc:	f003 0304 	and.w	r3, r3, #4
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <f_open+0xf6>
 800fa04:	2308      	movs	r3, #8
 800fa06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fa0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d168      	bne.n	800fae4 <f_open+0x1d0>
 800fa12:	79fb      	ldrb	r3, [r7, #7]
 800fa14:	f003 0308 	and.w	r3, r3, #8
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d063      	beq.n	800fae4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fa1c:	f7fb ff5e 	bl	800b8dc <get_fattime>
 800fa20:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fa22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa24:	330e      	adds	r3, #14
 800fa26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fe fae7 	bl	800dffc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fa2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa30:	3316      	adds	r3, #22
 800fa32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe fae1 	bl	800dffc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fa3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3c:	330b      	adds	r3, #11
 800fa3e:	2220      	movs	r2, #32
 800fa40:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa46:	4611      	mov	r1, r2
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fa35 	bl	800eeb8 <ld_clust>
 800fa4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fa54:	2200      	movs	r2, #0
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7ff fa4d 	bl	800eef6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa5e:	331c      	adds	r3, #28
 800fa60:	2100      	movs	r1, #0
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fe faca 	bl	800dffc <st_dword>
					fs->wflag = 1;
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fa6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d037      	beq.n	800fae4 <f_open+0x1d0>
						dw = fs->winsect;
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa78:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fa7a:	f107 0314 	add.w	r3, r7, #20
 800fa7e:	2200      	movs	r2, #0
 800fa80:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fe ff60 	bl	800e948 <remove_chain>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800fa8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d126      	bne.n	800fae4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7fe fd08 	bl	800e4b0 <move_window>
 800faa0:	4603      	mov	r3, r0
 800faa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800faaa:	3a01      	subs	r2, #1
 800faac:	60da      	str	r2, [r3, #12]
 800faae:	e019      	b.n	800fae4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fab0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d115      	bne.n	800fae4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fab8:	7ebb      	ldrb	r3, [r7, #26]
 800faba:	f003 0310 	and.w	r3, r3, #16
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d003      	beq.n	800faca <f_open+0x1b6>
					res = FR_NO_FILE;
 800fac2:	2304      	movs	r3, #4
 800fac4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fac8:	e00c      	b.n	800fae4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800faca:	79fb      	ldrb	r3, [r7, #7]
 800facc:	f003 0302 	and.w	r3, r3, #2
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d007      	beq.n	800fae4 <f_open+0x1d0>
 800fad4:	7ebb      	ldrb	r3, [r7, #26]
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <f_open+0x1d0>
						res = FR_DENIED;
 800fade:	2307      	movs	r3, #7
 800fae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fae4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d126      	bne.n	800fb3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800faec:	79fb      	ldrb	r3, [r7, #7]
 800faee:	f003 0308 	and.w	r3, r3, #8
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d003      	beq.n	800fafe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fafc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fb06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb0c:	79fb      	ldrb	r3, [r7, #7]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	bf8c      	ite	hi
 800fb12:	2301      	movhi	r3, #1
 800fb14:	2300      	movls	r3, #0
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	461a      	mov	r2, r3
 800fb1a:	f107 0314 	add.w	r3, r7, #20
 800fb1e:	4611      	mov	r1, r2
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fe fb93 	bl	800e24c <inc_lock>
 800fb26:	4602      	mov	r2, r0
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d102      	bne.n	800fb3a <f_open+0x226>
 800fb34:	2302      	movs	r3, #2
 800fb36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fb3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f040 8095 	bne.w	800fc6e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb48:	4611      	mov	r1, r2
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff f9b4 	bl	800eeb8 <ld_clust>
 800fb50:	4602      	mov	r2, r0
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fb56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb58:	331c      	adds	r3, #28
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fe fa10 	bl	800df80 <ld_dword>
 800fb60:	4602      	mov	r2, r0
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	88da      	ldrh	r2, [r3, #6]
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	79fa      	ldrb	r2, [r7, #7]
 800fb7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	3330      	adds	r3, #48	@ 0x30
 800fb96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fa7a 	bl	800e096 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	f003 0320 	and.w	r3, r3, #32
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d060      	beq.n	800fc6e <f_open+0x35a>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d05c      	beq.n	800fc6e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	68da      	ldr	r2, [r3, #12]
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	895b      	ldrh	r3, [r3, #10]
 800fbc0:	025b      	lsls	r3, r3, #9
 800fbc2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	657b      	str	r3, [r7, #84]	@ 0x54
 800fbd0:	e016      	b.n	800fc00 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fd25 	bl	800e626 <get_fat>
 800fbdc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fbde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d802      	bhi.n	800fbea <f_open+0x2d6>
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf0:	d102      	bne.n	800fbf8 <f_open+0x2e4>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fbfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	657b      	str	r3, [r7, #84]	@ 0x54
 800fc00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d103      	bne.n	800fc10 <f_open+0x2fc>
 800fc08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fc0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d8e0      	bhi.n	800fbd2 <f_open+0x2be>
				}
				fp->clust = clst;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d127      	bne.n	800fc6e <f_open+0x35a>
 800fc1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d022      	beq.n	800fc6e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7fe fcdb 	bl	800e5e8 <clust2sect>
 800fc32:	6478      	str	r0, [r7, #68]	@ 0x44
 800fc34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d103      	bne.n	800fc42 <f_open+0x32e>
						res = FR_INT_ERR;
 800fc3a:	2302      	movs	r3, #2
 800fc3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc40:	e015      	b.n	800fc6e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc44:	0a5a      	lsrs	r2, r3, #9
 800fc46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc48:	441a      	add	r2, r3
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	7858      	ldrb	r0, [r3, #1]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6a1a      	ldr	r2, [r3, #32]
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	f7fe f919 	bl	800de94 <disk_read>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d002      	beq.n	800fc6e <f_open+0x35a>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <f_open+0x368>
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3760      	adds	r7, #96	@ 0x60
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08c      	sub	sp, #48	@ 0x30
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
 800fc94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f107 0210 	add.w	r2, r7, #16
 800fca6:	4611      	mov	r1, r2
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff fdb7 	bl	800f81c <validate>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d107      	bne.n	800fccc <f_write+0x44>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	7d5b      	ldrb	r3, [r3, #21]
 800fcc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fcc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d002      	beq.n	800fcd2 <f_write+0x4a>
 800fccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcd0:	e14b      	b.n	800ff6a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	7d1b      	ldrb	r3, [r3, #20]
 800fcd6:	f003 0302 	and.w	r3, r3, #2
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d101      	bne.n	800fce2 <f_write+0x5a>
 800fcde:	2307      	movs	r3, #7
 800fce0:	e143      	b.n	800ff6a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	699a      	ldr	r2, [r3, #24]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	441a      	add	r2, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	699b      	ldr	r3, [r3, #24]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	f080 812d 	bcs.w	800ff4e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	699b      	ldr	r3, [r3, #24]
 800fcf8:	43db      	mvns	r3, r3
 800fcfa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fcfc:	e127      	b.n	800ff4e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	699b      	ldr	r3, [r3, #24]
 800fd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f040 80e3 	bne.w	800fed2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	0a5b      	lsrs	r3, r3, #9
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	8952      	ldrh	r2, [r2, #10]
 800fd16:	3a01      	subs	r2, #1
 800fd18:	4013      	ands	r3, r2
 800fd1a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d143      	bne.n	800fdaa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	699b      	ldr	r3, [r3, #24]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d10c      	bne.n	800fd44 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d11a      	bne.n	800fd6c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2100      	movs	r1, #0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fe69 	bl	800ea12 <create_chain>
 800fd40:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fd42:	e013      	b.n	800fd6c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d007      	beq.n	800fd5c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	699b      	ldr	r3, [r3, #24]
 800fd50:	4619      	mov	r1, r3
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7fe fef5 	bl	800eb42 <clmt_clust>
 800fd58:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fd5a:	e007      	b.n	800fd6c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	69db      	ldr	r3, [r3, #28]
 800fd62:	4619      	mov	r1, r3
 800fd64:	4610      	mov	r0, r2
 800fd66:	f7fe fe54 	bl	800ea12 <create_chain>
 800fd6a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f000 80f2 	beq.w	800ff58 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d104      	bne.n	800fd84 <f_write+0xfc>
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2202      	movs	r2, #2
 800fd7e:	755a      	strb	r2, [r3, #21]
 800fd80:	2302      	movs	r3, #2
 800fd82:	e0f2      	b.n	800ff6a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd8a:	d104      	bne.n	800fd96 <f_write+0x10e>
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	755a      	strb	r2, [r3, #21]
 800fd92:	2301      	movs	r3, #1
 800fd94:	e0e9      	b.n	800ff6a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd9a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d102      	bne.n	800fdaa <f_write+0x122>
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fda8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	7d1b      	ldrb	r3, [r3, #20]
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	da18      	bge.n	800fde6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	7858      	ldrb	r0, [r3, #1]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6a1a      	ldr	r2, [r3, #32]
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	f7fe f886 	bl	800ded4 <disk_write>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d004      	beq.n	800fdd8 <f_write+0x150>
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	755a      	strb	r2, [r3, #21]
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e0c8      	b.n	800ff6a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	7d1b      	ldrb	r3, [r3, #20]
 800fddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fde6:	693a      	ldr	r2, [r7, #16]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	4619      	mov	r1, r3
 800fdee:	4610      	mov	r0, r2
 800fdf0:	f7fe fbfa 	bl	800e5e8 <clust2sect>
 800fdf4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d104      	bne.n	800fe06 <f_write+0x17e>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2202      	movs	r2, #2
 800fe00:	755a      	strb	r2, [r3, #21]
 800fe02:	2302      	movs	r3, #2
 800fe04:	e0b1      	b.n	800ff6a <f_write+0x2e2>
			sect += csect;
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	0a5b      	lsrs	r3, r3, #9
 800fe12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fe14:	6a3b      	ldr	r3, [r7, #32]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d03c      	beq.n	800fe94 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	6a3b      	ldr	r3, [r7, #32]
 800fe1e:	4413      	add	r3, r2
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	8952      	ldrh	r2, [r2, #10]
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d905      	bls.n	800fe34 <f_write+0x1ac>
					cc = fs->csize - csect;
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	895b      	ldrh	r3, [r3, #10]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	7858      	ldrb	r0, [r3, #1]
 800fe38:	6a3b      	ldr	r3, [r7, #32]
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	69f9      	ldr	r1, [r7, #28]
 800fe3e:	f7fe f849 	bl	800ded4 <disk_write>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d004      	beq.n	800fe52 <f_write+0x1ca>
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	755a      	strb	r2, [r3, #21]
 800fe4e:	2301      	movs	r3, #1
 800fe50:	e08b      	b.n	800ff6a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6a1a      	ldr	r2, [r3, #32]
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	6a3a      	ldr	r2, [r7, #32]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d915      	bls.n	800fe8c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6a1a      	ldr	r2, [r3, #32]
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	1ad3      	subs	r3, r2, r3
 800fe6e:	025b      	lsls	r3, r3, #9
 800fe70:	69fa      	ldr	r2, [r7, #28]
 800fe72:	4413      	add	r3, r2
 800fe74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f7fe f8eb 	bl	800e054 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	7d1b      	ldrb	r3, [r3, #20]
 800fe82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	025b      	lsls	r3, r3, #9
 800fe90:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fe92:	e03f      	b.n	800ff14 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6a1b      	ldr	r3, [r3, #32]
 800fe98:	697a      	ldr	r2, [r7, #20]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d016      	beq.n	800fecc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	699a      	ldr	r2, [r3, #24]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d210      	bcs.n	800fecc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	7858      	ldrb	r0, [r3, #1]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800feb4:	2301      	movs	r3, #1
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	f7fd ffec 	bl	800de94 <disk_read>
 800febc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d004      	beq.n	800fecc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2201      	movs	r2, #1
 800fec6:	755a      	strb	r2, [r3, #21]
 800fec8:	2301      	movs	r3, #1
 800feca:	e04e      	b.n	800ff6a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feda:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fede:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d901      	bls.n	800feec <f_write+0x264>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	699b      	ldr	r3, [r3, #24]
 800fef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fefa:	4413      	add	r3, r2
 800fefc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fefe:	69f9      	ldr	r1, [r7, #28]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fe f8a7 	bl	800e054 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	7d1b      	ldrb	r3, [r3, #20]
 800ff0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ff14:	69fa      	ldr	r2, [r7, #28]
 800ff16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff18:	4413      	add	r3, r2
 800ff1a:	61fb      	str	r3, [r7, #28]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	699a      	ldr	r2, [r3, #24]
 800ff20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff22:	441a      	add	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	619a      	str	r2, [r3, #24]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	68da      	ldr	r2, [r3, #12]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	699b      	ldr	r3, [r3, #24]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	bf38      	it	cc
 800ff34:	461a      	movcc	r2, r3
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	60da      	str	r2, [r3, #12]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff40:	441a      	add	r2, r3
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	601a      	str	r2, [r3, #0]
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f47f aed4 	bne.w	800fcfe <f_write+0x76>
 800ff56:	e000      	b.n	800ff5a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ff58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	7d1b      	ldrb	r3, [r3, #20]
 800ff5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3730      	adds	r7, #48	@ 0x30
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b086      	sub	sp, #24
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f107 0208 	add.w	r2, r7, #8
 800ff80:	4611      	mov	r1, r2
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7ff fc4a 	bl	800f81c <validate>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff8c:	7dfb      	ldrb	r3, [r7, #23]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d168      	bne.n	8010064 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	7d1b      	ldrb	r3, [r3, #20]
 800ff96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d062      	beq.n	8010064 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	7d1b      	ldrb	r3, [r3, #20]
 800ffa2:	b25b      	sxtb	r3, r3
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	da15      	bge.n	800ffd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	7858      	ldrb	r0, [r3, #1]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a1a      	ldr	r2, [r3, #32]
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f7fd ff8c 	bl	800ded4 <disk_write>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <f_sync+0x54>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e04f      	b.n	8010066 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	7d1b      	ldrb	r3, [r3, #20]
 800ffca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffd4:	f7fb fc82 	bl	800b8dc <get_fattime>
 800ffd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f7fe fa64 	bl	800e4b0 <move_window>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d138      	bne.n	8010064 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fff6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	330b      	adds	r3, #11
 800fffc:	781a      	ldrb	r2, [r3, #0]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	330b      	adds	r3, #11
 8010002:	f042 0220 	orr.w	r2, r2, #32
 8010006:	b2d2      	uxtb	r2, r2
 8010008:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6818      	ldr	r0, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	461a      	mov	r2, r3
 8010014:	68f9      	ldr	r1, [r7, #12]
 8010016:	f7fe ff6e 	bl	800eef6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f103 021c 	add.w	r2, r3, #28
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	4619      	mov	r1, r3
 8010026:	4610      	mov	r0, r2
 8010028:	f7fd ffe8 	bl	800dffc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	3316      	adds	r3, #22
 8010030:	6939      	ldr	r1, [r7, #16]
 8010032:	4618      	mov	r0, r3
 8010034:	f7fd ffe2 	bl	800dffc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	3312      	adds	r3, #18
 801003c:	2100      	movs	r1, #0
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd ffc1 	bl	800dfc6 <st_word>
					fs->wflag = 1;
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	2201      	movs	r2, #1
 8010048:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe fa5d 	bl	800e50c <sync_fs>
 8010052:	4603      	mov	r3, r0
 8010054:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7d1b      	ldrb	r3, [r3, #20]
 801005a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801005e:	b2da      	uxtb	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010064:	7dfb      	ldrb	r3, [r7, #23]
}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b084      	sub	sp, #16
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7ff ff7b 	bl	800ff72 <f_sync>
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010080:	7bfb      	ldrb	r3, [r7, #15]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d118      	bne.n	80100b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f107 0208 	add.w	r2, r7, #8
 801008c:	4611      	mov	r1, r2
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff fbc4 	bl	800f81c <validate>
 8010094:	4603      	mov	r3, r0
 8010096:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010098:	7bfb      	ldrb	r3, [r7, #15]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d10c      	bne.n	80100b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	691b      	ldr	r3, [r3, #16]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fe f960 	bl	800e368 <dec_lock>
 80100a8:	4603      	mov	r3, r0
 80100aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d102      	bne.n	80100b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
	...

080100c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b087      	sub	sp, #28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80100d2:	2301      	movs	r3, #1
 80100d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80100da:	4b1f      	ldr	r3, [pc, #124]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 80100dc:	7a5b      	ldrb	r3, [r3, #9]
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d131      	bne.n	8010148 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80100e4:	4b1c      	ldr	r3, [pc, #112]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 80100e6:	7a5b      	ldrb	r3, [r3, #9]
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	461a      	mov	r2, r3
 80100ec:	4b1a      	ldr	r3, [pc, #104]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 80100ee:	2100      	movs	r1, #0
 80100f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80100f2:	4b19      	ldr	r3, [pc, #100]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 80100f4:	7a5b      	ldrb	r3, [r3, #9]
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	4a17      	ldr	r2, [pc, #92]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010102:	4b15      	ldr	r3, [pc, #84]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 8010104:	7a5b      	ldrb	r3, [r3, #9]
 8010106:	b2db      	uxtb	r3, r3
 8010108:	461a      	mov	r2, r3
 801010a:	4b13      	ldr	r3, [pc, #76]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 801010c:	4413      	add	r3, r2
 801010e:	79fa      	ldrb	r2, [r7, #7]
 8010110:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010112:	4b11      	ldr	r3, [pc, #68]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 8010114:	7a5b      	ldrb	r3, [r3, #9]
 8010116:	b2db      	uxtb	r3, r3
 8010118:	1c5a      	adds	r2, r3, #1
 801011a:	b2d1      	uxtb	r1, r2
 801011c:	4a0e      	ldr	r2, [pc, #56]	@ (8010158 <FATFS_LinkDriverEx+0x94>)
 801011e:	7251      	strb	r1, [r2, #9]
 8010120:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010122:	7dbb      	ldrb	r3, [r7, #22]
 8010124:	3330      	adds	r3, #48	@ 0x30
 8010126:	b2da      	uxtb	r2, r3
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	3301      	adds	r3, #1
 8010130:	223a      	movs	r2, #58	@ 0x3a
 8010132:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	3302      	adds	r3, #2
 8010138:	222f      	movs	r2, #47	@ 0x2f
 801013a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	3303      	adds	r3, #3
 8010140:	2200      	movs	r2, #0
 8010142:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010144:	2300      	movs	r3, #0
 8010146:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010148:	7dfb      	ldrb	r3, [r7, #23]
}
 801014a:	4618      	mov	r0, r3
 801014c:	371c      	adds	r7, #28
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	20000834 	.word	0x20000834

0801015c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010166:	2200      	movs	r2, #0
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff ffaa 	bl	80100c4 <FATFS_LinkDriverEx>
 8010170:	4603      	mov	r3, r0
}
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
	...

0801017c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010180:	2201      	movs	r2, #1
 8010182:	490e      	ldr	r1, [pc, #56]	@ (80101bc <MX_USB_HOST_Init+0x40>)
 8010184:	480e      	ldr	r0, [pc, #56]	@ (80101c0 <MX_USB_HOST_Init+0x44>)
 8010186:	f7fc f95f 	bl	800c448 <USBH_Init>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010190:	f7f1 f95e 	bl	8001450 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010194:	490b      	ldr	r1, [pc, #44]	@ (80101c4 <MX_USB_HOST_Init+0x48>)
 8010196:	480a      	ldr	r0, [pc, #40]	@ (80101c0 <MX_USB_HOST_Init+0x44>)
 8010198:	f7fc fa03 	bl	800c5a2 <USBH_RegisterClass>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d001      	beq.n	80101a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80101a2:	f7f1 f955 	bl	8001450 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80101a6:	4806      	ldr	r0, [pc, #24]	@ (80101c0 <MX_USB_HOST_Init+0x44>)
 80101a8:	f7fc fa87 	bl	800c6ba <USBH_Start>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d001      	beq.n	80101b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80101b2:	f7f1 f94d 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80101b6:	bf00      	nop
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	080101dd 	.word	0x080101dd
 80101c0:	20000840 	.word	0x20000840
 80101c4:	2000000c 	.word	0x2000000c

080101c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80101cc:	4802      	ldr	r0, [pc, #8]	@ (80101d8 <MX_USB_HOST_Process+0x10>)
 80101ce:	f7fc fa85 	bl	800c6dc <USBH_Process>
}
 80101d2:	bf00      	nop
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20000840 	.word	0x20000840

080101dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80101dc:	b480      	push	{r7}
 80101de:	b083      	sub	sp, #12
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	460b      	mov	r3, r1
 80101e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80101e8:	78fb      	ldrb	r3, [r7, #3]
 80101ea:	3b01      	subs	r3, #1
 80101ec:	2b04      	cmp	r3, #4
 80101ee:	d819      	bhi.n	8010224 <USBH_UserProcess+0x48>
 80101f0:	a201      	add	r2, pc, #4	@ (adr r2, 80101f8 <USBH_UserProcess+0x1c>)
 80101f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f6:	bf00      	nop
 80101f8:	08010225 	.word	0x08010225
 80101fc:	08010215 	.word	0x08010215
 8010200:	08010225 	.word	0x08010225
 8010204:	0801021d 	.word	0x0801021d
 8010208:	0801020d 	.word	0x0801020d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801020c:	4b09      	ldr	r3, [pc, #36]	@ (8010234 <USBH_UserProcess+0x58>)
 801020e:	2203      	movs	r2, #3
 8010210:	701a      	strb	r2, [r3, #0]
  break;
 8010212:	e008      	b.n	8010226 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010214:	4b07      	ldr	r3, [pc, #28]	@ (8010234 <USBH_UserProcess+0x58>)
 8010216:	2202      	movs	r2, #2
 8010218:	701a      	strb	r2, [r3, #0]
  break;
 801021a:	e004      	b.n	8010226 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801021c:	4b05      	ldr	r3, [pc, #20]	@ (8010234 <USBH_UserProcess+0x58>)
 801021e:	2201      	movs	r2, #1
 8010220:	701a      	strb	r2, [r3, #0]
  break;
 8010222:	e000      	b.n	8010226 <USBH_UserProcess+0x4a>

  default:
  break;
 8010224:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010226:	bf00      	nop
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	20000c18 	.word	0x20000c18

08010238 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08a      	sub	sp, #40	@ 0x28
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010240:	f107 0314 	add.w	r3, r7, #20
 8010244:	2200      	movs	r2, #0
 8010246:	601a      	str	r2, [r3, #0]
 8010248:	605a      	str	r2, [r3, #4]
 801024a:	609a      	str	r2, [r3, #8]
 801024c:	60da      	str	r2, [r3, #12]
 801024e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010258:	d147      	bne.n	80102ea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801025a:	2300      	movs	r3, #0
 801025c:	613b      	str	r3, [r7, #16]
 801025e:	4b25      	ldr	r3, [pc, #148]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 8010260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010262:	4a24      	ldr	r2, [pc, #144]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 8010264:	f043 0301 	orr.w	r3, r3, #1
 8010268:	6313      	str	r3, [r2, #48]	@ 0x30
 801026a:	4b22      	ldr	r3, [pc, #136]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 801026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	613b      	str	r3, [r7, #16]
 8010274:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8010276:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801027a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801027c:	2302      	movs	r3, #2
 801027e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010280:	2300      	movs	r3, #0
 8010282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010284:	2303      	movs	r3, #3
 8010286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010288:	230a      	movs	r3, #10
 801028a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801028c:	f107 0314 	add.w	r3, r7, #20
 8010290:	4619      	mov	r1, r3
 8010292:	4819      	ldr	r0, [pc, #100]	@ (80102f8 <HAL_HCD_MspInit+0xc0>)
 8010294:	f7f3 fbc8 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8010298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801029c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801029e:	2302      	movs	r3, #2
 80102a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102a2:	2300      	movs	r3, #0
 80102a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80102a6:	f107 0314 	add.w	r3, r7, #20
 80102aa:	4619      	mov	r1, r3
 80102ac:	4812      	ldr	r0, [pc, #72]	@ (80102f8 <HAL_HCD_MspInit+0xc0>)
 80102ae:	f7f3 fbbb 	bl	8003a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80102b2:	4b10      	ldr	r3, [pc, #64]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 80102b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102b6:	4a0f      	ldr	r2, [pc, #60]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 80102b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80102be:	2300      	movs	r3, #0
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	4b0c      	ldr	r3, [pc, #48]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 80102c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102c6:	4a0b      	ldr	r2, [pc, #44]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 80102c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80102cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80102ce:	4b09      	ldr	r3, [pc, #36]	@ (80102f4 <HAL_HCD_MspInit+0xbc>)
 80102d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102d6:	60fb      	str	r3, [r7, #12]
 80102d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80102da:	2200      	movs	r2, #0
 80102dc:	2100      	movs	r1, #0
 80102de:	2043      	movs	r0, #67	@ 0x43
 80102e0:	f7f1 ffec 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80102e4:	2043      	movs	r0, #67	@ 0x43
 80102e6:	f7f2 f805 	bl	80022f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80102ea:	bf00      	nop
 80102ec:	3728      	adds	r7, #40	@ 0x28
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	40023800 	.word	0x40023800
 80102f8:	40020000 	.word	0x40020000

080102fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801030a:	4618      	mov	r0, r3
 801030c:	f7fc fdbd 	bl	800ce8a <USBH_LL_IncTimer>
}
 8010310:	bf00      	nop
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010326:	4618      	mov	r0, r3
 8010328:	f7fc fdf5 	bl	800cf16 <USBH_LL_Connect>
}
 801032c:	bf00      	nop
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010342:	4618      	mov	r0, r3
 8010344:	f7fc fdfe 	bl	800cf44 <USBH_LL_Disconnect>
}
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	70fb      	strb	r3, [r7, #3]
 801035c:	4613      	mov	r3, r2
 801035e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801037a:	4618      	mov	r0, r3
 801037c:	f7fc fdaf 	bl	800cede <USBH_LL_PortEnabled>
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010396:	4618      	mov	r0, r3
 8010398:	f7fc fdaf 	bl	800cefa <USBH_LL_PortDisabled>
}
 801039c:	bf00      	nop
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d12a      	bne.n	801040c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80103b6:	4a18      	ldr	r2, [pc, #96]	@ (8010418 <USBH_LL_Init+0x74>)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a15      	ldr	r2, [pc, #84]	@ (8010418 <USBH_LL_Init+0x74>)
 80103c2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80103c6:	4b14      	ldr	r3, [pc, #80]	@ (8010418 <USBH_LL_Init+0x74>)
 80103c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80103cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80103ce:	4b12      	ldr	r3, [pc, #72]	@ (8010418 <USBH_LL_Init+0x74>)
 80103d0:	2208      	movs	r2, #8
 80103d2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80103d4:	4b10      	ldr	r3, [pc, #64]	@ (8010418 <USBH_LL_Init+0x74>)
 80103d6:	2201      	movs	r2, #1
 80103d8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80103da:	4b0f      	ldr	r3, [pc, #60]	@ (8010418 <USBH_LL_Init+0x74>)
 80103dc:	2200      	movs	r2, #0
 80103de:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80103e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010418 <USBH_LL_Init+0x74>)
 80103e2:	2202      	movs	r2, #2
 80103e4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80103e6:	4b0c      	ldr	r3, [pc, #48]	@ (8010418 <USBH_LL_Init+0x74>)
 80103e8:	2200      	movs	r2, #0
 80103ea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80103ec:	480a      	ldr	r0, [pc, #40]	@ (8010418 <USBH_LL_Init+0x74>)
 80103ee:	f7f3 fcf8 	bl	8003de2 <HAL_HCD_Init>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d001      	beq.n	80103fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80103f8:	f7f1 f82a 	bl	8001450 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80103fc:	4806      	ldr	r0, [pc, #24]	@ (8010418 <USBH_LL_Init+0x74>)
 80103fe:	f7f4 f959 	bl	80046b4 <HAL_HCD_GetCurrentFrame>
 8010402:	4603      	mov	r3, r0
 8010404:	4619      	mov	r1, r3
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f7fc fd30 	bl	800ce6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801040c:	2300      	movs	r3, #0
}
 801040e:	4618      	mov	r0, r3
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	20000c1c 	.word	0x20000c1c

0801041c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010424:	2300      	movs	r3, #0
 8010426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010428:	2300      	movs	r3, #0
 801042a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010432:	4618      	mov	r0, r3
 8010434:	f7f4 f8c6 	bl	80045c4 <HAL_HCD_Start>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	4618      	mov	r0, r3
 8010440:	f000 f95e 	bl	8010700 <USBH_Get_USB_Status>
 8010444:	4603      	mov	r3, r0
 8010446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010448:	7bbb      	ldrb	r3, [r7, #14]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010468:	4618      	mov	r0, r3
 801046a:	f7f4 f8ce 	bl	800460a <HAL_HCD_Stop>
 801046e:	4603      	mov	r3, r0
 8010470:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010472:	7bfb      	ldrb	r3, [r7, #15]
 8010474:	4618      	mov	r0, r3
 8010476:	f000 f943 	bl	8010700 <USBH_Get_USB_Status>
 801047a:	4603      	mov	r3, r0
 801047c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010490:	2301      	movs	r3, #1
 8010492:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801049a:	4618      	mov	r0, r3
 801049c:	f7f4 f918 	bl	80046d0 <HAL_HCD_GetCurrentSpeed>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b02      	cmp	r3, #2
 80104a4:	d00c      	beq.n	80104c0 <USBH_LL_GetSpeed+0x38>
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	d80d      	bhi.n	80104c6 <USBH_LL_GetSpeed+0x3e>
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d002      	beq.n	80104b4 <USBH_LL_GetSpeed+0x2c>
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d003      	beq.n	80104ba <USBH_LL_GetSpeed+0x32>
 80104b2:	e008      	b.n	80104c6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73fb      	strb	r3, [r7, #15]
    break;
 80104b8:	e008      	b.n	80104cc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80104ba:	2301      	movs	r3, #1
 80104bc:	73fb      	strb	r3, [r7, #15]
    break;
 80104be:	e005      	b.n	80104cc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80104c0:	2302      	movs	r3, #2
 80104c2:	73fb      	strb	r3, [r7, #15]
    break;
 80104c4:	e002      	b.n	80104cc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80104c6:	2301      	movs	r3, #1
 80104c8:	73fb      	strb	r3, [r7, #15]
    break;
 80104ca:	bf00      	nop
  }
  return  speed;
 80104cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f4 f8a9 	bl	8004644 <HAL_HCD_ResetPort>
 80104f2:	4603      	mov	r3, r0
 80104f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80104f6:	7bfb      	ldrb	r3, [r7, #15]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 f901 	bl	8010700 <USBH_Get_USB_Status>
 80104fe:	4603      	mov	r3, r0
 8010500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010502:	7bbb      	ldrb	r3, [r7, #14]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801051e:	78fa      	ldrb	r2, [r7, #3]
 8010520:	4611      	mov	r1, r2
 8010522:	4618      	mov	r0, r3
 8010524:	f7f4 f8b1 	bl	800468a <HAL_HCD_HC_GetXferCount>
 8010528:	4603      	mov	r3, r0
}
 801052a:	4618      	mov	r0, r3
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010532:	b590      	push	{r4, r7, lr}
 8010534:	b089      	sub	sp, #36	@ 0x24
 8010536:	af04      	add	r7, sp, #16
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	4608      	mov	r0, r1
 801053c:	4611      	mov	r1, r2
 801053e:	461a      	mov	r2, r3
 8010540:	4603      	mov	r3, r0
 8010542:	70fb      	strb	r3, [r7, #3]
 8010544:	460b      	mov	r3, r1
 8010546:	70bb      	strb	r3, [r7, #2]
 8010548:	4613      	mov	r3, r2
 801054a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801054c:	2300      	movs	r3, #0
 801054e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010550:	2300      	movs	r3, #0
 8010552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801055a:	787c      	ldrb	r4, [r7, #1]
 801055c:	78ba      	ldrb	r2, [r7, #2]
 801055e:	78f9      	ldrb	r1, [r7, #3]
 8010560:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010562:	9302      	str	r3, [sp, #8]
 8010564:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	4623      	mov	r3, r4
 8010572:	f7f3 fc9d 	bl	8003eb0 <HAL_HCD_HC_Init>
 8010576:	4603      	mov	r3, r0
 8010578:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	4618      	mov	r0, r3
 801057e:	f000 f8bf 	bl	8010700 <USBH_Get_USB_Status>
 8010582:	4603      	mov	r3, r0
 8010584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010586:	7bbb      	ldrb	r3, [r7, #14]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3714      	adds	r7, #20
 801058c:	46bd      	mov	sp, r7
 801058e:	bd90      	pop	{r4, r7, pc}

08010590 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	460b      	mov	r3, r1
 801059a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801059c:	2300      	movs	r3, #0
 801059e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105aa:	78fa      	ldrb	r2, [r7, #3]
 80105ac:	4611      	mov	r1, r2
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f3 fd36 	bl	8004020 <HAL_HCD_HC_Halt>
 80105b4:	4603      	mov	r3, r0
 80105b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 f8a0 	bl	8010700 <USBH_Get_USB_Status>
 80105c0:	4603      	mov	r3, r0
 80105c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80105ce:	b590      	push	{r4, r7, lr}
 80105d0:	b089      	sub	sp, #36	@ 0x24
 80105d2:	af04      	add	r7, sp, #16
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	4608      	mov	r0, r1
 80105d8:	4611      	mov	r1, r2
 80105da:	461a      	mov	r2, r3
 80105dc:	4603      	mov	r3, r0
 80105de:	70fb      	strb	r3, [r7, #3]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70bb      	strb	r3, [r7, #2]
 80105e4:	4613      	mov	r3, r2
 80105e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80105f6:	787c      	ldrb	r4, [r7, #1]
 80105f8:	78ba      	ldrb	r2, [r7, #2]
 80105fa:	78f9      	ldrb	r1, [r7, #3]
 80105fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010600:	9303      	str	r3, [sp, #12]
 8010602:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010604:	9302      	str	r3, [sp, #8]
 8010606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010608:	9301      	str	r3, [sp, #4]
 801060a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	4623      	mov	r3, r4
 8010612:	f7f3 fd29 	bl	8004068 <HAL_HCD_HC_SubmitRequest>
 8010616:	4603      	mov	r3, r0
 8010618:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801061a:	7bfb      	ldrb	r3, [r7, #15]
 801061c:	4618      	mov	r0, r3
 801061e:	f000 f86f 	bl	8010700 <USBH_Get_USB_Status>
 8010622:	4603      	mov	r3, r0
 8010624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010626:	7bbb      	ldrb	r3, [r7, #14]
}
 8010628:	4618      	mov	r0, r3
 801062a:	3714      	adds	r7, #20
 801062c:	46bd      	mov	sp, r7
 801062e:	bd90      	pop	{r4, r7, pc}

08010630 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	460b      	mov	r3, r1
 801063a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010642:	78fa      	ldrb	r2, [r7, #3]
 8010644:	4611      	mov	r1, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f7f4 f80a 	bl	8004660 <HAL_HCD_HC_GetURBState>
 801064c:	4603      	mov	r3, r0
}
 801064e:	4618      	mov	r0, r3
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b082      	sub	sp, #8
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	460b      	mov	r3, r1
 8010660:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010668:	2b01      	cmp	r3, #1
 801066a:	d103      	bne.n	8010674 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801066c:	78fb      	ldrb	r3, [r7, #3]
 801066e:	4618      	mov	r0, r3
 8010670:	f000 f872 	bl	8010758 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010674:	20c8      	movs	r0, #200	@ 0xc8
 8010676:	f7f1 fd45 	bl	8002104 <HAL_Delay>
  return USBH_OK;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010684:	b480      	push	{r7}
 8010686:	b085      	sub	sp, #20
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	70fb      	strb	r3, [r7, #3]
 8010690:	4613      	mov	r3, r2
 8010692:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801069a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801069c:	78fa      	ldrb	r2, [r7, #3]
 801069e:	68f9      	ldr	r1, [r7, #12]
 80106a0:	4613      	mov	r3, r2
 80106a2:	011b      	lsls	r3, r3, #4
 80106a4:	1a9b      	subs	r3, r3, r2
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	440b      	add	r3, r1
 80106aa:	3317      	adds	r3, #23
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00a      	beq.n	80106c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80106b2:	78fa      	ldrb	r2, [r7, #3]
 80106b4:	68f9      	ldr	r1, [r7, #12]
 80106b6:	4613      	mov	r3, r2
 80106b8:	011b      	lsls	r3, r3, #4
 80106ba:	1a9b      	subs	r3, r3, r2
 80106bc:	009b      	lsls	r3, r3, #2
 80106be:	440b      	add	r3, r1
 80106c0:	333c      	adds	r3, #60	@ 0x3c
 80106c2:	78ba      	ldrb	r2, [r7, #2]
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	e009      	b.n	80106dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80106c8:	78fa      	ldrb	r2, [r7, #3]
 80106ca:	68f9      	ldr	r1, [r7, #12]
 80106cc:	4613      	mov	r3, r2
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	1a9b      	subs	r3, r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	440b      	add	r3, r1
 80106d6:	333d      	adds	r3, #61	@ 0x3d
 80106d8:	78ba      	ldrb	r2, [r7, #2]
 80106da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80106dc:	2300      	movs	r3, #0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3714      	adds	r7, #20
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b082      	sub	sp, #8
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7f1 fd06 	bl	8002104 <HAL_Delay>
}
 80106f8:	bf00      	nop
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	4603      	mov	r3, r0
 8010708:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801070a:	2300      	movs	r3, #0
 801070c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801070e:	79fb      	ldrb	r3, [r7, #7]
 8010710:	2b03      	cmp	r3, #3
 8010712:	d817      	bhi.n	8010744 <USBH_Get_USB_Status+0x44>
 8010714:	a201      	add	r2, pc, #4	@ (adr r2, 801071c <USBH_Get_USB_Status+0x1c>)
 8010716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801071a:	bf00      	nop
 801071c:	0801072d 	.word	0x0801072d
 8010720:	08010733 	.word	0x08010733
 8010724:	08010739 	.word	0x08010739
 8010728:	0801073f 	.word	0x0801073f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	73fb      	strb	r3, [r7, #15]
    break;
 8010730:	e00b      	b.n	801074a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010732:	2302      	movs	r3, #2
 8010734:	73fb      	strb	r3, [r7, #15]
    break;
 8010736:	e008      	b.n	801074a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010738:	2301      	movs	r3, #1
 801073a:	73fb      	strb	r3, [r7, #15]
    break;
 801073c:	e005      	b.n	801074a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801073e:	2302      	movs	r3, #2
 8010740:	73fb      	strb	r3, [r7, #15]
    break;
 8010742:	e002      	b.n	801074a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010744:	2302      	movs	r3, #2
 8010746:	73fb      	strb	r3, [r7, #15]
    break;
 8010748:	bf00      	nop
  }
  return usb_status;
 801074a:	7bfb      	ldrb	r3, [r7, #15]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010762:	79fb      	ldrb	r3, [r7, #7]
 8010764:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010766:	79fb      	ldrb	r3, [r7, #7]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801076c:	2300      	movs	r3, #0
 801076e:	73fb      	strb	r3, [r7, #15]
 8010770:	e001      	b.n	8010776 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010772:	2301      	movs	r3, #1
 8010774:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	461a      	mov	r2, r3
 801077a:	2104      	movs	r1, #4
 801077c:	4803      	ldr	r0, [pc, #12]	@ (801078c <MX_DriverVbusFS+0x34>)
 801077e:	f7f3 fb17 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8010782:	bf00      	nop
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	40020400 	.word	0x40020400

08010790 <_ZdlPvj>:
 8010790:	f000 b888 	b.w	80108a4 <_ZdlPv>

08010794 <_ZNSaIcEC1Ev>:
 8010794:	4770      	bx	lr

08010796 <_ZNSaIcED1Ev>:
 8010796:	4770      	bx	lr

08010798 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8010798:	b10a      	cbz	r2, 801079e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801079a:	f000 b9f5 	b.w	8010b88 <memcpy>
 801079e:	4770      	bx	lr

080107a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80107a0:	f850 3b08 	ldr.w	r3, [r0], #8
 80107a4:	1a1b      	subs	r3, r3, r0
 80107a6:	4258      	negs	r0, r3
 80107a8:	4158      	adcs	r0, r3
 80107aa:	4770      	bx	lr

080107ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80107ac:	b508      	push	{r3, lr}
 80107ae:	680b      	ldr	r3, [r1, #0]
 80107b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107b4:	d302      	bcc.n	80107bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80107b6:	480d      	ldr	r0, [pc, #52]	@ (80107ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80107b8:	f000 f88d 	bl	80108d6 <_ZSt20__throw_length_errorPKc>
 80107bc:	4293      	cmp	r3, r2
 80107be:	d90b      	bls.n	80107d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80107c0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80107c4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80107c8:	d206      	bcs.n	80107d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80107ca:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80107ce:	bf2a      	itet	cs
 80107d0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80107d4:	6008      	strcc	r0, [r1, #0]
 80107d6:	600b      	strcs	r3, [r1, #0]
 80107d8:	6808      	ldr	r0, [r1, #0]
 80107da:	3001      	adds	r0, #1
 80107dc:	d501      	bpl.n	80107e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80107de:	f000 f874 	bl	80108ca <_ZSt17__throw_bad_allocv>
 80107e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80107e6:	f000 b85f 	b.w	80108a8 <_Znwj>
 80107ea:	bf00      	nop
 80107ec:	08010d84 	.word	0x08010d84

080107f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80107f0:	b510      	push	{r4, lr}
 80107f2:	4604      	mov	r4, r0
 80107f4:	f7ff ffd4 	bl	80107a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80107f8:	b920      	cbnz	r0, 8010804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80107fa:	6820      	ldr	r0, [r4, #0]
 80107fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010800:	f000 b850 	b.w	80108a4 <_ZdlPv>
 8010804:	bd10      	pop	{r4, pc}

08010806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010806:	2a01      	cmp	r2, #1
 8010808:	b410      	push	{r4}
 801080a:	d104      	bne.n	8010816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801080c:	780a      	ldrb	r2, [r1, #0]
 801080e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010812:	7002      	strb	r2, [r0, #0]
 8010814:	4770      	bx	lr
 8010816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801081a:	f7ff bfbd 	b.w	8010798 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801081e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801081e:	b508      	push	{r3, lr}
 8010820:	1a52      	subs	r2, r2, r1
 8010822:	f7ff fff0 	bl	8010806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010826:	bd08      	pop	{r3, pc}

08010828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8010828:	b510      	push	{r4, lr}
 801082a:	4604      	mov	r4, r0
 801082c:	f7ff ffe0 	bl	80107f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010830:	4620      	mov	r0, r4
 8010832:	bd10      	pop	{r4, pc}

08010834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8010834:	6802      	ldr	r2, [r0, #0]
 8010836:	2300      	movs	r3, #0
 8010838:	6043      	str	r3, [r0, #4]
 801083a:	7013      	strb	r3, [r2, #0]
 801083c:	4770      	bx	lr

0801083e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801083e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010840:	1a53      	subs	r3, r2, r1
 8010842:	2b0f      	cmp	r3, #15
 8010844:	4604      	mov	r4, r0
 8010846:	460d      	mov	r5, r1
 8010848:	4616      	mov	r6, r2
 801084a:	9301      	str	r3, [sp, #4]
 801084c:	d906      	bls.n	801085c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 801084e:	2200      	movs	r2, #0
 8010850:	a901      	add	r1, sp, #4
 8010852:	f7ff ffab 	bl	80107ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010856:	9b01      	ldr	r3, [sp, #4]
 8010858:	6020      	str	r0, [r4, #0]
 801085a:	60a3      	str	r3, [r4, #8]
 801085c:	4632      	mov	r2, r6
 801085e:	4629      	mov	r1, r5
 8010860:	6820      	ldr	r0, [r4, #0]
 8010862:	f7ff ffdc 	bl	801081e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8010866:	9b01      	ldr	r3, [sp, #4]
 8010868:	6822      	ldr	r2, [r4, #0]
 801086a:	6063      	str	r3, [r4, #4]
 801086c:	2100      	movs	r1, #0
 801086e:	54d1      	strb	r1, [r2, r3]
 8010870:	b002      	add	sp, #8
 8010872:	bd70      	pop	{r4, r5, r6, pc}

08010874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8010874:	b538      	push	{r3, r4, r5, lr}
 8010876:	f100 0308 	add.w	r3, r0, #8
 801087a:	4604      	mov	r4, r0
 801087c:	6003      	str	r3, [r0, #0]
 801087e:	460d      	mov	r5, r1
 8010880:	b911      	cbnz	r1, 8010888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8010882:	4807      	ldr	r0, [pc, #28]	@ (80108a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8010884:	f000 f824 	bl	80108d0 <_ZSt19__throw_logic_errorPKc>
 8010888:	4608      	mov	r0, r1
 801088a:	f7ef fcb3 	bl	80001f4 <strlen>
 801088e:	f04f 0300 	mov.w	r3, #0
 8010892:	182a      	adds	r2, r5, r0
 8010894:	4629      	mov	r1, r5
 8010896:	4620      	mov	r0, r4
 8010898:	f7ff ffd1 	bl	801083e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801089c:	4620      	mov	r0, r4
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	08010d9c 	.word	0x08010d9c

080108a4 <_ZdlPv>:
 80108a4:	f000 b832 	b.w	801090c <free>

080108a8 <_Znwj>:
 80108a8:	2801      	cmp	r0, #1
 80108aa:	bf38      	it	cc
 80108ac:	2001      	movcc	r0, #1
 80108ae:	b510      	push	{r4, lr}
 80108b0:	4604      	mov	r4, r0
 80108b2:	4620      	mov	r0, r4
 80108b4:	f000 f822 	bl	80108fc <malloc>
 80108b8:	b100      	cbz	r0, 80108bc <_Znwj+0x14>
 80108ba:	bd10      	pop	{r4, pc}
 80108bc:	f000 f80e 	bl	80108dc <_ZSt15get_new_handlerv>
 80108c0:	b908      	cbnz	r0, 80108c6 <_Znwj+0x1e>
 80108c2:	f000 f813 	bl	80108ec <abort>
 80108c6:	4780      	blx	r0
 80108c8:	e7f3      	b.n	80108b2 <_Znwj+0xa>

080108ca <_ZSt17__throw_bad_allocv>:
 80108ca:	b508      	push	{r3, lr}
 80108cc:	f000 f80e 	bl	80108ec <abort>

080108d0 <_ZSt19__throw_logic_errorPKc>:
 80108d0:	b508      	push	{r3, lr}
 80108d2:	f000 f80b 	bl	80108ec <abort>

080108d6 <_ZSt20__throw_length_errorPKc>:
 80108d6:	b508      	push	{r3, lr}
 80108d8:	f000 f808 	bl	80108ec <abort>

080108dc <_ZSt15get_new_handlerv>:
 80108dc:	4b02      	ldr	r3, [pc, #8]	@ (80108e8 <_ZSt15get_new_handlerv+0xc>)
 80108de:	6818      	ldr	r0, [r3, #0]
 80108e0:	f3bf 8f5b 	dmb	ish
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	20000ffc 	.word	0x20000ffc

080108ec <abort>:
 80108ec:	b508      	push	{r3, lr}
 80108ee:	2006      	movs	r0, #6
 80108f0:	f000 f8f2 	bl	8010ad8 <raise>
 80108f4:	2001      	movs	r0, #1
 80108f6:	f7f1 fb45 	bl	8001f84 <_exit>
	...

080108fc <malloc>:
 80108fc:	4b02      	ldr	r3, [pc, #8]	@ (8010908 <malloc+0xc>)
 80108fe:	4601      	mov	r1, r0
 8010900:	6818      	ldr	r0, [r3, #0]
 8010902:	f000 b82d 	b.w	8010960 <_malloc_r>
 8010906:	bf00      	nop
 8010908:	2000002c 	.word	0x2000002c

0801090c <free>:
 801090c:	4b02      	ldr	r3, [pc, #8]	@ (8010918 <free+0xc>)
 801090e:	4601      	mov	r1, r0
 8010910:	6818      	ldr	r0, [r3, #0]
 8010912:	f000 b947 	b.w	8010ba4 <_free_r>
 8010916:	bf00      	nop
 8010918:	2000002c 	.word	0x2000002c

0801091c <sbrk_aligned>:
 801091c:	b570      	push	{r4, r5, r6, lr}
 801091e:	4e0f      	ldr	r6, [pc, #60]	@ (801095c <sbrk_aligned+0x40>)
 8010920:	460c      	mov	r4, r1
 8010922:	6831      	ldr	r1, [r6, #0]
 8010924:	4605      	mov	r5, r0
 8010926:	b911      	cbnz	r1, 801092e <sbrk_aligned+0x12>
 8010928:	f000 f8f2 	bl	8010b10 <_sbrk_r>
 801092c:	6030      	str	r0, [r6, #0]
 801092e:	4621      	mov	r1, r4
 8010930:	4628      	mov	r0, r5
 8010932:	f000 f8ed 	bl	8010b10 <_sbrk_r>
 8010936:	1c43      	adds	r3, r0, #1
 8010938:	d103      	bne.n	8010942 <sbrk_aligned+0x26>
 801093a:	f04f 34ff 	mov.w	r4, #4294967295
 801093e:	4620      	mov	r0, r4
 8010940:	bd70      	pop	{r4, r5, r6, pc}
 8010942:	1cc4      	adds	r4, r0, #3
 8010944:	f024 0403 	bic.w	r4, r4, #3
 8010948:	42a0      	cmp	r0, r4
 801094a:	d0f8      	beq.n	801093e <sbrk_aligned+0x22>
 801094c:	1a21      	subs	r1, r4, r0
 801094e:	4628      	mov	r0, r5
 8010950:	f000 f8de 	bl	8010b10 <_sbrk_r>
 8010954:	3001      	adds	r0, #1
 8010956:	d1f2      	bne.n	801093e <sbrk_aligned+0x22>
 8010958:	e7ef      	b.n	801093a <sbrk_aligned+0x1e>
 801095a:	bf00      	nop
 801095c:	20001000 	.word	0x20001000

08010960 <_malloc_r>:
 8010960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010964:	1ccd      	adds	r5, r1, #3
 8010966:	f025 0503 	bic.w	r5, r5, #3
 801096a:	3508      	adds	r5, #8
 801096c:	2d0c      	cmp	r5, #12
 801096e:	bf38      	it	cc
 8010970:	250c      	movcc	r5, #12
 8010972:	2d00      	cmp	r5, #0
 8010974:	4606      	mov	r6, r0
 8010976:	db01      	blt.n	801097c <_malloc_r+0x1c>
 8010978:	42a9      	cmp	r1, r5
 801097a:	d904      	bls.n	8010986 <_malloc_r+0x26>
 801097c:	230c      	movs	r3, #12
 801097e:	6033      	str	r3, [r6, #0]
 8010980:	2000      	movs	r0, #0
 8010982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a5c <_malloc_r+0xfc>
 801098a:	f000 f869 	bl	8010a60 <__malloc_lock>
 801098e:	f8d8 3000 	ldr.w	r3, [r8]
 8010992:	461c      	mov	r4, r3
 8010994:	bb44      	cbnz	r4, 80109e8 <_malloc_r+0x88>
 8010996:	4629      	mov	r1, r5
 8010998:	4630      	mov	r0, r6
 801099a:	f7ff ffbf 	bl	801091c <sbrk_aligned>
 801099e:	1c43      	adds	r3, r0, #1
 80109a0:	4604      	mov	r4, r0
 80109a2:	d158      	bne.n	8010a56 <_malloc_r+0xf6>
 80109a4:	f8d8 4000 	ldr.w	r4, [r8]
 80109a8:	4627      	mov	r7, r4
 80109aa:	2f00      	cmp	r7, #0
 80109ac:	d143      	bne.n	8010a36 <_malloc_r+0xd6>
 80109ae:	2c00      	cmp	r4, #0
 80109b0:	d04b      	beq.n	8010a4a <_malloc_r+0xea>
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	4639      	mov	r1, r7
 80109b6:	4630      	mov	r0, r6
 80109b8:	eb04 0903 	add.w	r9, r4, r3
 80109bc:	f000 f8a8 	bl	8010b10 <_sbrk_r>
 80109c0:	4581      	cmp	r9, r0
 80109c2:	d142      	bne.n	8010a4a <_malloc_r+0xea>
 80109c4:	6821      	ldr	r1, [r4, #0]
 80109c6:	1a6d      	subs	r5, r5, r1
 80109c8:	4629      	mov	r1, r5
 80109ca:	4630      	mov	r0, r6
 80109cc:	f7ff ffa6 	bl	801091c <sbrk_aligned>
 80109d0:	3001      	adds	r0, #1
 80109d2:	d03a      	beq.n	8010a4a <_malloc_r+0xea>
 80109d4:	6823      	ldr	r3, [r4, #0]
 80109d6:	442b      	add	r3, r5
 80109d8:	6023      	str	r3, [r4, #0]
 80109da:	f8d8 3000 	ldr.w	r3, [r8]
 80109de:	685a      	ldr	r2, [r3, #4]
 80109e0:	bb62      	cbnz	r2, 8010a3c <_malloc_r+0xdc>
 80109e2:	f8c8 7000 	str.w	r7, [r8]
 80109e6:	e00f      	b.n	8010a08 <_malloc_r+0xa8>
 80109e8:	6822      	ldr	r2, [r4, #0]
 80109ea:	1b52      	subs	r2, r2, r5
 80109ec:	d420      	bmi.n	8010a30 <_malloc_r+0xd0>
 80109ee:	2a0b      	cmp	r2, #11
 80109f0:	d917      	bls.n	8010a22 <_malloc_r+0xc2>
 80109f2:	1961      	adds	r1, r4, r5
 80109f4:	42a3      	cmp	r3, r4
 80109f6:	6025      	str	r5, [r4, #0]
 80109f8:	bf18      	it	ne
 80109fa:	6059      	strne	r1, [r3, #4]
 80109fc:	6863      	ldr	r3, [r4, #4]
 80109fe:	bf08      	it	eq
 8010a00:	f8c8 1000 	streq.w	r1, [r8]
 8010a04:	5162      	str	r2, [r4, r5]
 8010a06:	604b      	str	r3, [r1, #4]
 8010a08:	4630      	mov	r0, r6
 8010a0a:	f000 f82f 	bl	8010a6c <__malloc_unlock>
 8010a0e:	f104 000b 	add.w	r0, r4, #11
 8010a12:	1d23      	adds	r3, r4, #4
 8010a14:	f020 0007 	bic.w	r0, r0, #7
 8010a18:	1ac2      	subs	r2, r0, r3
 8010a1a:	bf1c      	itt	ne
 8010a1c:	1a1b      	subne	r3, r3, r0
 8010a1e:	50a3      	strne	r3, [r4, r2]
 8010a20:	e7af      	b.n	8010982 <_malloc_r+0x22>
 8010a22:	6862      	ldr	r2, [r4, #4]
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	bf0c      	ite	eq
 8010a28:	f8c8 2000 	streq.w	r2, [r8]
 8010a2c:	605a      	strne	r2, [r3, #4]
 8010a2e:	e7eb      	b.n	8010a08 <_malloc_r+0xa8>
 8010a30:	4623      	mov	r3, r4
 8010a32:	6864      	ldr	r4, [r4, #4]
 8010a34:	e7ae      	b.n	8010994 <_malloc_r+0x34>
 8010a36:	463c      	mov	r4, r7
 8010a38:	687f      	ldr	r7, [r7, #4]
 8010a3a:	e7b6      	b.n	80109aa <_malloc_r+0x4a>
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	42a3      	cmp	r3, r4
 8010a42:	d1fb      	bne.n	8010a3c <_malloc_r+0xdc>
 8010a44:	2300      	movs	r3, #0
 8010a46:	6053      	str	r3, [r2, #4]
 8010a48:	e7de      	b.n	8010a08 <_malloc_r+0xa8>
 8010a4a:	230c      	movs	r3, #12
 8010a4c:	6033      	str	r3, [r6, #0]
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f000 f80c 	bl	8010a6c <__malloc_unlock>
 8010a54:	e794      	b.n	8010980 <_malloc_r+0x20>
 8010a56:	6005      	str	r5, [r0, #0]
 8010a58:	e7d6      	b.n	8010a08 <_malloc_r+0xa8>
 8010a5a:	bf00      	nop
 8010a5c:	20001004 	.word	0x20001004

08010a60 <__malloc_lock>:
 8010a60:	4801      	ldr	r0, [pc, #4]	@ (8010a68 <__malloc_lock+0x8>)
 8010a62:	f000 b88f 	b.w	8010b84 <__retarget_lock_acquire_recursive>
 8010a66:	bf00      	nop
 8010a68:	20001144 	.word	0x20001144

08010a6c <__malloc_unlock>:
 8010a6c:	4801      	ldr	r0, [pc, #4]	@ (8010a74 <__malloc_unlock+0x8>)
 8010a6e:	f000 b88a 	b.w	8010b86 <__retarget_lock_release_recursive>
 8010a72:	bf00      	nop
 8010a74:	20001144 	.word	0x20001144

08010a78 <memset>:
 8010a78:	4402      	add	r2, r0
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d100      	bne.n	8010a82 <memset+0xa>
 8010a80:	4770      	bx	lr
 8010a82:	f803 1b01 	strb.w	r1, [r3], #1
 8010a86:	e7f9      	b.n	8010a7c <memset+0x4>

08010a88 <_raise_r>:
 8010a88:	291f      	cmp	r1, #31
 8010a8a:	b538      	push	{r3, r4, r5, lr}
 8010a8c:	4605      	mov	r5, r0
 8010a8e:	460c      	mov	r4, r1
 8010a90:	d904      	bls.n	8010a9c <_raise_r+0x14>
 8010a92:	2316      	movs	r3, #22
 8010a94:	6003      	str	r3, [r0, #0]
 8010a96:	f04f 30ff 	mov.w	r0, #4294967295
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a9e:	b112      	cbz	r2, 8010aa6 <_raise_r+0x1e>
 8010aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aa4:	b94b      	cbnz	r3, 8010aba <_raise_r+0x32>
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	f000 f830 	bl	8010b0c <_getpid_r>
 8010aac:	4622      	mov	r2, r4
 8010aae:	4601      	mov	r1, r0
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ab6:	f000 b817 	b.w	8010ae8 <_kill_r>
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d00a      	beq.n	8010ad4 <_raise_r+0x4c>
 8010abe:	1c59      	adds	r1, r3, #1
 8010ac0:	d103      	bne.n	8010aca <_raise_r+0x42>
 8010ac2:	2316      	movs	r3, #22
 8010ac4:	6003      	str	r3, [r0, #0]
 8010ac6:	2001      	movs	r0, #1
 8010ac8:	e7e7      	b.n	8010a9a <_raise_r+0x12>
 8010aca:	2100      	movs	r1, #0
 8010acc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	4798      	blx	r3
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	e7e0      	b.n	8010a9a <_raise_r+0x12>

08010ad8 <raise>:
 8010ad8:	4b02      	ldr	r3, [pc, #8]	@ (8010ae4 <raise+0xc>)
 8010ada:	4601      	mov	r1, r0
 8010adc:	6818      	ldr	r0, [r3, #0]
 8010ade:	f7ff bfd3 	b.w	8010a88 <_raise_r>
 8010ae2:	bf00      	nop
 8010ae4:	2000002c 	.word	0x2000002c

08010ae8 <_kill_r>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	4d07      	ldr	r5, [pc, #28]	@ (8010b08 <_kill_r+0x20>)
 8010aec:	2300      	movs	r3, #0
 8010aee:	4604      	mov	r4, r0
 8010af0:	4608      	mov	r0, r1
 8010af2:	4611      	mov	r1, r2
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	f7f1 fa35 	bl	8001f64 <_kill>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d102      	bne.n	8010b04 <_kill_r+0x1c>
 8010afe:	682b      	ldr	r3, [r5, #0]
 8010b00:	b103      	cbz	r3, 8010b04 <_kill_r+0x1c>
 8010b02:	6023      	str	r3, [r4, #0]
 8010b04:	bd38      	pop	{r3, r4, r5, pc}
 8010b06:	bf00      	nop
 8010b08:	20001140 	.word	0x20001140

08010b0c <_getpid_r>:
 8010b0c:	f7f1 ba22 	b.w	8001f54 <_getpid>

08010b10 <_sbrk_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	4d06      	ldr	r5, [pc, #24]	@ (8010b2c <_sbrk_r+0x1c>)
 8010b14:	2300      	movs	r3, #0
 8010b16:	4604      	mov	r4, r0
 8010b18:	4608      	mov	r0, r1
 8010b1a:	602b      	str	r3, [r5, #0]
 8010b1c:	f7f1 fa3e 	bl	8001f9c <_sbrk>
 8010b20:	1c43      	adds	r3, r0, #1
 8010b22:	d102      	bne.n	8010b2a <_sbrk_r+0x1a>
 8010b24:	682b      	ldr	r3, [r5, #0]
 8010b26:	b103      	cbz	r3, 8010b2a <_sbrk_r+0x1a>
 8010b28:	6023      	str	r3, [r4, #0]
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	20001140 	.word	0x20001140

08010b30 <__errno>:
 8010b30:	4b01      	ldr	r3, [pc, #4]	@ (8010b38 <__errno+0x8>)
 8010b32:	6818      	ldr	r0, [r3, #0]
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	2000002c 	.word	0x2000002c

08010b3c <__libc_init_array>:
 8010b3c:	b570      	push	{r4, r5, r6, lr}
 8010b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8010b74 <__libc_init_array+0x38>)
 8010b40:	4c0d      	ldr	r4, [pc, #52]	@ (8010b78 <__libc_init_array+0x3c>)
 8010b42:	1b64      	subs	r4, r4, r5
 8010b44:	10a4      	asrs	r4, r4, #2
 8010b46:	2600      	movs	r6, #0
 8010b48:	42a6      	cmp	r6, r4
 8010b4a:	d109      	bne.n	8010b60 <__libc_init_array+0x24>
 8010b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8010b7c <__libc_init_array+0x40>)
 8010b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8010b80 <__libc_init_array+0x44>)
 8010b50:	f000 f872 	bl	8010c38 <_init>
 8010b54:	1b64      	subs	r4, r4, r5
 8010b56:	10a4      	asrs	r4, r4, #2
 8010b58:	2600      	movs	r6, #0
 8010b5a:	42a6      	cmp	r6, r4
 8010b5c:	d105      	bne.n	8010b6a <__libc_init_array+0x2e>
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}
 8010b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b64:	4798      	blx	r3
 8010b66:	3601      	adds	r6, #1
 8010b68:	e7ee      	b.n	8010b48 <__libc_init_array+0xc>
 8010b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b6e:	4798      	blx	r3
 8010b70:	3601      	adds	r6, #1
 8010b72:	e7f2      	b.n	8010b5a <__libc_init_array+0x1e>
 8010b74:	08010dd8 	.word	0x08010dd8
 8010b78:	08010dd8 	.word	0x08010dd8
 8010b7c:	08010dd8 	.word	0x08010dd8
 8010b80:	08010ddc 	.word	0x08010ddc

08010b84 <__retarget_lock_acquire_recursive>:
 8010b84:	4770      	bx	lr

08010b86 <__retarget_lock_release_recursive>:
 8010b86:	4770      	bx	lr

08010b88 <memcpy>:
 8010b88:	440a      	add	r2, r1
 8010b8a:	4291      	cmp	r1, r2
 8010b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b90:	d100      	bne.n	8010b94 <memcpy+0xc>
 8010b92:	4770      	bx	lr
 8010b94:	b510      	push	{r4, lr}
 8010b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b9e:	4291      	cmp	r1, r2
 8010ba0:	d1f9      	bne.n	8010b96 <memcpy+0xe>
 8010ba2:	bd10      	pop	{r4, pc}

08010ba4 <_free_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4605      	mov	r5, r0
 8010ba8:	2900      	cmp	r1, #0
 8010baa:	d041      	beq.n	8010c30 <_free_r+0x8c>
 8010bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bb0:	1f0c      	subs	r4, r1, #4
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	bfb8      	it	lt
 8010bb6:	18e4      	addlt	r4, r4, r3
 8010bb8:	f7ff ff52 	bl	8010a60 <__malloc_lock>
 8010bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8010c34 <_free_r+0x90>)
 8010bbe:	6813      	ldr	r3, [r2, #0]
 8010bc0:	b933      	cbnz	r3, 8010bd0 <_free_r+0x2c>
 8010bc2:	6063      	str	r3, [r4, #4]
 8010bc4:	6014      	str	r4, [r2, #0]
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bcc:	f7ff bf4e 	b.w	8010a6c <__malloc_unlock>
 8010bd0:	42a3      	cmp	r3, r4
 8010bd2:	d908      	bls.n	8010be6 <_free_r+0x42>
 8010bd4:	6820      	ldr	r0, [r4, #0]
 8010bd6:	1821      	adds	r1, r4, r0
 8010bd8:	428b      	cmp	r3, r1
 8010bda:	bf01      	itttt	eq
 8010bdc:	6819      	ldreq	r1, [r3, #0]
 8010bde:	685b      	ldreq	r3, [r3, #4]
 8010be0:	1809      	addeq	r1, r1, r0
 8010be2:	6021      	streq	r1, [r4, #0]
 8010be4:	e7ed      	b.n	8010bc2 <_free_r+0x1e>
 8010be6:	461a      	mov	r2, r3
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	b10b      	cbz	r3, 8010bf0 <_free_r+0x4c>
 8010bec:	42a3      	cmp	r3, r4
 8010bee:	d9fa      	bls.n	8010be6 <_free_r+0x42>
 8010bf0:	6811      	ldr	r1, [r2, #0]
 8010bf2:	1850      	adds	r0, r2, r1
 8010bf4:	42a0      	cmp	r0, r4
 8010bf6:	d10b      	bne.n	8010c10 <_free_r+0x6c>
 8010bf8:	6820      	ldr	r0, [r4, #0]
 8010bfa:	4401      	add	r1, r0
 8010bfc:	1850      	adds	r0, r2, r1
 8010bfe:	4283      	cmp	r3, r0
 8010c00:	6011      	str	r1, [r2, #0]
 8010c02:	d1e0      	bne.n	8010bc6 <_free_r+0x22>
 8010c04:	6818      	ldr	r0, [r3, #0]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	6053      	str	r3, [r2, #4]
 8010c0a:	4408      	add	r0, r1
 8010c0c:	6010      	str	r0, [r2, #0]
 8010c0e:	e7da      	b.n	8010bc6 <_free_r+0x22>
 8010c10:	d902      	bls.n	8010c18 <_free_r+0x74>
 8010c12:	230c      	movs	r3, #12
 8010c14:	602b      	str	r3, [r5, #0]
 8010c16:	e7d6      	b.n	8010bc6 <_free_r+0x22>
 8010c18:	6820      	ldr	r0, [r4, #0]
 8010c1a:	1821      	adds	r1, r4, r0
 8010c1c:	428b      	cmp	r3, r1
 8010c1e:	bf04      	itt	eq
 8010c20:	6819      	ldreq	r1, [r3, #0]
 8010c22:	685b      	ldreq	r3, [r3, #4]
 8010c24:	6063      	str	r3, [r4, #4]
 8010c26:	bf04      	itt	eq
 8010c28:	1809      	addeq	r1, r1, r0
 8010c2a:	6021      	streq	r1, [r4, #0]
 8010c2c:	6054      	str	r4, [r2, #4]
 8010c2e:	e7ca      	b.n	8010bc6 <_free_r+0x22>
 8010c30:	bd38      	pop	{r3, r4, r5, pc}
 8010c32:	bf00      	nop
 8010c34:	20001004 	.word	0x20001004

08010c38 <_init>:
 8010c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c3a:	bf00      	nop
 8010c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c3e:	bc08      	pop	{r3}
 8010c40:	469e      	mov	lr, r3
 8010c42:	4770      	bx	lr

08010c44 <_fini>:
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	bf00      	nop
 8010c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c4a:	bc08      	pop	{r3}
 8010c4c:	469e      	mov	lr, r3
 8010c4e:	4770      	bx	lr
