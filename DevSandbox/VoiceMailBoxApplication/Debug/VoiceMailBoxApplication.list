
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a84  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08013c44  08013c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f5c  08013f5c  00015088  2**0
                  CONTENTS
  4 .ARM          00000008  08013f5c  08013f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f64  08013f64  00015088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f64  08013f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f68  08013f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08013f6c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015088  2**0
                  CONTENTS
 10 .bss          000010d0  20000088  20000088  00015088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001158  20001158  00015088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004219e  00000000  00000000  000150b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b6b  00000000  00000000  00057256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bb8  00000000  00000000  0005edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021b8  00000000  00000000  00061980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038f35  00000000  00000000  00063b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b5f2  00000000  00000000  0009ca6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012dd69  00000000  00000000  000d805f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00205dc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d944  00000000  00000000  00205e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00213750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013c2c 	.word	0x08013c2c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	08013c2c 	.word	0x08013c2c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_ZN3VMB5IFileC1Ev>:
#define IFILE_HPP_


namespace VMB
{
	class IFile
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <_ZN3VMB5IFileC1Ev+0x1c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	08013e08 	.word	0x08013e08

080005d8 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <_ZN3VMB5IFileD1Ev+0x1c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	08013e08 	.word	0x08013e08

080005f8 <_ZN3VMB5IFileD0Ev>:
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff ffe9 	bl	80005d8 <_ZN3VMB5IFileD1Ev>
 8000606:	2104      	movs	r1, #4
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f012 f935 	bl	8012878 <_ZdlPvj>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN3VMB9FAT32FileC1Ev>:
{
	bool FAT32File::s_isMounted = false;
	FATFS FAT32File::s_SDFatFS;
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    	: m_fileHandle{ 0 }
		, m_isOpen(false)
		, m_currentMode(AccessMode::read)
		, m_path("")
		, m_lastError(FRESULT::FR_OK)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffc8 	bl	80005b8 <_ZN3VMB5IFileC1Ev>
 8000628:	4a24      	ldr	r2, [pc, #144]	@ (80006bc <_ZN3VMB9FAT32FileC1Ev+0xa4>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
    	: m_fileHandle{ 0 }
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3304      	adds	r3, #4
 8000632:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f012 fdcf 	bl	80131dc <memset>
		, m_isOpen(false)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		, m_currentMode(AccessMode::read)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
		, m_path("")
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f503 740f 	add.w	r4, r3, #572	@ 0x23c
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4618      	mov	r0, r3
 800065a:	f012 f920 	bl	801289e <_ZNSaIcEC1Ev>
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	461a      	mov	r2, r3
 8000664:	4916      	ldr	r1, [pc, #88]	@ (80006c0 <_ZN3VMB9FAT32FileC1Ev+0xa8>)
 8000666:	4620      	mov	r0, r4
 8000668:	f012 faac 	bl	8012bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4618      	mov	r0, r3
 8000672:	f012 f915 	bl	80128a0 <_ZNSaIcED1Ev>
		, m_lastError(FRESULT::FR_OK)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
	{
		if(!s_isMounted)
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f083 0301 	eor.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <_ZN3VMB9FAT32FileC1Ev+0x98>
		{
			m_lastError =  f_mount(&s_SDFatFS, (TCHAR const*)SDPath, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	490e      	ldr	r1, [pc, #56]	@ (80006c8 <_ZN3VMB9FAT32FileC1Ev+0xb0>)
 8000690:	480e      	ldr	r0, [pc, #56]	@ (80006cc <_ZN3VMB9FAT32FileC1Ev+0xb4>)
 8000692:	f010 fd7b 	bl	801118c <f_mount>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
			if(m_lastError == FRESULT::FR_OK)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d102      	bne.n	80006b0 <_ZN3VMB9FAT32FileC1Ev+0x98>
				s_isMounted = true;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
			else
			{
				// Can't mount device
			}
		}
	}
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08013df8 	.word	0x08013df8
 80006c0:	08013c44 	.word	0x08013c44
 80006c4:	200000a4 	.word	0x200000a4
 80006c8:	2000080c 	.word	0x2000080c
 80006cc:	200000a8 	.word	0x200000a8

080006d0 <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <_ZN3VMB9FAT32FileD1Ev+0x2c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
	{

	}
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 80006e4:	4618      	mov	r0, r3
 80006e6:	f012 f974 	bl	80129d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff73 	bl	80005d8 <_ZN3VMB5IFileD1Ev>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08013df8 	.word	0x08013df8

08000700 <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	}
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ffe1 	bl	80006d0 <_ZN3VMB9FAT32FileD1Ev>
 800070e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f012 f8b0 	bl	8012878 <_ZdlPvj>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN3VMB9FAT32File4openEPKci>:
			}
		}
		return false;
	}
	bool FAT32File::open(const char* path, int fa_mode)
	{
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
		if (m_isOpen)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <_ZN3VMB9FAT32File4openEPKci+0x1a>
		{
			// Already open
			return false;
 8000738:	2300      	movs	r3, #0
 800073a:	e027      	b.n	800078c <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_lastError = f_open(&m_fileHandle, path, fa_mode);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3304      	adds	r3, #4
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	4618      	mov	r0, r3
 8000748:	f010 fd66 	bl	8011218 <f_open>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		if (m_lastError == FR_OK) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 800075c:	2b00      	cmp	r3, #0
 800075e:	d110      	bne.n	8000782 <_ZN3VMB9FAT32File4openEPKci+0x60>
			m_isOpen = true;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2201      	movs	r2, #1
 8000764:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
			m_path = path;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	4618      	mov	r0, r3
 8000772:	f012 fa06 	bl	8012b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			m_currentMode = fa_mode;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
			return true;
 800077e:	2301      	movs	r3, #1
 8000780:	e004      	b.n	800078c <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_isOpen = false;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		return false;
 800078a:	2300      	movs	r3, #0
	}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
		if (!m_isOpen)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <_ZN3VMB9FAT32File5closeEv+0x1c>
		{
			// File is not open
			return false;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e01b      	b.n	80007e8 <_ZN3VMB9FAT32File5closeEv+0x54>
		}
		m_path.clear();
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 80007b6:	4618      	mov	r0, r3
 80007b8:	f012 f952 	bl	8012a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		m_isOpen = false;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		m_lastError = f_close(&m_fileHandle);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3304      	adds	r3, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f011 fa11 	bl	8011bf0 <f_close>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FRESULT::FR_OK;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
	}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return 0;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <_ZN3VMB9FAT32File5writeEPKc+0x1e>
 800080a:	2300      	movs	r3, #0
 800080c:	e011      	b.n	8000832 <_ZN3VMB9FAT32File5writeEPKc+0x42>
		UINT written;
		m_lastError = f_write(&m_fileHandle, text, strlen(text), &written);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	1d1c      	adds	r4, r3, #4
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f7ff fd44 	bl	80002a0 <strlen>
 8000818:	4602      	mov	r2, r0
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	4620      	mov	r0, r4
 8000822:	f010 fff2 	bl	801180a <f_write>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return written;
 8000830:	68fb      	ldr	r3, [r7, #12]
	}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bd90      	pop	{r4, r7, pc}

0800083a <_ZN3VMB9FAT32File4readEPcj>:
	unsigned int FAT32File::read(char* buffer, unsigned int length) {
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
		if (!m_isOpen) return 0;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <_ZN3VMB9FAT32File4readEPcj+0x20>
 8000856:	2300      	movs	r3, #0
 8000858:	e00d      	b.n	8000876 <_ZN3VMB9FAT32File4readEPcj+0x3c>
		UINT bytesRead;
		m_lastError = f_read(&m_fileHandle, buffer, length, &bytesRead);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1d18      	adds	r0, r3, #4
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	f010 fe91 	bl	801158c <f_read>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return bytesRead;
 8000874:	697b      	ldr	r3, [r7, #20]
	}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_ZN3VMB9FAT32File5flushEv>:

	unsigned int FAT32File::getSize() const {
		if (!m_isOpen) return 0;
		return f_size(&m_fileHandle);
	}
	bool FAT32File::flush() {
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return false;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800088c:	f083 0301 	eor.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <_ZN3VMB9FAT32File5flushEv+0x1c>
 8000896:	2300      	movs	r3, #0
 8000898:	e011      	b.n	80008be <_ZN3VMB9FAT32File5flushEv+0x40>
		m_lastError = f_sync(&m_fileHandle);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3304      	adds	r3, #4
 800089e:	4618      	mov	r0, r3
 80008a0:	f011 f928 	bl	8011af4 <f_sync>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf0c      	ite	eq
 80008b8:	2301      	moveq	r3, #1
 80008ba:	2300      	movne	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
	}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_ZN3VMB9FAT32File6removeEPKc>:

	bool FAT32File::remove(const char* path) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
		return f_unlink(path) == FR_OK;
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f011 fac7 	bl	8011e62 <f_unlink>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf0c      	ite	eq
 80008da:	2301      	moveq	r3, #1
 80008dc:	2300      	movne	r3, #0
 80008de:	b2db      	uxtb	r3, r3
	}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_ZN3VMB9FAT32File6renameEPKcS2_>:

	bool FAT32File::rename(const char* oldPath, const char* newPath) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
		return f_rename(oldPath, newPath) == FR_OK;
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f011 fb5f 	bl	8011fb8 <f_rename>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf0c      	ite	eq
 8000900:	2301      	moveq	r3, #1
 8000902:	2300      	movne	r3, #0
 8000904:	b2db      	uxtb	r3, r3
	}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_ZN3VMB9FAT32File6existsEPKc>:

	bool FAT32File::exists(const char* path) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b088      	sub	sp, #32
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
		FILINFO fileInfo;
		return f_stat(path, &fileInfo) == FR_OK;
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f011 fa67 	bl	8011df0 <f_stat>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
	}
 800092e:	4618      	mov	r0, r3
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f84d 	bl	80009e0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffeb 	bl	8000936 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>:

	std::vector<std::string> FAT32File::listDirectory(const char* path) {
 800096a:	b580      	push	{r7, lr}
 800096c:	b094      	sub	sp, #80	@ 0x50
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
		std::vector<std::string> files;
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ffeb 	bl	8000950 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
		DIR dir;
		FILINFO fileInfo;
		if (f_opendir(&dir, path) == FR_OK) {
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	6839      	ldr	r1, [r7, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f011 f95f 	bl	8011c44 <f_opendir>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d01f      	beq.n	80009d6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x6c>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000996:	e006      	b.n	80009a6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x3c>
				files.emplace_back(fileInfo.fname);
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	3309      	adds	r3, #9
 800099e:	4619      	mov	r1, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f82d 	bl	8000a00 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 80009a6:	f107 0208 	add.w	r2, r7, #8
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f011 f9e0 	bl	8011d76 <f_readdir>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 80009bc:	7c7b      	ldrb	r3, [r7, #17]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5e>
 80009c6:	2300      	movs	r3, #0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e5      	bne.n	8000998 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x2e>
			}
			f_closedir(&dir);
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	4618      	mov	r0, r3
 80009d2:	f011 f9aa 	bl	8011d2a <f_closedir>
		}
		return files;
 80009d6:	bf00      	nop
	}
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	3750      	adds	r7, #80	@ 0x50
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f838 	bl	8000a5e <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f840 	bl	8000a76 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d012      	beq.n	8000a3c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000a16:	687c      	ldr	r4, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685d      	ldr	r5, [r3, #4]
 8000a1c:	6838      	ldr	r0, [r7, #0]
 8000a1e:	f000 f86a 	bl	8000af6 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	4629      	mov	r1, r5
 8000a28:	4620      	mov	r0, r4
 8000a2a:	f000 f86f 	bl	8000b0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f103 0218 	add.w	r2, r3, #24
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000a3a:	e00c      	b.n	8000a56 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f878 	bl	8000b32 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8000a42:	4604      	mov	r4, r0
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f000 f856 	bl	8000af6 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4621      	mov	r1, r4
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f895 	bl	8000b80 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}

08000a5e <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f952 	bl	8000d10 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	{ }
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
	if (__p)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f935 	bl	8000d26 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f92b 	bl	8000d44 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffec 	bl	8000af6 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 f91a 	bl	8000d5e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>
	}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	1d1a      	adds	r2, r3, #4
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f92f 	bl	8000da8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f805 	bl	8000b6a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000b60:	4603      	mov	r3, r0
      }
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000b72:	2301      	movs	r3, #1
      }
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8000d08 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f919 	bl	8000dc8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8000b96:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 f956 	bl	8000e56 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8000baa:	4603      	mov	r3, r0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	f107 0214 	add.w	r2, r7, #20
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f95d 	bl	8000e78 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f970 	bl	8000eac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8000bcc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000bd2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	189d      	adds	r5, r3, r2
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff86 	bl	8000af6 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	4629      	mov	r1, r5
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff ff8b 	bl	8000b0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000bfa:	f7ff ffab 	bl	8000b54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d027      	beq.n	8000c54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f977 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff55 	bl	8000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000c1a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4621      	mov	r1, r4
 8000c20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c22:	f000 f957 	bl	8000ed4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000c26:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2a:	3318      	adds	r3, #24
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f962 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff40 	bl	8000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000c44:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c48:	6a39      	ldr	r1, [r7, #32]
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f000 f942 	bl	8000ed4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000c52:	e026      	b.n	8000ca2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f94f 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff2d 	bl	8000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000c6a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4621      	mov	r1, r4
 8000c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c72:	f000 f94e 	bl	8000f12 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000c76:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f93a 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff18 	bl	8000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000c94:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c98:	6a39      	ldr	r1, [r7, #32]
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f000 f939 	bl	8000f12 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000ca0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000ca2:	f7ff ff57 	bl	8000b54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f083 0301 	eor.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d009      	beq.n	8000cc6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff05 	bl	8000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	6a39      	ldr	r1, [r7, #32]
 8000cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000cc2:	f7ff ff0a 	bl	8000ada <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000cc6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	10db      	asrs	r3, r3, #3
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000cd8:	461a      	mov	r2, r3
 8000cda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cdc:	f7ff fedf 	bl	8000a9e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000cec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	441a      	add	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	609a      	str	r2, [r3, #8]
    }
 8000d00:	bf00      	nop
 8000d02:	3730      	adds	r7, #48	@ 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bdb0      	pop	{r4, r5, r7, pc}
 8000d08:	08013c48 	.word	0x08013c48
 8000d0c:	aaaaaaab 	.word	0xaaaaaaab

08000d10 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f911 	bl	8000f5e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f917 	bl	8000f84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000d5e:	b5b0      	push	{r4, r5, r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2018      	movs	r0, #24
 8000d70:	f7ff fc16 	bl	80005a0 <_ZnwjPv>
 8000d74:	4604      	mov	r4, r0
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff febd 	bl	8000af6 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d7c:	4605      	mov	r5, r0
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4618      	mov	r0, r3
 8000d84:	f011 fd8b 	bl	801289e <_ZNSaIcEC1Ev>
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4620      	mov	r0, r4
 8000d92:	f011 ff17 	bl	8012bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f011 fd80 	bl	80128a0 <_ZNSaIcED1Ev>
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdb0      	pop	{r4, r5, r7, pc}

08000da8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f8ee 	bl	8000fb6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f000 f8fb 	bl	8000fd8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000de2:	4603      	mov	r3, r0
 8000de4:	1ae2      	subs	r2, r4, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	bf34      	ite	cc
 8000dec:	2301      	movcc	r3, #1
 8000dee:	2300      	movcs	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f011 fd5c 	bl	80128b4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f8eb 	bl	8000fd8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000e02:	4604      	mov	r4, r0
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f000 f8e7 	bl	8000fd8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	f107 0208 	add.w	r2, r7, #8
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f8f3 	bl	8001004 <_ZSt3maxIjERKT_S2_S2_>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4423      	add	r3, r4
 8000e24:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f000 f8d6 	bl	8000fd8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d306      	bcc.n	8000e42 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 f8be 	bl	8000fb6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d904      	bls.n	8000e4c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f8b7 	bl	8000fb6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	e000      	b.n	8000e4e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8000e4c:	697b      	ldr	r3, [r7, #20]
      }
 8000e4e:	4618      	mov	r0, r3
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}

08000e56 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff9e 	bl	8000da8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f83a 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	681c      	ldr	r4, [r3, #0]
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f000 f835 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000e92:	4603      	mov	r3, r0
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ae3      	subs	r3, r4, r3
 8000e98:	10db      	asrs	r3, r3, #3
 8000e9a:	4a03      	ldr	r2, [pc, #12]	@ (8000ea8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	aaaaaaab 	.word	0xaaaaaaab

08000eac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f8b3 	bl	800102c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e000      	b.n	8000ecc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8000eca:	2300      	movs	r3, #0
      }
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000ee2:	f88d 4000 	strb.w	r4, [sp]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8ac 	bl	800104a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 8000ef2:	4603      	mov	r3, r0
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}

08000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000f12:	b590      	push	{r4, r7, lr}
 8000f14:	b085      	sub	sp, #20
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f8a4 	bl	800106e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8000f26:	4604      	mov	r4, r0
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f000 f8a0 	bl	800106e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8000f2e:	4601      	mov	r1, r0
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 f8a9 	bl	800108c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8000f3a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}

08000f44 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f8ac 	bl	80010ae <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>
	}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4619      	mov	r1, r3
 8000f76:	68b8      	ldr	r0, [r7, #8]
 8000f78:	f011 fc7e 	bl	8012878 <_ZdlPvj>
      }
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8000f8e:	e009      	b.n	8000fa4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f898 	bl	80010c6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f89f 	bl	80010dc <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d1f1      	bne.n	8000f90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f8b3 	bl	800112c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f893 	bl	80010f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	10db      	asrs	r3, r3, #3
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	aaaaaaab 	.word	0xaaaaaaab

08001004 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d201      	bcs.n	800101e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	e000      	b.n	8001020 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800101e:	687b      	ldr	r3, [r7, #4]
    }
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001036:	2200      	movs	r2, #0
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f882 	bl	8001144 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f89e 	bl	80011a0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001064:	4603      	mov	r3, r0
      }
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f8ac 	bl	80011da <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f8ad 	bl	80011fe <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 80010a4:	4603      	mov	r3, r0
    }
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f011 fc8a 	bl	80129d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f011 fc74 	bl	80129d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 80010fe:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f890 	bl	8001226 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8001106:	4603      	mov	r3, r0
 8001108:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f892 	bl	800123e <_ZSt3minIjERKT_S2_S2_>
 800111a:	4603      	mov	r3, r0
 800111c:	681b      	ldr	r3, [r3, #0]
      }
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	05555555 	.word	0x05555555

0800112c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f889 	bl	8001268 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001156:	4602      	mov	r2, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4293      	cmp	r3, r2
 800115c:	bf8c      	ite	hi
 800115e:	2301      	movhi	r3, #1
 8001160:	2300      	movls	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4a09      	ldr	r2, [pc, #36]	@ (800119c <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x58>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800117a:	f011 fb95 	bl	80128a8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800117e:	f011 fb90 	bl	80128a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4618      	mov	r0, r3
 800118e:	f011 fb75 	bl	801287c <_Znwj>
 8001192:	4603      	mov	r3, r0
      }
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	0aaaaaaa 	.word	0x0aaaaaaa

080011a0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f868 	bl	8001284 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80011b4:	4604      	mov	r4, r0
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f000 f864 	bl	8001284 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80011bc:	4605      	mov	r5, r0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f860 	bl	8001284 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80011c4:	4602      	mov	r2, r0
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	4629      	mov	r1, r5
 80011ca:	4620      	mov	r0, r4
 80011cc:	f000 f865 	bl	800129a <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80011d0:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}

080011da <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80011e4:	463b      	mov	r3, r7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f87d 	bl	80012e6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 80011ec:	4603      	mov	r3, r0
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800120e:	2300      	movs	r3, #0
 8001210:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f870 	bl	80012fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800121c:	4603      	mov	r3, r0
    }
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f874 	bl	800131c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001234:	4603      	mov	r3, r0
      }
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d201      	bcs.n	8001258 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	e000      	b.n	800125a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001258:	687b      	ldr	r3, [r7, #4]
    }
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	05555555 	.word	0x05555555

08001284 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80012ac:	e012      	b.n	80012d4 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff09 	bl	80010c6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80012b4:	4604      	mov	r4, r0
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff ff05 	bl	80010c6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80012bc:	4603      	mov	r3, r0
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4620      	mov	r0, r4
 80012c4:	f000 f836 	bl	8001334 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3318      	adds	r3, #24
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3318      	adds	r3, #24
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1e8      	bne.n	80012ae <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x14>
      return __cur;
 80012dc:	697b      	ldr	r3, [r7, #20]
    }
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}

080012e6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 f82c 	bl	800136a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8001312:	4603      	mov	r3, r0
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff9f 	bl	8001268 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 800132a:	4603      	mov	r3, r0
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f000 f841 	bl	80013c8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f846 	bl	80013de <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f7ff feb7 	bl	80010c6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fdf1 	bl	8000f44 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 800136a:	b590      	push	{r4, r7, lr}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800137a:	e015      	b.n	80013a8 <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 800137c:	6978      	ldr	r0, [r7, #20]
 800137e:	f7ff fea2 	bl	80010c6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001382:	4604      	mov	r4, r0
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f85d 	bl	8001448 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800138e:	4603      	mov	r3, r0
 8001390:	4619      	mov	r1, r3
 8001392:	4620      	mov	r0, r4
 8001394:	f000 f864 	bl	8001460 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f842 	bl	8001426 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3318      	adds	r3, #24
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	f107 0208 	add.w	r2, r7, #8
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f826 	bl	8001404 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1de      	bne.n	800137c <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x12>
	  return __cur;
 80013be:	697b      	ldr	r3, [r7, #20]
    }
 80013c0:	4618      	mov	r0, r3
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}

080013c8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f84f 	bl	800148e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f854 	bl	80014a4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>
	}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f85f 	bl	80014d4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8001416:	4603      	mov	r3, r0
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f103 0218 	add.w	r2, r3, #24
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
	return *this;
 800143a:	687b      	ldr	r3, [r7, #4]
      }
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4619      	mov	r1, r3
 800146e:	2018      	movs	r0, #24
 8001470:	f7ff f896 	bl	80005a0 <_ZnwjPv>
 8001474:	4604      	mov	r4, r0
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f000 f809 	bl	800148e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	4620      	mov	r0, r4
 8001482:	f011 fa87 	bl	8012994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}

0800148e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4619      	mov	r1, r3
 80014b4:	2018      	movs	r0, #24
 80014b6:	f7ff f873 	bl	80005a0 <_ZnwjPv>
 80014ba:	4604      	mov	r4, r0
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffe6 	bl	800148e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f011 fa64 	bl	8012994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}

080014d4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f80e 	bl	8001500 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80014e4:	4604      	mov	r4, r0
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f000 f80a 	bl	8001500 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	429c      	cmp	r4, r3
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f90e 	bl	8001742 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <setup>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "FAT32File.hpp"

void setup()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001536:	af00      	add	r7, sp, #0
		file.close();
	}

	*/
	using namespace VMB;
    FAT32File file;
 8001538:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f86b 	bl	8000618 <_ZN3VMB9FAT32FileC1Ev>

    // Open a file for writing
    if (file.open("test.txt", FA_WRITE | FA_CREATE_ALWAYS)) {
 8001542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001546:	220a      	movs	r2, #10
 8001548:	4960      	ldr	r1, [pc, #384]	@ (80016cc <setup+0x19c>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f8e9 	bl	8000722 <_ZN3VMB9FAT32File4openEPKci>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d013      	beq.n	800157e <setup+0x4e>
        printf("File opened for writing\n");
 8001556:	485e      	ldr	r0, [pc, #376]	@ (80016d0 <setup+0x1a0>)
 8001558:	f011 fd46 	bl	8012fe8 <puts>
        file.write("Hello, FATFS!");
 800155c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001560:	495c      	ldr	r1, [pc, #368]	@ (80016d4 <setup+0x1a4>)
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f944 	bl	80007f0 <_ZN3VMB9FAT32File5writeEPKc>
        file.flush();
 8001568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f986 	bl	800087e <_ZN3VMB9FAT32File5flushEv>
        file.close();
 8001572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f90c 	bl	8000794 <_ZN3VMB9FAT32File5closeEv>
 800157c:	e002      	b.n	8001584 <setup+0x54>
    }
    else {
        printf("Failed to open file for writing\n");
 800157e:	4856      	ldr	r0, [pc, #344]	@ (80016d8 <setup+0x1a8>)
 8001580:	f011 fd32 	bl	8012fe8 <puts>
    }

    // Open the same file for reading
    if (file.open("test.txt", FA_READ)) {
 8001584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001588:	2201      	movs	r2, #1
 800158a:	4950      	ldr	r1, [pc, #320]	@ (80016cc <setup+0x19c>)
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f8c8 	bl	8000722 <_ZN3VMB9FAT32File4openEPKci>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01f      	beq.n	80015d8 <setup+0xa8>
        char buffer[20] = { 0 };
 8001598:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800159c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
        file.read(buffer, sizeof(buffer) - 1);
 80015b0:	f107 0108 	add.w	r1, r7, #8
 80015b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b8:	2213      	movs	r2, #19
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f93d 	bl	800083a <_ZN3VMB9FAT32File4readEPcj>
        printf("Read from file: %s\n", buffer);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4619      	mov	r1, r3
 80015c6:	4845      	ldr	r0, [pc, #276]	@ (80016dc <setup+0x1ac>)
 80015c8:	f011 fca6 	bl	8012f18 <iprintf>
        file.close();
 80015cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f8df 	bl	8000794 <_ZN3VMB9FAT32File5closeEv>
 80015d6:	e002      	b.n	80015de <setup+0xae>
    }
    else {
        printf("Failed to open file for reading\n");
 80015d8:	4841      	ldr	r0, [pc, #260]	@ (80016e0 <setup+0x1b0>)
 80015da:	f011 fd05 	bl	8012fe8 <puts>
    }

    // Check if file exists
    if (FAT32File::exists("test.txt")) {
 80015de:	483b      	ldr	r0, [pc, #236]	@ (80016cc <setup+0x19c>)
 80015e0:	f7ff f995 	bl	800090e <_ZN3VMB9FAT32File6existsEPKc>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <setup+0xc2>
        printf("File exists!\n");
 80015ea:	483e      	ldr	r0, [pc, #248]	@ (80016e4 <setup+0x1b4>)
 80015ec:	f011 fcfc 	bl	8012fe8 <puts>
 80015f0:	e002      	b.n	80015f8 <setup+0xc8>
    }
    else {
        printf("File does not exist\n");
 80015f2:	483d      	ldr	r0, [pc, #244]	@ (80016e8 <setup+0x1b8>)
 80015f4:	f011 fcf8 	bl	8012fe8 <puts>
    }

    // Rename the file
    if (FAT32File::rename("test.txt", "renamed.txt")) {
 80015f8:	493c      	ldr	r1, [pc, #240]	@ (80016ec <setup+0x1bc>)
 80015fa:	4834      	ldr	r0, [pc, #208]	@ (80016cc <setup+0x19c>)
 80015fc:	f7ff f974 	bl	80008e8 <_ZN3VMB9FAT32File6renameEPKcS2_>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <setup+0xde>
        printf("File renamed successfully\n");
 8001606:	483a      	ldr	r0, [pc, #232]	@ (80016f0 <setup+0x1c0>)
 8001608:	f011 fcee 	bl	8012fe8 <puts>
 800160c:	e002      	b.n	8001614 <setup+0xe4>
    }
    else {
        printf("Failed to rename file\n");
 800160e:	4839      	ldr	r0, [pc, #228]	@ (80016f4 <setup+0x1c4>)
 8001610:	f011 fcea 	bl	8012fe8 <puts>
    }

    // Delete the file
    if (FAT32File::remove("renamed.txt")) {
 8001614:	4835      	ldr	r0, [pc, #212]	@ (80016ec <setup+0x1bc>)
 8001616:	f7ff f956 	bl	80008c6 <_ZN3VMB9FAT32File6removeEPKc>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <setup+0xf8>
        printf("File deleted successfully\n");
 8001620:	4835      	ldr	r0, [pc, #212]	@ (80016f8 <setup+0x1c8>)
 8001622:	f011 fce1 	bl	8012fe8 <puts>
 8001626:	e002      	b.n	800162e <setup+0xfe>
    }
    else {
        printf("Failed to delete file\n");
 8001628:	4834      	ldr	r0, [pc, #208]	@ (80016fc <setup+0x1cc>)
 800162a:	f011 fcdd 	bl	8012fe8 <puts>
    }

    // List files in root directory
    printf("Listing root directory:\n");
 800162e:	4834      	ldr	r0, [pc, #208]	@ (8001700 <setup+0x1d0>)
 8001630:	f011 fcda 	bl	8012fe8 <puts>
    std::vector<std::string> files = FAT32File::listDirectory("/");
 8001634:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001638:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800163c:	4931      	ldr	r1, [pc, #196]	@ (8001704 <setup+0x1d4>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f993 	bl	800096a <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>
    for (const auto& name : files) {
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800164c:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001650:	f7ff fc01 	bl	8000e56 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001654:	4602      	mov	r2, r0
 8001656:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800165a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001664:	f7ff fa65 	bl	8000b32 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8001668:	4602      	mov	r2, r0
 800166a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800166e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e012      	b.n	800169c <setup+0x16c>
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f8b6 	bl	80017ea <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 800167e:	f8c7 0280 	str.w	r0, [r7, #640]	@ 0x280
        printf(" - %s\n", name.c_str());
 8001682:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 8001686:	f011 fa80 	bl	8012b8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	481e      	ldr	r0, [pc, #120]	@ (8001708 <setup+0x1d8>)
 8001690:	f011 fc42 	bl	8012f18 <iprintf>
    for (const auto& name : files) {
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f896 	bl	80017c8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 800169c:	463a      	mov	r2, r7
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f878 	bl	8001798 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e3      	bne.n	8001676 <setup+0x146>
    }
}
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f82a 	bl	800170c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80016b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f807 	bl	80006d0 <_ZN3VMB9FAT32FileD1Ev>
 80016c2:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08013c64 	.word	0x08013c64
 80016d0:	08013c70 	.word	0x08013c70
 80016d4:	08013c88 	.word	0x08013c88
 80016d8:	08013c98 	.word	0x08013c98
 80016dc:	08013cb8 	.word	0x08013cb8
 80016e0:	08013ccc 	.word	0x08013ccc
 80016e4:	08013cec 	.word	0x08013cec
 80016e8:	08013cfc 	.word	0x08013cfc
 80016ec:	08013d10 	.word	0x08013d10
 80016f0:	08013d1c 	.word	0x08013d1c
 80016f4:	08013d38 	.word	0x08013d38
 80016f8:	08013d50 	.word	0x08013d50
 80016fc:	08013d6c 	.word	0x08013d6c
 8001700:	08013d84 	.word	0x08013d84
 8001704:	08013d9c 	.word	0x08013d9c
 8001708:	08013da0 	.word	0x08013da0

0800170c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681c      	ldr	r4, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f9d0 	bl	8000ac4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001724:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001726:	461a      	mov	r2, r3
 8001728:	4629      	mov	r1, r5
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff f9d5 	bl	8000ada <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f812 	bl	800175c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bdb0      	pop	{r4, r5, r7, pc}

08001742 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f859 	bl	8001802 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	10db      	asrs	r3, r3, #3
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8001776:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800177a:	461a      	mov	r2, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff f98e 	bl	8000a9e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fec7 	bl	8001518 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	aaaaaaab 	.word	0xaaaaaaab

08001798 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fbaa 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80017a8:	4603      	mov	r3, r0
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f7ff fba5 	bl	8000efc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	429c      	cmp	r4, r3
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	++_M_current;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f103 0218 	add.w	r2, r3, #24
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	601a      	str	r2, [r3, #0]
	return *this;
 80017dc:	687b      	ldr	r3, [r7, #4]
      }
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181c:	f001 fce4 	bl	80031e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001820:	f000 f82a 	bl	8001878 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001824:	f000 f89a 	bl	800195c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001828:	f000 fcaa 	bl	8002180 <MX_GPIO_Init>
  MX_DMA_Init();
 800182c:	f000 fc30 	bl	8002090 <MX_DMA_Init>
  MX_CRC_Init();
 8001830:	f000 f8c0 	bl	80019b4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001834:	f000 f8d2 	bl	80019dc <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001838:	f000 f902 	bl	8001a40 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800183c:	f000 fc50 	bl	80020e0 <MX_FMC_Init>
  MX_I2C1_Init();
 8001840:	f000 f9fe 	bl	8001c40 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001844:	f000 fa2a 	bl	8001c9c <MX_I2C2_Init>
  MX_LTDC_Init();
 8001848:	f000 fa56 	bl	8001cf8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800184c:	f000 fad2 	bl	8001df4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001850:	f000 fafc 	bl	8001e4c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001854:	f000 fb58 	bl	8001f08 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001858:	f000 fb76 	bl	8001f48 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800185c:	f000 fbc4 	bl	8001fe8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001860:	f000 fbec 	bl	800203c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001864:	f00b fba6 	bl	800cfb4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001868:	f010 fcfc 	bl	8012264 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800186c:	f7ff fe60 	bl	8001530 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001870:	f010 fd1e 	bl	80122b0 <MX_USB_HOST_Process>
 8001874:	e7fc      	b.n	8001870 <main+0x58>
	...

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	@ 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	2234      	movs	r2, #52	@ 0x34
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f011 fca8 	bl	80131dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <SystemClock_Config+0xdc>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <SystemClock_Config+0xdc>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ac:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <SystemClock_Config+0xdc>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <SystemClock_Config+0xe0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <SystemClock_Config+0xe0>)
 80018c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <SystemClock_Config+0xe0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018de:	2302      	movs	r3, #2
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018e8:	2304      	movs	r3, #4
 80018ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018ec:	23b4      	movs	r3, #180	@ 0xb4
 80018ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f0:	2302      	movs	r3, #2
 80018f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80018f4:	2306      	movs	r3, #6
 80018f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80018f8:	2306      	movs	r3, #6
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4618      	mov	r0, r3
 8001902:	f006 fec7 	bl	8008694 <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800190c:	f000 fdd6 	bl	80024bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001910:	f006 f91e 	bl	8007b50 <HAL_PWREx_EnableOverDrive>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800191a:	f000 fdcf 	bl	80024bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001922:	2302      	movs	r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800192a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001934:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2105      	movs	r1, #5
 800193c:	4618      	mov	r0, r3
 800193e:	f006 fa19 	bl	8007d74 <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001948:	f000 fdb8 	bl	80024bc <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3750      	adds	r7, #80	@ 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b090      	sub	sp, #64	@ 0x40
 8001960:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	223c      	movs	r2, #60	@ 0x3c
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f011 fc37 	bl	80131dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800196e:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8001972:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8001974:	2390      	movs	r3, #144	@ 0x90
 8001976:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001978:	2302      	movs	r3, #2
 800197a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800197c:	2302      	movs	r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8001980:	2306      	movs	r3, #6
 8001982:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001988:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800198e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001992:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f006 fc3c 	bl	8008218 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80019a6:	f000 fd89 	bl	80024bc <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3740      	adds	r7, #64	@ 0x40
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_CRC_Init+0x20>)
 80019ba:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <MX_CRC_Init+0x24>)
 80019bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_CRC_Init+0x20>)
 80019c0:	f001 fd5a 	bl	8003478 <HAL_CRC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80019ca:	f000 fd77 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002d8 	.word	0x200002d8
 80019d8:	40023000 	.word	0x40023000

080019dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 80019e2:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <MX_DMA2D_Init+0x60>)
 80019e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80019e6:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a10:	4809      	ldr	r0, [pc, #36]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 8001a12:	f002 f8eb 	bl	8003bec <HAL_DMA2D_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001a1c:	f000 fd4e 	bl	80024bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a20:	2101      	movs	r1, #1
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <MX_DMA2D_Init+0x5c>)
 8001a24:	f002 fa3c 	bl	8003ea0 <HAL_DMA2D_ConfigLayer>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001a2e:	f000 fd45 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002e0 	.word	0x200002e0
 8001a3c:	4002b000 	.word	0x4002b000

08001a40 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0aa      	sub	sp, #168	@ 0xa8
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001a46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001a52:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001a56:	2224      	movs	r2, #36	@ 0x24
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f011 fbbe 	bl	80131dc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001a60:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001a72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a76:	2234      	movs	r2, #52	@ 0x34
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f011 fbae 	bl	80131dc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	222c      	movs	r2, #44	@ 0x2c
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f011 fba8 	bl	80131dc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001a8e:	4a6b      	ldr	r2, [pc, #428]	@ (8001c3c <MX_DSIHOST_DSI_Init+0x1fc>)
 8001a90:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001a92:	4b69      	ldr	r3, [pc, #420]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001a98:	4b67      	ldr	r3, [pc, #412]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001a9e:	4b66      	ldr	r3, [pc, #408]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001aa4:	237d      	movs	r3, #125	@ 0x7d
 8001aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001ab6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aba:	4619      	mov	r1, r3
 8001abc:	485e      	ldr	r0, [pc, #376]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001abe:	f002 fa81 	bl	8003fc4 <HAL_DSI_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f000 fcf8 	bl	80024bc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001afe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b02:	4619      	mov	r1, r3
 8001b04:	484c      	ldr	r0, [pc, #304]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001b06:	f002 ff71 	bl	80049ec <HAL_DSI_ConfigHostTimeouts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8001b10:	f000 fcd4 	bl	80024bc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001b14:	231c      	movs	r3, #28
 8001b16:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001b18:	2321      	movs	r3, #33	@ 0x21
 8001b1a:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8001b20:	2319      	movs	r3, #25
 8001b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8001b28:	230a      	movs	r3, #10
 8001b2a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001b2c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b30:	4619      	mov	r1, r3
 8001b32:	4841      	ldr	r0, [pc, #260]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001b34:	f002 fef0 	bl	8004918 <HAL_DSI_ConfigPhyTimer>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8001b3e:	f000 fcbd 	bl	80024bc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001b42:	2104      	movs	r1, #4
 8001b44:	483c      	ldr	r0, [pc, #240]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001b46:	f002 febf 	bl	80048c8 <HAL_DSI_ConfigFlowControl>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8001b50:	f000 fcb4 	bl	80024bc <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001b54:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b58:	4837      	ldr	r0, [pc, #220]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001b5a:	f003 f80d 	bl	8004b78 <HAL_DSI_SetLowPowerRXFilter>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001b64:	f000 fcaa 	bl	80024bc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4833      	ldr	r0, [pc, #204]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001b6c:	f002 fbaa 	bl	80042c4 <HAL_DSI_ConfigErrorMonitor>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001b76:	f000 fca1 	bl	80024bc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8001b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b84:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8001b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001b8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8001b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001b98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b9c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8001b9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8001baa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001bb0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bb4:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8001bb6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001bba:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8001bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	481a      	ldr	r0, [pc, #104]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001bce:	f002 fe1d 	bl	800480c <HAL_DSI_ConfigCommand>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8001bd8:	f000 fc70 	bl	80024bc <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8001be0:	2305      	movs	r3, #5
 8001be2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001be4:	23c8      	movs	r3, #200	@ 0xc8
 8001be6:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001be8:	2310      	movs	r3, #16
 8001bea:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001c00:	2340      	movs	r3, #64	@ 0x40
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c0e:	f002 fd25 	bl	800465c <HAL_DSI_ConfigAdaptedCommandMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8001c18:	f000 fc50 	bl	80024bc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c20:	f002 fcf4 	bl	800460c <HAL_DSI_SetGenericVCID>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8001c2a:	f000 fc47 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	37a8      	adds	r7, #168	@ 0xa8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000320 	.word	0x20000320
 8001c3c:	40016c00 	.word	0x40016c00

08001c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c46:	4a13      	ldr	r2, [pc, #76]	@ (8001c94 <MX_I2C1_Init+0x54>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c4c:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <MX_I2C1_Init+0x58>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7c:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <MX_I2C1_Init+0x50>)
 8001c7e:	f005 fabb 	bl	80071f8 <HAL_I2C_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c88:	f000 fc18 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000033c 	.word	0x2000033c
 8001c94:	40005400 	.word	0x40005400
 8001c98:	000186a0 	.word	0x000186a0

08001c9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001ca2:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <MX_I2C2_Init+0x54>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001ca8:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <MX_I2C2_Init+0x58>)
 8001caa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cbe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <MX_I2C2_Init+0x50>)
 8001cda:	f005 fa8d 	bl	80071f8 <HAL_I2C_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ce4:	f000 fbea 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000390 	.word	0x20000390
 8001cf0:	40005800 	.word	0x40005800
 8001cf4:	000186a0 	.word	0x000186a0

08001cf8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	@ 0x38
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2234      	movs	r2, #52	@ 0x34
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f011 fa69 	bl	80131dc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001d0a:	4b38      	ldr	r3, [pc, #224]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d0c:	4a38      	ldr	r2, [pc, #224]	@ (8001df0 <MX_LTDC_Init+0xf8>)
 8001d0e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d16:	4b35      	ldr	r3, [pc, #212]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d22:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001d28:	4b30      	ldr	r3, [pc, #192]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8001d40:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d42:	22c9      	movs	r2, #201	@ 0xc9
 8001d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d48:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8001d4e:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d50:	22ca      	movs	r2, #202	@ 0xca
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d56:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d5c:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d64:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d74:	481d      	ldr	r0, [pc, #116]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001d76:	f005 fb83 	bl	8007480 <HAL_LTDC_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001d80:	f000 fb9c 	bl	80024bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001d88:	23c8      	movs	r3, #200	@ 0xc8
 8001d8a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001d90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d94:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001d96:	2302      	movs	r3, #2
 8001d98:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001d9a:	23ff      	movs	r3, #255	@ 0xff
 8001d9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001da2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001da6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001da8:	2307      	movs	r3, #7
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001dac:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8001db2:	23c8      	movs	r3, #200	@ 0xc8
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001db6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_LTDC_Init+0xf4>)
 8001dd6:	f005 fce5 	bl	80077a4 <HAL_LTDC_ConfigLayer>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001de0:	f000 fb6c 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3738      	adds	r7, #56	@ 0x38
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200003e4 	.word	0x200003e4
 8001df0:	40016800 	.word	0x40016800

08001df4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001dfa:	4a13      	ldr	r2, [pc, #76]	@ (8001e48 <MX_QUADSPI_Init+0x54>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e12:	2218      	movs	r2, #24
 8001e14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001e30:	4804      	ldr	r0, [pc, #16]	@ (8001e44 <MX_QUADSPI_Init+0x50>)
 8001e32:	f005 fedd 	bl	8007bf0 <HAL_QSPI_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001e3c:	f000 fb3e 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000048c 	.word	0x2000048c
 8001e48:	a0001000 	.word	0xa0001000

08001e4c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001e50:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e52:	4a2b      	ldr	r2, [pc, #172]	@ (8001f00 <MX_SAI1_Init+0xb4>)
 8001e54:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e56:	4b29      	ldr	r3, [pc, #164]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001e62:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e64:	2240      	movs	r2, #64	@ 0x40
 8001e66:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e68:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e6e:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e94:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <MX_SAI1_Init+0xb8>)
 8001e96:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_SAI1_Init+0xb0>)
 8001ee8:	f006 fe58 	bl	8008b9c <HAL_SAI_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8001ef2:	f000 fae3 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200004d8 	.word	0x200004d8
 8001f00:	40015804 	.word	0x40015804
 8001f04:	0002ee00 	.word	0x0002ee00

08001f08 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <MX_SDIO_SD_Init+0x3c>)
 8001f10:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <MX_SDIO_SD_Init+0x38>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000560 	.word	0x20000560
 8001f44:	40012c00 	.word	0x40012c00

08001f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f64:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f66:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe4 <MX_TIM1_Init+0x9c>)
 8001f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f84:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f90:	4813      	ldr	r0, [pc, #76]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001f92:	f008 f97b 	bl	800a28c <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f9c:	f000 fa8e 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4619      	mov	r1, r3
 8001fac:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001fae:	f008 fb1d 	bl	800a5ec <HAL_TIM_ConfigClockSource>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001fb8:	f000 fa80 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <MX_TIM1_Init+0x98>)
 8001fca:	f008 fd45 	bl	800aa58 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fd4:	f000 fa72 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200006a4 	.word	0x200006a4
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <MX_USART3_UART_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_USART3_UART_Init+0x4c>)
 8002020:	f008 fdaa 	bl	800ab78 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 fa47 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200006ec 	.word	0x200006ec
 8002038:	40004800 	.word	0x40004800

0800203c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_USART6_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_USART6_UART_Init+0x4c>)
 8002074:	f008 fd80 	bl	800ab78 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 fa1d 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000734 	.word	0x20000734
 800208c:	40011400 	.word	0x40011400

08002090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_DMA_Init+0x4c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <MX_DMA_Init+0x4c>)
 80020a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_DMA_Init+0x4c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	203b      	movs	r0, #59	@ 0x3b
 80020b8:	f001 f9b4 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020bc:	203b      	movs	r0, #59	@ 0x3b
 80020be:	f001 f9cd 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2045      	movs	r0, #69	@ 0x45
 80020c8:	f001 f9ac 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80020cc:	2045      	movs	r0, #69	@ 0x45
 80020ce:	f001 f9c5 	bl	800345c <HAL_NVIC_EnableIRQ>

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <MX_FMC_Init+0x98>)
 80020fa:	4a20      	ldr	r2, [pc, #128]	@ (800217c <MX_FMC_Init+0x9c>)
 80020fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <MX_FMC_Init+0x98>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <MX_FMC_Init+0x98>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <MX_FMC_Init+0x98>)
 800210c:	2204      	movs	r2, #4
 800210e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <MX_FMC_Init+0x98>)
 8002112:	2220      	movs	r2, #32
 8002114:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_FMC_Init+0x98>)
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <MX_FMC_Init+0x98>)
 800211e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002122:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <MX_FMC_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800212a:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <MX_FMC_Init+0x98>)
 800212c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002130:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_FMC_Init+0x98>)
 8002134:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800213a:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <MX_FMC_Init+0x98>)
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002140:	2302      	movs	r3, #2
 8002142:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002144:	2307      	movs	r3, #7
 8002146:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002148:	2304      	movs	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800214c:	2307      	movs	r3, #7
 800214e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002150:	2303      	movs	r3, #3
 8002152:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002158:	2302      	movs	r3, #2
 800215a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_FMC_Init+0x98>)
 8002162:	f008 f85f 	bl	800a224 <HAL_SDRAM_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800216c:	f000 f9a6 	bl	80024bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000077c 	.word	0x2000077c
 800217c:	a0000140 	.word	0xa0000140

08002180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b090      	sub	sp, #64	@ 0x40
 8002184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800219a:	4bae      	ldr	r3, [pc, #696]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4aad      	ldr	r2, [pc, #692]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4bab      	ldr	r3, [pc, #684]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b6:	4ba7      	ldr	r3, [pc, #668]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4aa6      	ldr	r2, [pc, #664]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
 80021d2:	4ba0      	ldr	r3, [pc, #640]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a9f      	ldr	r2, [pc, #636]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b9d      	ldr	r3, [pc, #628]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	4b99      	ldr	r3, [pc, #612]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a98      	ldr	r2, [pc, #608]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b96      	ldr	r3, [pc, #600]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	4b92      	ldr	r3, [pc, #584]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a91      	ldr	r2, [pc, #580]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b8f      	ldr	r3, [pc, #572]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	4b8b      	ldr	r3, [pc, #556]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a8a      	ldr	r2, [pc, #552]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b84      	ldr	r3, [pc, #528]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a83      	ldr	r2, [pc, #524]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b81      	ldr	r3, [pc, #516]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b7d      	ldr	r3, [pc, #500]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a7c      	ldr	r2, [pc, #496]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002264:	f043 0320 	orr.w	r3, r3, #32
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b7a      	ldr	r3, [pc, #488]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a75      	ldr	r2, [pc, #468]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002280:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b73      	ldr	r3, [pc, #460]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	4b6f      	ldr	r3, [pc, #444]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a6e      	ldr	r2, [pc, #440]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 800229c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4b68      	ldr	r3, [pc, #416]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a67      	ldr	r2, [pc, #412]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80022b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b65      	ldr	r3, [pc, #404]	@ (8002454 <MX_GPIO_Init+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210c      	movs	r1, #12
 80022ce:	4862      	ldr	r0, [pc, #392]	@ (8002458 <MX_GPIO_Init+0x2d8>)
 80022d0:	f002 fe44 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2130      	movs	r1, #48	@ 0x30
 80022d8:	4860      	ldr	r0, [pc, #384]	@ (800245c <MX_GPIO_Init+0x2dc>)
 80022da:	f002 fe3f 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	2108      	movs	r1, #8
 80022e2:	485f      	ldr	r0, [pc, #380]	@ (8002460 <MX_GPIO_Init+0x2e0>)
 80022e4:	f002 fe3a 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2140      	movs	r1, #64	@ 0x40
 80022ec:	485d      	ldr	r0, [pc, #372]	@ (8002464 <MX_GPIO_Init+0x2e4>)
 80022ee:	f002 fe35 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2105      	movs	r1, #5
 80022f6:	485c      	ldr	r0, [pc, #368]	@ (8002468 <MX_GPIO_Init+0x2e8>)
 80022f8:	f002 fe30 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2180      	movs	r1, #128	@ 0x80
 8002300:	485a      	ldr	r0, [pc, #360]	@ (800246c <MX_GPIO_Init+0x2ec>)
 8002302:	f002 fe2b 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2108      	movs	r1, #8
 800230a:	4859      	ldr	r0, [pc, #356]	@ (8002470 <MX_GPIO_Init+0x2f0>)
 800230c:	f002 fe26 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8002310:	230c      	movs	r3, #12
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002324:	4619      	mov	r1, r3
 8002326:	484c      	ldr	r0, [pc, #304]	@ (8002458 <MX_GPIO_Init+0x2d8>)
 8002328:	f002 fc54 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800232c:	2308      	movs	r3, #8
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800233c:	2306      	movs	r3, #6
 800233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8002340:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002344:	4619      	mov	r1, r3
 8002346:	4848      	ldr	r0, [pc, #288]	@ (8002468 <MX_GPIO_Init+0x2e8>)
 8002348:	f002 fc44 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002350:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002354:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	4841      	ldr	r0, [pc, #260]	@ (8002468 <MX_GPIO_Init+0x2e8>)
 8002362:	f002 fc37 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002366:	2330      	movs	r3, #48	@ 0x30
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800236a:	2311      	movs	r3, #17
 800236c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800237a:	4619      	mov	r1, r3
 800237c:	4837      	ldr	r0, [pc, #220]	@ (800245c <MX_GPIO_Init+0x2dc>)
 800237e:	f002 fc29 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002382:	2308      	movs	r3, #8
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002386:	2311      	movs	r3, #17
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	4831      	ldr	r0, [pc, #196]	@ (8002460 <MX_GPIO_Init+0x2e0>)
 800239a:	f002 fc1b 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800239e:	2340      	movs	r3, #64	@ 0x40
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023a2:	2311      	movs	r3, #17
 80023a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b2:	4619      	mov	r1, r3
 80023b4:	482b      	ldr	r0, [pc, #172]	@ (8002464 <MX_GPIO_Init+0x2e4>)
 80023b6:	f002 fc0d 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80023ba:	2305      	movs	r3, #5
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023be:	2301      	movs	r3, #1
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ce:	4619      	mov	r1, r3
 80023d0:	4825      	ldr	r0, [pc, #148]	@ (8002468 <MX_GPIO_Init+0x2e8>)
 80023d2:	f002 fbff 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80023d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023e8:	2302      	movs	r3, #2
 80023ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f0:	4619      	mov	r1, r3
 80023f2:	481a      	ldr	r0, [pc, #104]	@ (800245c <MX_GPIO_Init+0x2dc>)
 80023f4:	f002 fbee 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80023f8:	2304      	movs	r3, #4
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fc:	2300      	movs	r3, #0
 80023fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002408:	4619      	mov	r1, r3
 800240a:	4816      	ldr	r0, [pc, #88]	@ (8002464 <MX_GPIO_Init+0x2e4>)
 800240c:	f002 fbe2 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002410:	2320      	movs	r3, #32
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002414:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002418:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	4813      	ldr	r0, [pc, #76]	@ (8002474 <MX_GPIO_Init+0x2f4>)
 8002426:	f002 fbd5 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800243a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243e:	4619      	mov	r1, r3
 8002440:	480a      	ldr	r0, [pc, #40]	@ (800246c <MX_GPIO_Init+0x2ec>)
 8002442:	f002 fbc7 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002446:	2308      	movs	r3, #8
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	e012      	b.n	8002478 <MX_GPIO_Init+0x2f8>
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40021000 	.word	0x40021000
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40022800 	.word	0x40022800
 8002464:	40021800 	.word	0x40021800
 8002468:	40020400 	.word	0x40020400
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40020000 	.word	0x40020000
 8002474:	40022400 	.word	0x40022400
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002482:	4619      	mov	r1, r3
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <MX_GPIO_Init+0x314>)
 8002486:	f002 fba5 	bl	8004bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800248a:	bf00      	nop
 800248c:	3740      	adds	r7, #64	@ 0x40
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40020000 	.word	0x40020000

08002498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a04      	ldr	r2, [pc, #16]	@ (80024b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024aa:	f000 febf 	bl	800322c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40001000 	.word	0x40001000

080024bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <Error_Handler+0x8>

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_MspInit+0x58>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <HAL_MspInit+0x58>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <HAL_MspInit+0x58>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <HAL_MspInit+0x58>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <HAL_MspInit+0x58>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_MspInit+0x58>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2005      	movs	r0, #5
 800250c:	f000 ff8a 	bl	8003424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002510:	2005      	movs	r0, #5
 8002512:	f000 ffa3 	bl	800345c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <HAL_CRC_MspInit+0x3c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10d      	bne.n	8002552 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_CRC_MspInit+0x40>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_CRC_MspInit+0x40>)
 8002540:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <HAL_CRC_MspInit+0x40>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40023000 	.word	0x40023000
 8002564:	40023800 	.word	0x40023800

08002568 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <HAL_DMA2D_MspInit+0x48>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d115      	bne.n	80025a6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_DMA2D_MspInit+0x4c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <HAL_DMA2D_MspInit+0x4c>)
 8002584:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_DMA2D_MspInit+0x4c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	205a      	movs	r0, #90	@ 0x5a
 800259c:	f000 ff42 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80025a0:	205a      	movs	r0, #90	@ 0x5a
 80025a2:	f000 ff5b 	bl	800345c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	4002b000 	.word	0x4002b000
 80025b4:	40023800 	.word	0x40023800

080025b8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <HAL_DSI_MspInit+0x94>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d133      	bne.n	8002642 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <HAL_DSI_MspInit+0x98>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_DSI_MspInit+0x98>)
 80025e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_DSI_MspInit+0x98>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_DSI_MspInit+0x98>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <HAL_DSI_MspInit+0x98>)
 8002600:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_DSI_MspInit+0x98>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8002612:	2304      	movs	r3, #4
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002622:	230d      	movs	r3, #13
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4809      	ldr	r0, [pc, #36]	@ (8002654 <HAL_DSI_MspInit+0x9c>)
 800262e:	f002 fad1 	bl	8004bd4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	205c      	movs	r0, #92	@ 0x5c
 8002638:	f000 fef4 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800263c:	205c      	movs	r0, #92	@ 0x5c
 800263e:	f000 ff0d 	bl	800345c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	@ 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40016c00 	.word	0x40016c00
 8002650:	40023800 	.word	0x40023800
 8002654:	40022400 	.word	0x40022400

08002658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	@ 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a32      	ldr	r2, [pc, #200]	@ (8002740 <HAL_I2C_MspInit+0xe8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12d      	bne.n	80026d6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	4b31      	ldr	r3, [pc, #196]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a30      	ldr	r2, [pc, #192]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002696:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800269c:	2312      	movs	r3, #18
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026a8:	2304      	movs	r3, #4
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4825      	ldr	r0, [pc, #148]	@ (8002748 <HAL_I2C_MspInit+0xf0>)
 80026b4:	f002 fa8e 	bl	8004bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	4a20      	ldr	r2, [pc, #128]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 80026c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026d4:	e030      	b.n	8002738 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	@ (800274c <HAL_I2C_MspInit+0xf4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d12b      	bne.n	8002738 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 80026ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f0:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80026fc:	2330      	movs	r3, #48	@ 0x30
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002700:	2312      	movs	r3, #18
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800270c:	2304      	movs	r3, #4
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	480e      	ldr	r0, [pc, #56]	@ (8002750 <HAL_I2C_MspInit+0xf8>)
 8002718:	f002 fa5c 	bl	8004bd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 8002726:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800272a:	6413      	str	r3, [r2, #64]	@ 0x40
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_I2C_MspInit+0xec>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	bf00      	nop
 800273a:	3730      	adds	r7, #48	@ 0x30
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40005400 	.word	0x40005400
 8002744:	40023800 	.word	0x40023800
 8002748:	40020400 	.word	0x40020400
 800274c:	40005800 	.word	0x40005800
 8002750:	40021c00 	.word	0x40021c00

08002754 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0e      	ldr	r2, [pc, #56]	@ (800279c <HAL_LTDC_MspInit+0x48>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d115      	bne.n	8002792 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <HAL_LTDC_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a0c      	ldr	r2, [pc, #48]	@ (80027a0 <HAL_LTDC_MspInit+0x4c>)
 8002770:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_LTDC_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2058      	movs	r0, #88	@ 0x58
 8002788:	f000 fe4c 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800278c:	2058      	movs	r0, #88	@ 0x58
 800278e:	f000 fe65 	bl	800345c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40016800 	.word	0x40016800
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <HAL_QSPI_MspInit+0xe4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d15b      	bne.n	800287e <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b30      	ldr	r3, [pc, #192]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 80027cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ce:	4a2f      	ldr	r2, [pc, #188]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80027d6:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a28      	ldr	r2, [pc, #160]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b22      	ldr	r3, [pc, #136]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a21      	ldr	r2, [pc, #132]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <HAL_QSPI_MspInit+0xe8>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800281a:	2340      	movs	r3, #64	@ 0x40
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800282a:	230a      	movs	r3, #10
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4816      	ldr	r0, [pc, #88]	@ (8002890 <HAL_QSPI_MspInit+0xec>)
 8002836:	f002 f9cd 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800283a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800284c:	2309      	movs	r3, #9
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	480f      	ldr	r0, [pc, #60]	@ (8002894 <HAL_QSPI_MspInit+0xf0>)
 8002858:	f002 f9bc 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800285c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800286e:	230a      	movs	r3, #10
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	4806      	ldr	r0, [pc, #24]	@ (8002894 <HAL_QSPI_MspInit+0xf0>)
 800287a:	f002 f9ab 	bl	8004bd4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	@ 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	a0001000 	.word	0xa0001000
 800288c:	40023800 	.word	0x40023800
 8002890:	40020400 	.word	0x40020400
 8002894:	40021400 	.word	0x40021400

08002898 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a68      	ldr	r2, [pc, #416]	@ (8002a58 <HAL_SD_MspInit+0x1c0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f040 80c9 	bne.w	8002a4e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	4b66      	ldr	r3, [pc, #408]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	4a65      	ldr	r2, [pc, #404]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80028cc:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4b5f      	ldr	r3, [pc, #380]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	4a5e      	ldr	r2, [pc, #376]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	4b58      	ldr	r3, [pc, #352]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	4a57      	ldr	r2, [pc, #348]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	6313      	str	r3, [r2, #48]	@ 0x30
 8002904:	4b55      	ldr	r3, [pc, #340]	@ (8002a5c <HAL_SD_MspInit+0x1c4>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8002910:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002914:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002922:	230c      	movs	r3, #12
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	484c      	ldr	r0, [pc, #304]	@ (8002a60 <HAL_SD_MspInit+0x1c8>)
 800292e:	f002 f951 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002932:	2304      	movs	r3, #4
 8002934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002942:	230c      	movs	r3, #12
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	4845      	ldr	r0, [pc, #276]	@ (8002a64 <HAL_SD_MspInit+0x1cc>)
 800294e:	f002 f941 	bl	8004bd4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002952:	4b45      	ldr	r3, [pc, #276]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002954:	4a45      	ldr	r2, [pc, #276]	@ (8002a6c <HAL_SD_MspInit+0x1d4>)
 8002956:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002958:	4b43      	ldr	r3, [pc, #268]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 800295a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800295e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002960:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002966:	4b40      	ldr	r3, [pc, #256]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800296c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 800296e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002972:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002974:	4b3c      	ldr	r3, [pc, #240]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002976:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800297a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800297c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 800297e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002982:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002984:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002986:	2220      	movs	r2, #32
 8002988:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800298a:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002992:	2204      	movs	r2, #4
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002996:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 8002998:	2203      	movs	r2, #3
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800299c:	4b32      	ldr	r3, [pc, #200]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 800299e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80029a4:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 80029a6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80029ac:	482e      	ldr	r0, [pc, #184]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 80029ae:	f000 fd7f 	bl	80034b0 <HAL_DMA_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80029b8:	f7ff fd80 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a2a      	ldr	r2, [pc, #168]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80029c2:	4a29      	ldr	r2, [pc, #164]	@ (8002a68 <HAL_SD_MspInit+0x1d0>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80029c8:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002a74 <HAL_SD_MspInit+0x1dc>)
 80029cc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80029ce:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029d4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d6:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029ea:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029f0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029f8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80029fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 80029fc:	2220      	movs	r2, #32
 80029fe:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a08:	2204      	movs	r2, #4
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a0e:	2203      	movs	r2, #3
 8002a10:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002a12:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a1c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a20:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002a22:	4813      	ldr	r0, [pc, #76]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a24:	f000 fd44 	bl	80034b0 <HAL_DMA_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002a2e:	f7ff fd45 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a38:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <HAL_SD_MspInit+0x1d8>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	2031      	movs	r0, #49	@ 0x31
 8002a44:	f000 fcee 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002a48:	2031      	movs	r0, #49	@ 0x31
 8002a4a:	f000 fd07 	bl	800345c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	@ 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	200005e4 	.word	0x200005e4
 8002a6c:	40026458 	.word	0x40026458
 8002a70:	20000644 	.word	0x20000644
 8002a74:	400264a0 	.word	0x400264a0

08002a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x3c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x40>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x40>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x40>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	@ 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a33      	ldr	r2, [pc, #204]	@ (8002ba8 <HAL_UART_MspInit+0xec>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12d      	bne.n	8002b3a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	4b32      	ldr	r3, [pc, #200]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a31      	ldr	r2, [pc, #196]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b2f      	ldr	r3, [pc, #188]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	4619      	mov	r1, r3
 8002b32:	481f      	ldr	r0, [pc, #124]	@ (8002bb0 <HAL_UART_MspInit+0xf4>)
 8002b34:	f002 f84e 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b38:	e031      	b.n	8002b9e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <HAL_UART_MspInit+0xf8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d12c      	bne.n	8002b9e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	4a17      	ldr	r2, [pc, #92]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b4e:	f043 0320 	orr.w	r3, r3, #32
 8002b52:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b54:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	4a10      	ldr	r2, [pc, #64]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_UART_MspInit+0xf0>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8002b7c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b8e:	2308      	movs	r3, #8
 8002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4619      	mov	r1, r3
 8002b98:	4807      	ldr	r0, [pc, #28]	@ (8002bb8 <HAL_UART_MspInit+0xfc>)
 8002b9a:	f002 f81b 	bl	8004bd4 <HAL_GPIO_Init>
}
 8002b9e:	bf00      	nop
 8002ba0:	3730      	adds	r7, #48	@ 0x30
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40011400 	.word	0x40011400
 8002bb8:	40021800 	.word	0x40021800

08002bbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002bd0:	4b44      	ldr	r3, [pc, #272]	@ (8002ce4 <HAL_FMC_MspInit+0x128>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 8081 	bne.w	8002cdc <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8002bda:	4b42      	ldr	r3, [pc, #264]	@ (8002ce4 <HAL_FMC_MspInit+0x128>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_FMC_MspInit+0x12c>)
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ce8 <HAL_FMC_MspInit+0x12c>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <HAL_FMC_MspInit+0x12c>)
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8002bfc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002c00:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c0e:	230c      	movs	r3, #12
 8002c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4835      	ldr	r0, [pc, #212]	@ (8002cec <HAL_FMC_MspInit+0x130>)
 8002c18:	f001 ffdc 	bl	8004bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8002c1c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002c20:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c2e:	230c      	movs	r3, #12
 8002c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	482e      	ldr	r0, [pc, #184]	@ (8002cf0 <HAL_FMC_MspInit+0x134>)
 8002c38:	f001 ffcc 	bl	8004bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8002c3c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c40:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c4e:	230c      	movs	r3, #12
 8002c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4827      	ldr	r0, [pc, #156]	@ (8002cf4 <HAL_FMC_MspInit+0x138>)
 8002c58:	f001 ffbc 	bl	8004bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002c5c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002c60:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6e:	230c      	movs	r3, #12
 8002c70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4820      	ldr	r0, [pc, #128]	@ (8002cf8 <HAL_FMC_MspInit+0x13c>)
 8002c78:	f001 ffac 	bl	8004bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002c7c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002c80:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4819      	ldr	r0, [pc, #100]	@ (8002cfc <HAL_FMC_MspInit+0x140>)
 8002c98:	f001 ff9c 	bl	8004bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8002c9c:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8002ca0:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cae:	230c      	movs	r3, #12
 8002cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4812      	ldr	r0, [pc, #72]	@ (8002d00 <HAL_FMC_MspInit+0x144>)
 8002cb8:	f001 ff8c 	bl	8004bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ccc:	230c      	movs	r3, #12
 8002cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480b      	ldr	r0, [pc, #44]	@ (8002d04 <HAL_FMC_MspInit+0x148>)
 8002cd6:	f001 ff7d 	bl	8004bd4 <HAL_GPIO_Init>
 8002cda:	e000      	b.n	8002cde <HAL_FMC_MspInit+0x122>
    return;
 8002cdc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200007b0 	.word	0x200007b0
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021800 	.word	0x40021800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40021400 	.word	0x40021400
 8002d00:	40021c00 	.word	0x40021c00
 8002d04:	40020800 	.word	0x40020800

08002d08 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d10:	f7ff ff54 	bl	8002bbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <HAL_SAI_MspInit+0xa8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d146      	bne.n	8002dbc <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002d2e:	4b26      	ldr	r3, [pc, #152]	@ (8002dc8 <HAL_SAI_MspInit+0xac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <HAL_SAI_MspInit+0xb0>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	4a23      	ldr	r2, [pc, #140]	@ (8002dcc <HAL_SAI_MspInit+0xb0>)
 8002d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d46:	4b21      	ldr	r3, [pc, #132]	@ (8002dcc <HAL_SAI_MspInit+0xb0>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_SAI_MspInit+0xac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_SAI_MspInit+0xac>)
 8002d5a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002d5c:	2330      	movs	r3, #48	@ 0x30
 8002d5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d6c:	2306      	movs	r3, #6
 8002d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	4619      	mov	r1, r3
 8002d76:	4816      	ldr	r0, [pc, #88]	@ (8002dd0 <HAL_SAI_MspInit+0xb4>)
 8002d78:	f001 ff2c 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002d7c:	2340      	movs	r3, #64	@ 0x40
 8002d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d8c:	2306      	movs	r3, #6
 8002d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	480f      	ldr	r0, [pc, #60]	@ (8002dd4 <HAL_SAI_MspInit+0xb8>)
 8002d98:	f001 ff1c 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002dac:	2306      	movs	r3, #6
 8002dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	4619      	mov	r1, r3
 8002db6:	4808      	ldr	r0, [pc, #32]	@ (8002dd8 <HAL_SAI_MspInit+0xbc>)
 8002db8:	f001 ff0c 	bl	8004bd4 <HAL_GPIO_Init>

    }
}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40015804 	.word	0x40015804
 8002dc8:	200007b4 	.word	0x200007b4
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40021800 	.word	0x40021800

08002ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	@ 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <HAL_InitTick+0xe4>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	4a32      	ldr	r2, [pc, #200]	@ (8002ec0 <HAL_InitTick+0xe4>)
 8002df6:	f043 0310 	orr.w	r3, r3, #16
 8002dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfc:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_InitTick+0xe4>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e08:	f107 0210 	add.w	r2, r7, #16
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 f9ce 	bl	80081b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e22:	f005 f99f 	bl	8008164 <HAL_RCC_GetPCLK1Freq>
 8002e26:	6378      	str	r0, [r7, #52]	@ 0x34
 8002e28:	e004      	b.n	8002e34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e2a:	f005 f99b 	bl	8008164 <HAL_RCC_GetPCLK1Freq>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e36:	4a23      	ldr	r2, [pc, #140]	@ (8002ec4 <HAL_InitTick+0xe8>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c9b      	lsrs	r3, r3, #18
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e42:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e44:	4a21      	ldr	r2, [pc, #132]	@ (8002ecc <HAL_InitTick+0xf0>)
 8002e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e62:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e68:	4817      	ldr	r0, [pc, #92]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e6a:	f007 fa0f 	bl	800a28c <HAL_TIM_Base_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e7c:	4812      	ldr	r0, [pc, #72]	@ (8002ec8 <HAL_InitTick+0xec>)
 8002e7e:	f007 fa55 	bl	800a32c <HAL_TIM_Base_Start_IT>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002e88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e90:	2036      	movs	r0, #54	@ 0x36
 8002e92:	f000 fae3 	bl	800345c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d808      	bhi.n	8002eae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	2036      	movs	r0, #54	@ 0x36
 8002ea2:	f000 fabf 	bl	8003424 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_InitTick+0xf4>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	e002      	b.n	8002eb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3738      	adds	r7, #56	@ 0x38
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	200007b8 	.word	0x200007b8
 8002ecc:	40001000 	.word	0x40001000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <NMI_Handler+0x4>

08002edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <HardFault_Handler+0x4>

08002ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <MemManage_Handler+0x4>

08002eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <BusFault_Handler+0x4>

08002ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <UsageFault_Handler+0x4>

08002efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002f48:	4802      	ldr	r0, [pc, #8]	@ (8002f54 <SDIO_IRQHandler+0x10>)
 8002f4a:	f006 fac3 	bl	80094d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000560 	.word	0x20000560

08002f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f5c:	4802      	ldr	r0, [pc, #8]	@ (8002f68 <TIM6_DAC_IRQHandler+0x10>)
 8002f5e:	f007 fa55 	bl	800a40c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200007b8 	.word	0x200007b8

08002f6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002f70:	4802      	ldr	r0, [pc, #8]	@ (8002f7c <DMA2_Stream3_IRQHandler+0x10>)
 8002f72:	f000 fbc5 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200005e4 	.word	0x200005e4

08002f80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <OTG_FS_IRQHandler+0x10>)
 8002f86:	f002 fae3 	bl	8005550 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000c28 	.word	0x20000c28

08002f94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <DMA2_Stream6_IRQHandler+0x10>)
 8002f9a:	f000 fbb1 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000644 	.word	0x20000644

08002fa8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <LTDC_IRQHandler+0x10>)
 8002fae:	f004 fb37 	bl	8007620 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200003e4 	.word	0x200003e4

08002fbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002fc0:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <DMA2D_IRQHandler+0x10>)
 8002fc2:	f000 fe5c 	bl	8003c7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200002e0 	.word	0x200002e0

08002fd0 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <DSI_IRQHandler+0x10>)
 8002fd6:	f001 fa32 	bl	800443e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000320 	.word	0x20000320

08002fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return 1;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_kill>:

int _kill(int pid, int sig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ffe:	f010 f98f 	bl	8013320 <__errno>
 8003002:	4603      	mov	r3, r0
 8003004:	2216      	movs	r2, #22
 8003006:	601a      	str	r2, [r3, #0]
  return -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_exit>:

void _exit (int status)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffe7 	bl	8002ff4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003026:	bf00      	nop
 8003028:	e7fd      	b.n	8003026 <_exit+0x12>

0800302a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e00a      	b.n	8003052 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800303c:	f3af 8000 	nop.w
 8003040:	4601      	mov	r1, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	60ba      	str	r2, [r7, #8]
 8003048:	b2ca      	uxtb	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	dbf0      	blt.n	800303c <_read+0x12>
  }

  return len;
 800305a:	687b      	ldr	r3, [r7, #4]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e009      	b.n	800308a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	60ba      	str	r2, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	dbf1      	blt.n	8003076 <_write+0x12>
  }
  return len;
 8003092:	687b      	ldr	r3, [r7, #4]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_close>:

int _close(int file)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c4:	605a      	str	r2, [r3, #4]
  return 0;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_isatty>:

int _isatty(int file)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030dc:	2301      	movs	r3, #1
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800310c:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <_sbrk+0x5c>)
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <_sbrk+0x60>)
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <_sbrk+0x64>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d102      	bne.n	8003126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <_sbrk+0x64>)
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <_sbrk+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <_sbrk+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d207      	bcs.n	8003144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003134:	f010 f8f4 	bl	8013320 <__errno>
 8003138:	4603      	mov	r3, r0
 800313a:	220c      	movs	r2, #12
 800313c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	e009      	b.n	8003158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <_sbrk+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314a:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <_sbrk+0x64>)
 8003154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20050000 	.word	0x20050000
 8003164:	00000400 	.word	0x00000400
 8003168:	20000800 	.word	0x20000800
 800316c:	20001158 	.word	0x20001158

08003170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <SystemInit+0x20>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <SystemInit+0x20>)
 800317c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003198:	f7ff ffea 	bl	8003170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800319c:	480c      	ldr	r0, [pc, #48]	@ (80031d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800319e:	490d      	ldr	r1, [pc, #52]	@ (80031d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031a0:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a4:	e002      	b.n	80031ac <LoopCopyDataInit>

080031a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031aa:	3304      	adds	r3, #4

080031ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b0:	d3f9      	bcc.n	80031a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031b4:	4c0a      	ldr	r4, [pc, #40]	@ (80031e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b8:	e001      	b.n	80031be <LoopFillZerobss>

080031ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031bc:	3204      	adds	r2, #4

080031be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c0:	d3fb      	bcc.n	80031ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80031c2:	f010 f8b3 	bl	801332c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c6:	f7fe fb27 	bl	8001818 <main>
  bx  lr    
 80031ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80031d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80031d8:	08013f6c 	.word	0x08013f6c
  ldr r2, =_sbss
 80031dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80031e0:	20001158 	.word	0x20001158

080031e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e4:	e7fe      	b.n	80031e4 <ADC_IRQHandler>
	...

080031e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <HAL_Init+0x40>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <HAL_Init+0x40>)
 80031f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_Init+0x40>)
 80031fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a07      	ldr	r2, [pc, #28]	@ (8003228 <HAL_Init+0x40>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003210:	2003      	movs	r0, #3
 8003212:	f000 f8fc 	bl	800340e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003216:	200f      	movs	r0, #15
 8003218:	f7ff fde0 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321c:	f7ff f954 	bl	80024c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00

0800322c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_IncTick+0x20>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_IncTick+0x24>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4413      	add	r3, r2
 800323c:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <HAL_IncTick+0x24>)
 800323e:	6013      	str	r3, [r2, #0]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000008 	.word	0x20000008
 8003250:	20000804 	.word	0x20000804

08003254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return uwTick;
 8003258:	4b03      	ldr	r3, [pc, #12]	@ (8003268 <HAL_GetTick+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000804 	.word	0x20000804

0800326c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7ff ffee 	bl	8003254 <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d005      	beq.n	8003292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_Delay+0x44>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003292:	bf00      	nop
 8003294:	f7ff ffde 	bl	8003254 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d8f7      	bhi.n	8003294 <HAL_Delay+0x28>
  {
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000008 	.word	0x20000008

080032b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e6:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <__NVIC_GetPriorityGrouping+0x18>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 0307 	and.w	r3, r3, #7
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db0b      	blt.n	8003342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4907      	ldr	r1, [pc, #28]	@ (8003350 <__NVIC_EnableIRQ+0x38>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2001      	movs	r0, #1
 800333a:	fa00 f202 	lsl.w	r2, r0, r2
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	@ (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	@ (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff4c 	bl	80032b4 <__NVIC_SetPriorityGrouping>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003436:	f7ff ff61 	bl	80032fc <__NVIC_GetPriorityGrouping>
 800343a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	6978      	ldr	r0, [r7, #20]
 8003442:	f7ff ffb1 	bl	80033a8 <NVIC_EncodePriority>
 8003446:	4602      	mov	r2, r0
 8003448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff80 	bl	8003354 <__NVIC_SetPriority>
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff54 	bl	8003318 <__NVIC_EnableIRQ>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e00e      	b.n	80034a8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	795b      	ldrb	r3, [r3, #5]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff f842 	bl	8002524 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff feca 	bl	8003254 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e099      	b.n	8003600 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ec:	e00f      	b.n	800350e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ee:	f7ff feb1 	bl	8003254 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d908      	bls.n	800350e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2203      	movs	r2, #3
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e078      	b.n	8003600 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e8      	bne.n	80034ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4b38      	ldr	r3, [pc, #224]	@ (8003608 <HAL_DMA_Init+0x158>)
 8003528:	4013      	ands	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	2b04      	cmp	r3, #4
 8003566:	d107      	bne.n	8003578 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	4313      	orrs	r3, r2
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d117      	bne.n	80035d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa9d 	bl	8003af4 <DMA_CheckFifoParam>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2240      	movs	r2, #64	@ 0x40
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035ce:	2301      	movs	r3, #1
 80035d0:	e016      	b.n	8003600 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa54 	bl	8003a88 <DMA_CalcBaseAndBitshift>
 80035e0:	4603      	mov	r3, r0
 80035e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	223f      	movs	r2, #63	@ 0x3f
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	f010803f 	.word	0xf010803f

0800360c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_DMA_Start_IT+0x26>
 800362e:	2302      	movs	r3, #2
 8003630:	e040      	b.n	80036b4 <HAL_DMA_Start_IT+0xa8>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d12f      	bne.n	80036a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f9e6 	bl	8003a2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	223f      	movs	r2, #63	@ 0x3f
 8003666:	409a      	lsls	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0216 	orr.w	r2, r2, #22
 800367a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e005      	b.n	80036b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d004      	beq.n	80036da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2280      	movs	r2, #128	@ 0x80
 80036d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00c      	b.n	80036f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2205      	movs	r2, #5
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800370c:	4b8e      	ldr	r3, [pc, #568]	@ (8003948 <HAL_DMA_IRQHandler+0x248>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a8e      	ldr	r2, [pc, #568]	@ (800394c <HAL_DMA_IRQHandler+0x24c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	2208      	movs	r2, #8
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2204      	movs	r2, #4
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2210      	movs	r2, #16
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	2210      	movs	r2, #16
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e01f      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e016      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	2220      	movs	r2, #32
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 808f 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8087 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	2220      	movs	r2, #32
 8003898:	409a      	lsls	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d136      	bne.n	8003918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0216 	bic.w	r2, r2, #22
 80038b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_DMA_IRQHandler+0x1da>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	223f      	movs	r2, #63	@ 0x3f
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07e      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
        }
        return;
 8003916:	e079      	b.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	2b00      	cmp	r3, #0
 800393a:	d031      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e02c      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000
 800394c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d023      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e01e      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0210 	bic.w	r2, r2, #16
 800397e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d032      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d022      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2205      	movs	r2, #5
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d307      	bcc.n	80039e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f2      	bne.n	80039cc <HAL_DMA_IRQHandler+0x2cc>
 80039e6:	e000      	b.n	80039ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e000      	b.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a0c:	bf00      	nop
    }
  }
}
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b40      	cmp	r3, #64	@ 0x40
 8003a58:	d108      	bne.n	8003a6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a6a:	e007      	b.n	8003a7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	3b10      	subs	r3, #16
 8003a98:	4a14      	ldr	r2, [pc, #80]	@ (8003aec <DMA_CalcBaseAndBitshift+0x64>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aa2:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d909      	bls.n	8003aca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ac8:	e007      	b.n	8003ada <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	aaaaaaab 	.word	0xaaaaaaab
 8003af0:	08013e28 	.word	0x08013e28

08003af4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11f      	bne.n	8003b4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d856      	bhi.n	8003bc2 <DMA_CheckFifoParam+0xce>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <DMA_CheckFifoParam+0x28>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b3f 	.word	0x08003b3f
 8003b24:	08003b2d 	.word	0x08003b2d
 8003b28:	08003bc3 	.word	0x08003bc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d046      	beq.n	8003bc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3c:	e043      	b.n	8003bc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b46:	d140      	bne.n	8003bca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4c:	e03d      	b.n	8003bca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b56:	d121      	bne.n	8003b9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d837      	bhi.n	8003bce <DMA_CheckFifoParam+0xda>
 8003b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <DMA_CheckFifoParam+0x70>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b7b 	.word	0x08003b7b
 8003b6c:	08003b75 	.word	0x08003b75
 8003b70:	08003b8d 	.word	0x08003b8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e030      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d025      	beq.n	8003bd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8a:	e022      	b.n	8003bd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b94:	d11f      	bne.n	8003bd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b9a:	e01c      	b.n	8003bd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d903      	bls.n	8003baa <DMA_CheckFifoParam+0xb6>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d003      	beq.n	8003bb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ba8:	e018      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      break;
 8003bae:	e015      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e00b      	b.n	8003bda <DMA_CheckFifoParam+0xe6>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e00a      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e008      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e006      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;   
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
    }
  } 
  
  return status; 
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop

08003bec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e03b      	b.n	8003c76 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fca8 	bl	8002568 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3c:	f023 0107 	bic.w	r1, r3, #7
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d1      	ldr	r1, [r2, #12]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d026      	beq.n	8003cee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d021      	beq.n	8003cee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d026      	beq.n	8003d46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d021      	beq.n	8003d46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2220      	movs	r2, #32
 8003d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1e:	f043 0202 	orr.w	r2, r3, #2
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d026      	beq.n	8003d9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d021      	beq.n	8003d9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2208      	movs	r2, #8
 8003d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2204      	movs	r2, #4
 8003d82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f853 	bl	8003e76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d024      	beq.n	8003e24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01f      	beq.n	8003e24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003df2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01a      	beq.n	8003e6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f80e 	bl	8003e8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_DMA2D_ConfigLayer+0x20>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e079      	b.n	8003fb4 <HAL_DMA2D_ConfigLayer+0x114>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003eea:	4b35      	ldr	r3, [pc, #212]	@ (8003fc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003eec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b0a      	cmp	r3, #10
 8003ef4:	d003      	beq.n	8003efe <HAL_DMA2D_ConfigLayer+0x5e>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b09      	cmp	r3, #9
 8003efc:	d107      	bne.n	8003f0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e005      	b.n	8003f1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d120      	bne.n	8003f62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	ea02 0103 	and.w	r1, r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b0a      	cmp	r3, #10
 8003f48:	d003      	beq.n	8003f52 <HAL_DMA2D_ConfigLayer+0xb2>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b09      	cmp	r3, #9
 8003f50:	d127      	bne.n	8003fa2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f60:	e01f      	b.n	8003fa2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	ea02 0103 	and.w	r1, r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	d003      	beq.n	8003f94 <HAL_DMA2D_ConfigLayer+0xf4>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d106      	bne.n	8003fa2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003fa0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	ff03000f 	.word	0xff03000f

08003fc4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	@ 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e16e      	b.n	80042b6 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7c5b      	ldrb	r3, [r3, #17]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fe fae8 	bl	80025b8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2203      	movs	r2, #3
 8003fec:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004002:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800400e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004016:	f7ff f91d 	bl	8003254 <HAL_GetTick>
 800401a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800401c:	e009      	b.n	8004032 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800401e:	f7ff f919 	bl	8003254 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800402c:	d901      	bls.n	8004032 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e141      	b.n	80042b6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800403a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ed      	beq.n	800401e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8004052:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8004056:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800406e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004076:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80040aa:	2001      	movs	r0, #1
 80040ac:	f7ff f8de 	bl	800326c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b0:	f7ff f8d0 	bl	8003254 <HAL_GetTick>
 80040b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80040b6:	e009      	b.n	80040cc <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80040b8:	f7ff f8cc 	bl	8003254 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040c6:	d901      	bls.n	80040cc <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0f4      	b.n	80042b6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80040d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ed      	beq.n	80040b8 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800410c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0202 	orr.w	r2, r2, #2
 8004130:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0204 	orr.w	r2, r2, #4
 8004144:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0203 	bic.w	r2, r2, #3
 8004158:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8004172:	f7ff f86f 	bl	8003254 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d123      	bne.n	80041d0 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004188:	e00c      	b.n	80041a4 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800418a:	f7ff f863 	bl	8003254 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004198:	d904      	bls.n	80041a4 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e088      	b.n	80042b6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041ac:	f003 0314 	and.w	r3, r3, #20
 80041b0:	2b14      	cmp	r3, #20
 80041b2:	d1ea      	bne.n	800418a <HAL_DSI_Init+0x1c6>
 80041b4:	e014      	b.n	80041e0 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80041b6:	f7ff f84d 	bl	8003254 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041c4:	d904      	bls.n	80041d0 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e072      	b.n	80042b6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041d8:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80041dc:	2b94      	cmp	r3, #148	@ 0x94
 80041de:	d1ea      	bne.n	80041b6 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_DSI_Init+0x22a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	e000      	b.n	80041f0 <HAL_DSI_Init+0x22c>
 80041ee:	2301      	movs	r3, #1
 80041f0:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <HAL_DSI_Init+0x2fc>)
 80041f6:	fb03 f202 	mul.w	r2, r3, r2
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	409a      	lsls	r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004226:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	430a      	orrs	r2, r1
 800423a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0203 	bic.w	r2, r2, #3
 800428a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3728      	adds	r7, #40	@ 0x28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	003d0900 	.word	0x003d0900

080042c4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7c1b      	ldrb	r3, [r3, #16]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_DSI_ConfigErrorMonitor+0x16>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0ab      	b.n	8004432 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004314:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004318:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8004336:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0202 	orr.w	r2, r2, #2
 8004372:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 020c 	orr.w	r2, r2, #12
 8004390:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0210 	orr.w	r2, r2, #16
 80043ae:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0220 	orr.w	r2, r2, #32
 80043cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043ea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004408:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004426:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00f      	beq.n	8004476 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ad 	bl	80045d0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00f      	beq.n	80044a6 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2202      	movs	r2, #2
 800449c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f89f 	bl	80045e4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 808c 	beq.w	80045c8 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044b8:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80044d0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f043 0202 	orr.w	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f043 0208 	orr.w	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f043 0210 	orr.w	r2, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f818 	bl	80045f8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7c1b      	ldrb	r3, [r3, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_DSI_SetGenericVCID+0x16>
 800461e:	2302      	movs	r3, #2
 8004620:	e016      	b.n	8004650 <HAL_DSI_SetGenericVCID+0x44>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0203 	bic.w	r2, r2, #3
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	7c1b      	ldrb	r3, [r3, #16]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800466e:	2302      	movs	r3, #2
 8004670:	e0c5      	b.n	80047fe <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0203 	bic.w	r2, r2, #3
 80046be:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68d9      	ldr	r1, [r3, #12]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0207 	bic.w	r2, r2, #7
 80046e0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6959      	ldr	r1, [r3, #20]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 020f 	bic.w	r2, r2, #15
 800470e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6919      	ldr	r1, [r3, #16]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 020e 	bic.w	r2, r2, #14
 8004732:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	005a      	lsls	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004780:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0202 	orr.w	r2, r2, #2
 80047f2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7c1b      	ldrb	r3, [r3, #16]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_DSI_ConfigCommand+0x16>
 800481e:	2302      	movs	r3, #2
 8004820:	e049      	b.n	80048b6 <HAL_DSI_ConfigCommand+0xaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <HAL_DSI_ConfigCommand+0xb8>)
 8004834:	400b      	ands	r3, r1
 8004836:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004846:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800484c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004852:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004858:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800485e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004864:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800486a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004870:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004876:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800487c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004882:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0202 	bic.w	r2, r2, #2
 800489a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	fef080ff 	.word	0xfef080ff

080048c8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	7c1b      	ldrb	r3, [r3, #16]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_DSI_ConfigFlowControl+0x16>
 80048da:	2302      	movs	r3, #2
 80048dc:	e016      	b.n	800490c <HAL_DSI_ConfigFlowControl+0x44>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 021f 	bic.w	r2, r2, #31
 80048f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7c1b      	ldrb	r3, [r3, #16]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_DSI_ConfigPhyTimer+0x16>
 800492a:	2302      	movs	r3, #2
 800492c:	e058      	b.n	80049e0 <HAL_DSI_ConfigPhyTimer+0xc8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4293      	cmp	r3, r2
 800493e:	bf38      	it	cc
 8004940:	4613      	movcc	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8004954:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	041a      	lsls	r2, r3, #16
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8004982:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80049bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	021a      	lsls	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	7c1b      	ldrb	r3, [r3, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_DSI_ConfigHostTimeouts+0x16>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0b4      	b.n	8004b6c <HAL_DSI_ConfigHostTimeouts+0x180>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004a16:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	b292      	uxth	r2, r2
 8004a38:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	041a      	lsls	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6a1a      	ldr	r2, [r3, #32]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7c1b      	ldrb	r3, [r3, #16]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e01b      	b.n	8004bc6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8004ba4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	065a      	lsls	r2, r3, #25
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	@ 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	e177      	b.n	8004ee0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	f040 8166 	bne.w	8004eda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d005      	beq.n	8004c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d130      	bne.n	8004c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	2203      	movs	r2, #3
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 0201 	and.w	r2, r3, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d017      	beq.n	8004cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d123      	bne.n	8004d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	08da      	lsrs	r2, r3, #3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3208      	adds	r2, #8
 8004cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	220f      	movs	r2, #15
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	08da      	lsrs	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3208      	adds	r2, #8
 8004d12:	69b9      	ldr	r1, [r7, #24]
 8004d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0203 	and.w	r2, r3, #3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80c0 	beq.w	8004eda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_GPIO_Init+0x324>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	4a65      	ldr	r2, [pc, #404]	@ (8004ef8 <HAL_GPIO_Init+0x324>)
 8004d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d6a:	4b63      	ldr	r3, [pc, #396]	@ (8004ef8 <HAL_GPIO_Init+0x324>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d76:	4a61      	ldr	r2, [pc, #388]	@ (8004efc <HAL_GPIO_Init+0x328>)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a58      	ldr	r2, [pc, #352]	@ (8004f00 <HAL_GPIO_Init+0x32c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d037      	beq.n	8004e12 <HAL_GPIO_Init+0x23e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a57      	ldr	r2, [pc, #348]	@ (8004f04 <HAL_GPIO_Init+0x330>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_GPIO_Init+0x23a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a56      	ldr	r2, [pc, #344]	@ (8004f08 <HAL_GPIO_Init+0x334>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d02b      	beq.n	8004e0a <HAL_GPIO_Init+0x236>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a55      	ldr	r2, [pc, #340]	@ (8004f0c <HAL_GPIO_Init+0x338>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d025      	beq.n	8004e06 <HAL_GPIO_Init+0x232>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a54      	ldr	r2, [pc, #336]	@ (8004f10 <HAL_GPIO_Init+0x33c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01f      	beq.n	8004e02 <HAL_GPIO_Init+0x22e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a53      	ldr	r2, [pc, #332]	@ (8004f14 <HAL_GPIO_Init+0x340>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d019      	beq.n	8004dfe <HAL_GPIO_Init+0x22a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a52      	ldr	r2, [pc, #328]	@ (8004f18 <HAL_GPIO_Init+0x344>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_GPIO_Init+0x226>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a51      	ldr	r2, [pc, #324]	@ (8004f1c <HAL_GPIO_Init+0x348>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00d      	beq.n	8004df6 <HAL_GPIO_Init+0x222>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a50      	ldr	r2, [pc, #320]	@ (8004f20 <HAL_GPIO_Init+0x34c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <HAL_GPIO_Init+0x21e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a4f      	ldr	r2, [pc, #316]	@ (8004f24 <HAL_GPIO_Init+0x350>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d101      	bne.n	8004dee <HAL_GPIO_Init+0x21a>
 8004dea:	2309      	movs	r3, #9
 8004dec:	e012      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004dee:	230a      	movs	r3, #10
 8004df0:	e010      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004df2:	2308      	movs	r3, #8
 8004df4:	e00e      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004df6:	2307      	movs	r3, #7
 8004df8:	e00c      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	e00a      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e008      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e02:	2304      	movs	r3, #4
 8004e04:	e006      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e06:	2303      	movs	r3, #3
 8004e08:	e004      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e002      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e12:	2300      	movs	r3, #0
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f002 0203 	and.w	r2, r2, #3
 8004e1a:	0092      	lsls	r2, r2, #2
 8004e1c:	4093      	lsls	r3, r2
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e24:	4935      	ldr	r1, [pc, #212]	@ (8004efc <HAL_GPIO_Init+0x328>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	089b      	lsrs	r3, r3, #2
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e32:	4b3d      	ldr	r3, [pc, #244]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e56:	4a34      	ldr	r2, [pc, #208]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e5c:	4b32      	ldr	r3, [pc, #200]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e86:	4b28      	ldr	r3, [pc, #160]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ed4:	4a14      	ldr	r2, [pc, #80]	@ (8004f28 <HAL_GPIO_Init+0x354>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	f67f ae84 	bls.w	8004bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	3724      	adds	r7, #36	@ 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40013800 	.word	0x40013800
 8004f00:	40020000 	.word	0x40020000
 8004f04:	40020400 	.word	0x40020400
 8004f08:	40020800 	.word	0x40020800
 8004f0c:	40020c00 	.word	0x40020c00
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40021400 	.word	0x40021400
 8004f18:	40021800 	.word	0x40021800
 8004f1c:	40021c00 	.word	0x40021c00
 8004f20:	40022000 	.word	0x40022000
 8004f24:	40022400 	.word	0x40022400
 8004f28:	40013c00 	.word	0x40013c00

08004f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
 8004f48:	e001      	b.n	8004f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f6c:	787b      	ldrb	r3, [r7, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f78:	e003      	b.n	8004f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	041a      	lsls	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	619a      	str	r2, [r3, #24]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af02      	add	r7, sp, #8
 8004f94:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e059      	b.n	8005054 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f00d f9b0 	bl	8012320 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fce:	d102      	bne.n	8004fd6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f006 fefd 	bl	800bdda <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	7c1a      	ldrb	r2, [r3, #16]
 8004fe8:	f88d 2000 	strb.w	r2, [sp]
 8004fec:	3304      	adds	r3, #4
 8004fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ff0:	f006 fe7e 	bl	800bcf0 <USB_CoreInit>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e026      	b.n	8005054 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2101      	movs	r1, #1
 800500c:	4618      	mov	r0, r3
 800500e:	f006 fef5 	bl	800bdfc <USB_SetCurrentMode>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e017      	b.n	8005054 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7c1a      	ldrb	r2, [r3, #16]
 800502c:	f88d 2000 	strb.w	r2, [sp]
 8005030:	3304      	adds	r3, #4
 8005032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005034:	f007 f898 	bl	800c168 <USB_HostInit>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e004      	b.n	8005054 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b08b      	sub	sp, #44	@ 0x2c
 8005060:	af04      	add	r7, sp, #16
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	70fb      	strb	r3, [r7, #3]
 800506e:	460b      	mov	r3, r1
 8005070:	70bb      	strb	r3, [r7, #2]
 8005072:	4613      	mov	r3, r2
 8005074:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005076:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005078:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_HCD_HC_Init+0x2c>
 8005084:	2302      	movs	r3, #2
 8005086:	e09d      	b.n	80051c4 <HAL_HCD_HC_Init+0x168>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3319      	adds	r3, #25
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3314      	adds	r3, #20
 80050b4:	787a      	ldrb	r2, [r7, #1]
 80050b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	3315      	adds	r3, #21
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3326      	adds	r3, #38	@ 0x26
 80050dc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80050e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	78bb      	ldrb	r3, [r7, #2]
 80050e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ea:	b2d8      	uxtb	r0, r3
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	3316      	adds	r3, #22
 80050fa:	4602      	mov	r2, r0
 80050fc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fbc8 	bl	8005898 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800510c:	2b00      	cmp	r3, #0
 800510e:	da0a      	bge.n	8005126 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3317      	adds	r3, #23
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e009      	b.n	800513a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3317      	adds	r3, #23
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f007 f96a 	bl	800c418 <USB_GetHostSpeed>
 8005144:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005146:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10b      	bne.n	8005166 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800514e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <HAL_HCD_HC_Init+0x10a>
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005160:	d901      	bls.n	8005166 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005162:	23bc      	movs	r3, #188	@ 0xbc
 8005164:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3318      	adds	r3, #24
 8005176:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800517a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	b298      	uxth	r0, r3
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3328      	adds	r3, #40	@ 0x28
 8005190:	4602      	mov	r2, r0
 8005192:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	b29b      	uxth	r3, r3
 800519c:	787c      	ldrb	r4, [r7, #1]
 800519e:	78ba      	ldrb	r2, [r7, #2]
 80051a0:	78f9      	ldrb	r1, [r7, #3]
 80051a2:	9302      	str	r3, [sp, #8]
 80051a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4623      	mov	r3, r4
 80051b2:	f007 f959 	bl	800c468 <USB_HC_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd90      	pop	{r4, r7, pc}

080051cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_HCD_HC_Halt+0x1e>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e00f      	b.n	800520a <HAL_HCD_HC_Halt+0x3e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f007 fceb 	bl	800cbd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4603      	mov	r3, r0
 8005224:	70fb      	strb	r3, [r7, #3]
 8005226:	460b      	mov	r3, r1
 8005228:	70bb      	strb	r3, [r7, #2]
 800522a:	4613      	mov	r3, r2
 800522c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3317      	adds	r3, #23
 800523e:	78ba      	ldrb	r2, [r7, #2]
 8005240:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	3326      	adds	r3, #38	@ 0x26
 8005252:	787a      	ldrb	r2, [r7, #1]
 8005254:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005256:	7c3b      	ldrb	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d114      	bne.n	8005286 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	332a      	adds	r3, #42	@ 0x2a
 800526c:	2203      	movs	r2, #3
 800526e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	3319      	adds	r3, #25
 8005280:	7f3a      	ldrb	r2, [r7, #28]
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e009      	b.n	800529a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	332a      	adds	r3, #42	@ 0x2a
 8005296:	2202      	movs	r2, #2
 8005298:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800529a:	787b      	ldrb	r3, [r7, #1]
 800529c:	2b03      	cmp	r3, #3
 800529e:	f200 8102 	bhi.w	80054a6 <HAL_HCD_HC_SubmitRequest+0x292>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052b9 	.word	0x080052b9
 80052ac:	08005491 	.word	0x08005491
 80052b0:	0800537d 	.word	0x0800537d
 80052b4:	08005407 	.word	0x08005407
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80052b8:	7c3b      	ldrb	r3, [r7, #16]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f040 80f5 	bne.w	80054aa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80052c0:	78bb      	ldrb	r3, [r7, #2]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d12d      	bne.n	8005322 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80052c6:	8b3b      	ldrh	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	333d      	adds	r3, #61	@ 0x3d
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	333d      	adds	r3, #61	@ 0x3d
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	332a      	adds	r3, #42	@ 0x2a
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800530a:	e0ce      	b.n	80054aa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	332a      	adds	r3, #42	@ 0x2a
 800531c:	2202      	movs	r2, #2
 800531e:	701a      	strb	r2, [r3, #0]
      break;
 8005320:	e0c3      	b.n	80054aa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	331a      	adds	r3, #26
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 80b8 	bne.w	80054aa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	333c      	adds	r3, #60	@ 0x3c
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	332a      	adds	r3, #42	@ 0x2a
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
      break;
 8005364:	e0a1      	b.n	80054aa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	332a      	adds	r3, #42	@ 0x2a
 8005376:	2202      	movs	r2, #2
 8005378:	701a      	strb	r2, [r3, #0]
      break;
 800537a:	e096      	b.n	80054aa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800537c:	78bb      	ldrb	r3, [r7, #2]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d120      	bne.n	80053c4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	333d      	adds	r3, #61	@ 0x3d
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	332a      	adds	r3, #42	@ 0x2a
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80053ac:	e07e      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	332a      	adds	r3, #42	@ 0x2a
 80053be:	2202      	movs	r2, #2
 80053c0:	701a      	strb	r2, [r3, #0]
      break;
 80053c2:	e073      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	333c      	adds	r3, #60	@ 0x3c
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	332a      	adds	r3, #42	@ 0x2a
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
      break;
 80053ee:	e05d      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	332a      	adds	r3, #42	@ 0x2a
 8005400:	2202      	movs	r2, #2
 8005402:	701a      	strb	r2, [r3, #0]
      break;
 8005404:	e052      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005406:	78bb      	ldrb	r3, [r7, #2]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d120      	bne.n	800544e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	333d      	adds	r3, #61	@ 0x3d
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	332a      	adds	r3, #42	@ 0x2a
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005436:	e039      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	332a      	adds	r3, #42	@ 0x2a
 8005448:	2202      	movs	r2, #2
 800544a:	701a      	strb	r2, [r3, #0]
      break;
 800544c:	e02e      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	333c      	adds	r3, #60	@ 0x3c
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	332a      	adds	r3, #42	@ 0x2a
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
      break;
 8005478:	e018      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	332a      	adds	r3, #42	@ 0x2a
 800548a:	2202      	movs	r2, #2
 800548c:	701a      	strb	r2, [r3, #0]
      break;
 800548e:	e00d      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	332a      	adds	r3, #42	@ 0x2a
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
      break;
 80054a4:	e002      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80054a6:	bf00      	nop
 80054a8:	e000      	b.n	80054ac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80054aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	332c      	adds	r3, #44	@ 0x2c
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	8b39      	ldrh	r1, [r7, #24]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4403      	add	r3, r0
 80054d0:	3334      	adds	r3, #52	@ 0x34
 80054d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	334c      	adds	r3, #76	@ 0x4c
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3338      	adds	r3, #56	@ 0x38
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3315      	adds	r3, #21
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334d      	adds	r3, #77	@ 0x4d
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	3310      	adds	r3, #16
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	799b      	ldrb	r3, [r3, #6]
 800553e:	461a      	mov	r2, r3
 8005540:	f007 f8be 	bl	800c6c0 <USB_HC_StartXfer>
 8005544:	4603      	mov	r3, r0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop

08005550 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f006 fdbe 	bl	800c0e8 <USB_GetMode>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 80fb 	bne.w	800576a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f006 fd81 	bl	800c080 <USB_ReadInterrupts>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80f1 	beq.w	8005768 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f006 fd78 	bl	800c080 <USB_ReadInterrupts>
 8005590:	4603      	mov	r3, r0
 8005592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800559a:	d104      	bne.n	80055a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80055a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f006 fd68 	bl	800c080 <USB_ReadInterrupts>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ba:	d104      	bne.n	80055c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80055c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f006 fd58 	bl	800c080 <USB_ReadInterrupts>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055da:	d104      	bne.n	80055e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80055e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f006 fd48 	bl	800c080 <USB_ReadInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d103      	bne.n	8005602 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2202      	movs	r2, #2
 8005600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f006 fd3a 	bl	800c080 <USB_ReadInterrupts>
 800560c:	4603      	mov	r3, r0
 800560e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005616:	d120      	bne.n	800565a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005620:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d113      	bne.n	800565a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005632:	2110      	movs	r1, #16
 8005634:	6938      	ldr	r0, [r7, #16]
 8005636:	f006 fc2d 	bl	800be94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800563a:	6938      	ldr	r0, [r7, #16]
 800563c:	f006 fc5c 	bl	800bef8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7a5b      	ldrb	r3, [r3, #9]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d105      	bne.n	8005654 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f006 fe42 	bl	800c2d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f00c fee1 	bl	801241c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f006 fd0e 	bl	800c080 <USB_ReadInterrupts>
 8005664:	4603      	mov	r3, r0
 8005666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800566a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800566e:	d102      	bne.n	8005676 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fd4d 	bl	8007110 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f006 fd00 	bl	800c080 <USB_ReadInterrupts>
 8005680:	4603      	mov	r3, r0
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b08      	cmp	r3, #8
 8005688:	d106      	bne.n	8005698 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f00c feaa 	bl	80123e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2208      	movs	r2, #8
 8005696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f006 fcef 	bl	800c080 <USB_ReadInterrupts>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056ac:	d139      	bne.n	8005722 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f007 fa7e 	bl	800cbb4 <USB_HC_ReadInterrupt>
 80056b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e025      	b.n	800570c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d018      	beq.n	8005706 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ea:	d106      	bne.n	80056fa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f905 	bl	8005902 <HCD_HC_IN_IRQHandler>
 80056f8:	e005      	b.n	8005706 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 ff67 	bl	80065d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	795b      	ldrb	r3, [r3, #5]
 8005710:	461a      	mov	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4293      	cmp	r3, r2
 8005716:	d3d3      	bcc.n	80056c0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f006 fcaa 	bl	800c080 <USB_ReadInterrupts>
 800572c:	4603      	mov	r3, r0
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d101      	bne.n	800573a <HAL_HCD_IRQHandler+0x1ea>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_HCD_IRQHandler+0x1ec>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d014      	beq.n	800576a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0210 	bic.w	r2, r2, #16
 800574e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fbfe 	bl	8006f52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0210 	orr.w	r2, r2, #16
 8005764:	619a      	str	r2, [r3, #24]
 8005766:	e000      	b.n	800576a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005768:	bf00      	nop
    }
  }
}
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_HCD_Start+0x16>
 8005782:	2302      	movs	r3, #2
 8005784:	e013      	b.n	80057ae <HAL_HCD_Start+0x3e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f006 fe06 	bl	800c3a6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f006 fb0a 	bl	800bdb8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_HCD_Stop+0x16>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e00d      	b.n	80057e8 <HAL_HCD_Stop+0x32>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f007 fb59 	bl	800ce90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f006 fda8 	bl	800c352 <USB_ResetPort>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	334c      	adds	r3, #76	@ 0x4c
 8005828:	781b      	ldrb	r3, [r3, #0]
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	460b      	mov	r3, r1
 8005840:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	3338      	adds	r3, #56	@ 0x38
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f006 fdea 	bl	800c446 <USB_GetCurrentFrame>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f006 fdc5 	bl	800c418 <USB_GetHostSpeed>
 800588e:	4603      	mov	r3, r0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	331a      	adds	r3, #26
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	331b      	adds	r3, #27
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80058cc:	78fa      	ldrb	r2, [r7, #3]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	3325      	adds	r3, #37	@ 0x25
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	3324      	adds	r3, #36	@ 0x24
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f006 fbc0 	bl	800c0a6 <USB_ReadChInterrupts>
 8005926:	4603      	mov	r3, r0
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d11a      	bne.n	8005966 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800593c:	461a      	mov	r2, r3
 800593e:	2304      	movs	r3, #4
 8005940:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	334d      	adds	r3, #77	@ 0x4d
 8005952:	2207      	movs	r2, #7
 8005954:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	4611      	mov	r1, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f007 f939 	bl	800cbd6 <USB_HC_Halt>
 8005964:	e09e      	b.n	8005aa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f006 fb99 	bl	800c0a6 <USB_ReadChInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597e:	d11b      	bne.n	80059b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800598c:	461a      	mov	r2, r3
 800598e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005992:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	334d      	adds	r3, #77	@ 0x4d
 80059a4:	2208      	movs	r2, #8
 80059a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f007 f910 	bl	800cbd6 <USB_HC_Halt>
 80059b6:	e075      	b.n	8005aa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	78fa      	ldrb	r2, [r7, #3]
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f006 fb70 	bl	800c0a6 <USB_ReadChInterrupts>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d11a      	bne.n	8005a06 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059dc:	461a      	mov	r2, r3
 80059de:	2308      	movs	r3, #8
 80059e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	334d      	adds	r3, #77	@ 0x4d
 80059f2:	2206      	movs	r2, #6
 80059f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f007 f8e9 	bl	800cbd6 <USB_HC_Halt>
 8005a04:	e04e      	b.n	8005aa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f006 fb49 	bl	800c0a6 <USB_ReadChInterrupts>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1e:	d11b      	bne.n	8005a58 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	334d      	adds	r3, #77	@ 0x4d
 8005a44:	2209      	movs	r2, #9
 8005a46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f007 f8c0 	bl	800cbd6 <USB_HC_Halt>
 8005a56:	e025      	b.n	8005aa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f006 fb20 	bl	800c0a6 <USB_ReadChInterrupts>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6c:	2b80      	cmp	r3, #128	@ 0x80
 8005a6e:	d119      	bne.n	8005aa4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2380      	movs	r3, #128	@ 0x80
 8005a80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	334d      	adds	r3, #77	@ 0x4d
 8005a92:	2207      	movs	r2, #7
 8005a94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f007 f899 	bl	800cbd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f006 fafa 	bl	800c0a6 <USB_ReadChInterrupts>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005abc:	d112      	bne.n	8005ae4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f007 f885 	bl	800cbd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ade:	6093      	str	r3, [r2, #8]
 8005ae0:	f000 bd75 	b.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f006 fada 	bl	800c0a6 <USB_ReadChInterrupts>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	f040 8128 	bne.w	8005d4e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	331b      	adds	r3, #27
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d119      	bne.n	8005b5a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	331b      	adds	r3, #27
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b58:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	799b      	ldrb	r3, [r3, #6]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01b      	beq.n	8005b9a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	3330      	adds	r3, #48	@ 0x30
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	1ac9      	subs	r1, r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4403      	add	r3, r0
 8005b96:	3338      	adds	r3, #56	@ 0x38
 8005b98:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005b9a:	78fa      	ldrb	r2, [r7, #3]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	334d      	adds	r3, #77	@ 0x4d
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3344      	adds	r3, #68	@ 0x44
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3326      	adds	r3, #38	@ 0x26
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	3326      	adds	r3, #38	@ 0x26
 8005bfa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d110      	bne.n	8005c22 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f006 ffe4 	bl	800cbd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	6093      	str	r3, [r2, #8]
 8005c20:	e03d      	b.n	8005c9e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3326      	adds	r3, #38	@ 0x26
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d00a      	beq.n	8005c4e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	3326      	adds	r3, #38	@ 0x26
 8005c48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d127      	bne.n	8005c9e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	334c      	adds	r3, #76	@ 0x4c
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	334c      	adds	r3, #76	@ 0x4c
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f00c fbcd 	bl	8012438 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	799b      	ldrb	r3, [r3, #6]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d13b      	bne.n	8005d1e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3338      	adds	r3, #56	@ 0x38
 8005cb6:	6819      	ldr	r1, [r3, #0]
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4403      	add	r3, r0
 8005cc6:	3328      	adds	r3, #40	@ 0x28
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	440b      	add	r3, r1
 8005ccc:	1e59      	subs	r1, r3, #1
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4403      	add	r3, r0
 8005cdc:	3328      	adds	r3, #40	@ 0x28
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8470 	beq.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	333c      	adds	r3, #60	@ 0x3c
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	f083 0301 	eor.w	r3, r3, #1
 8005d06:	b2d8      	uxtb	r0, r3
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	333c      	adds	r3, #60	@ 0x3c
 8005d16:	4602      	mov	r2, r0
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	f000 bc58 	b.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	333c      	adds	r3, #60	@ 0x3c
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2d8      	uxtb	r0, r3
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	333c      	adds	r3, #60	@ 0x3c
 8005d46:	4602      	mov	r2, r0
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	f000 bc40 	b.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f006 f9a5 	bl	800c0a6 <USB_ReadChInterrupts>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d131      	bne.n	8005dca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d72:	461a      	mov	r2, r3
 8005d74:	2320      	movs	r3, #32
 8005d76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	331a      	adds	r3, #26
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	f040 841f 	bne.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005d90:	78fa      	ldrb	r2, [r7, #3]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	331b      	adds	r3, #27
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	334d      	adds	r3, #77	@ 0x4d
 8005db4:	2203      	movs	r2, #3
 8005db6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f006 ff08 	bl	800cbd6 <USB_HC_Halt>
 8005dc6:	f000 bc02 	b.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f006 f967 	bl	800c0a6 <USB_ReadChInterrupts>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	f040 8305 	bne.w	80063ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df0:	461a      	mov	r2, r3
 8005df2:	2302      	movs	r3, #2
 8005df4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	334d      	adds	r3, #77	@ 0x4d
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d114      	bne.n	8005e36 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	334d      	adds	r3, #77	@ 0x4d
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e20:	78fa      	ldrb	r2, [r7, #3]
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	334c      	adds	r3, #76	@ 0x4c
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	e2cc      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	334d      	adds	r3, #77	@ 0x4d
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d114      	bne.n	8005e76 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	334d      	adds	r3, #77	@ 0x4d
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	334c      	adds	r3, #76	@ 0x4c
 8005e70:	2205      	movs	r2, #5
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	e2ac      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	334d      	adds	r3, #77	@ 0x4d
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b07      	cmp	r3, #7
 8005e8a:	d00b      	beq.n	8005ea4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005e8c:	78fa      	ldrb	r2, [r7, #3]
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	334d      	adds	r3, #77	@ 0x4d
 8005e9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005e9e:	2b09      	cmp	r3, #9
 8005ea0:	f040 80a6 	bne.w	8005ff0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	334d      	adds	r3, #77	@ 0x4d
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3344      	adds	r3, #68	@ 0x44
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1c59      	adds	r1, r3, #1
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4403      	add	r3, r0
 8005ed8:	3344      	adds	r3, #68	@ 0x44
 8005eda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3344      	adds	r3, #68	@ 0x44
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d943      	bls.n	8005f7a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3344      	adds	r3, #68	@ 0x44
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	331a      	adds	r3, #26
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d123      	bne.n	8005f64 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	331b      	adds	r3, #27
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	331c      	adds	r3, #28
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f62:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	334c      	adds	r3, #76	@ 0x4c
 8005f74:	2204      	movs	r2, #4
 8005f76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f78:	e229      	b.n	80063ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	334c      	adds	r3, #76	@ 0x4c
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3326      	adds	r3, #38	@ 0x26
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3326      	adds	r3, #38	@ 0x26
 8005fb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	f040 8209 	bne.w	80063ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fee:	e1ee      	b.n	80063ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	334d      	adds	r3, #77	@ 0x4d
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b05      	cmp	r3, #5
 8006004:	f040 80c8 	bne.w	8006198 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	334d      	adds	r3, #77	@ 0x4d
 8006018:	2202      	movs	r2, #2
 800601a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	331b      	adds	r3, #27
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b01      	cmp	r3, #1
 8006030:	f040 81ce 	bne.w	80063d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	3326      	adds	r3, #38	@ 0x26
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d16b      	bne.n	8006122 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	3348      	adds	r3, #72	@ 0x48
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4403      	add	r3, r0
 800606a:	3348      	adds	r3, #72	@ 0x48
 800606c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3348      	adds	r3, #72	@ 0x48
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d943      	bls.n	800610c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3348      	adds	r3, #72	@ 0x48
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	331b      	adds	r3, #27
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	3344      	adds	r3, #68	@ 0x44
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d809      	bhi.n	80060d6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	331c      	adds	r3, #28
 80060d2:	2201      	movs	r2, #1
 80060d4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	334c      	adds	r3, #76	@ 0x4c
 8006106:	2204      	movs	r2, #4
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e014      	b.n	8006136 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	334c      	adds	r3, #76	@ 0x4c
 800611c:	2202      	movs	r2, #2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e009      	b.n	8006136 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	334c      	adds	r3, #76	@ 0x4c
 8006132:	2202      	movs	r2, #2
 8006134:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	3326      	adds	r3, #38	@ 0x26
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800614c:	78fa      	ldrb	r2, [r7, #3]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	3326      	adds	r3, #38	@ 0x26
 800615c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800615e:	2b02      	cmp	r3, #2
 8006160:	f040 8136 	bne.w	80063d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800617a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006182:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	e11b      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	334d      	adds	r3, #77	@ 0x4d
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	f040 8081 	bne.w	80062b2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	334d      	adds	r3, #77	@ 0x4d
 80061c0:	2202      	movs	r2, #2
 80061c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	331b      	adds	r3, #27
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	f040 80fa 	bne.w	80063d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	334c      	adds	r3, #76	@ 0x4c
 80061ec:	2202      	movs	r2, #2
 80061ee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	440a      	add	r2, r1
 8006206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800620a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	440a      	add	r2, r1
 8006226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800622a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800622e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800624a:	f023 0320 	bic.w	r3, r3, #32
 800624e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3326      	adds	r3, #38	@ 0x26
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3326      	adds	r3, #38	@ 0x26
 8006276:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006278:	2b02      	cmp	r3, #2
 800627a:	f040 80a9 	bne.w	80063d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006294:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800629c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e08e      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	334d      	adds	r3, #77	@ 0x4d
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d143      	bne.n	8006350 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	334d      	adds	r3, #77	@ 0x4d
 80062d8:	2202      	movs	r2, #2
 80062da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	334c      	adds	r3, #76	@ 0x4c
 80062ec:	2202      	movs	r2, #2
 80062ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	1a9b      	subs	r3, r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	3326      	adds	r3, #38	@ 0x26
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3326      	adds	r3, #38	@ 0x26
 8006316:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006318:	2b02      	cmp	r3, #2
 800631a:	d159      	bne.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006332:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800633a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	461a      	mov	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e03f      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006350:	78fa      	ldrb	r2, [r7, #3]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	334d      	adds	r3, #77	@ 0x4d
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b08      	cmp	r3, #8
 8006364:	d126      	bne.n	80063b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	334d      	adds	r3, #77	@ 0x4d
 8006376:	2202      	movs	r2, #2
 8006378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3344      	adds	r3, #68	@ 0x44
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4403      	add	r3, r0
 800639a:	3344      	adds	r3, #68	@ 0x44
 800639c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	334c      	adds	r3, #76	@ 0x4c
 80063ae:	2204      	movs	r2, #4
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e00d      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	334d      	adds	r3, #77	@ 0x4d
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	f000 8100 	beq.w	80065cc <HCD_HC_IN_IRQHandler+0xcca>
 80063cc:	e000      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80063ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	334c      	adds	r3, #76	@ 0x4c
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f00c f826 	bl	8012438 <HAL_HCD_HC_NotifyURBChange_Callback>
 80063ec:	e0ef      	b.n	80065ce <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f005 fe55 	bl	800c0a6 <USB_ReadChInterrupts>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006402:	2b40      	cmp	r3, #64	@ 0x40
 8006404:	d12f      	bne.n	8006466 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006412:	461a      	mov	r2, r3
 8006414:	2340      	movs	r3, #64	@ 0x40
 8006416:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	334d      	adds	r3, #77	@ 0x4d
 8006428:	2205      	movs	r2, #5
 800642a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	331a      	adds	r3, #26
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3344      	adds	r3, #68	@ 0x44
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f006 fbb9 	bl	800cbd6 <USB_HC_Halt>
 8006464:	e0b3      	b.n	80065ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f005 fe19 	bl	800c0a6 <USB_ReadChInterrupts>
 8006474:	4603      	mov	r3, r0
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b10      	cmp	r3, #16
 800647c:	f040 80a7 	bne.w	80065ce <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	3326      	adds	r3, #38	@ 0x26
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d11b      	bne.n	80064ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3344      	adds	r3, #68	@ 0x44
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	334d      	adds	r3, #77	@ 0x4d
 80064ba:	2204      	movs	r2, #4
 80064bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f006 fb85 	bl	800cbd6 <USB_HC_Halt>
 80064cc:	e03f      	b.n	800654e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3326      	adds	r3, #38	@ 0x26
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	3326      	adds	r3, #38	@ 0x26
 80064f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d129      	bne.n	800654e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80064fa:	78fa      	ldrb	r2, [r7, #3]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	3344      	adds	r3, #68	@ 0x44
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	799b      	ldrb	r3, [r3, #6]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HCD_HC_IN_IRQHandler+0xc2a>
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	331b      	adds	r3, #27
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d110      	bne.n	800654e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4613      	mov	r3, r2
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	334d      	adds	r3, #77	@ 0x4d
 800653c:	2204      	movs	r2, #4
 800653e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f006 fb44 	bl	800cbd6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	331b      	adds	r3, #27
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d129      	bne.n	80065b8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	331b      	adds	r3, #27
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	440a      	add	r2, r1
 800658e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006596:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b2:	f043 0320 	orr.w	r3, r3, #32
 80065b6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c4:	461a      	mov	r2, r3
 80065c6:	2310      	movs	r3, #16
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	e000      	b.n	80065ce <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80065cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	78fa      	ldrb	r2, [r7, #3]
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f005 fd57 	bl	800c0a6 <USB_ReadChInterrupts>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d11b      	bne.n	800663a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800660e:	461a      	mov	r2, r3
 8006610:	2304      	movs	r3, #4
 8006612:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	334d      	adds	r3, #77	@ 0x4d
 8006624:	2207      	movs	r2, #7
 8006626:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f006 fad0 	bl	800cbd6 <USB_HC_Halt>
 8006636:	f000 bc89 	b.w	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f005 fd2f 	bl	800c0a6 <USB_ReadChInterrupts>
 8006648:	4603      	mov	r3, r0
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b20      	cmp	r3, #32
 8006650:	f040 8082 	bne.w	8006758 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	2320      	movs	r3, #32
 8006664:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	3319      	adds	r3, #25
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d124      	bne.n	80066c6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3319      	adds	r3, #25
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	334c      	adds	r3, #76	@ 0x4c
 80066a0:	2202      	movs	r2, #2
 80066a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	334d      	adds	r3, #77	@ 0x4d
 80066b4:	2203      	movs	r2, #3
 80066b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	78fa      	ldrb	r2, [r7, #3]
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f006 fa88 	bl	800cbd6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	331a      	adds	r3, #26
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f040 8437 	bne.w	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	331b      	adds	r3, #27
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 842b 	bne.w	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	3326      	adds	r3, #38	@ 0x26
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d009      	beq.n	8006720 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	331b      	adds	r3, #27
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	334d      	adds	r3, #77	@ 0x4d
 8006730:	2203      	movs	r2, #3
 8006732:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	78fa      	ldrb	r2, [r7, #3]
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f006 fa4a 	bl	800cbd6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3344      	adds	r3, #68	@ 0x44
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e3f9      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	78fa      	ldrb	r2, [r7, #3]
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f005 fca0 	bl	800c0a6 <USB_ReadChInterrupts>
 8006766:	4603      	mov	r3, r0
 8006768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800676c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006770:	d111      	bne.n	8006796 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677e:	461a      	mov	r2, r3
 8006780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006784:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	4611      	mov	r1, r2
 800678e:	4618      	mov	r0, r3
 8006790:	f006 fa21 	bl	800cbd6 <USB_HC_Halt>
 8006794:	e3da      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f005 fc81 	bl	800c0a6 <USB_ReadChInterrupts>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d168      	bne.n	8006880 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3344      	adds	r3, #68	@ 0x44
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	78fa      	ldrb	r2, [r7, #3]
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f005 fc6b 	bl	800c0a6 <USB_ReadChInterrupts>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d6:	2b40      	cmp	r3, #64	@ 0x40
 80067d8:	d112      	bne.n	8006800 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	3319      	adds	r3, #25
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fa:	461a      	mov	r2, r3
 80067fc:	2340      	movs	r3, #64	@ 0x40
 80067fe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	331b      	adds	r3, #27
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	331b      	adds	r3, #27
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	440a      	add	r2, r1
 8006840:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006848:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	461a      	mov	r2, r3
 8006858:	2301      	movs	r3, #1
 800685a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	334d      	adds	r3, #77	@ 0x4d
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f006 f9ac 	bl	800cbd6 <USB_HC_Halt>
 800687e:	e365      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f005 fc0c 	bl	800c0a6 <USB_ReadChInterrupts>
 800688e:	4603      	mov	r3, r0
 8006890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006894:	2b40      	cmp	r3, #64	@ 0x40
 8006896:	d139      	bne.n	800690c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006898:	78fa      	ldrb	r2, [r7, #3]
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	4613      	mov	r3, r2
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	334d      	adds	r3, #77	@ 0x4d
 80068a8:	2205      	movs	r2, #5
 80068aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	331a      	adds	r3, #26
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	3319      	adds	r3, #25
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3344      	adds	r3, #68	@ 0x44
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f006 f96f 	bl	800cbd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006904:	461a      	mov	r2, r3
 8006906:	2340      	movs	r3, #64	@ 0x40
 8006908:	6093      	str	r3, [r2, #8]
 800690a:	e31f      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	4611      	mov	r1, r2
 8006914:	4618      	mov	r0, r3
 8006916:	f005 fbc6 	bl	800c0a6 <USB_ReadChInterrupts>
 800691a:	4603      	mov	r3, r0
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b08      	cmp	r3, #8
 8006922:	d11a      	bne.n	800695a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006930:	461a      	mov	r2, r3
 8006932:	2308      	movs	r3, #8
 8006934:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	334d      	adds	r3, #77	@ 0x4d
 8006946:	2206      	movs	r2, #6
 8006948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	78fa      	ldrb	r2, [r7, #3]
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f006 f93f 	bl	800cbd6 <USB_HC_Halt>
 8006958:	e2f8      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	4611      	mov	r1, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f005 fb9f 	bl	800c0a6 <USB_ReadChInterrupts>
 8006968:	4603      	mov	r3, r0
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b10      	cmp	r3, #16
 8006970:	d144      	bne.n	80069fc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	3344      	adds	r3, #68	@ 0x44
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	334d      	adds	r3, #77	@ 0x4d
 8006996:	2204      	movs	r2, #4
 8006998:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800699a:	78fa      	ldrb	r2, [r7, #3]
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	3319      	adds	r3, #25
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d114      	bne.n	80069da <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	3318      	adds	r3, #24
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3319      	adds	r3, #25
 80069d6:	2201      	movs	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	78fa      	ldrb	r2, [r7, #3]
 80069e0:	4611      	mov	r1, r2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f006 f8f7 	bl	800cbd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f4:	461a      	mov	r2, r3
 80069f6:	2310      	movs	r3, #16
 80069f8:	6093      	str	r3, [r2, #8]
 80069fa:	e2a7      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	4611      	mov	r1, r2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f005 fb4e 	bl	800c0a6 <USB_ReadChInterrupts>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a10:	2b80      	cmp	r3, #128	@ 0x80
 8006a12:	f040 8083 	bne.w	8006b1c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	799b      	ldrb	r3, [r3, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d111      	bne.n	8006a42 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	334d      	adds	r3, #77	@ 0x4d
 8006a2e:	2207      	movs	r2, #7
 8006a30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f006 f8cb 	bl	800cbd6 <USB_HC_Halt>
 8006a40:	e062      	b.n	8006b08 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	3344      	adds	r3, #68	@ 0x44
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4403      	add	r3, r0
 8006a62:	3344      	adds	r3, #68	@ 0x44
 8006a64:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	3344      	adds	r3, #68	@ 0x44
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d922      	bls.n	8006ac2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	3344      	adds	r3, #68	@ 0x44
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	334c      	adds	r3, #76	@ 0x4c
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	334c      	adds	r3, #76	@ 0x4c
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f00b fcbc 	bl	8012438 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ac0:	e022      	b.n	8006b08 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	334c      	adds	r3, #76	@ 0x4c
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006aec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006af4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b14:	461a      	mov	r2, r3
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	6093      	str	r3, [r2, #8]
 8006b1a:	e217      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	4611      	mov	r1, r2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f005 fabe 	bl	800c0a6 <USB_ReadChInterrupts>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b34:	d11b      	bne.n	8006b6e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	334d      	adds	r3, #77	@ 0x4d
 8006b46:	2209      	movs	r2, #9
 8006b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f006 f83f 	bl	800cbd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b64:	461a      	mov	r2, r3
 8006b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b6a:	6093      	str	r3, [r2, #8]
 8006b6c:	e1ee      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f005 fa95 	bl	800c0a6 <USB_ReadChInterrupts>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	f040 81df 	bne.w	8006f46 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b94:	461a      	mov	r2, r3
 8006b96:	2302      	movs	r3, #2
 8006b98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	334d      	adds	r3, #77	@ 0x4d
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	f040 8093 	bne.w	8006cd8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	334d      	adds	r3, #77	@ 0x4d
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006bc6:	78fa      	ldrb	r2, [r7, #3]
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	334c      	adds	r3, #76	@ 0x4c
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006bda:	78fa      	ldrb	r2, [r7, #3]
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3326      	adds	r3, #38	@ 0x26
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d00b      	beq.n	8006c08 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	3326      	adds	r3, #38	@ 0x26
 8006c00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	f040 8190 	bne.w	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	799b      	ldrb	r3, [r3, #6]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d115      	bne.n	8006c3c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	333d      	adds	r3, #61	@ 0x3d
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	f083 0301 	eor.w	r3, r3, #1
 8006c28:	b2d8      	uxtb	r0, r3
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	333d      	adds	r3, #61	@ 0x3d
 8006c38:	4602      	mov	r2, r0
 8006c3a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	799b      	ldrb	r3, [r3, #6]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 8171 	bne.w	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3334      	adds	r3, #52	@ 0x34
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8165 	beq.w	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3334      	adds	r3, #52	@ 0x34
 8006c6e:	6819      	ldr	r1, [r3, #0]
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	1a9b      	subs	r3, r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4403      	add	r3, r0
 8006c7e:	3328      	adds	r3, #40	@ 0x28
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	440b      	add	r3, r1
 8006c84:	1e59      	subs	r1, r3, #1
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4403      	add	r3, r0
 8006c94:	3328      	adds	r3, #40	@ 0x28
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c9c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 813f 	beq.w	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	333d      	adds	r3, #61	@ 0x3d
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	f083 0301 	eor.w	r3, r3, #1
 8006cc2:	b2d8      	uxtb	r0, r3
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	333d      	adds	r3, #61	@ 0x3d
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	e127      	b.n	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	334d      	adds	r3, #77	@ 0x4d
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d120      	bne.n	8006d30 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	334d      	adds	r3, #77	@ 0x4d
 8006cfe:	2202      	movs	r2, #2
 8006d00:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	331b      	adds	r3, #27
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 8107 	bne.w	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006d1a:	78fa      	ldrb	r2, [r7, #3]
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	334c      	adds	r3, #76	@ 0x4c
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e0fb      	b.n	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	4613      	mov	r3, r2
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	334d      	adds	r3, #77	@ 0x4d
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d13a      	bne.n	8006dbc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	334d      	adds	r3, #77	@ 0x4d
 8006d56:	2202      	movs	r2, #2
 8006d58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	334c      	adds	r3, #76	@ 0x4c
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	331b      	adds	r3, #27
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	f040 80d1 	bne.w	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	331b      	adds	r3, #27
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006db8:	6053      	str	r3, [r2, #4]
 8006dba:	e0b5      	b.n	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	334d      	adds	r3, #77	@ 0x4d
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d114      	bne.n	8006dfc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	334d      	adds	r3, #77	@ 0x4d
 8006de2:	2202      	movs	r2, #2
 8006de4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006de6:	78fa      	ldrb	r2, [r7, #3]
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	1a9b      	subs	r3, r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	334c      	adds	r3, #76	@ 0x4c
 8006df6:	2202      	movs	r2, #2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	e095      	b.n	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	334d      	adds	r3, #77	@ 0x4d
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d114      	bne.n	8006e3c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	1a9b      	subs	r3, r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	334d      	adds	r3, #77	@ 0x4d
 8006e22:	2202      	movs	r2, #2
 8006e24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	334c      	adds	r3, #76	@ 0x4c
 8006e36:	2205      	movs	r2, #5
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e075      	b.n	8006f28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	334d      	adds	r3, #77	@ 0x4d
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b07      	cmp	r3, #7
 8006e50:	d00a      	beq.n	8006e68 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	334d      	adds	r3, #77	@ 0x4d
 8006e62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d170      	bne.n	8006f4a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	334d      	adds	r3, #77	@ 0x4d
 8006e78:	2202      	movs	r2, #2
 8006e7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	3344      	adds	r3, #68	@ 0x44
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	1c59      	adds	r1, r3, #1
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4403      	add	r3, r0
 8006e9c:	3344      	adds	r3, #68	@ 0x44
 8006e9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	1a9b      	subs	r3, r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3344      	adds	r3, #68	@ 0x44
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d914      	bls.n	8006ee0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3344      	adds	r3, #68	@ 0x44
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	334c      	adds	r3, #76	@ 0x4c
 8006eda:	2204      	movs	r2, #4
 8006edc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ede:	e022      	b.n	8006f26 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	334c      	adds	r3, #76	@ 0x4c
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f0a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f12:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f20:	461a      	mov	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	334c      	adds	r3, #76	@ 0x4c
 8006f38:	781a      	ldrb	r2, [r3, #0]
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f00b fa7a 	bl	8012438 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006f44:	e002      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006f46:	bf00      	nop
 8006f48:	e000      	b.n	8006f4c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006f4a:	bf00      	nop
  }
}
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b08a      	sub	sp, #40	@ 0x28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	0c5b      	lsrs	r3, r3, #17
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	091b      	lsrs	r3, r3, #4
 8006f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d004      	beq.n	8006f98 <HCD_RXQLVL_IRQHandler+0x46>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b05      	cmp	r3, #5
 8006f92:	f000 80b6 	beq.w	8007102 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006f96:	e0b7      	b.n	8007108 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80b3 	beq.w	8007106 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	332c      	adds	r3, #44	@ 0x2c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80a7 	beq.w	8007106 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	3338      	adds	r3, #56	@ 0x38
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	18d1      	adds	r1, r2, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	1a9b      	subs	r3, r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4403      	add	r3, r0
 8006fdc:	3334      	adds	r3, #52	@ 0x34
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	f200 8083 	bhi.w	80070ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	332c      	adds	r3, #44	@ 0x2c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	b292      	uxth	r2, r2
 8007000:	4619      	mov	r1, r3
 8007002:	f004 ffe5 	bl	800bfd0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	4613      	mov	r3, r2
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	332c      	adds	r3, #44	@ 0x2c
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	18d1      	adds	r1, r2, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4613      	mov	r3, r2
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4403      	add	r3, r0
 800702a:	332c      	adds	r3, #44	@ 0x2c
 800702c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4613      	mov	r3, r2
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	3338      	adds	r3, #56	@ 0x38
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	18d1      	adds	r1, r2, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4613      	mov	r3, r2
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4403      	add	r3, r0
 8007052:	3338      	adds	r3, #56	@ 0x38
 8007054:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	0cdb      	lsrs	r3, r3, #19
 8007066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800706a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4613      	mov	r3, r2
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	3328      	adds	r3, #40	@ 0x28
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4293      	cmp	r3, r2
 8007084:	d13f      	bne.n	8007106 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d03c      	beq.n	8007106 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b8:	461a      	mov	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4613      	mov	r3, r2
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	333c      	adds	r3, #60	@ 0x3c
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f083 0301 	eor.w	r3, r3, #1
 80070d4:	b2d8      	uxtb	r0, r3
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4613      	mov	r3, r2
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	333c      	adds	r3, #60	@ 0x3c
 80070e6:	4602      	mov	r2, r0
 80070e8:	701a      	strb	r2, [r3, #0]
      break;
 80070ea:	e00c      	b.n	8007106 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	4613      	mov	r3, r2
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	334c      	adds	r3, #76	@ 0x4c
 80070fc:	2204      	movs	r2, #4
 80070fe:	701a      	strb	r2, [r3, #0]
      break;
 8007100:	e001      	b.n	8007106 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007106:	bf00      	nop
  }
}
 8007108:	bf00      	nop
 800710a:	3728      	adds	r7, #40	@ 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800713c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d10b      	bne.n	8007160 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b01      	cmp	r3, #1
 8007150:	d102      	bne.n	8007158 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f00b f954 	bl	8012400 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f043 0302 	orr.w	r3, r3, #2
 800715e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b08      	cmp	r3, #8
 8007168:	d132      	bne.n	80071d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f043 0308 	orr.w	r3, r3, #8
 8007170:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b04      	cmp	r3, #4
 800717a:	d126      	bne.n	80071ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7a5b      	ldrb	r3, [r3, #9]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d113      	bne.n	80071ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800718a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800718e:	d106      	bne.n	800719e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2102      	movs	r1, #2
 8007196:	4618      	mov	r0, r3
 8007198:	f005 f89e 	bl	800c2d8 <USB_InitFSLSPClkSel>
 800719c:	e011      	b.n	80071c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2101      	movs	r1, #1
 80071a4:	4618      	mov	r0, r3
 80071a6:	f005 f897 	bl	800c2d8 <USB_InitFSLSPClkSel>
 80071aa:	e00a      	b.n	80071c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	79db      	ldrb	r3, [r3, #7]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d106      	bne.n	80071c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071ba:	461a      	mov	r2, r3
 80071bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80071c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f00b f946 	bl	8012454 <HAL_HCD_PortEnabled_Callback>
 80071c8:	e002      	b.n	80071d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f00b f950 	bl	8012470 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d103      	bne.n	80071e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f043 0320 	orr.w	r3, r3, #32
 80071e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071e8:	461a      	mov	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6013      	str	r3, [r2, #0]
}
 80071ee:	bf00      	nop
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e12b      	b.n	8007462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fb fa1a 	bl	8002658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2224      	movs	r2, #36	@ 0x24
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0201 	bic.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800724a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800725a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800725c:	f000 ff82 	bl	8008164 <HAL_RCC_GetPCLK1Freq>
 8007260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4a81      	ldr	r2, [pc, #516]	@ (800746c <HAL_I2C_Init+0x274>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d807      	bhi.n	800727c <HAL_I2C_Init+0x84>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a80      	ldr	r2, [pc, #512]	@ (8007470 <HAL_I2C_Init+0x278>)
 8007270:	4293      	cmp	r3, r2
 8007272:	bf94      	ite	ls
 8007274:	2301      	movls	r3, #1
 8007276:	2300      	movhi	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	e006      	b.n	800728a <HAL_I2C_Init+0x92>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a7d      	ldr	r2, [pc, #500]	@ (8007474 <HAL_I2C_Init+0x27c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	bf94      	ite	ls
 8007284:	2301      	movls	r3, #1
 8007286:	2300      	movhi	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0e7      	b.n	8007462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a78      	ldr	r2, [pc, #480]	@ (8007478 <HAL_I2C_Init+0x280>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0c9b      	lsrs	r3, r3, #18
 800729c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a6a      	ldr	r2, [pc, #424]	@ (800746c <HAL_I2C_Init+0x274>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d802      	bhi.n	80072cc <HAL_I2C_Init+0xd4>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	e009      	b.n	80072e0 <HAL_I2C_Init+0xe8>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	4a69      	ldr	r2, [pc, #420]	@ (800747c <HAL_I2C_Init+0x284>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	099b      	lsrs	r3, r3, #6
 80072de:	3301      	adds	r3, #1
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	430b      	orrs	r3, r1
 80072e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80072f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	495c      	ldr	r1, [pc, #368]	@ (800746c <HAL_I2C_Init+0x274>)
 80072fc:	428b      	cmp	r3, r1
 80072fe:	d819      	bhi.n	8007334 <HAL_I2C_Init+0x13c>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1e59      	subs	r1, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	fbb1 f3f3 	udiv	r3, r1, r3
 800730e:	1c59      	adds	r1, r3, #1
 8007310:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007314:	400b      	ands	r3, r1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_I2C_Init+0x138>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1e59      	subs	r1, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	fbb1 f3f3 	udiv	r3, r1, r3
 8007328:	3301      	adds	r3, #1
 800732a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732e:	e051      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 8007330:	2304      	movs	r3, #4
 8007332:	e04f      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d111      	bne.n	8007360 <HAL_I2C_Init+0x168>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	1e58      	subs	r0, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	440b      	add	r3, r1
 800734a:	fbb0 f3f3 	udiv	r3, r0, r3
 800734e:	3301      	adds	r3, #1
 8007350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	e012      	b.n	8007386 <HAL_I2C_Init+0x18e>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1e58      	subs	r0, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	0099      	lsls	r1, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	fbb0 f3f3 	udiv	r3, r0, r3
 8007376:	3301      	adds	r3, #1
 8007378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_I2C_Init+0x196>
 800738a:	2301      	movs	r3, #1
 800738c:	e022      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10e      	bne.n	80073b4 <HAL_I2C_Init+0x1bc>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1e58      	subs	r0, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	440b      	add	r3, r1
 80073a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80073a8:	3301      	adds	r3, #1
 80073aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b2:	e00f      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1e58      	subs	r0, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	0099      	lsls	r1, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ca:	3301      	adds	r3, #1
 80073cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	6809      	ldr	r1, [r1, #0]
 80073d8:	4313      	orrs	r3, r2
 80073da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007402:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6911      	ldr	r1, [r2, #16]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	4311      	orrs	r1, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	430b      	orrs	r3, r1
 8007416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	000186a0 	.word	0x000186a0
 8007470:	001e847f 	.word	0x001e847f
 8007474:	003d08ff 	.word	0x003d08ff
 8007478:	431bde83 	.word	0x431bde83
 800747c:	10624dd3 	.word	0x10624dd3

08007480 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e0bf      	b.n	8007612 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb f954 	bl	8002754 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80074c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6999      	ldr	r1, [r3, #24]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6899      	ldr	r1, [r3, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b4a      	ldr	r3, [pc, #296]	@ (800761c <HAL_LTDC_Init+0x19c>)
 80074f4:	400b      	ands	r3, r1
 80074f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6899      	ldr	r1, [r3, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68d9      	ldr	r1, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4b3e      	ldr	r3, [pc, #248]	@ (800761c <HAL_LTDC_Init+0x19c>)
 8007522:	400b      	ands	r3, r1
 8007524:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68d9      	ldr	r1, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1a      	ldr	r2, [r3, #32]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6919      	ldr	r1, [r3, #16]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b33      	ldr	r3, [pc, #204]	@ (800761c <HAL_LTDC_Init+0x19c>)
 8007550:	400b      	ands	r3, r1
 8007552:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6919      	ldr	r1, [r3, #16]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6959      	ldr	r1, [r3, #20]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b27      	ldr	r3, [pc, #156]	@ (800761c <HAL_LTDC_Init+0x19c>)
 800757e:	400b      	ands	r3, r1
 8007580:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	041b      	lsls	r3, r3, #16
 8007588:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6959      	ldr	r1, [r3, #20]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80075c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0206 	orr.w	r2, r2, #6
 80075ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	f000f800 	.word	0xf000f800

08007620 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007636:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	d023      	beq.n	800768a <HAL_LTDC_IRQHandler+0x6a>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01e      	beq.n	800768a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0204 	bic.w	r2, r2, #4
 800765a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2204      	movs	r2, #4
 8007662:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800766a:	f043 0201 	orr.w	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2204      	movs	r2, #4
 8007678:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f86f 	bl	8007768 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d023      	beq.n	80076dc <HAL_LTDC_IRQHandler+0xbc>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01e      	beq.n	80076dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0202 	bic.w	r2, r2, #2
 80076ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2202      	movs	r2, #2
 80076b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076bc:	f043 0202 	orr.w	r2, r3, #2
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2204      	movs	r2, #4
 80076ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f846 	bl	8007768 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01b      	beq.n	800771e <HAL_LTDC_IRQHandler+0xfe>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d016      	beq.n	800771e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2201      	movs	r2, #1
 8007706:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f82f 	bl	800777c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01b      	beq.n	8007760 <HAL_LTDC_IRQHandler+0x140>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d016      	beq.n	8007760 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0208 	bic.w	r2, r2, #8
 8007740:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2208      	movs	r2, #8
 8007748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f818 	bl	8007790 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80077a4:	b5b0      	push	{r4, r5, r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_LTDC_ConfigLayer+0x1a>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e02c      	b.n	8007818 <HAL_LTDC_ConfigLayer+0x74>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2134      	movs	r1, #52	@ 0x34
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	4413      	add	r3, r2
 80077da:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4614      	mov	r4, r2
 80077e2:	461d      	mov	r5, r3
 80077e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f811 	bl	8007820 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bdb0      	pop	{r4, r5, r7, pc}

08007820 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007820:	b480      	push	{r7}
 8007822:	b089      	sub	sp, #36	@ 0x24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800783c:	4413      	add	r3, r2
 800783e:	041b      	lsls	r3, r3, #16
 8007840:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	01db      	lsls	r3, r3, #7
 800784c:	4413      	add	r3, r2
 800784e:	3384      	adds	r3, #132	@ 0x84
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	4611      	mov	r1, r2
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	01d2      	lsls	r2, r2, #7
 800785c:	440a      	add	r2, r1
 800785e:	3284      	adds	r2, #132	@ 0x84
 8007860:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007864:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	0c1b      	lsrs	r3, r3, #16
 8007872:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007876:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007878:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4619      	mov	r1, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	01db      	lsls	r3, r3, #7
 8007884:	440b      	add	r3, r1
 8007886:	3384      	adds	r3, #132	@ 0x84
 8007888:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800788e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800789e:	4413      	add	r3, r2
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	01db      	lsls	r3, r3, #7
 80078ae:	4413      	add	r3, r2
 80078b0:	3384      	adds	r3, #132	@ 0x84
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	4611      	mov	r1, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	01d2      	lsls	r2, r2, #7
 80078be:	440a      	add	r2, r1
 80078c0:	3284      	adds	r2, #132	@ 0x84
 80078c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80078c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078d6:	4413      	add	r3, r2
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	01db      	lsls	r3, r3, #7
 80078e4:	440b      	add	r3, r1
 80078e6:	3384      	adds	r3, #132	@ 0x84
 80078e8:	4619      	mov	r1, r3
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	01db      	lsls	r3, r3, #7
 80078fa:	4413      	add	r3, r2
 80078fc:	3384      	adds	r3, #132	@ 0x84
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	4611      	mov	r1, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	01d2      	lsls	r2, r2, #7
 800790a:	440a      	add	r2, r1
 800790c:	3284      	adds	r2, #132	@ 0x84
 800790e:	f023 0307 	bic.w	r3, r3, #7
 8007912:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	01db      	lsls	r3, r3, #7
 800791e:	4413      	add	r3, r2
 8007920:	3384      	adds	r3, #132	@ 0x84
 8007922:	461a      	mov	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	061b      	lsls	r3, r3, #24
 8007944:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	01db      	lsls	r3, r3, #7
 8007950:	4413      	add	r3, r2
 8007952:	3384      	adds	r3, #132	@ 0x84
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	4413      	add	r3, r2
 8007962:	3384      	adds	r3, #132	@ 0x84
 8007964:	461a      	mov	r2, r3
 8007966:	2300      	movs	r3, #0
 8007968:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007970:	461a      	mov	r2, r3
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	431a      	orrs	r2, r3
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	431a      	orrs	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	01db      	lsls	r3, r3, #7
 8007984:	440b      	add	r3, r1
 8007986:	3384      	adds	r3, #132	@ 0x84
 8007988:	4619      	mov	r1, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	01db      	lsls	r3, r3, #7
 800799a:	4413      	add	r3, r2
 800799c:	3384      	adds	r3, #132	@ 0x84
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	4611      	mov	r1, r2
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	01d2      	lsls	r2, r2, #7
 80079aa:	440a      	add	r2, r1
 80079ac:	3284      	adds	r2, #132	@ 0x84
 80079ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80079b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	01db      	lsls	r3, r3, #7
 80079be:	4413      	add	r3, r2
 80079c0:	3384      	adds	r3, #132	@ 0x84
 80079c2:	461a      	mov	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	01db      	lsls	r3, r3, #7
 80079d4:	4413      	add	r3, r2
 80079d6:	3384      	adds	r3, #132	@ 0x84
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	4611      	mov	r1, r2
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	01d2      	lsls	r2, r2, #7
 80079e4:	440a      	add	r2, r1
 80079e6:	3284      	adds	r2, #132	@ 0x84
 80079e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80079ec:	f023 0307 	bic.w	r3, r3, #7
 80079f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	6809      	ldr	r1, [r1, #0]
 80079fe:	4608      	mov	r0, r1
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	01c9      	lsls	r1, r1, #7
 8007a04:	4401      	add	r1, r0
 8007a06:	3184      	adds	r1, #132	@ 0x84
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	01db      	lsls	r3, r3, #7
 8007a16:	4413      	add	r3, r2
 8007a18:	3384      	adds	r3, #132	@ 0x84
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	01db      	lsls	r3, r3, #7
 8007a26:	4413      	add	r3, r2
 8007a28:	3384      	adds	r3, #132	@ 0x84
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	01db      	lsls	r3, r3, #7
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3384      	adds	r3, #132	@ 0x84
 8007a3e:	461a      	mov	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a44:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d102      	bne.n	8007a54 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007a4e:	2304      	movs	r3, #4
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	e01b      	b.n	8007a8c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e014      	b.n	8007a8c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d00b      	beq.n	8007a82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d007      	beq.n	8007a82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d003      	beq.n	8007a82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a7e:	2b07      	cmp	r3, #7
 8007a80:	d102      	bne.n	8007a88 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007a82:	2302      	movs	r3, #2
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	e001      	b.n	8007a8c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	01db      	lsls	r3, r3, #7
 8007a96:	4413      	add	r3, r2
 8007a98:	3384      	adds	r3, #132	@ 0x84
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	01d2      	lsls	r2, r2, #7
 8007aa6:	440a      	add	r2, r1
 8007aa8:	3284      	adds	r2, #132	@ 0x84
 8007aaa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	6859      	ldr	r1, [r3, #4]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	1acb      	subs	r3, r1, r3
 8007ac6:	69f9      	ldr	r1, [r7, #28]
 8007ac8:	fb01 f303 	mul.w	r3, r1, r3
 8007acc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6809      	ldr	r1, [r1, #0]
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	01c9      	lsls	r1, r1, #7
 8007ad8:	4401      	add	r1, r0
 8007ada:	3184      	adds	r1, #132	@ 0x84
 8007adc:	4313      	orrs	r3, r2
 8007ade:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	01db      	lsls	r3, r3, #7
 8007aea:	4413      	add	r3, r2
 8007aec:	3384      	adds	r3, #132	@ 0x84
 8007aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	4611      	mov	r1, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	01d2      	lsls	r2, r2, #7
 8007afa:	440a      	add	r2, r1
 8007afc:	3284      	adds	r2, #132	@ 0x84
 8007afe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007b02:	f023 0307 	bic.w	r3, r3, #7
 8007b06:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	01db      	lsls	r3, r3, #7
 8007b12:	4413      	add	r3, r2
 8007b14:	3384      	adds	r3, #132	@ 0x84
 8007b16:	461a      	mov	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	01db      	lsls	r3, r3, #7
 8007b28:	4413      	add	r3, r2
 8007b2a:	3384      	adds	r3, #132	@ 0x84
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	4611      	mov	r1, r2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	01d2      	lsls	r2, r2, #7
 8007b38:	440a      	add	r2, r1
 8007b3a:	3284      	adds	r2, #132	@ 0x84
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6013      	str	r3, [r2, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3724      	adds	r7, #36	@ 0x24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	603b      	str	r3, [r7, #0]
 8007b5e:	4b20      	ldr	r3, [pc, #128]	@ (8007be0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	4a1f      	ldr	r2, [pc, #124]	@ (8007be0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007be0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007b76:	4b1b      	ldr	r3, [pc, #108]	@ (8007be4 <HAL_PWREx_EnableOverDrive+0x94>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b7c:	f7fb fb6a 	bl	8003254 <HAL_GetTick>
 8007b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b82:	e009      	b.n	8007b98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b84:	f7fb fb66 	bl	8003254 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b92:	d901      	bls.n	8007b98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e01f      	b.n	8007bd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b98:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba4:	d1ee      	bne.n	8007b84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007ba6:	4b11      	ldr	r3, [pc, #68]	@ (8007bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bac:	f7fb fb52 	bl	8003254 <HAL_GetTick>
 8007bb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007bb2:	e009      	b.n	8007bc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007bb4:	f7fb fb4e 	bl	8003254 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bc2:	d901      	bls.n	8007bc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e007      	b.n	8007bd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007bc8:	4b07      	ldr	r3, [pc, #28]	@ (8007be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd4:	d1ee      	bne.n	8007bb4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40023800 	.word	0x40023800
 8007be4:	420e0040 	.word	0x420e0040
 8007be8:	40007000 	.word	0x40007000
 8007bec:	420e0044 	.word	0x420e0044

08007bf0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007bf8:	f7fb fb2c 	bl	8003254 <HAL_GetTick>
 8007bfc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e069      	b.n	8007cdc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7fa fdc1 	bl	80027a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007c22:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f85e 	bl	8007ce8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	021a      	lsls	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2120      	movs	r1, #32
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f856 	bl	8007d04 <QSPI_WaitFlagStateUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d137      	bne.n	8007cd2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007c6c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	0611      	lsls	r1, r2, #24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68d2      	ldr	r2, [r2, #12]
 8007c7a:	4311      	orrs	r1, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	69d2      	ldr	r2, [r2, #28]
 8007c80:	4311      	orrs	r1, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6a12      	ldr	r2, [r2, #32]
 8007c86:	4311      	orrs	r1, r2
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6812      	ldr	r2, [r2, #0]
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	4b13      	ldr	r3, [pc, #76]	@ (8007ce4 <HAL_QSPI_Init+0xf4>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6912      	ldr	r2, [r2, #16]
 8007c9e:	0411      	lsls	r1, r2, #16
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6952      	ldr	r2, [r2, #20]
 8007ca4:	4311      	orrs	r1, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6992      	ldr	r2, [r2, #24]
 8007caa:	4311      	orrs	r1, r2
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6812      	ldr	r2, [r2, #0]
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007cda:	7afb      	ldrb	r3, [r7, #11]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	ffe0f8fe 	.word	0xffe0f8fe

08007ce8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	4613      	mov	r3, r2
 8007d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007d14:	e01a      	b.n	8007d4c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d016      	beq.n	8007d4c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1e:	f7fb fa99 	bl	8003254 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d302      	bcc.n	8007d34 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2204      	movs	r2, #4
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d40:	f043 0201 	orr.w	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e00e      	b.n	8007d6a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bf14      	ite	ne
 8007d5a:	2301      	movne	r3, #1
 8007d5c:	2300      	moveq	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d1d6      	bne.n	8007d16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e0cc      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d88:	4b68      	ldr	r3, [pc, #416]	@ (8007f2c <HAL_RCC_ClockConfig+0x1b8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d90c      	bls.n	8007db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d96:	4b65      	ldr	r3, [pc, #404]	@ (8007f2c <HAL_RCC_ClockConfig+0x1b8>)
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d9e:	4b63      	ldr	r3, [pc, #396]	@ (8007f2c <HAL_RCC_ClockConfig+0x1b8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d001      	beq.n	8007db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0b8      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d020      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dc8:	4b59      	ldr	r3, [pc, #356]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	4a58      	ldr	r2, [pc, #352]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007dce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007dd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007de0:	4b53      	ldr	r3, [pc, #332]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4a52      	ldr	r2, [pc, #328]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007de6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dec:	4b50      	ldr	r3, [pc, #320]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	494d      	ldr	r1, [pc, #308]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d044      	beq.n	8007e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d107      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e12:	4b47      	ldr	r3, [pc, #284]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d119      	bne.n	8007e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e07f      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d003      	beq.n	8007e32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d107      	bne.n	8007e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e32:	4b3f      	ldr	r3, [pc, #252]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e06f      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e42:	4b3b      	ldr	r3, [pc, #236]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e067      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e52:	4b37      	ldr	r3, [pc, #220]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f023 0203 	bic.w	r2, r3, #3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	4934      	ldr	r1, [pc, #208]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e64:	f7fb f9f6 	bl	8003254 <HAL_GetTick>
 8007e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e6a:	e00a      	b.n	8007e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e6c:	f7fb f9f2 	bl	8003254 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e04f      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e82:	4b2b      	ldr	r3, [pc, #172]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 020c 	and.w	r2, r3, #12
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d1eb      	bne.n	8007e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e94:	4b25      	ldr	r3, [pc, #148]	@ (8007f2c <HAL_RCC_ClockConfig+0x1b8>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d20c      	bcs.n	8007ebc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b22      	ldr	r3, [pc, #136]	@ (8007f2c <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eaa:	4b20      	ldr	r3, [pc, #128]	@ (8007f2c <HAL_RCC_ClockConfig+0x1b8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e032      	b.n	8007f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ec8:	4b19      	ldr	r3, [pc, #100]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	4916      	ldr	r1, [pc, #88]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ee6:	4b12      	ldr	r3, [pc, #72]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	490e      	ldr	r1, [pc, #56]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007efa:	f000 f821 	bl	8007f40 <HAL_RCC_GetSysClockFreq>
 8007efe:	4602      	mov	r2, r0
 8007f00:	4b0b      	ldr	r3, [pc, #44]	@ (8007f30 <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	091b      	lsrs	r3, r3, #4
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	490a      	ldr	r1, [pc, #40]	@ (8007f34 <HAL_RCC_ClockConfig+0x1c0>)
 8007f0c:	5ccb      	ldrb	r3, [r1, r3]
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	4a09      	ldr	r2, [pc, #36]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007f16:	4b09      	ldr	r3, [pc, #36]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fa ff5e 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40023c00 	.word	0x40023c00
 8007f30:	40023800 	.word	0x40023800
 8007f34:	08013e10 	.word	0x08013e10
 8007f38:	20000000 	.word	0x20000000
 8007f3c:	20000004 	.word	0x20000004

08007f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f44:	b094      	sub	sp, #80	@ 0x50
 8007f46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f58:	4b79      	ldr	r3, [pc, #484]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 030c 	and.w	r3, r3, #12
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d00d      	beq.n	8007f80 <HAL_RCC_GetSysClockFreq+0x40>
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	f200 80e1 	bhi.w	800812c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_RCC_GetSysClockFreq+0x34>
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d003      	beq.n	8007f7a <HAL_RCC_GetSysClockFreq+0x3a>
 8007f72:	e0db      	b.n	800812c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f74:	4b73      	ldr	r3, [pc, #460]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f78:	e0db      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f7a:	4b73      	ldr	r3, [pc, #460]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f7e:	e0d8      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f80:	4b6f      	ldr	r3, [pc, #444]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d063      	beq.n	800805e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f96:	4b6a      	ldr	r3, [pc, #424]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	099b      	lsrs	r3, r3, #6
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007faa:	2300      	movs	r3, #0
 8007fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	f04f 0000 	mov.w	r0, #0
 8007fba:	f04f 0100 	mov.w	r1, #0
 8007fbe:	0159      	lsls	r1, r3, #5
 8007fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fc4:	0150      	lsls	r0, r2, #5
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4621      	mov	r1, r4
 8007fcc:	1a51      	subs	r1, r2, r1
 8007fce:	6139      	str	r1, [r7, #16]
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fe4:	4659      	mov	r1, fp
 8007fe6:	018b      	lsls	r3, r1, #6
 8007fe8:	4651      	mov	r1, sl
 8007fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fee:	4651      	mov	r1, sl
 8007ff0:	018a      	lsls	r2, r1, #6
 8007ff2:	4651      	mov	r1, sl
 8007ff4:	ebb2 0801 	subs.w	r8, r2, r1
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	eb63 0901 	sbc.w	r9, r3, r1
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800800a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800800e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008012:	4690      	mov	r8, r2
 8008014:	4699      	mov	r9, r3
 8008016:	4623      	mov	r3, r4
 8008018:	eb18 0303 	adds.w	r3, r8, r3
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	462b      	mov	r3, r5
 8008020:	eb49 0303 	adc.w	r3, r9, r3
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	f04f 0300 	mov.w	r3, #0
 800802e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008032:	4629      	mov	r1, r5
 8008034:	024b      	lsls	r3, r1, #9
 8008036:	4621      	mov	r1, r4
 8008038:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800803c:	4621      	mov	r1, r4
 800803e:	024a      	lsls	r2, r1, #9
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008046:	2200      	movs	r2, #0
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800804a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800804c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008050:	f7f8 f92e 	bl	80002b0 <__aeabi_uldivmod>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4613      	mov	r3, r2
 800805a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800805c:	e058      	b.n	8008110 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805e:	4b38      	ldr	r3, [pc, #224]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x200>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	099b      	lsrs	r3, r3, #6
 8008064:	2200      	movs	r2, #0
 8008066:	4618      	mov	r0, r3
 8008068:	4611      	mov	r1, r2
 800806a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800806e:	623b      	str	r3, [r7, #32]
 8008070:	2300      	movs	r3, #0
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
 8008074:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	f04f 0000 	mov.w	r0, #0
 8008080:	f04f 0100 	mov.w	r1, #0
 8008084:	0159      	lsls	r1, r3, #5
 8008086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800808a:	0150      	lsls	r0, r2, #5
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4641      	mov	r1, r8
 8008092:	ebb2 0a01 	subs.w	sl, r2, r1
 8008096:	4649      	mov	r1, r9
 8008098:	eb63 0b01 	sbc.w	fp, r3, r1
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80080a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80080ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80080b0:	ebb2 040a 	subs.w	r4, r2, sl
 80080b4:	eb63 050b 	sbc.w	r5, r3, fp
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	f04f 0300 	mov.w	r3, #0
 80080c0:	00eb      	lsls	r3, r5, #3
 80080c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080c6:	00e2      	lsls	r2, r4, #3
 80080c8:	4614      	mov	r4, r2
 80080ca:	461d      	mov	r5, r3
 80080cc:	4643      	mov	r3, r8
 80080ce:	18e3      	adds	r3, r4, r3
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	464b      	mov	r3, r9
 80080d4:	eb45 0303 	adc.w	r3, r5, r3
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080e6:	4629      	mov	r1, r5
 80080e8:	028b      	lsls	r3, r1, #10
 80080ea:	4621      	mov	r1, r4
 80080ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080f0:	4621      	mov	r1, r4
 80080f2:	028a      	lsls	r2, r1, #10
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080fa:	2200      	movs	r2, #0
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	61fa      	str	r2, [r7, #28]
 8008100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008104:	f7f8 f8d4 	bl	80002b0 <__aeabi_uldivmod>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4613      	mov	r3, r2
 800810e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008110:	4b0b      	ldr	r3, [pc, #44]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x200>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	3301      	adds	r3, #1
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800812a:	e002      	b.n	8008132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800812c:	4b05      	ldr	r3, [pc, #20]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x204>)
 800812e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008134:	4618      	mov	r0, r3
 8008136:	3750      	adds	r7, #80	@ 0x50
 8008138:	46bd      	mov	sp, r7
 800813a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800
 8008144:	00f42400 	.word	0x00f42400
 8008148:	007a1200 	.word	0x007a1200

0800814c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008150:	4b03      	ldr	r3, [pc, #12]	@ (8008160 <HAL_RCC_GetHCLKFreq+0x14>)
 8008152:	681b      	ldr	r3, [r3, #0]
}
 8008154:	4618      	mov	r0, r3
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000000 	.word	0x20000000

08008164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008168:	f7ff fff0 	bl	800814c <HAL_RCC_GetHCLKFreq>
 800816c:	4602      	mov	r2, r0
 800816e:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	0a9b      	lsrs	r3, r3, #10
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	4903      	ldr	r1, [pc, #12]	@ (8008188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800817a:	5ccb      	ldrb	r3, [r1, r3]
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008180:	4618      	mov	r0, r3
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40023800 	.word	0x40023800
 8008188:	08013e20 	.word	0x08013e20

0800818c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008190:	f7ff ffdc 	bl	800814c <HAL_RCC_GetHCLKFreq>
 8008194:	4602      	mov	r2, r0
 8008196:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	0b5b      	lsrs	r3, r3, #13
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	4903      	ldr	r1, [pc, #12]	@ (80081b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081a2:	5ccb      	ldrb	r3, [r1, r3]
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40023800 	.word	0x40023800
 80081b0:	08013e20 	.word	0x08013e20

080081b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	220f      	movs	r2, #15
 80081c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80081c4:	4b12      	ldr	r3, [pc, #72]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 0203 	and.w	r2, r3, #3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	08db      	lsrs	r3, r3, #3
 80081ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081f6:	4b07      	ldr	r3, [pc, #28]	@ (8008214 <HAL_RCC_GetClockConfig+0x60>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 020f 	and.w	r2, r3, #15
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40023800 	.word	0x40023800
 8008214:	40023c00 	.word	0x40023c00

08008218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008240:	4b66      	ldr	r3, [pc, #408]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008246:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824e:	4963      	ldr	r1, [pc, #396]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008262:	4b5e      	ldr	r3, [pc, #376]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008268:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008270:	495a      	ldr	r1, [pc, #360]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008298:	2b00      	cmp	r3, #0
 800829a:	d075      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800829c:	4b50      	ldr	r3, [pc, #320]	@ (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082a2:	f7fa ffd7 	bl	8003254 <HAL_GetTick>
 80082a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082a8:	e008      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082aa:	f7fa ffd3 	bl	8003254 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d901      	bls.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e1dc      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082bc:	4b47      	ldr	r3, [pc, #284]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f0      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	019a      	lsls	r2, r3, #6
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	071b      	lsls	r3, r3, #28
 80082e0:	493e      	ldr	r1, [pc, #248]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01f      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80082f4:	4b39      	ldr	r3, [pc, #228]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082fa:	0f1b      	lsrs	r3, r3, #28
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	019a      	lsls	r2, r3, #6
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	061b      	lsls	r3, r3, #24
 800830e:	431a      	orrs	r2, r3
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	071b      	lsls	r3, r3, #28
 8008314:	4931      	ldr	r1, [pc, #196]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800831c:	4b2f      	ldr	r3, [pc, #188]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800831e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008322:	f023 021f 	bic.w	r2, r3, #31
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	3b01      	subs	r3, #1
 800832c:	492b      	ldr	r1, [pc, #172]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00d      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	019a      	lsls	r2, r3, #6
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	071b      	lsls	r3, r3, #28
 8008354:	4921      	ldr	r1, [pc, #132]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800835c:	4b20      	ldr	r3, [pc, #128]	@ (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008362:	f7fa ff77 	bl	8003254 <HAL_GetTick>
 8008366:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008368:	e008      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800836a:	f7fa ff73 	bl	8003254 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e17c      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800837c:	4b17      	ldr	r3, [pc, #92]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0f0      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d112      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10c      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80ce 	beq.w	800854a <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80083b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083b6:	f040 80c8 	bne.w	800854a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80083ba:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083c0:	f7fa ff48 	bl	8003254 <HAL_GetTick>
 80083c4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083c6:	e00f      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083c8:	f7fa ff44 	bl	8003254 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d908      	bls.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e14d      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	42470068 	.word	0x42470068
 80083e4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083e8:	4ba5      	ldr	r3, [pc, #660]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f4:	d0e8      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0304 	and.w	r3, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02e      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008402:	4b9f      	ldr	r3, [pc, #636]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	3301      	adds	r3, #1
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008414:	4b9a      	ldr	r3, [pc, #616]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800841a:	0f1b      	lsrs	r3, r3, #28
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	019a      	lsls	r2, r3, #6
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	3b01      	subs	r3, #1
 800842e:	041b      	lsls	r3, r3, #16
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	061b      	lsls	r3, r3, #24
 8008438:	431a      	orrs	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	071b      	lsls	r3, r3, #28
 800843e:	4990      	ldr	r1, [pc, #576]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008446:	4b8e      	ldr	r3, [pc, #568]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800844c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	3b01      	subs	r3, #1
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	4989      	ldr	r1, [pc, #548]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800845a:	4313      	orrs	r3, r2
 800845c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b00      	cmp	r3, #0
 800846a:	d02c      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800846c:	4b84      	ldr	r3, [pc, #528]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008472:	0c1b      	lsrs	r3, r3, #16
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	3301      	adds	r3, #1
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800847e:	4b80      	ldr	r3, [pc, #512]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008484:	0e1b      	lsrs	r3, r3, #24
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	019a      	lsls	r2, r3, #6
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	3b01      	subs	r3, #1
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	431a      	orrs	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	061b      	lsls	r3, r3, #24
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	071b      	lsls	r3, r3, #28
 80084a8:	4975      	ldr	r1, [pc, #468]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80084b0:	4b73      	ldr	r3, [pc, #460]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084be:	4970      	ldr	r1, [pc, #448]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d024      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80084d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084da:	d11f      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084dc:	4b68      	ldr	r3, [pc, #416]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e2:	0e1b      	lsrs	r3, r3, #24
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084ea:	4b65      	ldr	r3, [pc, #404]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f0:	0f1b      	lsrs	r3, r3, #28
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	019a      	lsls	r2, r3, #6
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	3b01      	subs	r3, #1
 8008506:	041b      	lsls	r3, r3, #16
 8008508:	431a      	orrs	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	431a      	orrs	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	071b      	lsls	r3, r3, #28
 8008514:	495a      	ldr	r1, [pc, #360]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800851c:	4b59      	ldr	r3, [pc, #356]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008522:	f7fa fe97 	bl	8003254 <HAL_GetTick>
 8008526:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008528:	e008      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800852a:	f7fa fe93 	bl	8003254 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e09c      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800853c:	4b50      	ldr	r3, [pc, #320]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008548:	d1ef      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 8083 	beq.w	800865e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008558:	2300      	movs	r3, #0
 800855a:	60bb      	str	r3, [r7, #8]
 800855c:	4b48      	ldr	r3, [pc, #288]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800855e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008560:	4a47      	ldr	r2, [pc, #284]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008566:	6413      	str	r3, [r2, #64]	@ 0x40
 8008568:	4b45      	ldr	r3, [pc, #276]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800856a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008570:	60bb      	str	r3, [r7, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008574:	4b44      	ldr	r3, [pc, #272]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a43      	ldr	r2, [pc, #268]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800857a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800857e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008580:	f7fa fe68 	bl	8003254 <HAL_GetTick>
 8008584:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008586:	e008      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008588:	f7fa fe64 	bl	8003254 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e06d      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800859a:	4b3b      	ldr	r3, [pc, #236]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0f0      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085a6:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ae:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d02f      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d028      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085c4:	4b2e      	ldr	r3, [pc, #184]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085cc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085ce:	4b2f      	ldr	r3, [pc, #188]	@ (800868c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085d4:	4b2d      	ldr	r3, [pc, #180]	@ (800868c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085da:	4a29      	ldr	r2, [pc, #164]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085e0:	4b27      	ldr	r3, [pc, #156]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d114      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085ec:	f7fa fe32 	bl	8003254 <HAL_GetTick>
 80085f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f2:	e00a      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f4:	f7fa fe2e 	bl	8003254 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008602:	4293      	cmp	r3, r2
 8008604:	d901      	bls.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e035      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800860a:	4b1d      	ldr	r3, [pc, #116]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800860c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0ee      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800861e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008622:	d10d      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008624:	4b16      	ldr	r3, [pc, #88]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008638:	4911      	ldr	r1, [pc, #68]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800863a:	4313      	orrs	r3, r2
 800863c:	608b      	str	r3, [r1, #8]
 800863e:	e005      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008640:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	4a0e      	ldr	r2, [pc, #56]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008646:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800864a:	6093      	str	r3, [r2, #8]
 800864c:	4b0c      	ldr	r3, [pc, #48]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800864e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008658:	4909      	ldr	r1, [pc, #36]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800865a:	4313      	orrs	r3, r2
 800865c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b00      	cmp	r3, #0
 8008668:	d004      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008672:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40023800 	.word	0x40023800
 8008684:	42470070 	.word	0x42470070
 8008688:	40007000 	.word	0x40007000
 800868c:	42470e40 	.word	0x42470e40
 8008690:	424711e0 	.word	0x424711e0

08008694 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e273      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d075      	beq.n	800879e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086b2:	4b88      	ldr	r3, [pc, #544]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 030c 	and.w	r3, r3, #12
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d00c      	beq.n	80086d8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086be:	4b85      	ldr	r3, [pc, #532]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d112      	bne.n	80086f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ca:	4b82      	ldr	r3, [pc, #520]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086d6:	d10b      	bne.n	80086f0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d8:	4b7e      	ldr	r3, [pc, #504]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05b      	beq.n	800879c <HAL_RCC_OscConfig+0x108>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d157      	bne.n	800879c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e24e      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086f8:	d106      	bne.n	8008708 <HAL_RCC_OscConfig+0x74>
 80086fa:	4b76      	ldr	r3, [pc, #472]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a75      	ldr	r2, [pc, #468]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	e01d      	b.n	8008744 <HAL_RCC_OscConfig+0xb0>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008710:	d10c      	bne.n	800872c <HAL_RCC_OscConfig+0x98>
 8008712:	4b70      	ldr	r3, [pc, #448]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a6f      	ldr	r2, [pc, #444]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	4b6d      	ldr	r3, [pc, #436]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a6c      	ldr	r2, [pc, #432]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	e00b      	b.n	8008744 <HAL_RCC_OscConfig+0xb0>
 800872c:	4b69      	ldr	r3, [pc, #420]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a68      	ldr	r2, [pc, #416]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	4b66      	ldr	r3, [pc, #408]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a65      	ldr	r2, [pc, #404]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 800873e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d013      	beq.n	8008774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874c:	f7fa fd82 	bl	8003254 <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008754:	f7fa fd7e 	bl	8003254 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b64      	cmp	r3, #100	@ 0x64
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e213      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008766:	4b5b      	ldr	r3, [pc, #364]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f0      	beq.n	8008754 <HAL_RCC_OscConfig+0xc0>
 8008772:	e014      	b.n	800879e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008774:	f7fa fd6e 	bl	8003254 <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800877c:	f7fa fd6a 	bl	8003254 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b64      	cmp	r3, #100	@ 0x64
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e1ff      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800878e:	4b51      	ldr	r3, [pc, #324]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1f0      	bne.n	800877c <HAL_RCC_OscConfig+0xe8>
 800879a:	e000      	b.n	800879e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800879c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d063      	beq.n	8008872 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80087aa:	4b4a      	ldr	r3, [pc, #296]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f003 030c 	and.w	r3, r3, #12
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00b      	beq.n	80087ce <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087b6:	4b47      	ldr	r3, [pc, #284]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80087be:	2b08      	cmp	r3, #8
 80087c0:	d11c      	bne.n	80087fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c2:	4b44      	ldr	r3, [pc, #272]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d116      	bne.n	80087fc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ce:	4b41      	ldr	r3, [pc, #260]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_RCC_OscConfig+0x152>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d001      	beq.n	80087e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e1d3      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087e6:	4b3b      	ldr	r3, [pc, #236]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	4937      	ldr	r1, [pc, #220]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087fa:	e03a      	b.n	8008872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d020      	beq.n	8008846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008804:	4b34      	ldr	r3, [pc, #208]	@ (80088d8 <HAL_RCC_OscConfig+0x244>)
 8008806:	2201      	movs	r2, #1
 8008808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880a:	f7fa fd23 	bl	8003254 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008812:	f7fa fd1f 	bl	8003254 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e1b4      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008824:	4b2b      	ldr	r3, [pc, #172]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008830:	4b28      	ldr	r3, [pc, #160]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4925      	ldr	r1, [pc, #148]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008840:	4313      	orrs	r3, r2
 8008842:	600b      	str	r3, [r1, #0]
 8008844:	e015      	b.n	8008872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008846:	4b24      	ldr	r3, [pc, #144]	@ (80088d8 <HAL_RCC_OscConfig+0x244>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800884c:	f7fa fd02 	bl	8003254 <HAL_GetTick>
 8008850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008854:	f7fa fcfe 	bl	8003254 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e193      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008866:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f0      	bne.n	8008854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d036      	beq.n	80088ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008886:	4b15      	ldr	r3, [pc, #84]	@ (80088dc <HAL_RCC_OscConfig+0x248>)
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888c:	f7fa fce2 	bl	8003254 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008894:	f7fa fcde 	bl	8003254 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e173      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088a6:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <HAL_RCC_OscConfig+0x240>)
 80088a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x200>
 80088b2:	e01b      	b.n	80088ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088b4:	4b09      	ldr	r3, [pc, #36]	@ (80088dc <HAL_RCC_OscConfig+0x248>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ba:	f7fa fccb 	bl	8003254 <HAL_GetTick>
 80088be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088c0:	e00e      	b.n	80088e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c2:	f7fa fcc7 	bl	8003254 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d907      	bls.n	80088e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e15c      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
 80088d4:	40023800 	.word	0x40023800
 80088d8:	42470000 	.word	0x42470000
 80088dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e0:	4b8a      	ldr	r3, [pc, #552]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 80088e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1ea      	bne.n	80088c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8097 	beq.w	8008a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088fe:	4b83      	ldr	r3, [pc, #524]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10f      	bne.n	800892a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	4b7f      	ldr	r3, [pc, #508]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008912:	4a7e      	ldr	r2, [pc, #504]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008918:	6413      	str	r3, [r2, #64]	@ 0x40
 800891a:	4b7c      	ldr	r3, [pc, #496]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 800891c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008922:	60bb      	str	r3, [r7, #8]
 8008924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892a:	4b79      	ldr	r3, [pc, #484]	@ (8008b10 <HAL_RCC_OscConfig+0x47c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008932:	2b00      	cmp	r3, #0
 8008934:	d118      	bne.n	8008968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008936:	4b76      	ldr	r3, [pc, #472]	@ (8008b10 <HAL_RCC_OscConfig+0x47c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a75      	ldr	r2, [pc, #468]	@ (8008b10 <HAL_RCC_OscConfig+0x47c>)
 800893c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008942:	f7fa fc87 	bl	8003254 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008948:	e008      	b.n	800895c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800894a:	f7fa fc83 	bl	8003254 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e118      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800895c:	4b6c      	ldr	r3, [pc, #432]	@ (8008b10 <HAL_RCC_OscConfig+0x47c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0f0      	beq.n	800894a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d106      	bne.n	800897e <HAL_RCC_OscConfig+0x2ea>
 8008970:	4b66      	ldr	r3, [pc, #408]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008974:	4a65      	ldr	r2, [pc, #404]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	6713      	str	r3, [r2, #112]	@ 0x70
 800897c:	e01c      	b.n	80089b8 <HAL_RCC_OscConfig+0x324>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b05      	cmp	r3, #5
 8008984:	d10c      	bne.n	80089a0 <HAL_RCC_OscConfig+0x30c>
 8008986:	4b61      	ldr	r3, [pc, #388]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898a:	4a60      	ldr	r2, [pc, #384]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 800898c:	f043 0304 	orr.w	r3, r3, #4
 8008990:	6713      	str	r3, [r2, #112]	@ 0x70
 8008992:	4b5e      	ldr	r3, [pc, #376]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008996:	4a5d      	ldr	r2, [pc, #372]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	6713      	str	r3, [r2, #112]	@ 0x70
 800899e:	e00b      	b.n	80089b8 <HAL_RCC_OscConfig+0x324>
 80089a0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 80089a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a4:	4a59      	ldr	r2, [pc, #356]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ac:	4b57      	ldr	r3, [pc, #348]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b0:	4a56      	ldr	r2, [pc, #344]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 80089b2:	f023 0304 	bic.w	r3, r3, #4
 80089b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d015      	beq.n	80089ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c0:	f7fa fc48 	bl	8003254 <HAL_GetTick>
 80089c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089c6:	e00a      	b.n	80089de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c8:	f7fa fc44 	bl	8003254 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e0d7      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089de:	4b4b      	ldr	r3, [pc, #300]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0ee      	beq.n	80089c8 <HAL_RCC_OscConfig+0x334>
 80089ea:	e014      	b.n	8008a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ec:	f7fa fc32 	bl	8003254 <HAL_GetTick>
 80089f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089f2:	e00a      	b.n	8008a0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089f4:	f7fa fc2e 	bl	8003254 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e0c1      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a0a:	4b40      	ldr	r3, [pc, #256]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1ee      	bne.n	80089f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d105      	bne.n	8008a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a20:	4a3a      	ldr	r2, [pc, #232]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 80ad 	beq.w	8008b8c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a32:	4b36      	ldr	r3, [pc, #216]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f003 030c 	and.w	r3, r3, #12
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d060      	beq.n	8008b00 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d145      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a46:	4b33      	ldr	r3, [pc, #204]	@ (8008b14 <HAL_RCC_OscConfig+0x480>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4c:	f7fa fc02 	bl	8003254 <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a54:	f7fa fbfe 	bl	8003254 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e093      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a66:	4b29      	ldr	r3, [pc, #164]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f0      	bne.n	8008a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69da      	ldr	r2, [r3, #28]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a80:	019b      	lsls	r3, r3, #6
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	041b      	lsls	r3, r3, #16
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a94:	061b      	lsls	r3, r3, #24
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9c:	071b      	lsls	r3, r3, #28
 8008a9e:	491b      	ldr	r1, [pc, #108]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b14 <HAL_RCC_OscConfig+0x480>)
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aaa:	f7fa fbd3 	bl	8003254 <HAL_GetTick>
 8008aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab2:	f7fa fbcf 	bl	8003254 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e064      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac4:	4b11      	ldr	r3, [pc, #68]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0f0      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x41e>
 8008ad0:	e05c      	b.n	8008b8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ad2:	4b10      	ldr	r3, [pc, #64]	@ (8008b14 <HAL_RCC_OscConfig+0x480>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad8:	f7fa fbbc 	bl	8003254 <HAL_GetTick>
 8008adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ae0:	f7fa fbb8 	bl	8003254 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e04d      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008af2:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <HAL_RCC_OscConfig+0x478>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f0      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x44c>
 8008afe:	e045      	b.n	8008b8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d107      	bne.n	8008b18 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e040      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
 8008b0c:	40023800 	.word	0x40023800
 8008b10:	40007000 	.word	0x40007000
 8008b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b18:	4b1f      	ldr	r3, [pc, #124]	@ (8008b98 <HAL_RCC_OscConfig+0x504>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d030      	beq.n	8008b88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d129      	bne.n	8008b88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d122      	bne.n	8008b88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b48:	4013      	ands	r3, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d119      	bne.n	8008b88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5e:	085b      	lsrs	r3, r3, #1
 8008b60:	3b01      	subs	r3, #1
 8008b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d10f      	bne.n	8008b88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d107      	bne.n	8008b88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d001      	beq.n	8008b8c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e000      	b.n	8008b8e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40023800 	.word	0x40023800

08008b9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e10c      	b.n	8008dd8 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fa f8a2 	bl	8002d1c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f903 	bl	8008dec <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f938 	bl	8008e5c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d030      	beq.n	8008c56 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f957 	bl	8008ea8 <SAI_GetInputClock>
 8008bfa:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	461a      	mov	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	025b      	lsls	r3, r3, #9
 8008c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c12:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4a72      	ldr	r2, [pc, #456]	@ (8008de0 <HAL_SAI_Init+0x244>)
 8008c18:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1c:	08da      	lsrs	r2, r3, #3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	4b6e      	ldr	r3, [pc, #440]	@ (8008de0 <HAL_SAI_Init+0x244>)
 8008c26:	fba3 2301 	umull	r2, r3, r3, r1
 8008c2a:	08da      	lsrs	r2, r3, #3
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	1aca      	subs	r2, r1, r3
 8008c36:	2a08      	cmp	r2, #8
 8008c38:	d904      	bls.n	8008c44 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d104      	bne.n	8008c56 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	085a      	lsrs	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_SAI_Init+0xca>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d109      	bne.n	8008c7a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_SAI_Init+0xd6>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e001      	b.n	8008c76 <HAL_SAI_Init+0xda>
 8008c72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	e008      	b.n	8008c8c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d102      	bne.n	8008c88 <HAL_SAI_Init+0xec>
 8008c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c86:	e000      	b.n	8008c8a <HAL_SAI_Init+0xee>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d811      	bhi.n	8008cb8 <HAL_SAI_Init+0x11c>
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d20b      	bcs.n	8008cb0 <HAL_SAI_Init+0x114>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <HAL_SAI_Init+0x106>
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d003      	beq.n	8008ca8 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8008ca0:	e00a      	b.n	8008cb8 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
    break;
 8008ca6:	e008      	b.n	8008cba <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cac:	613b      	str	r3, [r7, #16]
    break;
 8008cae:	e004      	b.n	8008cba <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008cb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008cb4:	613b      	str	r3, [r7, #16]
    break;
 8008cb6:	e000      	b.n	8008cba <HAL_SAI_Init+0x11e>
      break;
 8008cb8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	4b47      	ldr	r3, [pc, #284]	@ (8008de4 <HAL_SAI_Init+0x248>)
 8008cc6:	400b      	ands	r3, r1
 8008cc8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6819      	ldr	r1, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cde:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8008cf2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cfe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d04:	051b      	lsls	r3, r3, #20
 8008d06:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008d1e:	f023 030f 	bic.w	r3, r3, #15
 8008d22:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6859      	ldr	r1, [r3, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6899      	ldr	r1, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	4b26      	ldr	r3, [pc, #152]	@ (8008de8 <HAL_SAI_Init+0x24c>)
 8008d4e:	400b      	ands	r3, r1
 8008d50:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6899      	ldr	r1, [r3, #8]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d62:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8008d68:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8008d6e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d74:	3b01      	subs	r3, #1
 8008d76:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008d78:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68d9      	ldr	r1, [r3, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008d90:	400b      	ands	r3, r1
 8008d92:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68d9      	ldr	r1, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008da2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008daa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008db0:	3b01      	subs	r3, #1
 8008db2:	021b      	lsls	r3, r3, #8
 8008db4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	cccccccd 	.word	0xcccccccd
 8008de4:	ff05c010 	.word	0xff05c010
 8008de8:	fff88000 	.word	0xfff88000

08008dec <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008df4:	4b17      	ldr	r3, [pc, #92]	@ (8008e54 <SAI_Disable+0x68>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a17      	ldr	r2, [pc, #92]	@ (8008e58 <SAI_Disable+0x6c>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	0b1b      	lsrs	r3, r3, #12
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008e16:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	60fa      	str	r2, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10a      	bne.n	8008e38 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	72fb      	strb	r3, [r7, #11]
      break;
 8008e36:	e006      	b.n	8008e46 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e8      	bne.n	8008e18 <SAI_Disable+0x2c>

  return status;
 8008e46:	7afb      	ldrb	r3, [r7, #11]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	20000000 	.word	0x20000000
 8008e58:	95cbec1b 	.word	0x95cbec1b

08008e5c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d00c      	beq.n	8008e86 <SAI_BlockSynchroConfig+0x2a>
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d80d      	bhi.n	8008e8c <SAI_BlockSynchroConfig+0x30>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d002      	beq.n	8008e7a <SAI_BlockSynchroConfig+0x1e>
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d003      	beq.n	8008e80 <SAI_BlockSynchroConfig+0x24>
 8008e78:	e008      	b.n	8008e8c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
      break;
 8008e7e:	e008      	b.n	8008e92 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008e80:	2310      	movs	r3, #16
 8008e82:	60fb      	str	r3, [r7, #12]
      break;
 8008e84:	e005      	b.n	8008e92 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008e86:	2320      	movs	r3, #32
 8008e88:	60fb      	str	r3, [r7, #12]
      break;
 8008e8a:	e002      	b.n	8008e92 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
      break;
 8008e90:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8008e92:	4a04      	ldr	r2, [pc, #16]	@ (8008ea4 <SAI_BlockSynchroConfig+0x48>)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8008e98:	bf00      	nop
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	40015800 	.word	0x40015800

08008ea8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a46      	ldr	r2, [pc, #280]	@ (8008fdc <SAI_GetInputClock+0x134>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d10b      	bne.n	8008ede <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8008ec6:	4b46      	ldr	r3, [pc, #280]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ecc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	4942      	ldr	r1, [pc, #264]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8008edc:	e00b      	b.n	8008ef6 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8008ede:	4b40      	ldr	r3, [pc, #256]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ee4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	493c      	ldr	r1, [pc, #240]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d108      	bne.n	8008f14 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f02:	4b37      	ldr	r3, [pc, #220]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f0a:	4a36      	ldr	r2, [pc, #216]	@ (8008fe4 <SAI_GetInputClock+0x13c>)
 8008f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e007      	b.n	8008f24 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f14:	4b32      	ldr	r3, [pc, #200]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f1c:	4a32      	ldr	r2, [pc, #200]	@ (8008fe8 <SAI_GetInputClock+0x140>)
 8008f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f22:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d121      	bne.n	8008f70 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8008f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f32:	0e1b      	lsrs	r3, r3, #24
 8008f34:	f003 030f 	and.w	r3, r3, #15
 8008f38:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8008f3a:	4b29      	ldr	r3, [pc, #164]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f40:	099b      	lsrs	r3, r3, #6
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	fb03 f202 	mul.w	r2, r3, r2
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f52:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8008f54:	4b22      	ldr	r3, [pc, #136]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f5a:	0a1b      	lsrs	r3, r3, #8
 8008f5c:	f003 031f 	and.w	r3, r3, #31
 8008f60:	3301      	adds	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	e02d      	b.n	8008fcc <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f78:	d120      	bne.n	8008fbc <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8008f7a:	4b19      	ldr	r3, [pc, #100]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f80:	0e1b      	lsrs	r3, r3, #24
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8008f88:	4b15      	ldr	r3, [pc, #84]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f8e:	099b      	lsrs	r3, r3, #6
 8008f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	fb03 f202 	mul.w	r2, r3, r2
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa0:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e007      	b.n	8008fcc <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8008fbc:	4b08      	ldr	r3, [pc, #32]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	4a07      	ldr	r2, [pc, #28]	@ (8008fe0 <SAI_GetInputClock+0x138>)
 8008fc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fc6:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8008fc8:	4b08      	ldr	r3, [pc, #32]	@ (8008fec <SAI_GetInputClock+0x144>)
 8008fca:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8008fcc:	697b      	ldr	r3, [r7, #20]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40015804 	.word	0x40015804
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	00f42400 	.word	0x00f42400
 8008fe8:	007a1200 	.word	0x007a1200
 8008fec:	00bb8000 	.word	0x00bb8000

08008ff0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e022      	b.n	8009048 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7f9 fc3f 	bl	8002898 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2203      	movs	r2, #3
 800901e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f814 	bl	8009050 <HAL_SD_InitCard>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e00a      	b.n	8009048 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009050:	b5b0      	push	{r4, r5, r7, lr}
 8009052:	b08e      	sub	sp, #56	@ 0x38
 8009054:	af04      	add	r7, sp, #16
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009058:	2300      	movs	r3, #0
 800905a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009068:	2300      	movs	r3, #0
 800906a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800906c:	2376      	movs	r3, #118	@ 0x76
 800906e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681d      	ldr	r5, [r3, #0]
 8009074:	466c      	mov	r4, sp
 8009076:	f107 0314 	add.w	r3, r7, #20
 800907a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800907e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009088:	4628      	mov	r0, r5
 800908a:	f002 f8ff 	bl	800b28c <SDIO_Init>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e04f      	b.n	8009140 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80090a0:	4b29      	ldr	r3, [pc, #164]	@ (8009148 <HAL_SD_InitCard+0xf8>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 f937 	bl	800b31e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80090b0:	4b25      	ldr	r3, [pc, #148]	@ (8009148 <HAL_SD_InitCard+0xf8>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80090b6:	2002      	movs	r0, #2
 80090b8:	f7fa f8d8 	bl	800326c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 ff55 	bl	8009f6c <SD_PowerON>
 80090c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e02e      	b.n	8009140 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fe74 	bl	8009dd0 <SD_InitCard>
 80090e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e01b      	b.n	8009140 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009110:	4618      	mov	r0, r3
 8009112:	f002 f996 	bl	800b442 <SDMMC_CmdBlockLength>
 8009116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00f      	beq.n	800913e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a0a      	ldr	r2, [pc, #40]	@ (800914c <HAL_SD_InitCard+0xfc>)
 8009124:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e000      	b.n	8009140 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3728      	adds	r7, #40	@ 0x28
 8009144:	46bd      	mov	sp, r7
 8009146:	bdb0      	pop	{r4, r5, r7, pc}
 8009148:	422580a0 	.word	0x422580a0
 800914c:	004005ff 	.word	0x004005ff

08009150 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08c      	sub	sp, #48	@ 0x30
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d107      	bne.n	8009178 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e0be      	b.n	80092f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	f040 80b7 	bne.w	80092f4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800918c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	441a      	add	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009196:	429a      	cmp	r2, r3
 8009198:	d907      	bls.n	80091aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e0a5      	b.n	80092f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2203      	movs	r2, #3
 80091ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2200      	movs	r2, #0
 80091b8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80091c8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ce:	4a4c      	ldr	r2, [pc, #304]	@ (8009300 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80091d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d6:	4a4b      	ldr	r2, [pc, #300]	@ (8009304 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80091d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	2200      	movs	r2, #0
 80091e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e6:	2200      	movs	r2, #0
 80091e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3380      	adds	r3, #128	@ 0x80
 8009210:	4619      	mov	r1, r3
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	025b      	lsls	r3, r3, #9
 8009218:	089b      	lsrs	r3, r3, #2
 800921a:	f7fa f9f7 	bl	800360c <HAL_DMA_Start_IT>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d017      	beq.n	8009254 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009232:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a33      	ldr	r2, [pc, #204]	@ (8009308 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800923a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009240:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e050      	b.n	80092f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009254:	4b2d      	ldr	r3, [pc, #180]	@ (800930c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009256:	2201      	movs	r2, #1
 8009258:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800925e:	2b01      	cmp	r3, #1
 8009260:	d002      	beq.n	8009268 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	025b      	lsls	r3, r3, #9
 8009266:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	025b      	lsls	r3, r3, #9
 8009272:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009274:	2390      	movs	r3, #144	@ 0x90
 8009276:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009278:	2302      	movs	r3, #2
 800927a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800927c:	2300      	movs	r3, #0
 800927e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009280:	2301      	movs	r3, #1
 8009282:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f107 0210 	add.w	r2, r7, #16
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f002 f8ab 	bl	800b3ea <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d90a      	bls.n	80092b0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2282      	movs	r2, #130	@ 0x82
 800929e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092a6:	4618      	mov	r0, r3
 80092a8:	f002 f90f 	bl	800b4ca <SDMMC_CmdReadMultiBlock>
 80092ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80092ae:	e009      	b.n	80092c4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2281      	movs	r2, #129	@ 0x81
 80092b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092bc:	4618      	mov	r0, r3
 80092be:	f002 f8e2 	bl	800b486 <SDMMC_CmdReadSingleBlock>
 80092c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80092c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d012      	beq.n	80092f0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009308 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80092d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d8:	431a      	orrs	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e002      	b.n	80092f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	e000      	b.n	80092f6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80092f4:	2302      	movs	r3, #2
  }
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3730      	adds	r7, #48	@ 0x30
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	08009bdf 	.word	0x08009bdf
 8009304:	08009c51 	.word	0x08009c51
 8009308:	004005ff 	.word	0x004005ff
 800930c:	4225858c 	.word	0x4225858c

08009310 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08c      	sub	sp, #48	@ 0x30
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d107      	bne.n	8009338 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0c1      	b.n	80094bc <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b01      	cmp	r3, #1
 8009342:	f040 80ba 	bne.w	80094ba <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800934c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	441a      	add	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009356:	429a      	cmp	r2, r3
 8009358:	d907      	bls.n	800936a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e0a8      	b.n	80094bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2203      	movs	r2, #3
 800936e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2200      	movs	r2, #0
 8009378:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f042 021a 	orr.w	r2, r2, #26
 8009388:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800938e:	4a4d      	ldr	r2, [pc, #308]	@ (80094c4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009396:	4a4c      	ldr	r2, [pc, #304]	@ (80094c8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009398:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939e:	2200      	movs	r2, #0
 80093a0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d002      	beq.n	80093b0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	025b      	lsls	r3, r3, #9
 80093ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d90a      	bls.n	80093cc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	22a0      	movs	r2, #160	@ 0xa0
 80093ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093c2:	4618      	mov	r0, r3
 80093c4:	f002 f8c5 	bl	800b552 <SDMMC_CmdWriteMultiBlock>
 80093c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80093ca:	e009      	b.n	80093e0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2290      	movs	r2, #144	@ 0x90
 80093d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093d8:	4618      	mov	r0, r3
 80093da:	f002 f898 	bl	800b50e <SDMMC_CmdWriteSingleBlock>
 80093de:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d012      	beq.n	800940c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a38      	ldr	r2, [pc, #224]	@ (80094cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80093ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	431a      	orrs	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e057      	b.n	80094bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800940c:	4b30      	ldr	r3, [pc, #192]	@ (80094d0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800940e:	2201      	movs	r2, #1
 8009410:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009416:	2240      	movs	r2, #64	@ 0x40
 8009418:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3380      	adds	r3, #128	@ 0x80
 8009442:	461a      	mov	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	025b      	lsls	r3, r3, #9
 8009448:	089b      	lsrs	r3, r3, #2
 800944a:	f7fa f8df 	bl	800360c <HAL_DMA_Start_IT>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01a      	beq.n	800948a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 021a 	bic.w	r2, r2, #26
 8009462:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800946a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e018      	b.n	80094bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800948a:	f04f 33ff 	mov.w	r3, #4294967295
 800948e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	025b      	lsls	r3, r3, #9
 8009494:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009496:	2390      	movs	r3, #144	@ 0x90
 8009498:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800949e:	2300      	movs	r3, #0
 80094a0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f107 0210 	add.w	r2, r7, #16
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 ff9a 	bl	800b3ea <SDIO_ConfigData>

      return HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e000      	b.n	80094bc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80094ba:	2302      	movs	r3, #2
  }
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3730      	adds	r7, #48	@ 0x30
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	08009bb5 	.word	0x08009bb5
 80094c8:	08009c51 	.word	0x08009c51
 80094cc:	004005ff 	.word	0x004005ff
 80094d0:	4225858c 	.word	0x4225858c

080094d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <HAL_SD_IRQHandler+0x2e>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fdec 	bl	800a0d8 <SD_Read_IT>
 8009500:	e155      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 808f 	beq.w	8009630 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800951a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800952a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800952e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f003 0308 	and.w	r3, r3, #8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d039      	beq.n	80095be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <HAL_SD_IRQHandler+0x8a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f002 f818 	bl	800b598 <SDMMC_CmdStopTransfer>
 8009568:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d008      	beq.n	8009582 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f91f 	bl	80097c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f240 523a 	movw	r2, #1338	@ 0x53a
 800958a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d104      	bne.n	80095ae <HAL_SD_IRQHandler+0xda>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f003 fd98 	bl	800d0e4 <HAL_SD_RxCpltCallback>
 80095b4:	e0fb      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f003 fd8a 	bl	800d0d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80095bc:	e0f7      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80f2 	beq.w	80097ae <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d011      	beq.n	80095f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 ffdd 	bl	800b598 <SDMMC_CmdStopTransfer>
 80095de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d008      	beq.n	80095f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f8e4 	bl	80097c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 80d5 	bne.w	80097ae <HAL_SD_IRQHandler+0x2da>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80cf 	bne.w	80097ae <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0208 	bic.w	r2, r2, #8
 800961e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f003 fd51 	bl	800d0d0 <HAL_SD_TxCpltCallback>
}
 800962e:	e0be      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <HAL_SD_IRQHandler+0x17c>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fd96 	bl	800a17a <SD_Write_IT>
 800964e:	e0ae      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009656:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80a7 	beq.w	80097ae <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009672:	f043 0202 	orr.w	r2, r3, #2
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d005      	beq.n	8009694 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968c:	f043 0208 	orr.w	r2, r3, #8
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a6:	f043 0220 	orr.w	r2, r3, #32
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c0:	f043 0210 	orr.w	r2, r3, #16
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80096d0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80096e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 ff56 	bl	800b598 <SDMMC_CmdStopTransfer>
 80096ec:	4602      	mov	r2, r0
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0308 	and.w	r3, r3, #8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f855 	bl	80097c0 <HAL_SD_ErrorCallback>
}
 8009716:	e04a      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800971e:	2b00      	cmp	r3, #0
 8009720:	d045      	beq.n	80097ae <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <HAL_SD_IRQHandler+0x262>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d011      	beq.n	800975a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973a:	4a1f      	ldr	r2, [pc, #124]	@ (80097b8 <HAL_SD_IRQHandler+0x2e4>)
 800973c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009742:	4618      	mov	r0, r3
 8009744:	f7f9 ffba 	bl	80036bc <HAL_DMA_Abort_IT>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d02f      	beq.n	80097ae <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009752:	4618      	mov	r0, r3
 8009754:	f000 face 	bl	8009cf4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009758:	e029      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d104      	bne.n	800976e <HAL_SD_IRQHandler+0x29a>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d011      	beq.n	8009792 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009772:	4a12      	ldr	r2, [pc, #72]	@ (80097bc <HAL_SD_IRQHandler+0x2e8>)
 8009774:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977a:	4618      	mov	r0, r3
 800977c:	f7f9 ff9e 	bl	80036bc <HAL_DMA_Abort_IT>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d013      	beq.n	80097ae <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fae9 	bl	8009d62 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009790:	e00d      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f003 fc88 	bl	800d0bc <HAL_SD_AbortCallback>
}
 80097ac:	e7ff      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	08009cf5 	.word	0x08009cf5
 80097bc:	08009d63 	.word	0x08009d63

080097c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097e2:	0f9b      	lsrs	r3, r3, #30
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ee:	0e9b      	lsrs	r3, r3, #26
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009800:	0e1b      	lsrs	r3, r3, #24
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	b2da      	uxtb	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009812:	0c1b      	lsrs	r3, r3, #16
 8009814:	b2da      	uxtb	r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800981e:	0a1b      	lsrs	r3, r3, #8
 8009820:	b2da      	uxtb	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800982a:	b2da      	uxtb	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009834:	0d1b      	lsrs	r3, r3, #20
 8009836:	b29a      	uxth	r2, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009840:	0c1b      	lsrs	r3, r3, #16
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	b2da      	uxtb	r2, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009852:	0bdb      	lsrs	r3, r3, #15
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009864:	0b9b      	lsrs	r3, r3, #14
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	b2da      	uxtb	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009876:	0b5b      	lsrs	r3, r3, #13
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009888:	0b1b      	lsrs	r3, r3, #12
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	b2da      	uxtb	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2200      	movs	r2, #0
 800989a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d163      	bne.n	800996c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098a8:	009a      	lsls	r2, r3, #2
 80098aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80098b4:	0f92      	lsrs	r2, r2, #30
 80098b6:	431a      	orrs	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098c0:	0edb      	lsrs	r3, r3, #27
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098d2:	0e1b      	lsrs	r3, r3, #24
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e4:	0d5b      	lsrs	r3, r3, #21
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f6:	0c9b      	lsrs	r3, r3, #18
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009908:	0bdb      	lsrs	r3, r3, #15
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	b2da      	uxtb	r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	7e1b      	ldrb	r3, [r3, #24]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	3302      	adds	r3, #2
 800992c:	2201      	movs	r2, #1
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009936:	fb03 f202 	mul.w	r2, r3, r2
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	7a1b      	ldrb	r3, [r3, #8]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	2201      	movs	r2, #1
 800994a:	409a      	lsls	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009958:	0a52      	lsrs	r2, r2, #9
 800995a:	fb03 f202 	mul.w	r2, r3, r2
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009968:	661a      	str	r2, [r3, #96]	@ 0x60
 800996a:	e031      	b.n	80099d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11d      	bne.n	80099b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009978:	041b      	lsls	r3, r3, #16
 800997a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	431a      	orrs	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	3301      	adds	r3, #1
 8009990:	029a      	lsls	r2, r3, #10
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099a4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80099ae:	e00f      	b.n	80099d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a58      	ldr	r2, [pc, #352]	@ (8009b18 <HAL_SD_GetCardCSD+0x344>)
 80099b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e09d      	b.n	8009b0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d4:	0b9b      	lsrs	r3, r3, #14
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e6:	09db      	lsrs	r3, r3, #7
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a08:	0fdb      	lsrs	r3, r3, #31
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a14:	0f5b      	lsrs	r3, r3, #29
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a26:	0e9b      	lsrs	r3, r3, #26
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a38:	0d9b      	lsrs	r3, r3, #22
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 030f 	and.w	r3, r3, #15
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4a:	0d5b      	lsrs	r3, r3, #21
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a66:	0c1b      	lsrs	r3, r3, #16
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7a:	0bdb      	lsrs	r3, r3, #15
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a8e:	0b9b      	lsrs	r3, r3, #14
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa2:	0b5b      	lsrs	r3, r3, #13
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab6:	0b1b      	lsrs	r3, r3, #12
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aca:	0a9b      	lsrs	r3, r3, #10
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ade:	0a1b      	lsrs	r3, r3, #8
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	004005ff 	.word	0x004005ff

08009b1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b80:	f107 030c 	add.w	r3, r7, #12
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa7e 	bl	800a088 <SD_SendStatus>
 8009b8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d005      	beq.n	8009ba0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	0a5b      	lsrs	r3, r3, #9
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009baa:	693b      	ldr	r3, [r7, #16]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf0:	2b82      	cmp	r3, #130	@ 0x82
 8009bf2:	d111      	bne.n	8009c18 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fccd 	bl	800b598 <SDMMC_CmdStopTransfer>
 8009bfe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d008      	beq.n	8009c18 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7ff fdd4 	bl	80097c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0208 	bic.w	r2, r2, #8
 8009c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009c30:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f003 fa4f 	bl	800d0e4 <HAL_SD_RxCpltCallback>
#endif
}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7f9 fed8 	bl	8003a14 <HAL_DMA_GetError>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d03e      	beq.n	8009ce8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c70:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c78:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d002      	beq.n	8009c86 <SD_DMAError+0x36>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d12d      	bne.n	8009ce2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a19      	ldr	r2, [pc, #100]	@ (8009cf0 <SD_DMAError+0xa0>)
 8009c8c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	f7ff ff62 	bl	8009b74 <HAL_SD_GetCardState>
 8009cb0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b06      	cmp	r3, #6
 8009cb6:	d002      	beq.n	8009cbe <SD_DMAError+0x6e>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	d10a      	bne.n	8009cd4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 fc68 	bl	800b598 <SDMMC_CmdStopTransfer>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009ce2:	6978      	ldr	r0, [r7, #20]
 8009ce4:	f7ff fd6c 	bl	80097c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009ce8:	bf00      	nop
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	004005ff 	.word	0x004005ff

08009cf4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d00:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009d0a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff ff31 	bl	8009b74 <HAL_SD_GetCardState>
 8009d12:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b06      	cmp	r3, #6
 8009d26:	d002      	beq.n	8009d2e <SD_DMATxAbort+0x3a>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d10a      	bne.n	8009d44 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fc30 	bl	800b598 <SDMMC_CmdStopTransfer>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f003 f9b5 	bl	800d0bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d52:	e002      	b.n	8009d5a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff fd33 	bl	80097c0 <HAL_SD_ErrorCallback>
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009d78:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7ff fefa 	bl	8009b74 <HAL_SD_GetCardState>
 8009d80:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b06      	cmp	r3, #6
 8009d94:	d002      	beq.n	8009d9c <SD_DMARxAbort+0x3a>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b05      	cmp	r3, #5
 8009d9a:	d10a      	bne.n	8009db2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 fbf9 	bl	800b598 <SDMMC_CmdStopTransfer>
 8009da6:	4602      	mov	r2, r0
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dac:	431a      	orrs	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d103      	bne.n	8009dc2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f003 f97e 	bl	800d0bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009dc0:	e002      	b.n	8009dc8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7ff fcfc 	bl	80097c0 <HAL_SD_ErrorCallback>
}
 8009dc8:	bf00      	nop
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009dd0:	b5b0      	push	{r4, r5, r7, lr}
 8009dd2:	b094      	sub	sp, #80	@ 0x50
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 faaa 	bl	800b33a <SDIO_GetPowerState>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009df0:	e0b8      	b.n	8009f64 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d02f      	beq.n	8009e5a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 fc91 	bl	800b726 <SDMMC_CmdSendCID>
 8009e04:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <SD_InitCard+0x40>
    {
      return errorstate;
 8009e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e0e:	e0a9      	b.n	8009f64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f001 fad4 	bl	800b3c4 <SDIO_GetResponse>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2104      	movs	r1, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 facb 	bl	800b3c4 <SDIO_GetResponse>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2108      	movs	r1, #8
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 fac2 	bl	800b3c4 <SDIO_GetResponse>
 8009e40:	4602      	mov	r2, r0
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	210c      	movs	r1, #12
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 fab9 	bl	800b3c4 <SDIO_GetResponse>
 8009e52:	4602      	mov	r2, r0
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d00d      	beq.n	8009e7e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f107 020e 	add.w	r2, r7, #14
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 fc97 	bl	800b7a0 <SDMMC_CmdSetRelAdd>
 8009e72:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <SD_InitCard+0xae>
    {
      return errorstate;
 8009e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7c:	e072      	b.n	8009f64 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d036      	beq.n	8009ef4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e86:	89fb      	ldrh	r3, [r7, #14]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e96:	041b      	lsls	r3, r3, #16
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f001 fc61 	bl	800b762 <SDMMC_CmdSendCSD>
 8009ea0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eaa:	e05b      	b.n	8009f64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 fa86 	bl	800b3c4 <SDIO_GetResponse>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f001 fa7d 	bl	800b3c4 <SDIO_GetResponse>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2108      	movs	r1, #8
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 fa74 	bl	800b3c4 <SDIO_GetResponse>
 8009edc:	4602      	mov	r2, r0
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	210c      	movs	r1, #12
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 fa6b 	bl	800b3c4 <SDIO_GetResponse>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2104      	movs	r1, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 fa62 	bl	800b3c4 <SDIO_GetResponse>
 8009f00:	4603      	mov	r3, r0
 8009f02:	0d1a      	lsrs	r2, r3, #20
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009f08:	f107 0310 	add.w	r3, r7, #16
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff fc60 	bl	80097d4 <HAL_SD_GetCardCSD>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f1e:	e021      	b.n	8009f64 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6819      	ldr	r1, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	461c      	mov	r4, r3
 8009f2e:	4615      	mov	r5, r2
 8009f30:	4622      	mov	r2, r4
 8009f32:	462b      	mov	r3, r5
 8009f34:	4608      	mov	r0, r1
 8009f36:	f001 fb51 	bl	800b5dc <SDMMC_CmdSelDesel>
 8009f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <SD_InitCard+0x176>
  {
    return errorstate;
 8009f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f44:	e00e      	b.n	8009f64 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	466c      	mov	r4, sp
 8009f4e:	f103 0210 	add.w	r2, r3, #16
 8009f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f58:	3304      	adds	r3, #4
 8009f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f001 f995 	bl	800b28c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3740      	adds	r7, #64	@ 0x40
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bdb0      	pop	{r4, r5, r7, pc}

08009f6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f001 fb4c 	bl	800b622 <SDMMC_CmdGoIdleState>
 8009f8a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	e072      	b.n	800a07c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f001 fb5f 	bl	800b65e <SDMMC_CmdOperCond>
 8009fa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00d      	beq.n	8009fc4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fb35 	bl	800b622 <SDMMC_CmdGoIdleState>
 8009fb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <SD_PowerON+0x5e>
    {
      return errorstate;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	e05b      	b.n	800a07c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d137      	bne.n	800a042 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f001 fb5f 	bl	800b69c <SDMMC_CmdAppCommand>
 8009fde:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d02d      	beq.n	800a042 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fe6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009fea:	e047      	b.n	800a07c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f001 fb52 	bl	800b69c <SDMMC_CmdAppCommand>
 8009ff8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <SD_PowerON+0x98>
    {
      return errorstate;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	e03b      	b.n	800a07c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	491e      	ldr	r1, [pc, #120]	@ (800a084 <SD_PowerON+0x118>)
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fb68 	bl	800b6e0 <SDMMC_CmdAppOperCommand>
 800a010:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a018:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a01c:	e02e      	b.n	800a07c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2100      	movs	r1, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f001 f9cd 	bl	800b3c4 <SDIO_GetResponse>
 800a02a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	0fdb      	lsrs	r3, r3, #31
 800a030:	2b01      	cmp	r3, #1
 800a032:	d101      	bne.n	800a038 <SD_PowerON+0xcc>
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <SD_PowerON+0xce>
 800a038:	2300      	movs	r3, #0
 800a03a:	613b      	str	r3, [r7, #16]

    count++;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	3301      	adds	r3, #1
 800a040:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a048:	4293      	cmp	r3, r2
 800a04a:	d802      	bhi.n	800a052 <SD_PowerON+0xe6>
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0cc      	beq.n	8009fec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a058:	4293      	cmp	r3, r2
 800a05a:	d902      	bls.n	800a062 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a05c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a060:	e00c      	b.n	800a07c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	645a      	str	r2, [r3, #68]	@ 0x44
 800a072:	e002      	b.n	800a07a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	c1100000 	.word	0xc1100000

0800a088 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a098:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a09c:	e018      	b.n	800a0d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a6:	041b      	lsls	r3, r3, #16
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f001 fb99 	bl	800b7e2 <SDMMC_CmdSendStatus>
 800a0b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <SD_SendStatus+0x34>
  {
    return errorstate;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	e009      	b.n	800a0d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f001 f97e 	bl	800b3c4 <SDIO_GetResponse>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d03f      	beq.n	800a172 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	e033      	b.n	800a160 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 f8f0 	bl	800b2e2 <SDIO_ReadFIFO>
 800a102:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	b2da      	uxtb	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3301      	adds	r3, #1
 800a110:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	3b01      	subs	r3, #1
 800a116:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	0a1b      	lsrs	r3, r3, #8
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3301      	adds	r3, #1
 800a126:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	0c1b      	lsrs	r3, r3, #16
 800a132:	b2da      	uxtb	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	3b01      	subs	r3, #1
 800a142:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	0e1b      	lsrs	r3, r3, #24
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3b01      	subs	r3, #1
 800a158:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	3301      	adds	r3, #1
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2b07      	cmp	r3, #7
 800a164:	d9c8      	bls.n	800a0f8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800a172:	bf00      	nop
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b086      	sub	sp, #24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d043      	beq.n	800a21c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	e037      	b.n	800a20a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	021a      	lsls	r2, r3, #8
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	041a      	lsls	r2, r3, #16
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	061a      	lsls	r2, r3, #24
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f107 0208 	add.w	r2, r7, #8
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 f87c 	bl	800b2fc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	3301      	adds	r3, #1
 800a208:	617b      	str	r3, [r7, #20]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b07      	cmp	r3, #7
 800a20e:	d9c4      	bls.n	800a19a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a21c:	bf00      	nop
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e025      	b.n	800a284 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7f8 fd5b 	bl	8002d08 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3304      	adds	r3, #4
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f000 ff4b 	bl	800b100 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	461a      	mov	r2, r3
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	f000 ffa0 	bl	800b1ba <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e041      	b.n	800a322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d106      	bne.n	800a2b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7f8 fbe0 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f000 fa7e 	bl	800a7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d001      	beq.n	800a344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e04e      	b.n	800a3e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f042 0201 	orr.w	r2, r2, #1
 800a35a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a23      	ldr	r2, [pc, #140]	@ (800a3f0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d022      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a36e:	d01d      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d018      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d013      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a1c      	ldr	r2, [pc, #112]	@ (800a3fc <HAL_TIM_Base_Start_IT+0xd0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d00e      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1b      	ldr	r2, [pc, #108]	@ (800a400 <HAL_TIM_Base_Start_IT+0xd4>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d009      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a19      	ldr	r2, [pc, #100]	@ (800a404 <HAL_TIM_Base_Start_IT+0xd8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d004      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0x80>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a18      	ldr	r2, [pc, #96]	@ (800a408 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d111      	bne.n	800a3d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f003 0307 	and.w	r3, r3, #7
 800a3b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b06      	cmp	r3, #6
 800a3bc:	d010      	beq.n	800a3e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0201 	orr.w	r2, r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ce:	e007      	b.n	800a3e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0201 	orr.w	r2, r2, #1
 800a3de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40010000 	.word	0x40010000
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40000800 	.word	0x40000800
 800a3fc:	40000c00 	.word	0x40000c00
 800a400:	40010400 	.word	0x40010400
 800a404:	40014000 	.word	0x40014000
 800a408:	40001800 	.word	0x40001800

0800a40c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d020      	beq.n	800a470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01b      	beq.n	800a470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0202 	mvn.w	r2, #2
 800a440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f999 	bl	800a78e <HAL_TIM_IC_CaptureCallback>
 800a45c:	e005      	b.n	800a46a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f98b 	bl	800a77a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f99c 	bl	800a7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0304 	and.w	r3, r3, #4
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01b      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0204 	mvn.w	r2, #4
 800a48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f973 	bl	800a78e <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f965 	bl	800a77a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f976 	bl	800a7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d020      	beq.n	800a508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01b      	beq.n	800a508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0208 	mvn.w	r2, #8
 800a4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f003 0303 	and.w	r3, r3, #3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f94d 	bl	800a78e <HAL_TIM_IC_CaptureCallback>
 800a4f4:	e005      	b.n	800a502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f93f 	bl	800a77a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f950 	bl	800a7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f003 0310 	and.w	r3, r3, #16
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d020      	beq.n	800a554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01b      	beq.n	800a554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0210 	mvn.w	r2, #16
 800a524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2208      	movs	r2, #8
 800a52a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f927 	bl	800a78e <HAL_TIM_IC_CaptureCallback>
 800a540:	e005      	b.n	800a54e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f919 	bl	800a77a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f92a 	bl	800a7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0201 	mvn.w	r2, #1
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7f7 ff90 	bl	8002498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00c      	beq.n	800a59c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fae4 	bl	800ab64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00c      	beq.n	800a5c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d007      	beq.n	800a5c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f8fb 	bl	800a7b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f003 0320 	and.w	r3, r3, #32
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f06f 0220 	mvn.w	r2, #32
 800a5dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fab6 	bl	800ab50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_TIM_ConfigClockSource+0x1c>
 800a604:	2302      	movs	r3, #2
 800a606:	e0b4      	b.n	800a772 <HAL_TIM_ConfigClockSource+0x186>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a62e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a640:	d03e      	beq.n	800a6c0 <HAL_TIM_ConfigClockSource+0xd4>
 800a642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a646:	f200 8087 	bhi.w	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a64a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a64e:	f000 8086 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x172>
 800a652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a656:	d87f      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a658:	2b70      	cmp	r3, #112	@ 0x70
 800a65a:	d01a      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0xa6>
 800a65c:	2b70      	cmp	r3, #112	@ 0x70
 800a65e:	d87b      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a660:	2b60      	cmp	r3, #96	@ 0x60
 800a662:	d050      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x11a>
 800a664:	2b60      	cmp	r3, #96	@ 0x60
 800a666:	d877      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a668:	2b50      	cmp	r3, #80	@ 0x50
 800a66a:	d03c      	beq.n	800a6e6 <HAL_TIM_ConfigClockSource+0xfa>
 800a66c:	2b50      	cmp	r3, #80	@ 0x50
 800a66e:	d873      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a670:	2b40      	cmp	r3, #64	@ 0x40
 800a672:	d058      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x13a>
 800a674:	2b40      	cmp	r3, #64	@ 0x40
 800a676:	d86f      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a678:	2b30      	cmp	r3, #48	@ 0x30
 800a67a:	d064      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x15a>
 800a67c:	2b30      	cmp	r3, #48	@ 0x30
 800a67e:	d86b      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a680:	2b20      	cmp	r3, #32
 800a682:	d060      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x15a>
 800a684:	2b20      	cmp	r3, #32
 800a686:	d867      	bhi.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d05c      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x15a>
 800a68c:	2b10      	cmp	r3, #16
 800a68e:	d05a      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x15a>
 800a690:	e062      	b.n	800a758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6a2:	f000 f9b9 	bl	800aa18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a6b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	609a      	str	r2, [r3, #8]
      break;
 800a6be:	e04f      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6d0:	f000 f9a2 	bl	800aa18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6e2:	609a      	str	r2, [r3, #8]
      break;
 800a6e4:	e03c      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f000 f916 	bl	800a924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2150      	movs	r1, #80	@ 0x50
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 f96f 	bl	800a9e2 <TIM_ITRx_SetConfig>
      break;
 800a704:	e02c      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a712:	461a      	mov	r2, r3
 800a714:	f000 f935 	bl	800a982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2160      	movs	r1, #96	@ 0x60
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 f95f 	bl	800a9e2 <TIM_ITRx_SetConfig>
      break;
 800a724:	e01c      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a732:	461a      	mov	r2, r3
 800a734:	f000 f8f6 	bl	800a924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2140      	movs	r1, #64	@ 0x40
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f94f 	bl	800a9e2 <TIM_ITRx_SetConfig>
      break;
 800a744:	e00c      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4619      	mov	r1, r3
 800a750:	4610      	mov	r0, r2
 800a752:	f000 f946 	bl	800a9e2 <TIM_ITRx_SetConfig>
      break;
 800a756:	e003      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	73fb      	strb	r3, [r7, #15]
      break;
 800a75c:	e000      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a75e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7aa:	bf00      	nop
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7be:	bf00      	nop
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a46      	ldr	r2, [pc, #280]	@ (800a8f8 <TIM_Base_SetConfig+0x12c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d013      	beq.n	800a80c <TIM_Base_SetConfig+0x40>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ea:	d00f      	beq.n	800a80c <TIM_Base_SetConfig+0x40>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a43      	ldr	r2, [pc, #268]	@ (800a8fc <TIM_Base_SetConfig+0x130>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00b      	beq.n	800a80c <TIM_Base_SetConfig+0x40>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a42      	ldr	r2, [pc, #264]	@ (800a900 <TIM_Base_SetConfig+0x134>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d007      	beq.n	800a80c <TIM_Base_SetConfig+0x40>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a41      	ldr	r2, [pc, #260]	@ (800a904 <TIM_Base_SetConfig+0x138>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d003      	beq.n	800a80c <TIM_Base_SetConfig+0x40>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a40      	ldr	r2, [pc, #256]	@ (800a908 <TIM_Base_SetConfig+0x13c>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d108      	bne.n	800a81e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a35      	ldr	r2, [pc, #212]	@ (800a8f8 <TIM_Base_SetConfig+0x12c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d02b      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82c:	d027      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a32      	ldr	r2, [pc, #200]	@ (800a8fc <TIM_Base_SetConfig+0x130>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d023      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a31      	ldr	r2, [pc, #196]	@ (800a900 <TIM_Base_SetConfig+0x134>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d01f      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a30      	ldr	r2, [pc, #192]	@ (800a904 <TIM_Base_SetConfig+0x138>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d01b      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a2f      	ldr	r2, [pc, #188]	@ (800a908 <TIM_Base_SetConfig+0x13c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d017      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a2e      	ldr	r2, [pc, #184]	@ (800a90c <TIM_Base_SetConfig+0x140>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d013      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a2d      	ldr	r2, [pc, #180]	@ (800a910 <TIM_Base_SetConfig+0x144>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d00f      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a2c      	ldr	r2, [pc, #176]	@ (800a914 <TIM_Base_SetConfig+0x148>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00b      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a2b      	ldr	r2, [pc, #172]	@ (800a918 <TIM_Base_SetConfig+0x14c>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d007      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a2a      	ldr	r2, [pc, #168]	@ (800a91c <TIM_Base_SetConfig+0x150>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d003      	beq.n	800a87e <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a29      	ldr	r2, [pc, #164]	@ (800a920 <TIM_Base_SetConfig+0x154>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d108      	bne.n	800a890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a10      	ldr	r2, [pc, #64]	@ (800a8f8 <TIM_Base_SetConfig+0x12c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d003      	beq.n	800a8c4 <TIM_Base_SetConfig+0xf8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a12      	ldr	r2, [pc, #72]	@ (800a908 <TIM_Base_SetConfig+0x13c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d103      	bne.n	800a8cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	691a      	ldr	r2, [r3, #16]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d105      	bne.n	800a8ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	f023 0201 	bic.w	r2, r3, #1
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	611a      	str	r2, [r3, #16]
  }
}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40000400 	.word	0x40000400
 800a900:	40000800 	.word	0x40000800
 800a904:	40000c00 	.word	0x40000c00
 800a908:	40010400 	.word	0x40010400
 800a90c:	40014000 	.word	0x40014000
 800a910:	40014400 	.word	0x40014400
 800a914:	40014800 	.word	0x40014800
 800a918:	40001800 	.word	0x40001800
 800a91c:	40001c00 	.word	0x40001c00
 800a920:	40002000 	.word	0x40002000

0800a924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f023 0201 	bic.w	r2, r3, #1
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	011b      	lsls	r3, r3, #4
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	4313      	orrs	r3, r2
 800a958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f023 030a 	bic.w	r3, r3, #10
 800a960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	621a      	str	r2, [r3, #32]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a982:	b480      	push	{r7}
 800a984:	b087      	sub	sp, #28
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	f023 0210 	bic.w	r2, r3, #16
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	031b      	lsls	r3, r3, #12
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	011b      	lsls	r3, r3, #4
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	f043 0307 	orr.w	r3, r3, #7
 800aa04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	609a      	str	r2, [r3, #8]
}
 800aa0c:	bf00      	nop
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	021a      	lsls	r2, r3, #8
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	431a      	orrs	r2, r3
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	609a      	str	r2, [r3, #8]
}
 800aa4c:	bf00      	nop
 800aa4e:	371c      	adds	r7, #28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e05a      	b.n	800ab26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a21      	ldr	r2, [pc, #132]	@ (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d022      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aabc:	d01d      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a1d      	ldr	r2, [pc, #116]	@ (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d018      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a1b      	ldr	r2, [pc, #108]	@ (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d013      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a1a      	ldr	r2, [pc, #104]	@ (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00e      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a18      	ldr	r2, [pc, #96]	@ (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d009      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a17      	ldr	r2, [pc, #92]	@ (800ab48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d004      	beq.n	800aafa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a15      	ldr	r2, [pc, #84]	@ (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d10c      	bne.n	800ab14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	40010000 	.word	0x40010000
 800ab38:	40000400 	.word	0x40000400
 800ab3c:	40000800 	.word	0x40000800
 800ab40:	40000c00 	.word	0x40000c00
 800ab44:	40010400 	.word	0x40010400
 800ab48:	40014000 	.word	0x40014000
 800ab4c:	40001800 	.word	0x40001800

0800ab50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e042      	b.n	800ac10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d106      	bne.n	800aba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7f7 ff8c 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2224      	movs	r2, #36	@ 0x24
 800aba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800abba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f82b 	bl	800ac18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	691a      	ldr	r2, [r3, #16]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800abd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695a      	ldr	r2, [r3, #20]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800abe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800abf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2220      	movs	r2, #32
 800ac04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac1c:	b0c0      	sub	sp, #256	@ 0x100
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ac30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac34:	68d9      	ldr	r1, [r3, #12]
 800ac36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	ea40 0301 	orr.w	r3, r0, r1
 800ac40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	431a      	orrs	r2, r3
 800ac58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ac70:	f021 010c 	bic.w	r1, r1, #12
 800ac74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ac8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac92:	6999      	ldr	r1, [r3, #24]
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	ea40 0301 	orr.w	r3, r0, r1
 800ac9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	4b8f      	ldr	r3, [pc, #572]	@ (800aee4 <UART_SetConfig+0x2cc>)
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d005      	beq.n	800acb8 <UART_SetConfig+0xa0>
 800acac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	4b8d      	ldr	r3, [pc, #564]	@ (800aee8 <UART_SetConfig+0x2d0>)
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d104      	bne.n	800acc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acb8:	f7fd fa68 	bl	800818c <HAL_RCC_GetPCLK2Freq>
 800acbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800acc0:	e003      	b.n	800acca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800acc2:	f7fd fa4f 	bl	8008164 <HAL_RCC_GetPCLK1Freq>
 800acc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acd4:	f040 810c 	bne.w	800aef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800acd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acdc:	2200      	movs	r2, #0
 800acde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ace2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ace6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800acea:	4622      	mov	r2, r4
 800acec:	462b      	mov	r3, r5
 800acee:	1891      	adds	r1, r2, r2
 800acf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800acf2:	415b      	adcs	r3, r3
 800acf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800acfa:	4621      	mov	r1, r4
 800acfc:	eb12 0801 	adds.w	r8, r2, r1
 800ad00:	4629      	mov	r1, r5
 800ad02:	eb43 0901 	adc.w	r9, r3, r1
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad1a:	4690      	mov	r8, r2
 800ad1c:	4699      	mov	r9, r3
 800ad1e:	4623      	mov	r3, r4
 800ad20:	eb18 0303 	adds.w	r3, r8, r3
 800ad24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad28:	462b      	mov	r3, r5
 800ad2a:	eb49 0303 	adc.w	r3, r9, r3
 800ad2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ad42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ad46:	460b      	mov	r3, r1
 800ad48:	18db      	adds	r3, r3, r3
 800ad4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	eb42 0303 	adc.w	r3, r2, r3
 800ad52:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ad58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ad5c:	f7f5 faa8 	bl	80002b0 <__aeabi_uldivmod>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4b61      	ldr	r3, [pc, #388]	@ (800aeec <UART_SetConfig+0x2d4>)
 800ad66:	fba3 2302 	umull	r2, r3, r3, r2
 800ad6a:	095b      	lsrs	r3, r3, #5
 800ad6c:	011c      	lsls	r4, r3, #4
 800ad6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ad7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	1891      	adds	r1, r2, r2
 800ad86:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ad88:	415b      	adcs	r3, r3
 800ad8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ad90:	4641      	mov	r1, r8
 800ad92:	eb12 0a01 	adds.w	sl, r2, r1
 800ad96:	4649      	mov	r1, r9
 800ad98:	eb43 0b01 	adc.w	fp, r3, r1
 800ad9c:	f04f 0200 	mov.w	r2, #0
 800ada0:	f04f 0300 	mov.w	r3, #0
 800ada4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ada8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800adac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adb0:	4692      	mov	sl, r2
 800adb2:	469b      	mov	fp, r3
 800adb4:	4643      	mov	r3, r8
 800adb6:	eb1a 0303 	adds.w	r3, sl, r3
 800adba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adbe:	464b      	mov	r3, r9
 800adc0:	eb4b 0303 	adc.w	r3, fp, r3
 800adc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800adc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800add4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800add8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800addc:	460b      	mov	r3, r1
 800adde:	18db      	adds	r3, r3, r3
 800ade0:	643b      	str	r3, [r7, #64]	@ 0x40
 800ade2:	4613      	mov	r3, r2
 800ade4:	eb42 0303 	adc.w	r3, r2, r3
 800ade8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800adee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800adf2:	f7f5 fa5d 	bl	80002b0 <__aeabi_uldivmod>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	4b3b      	ldr	r3, [pc, #236]	@ (800aeec <UART_SetConfig+0x2d4>)
 800adfe:	fba3 2301 	umull	r2, r3, r3, r1
 800ae02:	095b      	lsrs	r3, r3, #5
 800ae04:	2264      	movs	r2, #100	@ 0x64
 800ae06:	fb02 f303 	mul.w	r3, r2, r3
 800ae0a:	1acb      	subs	r3, r1, r3
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ae12:	4b36      	ldr	r3, [pc, #216]	@ (800aeec <UART_SetConfig+0x2d4>)
 800ae14:	fba3 2302 	umull	r2, r3, r3, r2
 800ae18:	095b      	lsrs	r3, r3, #5
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ae20:	441c      	add	r4, r3
 800ae22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae26:	2200      	movs	r2, #0
 800ae28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ae30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ae34:	4642      	mov	r2, r8
 800ae36:	464b      	mov	r3, r9
 800ae38:	1891      	adds	r1, r2, r2
 800ae3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ae3c:	415b      	adcs	r3, r3
 800ae3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ae44:	4641      	mov	r1, r8
 800ae46:	1851      	adds	r1, r2, r1
 800ae48:	6339      	str	r1, [r7, #48]	@ 0x30
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	414b      	adcs	r3, r1
 800ae4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	00cb      	lsls	r3, r1, #3
 800ae60:	4651      	mov	r1, sl
 800ae62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae66:	4651      	mov	r1, sl
 800ae68:	00ca      	lsls	r2, r1, #3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4603      	mov	r3, r0
 800ae70:	4642      	mov	r2, r8
 800ae72:	189b      	adds	r3, r3, r2
 800ae74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae78:	464b      	mov	r3, r9
 800ae7a:	460a      	mov	r2, r1
 800ae7c:	eb42 0303 	adc.w	r3, r2, r3
 800ae80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ae90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ae94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ae98:	460b      	mov	r3, r1
 800ae9a:	18db      	adds	r3, r3, r3
 800ae9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae9e:	4613      	mov	r3, r2
 800aea0:	eb42 0303 	adc.w	r3, r2, r3
 800aea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aeaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aeae:	f7f5 f9ff 	bl	80002b0 <__aeabi_uldivmod>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800aeec <UART_SetConfig+0x2d4>)
 800aeb8:	fba3 1302 	umull	r1, r3, r3, r2
 800aebc:	095b      	lsrs	r3, r3, #5
 800aebe:	2164      	movs	r1, #100	@ 0x64
 800aec0:	fb01 f303 	mul.w	r3, r1, r3
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	3332      	adds	r3, #50	@ 0x32
 800aeca:	4a08      	ldr	r2, [pc, #32]	@ (800aeec <UART_SetConfig+0x2d4>)
 800aecc:	fba2 2303 	umull	r2, r3, r2, r3
 800aed0:	095b      	lsrs	r3, r3, #5
 800aed2:	f003 0207 	and.w	r2, r3, #7
 800aed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4422      	add	r2, r4
 800aede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aee0:	e106      	b.n	800b0f0 <UART_SetConfig+0x4d8>
 800aee2:	bf00      	nop
 800aee4:	40011000 	.word	0x40011000
 800aee8:	40011400 	.word	0x40011400
 800aeec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aefa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800aefe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800af02:	4642      	mov	r2, r8
 800af04:	464b      	mov	r3, r9
 800af06:	1891      	adds	r1, r2, r2
 800af08:	6239      	str	r1, [r7, #32]
 800af0a:	415b      	adcs	r3, r3
 800af0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af12:	4641      	mov	r1, r8
 800af14:	1854      	adds	r4, r2, r1
 800af16:	4649      	mov	r1, r9
 800af18:	eb43 0501 	adc.w	r5, r3, r1
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	f04f 0300 	mov.w	r3, #0
 800af24:	00eb      	lsls	r3, r5, #3
 800af26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af2a:	00e2      	lsls	r2, r4, #3
 800af2c:	4614      	mov	r4, r2
 800af2e:	461d      	mov	r5, r3
 800af30:	4643      	mov	r3, r8
 800af32:	18e3      	adds	r3, r4, r3
 800af34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af38:	464b      	mov	r3, r9
 800af3a:	eb45 0303 	adc.w	r3, r5, r3
 800af3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800af52:	f04f 0200 	mov.w	r2, #0
 800af56:	f04f 0300 	mov.w	r3, #0
 800af5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800af5e:	4629      	mov	r1, r5
 800af60:	008b      	lsls	r3, r1, #2
 800af62:	4621      	mov	r1, r4
 800af64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af68:	4621      	mov	r1, r4
 800af6a:	008a      	lsls	r2, r1, #2
 800af6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800af70:	f7f5 f99e 	bl	80002b0 <__aeabi_uldivmod>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4b60      	ldr	r3, [pc, #384]	@ (800b0fc <UART_SetConfig+0x4e4>)
 800af7a:	fba3 2302 	umull	r2, r3, r3, r2
 800af7e:	095b      	lsrs	r3, r3, #5
 800af80:	011c      	lsls	r4, r3, #4
 800af82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af86:	2200      	movs	r2, #0
 800af88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800af90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800af94:	4642      	mov	r2, r8
 800af96:	464b      	mov	r3, r9
 800af98:	1891      	adds	r1, r2, r2
 800af9a:	61b9      	str	r1, [r7, #24]
 800af9c:	415b      	adcs	r3, r3
 800af9e:	61fb      	str	r3, [r7, #28]
 800afa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afa4:	4641      	mov	r1, r8
 800afa6:	1851      	adds	r1, r2, r1
 800afa8:	6139      	str	r1, [r7, #16]
 800afaa:	4649      	mov	r1, r9
 800afac:	414b      	adcs	r3, r1
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	f04f 0200 	mov.w	r2, #0
 800afb4:	f04f 0300 	mov.w	r3, #0
 800afb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afbc:	4659      	mov	r1, fp
 800afbe:	00cb      	lsls	r3, r1, #3
 800afc0:	4651      	mov	r1, sl
 800afc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afc6:	4651      	mov	r1, sl
 800afc8:	00ca      	lsls	r2, r1, #3
 800afca:	4610      	mov	r0, r2
 800afcc:	4619      	mov	r1, r3
 800afce:	4603      	mov	r3, r0
 800afd0:	4642      	mov	r2, r8
 800afd2:	189b      	adds	r3, r3, r2
 800afd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afd8:	464b      	mov	r3, r9
 800afda:	460a      	mov	r2, r1
 800afdc:	eb42 0303 	adc.w	r3, r2, r3
 800afe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800afee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aff0:	f04f 0200 	mov.w	r2, #0
 800aff4:	f04f 0300 	mov.w	r3, #0
 800aff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800affc:	4649      	mov	r1, r9
 800affe:	008b      	lsls	r3, r1, #2
 800b000:	4641      	mov	r1, r8
 800b002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b006:	4641      	mov	r1, r8
 800b008:	008a      	lsls	r2, r1, #2
 800b00a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b00e:	f7f5 f94f 	bl	80002b0 <__aeabi_uldivmod>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4611      	mov	r1, r2
 800b018:	4b38      	ldr	r3, [pc, #224]	@ (800b0fc <UART_SetConfig+0x4e4>)
 800b01a:	fba3 2301 	umull	r2, r3, r3, r1
 800b01e:	095b      	lsrs	r3, r3, #5
 800b020:	2264      	movs	r2, #100	@ 0x64
 800b022:	fb02 f303 	mul.w	r3, r2, r3
 800b026:	1acb      	subs	r3, r1, r3
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	3332      	adds	r3, #50	@ 0x32
 800b02c:	4a33      	ldr	r2, [pc, #204]	@ (800b0fc <UART_SetConfig+0x4e4>)
 800b02e:	fba2 2303 	umull	r2, r3, r2, r3
 800b032:	095b      	lsrs	r3, r3, #5
 800b034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b038:	441c      	add	r4, r3
 800b03a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b03e:	2200      	movs	r2, #0
 800b040:	673b      	str	r3, [r7, #112]	@ 0x70
 800b042:	677a      	str	r2, [r7, #116]	@ 0x74
 800b044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b048:	4642      	mov	r2, r8
 800b04a:	464b      	mov	r3, r9
 800b04c:	1891      	adds	r1, r2, r2
 800b04e:	60b9      	str	r1, [r7, #8]
 800b050:	415b      	adcs	r3, r3
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b058:	4641      	mov	r1, r8
 800b05a:	1851      	adds	r1, r2, r1
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	4649      	mov	r1, r9
 800b060:	414b      	adcs	r3, r1
 800b062:	607b      	str	r3, [r7, #4]
 800b064:	f04f 0200 	mov.w	r2, #0
 800b068:	f04f 0300 	mov.w	r3, #0
 800b06c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b070:	4659      	mov	r1, fp
 800b072:	00cb      	lsls	r3, r1, #3
 800b074:	4651      	mov	r1, sl
 800b076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b07a:	4651      	mov	r1, sl
 800b07c:	00ca      	lsls	r2, r1, #3
 800b07e:	4610      	mov	r0, r2
 800b080:	4619      	mov	r1, r3
 800b082:	4603      	mov	r3, r0
 800b084:	4642      	mov	r2, r8
 800b086:	189b      	adds	r3, r3, r2
 800b088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b08a:	464b      	mov	r3, r9
 800b08c:	460a      	mov	r2, r1
 800b08e:	eb42 0303 	adc.w	r3, r2, r3
 800b092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b09e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	f04f 0300 	mov.w	r3, #0
 800b0a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	008b      	lsls	r3, r1, #2
 800b0b0:	4641      	mov	r1, r8
 800b0b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0b6:	4641      	mov	r1, r8
 800b0b8:	008a      	lsls	r2, r1, #2
 800b0ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b0be:	f7f5 f8f7 	bl	80002b0 <__aeabi_uldivmod>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0fc <UART_SetConfig+0x4e4>)
 800b0c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0cc:	095b      	lsrs	r3, r3, #5
 800b0ce:	2164      	movs	r1, #100	@ 0x64
 800b0d0:	fb01 f303 	mul.w	r3, r1, r3
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	3332      	adds	r3, #50	@ 0x32
 800b0da:	4a08      	ldr	r2, [pc, #32]	@ (800b0fc <UART_SetConfig+0x4e4>)
 800b0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e0:	095b      	lsrs	r3, r3, #5
 800b0e2:	f003 020f 	and.w	r2, r3, #15
 800b0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4422      	add	r2, r4
 800b0ee:	609a      	str	r2, [r3, #8]
}
 800b0f0:	bf00      	nop
 800b0f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0fc:	51eb851f 	.word	0x51eb851f

0800b100 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d123      	bne.n	800b15a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b11a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	6851      	ldr	r1, [r2, #4]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	6892      	ldr	r2, [r2, #8]
 800b126:	4311      	orrs	r1, r2
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	68d2      	ldr	r2, [r2, #12]
 800b12c:	4311      	orrs	r1, r2
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	6912      	ldr	r2, [r2, #16]
 800b132:	4311      	orrs	r1, r2
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	6952      	ldr	r2, [r2, #20]
 800b138:	4311      	orrs	r1, r2
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	6992      	ldr	r2, [r2, #24]
 800b13e:	4311      	orrs	r1, r2
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	69d2      	ldr	r2, [r2, #28]
 800b144:	4311      	orrs	r1, r2
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	6a12      	ldr	r2, [r2, #32]
 800b14a:	4311      	orrs	r1, r2
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b150:	430a      	orrs	r2, r1
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	e028      	b.n	800b1ac <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	69d9      	ldr	r1, [r3, #28]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	4319      	orrs	r1, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b170:	430b      	orrs	r3, r1
 800b172:	431a      	orrs	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b180:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	6851      	ldr	r1, [r2, #4]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	6892      	ldr	r2, [r2, #8]
 800b18c:	4311      	orrs	r1, r2
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	68d2      	ldr	r2, [r2, #12]
 800b192:	4311      	orrs	r1, r2
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	6912      	ldr	r2, [r2, #16]
 800b198:	4311      	orrs	r1, r2
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	6952      	ldr	r2, [r2, #20]
 800b19e:	4311      	orrs	r1, r2
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	6992      	ldr	r2, [r2, #24]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d128      	bne.n	800b21e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	1e59      	subs	r1, r3, #1
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	4319      	orrs	r1, r3
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	4319      	orrs	r1, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	031b      	lsls	r3, r3, #12
 800b1f6:	4319      	orrs	r1, r3
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	041b      	lsls	r3, r3, #16
 800b200:	4319      	orrs	r1, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	3b01      	subs	r3, #1
 800b208:	051b      	lsls	r3, r3, #20
 800b20a:	4319      	orrs	r1, r3
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	3b01      	subs	r3, #1
 800b212:	061b      	lsls	r3, r3, #24
 800b214:	430b      	orrs	r3, r1
 800b216:	431a      	orrs	r2, r3
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	609a      	str	r2, [r3, #8]
 800b21c:	e02f      	b.n	800b27e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b226:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	68d2      	ldr	r2, [r2, #12]
 800b22e:	3a01      	subs	r2, #1
 800b230:	0311      	lsls	r1, r2, #12
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	6952      	ldr	r2, [r2, #20]
 800b236:	3a01      	subs	r2, #1
 800b238:	0512      	lsls	r2, r2, #20
 800b23a:	430a      	orrs	r2, r1
 800b23c:	431a      	orrs	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	1e59      	subs	r1, r3, #1
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	3b01      	subs	r3, #1
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	4319      	orrs	r1, r3
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	3b01      	subs	r3, #1
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	4319      	orrs	r1, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	3b01      	subs	r3, #1
 800b26a:	041b      	lsls	r3, r3, #16
 800b26c:	4319      	orrs	r1, r3
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	3b01      	subs	r3, #1
 800b274:	061b      	lsls	r3, r3, #24
 800b276:	430b      	orrs	r3, r1
 800b278:	431a      	orrs	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b28c:	b084      	sub	sp, #16
 800b28e:	b480      	push	{r7}
 800b290:	b085      	sub	sp, #20
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	f107 001c 	add.w	r0, r7, #28
 800b29a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b2a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b2a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b2aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b2ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b2b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b2b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800b2c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	b004      	add	sp, #16
 800b2e0:	4770      	bx	lr

0800b2e2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b31e:	b480      	push	{r7}
 800b320:	b083      	sub	sp, #12
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2203      	movs	r2, #3
 800b32a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0303 	and.w	r3, r3, #3
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b356:	b480      	push	{r7}
 800b358:	b085      	sub	sp, #20
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b374:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b37a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b380:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	4313      	orrs	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b390:	f023 030f 	bic.w	r3, r3, #15
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	b2db      	uxtb	r3, r3
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3314      	adds	r3, #20
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
}  
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b410:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b416:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b41c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b428:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b434:	2300      	movs	r3, #0

}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b088      	sub	sp, #32
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b450:	2310      	movs	r3, #16
 800b452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b454:	2340      	movs	r3, #64	@ 0x40
 800b456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b458:	2300      	movs	r3, #0
 800b45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b45c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b460:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff74 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b46e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b472:	2110      	movs	r1, #16
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f9d7 	bl	800b828 <SDMMC_GetCmdResp1>
 800b47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47c:	69fb      	ldr	r3, [r7, #28]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3720      	adds	r7, #32
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b088      	sub	sp, #32
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b494:	2311      	movs	r3, #17
 800b496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b498:	2340      	movs	r3, #64	@ 0x40
 800b49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff ff52 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b4b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4b6:	2111      	movs	r1, #17
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f9b5 	bl	800b828 <SDMMC_GetCmdResp1>
 800b4be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b088      	sub	sp, #32
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b4d8:	2312      	movs	r3, #18
 800b4da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4dc:	2340      	movs	r3, #64	@ 0x40
 800b4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4ea:	f107 0308 	add.w	r3, r7, #8
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff ff30 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b4f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4fa:	2112      	movs	r1, #18
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f993 	bl	800b828 <SDMMC_GetCmdResp1>
 800b502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b504:	69fb      	ldr	r3, [r7, #28]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3720      	adds	r7, #32
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b088      	sub	sp, #32
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b51c:	2318      	movs	r3, #24
 800b51e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b520:	2340      	movs	r3, #64	@ 0x40
 800b522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b524:	2300      	movs	r3, #0
 800b526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b52c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b52e:	f107 0308 	add.w	r3, r7, #8
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff ff0e 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b53a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b53e:	2118      	movs	r1, #24
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f971 	bl	800b828 <SDMMC_GetCmdResp1>
 800b546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b548:	69fb      	ldr	r3, [r7, #28]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b088      	sub	sp, #32
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b560:	2319      	movs	r3, #25
 800b562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b564:	2340      	movs	r3, #64	@ 0x40
 800b566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b56c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b570:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b572:	f107 0308 	add.w	r3, r7, #8
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff feec 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b57e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b582:	2119      	movs	r1, #25
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f94f 	bl	800b828 <SDMMC_GetCmdResp1>
 800b58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58c:	69fb      	ldr	r3, [r7, #28]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5a8:	2340      	movs	r3, #64	@ 0x40
 800b5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff feca 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b5c2:	4a05      	ldr	r2, [pc, #20]	@ (800b5d8 <SDMMC_CmdStopTransfer+0x40>)
 800b5c4:	210c      	movs	r1, #12
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f92e 	bl	800b828 <SDMMC_GetCmdResp1>
 800b5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	05f5e100 	.word	0x05f5e100

0800b5dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08a      	sub	sp, #40	@ 0x28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b5ec:	2307      	movs	r3, #7
 800b5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5f0:	2340      	movs	r3, #64	@ 0x40
 800b5f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5fe:	f107 0310 	add.w	r3, r7, #16
 800b602:	4619      	mov	r1, r3
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f7ff fea6 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b60a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b60e:	2107      	movs	r1, #7
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f000 f909 	bl	800b828 <SDMMC_GetCmdResp1>
 800b616:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3728      	adds	r7, #40	@ 0x28
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b088      	sub	sp, #32
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b632:	2300      	movs	r3, #0
 800b634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b63a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b63e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff fe85 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fb23 	bl	800bc98 <SDMMC_GetCmdError>
 800b652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b654:	69fb      	ldr	r3, [r7, #28]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3720      	adds	r7, #32
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b088      	sub	sp, #32
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b666:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b66a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b66c:	2308      	movs	r3, #8
 800b66e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b670:	2340      	movs	r3, #64	@ 0x40
 800b672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b67c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b67e:	f107 0308 	add.w	r3, r7, #8
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fe66 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fab6 	bl	800bbfc <SDMMC_GetCmdResp7>
 800b690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b692:	69fb      	ldr	r3, [r7, #28]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b6aa:	2337      	movs	r3, #55	@ 0x37
 800b6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6ae:	2340      	movs	r3, #64	@ 0x40
 800b6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6bc:	f107 0308 	add.w	r3, r7, #8
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fe47 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b6c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6cc:	2137      	movs	r1, #55	@ 0x37
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f8aa 	bl	800b828 <SDMMC_GetCmdResp1>
 800b6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b6f6:	2329      	movs	r3, #41	@ 0x29
 800b6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6fa:	2340      	movs	r3, #64	@ 0x40
 800b6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b708:	f107 0308 	add.w	r3, r7, #8
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff fe21 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f9bd 	bl	800ba94 <SDMMC_GetCmdResp3>
 800b71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b71c:	69fb      	ldr	r3, [r7, #28]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b088      	sub	sp, #32
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b732:	2302      	movs	r3, #2
 800b734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b736:	23c0      	movs	r3, #192	@ 0xc0
 800b738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b73a:	2300      	movs	r3, #0
 800b73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b73e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b744:	f107 0308 	add.w	r3, r7, #8
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff fe03 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f957 	bl	800ba04 <SDMMC_GetCmdResp2>
 800b756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b758:	69fb      	ldr	r3, [r7, #28]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3720      	adds	r7, #32
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b088      	sub	sp, #32
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b770:	2309      	movs	r3, #9
 800b772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b774:	23c0      	movs	r3, #192	@ 0xc0
 800b776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b77c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fde4 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f938 	bl	800ba04 <SDMMC_GetCmdResp2>
 800b794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b796:	69fb      	ldr	r3, [r7, #28]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3720      	adds	r7, #32
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7b2:	2340      	movs	r3, #64	@ 0x40
 800b7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7c0:	f107 0308 	add.w	r3, r7, #8
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fdc5 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	2103      	movs	r1, #3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f99d 	bl	800bb10 <SDMMC_GetCmdResp6>
 800b7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b088      	sub	sp, #32
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7f0:	230d      	movs	r3, #13
 800b7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7f4:	2340      	movs	r3, #64	@ 0x40
 800b7f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b802:	f107 0308 	add.w	r3, r7, #8
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff fda4 	bl	800b356 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b80e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b812:	210d      	movs	r1, #13
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f807 	bl	800b828 <SDMMC_GetCmdResp1>
 800b81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b81c:	69fb      	ldr	r3, [r7, #28]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	460b      	mov	r3, r1
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b836:	4b70      	ldr	r3, [pc, #448]	@ (800b9f8 <SDMMC_GetCmdResp1+0x1d0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a70      	ldr	r2, [pc, #448]	@ (800b9fc <SDMMC_GetCmdResp1+0x1d4>)
 800b83c:	fba2 2303 	umull	r2, r3, r2, r3
 800b840:	0a5a      	lsrs	r2, r3, #9
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	fb02 f303 	mul.w	r3, r2, r3
 800b848:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	1e5a      	subs	r2, r3, #1
 800b84e:	61fa      	str	r2, [r7, #28]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b854:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b858:	e0c9      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0ef      	beq.n	800b84a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1ea      	bne.n	800b84a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2204      	movs	r2, #4
 800b884:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b886:	2304      	movs	r3, #4
 800b888:	e0b1      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2201      	movs	r2, #1
 800b89a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e0a6      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	22c5      	movs	r2, #197	@ 0xc5
 800b8a4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f7ff fd7f 	bl	800b3aa <SDIO_GetCommandResponse>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d001      	beq.n	800b8ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e099      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff fd81 	bl	800b3c4 <SDIO_GetResponse>
 800b8c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4b4e      	ldr	r3, [pc, #312]	@ (800ba00 <SDMMC_GetCmdResp1+0x1d8>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e08d      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	da02      	bge.n	800b8de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b8dc:	e087      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8e8:	2340      	movs	r3, #64	@ 0x40
 800b8ea:	e080      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8f6:	2380      	movs	r3, #128	@ 0x80
 800b8f8:	e079      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b908:	e071      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b918:	e069      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b928:	e061      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b934:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b938:	e059      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b948:	e051      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b958:	e049      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b968:	e041      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b978:	e039      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b984:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b988:	e031      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b994:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b998:	e029      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b9a8:	e021      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b9b8:	e019      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b9c8:	e011      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b9d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b9d8:	e009      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f003 0308 	and.w	r3, r3, #8
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9e4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b9e8:	e001      	b.n	800b9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3720      	adds	r7, #32
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20000000 	.word	0x20000000
 800b9fc:	10624dd3 	.word	0x10624dd3
 800ba00:	fdffe008 	.word	0xfdffe008

0800ba04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ba8c <SDMMC_GetCmdResp2+0x88>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a1f      	ldr	r2, [pc, #124]	@ (800ba90 <SDMMC_GetCmdResp2+0x8c>)
 800ba12:	fba2 2303 	umull	r2, r3, r2, r3
 800ba16:	0a5b      	lsrs	r3, r3, #9
 800ba18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba1c:	fb02 f303 	mul.w	r3, r2, r3
 800ba20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1e5a      	subs	r2, r3, #1
 800ba26:	60fa      	str	r2, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba30:	e026      	b.n	800ba80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0ef      	beq.n	800ba22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1ea      	bne.n	800ba22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d004      	beq.n	800ba62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba5e:	2304      	movs	r3, #4
 800ba60:	e00e      	b.n	800ba80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e003      	b.n	800ba80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	22c5      	movs	r2, #197	@ 0xc5
 800ba7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	20000000 	.word	0x20000000
 800ba90:	10624dd3 	.word	0x10624dd3

0800ba94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bb08 <SDMMC_GetCmdResp3+0x74>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a1a      	ldr	r2, [pc, #104]	@ (800bb0c <SDMMC_GetCmdResp3+0x78>)
 800baa2:	fba2 2303 	umull	r2, r3, r2, r3
 800baa6:	0a5b      	lsrs	r3, r3, #9
 800baa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baac:	fb02 f303 	mul.w	r3, r2, r3
 800bab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	1e5a      	subs	r2, r3, #1
 800bab6:	60fa      	str	r2, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d102      	bne.n	800bac2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800babc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bac0:	e01b      	b.n	800bafa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0ef      	beq.n	800bab2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1ea      	bne.n	800bab2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d004      	beq.n	800baf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2204      	movs	r2, #4
 800baec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baee:	2304      	movs	r3, #4
 800baf0:	e003      	b.n	800bafa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	22c5      	movs	r2, #197	@ 0xc5
 800baf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	20000000 	.word	0x20000000
 800bb0c:	10624dd3 	.word	0x10624dd3

0800bb10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb1e:	4b35      	ldr	r3, [pc, #212]	@ (800bbf4 <SDMMC_GetCmdResp6+0xe4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a35      	ldr	r2, [pc, #212]	@ (800bbf8 <SDMMC_GetCmdResp6+0xe8>)
 800bb24:	fba2 2303 	umull	r2, r3, r2, r3
 800bb28:	0a5b      	lsrs	r3, r3, #9
 800bb2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb2e:	fb02 f303 	mul.w	r3, r2, r3
 800bb32:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	1e5a      	subs	r2, r3, #1
 800bb38:	61fa      	str	r2, [r7, #28]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb3e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb42:	e052      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb48:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0ef      	beq.n	800bb34 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1ea      	bne.n	800bb34 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb62:	f003 0304 	and.w	r3, r3, #4
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d004      	beq.n	800bb74 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2204      	movs	r2, #4
 800bb6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb70:	2304      	movs	r3, #4
 800bb72:	e03a      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d004      	beq.n	800bb8a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2201      	movs	r2, #1
 800bb84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e02f      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fc0d 	bl	800b3aa <SDIO_GetCommandResponse>
 800bb90:	4603      	mov	r3, r0
 800bb92:	461a      	mov	r2, r3
 800bb94:	7afb      	ldrb	r3, [r7, #11]
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d001      	beq.n	800bb9e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e025      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	22c5      	movs	r2, #197	@ 0xc5
 800bba2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bba4:	2100      	movs	r1, #0
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff fc0c 	bl	800b3c4 <SDIO_GetResponse>
 800bbac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d106      	bne.n	800bbc6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	0c1b      	lsrs	r3, r3, #16
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e011      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bbd4:	e009      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbe4:	e001      	b.n	800bbea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3720      	adds	r7, #32
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000000 	.word	0x20000000
 800bbf8:	10624dd3 	.word	0x10624dd3

0800bbfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc04:	4b22      	ldr	r3, [pc, #136]	@ (800bc90 <SDMMC_GetCmdResp7+0x94>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a22      	ldr	r2, [pc, #136]	@ (800bc94 <SDMMC_GetCmdResp7+0x98>)
 800bc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0e:	0a5b      	lsrs	r3, r3, #9
 800bc10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc14:	fb02 f303 	mul.w	r3, r2, r3
 800bc18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	1e5a      	subs	r2, r3, #1
 800bc1e:	60fa      	str	r2, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc28:	e02c      	b.n	800bc84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0ef      	beq.n	800bc1a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1ea      	bne.n	800bc1a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d004      	beq.n	800bc5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2204      	movs	r2, #4
 800bc54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc56:	2304      	movs	r3, #4
 800bc58:	e014      	b.n	800bc84 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d004      	beq.n	800bc70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e009      	b.n	800bc84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2240      	movs	r2, #64	@ 0x40
 800bc80:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc82:	2300      	movs	r3, #0
  
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	20000000 	.word	0x20000000
 800bc94:	10624dd3 	.word	0x10624dd3

0800bc98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bca0:	4b11      	ldr	r3, [pc, #68]	@ (800bce8 <SDMMC_GetCmdError+0x50>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a11      	ldr	r2, [pc, #68]	@ (800bcec <SDMMC_GetCmdError+0x54>)
 800bca6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcaa:	0a5b      	lsrs	r3, r3, #9
 800bcac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	1e5a      	subs	r2, r3, #1
 800bcba:	60fa      	str	r2, [r7, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bcc4:	e009      	b.n	800bcda <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0f1      	beq.n	800bcb6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	22c5      	movs	r2, #197	@ 0xc5
 800bcd6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20000000 	.word	0x20000000
 800bcec:	10624dd3 	.word	0x10624dd3

0800bcf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	f107 001c 	add.w	r0, r7, #28
 800bcfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d123      	bne.n	800bd52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800bd1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d105      	bne.n	800bd46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f9dc 	bl	800c104 <USB_CoreReset>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]
 800bd50:	e01b      	b.n	800bd8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f9d0 	bl	800c104 <USB_CoreReset>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d106      	bne.n	800bd7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	639a      	str	r2, [r3, #56]	@ 0x38
 800bd7c:	e005      	b.n	800bd8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd8a:	7fbb      	ldrb	r3, [r7, #30]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d10b      	bne.n	800bda8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	f043 0206 	orr.w	r2, r3, #6
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f043 0220 	orr.w	r2, r3, #32
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdb4:	b004      	add	sp, #16
 800bdb6:	4770      	bx	lr

0800bdb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	f043 0201 	orr.w	r2, r3, #1
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f023 0201 	bic.w	r2, r3, #1
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d115      	bne.n	800be4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be2a:	200a      	movs	r0, #10
 800be2c:	f7f7 fa1e 	bl	800326c <HAL_Delay>
      ms += 10U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	330a      	adds	r3, #10
 800be34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f956 	bl	800c0e8 <USB_GetMode>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d01e      	beq.n	800be80 <USB_SetCurrentMode+0x84>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2bc7      	cmp	r3, #199	@ 0xc7
 800be46:	d9f0      	bls.n	800be2a <USB_SetCurrentMode+0x2e>
 800be48:	e01a      	b.n	800be80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d115      	bne.n	800be7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be5c:	200a      	movs	r0, #10
 800be5e:	f7f7 fa05 	bl	800326c <HAL_Delay>
      ms += 10U;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	330a      	adds	r3, #10
 800be66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f93d 	bl	800c0e8 <USB_GetMode>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d005      	beq.n	800be80 <USB_SetCurrentMode+0x84>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2bc7      	cmp	r3, #199	@ 0xc7
 800be78:	d9f0      	bls.n	800be5c <USB_SetCurrentMode+0x60>
 800be7a:	e001      	b.n	800be80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	e005      	b.n	800be8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2bc8      	cmp	r3, #200	@ 0xc8
 800be84:	d101      	bne.n	800be8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e000      	b.n	800be8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3301      	adds	r3, #1
 800bea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800beae:	d901      	bls.n	800beb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e01b      	b.n	800beec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	daf2      	bge.n	800bea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	019b      	lsls	r3, r3, #6
 800bec4:	f043 0220 	orr.w	r2, r3, #32
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3301      	adds	r3, #1
 800bed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bed8:	d901      	bls.n	800bede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	e006      	b.n	800beec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b20      	cmp	r3, #32
 800bee8:	d0f0      	beq.n	800becc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3301      	adds	r3, #1
 800bf08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf10:	d901      	bls.n	800bf16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e018      	b.n	800bf48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	daf2      	bge.n	800bf04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2210      	movs	r2, #16
 800bf26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf34:	d901      	bls.n	800bf3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bf36:	2303      	movs	r3, #3
 800bf38:	e006      	b.n	800bf48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	f003 0310 	and.w	r3, r3, #16
 800bf42:	2b10      	cmp	r3, #16
 800bf44:	d0f0      	beq.n	800bf28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	@ 0x24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	460b      	mov	r3, r1
 800bf64:	71fb      	strb	r3, [r7, #7]
 800bf66:	4613      	mov	r3, r2
 800bf68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bf72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d123      	bne.n	800bfc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf7a:	88bb      	ldrh	r3, [r7, #4]
 800bf7c:	3303      	adds	r3, #3
 800bf7e:	089b      	lsrs	r3, r3, #2
 800bf80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf82:	2300      	movs	r3, #0
 800bf84:	61bb      	str	r3, [r7, #24]
 800bf86:	e018      	b.n	800bfba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	031a      	lsls	r2, r3, #12
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	4413      	add	r3, r2
 800bf90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf94:	461a      	mov	r2, r3
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d3e2      	bcc.n	800bf88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3724      	adds	r7, #36	@ 0x24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b08b      	sub	sp, #44	@ 0x2c
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bfe6:	88fb      	ldrh	r3, [r7, #6]
 800bfe8:	089b      	lsrs	r3, r3, #2
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bfee:	88fb      	ldrh	r3, [r7, #6]
 800bff0:	f003 0303 	and.w	r3, r3, #3
 800bff4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bff6:	2300      	movs	r3, #0
 800bff8:	623b      	str	r3, [r7, #32]
 800bffa:	e014      	b.n	800c026 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c006:	601a      	str	r2, [r3, #0]
    pDest++;
 800c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00a:	3301      	adds	r3, #1
 800c00c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c010:	3301      	adds	r3, #1
 800c012:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	3301      	adds	r3, #1
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	3301      	adds	r3, #1
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	3301      	adds	r3, #1
 800c024:	623b      	str	r3, [r7, #32]
 800c026:	6a3a      	ldr	r2, [r7, #32]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d3e6      	bcc.n	800bffc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c02e:	8bfb      	ldrh	r3, [r7, #30]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d01e      	beq.n	800c072 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c034:	2300      	movs	r3, #0
 800c036:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c03e:	461a      	mov	r2, r3
 800c040:	f107 0310 	add.w	r3, r7, #16
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	fa22 f303 	lsr.w	r3, r2, r3
 800c054:	b2da      	uxtb	r2, r3
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	701a      	strb	r2, [r3, #0]
      i++;
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	3301      	adds	r3, #1
 800c05e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c062:	3301      	adds	r3, #1
 800c064:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c066:	8bfb      	ldrh	r3, [r7, #30]
 800c068:	3b01      	subs	r3, #1
 800c06a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c06c:	8bfb      	ldrh	r3, [r7, #30]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1ea      	bne.n	800c048 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c074:	4618      	mov	r0, r3
 800c076:	372c      	adds	r7, #44	@ 0x2c
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	4013      	ands	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c098:	68fb      	ldr	r3, [r7, #12]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b085      	sub	sp, #20
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c0c6:	78fb      	ldrb	r3, [r7, #3]
 800c0c8:	015a      	lsls	r2, r3, #5
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0da:	68bb      	ldr	r3, [r7, #8]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	f003 0301 	and.w	r3, r3, #1
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c10c:	2300      	movs	r3, #0
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3301      	adds	r3, #1
 800c114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c11c:	d901      	bls.n	800c122 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c11e:	2303      	movs	r3, #3
 800c120:	e01b      	b.n	800c15a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	daf2      	bge.n	800c110 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f043 0201 	orr.w	r2, r3, #1
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3301      	adds	r3, #1
 800c13e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c146:	d901      	bls.n	800c14c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c148:	2303      	movs	r3, #3
 800c14a:	e006      	b.n	800c15a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b01      	cmp	r3, #1
 800c156:	d0f0      	beq.n	800c13a <USB_CoreReset+0x36>

  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c168:	b084      	sub	sp, #16
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b086      	sub	sp, #24
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c188:	461a      	mov	r2, r3
 800c18a:	2300      	movs	r3, #0
 800c18c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c192:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d119      	bne.n	800c1da <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d10a      	bne.n	800c1c4 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c1bc:	f043 0304 	orr.w	r3, r3, #4
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	e014      	b.n	800c1ee <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c1d2:	f023 0304 	bic.w	r3, r3, #4
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	e009      	b.n	800c1ee <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c1e8:	f023 0304 	bic.w	r3, r3, #4
 800c1ec:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c1ee:	2110      	movs	r1, #16
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff fe4f 	bl	800be94 <USB_FlushTxFifo>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff fe79 	bl	800bef8 <USB_FlushRxFifo>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c210:	2300      	movs	r3, #0
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	e015      	b.n	800c242 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	015a      	lsls	r2, r3, #5
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4413      	add	r3, r2
 800c21e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c222:	461a      	mov	r2, r3
 800c224:	f04f 33ff 	mov.w	r3, #4294967295
 800c228:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	015a      	lsls	r2, r3, #5
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	4413      	add	r3, r2
 800c232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c236:	461a      	mov	r2, r3
 800c238:	2300      	movs	r3, #0
 800c23a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	3301      	adds	r3, #1
 800c240:	613b      	str	r3, [r7, #16]
 800c242:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c246:	461a      	mov	r2, r3
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d3e3      	bcc.n	800c216 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a18      	ldr	r2, [pc, #96]	@ (800c2c0 <USB_HostInit+0x158>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d10b      	bne.n	800c27c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c26a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a15      	ldr	r2, [pc, #84]	@ (800c2c4 <USB_HostInit+0x15c>)
 800c270:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a14      	ldr	r2, [pc, #80]	@ (800c2c8 <USB_HostInit+0x160>)
 800c276:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800c27a:	e009      	b.n	800c290 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2280      	movs	r2, #128	@ 0x80
 800c280:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a11      	ldr	r2, [pc, #68]	@ (800c2cc <USB_HostInit+0x164>)
 800c286:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a11      	ldr	r2, [pc, #68]	@ (800c2d0 <USB_HostInit+0x168>)
 800c28c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c290:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c294:	2b00      	cmp	r3, #0
 800c296:	d105      	bne.n	800c2a4 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	f043 0210 	orr.w	r2, r3, #16
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d4 <USB_HostInit+0x16c>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3718      	adds	r7, #24
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2bc:	b004      	add	sp, #16
 800c2be:	4770      	bx	lr
 800c2c0:	40040000 	.word	0x40040000
 800c2c4:	01000200 	.word	0x01000200
 800c2c8:	00e00300 	.word	0x00e00300
 800c2cc:	00600080 	.word	0x00600080
 800c2d0:	004000e0 	.word	0x004000e0
 800c2d4:	a3200008 	.word	0xa3200008

0800c2d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2f6:	f023 0303 	bic.w	r3, r3, #3
 800c2fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	f003 0303 	and.w	r3, r3, #3
 800c30a:	68f9      	ldr	r1, [r7, #12]
 800c30c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c310:	4313      	orrs	r3, r2
 800c312:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d107      	bne.n	800c32a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c320:	461a      	mov	r2, r3
 800c322:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c326:	6053      	str	r3, [r2, #4]
 800c328:	e00c      	b.n	800c344 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c32a:	78fb      	ldrb	r3, [r7, #3]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d107      	bne.n	800c340 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c336:	461a      	mov	r2, r3
 800c338:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c33c:	6053      	str	r3, [r2, #4]
 800c33e:	e001      	b.n	800c344 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c35e:	2300      	movs	r3, #0
 800c360:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c372:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c37c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c380:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c382:	2064      	movs	r0, #100	@ 0x64
 800c384:	f7f6 ff72 	bl	800326c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c394:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c396:	200a      	movs	r0, #10
 800c398:	f7f6 ff68 	bl	800326c <HAL_Delay>

  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c3ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d109      	bne.n	800c3ea <USB_DriveVbus+0x44>
 800c3d6:	78fb      	ldrb	r3, [r7, #3]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d106      	bne.n	800c3ea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c3e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c3e8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3f4:	d109      	bne.n	800c40a <USB_DriveVbus+0x64>
 800c3f6:	78fb      	ldrb	r3, [r7, #3]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d106      	bne.n	800c40a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c408:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	0c5b      	lsrs	r3, r3, #17
 800c436:	f003 0303 	and.w	r3, r3, #3
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c446:	b480      	push	{r7}
 800c448:	b085      	sub	sp, #20
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	b29b      	uxth	r3, r3
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	4608      	mov	r0, r1
 800c472:	4611      	mov	r1, r2
 800c474:	461a      	mov	r2, r3
 800c476:	4603      	mov	r3, r0
 800c478:	70fb      	strb	r3, [r7, #3]
 800c47a:	460b      	mov	r3, r1
 800c47c:	70bb      	strb	r3, [r7, #2]
 800c47e:	4613      	mov	r3, r2
 800c480:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c48a:	78fb      	ldrb	r3, [r7, #3]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	4413      	add	r3, r2
 800c492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c496:	461a      	mov	r2, r3
 800c498:	f04f 33ff 	mov.w	r3, #4294967295
 800c49c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c49e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d87c      	bhi.n	800c5a0 <USB_HC_Init+0x138>
 800c4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <USB_HC_Init+0x44>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c4bd 	.word	0x0800c4bd
 800c4b0:	0800c563 	.word	0x0800c563
 800c4b4:	0800c4bd 	.word	0x0800c4bd
 800c4b8:	0800c525 	.word	0x0800c525
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	f240 439d 	movw	r3, #1181	@ 0x49d
 800c4ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c4d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	da10      	bge.n	800c4fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c4d8:	78fb      	ldrb	r3, [r7, #3]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	78fa      	ldrb	r2, [r7, #3]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c4f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4f6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c4f8:	e055      	b.n	800c5a6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a6f      	ldr	r2, [pc, #444]	@ (800c6bc <USB_HC_Init+0x254>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d151      	bne.n	800c5a6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	015a      	lsls	r2, r3, #5
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	4413      	add	r3, r2
 800c50a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	78fa      	ldrb	r2, [r7, #3]
 800c512:	0151      	lsls	r1, r2, #5
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	440a      	add	r2, r1
 800c518:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c51c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c520:	60d3      	str	r3, [r2, #12]
      break;
 800c522:	e040      	b.n	800c5a6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c524:	78fb      	ldrb	r3, [r7, #3]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c530:	461a      	mov	r2, r3
 800c532:	f240 639d 	movw	r3, #1693	@ 0x69d
 800c536:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c538:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	da34      	bge.n	800c5aa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	4413      	add	r3, r2
 800c548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	78fa      	ldrb	r2, [r7, #3]
 800c550:	0151      	lsls	r1, r2, #5
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	440a      	add	r2, r1
 800c556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c55a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c55e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c560:	e023      	b.n	800c5aa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c562:	78fb      	ldrb	r3, [r7, #3]
 800c564:	015a      	lsls	r2, r3, #5
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	4413      	add	r3, r2
 800c56a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c56e:	461a      	mov	r2, r3
 800c570:	f240 2325 	movw	r3, #549	@ 0x225
 800c574:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c576:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	da17      	bge.n	800c5ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c57e:	78fb      	ldrb	r3, [r7, #3]
 800c580:	015a      	lsls	r2, r3, #5
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	4413      	add	r3, r2
 800c586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	78fa      	ldrb	r2, [r7, #3]
 800c58e:	0151      	lsls	r1, r2, #5
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	440a      	add	r2, r1
 800c594:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c598:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800c59c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c59e:	e006      	b.n	800c5ae <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	77fb      	strb	r3, [r7, #31]
      break;
 800c5a4:	e004      	b.n	800c5b0 <USB_HC_Init+0x148>
      break;
 800c5a6:	bf00      	nop
 800c5a8:	e002      	b.n	800c5b0 <USB_HC_Init+0x148>
      break;
 800c5aa:	bf00      	nop
 800c5ac:	e000      	b.n	800c5b0 <USB_HC_Init+0x148>
      break;
 800c5ae:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5bc:	461a      	mov	r2, r3
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	015a      	lsls	r2, r3, #5
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	78fa      	ldrb	r2, [r7, #3]
 800c5d2:	0151      	lsls	r1, r2, #5
 800c5d4:	693a      	ldr	r2, [r7, #16]
 800c5d6:	440a      	add	r2, r1
 800c5d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c5dc:	f043 0302 	orr.w	r3, r3, #2
 800c5e0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5e8:	699a      	ldr	r2, [r3, #24]
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	f003 030f 	and.w	r3, r3, #15
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5f6:	6939      	ldr	r1, [r7, #16]
 800c5f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c60c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c610:	2b00      	cmp	r3, #0
 800c612:	da03      	bge.n	800c61c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c618:	61bb      	str	r3, [r7, #24]
 800c61a:	e001      	b.n	800c620 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c61c:	2300      	movs	r3, #0
 800c61e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fef9 	bl	800c418 <USB_GetHostSpeed>
 800c626:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c628:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d106      	bne.n	800c63e <USB_HC_Init+0x1d6>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d003      	beq.n	800c63e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c636:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c63a:	617b      	str	r3, [r7, #20]
 800c63c:	e001      	b.n	800c642 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c63e:	2300      	movs	r3, #0
 800c640:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c642:	787b      	ldrb	r3, [r7, #1]
 800c644:	059b      	lsls	r3, r3, #22
 800c646:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c64a:	78bb      	ldrb	r3, [r7, #2]
 800c64c:	02db      	lsls	r3, r3, #11
 800c64e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c652:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c654:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c658:	049b      	lsls	r3, r3, #18
 800c65a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c65e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c660:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c662:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c666:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	431a      	orrs	r2, r3
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c670:	78fa      	ldrb	r2, [r7, #3]
 800c672:	0151      	lsls	r1, r2, #5
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	440a      	add	r2, r1
 800c678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c67c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c680:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c682:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c686:	2b03      	cmp	r3, #3
 800c688:	d003      	beq.n	800c692 <USB_HC_Init+0x22a>
 800c68a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d10f      	bne.n	800c6b2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c692:	78fb      	ldrb	r3, [r7, #3]
 800c694:	015a      	lsls	r2, r3, #5
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	4413      	add	r3, r2
 800c69a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	78fa      	ldrb	r2, [r7, #3]
 800c6a2:	0151      	lsls	r1, r2, #5
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	440a      	add	r2, r1
 800c6a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c6ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c6b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c6b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3720      	adds	r7, #32
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	40040000 	.word	0x40040000

0800c6c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08c      	sub	sp, #48	@ 0x30
 800c6c4:	af02      	add	r7, sp, #8
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800c6d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6dc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4a5d      	ldr	r2, [pc, #372]	@ (800c858 <USB_HC_StartXfer+0x198>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d12f      	bne.n	800c746 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d11c      	bne.n	800c726 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	7c9b      	ldrb	r3, [r3, #18]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <USB_HC_StartXfer+0x3c>
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	7c9b      	ldrb	r3, [r3, #18]
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d124      	bne.n	800c746 <USB_HC_StartXfer+0x86>
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	799b      	ldrb	r3, [r3, #6]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d120      	bne.n	800c746 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	015a      	lsls	r2, r3, #5
 800c708:	6a3b      	ldr	r3, [r7, #32]
 800c70a:	4413      	add	r3, r2
 800c70c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	69fa      	ldr	r2, [r7, #28]
 800c714:	0151      	lsls	r1, r2, #5
 800c716:	6a3a      	ldr	r2, [r7, #32]
 800c718:	440a      	add	r2, r1
 800c71a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c71e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c722:	60d3      	str	r3, [r2, #12]
 800c724:	e00f      	b.n	800c746 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	791b      	ldrb	r3, [r3, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10b      	bne.n	800c746 <USB_HC_StartXfer+0x86>
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	795b      	ldrb	r3, [r3, #5]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d107      	bne.n	800c746 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	785b      	ldrb	r3, [r3, #1]
 800c73a:	4619      	mov	r1, r3
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 fb6b 	bl	800ce18 <USB_DoPing>
        return HAL_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	e232      	b.n	800cbac <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	799b      	ldrb	r3, [r3, #6]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d158      	bne.n	800c800 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800c74e:	2301      	movs	r3, #1
 800c750:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	78db      	ldrb	r3, [r3, #3]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d007      	beq.n	800c76a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c75a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	8a92      	ldrh	r2, [r2, #20]
 800c760:	fb03 f202 	mul.w	r2, r3, r2
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	61da      	str	r2, [r3, #28]
 800c768:	e07c      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	7c9b      	ldrb	r3, [r3, #18]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d130      	bne.n	800c7d4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	2bbc      	cmp	r3, #188	@ 0xbc
 800c778:	d918      	bls.n	800c7ac <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	8a9b      	ldrh	r3, [r3, #20]
 800c77e:	461a      	mov	r2, r3
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	69da      	ldr	r2, [r3, #28]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d003      	beq.n	800c79c <USB_HC_StartXfer+0xdc>
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d103      	bne.n	800c7a4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	e05f      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	60da      	str	r2, [r3, #12]
 800c7aa:	e05b      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	6a1a      	ldr	r2, [r3, #32]
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d007      	beq.n	800c7cc <USB_HC_StartXfer+0x10c>
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d003      	beq.n	800c7cc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2204      	movs	r2, #4
 800c7c8:	60da      	str	r2, [r3, #12]
 800c7ca:	e04b      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2203      	movs	r2, #3
 800c7d0:	60da      	str	r2, [r3, #12]
 800c7d2:	e047      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d10d      	bne.n	800c7f6 <USB_HC_StartXfer+0x136>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	8a92      	ldrh	r2, [r2, #20]
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d907      	bls.n	800c7f6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c7e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	8a92      	ldrh	r2, [r2, #20]
 800c7ec:	fb03 f202 	mul.w	r2, r3, r2
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	61da      	str	r2, [r3, #28]
 800c7f4:	e036      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6a1a      	ldr	r2, [r3, #32]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	61da      	str	r2, [r3, #28]
 800c7fe:	e031      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d018      	beq.n	800c83a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	8a92      	ldrh	r2, [r2, #20]
 800c810:	4413      	add	r3, r2
 800c812:	3b01      	subs	r3, #1
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	8a92      	ldrh	r2, [r2, #20]
 800c818:	fbb3 f3f2 	udiv	r3, r3, r2
 800c81c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800c81e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c820:	8b7b      	ldrh	r3, [r7, #26]
 800c822:	429a      	cmp	r2, r3
 800c824:	d90b      	bls.n	800c83e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800c826:	8b7b      	ldrh	r3, [r7, #26]
 800c828:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c82a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	8a92      	ldrh	r2, [r2, #20]
 800c830:	fb03 f202 	mul.w	r2, r3, r2
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	61da      	str	r2, [r3, #28]
 800c838:	e001      	b.n	800c83e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800c83a:	2301      	movs	r3, #1
 800c83c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	78db      	ldrb	r3, [r3, #3]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c846:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	8a92      	ldrh	r2, [r2, #20]
 800c84c:	fb03 f202 	mul.w	r2, r3, r2
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	61da      	str	r2, [r3, #28]
 800c854:	e006      	b.n	800c864 <USB_HC_StartXfer+0x1a4>
 800c856:	bf00      	nop
 800c858:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	6a1a      	ldr	r2, [r3, #32]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	69db      	ldr	r3, [r3, #28]
 800c868:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c86c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c86e:	04d9      	lsls	r1, r3, #19
 800c870:	4ba3      	ldr	r3, [pc, #652]	@ (800cb00 <USB_HC_StartXfer+0x440>)
 800c872:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c874:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	7d9b      	ldrb	r3, [r3, #22]
 800c87a:	075b      	lsls	r3, r3, #29
 800c87c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c880:	69f9      	ldr	r1, [r7, #28]
 800c882:	0148      	lsls	r0, r1, #5
 800c884:	6a39      	ldr	r1, [r7, #32]
 800c886:	4401      	add	r1, r0
 800c888:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c88c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c88e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c890:	79fb      	ldrb	r3, [r7, #7]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d009      	beq.n	800c8aa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	6999      	ldr	r1, [r3, #24]
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8a6:	460a      	mov	r2, r1
 800c8a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	bf0c      	ite	eq
 800c8ba:	2301      	moveq	r3, #1
 800c8bc:	2300      	movne	r3, #0
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	69fa      	ldr	r2, [r7, #28]
 800c8d2:	0151      	lsls	r1, r2, #5
 800c8d4:	6a3a      	ldr	r2, [r7, #32]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c8dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c8e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	7e7b      	ldrb	r3, [r7, #25]
 800c8f2:	075b      	lsls	r3, r3, #29
 800c8f4:	69f9      	ldr	r1, [r7, #28]
 800c8f6:	0148      	lsls	r0, r1, #5
 800c8f8:	6a39      	ldr	r1, [r7, #32]
 800c8fa:	4401      	add	r1, r0
 800c8fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800c900:	4313      	orrs	r3, r2
 800c902:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	799b      	ldrb	r3, [r3, #6]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	f040 80c3 	bne.w	800ca94 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	7c5b      	ldrb	r3, [r3, #17]
 800c912:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c918:	4313      	orrs	r3, r2
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	0151      	lsls	r1, r2, #5
 800c91e:	6a3a      	ldr	r2, [r7, #32]
 800c920:	440a      	add	r2, r1
 800c922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c92a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	015a      	lsls	r2, r3, #5
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	4413      	add	r3, r2
 800c934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	69fa      	ldr	r2, [r7, #28]
 800c93c:	0151      	lsls	r1, r2, #5
 800c93e:	6a3a      	ldr	r2, [r7, #32]
 800c940:	440a      	add	r2, r1
 800c942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c946:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c94a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	79db      	ldrb	r3, [r3, #7]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d123      	bne.n	800c99c <USB_HC_StartXfer+0x2dc>
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	78db      	ldrb	r3, [r3, #3]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11f      	bne.n	800c99c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	4413      	add	r3, r2
 800c964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	69fa      	ldr	r2, [r7, #28]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	6a3a      	ldr	r2, [r7, #32]
 800c970:	440a      	add	r2, r1
 800c972:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c97a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	6a3b      	ldr	r3, [r7, #32]
 800c982:	4413      	add	r3, r2
 800c984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	69fa      	ldr	r2, [r7, #28]
 800c98c:	0151      	lsls	r1, r2, #5
 800c98e:	6a3a      	ldr	r2, [r7, #32]
 800c990:	440a      	add	r2, r1
 800c992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c99a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	7c9b      	ldrb	r3, [r3, #18]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d003      	beq.n	800c9ac <USB_HC_StartXfer+0x2ec>
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	7c9b      	ldrb	r3, [r3, #18]
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d117      	bne.n	800c9dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d113      	bne.n	800c9dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	78db      	ldrb	r3, [r3, #3]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d10f      	bne.n	800c9dc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	0151      	lsls	r1, r2, #5
 800c9ce:	6a3a      	ldr	r2, [r7, #32]
 800c9d0:	440a      	add	r2, r1
 800c9d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c9d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9da:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	7c9b      	ldrb	r3, [r3, #18]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d162      	bne.n	800caaa <USB_HC_StartXfer+0x3ea>
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	78db      	ldrb	r3, [r3, #3]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d15e      	bne.n	800caaa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	d858      	bhi.n	800caa8 <USB_HC_StartXfer+0x3e8>
 800c9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9fc <USB_HC_StartXfer+0x33c>)
 800c9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fc:	0800ca0d 	.word	0x0800ca0d
 800ca00:	0800ca2f 	.word	0x0800ca2f
 800ca04:	0800ca51 	.word	0x0800ca51
 800ca08:	0800ca73 	.word	0x0800ca73
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	015a      	lsls	r2, r3, #5
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	4413      	add	r3, r2
 800ca14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	69fa      	ldr	r2, [r7, #28]
 800ca1c:	0151      	lsls	r1, r2, #5
 800ca1e:	6a3a      	ldr	r2, [r7, #32]
 800ca20:	440a      	add	r2, r1
 800ca22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca2a:	6053      	str	r3, [r2, #4]
          break;
 800ca2c:	e03d      	b.n	800caaa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	015a      	lsls	r2, r3, #5
 800ca32:	6a3b      	ldr	r3, [r7, #32]
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	69fa      	ldr	r2, [r7, #28]
 800ca3e:	0151      	lsls	r1, r2, #5
 800ca40:	6a3a      	ldr	r2, [r7, #32]
 800ca42:	440a      	add	r2, r1
 800ca44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca48:	f043 030e 	orr.w	r3, r3, #14
 800ca4c:	6053      	str	r3, [r2, #4]
          break;
 800ca4e:	e02c      	b.n	800caaa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	69fa      	ldr	r2, [r7, #28]
 800ca60:	0151      	lsls	r1, r2, #5
 800ca62:	6a3a      	ldr	r2, [r7, #32]
 800ca64:	440a      	add	r2, r1
 800ca66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca6e:	6053      	str	r3, [r2, #4]
          break;
 800ca70:	e01b      	b.n	800caaa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	015a      	lsls	r2, r3, #5
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	69fa      	ldr	r2, [r7, #28]
 800ca82:	0151      	lsls	r1, r2, #5
 800ca84:	6a3a      	ldr	r2, [r7, #32]
 800ca86:	440a      	add	r2, r1
 800ca88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca90:	6053      	str	r3, [r2, #4]
          break;
 800ca92:	e00a      	b.n	800caaa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800caa0:	461a      	mov	r2, r3
 800caa2:	2300      	movs	r3, #0
 800caa4:	6053      	str	r3, [r2, #4]
 800caa6:	e000      	b.n	800caaa <USB_HC_StartXfer+0x3ea>
          break;
 800caa8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	6a3b      	ldr	r3, [r7, #32]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cac0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d004      	beq.n	800cad4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad0:	613b      	str	r3, [r7, #16]
 800cad2:	e003      	b.n	800cadc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cada:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cae2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	015a      	lsls	r2, r3, #5
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	4413      	add	r3, r2
 800caec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800caf0:	461a      	mov	r2, r3
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	e055      	b.n	800cbac <USB_HC_StartXfer+0x4ec>
 800cb00:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	78db      	ldrb	r3, [r3, #3]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d14e      	bne.n	800cbaa <USB_HC_StartXfer+0x4ea>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d04a      	beq.n	800cbaa <USB_HC_StartXfer+0x4ea>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	79db      	ldrb	r3, [r3, #7]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d146      	bne.n	800cbaa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	7c9b      	ldrb	r3, [r3, #18]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d831      	bhi.n	800cb88 <USB_HC_StartXfer+0x4c8>
 800cb24:	a201      	add	r2, pc, #4	@ (adr r2, 800cb2c <USB_HC_StartXfer+0x46c>)
 800cb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cb3d 	.word	0x0800cb3d
 800cb30:	0800cb61 	.word	0x0800cb61
 800cb34:	0800cb3d 	.word	0x0800cb3d
 800cb38:	0800cb61 	.word	0x0800cb61
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	3303      	adds	r3, #3
 800cb42:	089b      	lsrs	r3, r3, #2
 800cb44:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cb46:	8afa      	ldrh	r2, [r7, #22]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d91c      	bls.n	800cb8c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	f043 0220 	orr.w	r2, r3, #32
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	619a      	str	r2, [r3, #24]
        }
        break;
 800cb5e:	e015      	b.n	800cb8c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	3303      	adds	r3, #3
 800cb66:	089b      	lsrs	r3, r3, #2
 800cb68:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cb6a:	8afa      	ldrh	r2, [r7, #22]
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d90a      	bls.n	800cb90 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	619a      	str	r2, [r3, #24]
        }
        break;
 800cb86:	e003      	b.n	800cb90 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800cb88:	bf00      	nop
 800cb8a:	e002      	b.n	800cb92 <USB_HC_StartXfer+0x4d2>
        break;
 800cb8c:	bf00      	nop
 800cb8e:	e000      	b.n	800cb92 <USB_HC_StartXfer+0x4d2>
        break;
 800cb90:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	6999      	ldr	r1, [r3, #24]
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	785a      	ldrb	r2, [r3, #1]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	2000      	movs	r0, #0
 800cba2:	9000      	str	r0, [sp, #0]
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f7ff f9d5 	bl	800bf54 <USB_WritePacket>
  }

  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3728      	adds	r7, #40	@ 0x28
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	b29b      	uxth	r3, r3
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b089      	sub	sp, #36	@ 0x24
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cbe6:	78fb      	ldrb	r3, [r7, #3]
 800cbe8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	0c9b      	lsrs	r3, r3, #18
 800cbfe:	f003 0303 	and.w	r3, r3, #3
 800cc02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	0fdb      	lsrs	r3, r3, #31
 800cc14:	f003 0301 	and.w	r3, r3, #1
 800cc18:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	0fdb      	lsrs	r3, r3, #31
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	f003 0320 	and.w	r3, r3, #32
 800cc38:	2b20      	cmp	r3, #32
 800cc3a:	d10d      	bne.n	800cc58 <USB_HC_Halt+0x82>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10a      	bne.n	800cc58 <USB_HC_Halt+0x82>
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d005      	beq.n	800cc54 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d002      	beq.n	800cc54 <USB_HC_Halt+0x7e>
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	d101      	bne.n	800cc58 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	e0d8      	b.n	800ce0a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d002      	beq.n	800cc64 <USB_HC_Halt+0x8e>
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d173      	bne.n	800cd4c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	69ba      	ldr	r2, [r7, #24]
 800cc74:	0151      	lsls	r1, r2, #5
 800cc76:	69fa      	ldr	r2, [r7, #28]
 800cc78:	440a      	add	r2, r1
 800cc7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	f003 0320 	and.w	r3, r3, #32
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d14a      	bne.n	800cd26 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d133      	bne.n	800cd04 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	015a      	lsls	r2, r3, #5
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	0151      	lsls	r1, r2, #5
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	440a      	add	r2, r1
 800ccb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ccba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	015a      	lsls	r2, r3, #5
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	69ba      	ldr	r2, [r7, #24]
 800cccc:	0151      	lsls	r1, r2, #5
 800ccce:	69fa      	ldr	r2, [r7, #28]
 800ccd0:	440a      	add	r2, r1
 800ccd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ccda:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	3301      	adds	r3, #1
 800cce0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cce8:	d82e      	bhi.n	800cd48 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	015a      	lsls	r2, r3, #5
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd00:	d0ec      	beq.n	800ccdc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd02:	e081      	b.n	800ce08 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	0151      	lsls	r1, r2, #5
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	440a      	add	r2, r1
 800cd1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cd22:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd24:	e070      	b.n	800ce08 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	015a      	lsls	r2, r3, #5
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	0151      	lsls	r1, r2, #5
 800cd38:	69fa      	ldr	r2, [r7, #28]
 800cd3a:	440a      	add	r2, r1
 800cd3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cd44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd46:	e05f      	b.n	800ce08 <USB_HC_Halt+0x232>
            break;
 800cd48:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd4a:	e05d      	b.n	800ce08 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	69ba      	ldr	r2, [r7, #24]
 800cd5c:	0151      	lsls	r1, r2, #5
 800cd5e:	69fa      	ldr	r2, [r7, #28]
 800cd60:	440a      	add	r2, r1
 800cd62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd6a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d133      	bne.n	800cde4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	69ba      	ldr	r2, [r7, #24]
 800cd8c:	0151      	lsls	r1, r2, #5
 800cd8e:	69fa      	ldr	r2, [r7, #28]
 800cd90:	440a      	add	r2, r1
 800cd92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69ba      	ldr	r2, [r7, #24]
 800cdac:	0151      	lsls	r1, r2, #5
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	440a      	add	r2, r1
 800cdb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cdb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cdba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cdc8:	d81d      	bhi.n	800ce06 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	015a      	lsls	r2, r3, #5
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cde0:	d0ec      	beq.n	800cdbc <USB_HC_Halt+0x1e6>
 800cde2:	e011      	b.n	800ce08 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	015a      	lsls	r2, r3, #5
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	69ba      	ldr	r2, [r7, #24]
 800cdf4:	0151      	lsls	r1, r2, #5
 800cdf6:	69fa      	ldr	r2, [r7, #28]
 800cdf8:	440a      	add	r2, r1
 800cdfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cdfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce02:	6013      	str	r3, [r2, #0]
 800ce04:	e000      	b.n	800ce08 <USB_HC_Halt+0x232>
          break;
 800ce06:	bf00      	nop
    }
  }

  return HAL_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3724      	adds	r7, #36	@ 0x24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
	...

0800ce18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	04da      	lsls	r2, r3, #19
 800ce34:	4b15      	ldr	r3, [pc, #84]	@ (800ce8c <USB_DoPing+0x74>)
 800ce36:	4013      	ands	r3, r2
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	0151      	lsls	r1, r2, #5
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	440a      	add	r2, r1
 800ce40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ce44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ce60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce76:	461a      	mov	r2, r3
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	1ff80000 	.word	0x1ff80000

0800ce90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7fe ff98 	bl	800bdda <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ceaa:	2110      	movs	r1, #16
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7fe fff1 	bl	800be94 <USB_FlushTxFifo>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff f81b 	bl	800bef8 <USB_FlushRxFifo>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cecc:	2300      	movs	r3, #0
 800cece:	61bb      	str	r3, [r7, #24]
 800ced0:	e01f      	b.n	800cf12 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	015a      	lsls	r2, r3, #5
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	4413      	add	r3, r2
 800ceda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cee8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cef0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cef8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	015a      	lsls	r2, r3, #5
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	4413      	add	r3, r2
 800cf02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf06:	461a      	mov	r2, r3
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	61bb      	str	r3, [r7, #24]
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	2b0f      	cmp	r3, #15
 800cf16:	d9dc      	bls.n	800ced2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cf18:	2300      	movs	r3, #0
 800cf1a:	61bb      	str	r3, [r7, #24]
 800cf1c:	e034      	b.n	800cf88 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cf34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cf3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cf44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	015a      	lsls	r2, r3, #5
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf52:	461a      	mov	r2, r3
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cf64:	d80c      	bhi.n	800cf80 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	015a      	lsls	r2, r3, #5
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cf78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf7c:	d0ec      	beq.n	800cf58 <USB_StopHost+0xc8>
 800cf7e:	e000      	b.n	800cf82 <USB_StopHost+0xf2>
        break;
 800cf80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	3301      	adds	r3, #1
 800cf86:	61bb      	str	r3, [r7, #24]
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b0f      	cmp	r3, #15
 800cf8c:	d9c7      	bls.n	800cf1e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf94:	461a      	mov	r2, r3
 800cf96:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7fe ff07 	bl	800bdb8 <USB_EnableGlobalInt>

  return ret;
 800cfaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3720      	adds	r7, #32
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cfb8:	4904      	ldr	r1, [pc, #16]	@ (800cfcc <MX_FATFS_Init+0x18>)
 800cfba:	4805      	ldr	r0, [pc, #20]	@ (800cfd0 <MX_FATFS_Init+0x1c>)
 800cfbc:	f005 f942 	bl	8012244 <FATFS_LinkDriver>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4b03      	ldr	r3, [pc, #12]	@ (800cfd4 <MX_FATFS_Init+0x20>)
 800cfc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cfc8:	bf00      	nop
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	2000080c 	.word	0x2000080c
 800cfd0:	08013e30 	.word	0x08013e30
 800cfd4:	20000808 	.word	0x20000808

0800cfd8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cfdc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cff2:	f000 f888 	bl	800d106 <BSP_SD_IsDetected>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d001      	beq.n	800d000 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e005      	b.n	800d00c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d000:	4804      	ldr	r0, [pc, #16]	@ (800d014 <BSP_SD_Init+0x2c>)
 800d002:	f7fb fff5 	bl	8008ff0 <HAL_SD_Init>
 800d006:	4603      	mov	r3, r0
 800d008:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d00a:	79fb      	ldrb	r3, [r7, #7]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	20000560 	.word	0x20000560

0800d018 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	68f9      	ldr	r1, [r7, #12]
 800d02e:	4806      	ldr	r0, [pc, #24]	@ (800d048 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d030:	f7fc f88e 	bl	8009150 <HAL_SD_ReadBlocks_DMA>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	20000560 	.word	0x20000560

0800d04c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	68f9      	ldr	r1, [r7, #12]
 800d062:	4806      	ldr	r0, [pc, #24]	@ (800d07c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d064:	f7fc f954 	bl	8009310 <HAL_SD_WriteBlocks_DMA>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	20000560 	.word	0x20000560

0800d080 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d084:	4805      	ldr	r0, [pc, #20]	@ (800d09c <BSP_SD_GetCardState+0x1c>)
 800d086:	f7fc fd75 	bl	8009b74 <HAL_SD_GetCardState>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	bf14      	ite	ne
 800d090:	2301      	movne	r3, #1
 800d092:	2300      	moveq	r3, #0
 800d094:	b2db      	uxtb	r3, r3
}
 800d096:	4618      	mov	r0, r3
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	20000560 	.word	0x20000560

0800d0a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	4803      	ldr	r0, [pc, #12]	@ (800d0b8 <BSP_SD_GetCardInfo+0x18>)
 800d0ac:	f7fc fd36 	bl	8009b1c <HAL_SD_GetCardInfo>
}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	20000560 	.word	0x20000560

0800d0bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d0c4:	f000 f818 	bl	800d0f8 <BSP_SD_AbortCallback>
}
 800d0c8:	bf00      	nop
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d0d8:	f000 f9a8 	bl	800d42c <BSP_SD_WriteCpltCallback>
}
 800d0dc:	bf00      	nop
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d0ec:	f000 f9aa 	bl	800d444 <BSP_SD_ReadCpltCallback>
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	af00      	add	r7, sp, #0

}
 800d0fc:	bf00      	nop
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d10c:	2301      	movs	r3, #1
 800d10e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d110:	f000 f80c 	bl	800d12c <BSP_PlatformIsDetected>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d11a:	2300      	movs	r3, #0
 800d11c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d11e:	79fb      	ldrb	r3, [r7, #7]
 800d120:	b2db      	uxtb	r3, r3
}
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d132:	2301      	movs	r3, #1
 800d134:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d136:	2104      	movs	r1, #4
 800d138:	4806      	ldr	r0, [pc, #24]	@ (800d154 <BSP_PlatformIsDetected+0x28>)
 800d13a:	f7f7 fef7 	bl	8004f2c <HAL_GPIO_ReadPin>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d144:	2300      	movs	r3, #0
 800d146:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d148:	79fb      	ldrb	r3, [r7, #7]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	40021800 	.word	0x40021800

0800d158 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d160:	f7f6 f878 	bl	8003254 <HAL_GetTick>
 800d164:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d166:	e006      	b.n	800d176 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d168:	f7ff ff8a 	bl	800d080 <BSP_SD_GetCardState>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d172:	2300      	movs	r3, #0
 800d174:	e009      	b.n	800d18a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d176:	f7f6 f86d 	bl	8003254 <HAL_GetTick>
 800d17a:	4602      	mov	r2, r0
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	429a      	cmp	r2, r3
 800d184:	d8f0      	bhi.n	800d168 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d19e:	4b0b      	ldr	r3, [pc, #44]	@ (800d1cc <SD_CheckStatus+0x38>)
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d1a4:	f7ff ff6c 	bl	800d080 <BSP_SD_GetCardState>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d107      	bne.n	800d1be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d1ae:	4b07      	ldr	r3, [pc, #28]	@ (800d1cc <SD_CheckStatus+0x38>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f023 0301 	bic.w	r3, r3, #1
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	4b04      	ldr	r3, [pc, #16]	@ (800d1cc <SD_CheckStatus+0x38>)
 800d1bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d1be:	4b03      	ldr	r3, [pc, #12]	@ (800d1cc <SD_CheckStatus+0x38>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	b2db      	uxtb	r3, r3
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	20000009 	.word	0x20000009

0800d1d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d1da:	f7ff ff05 	bl	800cfe8 <BSP_SD_Init>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d107      	bne.n	800d1f4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d1e4:	79fb      	ldrb	r3, [r7, #7]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff ffd4 	bl	800d194 <SD_CheckStatus>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	4b04      	ldr	r3, [pc, #16]	@ (800d204 <SD_initialize+0x34>)
 800d1f2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d1f4:	4b03      	ldr	r3, [pc, #12]	@ (800d204 <SD_initialize+0x34>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	b2db      	uxtb	r3, r3
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20000009 	.word	0x20000009

0800d208 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff ffbd 	bl	800d194 <SD_CheckStatus>
 800d21a:	4603      	mov	r3, r0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60b9      	str	r1, [r7, #8]
 800d22c:	607a      	str	r2, [r7, #4]
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d238:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d23c:	f7ff ff8c 	bl	800d158 <SD_CheckStatusWithTimeout>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	da01      	bge.n	800d24a <SD_read+0x26>
  {
    return res;
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	e03b      	b.n	800d2c2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	68b8      	ldr	r0, [r7, #8]
 800d250:	f7ff fee2 	bl	800d018 <BSP_SD_ReadBlocks_DMA>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d132      	bne.n	800d2c0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d25a:	4b1c      	ldr	r3, [pc, #112]	@ (800d2cc <SD_read+0xa8>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d260:	f7f5 fff8 	bl	8003254 <HAL_GetTick>
 800d264:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d266:	bf00      	nop
 800d268:	4b18      	ldr	r3, [pc, #96]	@ (800d2cc <SD_read+0xa8>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d108      	bne.n	800d282 <SD_read+0x5e>
 800d270:	f7f5 fff0 	bl	8003254 <HAL_GetTick>
 800d274:	4602      	mov	r2, r0
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d27e:	4293      	cmp	r3, r2
 800d280:	d9f2      	bls.n	800d268 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d282:	4b12      	ldr	r3, [pc, #72]	@ (800d2cc <SD_read+0xa8>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	75fb      	strb	r3, [r7, #23]
 800d28e:	e017      	b.n	800d2c0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d290:	4b0e      	ldr	r3, [pc, #56]	@ (800d2cc <SD_read+0xa8>)
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d296:	f7f5 ffdd 	bl	8003254 <HAL_GetTick>
 800d29a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d29c:	e007      	b.n	800d2ae <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d29e:	f7ff feef 	bl	800d080 <BSP_SD_GetCardState>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <SD_read+0x8a>
          {
            res = RES_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d2ac:	e008      	b.n	800d2c0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d2ae:	f7f5 ffd1 	bl	8003254 <HAL_GetTick>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d9ee      	bls.n	800d29e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000814 	.word	0x20000814

0800d2d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
 800d2da:	603b      	str	r3, [r7, #0]
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d2e4:	4b24      	ldr	r3, [pc, #144]	@ (800d378 <SD_write+0xa8>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d2ea:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d2ee:	f7ff ff33 	bl	800d158 <SD_CheckStatusWithTimeout>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	da01      	bge.n	800d2fc <SD_write+0x2c>
  {
    return res;
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
 800d2fa:	e038      	b.n	800d36e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	68b8      	ldr	r0, [r7, #8]
 800d302:	f7ff fea3 	bl	800d04c <BSP_SD_WriteBlocks_DMA>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d12f      	bne.n	800d36c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d30c:	f7f5 ffa2 	bl	8003254 <HAL_GetTick>
 800d310:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d312:	bf00      	nop
 800d314:	4b18      	ldr	r3, [pc, #96]	@ (800d378 <SD_write+0xa8>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d108      	bne.n	800d32e <SD_write+0x5e>
 800d31c:	f7f5 ff9a 	bl	8003254 <HAL_GetTick>
 800d320:	4602      	mov	r2, r0
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d9f2      	bls.n	800d314 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d32e:	4b12      	ldr	r3, [pc, #72]	@ (800d378 <SD_write+0xa8>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	75fb      	strb	r3, [r7, #23]
 800d33a:	e017      	b.n	800d36c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d33c:	4b0e      	ldr	r3, [pc, #56]	@ (800d378 <SD_write+0xa8>)
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d342:	f7f5 ff87 	bl	8003254 <HAL_GetTick>
 800d346:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d348:	e007      	b.n	800d35a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d34a:	f7ff fe99 	bl	800d080 <BSP_SD_GetCardState>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <SD_write+0x8a>
          {
            res = RES_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	75fb      	strb	r3, [r7, #23]
            break;
 800d358:	e008      	b.n	800d36c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d35a:	f7f5 ff7b 	bl	8003254 <HAL_GetTick>
 800d35e:	4602      	mov	r2, r0
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d368:	4293      	cmp	r3, r2
 800d36a:	d9ee      	bls.n	800d34a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20000810 	.word	0x20000810

0800d37c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08c      	sub	sp, #48	@ 0x30
 800d380:	af00      	add	r7, sp, #0
 800d382:	4603      	mov	r3, r0
 800d384:	603a      	str	r2, [r7, #0]
 800d386:	71fb      	strb	r3, [r7, #7]
 800d388:	460b      	mov	r3, r1
 800d38a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d392:	4b25      	ldr	r3, [pc, #148]	@ (800d428 <SD_ioctl+0xac>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <SD_ioctl+0x28>
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	e03c      	b.n	800d41e <SD_ioctl+0xa2>

  switch (cmd)
 800d3a4:	79bb      	ldrb	r3, [r7, #6]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d834      	bhi.n	800d414 <SD_ioctl+0x98>
 800d3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b0 <SD_ioctl+0x34>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3c1 	.word	0x0800d3c1
 800d3b4:	0800d3c9 	.word	0x0800d3c9
 800d3b8:	0800d3e1 	.word	0x0800d3e1
 800d3bc:	0800d3fb 	.word	0x0800d3fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3c6:	e028      	b.n	800d41a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3c8:	f107 030c 	add.w	r3, r7, #12
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff fe67 	bl	800d0a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d3d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3de:	e01c      	b.n	800d41a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3e0:	f107 030c 	add.w	r3, r7, #12
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fe5b 	bl	800d0a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3f8:	e00f      	b.n	800d41a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3fa:	f107 030c 	add.w	r3, r7, #12
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fe4e 	bl	800d0a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d406:	0a5a      	lsrs	r2, r3, #9
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d412:	e002      	b.n	800d41a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d414:	2304      	movs	r3, #4
 800d416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d41a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3730      	adds	r7, #48	@ 0x30
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000009 	.word	0x20000009

0800d42c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d42c:	b480      	push	{r7}
 800d42e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d430:	4b03      	ldr	r3, [pc, #12]	@ (800d440 <BSP_SD_WriteCpltCallback+0x14>)
 800d432:	2201      	movs	r2, #1
 800d434:	601a      	str	r2, [r3, #0]
}
 800d436:	bf00      	nop
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	20000810 	.word	0x20000810

0800d444 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d444:	b480      	push	{r7}
 800d446:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d448:	4b03      	ldr	r3, [pc, #12]	@ (800d458 <BSP_SD_ReadCpltCallback+0x14>)
 800d44a:	2201      	movs	r2, #1
 800d44c:	601a      	str	r2, [r3, #0]
}
 800d44e:	bf00      	nop
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr
 800d458:	20000814 	.word	0x20000814

0800d45c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d45c:	b590      	push	{r4, r7, lr}
 800d45e:	b089      	sub	sp, #36	@ 0x24
 800d460:	af04      	add	r7, sp, #16
 800d462:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d464:	2301      	movs	r3, #1
 800d466:	2202      	movs	r2, #2
 800d468:	2102      	movs	r1, #2
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fc85 	bl	800dd7a <USBH_FindInterface>
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d474:	7bfb      	ldrb	r3, [r7, #15]
 800d476:	2bff      	cmp	r3, #255	@ 0xff
 800d478:	d002      	beq.n	800d480 <USBH_CDC_InterfaceInit+0x24>
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d901      	bls.n	800d484 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d480:	2302      	movs	r3, #2
 800d482:	e13d      	b.n	800d700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d484:	7bfb      	ldrb	r3, [r7, #15]
 800d486:	4619      	mov	r1, r3
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fc5a 	bl	800dd42 <USBH_SelectInterface>
 800d48e:	4603      	mov	r3, r0
 800d490:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d492:	7bbb      	ldrb	r3, [r7, #14]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d498:	2302      	movs	r3, #2
 800d49a:	e131      	b.n	800d700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800d4a2:	2050      	movs	r0, #80	@ 0x50
 800d4a4:	f005 fbb8 	bl	8012c18 <malloc>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4b2:	69db      	ldr	r3, [r3, #28]
 800d4b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d101      	bne.n	800d4c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d4bc:	2302      	movs	r3, #2
 800d4be:	e11f      	b.n	800d700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d4c0:	2250      	movs	r2, #80	@ 0x50
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	68b8      	ldr	r0, [r7, #8]
 800d4c6:	f005 fe89 	bl	80131dc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	211a      	movs	r1, #26
 800d4d0:	fb01 f303 	mul.w	r3, r1, r3
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	b25b      	sxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	da15      	bge.n	800d50e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	211a      	movs	r1, #26
 800d4e8:	fb01 f303 	mul.w	r3, r1, r3
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d4f2:	781a      	ldrb	r2, [r3, #0]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	211a      	movs	r1, #26
 800d4fe:	fb01 f303 	mul.w	r3, r1, r3
 800d502:	4413      	add	r3, r2
 800d504:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d508:	881a      	ldrh	r2, [r3, #0]
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	785b      	ldrb	r3, [r3, #1]
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f001 ffbe 	bl	800f496 <USBH_AllocPipe>
 800d51a:	4603      	mov	r3, r0
 800d51c:	461a      	mov	r2, r3
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	7819      	ldrb	r1, [r3, #0]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	7858      	ldrb	r0, [r3, #1]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	8952      	ldrh	r2, [r2, #10]
 800d53a:	9202      	str	r2, [sp, #8]
 800d53c:	2203      	movs	r2, #3
 800d53e:	9201      	str	r2, [sp, #4]
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	4623      	mov	r3, r4
 800d544:	4602      	mov	r2, r0
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f001 ff76 	bl	800f438 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2200      	movs	r2, #0
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f005 f909 	bl	801276c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d55a:	2300      	movs	r3, #0
 800d55c:	2200      	movs	r2, #0
 800d55e:	210a      	movs	r1, #10
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fc0a 	bl	800dd7a <USBH_FindInterface>
 800d566:	4603      	mov	r3, r0
 800d568:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
 800d56c:	2bff      	cmp	r3, #255	@ 0xff
 800d56e:	d002      	beq.n	800d576 <USBH_CDC_InterfaceInit+0x11a>
 800d570:	7bfb      	ldrb	r3, [r7, #15]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d901      	bls.n	800d57a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d576:	2302      	movs	r3, #2
 800d578:	e0c2      	b.n	800d700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d57a:	7bfb      	ldrb	r3, [r7, #15]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	211a      	movs	r1, #26
 800d580:	fb01 f303 	mul.w	r3, r1, r3
 800d584:	4413      	add	r3, r2
 800d586:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	b25b      	sxtb	r3, r3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	da16      	bge.n	800d5c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	211a      	movs	r1, #26
 800d598:	fb01 f303 	mul.w	r3, r1, r3
 800d59c:	4413      	add	r3, r2
 800d59e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d5a2:	781a      	ldrb	r2, [r3, #0]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	211a      	movs	r1, #26
 800d5ae:	fb01 f303 	mul.w	r3, r1, r3
 800d5b2:	4413      	add	r3, r2
 800d5b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d5b8:	881a      	ldrh	r2, [r3, #0]
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	835a      	strh	r2, [r3, #26]
 800d5be:	e015      	b.n	800d5ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	211a      	movs	r1, #26
 800d5c6:	fb01 f303 	mul.w	r3, r1, r3
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	211a      	movs	r1, #26
 800d5dc:	fb01 f303 	mul.w	r3, r1, r3
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d5e6:	881a      	ldrh	r2, [r3, #0]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	211a      	movs	r1, #26
 800d5f2:	fb01 f303 	mul.w	r3, r1, r3
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b25b      	sxtb	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	da16      	bge.n	800d632 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d604:	7bfb      	ldrb	r3, [r7, #15]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	211a      	movs	r1, #26
 800d60a:	fb01 f303 	mul.w	r3, r1, r3
 800d60e:	4413      	add	r3, r2
 800d610:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d614:	781a      	ldrb	r2, [r3, #0]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	211a      	movs	r1, #26
 800d620:	fb01 f303 	mul.w	r3, r1, r3
 800d624:	4413      	add	r3, r2
 800d626:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800d62a:	881a      	ldrh	r2, [r3, #0]
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	835a      	strh	r2, [r3, #26]
 800d630:	e015      	b.n	800d65e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	211a      	movs	r1, #26
 800d638:	fb01 f303 	mul.w	r3, r1, r3
 800d63c:	4413      	add	r3, r2
 800d63e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	211a      	movs	r1, #26
 800d64e:	fb01 f303 	mul.w	r3, r1, r3
 800d652:	4413      	add	r3, r2
 800d654:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800d658:	881a      	ldrh	r2, [r3, #0]
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	7b9b      	ldrb	r3, [r3, #14]
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f001 ff16 	bl	800f496 <USBH_AllocPipe>
 800d66a:	4603      	mov	r3, r0
 800d66c:	461a      	mov	r2, r3
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	7bdb      	ldrb	r3, [r3, #15]
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f001 ff0c 	bl	800f496 <USBH_AllocPipe>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	7b59      	ldrb	r1, [r3, #13]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	7b98      	ldrb	r0, [r3, #14]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	8b12      	ldrh	r2, [r2, #24]
 800d69e:	9202      	str	r2, [sp, #8]
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	9201      	str	r2, [sp, #4]
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f001 fec4 	bl	800f438 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	7b19      	ldrb	r1, [r3, #12]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	7bd8      	ldrb	r0, [r3, #15]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	8b52      	ldrh	r2, [r2, #26]
 800d6c8:	9202      	str	r2, [sp, #8]
 800d6ca:	2202      	movs	r2, #2
 800d6cc:	9201      	str	r2, [sp, #4]
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f001 feaf 	bl	800f438 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	7b5b      	ldrb	r3, [r3, #13]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f005 f83e 	bl	801276c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	7b1b      	ldrb	r3, [r3, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f005 f837 	bl	801276c <USBH_LL_SetToggle>

  return USBH_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	bd90      	pop	{r4, r7, pc}

0800d708 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d716:	69db      	ldr	r3, [r3, #28]
 800d718:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00e      	beq.n	800d740 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 fea4 	bl	800f476 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f001 fecf 	bl	800f4d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	7b1b      	ldrb	r3, [r3, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00e      	beq.n	800d766 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	7b1b      	ldrb	r3, [r3, #12]
 800d74c:	4619      	mov	r1, r3
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f001 fe91 	bl	800f476 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	7b1b      	ldrb	r3, [r3, #12]
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f001 febc 	bl	800f4d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	7b5b      	ldrb	r3, [r3, #13]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00e      	beq.n	800d78c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	7b5b      	ldrb	r3, [r3, #13]
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f001 fe7e 	bl	800f476 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	7b5b      	ldrb	r3, [r3, #13]
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f001 fea9 	bl	800f4d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2200      	movs	r2, #0
 800d78a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00b      	beq.n	800d7b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d79e:	69db      	ldr	r3, [r3, #28]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f005 fa41 	bl	8012c28 <free>
    phost->pActiveClass->pData = 0U;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3340      	adds	r3, #64	@ 0x40
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 f8b1 	bl	800d93a <GetLineCoding>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d7dc:	7afb      	ldrb	r3, [r7, #11]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d7e8:	2102      	movs	r1, #2
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d800:	2301      	movs	r3, #1
 800d802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d80e:	69db      	ldr	r3, [r3, #28]
 800d810:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800d818:	2b04      	cmp	r3, #4
 800d81a:	d877      	bhi.n	800d90c <USBH_CDC_Process+0x114>
 800d81c:	a201      	add	r2, pc, #4	@ (adr r2, 800d824 <USBH_CDC_Process+0x2c>)
 800d81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d822:	bf00      	nop
 800d824:	0800d839 	.word	0x0800d839
 800d828:	0800d83f 	.word	0x0800d83f
 800d82c:	0800d86f 	.word	0x0800d86f
 800d830:	0800d8e3 	.word	0x0800d8e3
 800d834:	0800d8f1 	.word	0x0800d8f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
      break;
 800d83c:	e06d      	b.n	800d91a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f897 	bl	800d978 <SetLineCoding>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d84e:	7bbb      	ldrb	r3, [r7, #14]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2202      	movs	r2, #2
 800d858:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d85c:	e058      	b.n	800d910 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d85e:	7bbb      	ldrb	r3, [r7, #14]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d055      	beq.n	800d910 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2204      	movs	r2, #4
 800d868:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800d86c:	e050      	b.n	800d910 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	3340      	adds	r3, #64	@ 0x40
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f860 	bl	800d93a <GetLineCoding>
 800d87a:	4603      	mov	r3, r0
 800d87c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d126      	bne.n	800d8d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2200      	movs	r2, #0
 800d888:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d896:	791b      	ldrb	r3, [r3, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d13b      	bne.n	800d914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d133      	bne.n	800d914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d12b      	bne.n	800d914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d124      	bne.n	800d914 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f958 	bl	800db80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d8d0:	e020      	b.n	800d914 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d01d      	beq.n	800d914 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2204      	movs	r2, #4
 800d8dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800d8e0:	e018      	b.n	800d914 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f867 	bl	800d9b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f8da 	bl	800daa2 <CDC_ProcessReception>
      break;
 800d8ee:	e014      	b.n	800d91a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f001 f81a 	bl	800e92c <USBH_ClrFeature>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10a      	bne.n	800d918 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800d90a:	e005      	b.n	800d918 <USBH_CDC_Process+0x120>

    default:
      break;
 800d90c:	bf00      	nop
 800d90e:	e004      	b.n	800d91a <USBH_CDC_Process+0x122>
      break;
 800d910:	bf00      	nop
 800d912:	e002      	b.n	800d91a <USBH_CDC_Process+0x122>
      break;
 800d914:	bf00      	nop
 800d916:	e000      	b.n	800d91a <USBH_CDC_Process+0x122>
      break;
 800d918:	bf00      	nop

  }

  return status;
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b082      	sub	sp, #8
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	22a1      	movs	r2, #161	@ 0xa1
 800d948:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2221      	movs	r2, #33	@ 0x21
 800d94e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2207      	movs	r2, #7
 800d960:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2207      	movs	r2, #7
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f001 fb14 	bl	800ef96 <USBH_CtlReq>
 800d96e:	4603      	mov	r3, r0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2221      	movs	r2, #33	@ 0x21
 800d986:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2220      	movs	r2, #32
 800d98c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2207      	movs	r2, #7
 800d99e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	2207      	movs	r2, #7
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f001 faf5 	bl	800ef96 <USBH_CtlReq>
 800d9ac:	4603      	mov	r3, r0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b086      	sub	sp, #24
 800d9ba:	af02      	add	r7, sp, #8
 800d9bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d002      	beq.n	800d9dc <CDC_ProcessTransmission+0x26>
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d023      	beq.n	800da22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d9da:	e05e      	b.n	800da9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	8b12      	ldrh	r2, [r2, #24]
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d90b      	bls.n	800da00 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	69d9      	ldr	r1, [r3, #28]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	8b1a      	ldrh	r2, [r3, #24]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	7b5b      	ldrb	r3, [r3, #13]
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	9000      	str	r0, [sp, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f001 fcda 	bl	800f3b2 <USBH_BulkSendData>
 800d9fe:	e00b      	b.n	800da18 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800da08:	b29a      	uxth	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	7b5b      	ldrb	r3, [r3, #13]
 800da0e:	2001      	movs	r0, #1
 800da10:	9000      	str	r0, [sp, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f001 fccd 	bl	800f3b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800da20:	e03b      	b.n	800da9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	7b5b      	ldrb	r3, [r3, #13]
 800da26:	4619      	mov	r1, r3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f004 fe75 	bl	8012718 <USBH_LL_GetURBState>
 800da2e:	4603      	mov	r3, r0
 800da30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800da32:	7afb      	ldrb	r3, [r7, #11]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d128      	bne.n	800da8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	8b12      	ldrh	r2, [r2, #24]
 800da40:	4293      	cmp	r3, r2
 800da42:	d90e      	bls.n	800da62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	8b12      	ldrh	r2, [r2, #24]
 800da4c:	1a9a      	subs	r2, r3, r2
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	8b12      	ldrh	r2, [r2, #24]
 800da5a:	441a      	add	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	61da      	str	r2, [r3, #28]
 800da60:	e002      	b.n	800da68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800da78:	e00e      	b.n	800da98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f868 	bl	800db58 <USBH_CDC_TransmitCallback>
      break;
 800da88:	e006      	b.n	800da98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800da8a:	7afb      	ldrb	r3, [r7, #11]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d103      	bne.n	800da98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800da98:	bf00      	nop
  }
}
 800da9a:	bf00      	nop
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b086      	sub	sp, #24
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dab0:	69db      	ldr	r3, [r3, #28]
 800dab2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dab4:	2300      	movs	r3, #0
 800dab6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d002      	beq.n	800dac8 <CDC_ProcessReception+0x26>
 800dac2:	2b04      	cmp	r3, #4
 800dac4:	d00e      	beq.n	800dae4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dac6:	e043      	b.n	800db50 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	6a19      	ldr	r1, [r3, #32]
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	8b5a      	ldrh	r2, [r3, #26]
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	7b1b      	ldrb	r3, [r3, #12]
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f001 fc91 	bl	800f3fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2204      	movs	r2, #4
 800dade:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800dae2:	e035      	b.n	800db50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	7b1b      	ldrb	r3, [r3, #12]
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f004 fe14 	bl	8012718 <USBH_LL_GetURBState>
 800daf0:	4603      	mov	r3, r0
 800daf2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800daf4:	7cfb      	ldrb	r3, [r7, #19]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d129      	bne.n	800db4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	7b1b      	ldrb	r3, [r3, #12]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f004 fd77 	bl	80125f4 <USBH_LL_GetLastXferSize>
 800db06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d016      	beq.n	800db40 <CDC_ProcessReception+0x9e>
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	8b5b      	ldrh	r3, [r3, #26]
 800db16:	461a      	mov	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d110      	bne.n	800db40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	1ad2      	subs	r2, r2, r3
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	6a1a      	ldr	r2, [r3, #32]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	441a      	add	r2, r3
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2203      	movs	r2, #3
 800db3a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800db3e:	e006      	b.n	800db4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f80f 	bl	800db6c <USBH_CDC_ReceiveCallback>
      break;
 800db4e:	bf00      	nop
  }
}
 800db50:	bf00      	nop
 800db52:	3718      	adds	r7, #24
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	4613      	mov	r3, r2
 800dba0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dba8:	2302      	movs	r3, #2
 800dbaa:	e029      	b.n	800dc00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	79fa      	ldrb	r2, [r7, #7]
 800dbb0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 f81f 	bl	800dc08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f004 fc47 	bl	801248c <USBH_LL_Init>

  return USBH_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dc10:	2300      	movs	r3, #0
 800dc12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dc14:	2300      	movs	r3, #0
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	e009      	b.n	800dc2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	33e0      	adds	r3, #224	@ 0xe0
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	4413      	add	r3, r2
 800dc24:	2200      	movs	r2, #0
 800dc26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b0f      	cmp	r3, #15
 800dc32:	d9f2      	bls.n	800dc1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dc34:	2300      	movs	r3, #0
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	e009      	b.n	800dc4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	4413      	add	r3, r2
 800dc40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	60fb      	str	r3, [r7, #12]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc54:	d3f1      	bcc.n	800dc3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2201      	movs	r2, #1
 800dc66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2240      	movs	r2, #64	@ 0x40
 800dc7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	331c      	adds	r3, #28
 800dca6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dcaa:	2100      	movs	r1, #0
 800dcac:	4618      	mov	r0, r3
 800dcae:	f005 fa95 	bl	80131dc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800dcb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f005 fa8c 	bl	80131dc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800dcca:	2212      	movs	r2, #18
 800dccc:	2100      	movs	r1, #0
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f005 fa84 	bl	80131dc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800dcda:	223e      	movs	r2, #62	@ 0x3e
 800dcdc:	2100      	movs	r1, #0
 800dcde:	4618      	mov	r0, r3
 800dce0:	f005 fa7c 	bl	80131dc <memset>

  return USBH_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800dcee:	b480      	push	{r7}
 800dcf0:	b085      	sub	sp, #20
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d016      	beq.n	800dd30 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10e      	bne.n	800dd2a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800dd12:	1c59      	adds	r1, r3, #1
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	33de      	adds	r3, #222	@ 0xde
 800dd1e:	6839      	ldr	r1, [r7, #0]
 800dd20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73fb      	strb	r3, [r7, #15]
 800dd28:	e004      	b.n	800dd34 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	73fb      	strb	r3, [r7, #15]
 800dd2e:	e001      	b.n	800dd34 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800dd30:	2302      	movs	r3, #2
 800dd32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3714      	adds	r7, #20
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b085      	sub	sp, #20
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800dd58:	78fa      	ldrb	r2, [r7, #3]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d204      	bcs.n	800dd68 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	78fa      	ldrb	r2, [r7, #3]
 800dd62:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800dd66:	e001      	b.n	800dd6c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800dd68:	2302      	movs	r3, #2
 800dd6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3714      	adds	r7, #20
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b087      	sub	sp, #28
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	4608      	mov	r0, r1
 800dd84:	4611      	mov	r1, r2
 800dd86:	461a      	mov	r2, r3
 800dd88:	4603      	mov	r3, r0
 800dd8a:	70fb      	strb	r3, [r7, #3]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70bb      	strb	r3, [r7, #2]
 800dd90:	4613      	mov	r3, r2
 800dd92:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dd94:	2300      	movs	r3, #0
 800dd96:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800dda2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dda4:	e025      	b.n	800ddf2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
 800dda8:	221a      	movs	r2, #26
 800ddaa:	fb02 f303 	mul.w	r3, r2, r3
 800ddae:	3308      	adds	r3, #8
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	3302      	adds	r3, #2
 800ddb6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	795b      	ldrb	r3, [r3, #5]
 800ddbc:	78fa      	ldrb	r2, [r7, #3]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d002      	beq.n	800ddc8 <USBH_FindInterface+0x4e>
 800ddc2:	78fb      	ldrb	r3, [r7, #3]
 800ddc4:	2bff      	cmp	r3, #255	@ 0xff
 800ddc6:	d111      	bne.n	800ddec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ddcc:	78ba      	ldrb	r2, [r7, #2]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d002      	beq.n	800ddd8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ddd2:	78bb      	ldrb	r3, [r7, #2]
 800ddd4:	2bff      	cmp	r3, #255	@ 0xff
 800ddd6:	d109      	bne.n	800ddec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dddc:	787a      	ldrb	r2, [r7, #1]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d002      	beq.n	800dde8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dde2:	787b      	ldrb	r3, [r7, #1]
 800dde4:	2bff      	cmp	r3, #255	@ 0xff
 800dde6:	d101      	bne.n	800ddec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	e006      	b.n	800ddfa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d9d6      	bls.n	800dda6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ddf8:	23ff      	movs	r3, #255	@ 0xff
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b082      	sub	sp, #8
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f004 fb78 	bl	8012504 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800de14:	2101      	movs	r1, #1
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f004 fc91 	bl	801273e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af04      	add	r7, sp, #16
 800de2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800de30:	2302      	movs	r3, #2
 800de32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b01      	cmp	r3, #1
 800de42:	d102      	bne.n	800de4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2203      	movs	r2, #3
 800de48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b0b      	cmp	r3, #11
 800de52:	f200 81bb 	bhi.w	800e1cc <USBH_Process+0x3a4>
 800de56:	a201      	add	r2, pc, #4	@ (adr r2, 800de5c <USBH_Process+0x34>)
 800de58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5c:	0800de8d 	.word	0x0800de8d
 800de60:	0800debf 	.word	0x0800debf
 800de64:	0800df27 	.word	0x0800df27
 800de68:	0800e167 	.word	0x0800e167
 800de6c:	0800e1cd 	.word	0x0800e1cd
 800de70:	0800dfc7 	.word	0x0800dfc7
 800de74:	0800e10d 	.word	0x0800e10d
 800de78:	0800dffd 	.word	0x0800dffd
 800de7c:	0800e01d 	.word	0x0800e01d
 800de80:	0800e03b 	.word	0x0800e03b
 800de84:	0800e07f 	.word	0x0800e07f
 800de88:	0800e14f 	.word	0x0800e14f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 819b 	beq.w	800e1d0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dea0:	20c8      	movs	r0, #200	@ 0xc8
 800dea2:	f004 fc96 	bl	80127d2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f004 fb89 	bl	80125be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800debc:	e188      	b.n	800e1d0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d107      	bne.n	800ded8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2202      	movs	r2, #2
 800ded4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ded6:	e18a      	b.n	800e1ee <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800dede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dee2:	d914      	bls.n	800df0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800deea:	3301      	adds	r3, #1
 800deec:	b2da      	uxtb	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800defa:	2b03      	cmp	r3, #3
 800defc:	d903      	bls.n	800df06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	220d      	movs	r2, #13
 800df02:	701a      	strb	r2, [r3, #0]
      break;
 800df04:	e173      	b.n	800e1ee <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	701a      	strb	r2, [r3, #0]
      break;
 800df0c:	e16f      	b.n	800e1ee <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800df14:	f103 020a 	add.w	r2, r3, #10
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800df1e:	200a      	movs	r0, #10
 800df20:	f004 fc57 	bl	80127d2 <USBH_Delay>
      break;
 800df24:	e163      	b.n	800e1ee <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d005      	beq.n	800df3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800df36:	2104      	movs	r1, #4
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800df3c:	2064      	movs	r0, #100	@ 0x64
 800df3e:	f004 fc48 	bl	80127d2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f004 fb14 	bl	8012570 <USBH_LL_GetSpeed>
 800df48:	4603      	mov	r3, r0
 800df4a:	461a      	mov	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2205      	movs	r2, #5
 800df56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800df58:	2100      	movs	r1, #0
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f001 fa9b 	bl	800f496 <USBH_AllocPipe>
 800df60:	4603      	mov	r3, r0
 800df62:	461a      	mov	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800df68:	2180      	movs	r1, #128	@ 0x80
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f001 fa93 	bl	800f496 <USBH_AllocPipe>
 800df70:	4603      	mov	r3, r0
 800df72:	461a      	mov	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7919      	ldrb	r1, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800df8c:	9202      	str	r2, [sp, #8]
 800df8e:	2200      	movs	r2, #0
 800df90:	9201      	str	r2, [sp, #4]
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	4603      	mov	r3, r0
 800df96:	2280      	movs	r2, #128	@ 0x80
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f001 fa4d 	bl	800f438 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	7959      	ldrb	r1, [r3, #5]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800dfb2:	9202      	str	r2, [sp, #8]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	9201      	str	r2, [sp, #4]
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f001 fa3a 	bl	800f438 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dfc4:	e113      	b.n	800e1ee <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f916 	bl	800e1f8 <USBH_HandleEnum>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800dfd0:	7bbb      	ldrb	r3, [r7, #14]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f040 80fd 	bne.w	800e1d4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d103      	bne.n	800dff4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2208      	movs	r2, #8
 800dff0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dff2:	e0ef      	b.n	800e1d4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2207      	movs	r2, #7
 800dff8:	701a      	strb	r2, [r3, #0]
      break;
 800dffa:	e0eb      	b.n	800e1d4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e002:	2b00      	cmp	r3, #0
 800e004:	f000 80e8 	beq.w	800e1d8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e00e:	2101      	movs	r1, #1
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2208      	movs	r2, #8
 800e018:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e01a:	e0dd      	b.n	800e1d8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fc3a 	bl	800e89e <USBH_SetCfg>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f040 80d5 	bne.w	800e1dc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2209      	movs	r2, #9
 800e036:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e038:	e0d0      	b.n	800e1dc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d016      	beq.n	800e076 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e048:	2101      	movs	r1, #1
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fc4a 	bl	800e8e4 <USBH_SetFeature>
 800e050:	4603      	mov	r3, r0
 800e052:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d103      	bne.n	800e064 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	220a      	movs	r2, #10
 800e060:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e062:	e0bd      	b.n	800e1e0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800e064:	7bbb      	ldrb	r3, [r7, #14]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b03      	cmp	r3, #3
 800e06a:	f040 80b9 	bne.w	800e1e0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	220a      	movs	r2, #10
 800e072:	701a      	strb	r2, [r3, #0]
      break;
 800e074:	e0b4      	b.n	800e1e0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	220a      	movs	r2, #10
 800e07a:	701a      	strb	r2, [r3, #0]
      break;
 800e07c:	e0b0      	b.n	800e1e0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 80ad 	beq.w	800e1e4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e092:	2300      	movs	r3, #0
 800e094:	73fb      	strb	r3, [r7, #15]
 800e096:	e016      	b.n	800e0c6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e098:	7bfa      	ldrb	r2, [r7, #15]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	32de      	adds	r2, #222	@ 0xde
 800e09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a2:	791a      	ldrb	r2, [r3, #4]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d108      	bne.n	800e0c0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e0ae:	7bfa      	ldrb	r2, [r7, #15]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	32de      	adds	r2, #222	@ 0xde
 800e0b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800e0be:	e005      	b.n	800e0cc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	73fb      	strb	r3, [r7, #15]
 800e0c6:	7bfb      	ldrb	r3, [r7, #15]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d0e5      	beq.n	800e098 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d016      	beq.n	800e104 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	4798      	blx	r3
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d109      	bne.n	800e0fc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2206      	movs	r2, #6
 800e0ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e0f4:	2103      	movs	r1, #3
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e0fa:	e073      	b.n	800e1e4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	220d      	movs	r2, #13
 800e100:	701a      	strb	r2, [r3, #0]
      break;
 800e102:	e06f      	b.n	800e1e4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	220d      	movs	r2, #13
 800e108:	701a      	strb	r2, [r3, #0]
      break;
 800e10a:	e06b      	b.n	800e1e4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e112:	2b00      	cmp	r3, #0
 800e114:	d017      	beq.n	800e146 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	4798      	blx	r3
 800e122:	4603      	mov	r3, r0
 800e124:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e126:	7bbb      	ldrb	r3, [r7, #14]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d103      	bne.n	800e136 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	220b      	movs	r2, #11
 800e132:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e134:	e058      	b.n	800e1e8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800e136:	7bbb      	ldrb	r3, [r7, #14]
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d154      	bne.n	800e1e8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	220d      	movs	r2, #13
 800e142:	701a      	strb	r2, [r3, #0]
      break;
 800e144:	e050      	b.n	800e1e8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	220d      	movs	r2, #13
 800e14a:	701a      	strb	r2, [r3, #0]
      break;
 800e14c:	e04c      	b.n	800e1e8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e154:	2b00      	cmp	r3, #0
 800e156:	d049      	beq.n	800e1ec <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	4798      	blx	r3
      }
      break;
 800e164:	e042      	b.n	800e1ec <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff fd4a 	bl	800dc08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d009      	beq.n	800e192 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e1a2:	2105      	movs	r1, #5
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d107      	bne.n	800e1c4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff fe22 	bl	800de06 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e1c2:	e014      	b.n	800e1ee <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f004 f99d 	bl	8012504 <USBH_LL_Start>
      break;
 800e1ca:	e010      	b.n	800e1ee <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e1cc:	bf00      	nop
 800e1ce:	e00e      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1d0:	bf00      	nop
 800e1d2:	e00c      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1d4:	bf00      	nop
 800e1d6:	e00a      	b.n	800e1ee <USBH_Process+0x3c6>
    break;
 800e1d8:	bf00      	nop
 800e1da:	e008      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1dc:	bf00      	nop
 800e1de:	e006      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1e0:	bf00      	nop
 800e1e2:	e004      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1e4:	bf00      	nop
 800e1e6:	e002      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1e8:	bf00      	nop
 800e1ea:	e000      	b.n	800e1ee <USBH_Process+0x3c6>
      break;
 800e1ec:	bf00      	nop
  }
  return USBH_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b088      	sub	sp, #32
 800e1fc:	af04      	add	r7, sp, #16
 800e1fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e200:	2301      	movs	r3, #1
 800e202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e204:	2301      	movs	r3, #1
 800e206:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	785b      	ldrb	r3, [r3, #1]
 800e20c:	2b07      	cmp	r3, #7
 800e20e:	f200 81bd 	bhi.w	800e58c <USBH_HandleEnum+0x394>
 800e212:	a201      	add	r2, pc, #4	@ (adr r2, 800e218 <USBH_HandleEnum+0x20>)
 800e214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e218:	0800e239 	.word	0x0800e239
 800e21c:	0800e2f3 	.word	0x0800e2f3
 800e220:	0800e35d 	.word	0x0800e35d
 800e224:	0800e3e7 	.word	0x0800e3e7
 800e228:	0800e451 	.word	0x0800e451
 800e22c:	0800e4c1 	.word	0x0800e4c1
 800e230:	0800e507 	.word	0x0800e507
 800e234:	0800e54d 	.word	0x0800e54d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e238:	2108      	movs	r1, #8
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fa4c 	bl	800e6d8 <USBH_Get_DevDesc>
 800e240:	4603      	mov	r3, r0
 800e242:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e244:	7bbb      	ldrb	r3, [r7, #14]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d12e      	bne.n	800e2a8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	7919      	ldrb	r1, [r3, #4]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e26e:	9202      	str	r2, [sp, #8]
 800e270:	2200      	movs	r2, #0
 800e272:	9201      	str	r2, [sp, #4]
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	4603      	mov	r3, r0
 800e278:	2280      	movs	r2, #128	@ 0x80
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f001 f8dc 	bl	800f438 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	7959      	ldrb	r1, [r3, #5]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e294:	9202      	str	r2, [sp, #8]
 800e296:	2200      	movs	r2, #0
 800e298:	9201      	str	r2, [sp, #4]
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	4603      	mov	r3, r0
 800e29e:	2200      	movs	r2, #0
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f001 f8c9 	bl	800f438 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e2a6:	e173      	b.n	800e590 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
 800e2aa:	2b03      	cmp	r3, #3
 800e2ac:	f040 8170 	bne.w	800e590 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d903      	bls.n	800e2d2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	220d      	movs	r2, #13
 800e2ce:	701a      	strb	r2, [r3, #0]
      break;
 800e2d0:	e15e      	b.n	800e590 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	795b      	ldrb	r3, [r3, #5]
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f001 f8fd 	bl	800f4d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	791b      	ldrb	r3, [r3, #4]
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f001 f8f7 	bl	800f4d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	701a      	strb	r2, [r3, #0]
      break;
 800e2f0:	e14e      	b.n	800e590 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e2f2:	2112      	movs	r1, #18
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f9ef 	bl	800e6d8 <USBH_Get_DevDesc>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d103      	bne.n	800e30c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2202      	movs	r2, #2
 800e308:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e30a:	e143      	b.n	800e594 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
 800e30e:	2b03      	cmp	r3, #3
 800e310:	f040 8140 	bne.w	800e594 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e31a:	3301      	adds	r3, #1
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d903      	bls.n	800e336 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	220d      	movs	r2, #13
 800e332:	701a      	strb	r2, [r3, #0]
      break;
 800e334:	e12e      	b.n	800e594 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	795b      	ldrb	r3, [r3, #5]
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f001 f8cb 	bl	800f4d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	791b      	ldrb	r3, [r3, #4]
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 f8c5 	bl	800f4d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	701a      	strb	r2, [r3, #0]
      break;
 800e35a:	e11b      	b.n	800e594 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e35c:	2101      	movs	r1, #1
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fa79 	bl	800e856 <USBH_SetAddress>
 800e364:	4603      	mov	r3, r0
 800e366:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d130      	bne.n	800e3d0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800e36e:	2002      	movs	r0, #2
 800e370:	f004 fa2f 	bl	80127d2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2203      	movs	r2, #3
 800e380:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	7919      	ldrb	r1, [r3, #4]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e396:	9202      	str	r2, [sp, #8]
 800e398:	2200      	movs	r2, #0
 800e39a:	9201      	str	r2, [sp, #4]
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2280      	movs	r2, #128	@ 0x80
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f001 f848 	bl	800f438 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	7959      	ldrb	r1, [r3, #5]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3bc:	9202      	str	r2, [sp, #8]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	9201      	str	r2, [sp, #4]
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f001 f835 	bl	800f438 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e3ce:	e0e3      	b.n	800e598 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e3d0:	7bbb      	ldrb	r3, [r7, #14]
 800e3d2:	2b03      	cmp	r3, #3
 800e3d4:	f040 80e0 	bne.w	800e598 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	220d      	movs	r2, #13
 800e3dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	705a      	strb	r2, [r3, #1]
      break;
 800e3e4:	e0d8      	b.n	800e598 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e3e6:	2109      	movs	r1, #9
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f9a1 	bl	800e730 <USBH_Get_CfgDesc>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d103      	bne.n	800e400 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2204      	movs	r2, #4
 800e3fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e3fe:	e0cd      	b.n	800e59c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e400:	7bbb      	ldrb	r3, [r7, #14]
 800e402:	2b03      	cmp	r3, #3
 800e404:	f040 80ca 	bne.w	800e59c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e40e:	3301      	adds	r3, #1
 800e410:	b2da      	uxtb	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d903      	bls.n	800e42a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	220d      	movs	r2, #13
 800e426:	701a      	strb	r2, [r3, #0]
      break;
 800e428:	e0b8      	b.n	800e59c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	795b      	ldrb	r3, [r3, #5]
 800e42e:	4619      	mov	r1, r3
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f001 f851 	bl	800f4d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	791b      	ldrb	r3, [r3, #4]
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 f84b 	bl	800f4d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	701a      	strb	r2, [r3, #0]
      break;
 800e44e:	e0a5      	b.n	800e59c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800e456:	4619      	mov	r1, r3
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f969 	bl	800e730 <USBH_Get_CfgDesc>
 800e45e:	4603      	mov	r3, r0
 800e460:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e462:	7bbb      	ldrb	r3, [r7, #14]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d103      	bne.n	800e470 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2205      	movs	r2, #5
 800e46c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e46e:	e097      	b.n	800e5a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e470:	7bbb      	ldrb	r3, [r7, #14]
 800e472:	2b03      	cmp	r3, #3
 800e474:	f040 8094 	bne.w	800e5a0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e47e:	3301      	adds	r3, #1
 800e480:	b2da      	uxtb	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d903      	bls.n	800e49a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	220d      	movs	r2, #13
 800e496:	701a      	strb	r2, [r3, #0]
      break;
 800e498:	e082      	b.n	800e5a0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	795b      	ldrb	r3, [r3, #5]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f001 f819 	bl	800f4d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	791b      	ldrb	r3, [r3, #4]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 f813 	bl	800f4d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	701a      	strb	r2, [r3, #0]
      break;
 800e4be:	e06f      	b.n	800e5a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d019      	beq.n	800e4fe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e4d6:	23ff      	movs	r3, #255	@ 0xff
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f953 	bl	800e784 <USBH_Get_StringDesc>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e4e2:	7bbb      	ldrb	r3, [r7, #14]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d103      	bne.n	800e4f0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2206      	movs	r2, #6
 800e4ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e4ee:	e059      	b.n	800e5a4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4f0:	7bbb      	ldrb	r3, [r7, #14]
 800e4f2:	2b03      	cmp	r3, #3
 800e4f4:	d156      	bne.n	800e5a4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2206      	movs	r2, #6
 800e4fa:	705a      	strb	r2, [r3, #1]
      break;
 800e4fc:	e052      	b.n	800e5a4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2206      	movs	r2, #6
 800e502:	705a      	strb	r2, [r3, #1]
      break;
 800e504:	e04e      	b.n	800e5a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d019      	beq.n	800e544 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e51c:	23ff      	movs	r3, #255	@ 0xff
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f930 	bl	800e784 <USBH_Get_StringDesc>
 800e524:	4603      	mov	r3, r0
 800e526:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2207      	movs	r2, #7
 800e532:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e534:	e038      	b.n	800e5a8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e536:	7bbb      	ldrb	r3, [r7, #14]
 800e538:	2b03      	cmp	r3, #3
 800e53a:	d135      	bne.n	800e5a8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2207      	movs	r2, #7
 800e540:	705a      	strb	r2, [r3, #1]
      break;
 800e542:	e031      	b.n	800e5a8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2207      	movs	r2, #7
 800e548:	705a      	strb	r2, [r3, #1]
      break;
 800e54a:	e02d      	b.n	800e5a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800e552:	2b00      	cmp	r3, #0
 800e554:	d017      	beq.n	800e586 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e562:	23ff      	movs	r3, #255	@ 0xff
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f90d 	bl	800e784 <USBH_Get_StringDesc>
 800e56a:	4603      	mov	r3, r0
 800e56c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d102      	bne.n	800e57a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e578:	e018      	b.n	800e5ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e57a:	7bbb      	ldrb	r3, [r7, #14]
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	d115      	bne.n	800e5ac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73fb      	strb	r3, [r7, #15]
      break;
 800e584:	e012      	b.n	800e5ac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]
      break;
 800e58a:	e00f      	b.n	800e5ac <USBH_HandleEnum+0x3b4>

    default:
      break;
 800e58c:	bf00      	nop
 800e58e:	e00e      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e590:	bf00      	nop
 800e592:	e00c      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e594:	bf00      	nop
 800e596:	e00a      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e598:	bf00      	nop
 800e59a:	e008      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e59c:	bf00      	nop
 800e59e:	e006      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e5a0:	bf00      	nop
 800e5a2:	e004      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e5a4:	bf00      	nop
 800e5a6:	e002      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e5a8:	bf00      	nop
 800e5aa:	e000      	b.n	800e5ae <USBH_HandleEnum+0x3b6>
      break;
 800e5ac:	bf00      	nop
  }
  return Status;
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800e5ca:	bf00      	nop
 800e5cc:	370c      	adds	r7, #12
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b082      	sub	sp, #8
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f804 	bl	800e5fa <USBH_HandleSof>
}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b082      	sub	sp, #8
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	b2db      	uxtb	r3, r3
 800e608:	2b0b      	cmp	r3, #11
 800e60a:	d10a      	bne.n	800e622 <USBH_HandleSof+0x28>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e612:	2b00      	cmp	r3, #0
 800e614:	d005      	beq.n	800e622 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e61c:	699b      	ldr	r3, [r3, #24]
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	4798      	blx	r3
  }
}
 800e622:	bf00      	nop
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e62a:	b480      	push	{r7}
 800e62c:	b083      	sub	sp, #12
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e63a:	bf00      	nop
}
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e646:	b480      	push	{r7}
 800e648:	b083      	sub	sp, #12
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800e656:	bf00      	nop
}
 800e658:	370c      	adds	r7, #12
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr

0800e662 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e662:	b480      	push	{r7}
 800e664:	b083      	sub	sp, #12
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2201      	movs	r2, #1
 800e66e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f003 ff42 	bl	801253a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	791b      	ldrb	r3, [r3, #4]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 ff0b 	bl	800f4d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	795b      	ldrb	r3, [r3, #5]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 ff05 	bl	800f4d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af02      	add	r7, sp, #8
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e6e4:	887b      	ldrh	r3, [r7, #2]
 800e6e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6ea:	d901      	bls.n	800e6f0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	e01b      	b.n	800e728 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e6f6:	887b      	ldrh	r3, [r7, #2]
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e700:	2100      	movs	r1, #0
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 f872 	bl	800e7ec <USBH_GetDescriptor>
 800e708:	4603      	mov	r3, r0
 800e70a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d109      	bne.n	800e726 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e718:	887a      	ldrh	r2, [r7, #2]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f929 	bl	800e974 <USBH_ParseDevDesc>
 800e722:	4603      	mov	r3, r0
 800e724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e726:	7bfb      	ldrb	r3, [r7, #15]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af02      	add	r7, sp, #8
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	460b      	mov	r3, r1
 800e73a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	331c      	adds	r3, #28
 800e740:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e742:	887b      	ldrh	r3, [r7, #2]
 800e744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e748:	d901      	bls.n	800e74e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e016      	b.n	800e77c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e74e:	887b      	ldrh	r3, [r7, #2]
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e758:	2100      	movs	r1, #0
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 f846 	bl	800e7ec <USBH_GetDescriptor>
 800e760:	4603      	mov	r3, r0
 800e762:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d107      	bne.n	800e77a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e76a:	887b      	ldrh	r3, [r7, #2]
 800e76c:	461a      	mov	r2, r3
 800e76e:	68b9      	ldr	r1, [r7, #8]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 f9af 	bl	800ead4 <USBH_ParseCfgDesc>
 800e776:	4603      	mov	r3, r0
 800e778:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b088      	sub	sp, #32
 800e788:	af02      	add	r7, sp, #8
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	607a      	str	r2, [r7, #4]
 800e78e:	461a      	mov	r2, r3
 800e790:	460b      	mov	r3, r1
 800e792:	72fb      	strb	r3, [r7, #11]
 800e794:	4613      	mov	r3, r2
 800e796:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e798:	893b      	ldrh	r3, [r7, #8]
 800e79a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e79e:	d802      	bhi.n	800e7a6 <USBH_Get_StringDesc+0x22>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e01c      	b.n	800e7e4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800e7aa:	7afb      	ldrb	r3, [r7, #11]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e7b2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e7ba:	893b      	ldrh	r3, [r7, #8]
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	460b      	mov	r3, r1
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f000 f812 	bl	800e7ec <USBH_GetDescriptor>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d107      	bne.n	800e7e2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e7d8:	893a      	ldrh	r2, [r7, #8]
 800e7da:	6879      	ldr	r1, [r7, #4]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 fb8d 	bl	800eefc <USBH_ParseStringDesc>
  }

  return status;
 800e7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	607b      	str	r3, [r7, #4]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	72fb      	strb	r3, [r7, #11]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	789b      	ldrb	r3, [r3, #2]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d11c      	bne.n	800e840 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e806:	7afb      	ldrb	r3, [r7, #11]
 800e808:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2206      	movs	r2, #6
 800e816:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	893a      	ldrh	r2, [r7, #8]
 800e81c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e81e:	893b      	ldrh	r3, [r7, #8]
 800e820:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e828:	d104      	bne.n	800e834 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f240 4209 	movw	r2, #1033	@ 0x409
 800e830:	829a      	strh	r2, [r3, #20]
 800e832:	e002      	b.n	800e83a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	8b3a      	ldrh	r2, [r7, #24]
 800e83e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e840:	8b3b      	ldrh	r3, [r7, #24]
 800e842:	461a      	mov	r2, r3
 800e844:	6879      	ldr	r1, [r7, #4]
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f000 fba5 	bl	800ef96 <USBH_CtlReq>
 800e84c:	4603      	mov	r3, r0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b082      	sub	sp, #8
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	460b      	mov	r3, r1
 800e860:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	789b      	ldrb	r3, [r3, #2]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d10f      	bne.n	800e88a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2205      	movs	r2, #5
 800e874:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e876:	78fb      	ldrb	r3, [r7, #3]
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e88a:	2200      	movs	r2, #0
 800e88c:	2100      	movs	r1, #0
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fb81 	bl	800ef96 <USBH_CtlReq>
 800e894:	4603      	mov	r3, r0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	789b      	ldrb	r3, [r3, #2]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d10e      	bne.n	800e8d0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2209      	movs	r2, #9
 800e8bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	887a      	ldrh	r2, [r7, #2]
 800e8c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 fb5e 	bl	800ef96 <USBH_CtlReq>
 800e8da:	4603      	mov	r3, r0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	789b      	ldrb	r3, [r3, #2]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d10f      	bne.n	800e918 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2203      	movs	r2, #3
 800e902:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e904:	78fb      	ldrb	r3, [r7, #3]
 800e906:	b29a      	uxth	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e918:	2200      	movs	r2, #0
 800e91a:	2100      	movs	r1, #0
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 fb3a 	bl	800ef96 <USBH_CtlReq>
 800e922:	4603      	mov	r3, r0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	460b      	mov	r3, r1
 800e936:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	789b      	ldrb	r3, [r3, #2]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d10f      	bne.n	800e960 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2202      	movs	r2, #2
 800e944:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e952:	78fb      	ldrb	r3, [r7, #3]
 800e954:	b29a      	uxth	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e960:	2200      	movs	r2, #0
 800e962:	2100      	movs	r1, #0
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 fb16 	bl	800ef96 <USBH_CtlReq>
 800e96a:	4603      	mov	r3, r0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e974:	b480      	push	{r7}
 800e976:	b087      	sub	sp, #28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	4613      	mov	r3, r2
 800e980:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800e988:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800e98a:	2300      	movs	r3, #0
 800e98c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800e994:	2302      	movs	r3, #2
 800e996:	e094      	b.n	800eac2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	781a      	ldrb	r2, [r3, #0]
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	785a      	ldrb	r2, [r3, #1]
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	3302      	adds	r3, #2
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	3303      	adds	r3, #3
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	021b      	lsls	r3, r3, #8
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	791a      	ldrb	r2, [r3, #4]
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	795a      	ldrb	r2, [r3, #5]
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	799a      	ldrb	r2, [r3, #6]
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	79da      	ldrb	r2, [r3, #7]
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d004      	beq.n	800e9f6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d11b      	bne.n	800ea2e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	79db      	ldrb	r3, [r3, #7]
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	dc0f      	bgt.n	800ea1e <USBH_ParseDevDesc+0xaa>
 800e9fe:	2b08      	cmp	r3, #8
 800ea00:	db0f      	blt.n	800ea22 <USBH_ParseDevDesc+0xae>
 800ea02:	3b08      	subs	r3, #8
 800ea04:	4a32      	ldr	r2, [pc, #200]	@ (800ead0 <USBH_ParseDevDesc+0x15c>)
 800ea06:	fa22 f303 	lsr.w	r3, r2, r3
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	bf14      	ite	ne
 800ea12:	2301      	movne	r3, #1
 800ea14:	2300      	moveq	r3, #0
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d106      	bne.n	800ea2a <USBH_ParseDevDesc+0xb6>
 800ea1c:	e001      	b.n	800ea22 <USBH_ParseDevDesc+0xae>
 800ea1e:	2b40      	cmp	r3, #64	@ 0x40
 800ea20:	d003      	beq.n	800ea2a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	2208      	movs	r2, #8
 800ea26:	71da      	strb	r2, [r3, #7]
        break;
 800ea28:	e000      	b.n	800ea2c <USBH_ParseDevDesc+0xb8>
        break;
 800ea2a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ea2c:	e00e      	b.n	800ea4c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d107      	bne.n	800ea48 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	79db      	ldrb	r3, [r3, #7]
 800ea3c:	2b08      	cmp	r3, #8
 800ea3e:	d005      	beq.n	800ea4c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2208      	movs	r2, #8
 800ea44:	71da      	strb	r2, [r3, #7]
 800ea46:	e001      	b.n	800ea4c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ea4c:	88fb      	ldrh	r3, [r7, #6]
 800ea4e:	2b08      	cmp	r3, #8
 800ea50:	d936      	bls.n	800eac0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	3308      	adds	r3, #8
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	3309      	adds	r3, #9
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	021b      	lsls	r3, r3, #8
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	4313      	orrs	r3, r2
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	330a      	adds	r3, #10
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	330b      	adds	r3, #11
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	021b      	lsls	r3, r3, #8
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	330c      	adds	r3, #12
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	330d      	adds	r3, #13
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	021b      	lsls	r3, r3, #8
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	7b9a      	ldrb	r2, [r3, #14]
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	7bda      	ldrb	r2, [r3, #15]
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	7c1a      	ldrb	r2, [r3, #16]
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	7c5a      	ldrb	r2, [r3, #17]
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	371c      	adds	r7, #28
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	01000101 	.word	0x01000101

0800ead4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08c      	sub	sp, #48	@ 0x30
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	4613      	mov	r3, r2
 800eae0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800eae8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800eb02:	2302      	movs	r3, #2
 800eb04:	e0da      	b.n	800ecbc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800eb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	d002      	beq.n	800eb18 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800eb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb14:	2209      	movs	r2, #9
 800eb16:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	781a      	ldrb	r2, [r3, #0]
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	785a      	ldrb	r2, [r3, #1]
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	3302      	adds	r3, #2
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	3303      	adds	r3, #3
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	021b      	lsls	r3, r3, #8
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb42:	bf28      	it	cs
 800eb44:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	791a      	ldrb	r2, [r3, #4]
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	795a      	ldrb	r2, [r3, #5]
 800eb5a:	6a3b      	ldr	r3, [r7, #32]
 800eb5c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	799a      	ldrb	r2, [r3, #6]
 800eb62:	6a3b      	ldr	r3, [r7, #32]
 800eb64:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	79da      	ldrb	r2, [r3, #7]
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	7a1a      	ldrb	r2, [r3, #8]
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800eb76:	88fb      	ldrh	r3, [r7, #6]
 800eb78:	2b09      	cmp	r3, #9
 800eb7a:	f240 809d 	bls.w	800ecb8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800eb7e:	2309      	movs	r3, #9
 800eb80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800eb82:	2300      	movs	r3, #0
 800eb84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eb86:	e081      	b.n	800ec8c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eb88:	f107 0316 	add.w	r3, r7, #22
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb90:	f000 f9e7 	bl	800ef62 <USBH_GetNextDesc>
 800eb94:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800eb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb98:	785b      	ldrb	r3, [r3, #1]
 800eb9a:	2b04      	cmp	r3, #4
 800eb9c:	d176      	bne.n	800ec8c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800eb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	2b09      	cmp	r3, #9
 800eba4:	d002      	beq.n	800ebac <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800eba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba8:	2209      	movs	r2, #9
 800ebaa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ebac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebb0:	221a      	movs	r2, #26
 800ebb2:	fb02 f303 	mul.w	r3, r2, r3
 800ebb6:	3308      	adds	r3, #8
 800ebb8:	6a3a      	ldr	r2, [r7, #32]
 800ebba:	4413      	add	r3, r2
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ebc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ebc2:	69f8      	ldr	r0, [r7, #28]
 800ebc4:	f000 f87e 	bl	800ecc4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ebd2:	e043      	b.n	800ec5c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ebd4:	f107 0316 	add.w	r3, r7, #22
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebdc:	f000 f9c1 	bl	800ef62 <USBH_GetNextDesc>
 800ebe0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ebe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe4:	785b      	ldrb	r3, [r3, #1]
 800ebe6:	2b05      	cmp	r3, #5
 800ebe8:	d138      	bne.n	800ec5c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	795b      	ldrb	r3, [r3, #5]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d113      	bne.n	800ec1a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d003      	beq.n	800ec02 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	799b      	ldrb	r3, [r3, #6]
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d10b      	bne.n	800ec1a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	79db      	ldrb	r3, [r3, #7]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10b      	bne.n	800ec22 <USBH_ParseCfgDesc+0x14e>
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	2b09      	cmp	r3, #9
 800ec10:	d007      	beq.n	800ec22 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ec12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec14:	2209      	movs	r2, #9
 800ec16:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ec18:	e003      	b.n	800ec22 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ec1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1c:	2207      	movs	r2, #7
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	e000      	b.n	800ec24 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ec22:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ec24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec28:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ec2c:	3201      	adds	r2, #1
 800ec2e:	00d2      	lsls	r2, r2, #3
 800ec30:	211a      	movs	r1, #26
 800ec32:	fb01 f303 	mul.w	r3, r1, r3
 800ec36:	4413      	add	r3, r2
 800ec38:	3308      	adds	r3, #8
 800ec3a:	6a3a      	ldr	r2, [r7, #32]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	3304      	adds	r3, #4
 800ec40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ec42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec44:	69b9      	ldr	r1, [r7, #24]
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 f870 	bl	800ed2c <USBH_ParseEPDesc>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ec52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec56:	3301      	adds	r3, #1
 800ec58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	791b      	ldrb	r3, [r3, #4]
 800ec60:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d204      	bcs.n	800ec72 <USBH_ParseCfgDesc+0x19e>
 800ec68:	6a3b      	ldr	r3, [r7, #32]
 800ec6a:	885a      	ldrh	r2, [r3, #2]
 800ec6c:	8afb      	ldrh	r3, [r7, #22]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d8b0      	bhi.n	800ebd4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	791b      	ldrb	r3, [r3, #4]
 800ec76:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d201      	bcs.n	800ec82 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e01c      	b.n	800ecbc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800ec82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec86:	3301      	adds	r3, #1
 800ec88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ec8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d805      	bhi.n	800eca0 <USBH_ParseCfgDesc+0x1cc>
 800ec94:	6a3b      	ldr	r3, [r7, #32]
 800ec96:	885a      	ldrh	r2, [r3, #2]
 800ec98:	8afb      	ldrh	r3, [r7, #22]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	f63f af74 	bhi.w	800eb88 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800eca0:	6a3b      	ldr	r3, [r7, #32]
 800eca2:	791b      	ldrb	r3, [r3, #4]
 800eca4:	2b02      	cmp	r3, #2
 800eca6:	bf28      	it	cs
 800eca8:	2302      	movcs	r3, #2
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d201      	bcs.n	800ecb8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	e001      	b.n	800ecbc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800ecb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3730      	adds	r7, #48	@ 0x30
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	781a      	ldrb	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	785a      	ldrb	r2, [r3, #1]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	789a      	ldrb	r2, [r3, #2]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	78da      	ldrb	r2, [r3, #3]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	bf28      	it	cs
 800ecf8:	2302      	movcs	r3, #2
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	795a      	ldrb	r2, [r3, #5]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	799a      	ldrb	r2, [r3, #6]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	79da      	ldrb	r2, [r3, #7]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	7a1a      	ldrb	r2, [r3, #8]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	721a      	strb	r2, [r3, #8]
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b087      	sub	sp, #28
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	781a      	ldrb	r2, [r3, #0]
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	785a      	ldrb	r2, [r3, #1]
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	789a      	ldrb	r2, [r3, #2]
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	78da      	ldrb	r2, [r3, #3]
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3304      	adds	r3, #4
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	461a      	mov	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	3305      	adds	r3, #5
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	021b      	lsls	r3, r3, #8
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	799a      	ldrb	r2, [r3, #6]
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	889b      	ldrh	r3, [r3, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d009      	beq.n	800ed9a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ed8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed8e:	d804      	bhi.n	800ed9a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ed94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed98:	d901      	bls.n	800ed9e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d136      	bne.n	800ee16 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	78db      	ldrb	r3, [r3, #3]
 800edac:	f003 0303 	and.w	r3, r3, #3
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d108      	bne.n	800edc6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	889b      	ldrh	r3, [r3, #4]
 800edb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edbc:	f240 8097 	bls.w	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800edc0:	2303      	movs	r3, #3
 800edc2:	75fb      	strb	r3, [r7, #23]
 800edc4:	e093      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	78db      	ldrb	r3, [r3, #3]
 800edca:	f003 0303 	and.w	r3, r3, #3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d107      	bne.n	800ede2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	889b      	ldrh	r3, [r3, #4]
 800edd6:	2b40      	cmp	r3, #64	@ 0x40
 800edd8:	f240 8089 	bls.w	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eddc:	2303      	movs	r3, #3
 800edde:	75fb      	strb	r3, [r7, #23]
 800ede0:	e085      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	78db      	ldrb	r3, [r3, #3]
 800ede6:	f003 0303 	and.w	r3, r3, #3
 800edea:	2b01      	cmp	r3, #1
 800edec:	d005      	beq.n	800edfa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	78db      	ldrb	r3, [r3, #3]
 800edf2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800edf6:	2b03      	cmp	r3, #3
 800edf8:	d10a      	bne.n	800ee10 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	799b      	ldrb	r3, [r3, #6]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <USBH_ParseEPDesc+0xde>
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	799b      	ldrb	r3, [r3, #6]
 800ee06:	2b10      	cmp	r3, #16
 800ee08:	d970      	bls.n	800eeec <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ee0e:	e06d      	b.n	800eeec <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ee10:	2303      	movs	r3, #3
 800ee12:	75fb      	strb	r3, [r7, #23]
 800ee14:	e06b      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d13c      	bne.n	800ee9a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	78db      	ldrb	r3, [r3, #3]
 800ee24:	f003 0303 	and.w	r3, r3, #3
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d005      	beq.n	800ee38 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	78db      	ldrb	r3, [r3, #3]
 800ee30:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d106      	bne.n	800ee46 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	889b      	ldrh	r3, [r3, #4]
 800ee3c:	2b40      	cmp	r3, #64	@ 0x40
 800ee3e:	d956      	bls.n	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ee40:	2303      	movs	r3, #3
 800ee42:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ee44:	e053      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	78db      	ldrb	r3, [r3, #3]
 800ee4a:	f003 0303 	and.w	r3, r3, #3
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d10e      	bne.n	800ee70 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	799b      	ldrb	r3, [r3, #6]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d007      	beq.n	800ee6a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ee5e:	2b10      	cmp	r3, #16
 800ee60:	d803      	bhi.n	800ee6a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ee66:	2b40      	cmp	r3, #64	@ 0x40
 800ee68:	d941      	bls.n	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	75fb      	strb	r3, [r7, #23]
 800ee6e:	e03e      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	78db      	ldrb	r3, [r3, #3]
 800ee74:	f003 0303 	and.w	r3, r3, #3
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	d10b      	bne.n	800ee94 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	799b      	ldrb	r3, [r3, #6]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d004      	beq.n	800ee8e <USBH_ParseEPDesc+0x162>
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	889b      	ldrh	r3, [r3, #4]
 800ee88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee8c:	d32f      	bcc.n	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	75fb      	strb	r3, [r7, #23]
 800ee92:	e02c      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ee94:	2303      	movs	r3, #3
 800ee96:	75fb      	strb	r3, [r7, #23]
 800ee98:	e029      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	d120      	bne.n	800eee6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	78db      	ldrb	r3, [r3, #3]
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d106      	bne.n	800eebe <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	889b      	ldrh	r3, [r3, #4]
 800eeb4:	2b08      	cmp	r3, #8
 800eeb6:	d01a      	beq.n	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	75fb      	strb	r3, [r7, #23]
 800eebc:	e017      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	78db      	ldrb	r3, [r3, #3]
 800eec2:	f003 0303 	and.w	r3, r3, #3
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d10a      	bne.n	800eee0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	799b      	ldrb	r3, [r3, #6]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d003      	beq.n	800eeda <USBH_ParseEPDesc+0x1ae>
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	889b      	ldrh	r3, [r3, #4]
 800eed6:	2b08      	cmp	r3, #8
 800eed8:	d909      	bls.n	800eeee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eeda:	2303      	movs	r3, #3
 800eedc:	75fb      	strb	r3, [r7, #23]
 800eede:	e006      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800eee0:	2303      	movs	r3, #3
 800eee2:	75fb      	strb	r3, [r7, #23]
 800eee4:	e003      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800eee6:	2303      	movs	r3, #3
 800eee8:	75fb      	strb	r3, [r7, #23]
 800eeea:	e000      	b.n	800eeee <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800eeec:	bf00      	nop
  }

  return status;
 800eeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	371c      	adds	r7, #28
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b087      	sub	sp, #28
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	4613      	mov	r3, r2
 800ef08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b03      	cmp	r3, #3
 800ef12:	d120      	bne.n	800ef56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	1e9a      	subs	r2, r3, #2
 800ef1a:	88fb      	ldrh	r3, [r7, #6]
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	bf28      	it	cs
 800ef20:	4613      	movcs	r3, r2
 800ef22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	3302      	adds	r3, #2
 800ef28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	82fb      	strh	r3, [r7, #22]
 800ef2e:	e00b      	b.n	800ef48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ef30:	8afb      	ldrh	r3, [r7, #22]
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	4413      	add	r3, r2
 800ef36:	781a      	ldrb	r2, [r3, #0]
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ef42:	8afb      	ldrh	r3, [r7, #22]
 800ef44:	3302      	adds	r3, #2
 800ef46:	82fb      	strh	r3, [r7, #22]
 800ef48:	8afa      	ldrh	r2, [r7, #22]
 800ef4a:	8abb      	ldrh	r3, [r7, #20]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d3ef      	bcc.n	800ef30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
  }
}
 800ef56:	bf00      	nop
 800ef58:	371c      	adds	r7, #28
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef62:	b480      	push	{r7}
 800ef64:	b085      	sub	sp, #20
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	7812      	ldrb	r2, [r2, #0]
 800ef74:	4413      	add	r3, r2
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4413      	add	r3, r2
 800ef86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ef88:	68fb      	ldr	r3, [r7, #12]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b086      	sub	sp, #24
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	60f8      	str	r0, [r7, #12]
 800ef9e:	60b9      	str	r1, [r7, #8]
 800efa0:	4613      	mov	r3, r2
 800efa2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800efa4:	2301      	movs	r3, #1
 800efa6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	789b      	ldrb	r3, [r3, #2]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d002      	beq.n	800efb6 <USBH_CtlReq+0x20>
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d00f      	beq.n	800efd4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800efb4:	e027      	b.n	800f006 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	88fa      	ldrh	r2, [r7, #6]
 800efc0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2201      	movs	r2, #1
 800efc6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2202      	movs	r2, #2
 800efcc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800efce:	2301      	movs	r3, #1
 800efd0:	75fb      	strb	r3, [r7, #23]
      break;
 800efd2:	e018      	b.n	800f006 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 f81b 	bl	800f010 <USBH_HandleControl>
 800efda:	4603      	mov	r3, r0
 800efdc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800efde:	7dfb      	ldrb	r3, [r7, #23]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <USBH_CtlReq+0x54>
 800efe4:	7dfb      	ldrb	r3, [r7, #23]
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	d106      	bne.n	800eff8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	761a      	strb	r2, [r3, #24]
      break;
 800eff6:	e005      	b.n	800f004 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
 800effa:	2b02      	cmp	r3, #2
 800effc:	d102      	bne.n	800f004 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2201      	movs	r2, #1
 800f002:	709a      	strb	r2, [r3, #2]
      break;
 800f004:	bf00      	nop
  }
  return status;
 800f006:	7dfb      	ldrb	r3, [r7, #23]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3718      	adds	r7, #24
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af02      	add	r7, sp, #8
 800f016:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f018:	2301      	movs	r3, #1
 800f01a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f01c:	2300      	movs	r3, #0
 800f01e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	7e1b      	ldrb	r3, [r3, #24]
 800f024:	3b01      	subs	r3, #1
 800f026:	2b0a      	cmp	r3, #10
 800f028:	f200 8156 	bhi.w	800f2d8 <USBH_HandleControl+0x2c8>
 800f02c:	a201      	add	r2, pc, #4	@ (adr r2, 800f034 <USBH_HandleControl+0x24>)
 800f02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f032:	bf00      	nop
 800f034:	0800f061 	.word	0x0800f061
 800f038:	0800f07b 	.word	0x0800f07b
 800f03c:	0800f0e5 	.word	0x0800f0e5
 800f040:	0800f10b 	.word	0x0800f10b
 800f044:	0800f143 	.word	0x0800f143
 800f048:	0800f16d 	.word	0x0800f16d
 800f04c:	0800f1bf 	.word	0x0800f1bf
 800f050:	0800f1e1 	.word	0x0800f1e1
 800f054:	0800f21d 	.word	0x0800f21d
 800f058:	0800f243 	.word	0x0800f243
 800f05c:	0800f281 	.word	0x0800f281
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f103 0110 	add.w	r1, r3, #16
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	795b      	ldrb	r3, [r3, #5]
 800f06a:	461a      	mov	r2, r3
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 f943 	bl	800f2f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2202      	movs	r2, #2
 800f076:	761a      	strb	r2, [r3, #24]
      break;
 800f078:	e139      	b.n	800f2ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	795b      	ldrb	r3, [r3, #5]
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f003 fb49 	bl	8012718 <USBH_LL_GetURBState>
 800f086:	4603      	mov	r3, r0
 800f088:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d11e      	bne.n	800f0ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	7c1b      	ldrb	r3, [r3, #16]
 800f094:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f098:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	8adb      	ldrh	r3, [r3, #22]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00a      	beq.n	800f0b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f0a2:	7b7b      	ldrb	r3, [r7, #13]
 800f0a4:	2b80      	cmp	r3, #128	@ 0x80
 800f0a6:	d103      	bne.n	800f0b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2203      	movs	r2, #3
 800f0ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f0ae:	e115      	b.n	800f2dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2205      	movs	r2, #5
 800f0b4:	761a      	strb	r2, [r3, #24]
      break;
 800f0b6:	e111      	b.n	800f2dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f0b8:	7b7b      	ldrb	r3, [r7, #13]
 800f0ba:	2b80      	cmp	r3, #128	@ 0x80
 800f0bc:	d103      	bne.n	800f0c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2209      	movs	r2, #9
 800f0c2:	761a      	strb	r2, [r3, #24]
      break;
 800f0c4:	e10a      	b.n	800f2dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2207      	movs	r2, #7
 800f0ca:	761a      	strb	r2, [r3, #24]
      break;
 800f0cc:	e106      	b.n	800f2dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
 800f0d0:	2b04      	cmp	r3, #4
 800f0d2:	d003      	beq.n	800f0dc <USBH_HandleControl+0xcc>
 800f0d4:	7bbb      	ldrb	r3, [r7, #14]
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	f040 8100 	bne.w	800f2dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	220b      	movs	r2, #11
 800f0e0:	761a      	strb	r2, [r3, #24]
      break;
 800f0e2:	e0fb      	b.n	800f2dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6899      	ldr	r1, [r3, #8]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	899a      	ldrh	r2, [r3, #12]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	791b      	ldrb	r3, [r3, #4]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f93a 	bl	800f376 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2204      	movs	r2, #4
 800f106:	761a      	strb	r2, [r3, #24]
      break;
 800f108:	e0f1      	b.n	800f2ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	791b      	ldrb	r3, [r3, #4]
 800f10e:	4619      	mov	r1, r3
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f003 fb01 	bl	8012718 <USBH_LL_GetURBState>
 800f116:	4603      	mov	r3, r0
 800f118:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d102      	bne.n	800f126 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2209      	movs	r2, #9
 800f124:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f126:	7bbb      	ldrb	r3, [r7, #14]
 800f128:	2b05      	cmp	r3, #5
 800f12a:	d102      	bne.n	800f132 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f12c:	2303      	movs	r3, #3
 800f12e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f130:	e0d6      	b.n	800f2e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f132:	7bbb      	ldrb	r3, [r7, #14]
 800f134:	2b04      	cmp	r3, #4
 800f136:	f040 80d3 	bne.w	800f2e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	220b      	movs	r2, #11
 800f13e:	761a      	strb	r2, [r3, #24]
      break;
 800f140:	e0ce      	b.n	800f2e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6899      	ldr	r1, [r3, #8]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	899a      	ldrh	r2, [r3, #12]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	795b      	ldrb	r3, [r3, #5]
 800f14e:	2001      	movs	r0, #1
 800f150:	9000      	str	r0, [sp, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f8ea 	bl	800f32c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f15e:	b29a      	uxth	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2206      	movs	r2, #6
 800f168:	761a      	strb	r2, [r3, #24]
      break;
 800f16a:	e0c0      	b.n	800f2ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	795b      	ldrb	r3, [r3, #5]
 800f170:	4619      	mov	r1, r3
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f003 fad0 	bl	8012718 <USBH_LL_GetURBState>
 800f178:	4603      	mov	r3, r0
 800f17a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f17c:	7bbb      	ldrb	r3, [r7, #14]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d103      	bne.n	800f18a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2207      	movs	r2, #7
 800f186:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f188:	e0ac      	b.n	800f2e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
 800f18c:	2b05      	cmp	r3, #5
 800f18e:	d105      	bne.n	800f19c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	220c      	movs	r2, #12
 800f194:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f196:	2303      	movs	r3, #3
 800f198:	73fb      	strb	r3, [r7, #15]
      break;
 800f19a:	e0a3      	b.n	800f2e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d103      	bne.n	800f1aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2205      	movs	r2, #5
 800f1a6:	761a      	strb	r2, [r3, #24]
      break;
 800f1a8:	e09c      	b.n	800f2e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	f040 8099 	bne.w	800f2e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	220b      	movs	r2, #11
 800f1b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f1bc:	e092      	b.n	800f2e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	791b      	ldrb	r3, [r3, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f8d5 	bl	800f376 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2208      	movs	r2, #8
 800f1dc:	761a      	strb	r2, [r3, #24]

      break;
 800f1de:	e086      	b.n	800f2ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	791b      	ldrb	r3, [r3, #4]
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f003 fa96 	bl	8012718 <USBH_LL_GetURBState>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d105      	bne.n	800f202 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	220d      	movs	r2, #13
 800f1fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f200:	e072      	b.n	800f2e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f202:	7bbb      	ldrb	r3, [r7, #14]
 800f204:	2b04      	cmp	r3, #4
 800f206:	d103      	bne.n	800f210 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	220b      	movs	r2, #11
 800f20c:	761a      	strb	r2, [r3, #24]
      break;
 800f20e:	e06b      	b.n	800f2e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f210:	7bbb      	ldrb	r3, [r7, #14]
 800f212:	2b05      	cmp	r3, #5
 800f214:	d168      	bne.n	800f2e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f216:	2303      	movs	r3, #3
 800f218:	73fb      	strb	r3, [r7, #15]
      break;
 800f21a:	e065      	b.n	800f2e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	795b      	ldrb	r3, [r3, #5]
 800f220:	2201      	movs	r2, #1
 800f222:	9200      	str	r2, [sp, #0]
 800f224:	2200      	movs	r2, #0
 800f226:	2100      	movs	r1, #0
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 f87f 	bl	800f32c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f234:	b29a      	uxth	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	220a      	movs	r2, #10
 800f23e:	761a      	strb	r2, [r3, #24]
      break;
 800f240:	e055      	b.n	800f2ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	795b      	ldrb	r3, [r3, #5]
 800f246:	4619      	mov	r1, r3
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f003 fa65 	bl	8012718 <USBH_LL_GetURBState>
 800f24e:	4603      	mov	r3, r0
 800f250:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f252:	7bbb      	ldrb	r3, [r7, #14]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d105      	bne.n	800f264 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f258:	2300      	movs	r3, #0
 800f25a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	220d      	movs	r2, #13
 800f260:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f262:	e043      	b.n	800f2ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	2b02      	cmp	r3, #2
 800f268:	d103      	bne.n	800f272 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2209      	movs	r2, #9
 800f26e:	761a      	strb	r2, [r3, #24]
      break;
 800f270:	e03c      	b.n	800f2ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f272:	7bbb      	ldrb	r3, [r7, #14]
 800f274:	2b04      	cmp	r3, #4
 800f276:	d139      	bne.n	800f2ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	220b      	movs	r2, #11
 800f27c:	761a      	strb	r2, [r3, #24]
      break;
 800f27e:	e035      	b.n	800f2ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	7e5b      	ldrb	r3, [r3, #25]
 800f284:	3301      	adds	r3, #1
 800f286:	b2da      	uxtb	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	765a      	strb	r2, [r3, #25]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	7e5b      	ldrb	r3, [r3, #25]
 800f290:	2b02      	cmp	r3, #2
 800f292:	d806      	bhi.n	800f2a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2201      	movs	r2, #1
 800f298:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2201      	movs	r2, #1
 800f29e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f2a0:	e025      	b.n	800f2ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f2a8:	2106      	movs	r1, #6
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	795b      	ldrb	r3, [r3, #5]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 f90c 	bl	800f4d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	791b      	ldrb	r3, [r3, #4]
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f906 	bl	800f4d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f2d2:	2302      	movs	r3, #2
 800f2d4:	73fb      	strb	r3, [r7, #15]
      break;
 800f2d6:	e00a      	b.n	800f2ee <USBH_HandleControl+0x2de>

    default:
      break;
 800f2d8:	bf00      	nop
 800f2da:	e008      	b.n	800f2ee <USBH_HandleControl+0x2de>
      break;
 800f2dc:	bf00      	nop
 800f2de:	e006      	b.n	800f2ee <USBH_HandleControl+0x2de>
      break;
 800f2e0:	bf00      	nop
 800f2e2:	e004      	b.n	800f2ee <USBH_HandleControl+0x2de>
      break;
 800f2e4:	bf00      	nop
 800f2e6:	e002      	b.n	800f2ee <USBH_HandleControl+0x2de>
      break;
 800f2e8:	bf00      	nop
 800f2ea:	e000      	b.n	800f2ee <USBH_HandleControl+0x2de>
      break;
 800f2ec:	bf00      	nop
  }

  return status;
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3710      	adds	r7, #16
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b088      	sub	sp, #32
 800f2fc:	af04      	add	r7, sp, #16
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	4613      	mov	r3, r2
 800f304:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f306:	79f9      	ldrb	r1, [r7, #7]
 800f308:	2300      	movs	r3, #0
 800f30a:	9303      	str	r3, [sp, #12]
 800f30c:	2308      	movs	r3, #8
 800f30e:	9302      	str	r3, [sp, #8]
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	9301      	str	r3, [sp, #4]
 800f314:	2300      	movs	r3, #0
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	2300      	movs	r3, #0
 800f31a:	2200      	movs	r2, #0
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f003 f9ca 	bl	80126b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b088      	sub	sp, #32
 800f330:	af04      	add	r7, sp, #16
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	4611      	mov	r1, r2
 800f338:	461a      	mov	r2, r3
 800f33a:	460b      	mov	r3, r1
 800f33c:	80fb      	strh	r3, [r7, #6]
 800f33e:	4613      	mov	r3, r2
 800f340:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d001      	beq.n	800f350 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f34c:	2300      	movs	r3, #0
 800f34e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f350:	7979      	ldrb	r1, [r7, #5]
 800f352:	7e3b      	ldrb	r3, [r7, #24]
 800f354:	9303      	str	r3, [sp, #12]
 800f356:	88fb      	ldrh	r3, [r7, #6]
 800f358:	9302      	str	r3, [sp, #8]
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	2301      	movs	r3, #1
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	2300      	movs	r3, #0
 800f364:	2200      	movs	r2, #0
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f003 f9a5 	bl	80126b6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b088      	sub	sp, #32
 800f37a:	af04      	add	r7, sp, #16
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	4611      	mov	r1, r2
 800f382:	461a      	mov	r2, r3
 800f384:	460b      	mov	r3, r1
 800f386:	80fb      	strh	r3, [r7, #6]
 800f388:	4613      	mov	r3, r2
 800f38a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f38c:	7979      	ldrb	r1, [r7, #5]
 800f38e:	2300      	movs	r3, #0
 800f390:	9303      	str	r3, [sp, #12]
 800f392:	88fb      	ldrh	r3, [r7, #6]
 800f394:	9302      	str	r3, [sp, #8]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	9301      	str	r3, [sp, #4]
 800f39a:	2301      	movs	r3, #1
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	2300      	movs	r3, #0
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f003 f987 	bl	80126b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f3a8:	2300      	movs	r3, #0

}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3710      	adds	r7, #16
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b088      	sub	sp, #32
 800f3b6:	af04      	add	r7, sp, #16
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	461a      	mov	r2, r3
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	80fb      	strh	r3, [r7, #6]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f3d6:	7979      	ldrb	r1, [r7, #5]
 800f3d8:	7e3b      	ldrb	r3, [r7, #24]
 800f3da:	9303      	str	r3, [sp, #12]
 800f3dc:	88fb      	ldrh	r3, [r7, #6]
 800f3de:	9302      	str	r3, [sp, #8]
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	9301      	str	r3, [sp, #4]
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	9300      	str	r3, [sp, #0]
 800f3e8:	2302      	movs	r3, #2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f003 f962 	bl	80126b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f3f2:	2300      	movs	r3, #0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b088      	sub	sp, #32
 800f400:	af04      	add	r7, sp, #16
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	4611      	mov	r1, r2
 800f408:	461a      	mov	r2, r3
 800f40a:	460b      	mov	r3, r1
 800f40c:	80fb      	strh	r3, [r7, #6]
 800f40e:	4613      	mov	r3, r2
 800f410:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f412:	7979      	ldrb	r1, [r7, #5]
 800f414:	2300      	movs	r3, #0
 800f416:	9303      	str	r3, [sp, #12]
 800f418:	88fb      	ldrh	r3, [r7, #6]
 800f41a:	9302      	str	r3, [sp, #8]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	9301      	str	r3, [sp, #4]
 800f420:	2301      	movs	r3, #1
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	2302      	movs	r3, #2
 800f426:	2201      	movs	r2, #1
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f003 f944 	bl	80126b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b086      	sub	sp, #24
 800f43c:	af04      	add	r7, sp, #16
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	4608      	mov	r0, r1
 800f442:	4611      	mov	r1, r2
 800f444:	461a      	mov	r2, r3
 800f446:	4603      	mov	r3, r0
 800f448:	70fb      	strb	r3, [r7, #3]
 800f44a:	460b      	mov	r3, r1
 800f44c:	70bb      	strb	r3, [r7, #2]
 800f44e:	4613      	mov	r3, r2
 800f450:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f452:	7878      	ldrb	r0, [r7, #1]
 800f454:	78ba      	ldrb	r2, [r7, #2]
 800f456:	78f9      	ldrb	r1, [r7, #3]
 800f458:	8b3b      	ldrh	r3, [r7, #24]
 800f45a:	9302      	str	r3, [sp, #8]
 800f45c:	7d3b      	ldrb	r3, [r7, #20]
 800f45e:	9301      	str	r3, [sp, #4]
 800f460:	7c3b      	ldrb	r3, [r7, #16]
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	4603      	mov	r3, r0
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f003 f8d7 	bl	801261a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	460b      	mov	r3, r1
 800f480:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f482:	78fb      	ldrb	r3, [r7, #3]
 800f484:	4619      	mov	r1, r3
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f003 f8f6 	bl	8012678 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b084      	sub	sp, #16
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 f836 	bl	800f514 <USBH_GetFreePipe>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f4ac:	89fb      	ldrh	r3, [r7, #14]
 800f4ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d00a      	beq.n	800f4cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f4b6:	78fa      	ldrb	r2, [r7, #3]
 800f4b8:	89fb      	ldrh	r3, [r7, #14]
 800f4ba:	f003 030f 	and.w	r3, r3, #15
 800f4be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f4c2:	6879      	ldr	r1, [r7, #4]
 800f4c4:	33e0      	adds	r3, #224	@ 0xe0
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	440b      	add	r3, r1
 800f4ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f4cc:	89fb      	ldrh	r3, [r7, #14]
 800f4ce:	b2db      	uxtb	r3, r3
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f4e4:	78fb      	ldrb	r3, [r7, #3]
 800f4e6:	2b0f      	cmp	r3, #15
 800f4e8:	d80d      	bhi.n	800f506 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f4ea:	78fb      	ldrb	r3, [r7, #3]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	33e0      	adds	r3, #224	@ 0xe0
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4413      	add	r3, r2
 800f4f4:	685a      	ldr	r2, [r3, #4]
 800f4f6:	78fb      	ldrb	r3, [r7, #3]
 800f4f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	33e0      	adds	r3, #224	@ 0xe0
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	440b      	add	r3, r1
 800f504:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	370c      	adds	r7, #12
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f51c:	2300      	movs	r3, #0
 800f51e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f520:	2300      	movs	r3, #0
 800f522:	73fb      	strb	r3, [r7, #15]
 800f524:	e00f      	b.n	800f546 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	33e0      	adds	r3, #224	@ 0xe0
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f536:	2b00      	cmp	r3, #0
 800f538:	d102      	bne.n	800f540 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f53a:	7bfb      	ldrb	r3, [r7, #15]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	e007      	b.n	800f550 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f540:	7bfb      	ldrb	r3, [r7, #15]
 800f542:	3301      	adds	r3, #1
 800f544:	73fb      	strb	r3, [r7, #15]
 800f546:	7bfb      	ldrb	r3, [r7, #15]
 800f548:	2b0f      	cmp	r3, #15
 800f54a:	d9ec      	bls.n	800f526 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f54c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800f550:	4618      	mov	r0, r3
 800f552:	3714      	adds	r7, #20
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	4603      	mov	r3, r0
 800f564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f566:	79fb      	ldrb	r3, [r7, #7]
 800f568:	4a08      	ldr	r2, [pc, #32]	@ (800f58c <disk_status+0x30>)
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	79fa      	ldrb	r2, [r7, #7]
 800f574:	4905      	ldr	r1, [pc, #20]	@ (800f58c <disk_status+0x30>)
 800f576:	440a      	add	r2, r1
 800f578:	7a12      	ldrb	r2, [r2, #8]
 800f57a:	4610      	mov	r0, r2
 800f57c:	4798      	blx	r3
 800f57e:	4603      	mov	r3, r0
 800f580:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f582:	7bfb      	ldrb	r3, [r7, #15]
}
 800f584:	4618      	mov	r0, r3
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20000840 	.word	0x20000840

0800f590 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f59a:	2300      	movs	r3, #0
 800f59c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f59e:	79fb      	ldrb	r3, [r7, #7]
 800f5a0:	4a0e      	ldr	r2, [pc, #56]	@ (800f5dc <disk_initialize+0x4c>)
 800f5a2:	5cd3      	ldrb	r3, [r2, r3]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d114      	bne.n	800f5d2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	4a0c      	ldr	r2, [pc, #48]	@ (800f5dc <disk_initialize+0x4c>)
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	79fa      	ldrb	r2, [r7, #7]
 800f5b6:	4909      	ldr	r1, [pc, #36]	@ (800f5dc <disk_initialize+0x4c>)
 800f5b8:	440a      	add	r2, r1
 800f5ba:	7a12      	ldrb	r2, [r2, #8]
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4798      	blx	r3
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f5c4:	7bfb      	ldrb	r3, [r7, #15]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d103      	bne.n	800f5d2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f5ca:	79fb      	ldrb	r3, [r7, #7]
 800f5cc:	4a03      	ldr	r2, [pc, #12]	@ (800f5dc <disk_initialize+0x4c>)
 800f5ce:	2101      	movs	r1, #1
 800f5d0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	20000840 	.word	0x20000840

0800f5e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f5e0:	b590      	push	{r4, r7, lr}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60b9      	str	r1, [r7, #8]
 800f5e8:	607a      	str	r2, [r7, #4]
 800f5ea:	603b      	str	r3, [r7, #0]
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
 800f5f2:	4a0a      	ldr	r2, [pc, #40]	@ (800f61c <disk_read+0x3c>)
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	4413      	add	r3, r2
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	689c      	ldr	r4, [r3, #8]
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
 800f5fe:	4a07      	ldr	r2, [pc, #28]	@ (800f61c <disk_read+0x3c>)
 800f600:	4413      	add	r3, r2
 800f602:	7a18      	ldrb	r0, [r3, #8]
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	68b9      	ldr	r1, [r7, #8]
 800f60a:	47a0      	blx	r4
 800f60c:	4603      	mov	r3, r0
 800f60e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f610:	7dfb      	ldrb	r3, [r7, #23]
}
 800f612:	4618      	mov	r0, r3
 800f614:	371c      	adds	r7, #28
 800f616:	46bd      	mov	sp, r7
 800f618:	bd90      	pop	{r4, r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20000840 	.word	0x20000840

0800f620 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f620:	b590      	push	{r4, r7, lr}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60b9      	str	r1, [r7, #8]
 800f628:	607a      	str	r2, [r7, #4]
 800f62a:	603b      	str	r3, [r7, #0]
 800f62c:	4603      	mov	r3, r0
 800f62e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f630:	7bfb      	ldrb	r3, [r7, #15]
 800f632:	4a0a      	ldr	r2, [pc, #40]	@ (800f65c <disk_write+0x3c>)
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	68dc      	ldr	r4, [r3, #12]
 800f63c:	7bfb      	ldrb	r3, [r7, #15]
 800f63e:	4a07      	ldr	r2, [pc, #28]	@ (800f65c <disk_write+0x3c>)
 800f640:	4413      	add	r3, r2
 800f642:	7a18      	ldrb	r0, [r3, #8]
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	68b9      	ldr	r1, [r7, #8]
 800f64a:	47a0      	blx	r4
 800f64c:	4603      	mov	r3, r0
 800f64e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f650:	7dfb      	ldrb	r3, [r7, #23]
}
 800f652:	4618      	mov	r0, r3
 800f654:	371c      	adds	r7, #28
 800f656:	46bd      	mov	sp, r7
 800f658:	bd90      	pop	{r4, r7, pc}
 800f65a:	bf00      	nop
 800f65c:	20000840 	.word	0x20000840

0800f660 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	4603      	mov	r3, r0
 800f668:	603a      	str	r2, [r7, #0]
 800f66a:	71fb      	strb	r3, [r7, #7]
 800f66c:	460b      	mov	r3, r1
 800f66e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f670:	79fb      	ldrb	r3, [r7, #7]
 800f672:	4a09      	ldr	r2, [pc, #36]	@ (800f698 <disk_ioctl+0x38>)
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	79fa      	ldrb	r2, [r7, #7]
 800f67e:	4906      	ldr	r1, [pc, #24]	@ (800f698 <disk_ioctl+0x38>)
 800f680:	440a      	add	r2, r1
 800f682:	7a10      	ldrb	r0, [r2, #8]
 800f684:	79b9      	ldrb	r1, [r7, #6]
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	4798      	blx	r3
 800f68a:	4603      	mov	r3, r0
 800f68c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	20000840 	.word	0x20000840

0800f69c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f6ac:	89fb      	ldrh	r3, [r7, #14]
 800f6ae:	021b      	lsls	r3, r3, #8
 800f6b0:	b21a      	sxth	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	b21b      	sxth	r3, r3
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	b21b      	sxth	r3, r3
 800f6bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f6be:	89fb      	ldrh	r3, [r7, #14]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3303      	adds	r3, #3
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	021b      	lsls	r3, r3, #8
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	3202      	adds	r2, #2
 800f6e4:	7812      	ldrb	r2, [r2, #0]
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	021b      	lsls	r3, r3, #8
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	3201      	adds	r2, #1
 800f6f2:	7812      	ldrb	r2, [r2, #0]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	021b      	lsls	r3, r3, #8
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	7812      	ldrb	r2, [r2, #0]
 800f700:	4313      	orrs	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]
	return rv;
 800f704:	68fb      	ldr	r3, [r7, #12]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f712:	b480      	push	{r7}
 800f714:	b083      	sub	sp, #12
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	460b      	mov	r3, r1
 800f71c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	887a      	ldrh	r2, [r7, #2]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	701a      	strb	r2, [r3, #0]
 800f72a:	887b      	ldrh	r3, [r7, #2]
 800f72c:	0a1b      	lsrs	r3, r3, #8
 800f72e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	1c5a      	adds	r2, r3, #1
 800f734:	607a      	str	r2, [r7, #4]
 800f736:	887a      	ldrh	r2, [r7, #2]
 800f738:	b2d2      	uxtb	r2, r2
 800f73a:	701a      	strb	r2, [r3, #0]
}
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	607a      	str	r2, [r7, #4]
 800f758:	683a      	ldr	r2, [r7, #0]
 800f75a:	b2d2      	uxtb	r2, r2
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	0a1b      	lsrs	r3, r3, #8
 800f762:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	1c5a      	adds	r2, r3, #1
 800f768:	607a      	str	r2, [r7, #4]
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	b2d2      	uxtb	r2, r2
 800f76e:	701a      	strb	r2, [r3, #0]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	0a1b      	lsrs	r3, r3, #8
 800f774:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	1c5a      	adds	r2, r3, #1
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	683a      	ldr	r2, [r7, #0]
 800f77e:	b2d2      	uxtb	r2, r2
 800f780:	701a      	strb	r2, [r3, #0]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	0a1b      	lsrs	r3, r3, #8
 800f786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	1c5a      	adds	r2, r3, #1
 800f78c:	607a      	str	r2, [r7, #4]
 800f78e:	683a      	ldr	r2, [r7, #0]
 800f790:	b2d2      	uxtb	r2, r2
 800f792:	701a      	strb	r2, [r3, #0]
}
 800f794:	bf00      	nop
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f7a0:	b480      	push	{r7}
 800f7a2:	b087      	sub	sp, #28
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00d      	beq.n	800f7d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	1c53      	adds	r3, r2, #1
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	1c59      	adds	r1, r3, #1
 800f7c4:	6179      	str	r1, [r7, #20]
 800f7c6:	7812      	ldrb	r2, [r2, #0]
 800f7c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	607b      	str	r3, [r7, #4]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d1f1      	bne.n	800f7ba <mem_cpy+0x1a>
	}
}
 800f7d6:	bf00      	nop
 800f7d8:	371c      	adds	r7, #28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f7e2:	b480      	push	{r7}
 800f7e4:	b087      	sub	sp, #28
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	60f8      	str	r0, [r7, #12]
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	1c5a      	adds	r2, r3, #1
 800f7f6:	617a      	str	r2, [r7, #20]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	b2d2      	uxtb	r2, r2
 800f7fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	3b01      	subs	r3, #1
 800f802:	607b      	str	r3, [r7, #4]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1f3      	bne.n	800f7f2 <mem_set+0x10>
}
 800f80a:	bf00      	nop
 800f80c:	bf00      	nop
 800f80e:	371c      	adds	r7, #28
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f818:	b480      	push	{r7}
 800f81a:	b089      	sub	sp, #36	@ 0x24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	61fb      	str	r3, [r7, #28]
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	61fa      	str	r2, [r7, #28]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	4619      	mov	r1, r3
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	61ba      	str	r2, [r7, #24]
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	1acb      	subs	r3, r1, r3
 800f844:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3b01      	subs	r3, #1
 800f84a:	607b      	str	r3, [r7, #4]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <mem_cmp+0x40>
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0eb      	beq.n	800f830 <mem_cmp+0x18>

	return r;
 800f858:	697b      	ldr	r3, [r7, #20]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3724      	adds	r7, #36	@ 0x24
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr

0800f866 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f866:	b480      	push	{r7}
 800f868:	b083      	sub	sp, #12
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
 800f86e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f870:	e002      	b.n	800f878 <chk_chr+0x12>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	3301      	adds	r3, #1
 800f876:	607b      	str	r3, [r7, #4]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d005      	beq.n	800f88c <chk_chr+0x26>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	461a      	mov	r2, r3
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	4293      	cmp	r3, r2
 800f88a:	d1f2      	bne.n	800f872 <chk_chr+0xc>
	return *str;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	781b      	ldrb	r3, [r3, #0]
}
 800f890:	4618      	mov	r0, r3
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	60bb      	str	r3, [r7, #8]
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	60fb      	str	r3, [r7, #12]
 800f8ae:	e029      	b.n	800f904 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f8b0:	4a27      	ldr	r2, [pc, #156]	@ (800f950 <chk_lock+0xb4>)
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	011b      	lsls	r3, r3, #4
 800f8b6:	4413      	add	r3, r2
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d01d      	beq.n	800f8fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f8be:	4a24      	ldr	r2, [pc, #144]	@ (800f950 <chk_lock+0xb4>)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	011b      	lsls	r3, r3, #4
 800f8c4:	4413      	add	r3, r2
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d116      	bne.n	800f8fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f8d0:	4a1f      	ldr	r2, [pc, #124]	@ (800f950 <chk_lock+0xb4>)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	011b      	lsls	r3, r3, #4
 800f8d6:	4413      	add	r3, r2
 800f8d8:	3304      	adds	r3, #4
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d10c      	bne.n	800f8fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f8e4:	4a1a      	ldr	r2, [pc, #104]	@ (800f950 <chk_lock+0xb4>)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	011b      	lsls	r3, r3, #4
 800f8ea:	4413      	add	r3, r2
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d102      	bne.n	800f8fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f8f8:	e007      	b.n	800f90a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	3301      	adds	r3, #1
 800f902:	60fb      	str	r3, [r7, #12]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d9d2      	bls.n	800f8b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	d109      	bne.n	800f924 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d102      	bne.n	800f91c <chk_lock+0x80>
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d101      	bne.n	800f920 <chk_lock+0x84>
 800f91c:	2300      	movs	r3, #0
 800f91e:	e010      	b.n	800f942 <chk_lock+0xa6>
 800f920:	2312      	movs	r3, #18
 800f922:	e00e      	b.n	800f942 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d108      	bne.n	800f93c <chk_lock+0xa0>
 800f92a:	4a09      	ldr	r2, [pc, #36]	@ (800f950 <chk_lock+0xb4>)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	011b      	lsls	r3, r3, #4
 800f930:	4413      	add	r3, r2
 800f932:	330c      	adds	r3, #12
 800f934:	881b      	ldrh	r3, [r3, #0]
 800f936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f93a:	d101      	bne.n	800f940 <chk_lock+0xa4>
 800f93c:	2310      	movs	r3, #16
 800f93e:	e000      	b.n	800f942 <chk_lock+0xa6>
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3714      	adds	r7, #20
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	20000820 	.word	0x20000820

0800f954 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f95a:	2300      	movs	r3, #0
 800f95c:	607b      	str	r3, [r7, #4]
 800f95e:	e002      	b.n	800f966 <enq_lock+0x12>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	3301      	adds	r3, #1
 800f964:	607b      	str	r3, [r7, #4]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d806      	bhi.n	800f97a <enq_lock+0x26>
 800f96c:	4a09      	ldr	r2, [pc, #36]	@ (800f994 <enq_lock+0x40>)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	011b      	lsls	r3, r3, #4
 800f972:	4413      	add	r3, r2
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1f2      	bne.n	800f960 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	bf14      	ite	ne
 800f980:	2301      	movne	r3, #1
 800f982:	2300      	moveq	r3, #0
 800f984:	b2db      	uxtb	r3, r3
}
 800f986:	4618      	mov	r0, r3
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	20000820 	.word	0x20000820

0800f998 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f998:	b480      	push	{r7}
 800f99a:	b085      	sub	sp, #20
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	60fb      	str	r3, [r7, #12]
 800f9a6:	e01f      	b.n	800f9e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f9a8:	4a41      	ldr	r2, [pc, #260]	@ (800fab0 <inc_lock+0x118>)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	011b      	lsls	r3, r3, #4
 800f9ae:	4413      	add	r3, r2
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d113      	bne.n	800f9e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f9ba:	4a3d      	ldr	r2, [pc, #244]	@ (800fab0 <inc_lock+0x118>)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	011b      	lsls	r3, r3, #4
 800f9c0:	4413      	add	r3, r2
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d109      	bne.n	800f9e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f9ce:	4a38      	ldr	r2, [pc, #224]	@ (800fab0 <inc_lock+0x118>)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	4413      	add	r3, r2
 800f9d6:	3308      	adds	r3, #8
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d006      	beq.n	800f9f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d9dc      	bls.n	800f9a8 <inc_lock+0x10>
 800f9ee:	e000      	b.n	800f9f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f9f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d132      	bne.n	800fa5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	e002      	b.n	800fa04 <inc_lock+0x6c>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3301      	adds	r3, #1
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d806      	bhi.n	800fa18 <inc_lock+0x80>
 800fa0a:	4a29      	ldr	r2, [pc, #164]	@ (800fab0 <inc_lock+0x118>)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	011b      	lsls	r3, r3, #4
 800fa10:	4413      	add	r3, r2
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1f2      	bne.n	800f9fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d101      	bne.n	800fa22 <inc_lock+0x8a>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e040      	b.n	800faa4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	4922      	ldr	r1, [pc, #136]	@ (800fab0 <inc_lock+0x118>)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	011b      	lsls	r3, r3, #4
 800fa2c:	440b      	add	r3, r1
 800fa2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	491e      	ldr	r1, [pc, #120]	@ (800fab0 <inc_lock+0x118>)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	011b      	lsls	r3, r3, #4
 800fa3a:	440b      	add	r3, r1
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	695a      	ldr	r2, [r3, #20]
 800fa44:	491a      	ldr	r1, [pc, #104]	@ (800fab0 <inc_lock+0x118>)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	011b      	lsls	r3, r3, #4
 800fa4a:	440b      	add	r3, r1
 800fa4c:	3308      	adds	r3, #8
 800fa4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fa50:	4a17      	ldr	r2, [pc, #92]	@ (800fab0 <inc_lock+0x118>)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	011b      	lsls	r3, r3, #4
 800fa56:	4413      	add	r3, r2
 800fa58:	330c      	adds	r3, #12
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d009      	beq.n	800fa78 <inc_lock+0xe0>
 800fa64:	4a12      	ldr	r2, [pc, #72]	@ (800fab0 <inc_lock+0x118>)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	011b      	lsls	r3, r3, #4
 800fa6a:	4413      	add	r3, r2
 800fa6c:	330c      	adds	r3, #12
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d001      	beq.n	800fa78 <inc_lock+0xe0>
 800fa74:	2300      	movs	r3, #0
 800fa76:	e015      	b.n	800faa4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d108      	bne.n	800fa90 <inc_lock+0xf8>
 800fa7e:	4a0c      	ldr	r2, [pc, #48]	@ (800fab0 <inc_lock+0x118>)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	011b      	lsls	r3, r3, #4
 800fa84:	4413      	add	r3, r2
 800fa86:	330c      	adds	r3, #12
 800fa88:	881b      	ldrh	r3, [r3, #0]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	e001      	b.n	800fa94 <inc_lock+0xfc>
 800fa90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fa94:	4906      	ldr	r1, [pc, #24]	@ (800fab0 <inc_lock+0x118>)
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	440b      	add	r3, r1
 800fa9c:	330c      	adds	r3, #12
 800fa9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	3301      	adds	r3, #1
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	20000820 	.word	0x20000820

0800fab4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	3b01      	subs	r3, #1
 800fac0:	607b      	str	r3, [r7, #4]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d825      	bhi.n	800fb14 <dec_lock+0x60>
		n = Files[i].ctr;
 800fac8:	4a17      	ldr	r2, [pc, #92]	@ (800fb28 <dec_lock+0x74>)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	011b      	lsls	r3, r3, #4
 800face:	4413      	add	r3, r2
 800fad0:	330c      	adds	r3, #12
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fad6:	89fb      	ldrh	r3, [r7, #14]
 800fad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fadc:	d101      	bne.n	800fae2 <dec_lock+0x2e>
 800fade:	2300      	movs	r3, #0
 800fae0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fae2:	89fb      	ldrh	r3, [r7, #14]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <dec_lock+0x3a>
 800fae8:	89fb      	ldrh	r3, [r7, #14]
 800faea:	3b01      	subs	r3, #1
 800faec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800faee:	4a0e      	ldr	r2, [pc, #56]	@ (800fb28 <dec_lock+0x74>)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	011b      	lsls	r3, r3, #4
 800faf4:	4413      	add	r3, r2
 800faf6:	330c      	adds	r3, #12
 800faf8:	89fa      	ldrh	r2, [r7, #14]
 800fafa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fafc:	89fb      	ldrh	r3, [r7, #14]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d105      	bne.n	800fb0e <dec_lock+0x5a>
 800fb02:	4a09      	ldr	r2, [pc, #36]	@ (800fb28 <dec_lock+0x74>)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	011b      	lsls	r3, r3, #4
 800fb08:	4413      	add	r3, r2
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	737b      	strb	r3, [r7, #13]
 800fb12:	e001      	b.n	800fb18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fb14:	2302      	movs	r3, #2
 800fb16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fb18:	7b7b      	ldrb	r3, [r7, #13]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3714      	adds	r7, #20
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	20000820 	.word	0x20000820

0800fb2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fb34:	2300      	movs	r3, #0
 800fb36:	60fb      	str	r3, [r7, #12]
 800fb38:	e010      	b.n	800fb5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fb3a:	4a0d      	ldr	r2, [pc, #52]	@ (800fb70 <clear_lock+0x44>)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	011b      	lsls	r3, r3, #4
 800fb40:	4413      	add	r3, r2
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d105      	bne.n	800fb56 <clear_lock+0x2a>
 800fb4a:	4a09      	ldr	r2, [pc, #36]	@ (800fb70 <clear_lock+0x44>)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	011b      	lsls	r3, r3, #4
 800fb50:	4413      	add	r3, r2
 800fb52:	2200      	movs	r2, #0
 800fb54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d9eb      	bls.n	800fb3a <clear_lock+0xe>
	}
}
 800fb62:	bf00      	nop
 800fb64:	bf00      	nop
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	20000820 	.word	0x20000820

0800fb74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	78db      	ldrb	r3, [r3, #3]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d034      	beq.n	800fbf2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	7858      	ldrb	r0, [r3, #1]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fb98:	2301      	movs	r3, #1
 800fb9a:	697a      	ldr	r2, [r7, #20]
 800fb9c:	f7ff fd40 	bl	800f620 <disk_write>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d002      	beq.n	800fbac <sync_window+0x38>
			res = FR_DISK_ERR;
 800fba6:	2301      	movs	r3, #1
 800fba8:	73fb      	strb	r3, [r7, #15]
 800fbaa:	e022      	b.n	800fbf2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6a1b      	ldr	r3, [r3, #32]
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	1ad2      	subs	r2, r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	699b      	ldr	r3, [r3, #24]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d217      	bcs.n	800fbf2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	789b      	ldrb	r3, [r3, #2]
 800fbc6:	613b      	str	r3, [r7, #16]
 800fbc8:	e010      	b.n	800fbec <sync_window+0x78>
					wsect += fs->fsize;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	697a      	ldr	r2, [r7, #20]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	7858      	ldrb	r0, [r3, #1]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fbde:	2301      	movs	r3, #1
 800fbe0:	697a      	ldr	r2, [r7, #20]
 800fbe2:	f7ff fd1d 	bl	800f620 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	613b      	str	r3, [r7, #16]
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d8eb      	bhi.n	800fbca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc0e:	683a      	ldr	r2, [r7, #0]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d01b      	beq.n	800fc4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f7ff ffad 	bl	800fb74 <sync_window>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fc1e:	7bfb      	ldrb	r3, [r7, #15]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d113      	bne.n	800fc4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	7858      	ldrb	r0, [r3, #1]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc2e:	2301      	movs	r3, #1
 800fc30:	683a      	ldr	r2, [r7, #0]
 800fc32:	f7ff fcd5 	bl	800f5e0 <disk_read>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d004      	beq.n	800fc46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fc42:	2301      	movs	r3, #1
 800fc44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800fc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
	...

0800fc58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff ff87 	bl	800fb74 <sync_window>
 800fc66:	4603      	mov	r3, r0
 800fc68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d158      	bne.n	800fd22 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	2b03      	cmp	r3, #3
 800fc76:	d148      	bne.n	800fd0a <sync_fs+0xb2>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	791b      	ldrb	r3, [r3, #4]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d144      	bne.n	800fd0a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	3330      	adds	r3, #48	@ 0x30
 800fc84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc88:	2100      	movs	r1, #0
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff fda9 	bl	800f7e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	3330      	adds	r3, #48	@ 0x30
 800fc94:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fc98:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff fd38 	bl	800f712 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	3330      	adds	r3, #48	@ 0x30
 800fca6:	4921      	ldr	r1, [pc, #132]	@ (800fd2c <sync_fs+0xd4>)
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff fd4d 	bl	800f748 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	3330      	adds	r3, #48	@ 0x30
 800fcb2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fcb6:	491e      	ldr	r1, [pc, #120]	@ (800fd30 <sync_fs+0xd8>)
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7ff fd45 	bl	800f748 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	3330      	adds	r3, #48	@ 0x30
 800fcc2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	4619      	mov	r1, r3
 800fccc:	4610      	mov	r0, r2
 800fcce:	f7ff fd3b 	bl	800f748 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	3330      	adds	r3, #48	@ 0x30
 800fcd6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	4619      	mov	r1, r3
 800fce0:	4610      	mov	r0, r2
 800fce2:	f7ff fd31 	bl	800f748 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	69db      	ldr	r3, [r3, #28]
 800fcea:	1c5a      	adds	r2, r3, #1
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	7858      	ldrb	r0, [r3, #1]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcfe:	2301      	movs	r3, #1
 800fd00:	f7ff fc8e 	bl	800f620 <disk_write>
			fs->fsi_flag = 0;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	785b      	ldrb	r3, [r3, #1]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	2100      	movs	r1, #0
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7ff fca4 	bl	800f660 <disk_ioctl>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d001      	beq.n	800fd22 <sync_fs+0xca>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3710      	adds	r7, #16
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	41615252 	.word	0x41615252
 800fd30:	61417272 	.word	0x61417272

0800fd34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	3b02      	subs	r3, #2
 800fd42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	3b02      	subs	r3, #2
 800fd4a:	683a      	ldr	r2, [r7, #0]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d301      	bcc.n	800fd54 <clust2sect+0x20>
 800fd50:	2300      	movs	r3, #0
 800fd52:	e008      	b.n	800fd66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	895b      	ldrh	r3, [r3, #10]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	fb03 f202 	mul.w	r2, r3, r2
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd64:	4413      	add	r3, r2
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b086      	sub	sp, #24
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
 800fd7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d904      	bls.n	800fd92 <get_fat+0x20>
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	695b      	ldr	r3, [r3, #20]
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d302      	bcc.n	800fd98 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fd92:	2301      	movs	r3, #1
 800fd94:	617b      	str	r3, [r7, #20]
 800fd96:	e08e      	b.n	800feb6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2b03      	cmp	r3, #3
 800fda4:	d061      	beq.n	800fe6a <get_fat+0xf8>
 800fda6:	2b03      	cmp	r3, #3
 800fda8:	dc7b      	bgt.n	800fea2 <get_fat+0x130>
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d002      	beq.n	800fdb4 <get_fat+0x42>
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d041      	beq.n	800fe36 <get_fat+0xc4>
 800fdb2:	e076      	b.n	800fea2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	60fb      	str	r3, [r7, #12]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	085b      	lsrs	r3, r3, #1
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	6a1a      	ldr	r2, [r3, #32]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	0a5b      	lsrs	r3, r3, #9
 800fdca:	4413      	add	r3, r2
 800fdcc:	4619      	mov	r1, r3
 800fdce:	6938      	ldr	r0, [r7, #16]
 800fdd0:	f7ff ff14 	bl	800fbfc <move_window>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d166      	bne.n	800fea8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	60fa      	str	r2, [r7, #12]
 800fde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fde4:	693a      	ldr	r2, [r7, #16]
 800fde6:	4413      	add	r3, r2
 800fde8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fdec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	6a1a      	ldr	r2, [r3, #32]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	0a5b      	lsrs	r3, r3, #9
 800fdf6:	4413      	add	r3, r2
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	6938      	ldr	r0, [r7, #16]
 800fdfc:	f7ff fefe 	bl	800fbfc <move_window>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d152      	bne.n	800feac <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	4413      	add	r3, r2
 800fe10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fe14:	021b      	lsls	r3, r3, #8
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <get_fat+0xba>
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	091b      	lsrs	r3, r3, #4
 800fe2a:	e002      	b.n	800fe32 <get_fat+0xc0>
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe32:	617b      	str	r3, [r7, #20]
			break;
 800fe34:	e03f      	b.n	800feb6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	6a1a      	ldr	r2, [r3, #32]
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	0a1b      	lsrs	r3, r3, #8
 800fe3e:	4413      	add	r3, r2
 800fe40:	4619      	mov	r1, r3
 800fe42:	6938      	ldr	r0, [r7, #16]
 800fe44:	f7ff feda 	bl	800fbfc <move_window>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d130      	bne.n	800feb0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	005b      	lsls	r3, r3, #1
 800fe58:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fe5c:	4413      	add	r3, r2
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff fc1c 	bl	800f69c <ld_word>
 800fe64:	4603      	mov	r3, r0
 800fe66:	617b      	str	r3, [r7, #20]
			break;
 800fe68:	e025      	b.n	800feb6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	6a1a      	ldr	r2, [r3, #32]
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	09db      	lsrs	r3, r3, #7
 800fe72:	4413      	add	r3, r2
 800fe74:	4619      	mov	r1, r3
 800fe76:	6938      	ldr	r0, [r7, #16]
 800fe78:	f7ff fec0 	bl	800fbfc <move_window>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d118      	bne.n	800feb4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe90:	4413      	add	r3, r2
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff fc1a 	bl	800f6cc <ld_dword>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fe9e:	617b      	str	r3, [r7, #20]
			break;
 800fea0:	e009      	b.n	800feb6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fea2:	2301      	movs	r3, #1
 800fea4:	617b      	str	r3, [r7, #20]
 800fea6:	e006      	b.n	800feb6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fea8:	bf00      	nop
 800feaa:	e004      	b.n	800feb6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800feac:	bf00      	nop
 800feae:	e002      	b.n	800feb6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800feb0:	bf00      	nop
 800feb2:	e000      	b.n	800feb6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800feb4:	bf00      	nop
		}
	}

	return val;
 800feb6:	697b      	ldr	r3, [r7, #20]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3718      	adds	r7, #24
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fec0:	b590      	push	{r4, r7, lr}
 800fec2:	b089      	sub	sp, #36	@ 0x24
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fecc:	2302      	movs	r3, #2
 800fece:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	f240 80d9 	bls.w	801008a <put_fat+0x1ca>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	695b      	ldr	r3, [r3, #20]
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	429a      	cmp	r2, r3
 800fee0:	f080 80d3 	bcs.w	801008a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	2b03      	cmp	r3, #3
 800feea:	f000 8096 	beq.w	801001a <put_fat+0x15a>
 800feee:	2b03      	cmp	r3, #3
 800fef0:	f300 80cb 	bgt.w	801008a <put_fat+0x1ca>
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d002      	beq.n	800fefe <put_fat+0x3e>
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d06e      	beq.n	800ffda <put_fat+0x11a>
 800fefc:	e0c5      	b.n	801008a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	61bb      	str	r3, [r7, #24]
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	085b      	lsrs	r3, r3, #1
 800ff06:	69ba      	ldr	r2, [r7, #24]
 800ff08:	4413      	add	r3, r2
 800ff0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6a1a      	ldr	r2, [r3, #32]
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	0a5b      	lsrs	r3, r3, #9
 800ff14:	4413      	add	r3, r2
 800ff16:	4619      	mov	r1, r3
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f7ff fe6f 	bl	800fbfc <move_window>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff22:	7ffb      	ldrb	r3, [r7, #31]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f040 80a9 	bne.w	801007c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	1c59      	adds	r1, r3, #1
 800ff34:	61b9      	str	r1, [r7, #24]
 800ff36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff3a:	4413      	add	r3, r2
 800ff3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	f003 0301 	and.w	r3, r3, #1
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d00d      	beq.n	800ff64 <put_fat+0xa4>
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	b25b      	sxtb	r3, r3
 800ff4e:	f003 030f 	and.w	r3, r3, #15
 800ff52:	b25a      	sxtb	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	b25b      	sxtb	r3, r3
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	b25b      	sxtb	r3, r3
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	e001      	b.n	800ff68 <put_fat+0xa8>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	697a      	ldr	r2, [r7, #20]
 800ff6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6a1a      	ldr	r2, [r3, #32]
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	0a5b      	lsrs	r3, r3, #9
 800ff7a:	4413      	add	r3, r2
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f7ff fe3c 	bl	800fbfc <move_window>
 800ff84:	4603      	mov	r3, r0
 800ff86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff88:	7ffb      	ldrb	r3, [r7, #31]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d178      	bne.n	8010080 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff94:	69bb      	ldr	r3, [r7, #24]
 800ff96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff9a:	4413      	add	r3, r2
 800ff9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d003      	beq.n	800ffb0 <put_fat+0xf0>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	091b      	lsrs	r3, r3, #4
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	e00e      	b.n	800ffce <put_fat+0x10e>
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	b25b      	sxtb	r3, r3
 800ffb6:	f023 030f 	bic.w	r3, r3, #15
 800ffba:	b25a      	sxtb	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	0a1b      	lsrs	r3, r3, #8
 800ffc0:	b25b      	sxtb	r3, r3
 800ffc2:	f003 030f 	and.w	r3, r3, #15
 800ffc6:	b25b      	sxtb	r3, r3
 800ffc8:	4313      	orrs	r3, r2
 800ffca:	b25b      	sxtb	r3, r3
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	697a      	ldr	r2, [r7, #20]
 800ffd0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	70da      	strb	r2, [r3, #3]
			break;
 800ffd8:	e057      	b.n	801008a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6a1a      	ldr	r2, [r3, #32]
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	0a1b      	lsrs	r3, r3, #8
 800ffe2:	4413      	add	r3, r2
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f7ff fe08 	bl	800fbfc <move_window>
 800ffec:	4603      	mov	r3, r0
 800ffee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fff0:	7ffb      	ldrb	r3, [r7, #31]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d146      	bne.n	8010084 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010004:	4413      	add	r3, r2
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	b292      	uxth	r2, r2
 801000a:	4611      	mov	r1, r2
 801000c:	4618      	mov	r0, r3
 801000e:	f7ff fb80 	bl	800f712 <st_word>
			fs->wflag = 1;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2201      	movs	r2, #1
 8010016:	70da      	strb	r2, [r3, #3]
			break;
 8010018:	e037      	b.n	801008a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	6a1a      	ldr	r2, [r3, #32]
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	09db      	lsrs	r3, r3, #7
 8010022:	4413      	add	r3, r2
 8010024:	4619      	mov	r1, r3
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f7ff fde8 	bl	800fbfc <move_window>
 801002c:	4603      	mov	r3, r0
 801002e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010030:	7ffb      	ldrb	r3, [r7, #31]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d128      	bne.n	8010088 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801004a:	4413      	add	r3, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff fb3d 	bl	800f6cc <ld_dword>
 8010052:	4603      	mov	r3, r0
 8010054:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010058:	4323      	orrs	r3, r4
 801005a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801006a:	4413      	add	r3, r2
 801006c:	6879      	ldr	r1, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fb6a 	bl	800f748 <st_dword>
			fs->wflag = 1;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2201      	movs	r2, #1
 8010078:	70da      	strb	r2, [r3, #3]
			break;
 801007a:	e006      	b.n	801008a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801007c:	bf00      	nop
 801007e:	e004      	b.n	801008a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010080:	bf00      	nop
 8010082:	e002      	b.n	801008a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010084:	bf00      	nop
 8010086:	e000      	b.n	801008a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010088:	bf00      	nop
		}
	}
	return res;
 801008a:	7ffb      	ldrb	r3, [r7, #31]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3724      	adds	r7, #36	@ 0x24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd90      	pop	{r4, r7, pc}

08010094 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80100a0:	2300      	movs	r3, #0
 80100a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d904      	bls.n	80100ba <remove_chain+0x26>
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	695b      	ldr	r3, [r3, #20]
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d301      	bcc.n	80100be <remove_chain+0x2a>
 80100ba:	2302      	movs	r3, #2
 80100bc:	e04b      	b.n	8010156 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00c      	beq.n	80100de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80100c4:	f04f 32ff 	mov.w	r2, #4294967295
 80100c8:	6879      	ldr	r1, [r7, #4]
 80100ca:	69b8      	ldr	r0, [r7, #24]
 80100cc:	f7ff fef8 	bl	800fec0 <put_fat>
 80100d0:	4603      	mov	r3, r0
 80100d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80100d4:	7ffb      	ldrb	r3, [r7, #31]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <remove_chain+0x4a>
 80100da:	7ffb      	ldrb	r3, [r7, #31]
 80100dc:	e03b      	b.n	8010156 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80100de:	68b9      	ldr	r1, [r7, #8]
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f7ff fe46 	bl	800fd72 <get_fat>
 80100e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d031      	beq.n	8010152 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d101      	bne.n	80100f8 <remove_chain+0x64>
 80100f4:	2302      	movs	r3, #2
 80100f6:	e02e      	b.n	8010156 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fe:	d101      	bne.n	8010104 <remove_chain+0x70>
 8010100:	2301      	movs	r3, #1
 8010102:	e028      	b.n	8010156 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010104:	2200      	movs	r2, #0
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	69b8      	ldr	r0, [r7, #24]
 801010a:	f7ff fed9 	bl	800fec0 <put_fat>
 801010e:	4603      	mov	r3, r0
 8010110:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010112:	7ffb      	ldrb	r3, [r7, #31]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d001      	beq.n	801011c <remove_chain+0x88>
 8010118:	7ffb      	ldrb	r3, [r7, #31]
 801011a:	e01c      	b.n	8010156 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	691a      	ldr	r2, [r3, #16]
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	695b      	ldr	r3, [r3, #20]
 8010124:	3b02      	subs	r3, #2
 8010126:	429a      	cmp	r2, r3
 8010128:	d20b      	bcs.n	8010142 <remove_chain+0xae>
			fs->free_clst++;
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	791b      	ldrb	r3, [r3, #4]
 8010138:	f043 0301 	orr.w	r3, r3, #1
 801013c:	b2da      	uxtb	r2, r3
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	695b      	ldr	r3, [r3, #20]
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	429a      	cmp	r2, r3
 801014e:	d3c6      	bcc.n	80100de <remove_chain+0x4a>
 8010150:	e000      	b.n	8010154 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010152:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3720      	adds	r7, #32
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b088      	sub	sp, #32
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
 8010166:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10d      	bne.n	8010190 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d004      	beq.n	801018a <create_chain+0x2c>
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	695b      	ldr	r3, [r3, #20]
 8010184:	69ba      	ldr	r2, [r7, #24]
 8010186:	429a      	cmp	r2, r3
 8010188:	d31b      	bcc.n	80101c2 <create_chain+0x64>
 801018a:	2301      	movs	r3, #1
 801018c:	61bb      	str	r3, [r7, #24]
 801018e:	e018      	b.n	80101c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010190:	6839      	ldr	r1, [r7, #0]
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7ff fded 	bl	800fd72 <get_fat>
 8010198:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d801      	bhi.n	80101a4 <create_chain+0x46>
 80101a0:	2301      	movs	r3, #1
 80101a2:	e070      	b.n	8010286 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101aa:	d101      	bne.n	80101b0 <create_chain+0x52>
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	e06a      	b.n	8010286 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d201      	bcs.n	80101be <create_chain+0x60>
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	e063      	b.n	8010286 <create_chain+0x128>
		scl = clst;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	3301      	adds	r3, #1
 80101ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	695b      	ldr	r3, [r3, #20]
 80101d0:	69fa      	ldr	r2, [r7, #28]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d307      	bcc.n	80101e6 <create_chain+0x88>
				ncl = 2;
 80101d6:	2302      	movs	r3, #2
 80101d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80101da:	69fa      	ldr	r2, [r7, #28]
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d901      	bls.n	80101e6 <create_chain+0x88>
 80101e2:	2300      	movs	r3, #0
 80101e4:	e04f      	b.n	8010286 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80101e6:	69f9      	ldr	r1, [r7, #28]
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7ff fdc2 	bl	800fd72 <get_fat>
 80101ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00e      	beq.n	8010214 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d003      	beq.n	8010204 <create_chain+0xa6>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010202:	d101      	bne.n	8010208 <create_chain+0xaa>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	e03e      	b.n	8010286 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010208:	69fa      	ldr	r2, [r7, #28]
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	429a      	cmp	r2, r3
 801020e:	d1da      	bne.n	80101c6 <create_chain+0x68>
 8010210:	2300      	movs	r3, #0
 8010212:	e038      	b.n	8010286 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010214:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010216:	f04f 32ff 	mov.w	r2, #4294967295
 801021a:	69f9      	ldr	r1, [r7, #28]
 801021c:	6938      	ldr	r0, [r7, #16]
 801021e:	f7ff fe4f 	bl	800fec0 <put_fat>
 8010222:	4603      	mov	r3, r0
 8010224:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010226:	7dfb      	ldrb	r3, [r7, #23]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d109      	bne.n	8010240 <create_chain+0xe2>
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d006      	beq.n	8010240 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010232:	69fa      	ldr	r2, [r7, #28]
 8010234:	6839      	ldr	r1, [r7, #0]
 8010236:	6938      	ldr	r0, [r7, #16]
 8010238:	f7ff fe42 	bl	800fec0 <put_fat>
 801023c:	4603      	mov	r3, r0
 801023e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010240:	7dfb      	ldrb	r3, [r7, #23]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d116      	bne.n	8010274 <create_chain+0x116>
		fs->last_clst = ncl;
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	69fa      	ldr	r2, [r7, #28]
 801024a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	691a      	ldr	r2, [r3, #16]
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	695b      	ldr	r3, [r3, #20]
 8010254:	3b02      	subs	r3, #2
 8010256:	429a      	cmp	r2, r3
 8010258:	d804      	bhi.n	8010264 <create_chain+0x106>
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	1e5a      	subs	r2, r3, #1
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	791b      	ldrb	r3, [r3, #4]
 8010268:	f043 0301 	orr.w	r3, r3, #1
 801026c:	b2da      	uxtb	r2, r3
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	711a      	strb	r2, [r3, #4]
 8010272:	e007      	b.n	8010284 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d102      	bne.n	8010280 <create_chain+0x122>
 801027a:	f04f 33ff 	mov.w	r3, #4294967295
 801027e:	e000      	b.n	8010282 <create_chain+0x124>
 8010280:	2301      	movs	r3, #1
 8010282:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010284:	69fb      	ldr	r3, [r7, #28]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3720      	adds	r7, #32
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801028e:	b480      	push	{r7}
 8010290:	b087      	sub	sp, #28
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a2:	3304      	adds	r3, #4
 80102a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	0a5b      	lsrs	r3, r3, #9
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	8952      	ldrh	r2, [r2, #10]
 80102ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80102b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	1d1a      	adds	r2, r3, #4
 80102b8:	613a      	str	r2, [r7, #16]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d101      	bne.n	80102c8 <clmt_clust+0x3a>
 80102c4:	2300      	movs	r3, #0
 80102c6:	e010      	b.n	80102ea <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d307      	bcc.n	80102e0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80102d0:	697a      	ldr	r2, [r7, #20]
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	3304      	adds	r3, #4
 80102dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80102de:	e7e9      	b.n	80102b4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80102e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	4413      	add	r3, r2
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	371c      	adds	r7, #28
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr

080102f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b086      	sub	sp, #24
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
 80102fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801030c:	d204      	bcs.n	8010318 <dir_sdi+0x22>
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	f003 031f 	and.w	r3, r3, #31
 8010314:	2b00      	cmp	r3, #0
 8010316:	d001      	beq.n	801031c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010318:	2302      	movs	r3, #2
 801031a:	e063      	b.n	80103e4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d106      	bne.n	801033c <dir_sdi+0x46>
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	2b02      	cmp	r3, #2
 8010334:	d902      	bls.n	801033c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801033a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d10c      	bne.n	801035c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	095b      	lsrs	r3, r3, #5
 8010346:	693a      	ldr	r2, [r7, #16]
 8010348:	8912      	ldrh	r2, [r2, #8]
 801034a:	4293      	cmp	r3, r2
 801034c:	d301      	bcc.n	8010352 <dir_sdi+0x5c>
 801034e:	2302      	movs	r3, #2
 8010350:	e048      	b.n	80103e4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	61da      	str	r2, [r3, #28]
 801035a:	e029      	b.n	80103b0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	895b      	ldrh	r3, [r3, #10]
 8010360:	025b      	lsls	r3, r3, #9
 8010362:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010364:	e019      	b.n	801039a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6979      	ldr	r1, [r7, #20]
 801036a:	4618      	mov	r0, r3
 801036c:	f7ff fd01 	bl	800fd72 <get_fat>
 8010370:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010378:	d101      	bne.n	801037e <dir_sdi+0x88>
 801037a:	2301      	movs	r3, #1
 801037c:	e032      	b.n	80103e4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d904      	bls.n	801038e <dir_sdi+0x98>
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	695b      	ldr	r3, [r3, #20]
 8010388:	697a      	ldr	r2, [r7, #20]
 801038a:	429a      	cmp	r2, r3
 801038c:	d301      	bcc.n	8010392 <dir_sdi+0x9c>
 801038e:	2302      	movs	r3, #2
 8010390:	e028      	b.n	80103e4 <dir_sdi+0xee>
			ofs -= csz;
 8010392:	683a      	ldr	r2, [r7, #0]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d2e1      	bcs.n	8010366 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80103a2:	6979      	ldr	r1, [r7, #20]
 80103a4:	6938      	ldr	r0, [r7, #16]
 80103a6:	f7ff fcc5 	bl	800fd34 <clust2sect>
 80103aa:	4602      	mov	r2, r0
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	69db      	ldr	r3, [r3, #28]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d101      	bne.n	80103c2 <dir_sdi+0xcc>
 80103be:	2302      	movs	r3, #2
 80103c0:	e010      	b.n	80103e4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	69da      	ldr	r2, [r3, #28]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	0a5b      	lsrs	r3, r3, #9
 80103ca:	441a      	add	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103dc:	441a      	add	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	695b      	ldr	r3, [r3, #20]
 8010400:	3320      	adds	r3, #32
 8010402:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	69db      	ldr	r3, [r3, #28]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <dir_next+0x28>
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010412:	d301      	bcc.n	8010418 <dir_next+0x2c>
 8010414:	2304      	movs	r3, #4
 8010416:	e0aa      	b.n	801056e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801041e:	2b00      	cmp	r3, #0
 8010420:	f040 8098 	bne.w	8010554 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	69db      	ldr	r3, [r3, #28]
 8010428:	1c5a      	adds	r2, r3, #1
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d10b      	bne.n	801044e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	095b      	lsrs	r3, r3, #5
 801043a:	68fa      	ldr	r2, [r7, #12]
 801043c:	8912      	ldrh	r2, [r2, #8]
 801043e:	4293      	cmp	r3, r2
 8010440:	f0c0 8088 	bcc.w	8010554 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	61da      	str	r2, [r3, #28]
 801044a:	2304      	movs	r3, #4
 801044c:	e08f      	b.n	801056e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	0a5b      	lsrs	r3, r3, #9
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	8952      	ldrh	r2, [r2, #10]
 8010456:	3a01      	subs	r2, #1
 8010458:	4013      	ands	r3, r2
 801045a:	2b00      	cmp	r3, #0
 801045c:	d17a      	bne.n	8010554 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	4619      	mov	r1, r3
 8010466:	4610      	mov	r0, r2
 8010468:	f7ff fc83 	bl	800fd72 <get_fat>
 801046c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d801      	bhi.n	8010478 <dir_next+0x8c>
 8010474:	2302      	movs	r3, #2
 8010476:	e07a      	b.n	801056e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801047e:	d101      	bne.n	8010484 <dir_next+0x98>
 8010480:	2301      	movs	r3, #1
 8010482:	e074      	b.n	801056e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	695b      	ldr	r3, [r3, #20]
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	429a      	cmp	r2, r3
 801048c:	d358      	bcc.n	8010540 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d104      	bne.n	801049e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	61da      	str	r2, [r3, #28]
 801049a:	2304      	movs	r3, #4
 801049c:	e067      	b.n	801056e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	699b      	ldr	r3, [r3, #24]
 80104a4:	4619      	mov	r1, r3
 80104a6:	4610      	mov	r0, r2
 80104a8:	f7ff fe59 	bl	801015e <create_chain>
 80104ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d101      	bne.n	80104b8 <dir_next+0xcc>
 80104b4:	2307      	movs	r3, #7
 80104b6:	e05a      	b.n	801056e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d101      	bne.n	80104c2 <dir_next+0xd6>
 80104be:	2302      	movs	r3, #2
 80104c0:	e055      	b.n	801056e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c8:	d101      	bne.n	80104ce <dir_next+0xe2>
 80104ca:	2301      	movs	r3, #1
 80104cc:	e04f      	b.n	801056e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f7ff fb50 	bl	800fb74 <sync_window>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <dir_next+0xf2>
 80104da:	2301      	movs	r3, #1
 80104dc:	e047      	b.n	801056e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3330      	adds	r3, #48	@ 0x30
 80104e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104e6:	2100      	movs	r1, #0
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff f97a 	bl	800f7e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80104ee:	2300      	movs	r3, #0
 80104f0:	613b      	str	r3, [r7, #16]
 80104f2:	6979      	ldr	r1, [r7, #20]
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7ff fc1d 	bl	800fd34 <clust2sect>
 80104fa:	4602      	mov	r2, r0
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010500:	e012      	b.n	8010528 <dir_next+0x13c>
						fs->wflag = 1;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2201      	movs	r2, #1
 8010506:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f7ff fb33 	bl	800fb74 <sync_window>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d001      	beq.n	8010518 <dir_next+0x12c>
 8010514:	2301      	movs	r3, #1
 8010516:	e02a      	b.n	801056e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	3301      	adds	r3, #1
 801051c:	613b      	str	r3, [r7, #16]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010522:	1c5a      	adds	r2, r3, #1
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	895b      	ldrh	r3, [r3, #10]
 801052c:	461a      	mov	r2, r3
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	4293      	cmp	r3, r2
 8010532:	d3e6      	bcc.n	8010502 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	1ad2      	subs	r2, r2, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010546:	6979      	ldr	r1, [r7, #20]
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	f7ff fbf3 	bl	800fd34 <clust2sect>
 801054e:	4602      	mov	r2, r0
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	68ba      	ldr	r2, [r7, #8]
 8010558:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010566:	441a      	add	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3718      	adds	r7, #24
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b086      	sub	sp, #24
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010586:	2100      	movs	r1, #0
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7ff feb4 	bl	80102f6 <dir_sdi>
 801058e:	4603      	mov	r3, r0
 8010590:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d12b      	bne.n	80105f0 <dir_alloc+0x7a>
		n = 0;
 8010598:	2300      	movs	r3, #0
 801059a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	69db      	ldr	r3, [r3, #28]
 80105a0:	4619      	mov	r1, r3
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f7ff fb2a 	bl	800fbfc <move_window>
 80105a8:	4603      	mov	r3, r0
 80105aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80105ac:	7dfb      	ldrb	r3, [r7, #23]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d11d      	bne.n	80105ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a1b      	ldr	r3, [r3, #32]
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2be5      	cmp	r3, #229	@ 0xe5
 80105ba:	d004      	beq.n	80105c6 <dir_alloc+0x50>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a1b      	ldr	r3, [r3, #32]
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d107      	bne.n	80105d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	3301      	adds	r3, #1
 80105ca:	613b      	str	r3, [r7, #16]
 80105cc:	693a      	ldr	r2, [r7, #16]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d102      	bne.n	80105da <dir_alloc+0x64>
 80105d4:	e00c      	b.n	80105f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80105d6:	2300      	movs	r3, #0
 80105d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80105da:	2101      	movs	r1, #1
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff ff05 	bl	80103ec <dir_next>
 80105e2:	4603      	mov	r3, r0
 80105e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80105e6:	7dfb      	ldrb	r3, [r7, #23]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d0d7      	beq.n	801059c <dir_alloc+0x26>
 80105ec:	e000      	b.n	80105f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80105ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80105f0:	7dfb      	ldrb	r3, [r7, #23]
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d101      	bne.n	80105fa <dir_alloc+0x84>
 80105f6:	2307      	movs	r3, #7
 80105f8:	75fb      	strb	r3, [r7, #23]
	return res;
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3718      	adds	r7, #24
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	331a      	adds	r3, #26
 8010612:	4618      	mov	r0, r3
 8010614:	f7ff f842 	bl	800f69c <ld_word>
 8010618:	4603      	mov	r3, r0
 801061a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	2b03      	cmp	r3, #3
 8010622:	d109      	bne.n	8010638 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	3314      	adds	r3, #20
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff f837 	bl	800f69c <ld_word>
 801062e:	4603      	mov	r3, r0
 8010630:	041b      	lsls	r3, r3, #16
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	4313      	orrs	r3, r2
 8010636:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010638:	68fb      	ldr	r3, [r7, #12]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b084      	sub	sp, #16
 8010646:	af00      	add	r7, sp, #0
 8010648:	60f8      	str	r0, [r7, #12]
 801064a:	60b9      	str	r1, [r7, #8]
 801064c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	331a      	adds	r3, #26
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	b292      	uxth	r2, r2
 8010656:	4611      	mov	r1, r2
 8010658:	4618      	mov	r0, r3
 801065a:	f7ff f85a 	bl	800f712 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	2b03      	cmp	r3, #3
 8010664:	d109      	bne.n	801067a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	f103 0214 	add.w	r2, r3, #20
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	0c1b      	lsrs	r3, r3, #16
 8010670:	b29b      	uxth	r3, r3
 8010672:	4619      	mov	r1, r3
 8010674:	4610      	mov	r0, r2
 8010676:	f7ff f84c 	bl	800f712 <st_word>
	}
}
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b086      	sub	sp, #24
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801068c:	2304      	movs	r3, #4
 801068e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010696:	e03c      	b.n	8010712 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	69db      	ldr	r3, [r3, #28]
 801069c:	4619      	mov	r1, r3
 801069e:	6938      	ldr	r0, [r7, #16]
 80106a0:	f7ff faac 	bl	800fbfc <move_window>
 80106a4:	4603      	mov	r3, r0
 80106a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80106a8:	7dfb      	ldrb	r3, [r7, #23]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d136      	bne.n	801071c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6a1b      	ldr	r3, [r3, #32]
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d102      	bne.n	80106c2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80106bc:	2304      	movs	r3, #4
 80106be:	75fb      	strb	r3, [r7, #23]
 80106c0:	e031      	b.n	8010726 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6a1b      	ldr	r3, [r3, #32]
 80106c6:	330b      	adds	r3, #11
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106ce:	73bb      	strb	r3, [r7, #14]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	7bba      	ldrb	r2, [r7, #14]
 80106d4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	2be5      	cmp	r3, #229	@ 0xe5
 80106da:	d011      	beq.n	8010700 <dir_read+0x7e>
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
 80106de:	2b2e      	cmp	r3, #46	@ 0x2e
 80106e0:	d00e      	beq.n	8010700 <dir_read+0x7e>
 80106e2:	7bbb      	ldrb	r3, [r7, #14]
 80106e4:	2b0f      	cmp	r3, #15
 80106e6:	d00b      	beq.n	8010700 <dir_read+0x7e>
 80106e8:	7bbb      	ldrb	r3, [r7, #14]
 80106ea:	f023 0320 	bic.w	r3, r3, #32
 80106ee:	2b08      	cmp	r3, #8
 80106f0:	bf0c      	ite	eq
 80106f2:	2301      	moveq	r3, #1
 80106f4:	2300      	movne	r3, #0
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	461a      	mov	r2, r3
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d00f      	beq.n	8010720 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010700:	2100      	movs	r1, #0
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff fe72 	bl	80103ec <dir_next>
 8010708:	4603      	mov	r3, r0
 801070a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801070c:	7dfb      	ldrb	r3, [r7, #23]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d108      	bne.n	8010724 <dir_read+0xa2>
	while (dp->sect) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	69db      	ldr	r3, [r3, #28]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1be      	bne.n	8010698 <dir_read+0x16>
 801071a:	e004      	b.n	8010726 <dir_read+0xa4>
		if (res != FR_OK) break;
 801071c:	bf00      	nop
 801071e:	e002      	b.n	8010726 <dir_read+0xa4>
				break;
 8010720:	bf00      	nop
 8010722:	e000      	b.n	8010726 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010724:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010726:	7dfb      	ldrb	r3, [r7, #23]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <dir_read+0xb0>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	61da      	str	r2, [r3, #28]
	return res;
 8010732:	7dfb      	ldrb	r3, [r7, #23]
}
 8010734:	4618      	mov	r0, r3
 8010736:	3718      	adds	r7, #24
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b086      	sub	sp, #24
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801074a:	2100      	movs	r1, #0
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff fdd2 	bl	80102f6 <dir_sdi>
 8010752:	4603      	mov	r3, r0
 8010754:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010756:	7dfb      	ldrb	r3, [r7, #23]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d001      	beq.n	8010760 <dir_find+0x24>
 801075c:	7dfb      	ldrb	r3, [r7, #23]
 801075e:	e03e      	b.n	80107de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	69db      	ldr	r3, [r3, #28]
 8010764:	4619      	mov	r1, r3
 8010766:	6938      	ldr	r0, [r7, #16]
 8010768:	f7ff fa48 	bl	800fbfc <move_window>
 801076c:	4603      	mov	r3, r0
 801076e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010770:	7dfb      	ldrb	r3, [r7, #23]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d12f      	bne.n	80107d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6a1b      	ldr	r3, [r3, #32]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801077e:	7bfb      	ldrb	r3, [r7, #15]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d102      	bne.n	801078a <dir_find+0x4e>
 8010784:	2304      	movs	r3, #4
 8010786:	75fb      	strb	r3, [r7, #23]
 8010788:	e028      	b.n	80107dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a1b      	ldr	r3, [r3, #32]
 801078e:	330b      	adds	r3, #11
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010796:	b2da      	uxtb	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	330b      	adds	r3, #11
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	f003 0308 	and.w	r3, r3, #8
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d10a      	bne.n	80107c2 <dir_find+0x86>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6a18      	ldr	r0, [r3, #32]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3324      	adds	r3, #36	@ 0x24
 80107b4:	220b      	movs	r2, #11
 80107b6:	4619      	mov	r1, r3
 80107b8:	f7ff f82e 	bl	800f818 <mem_cmp>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d00b      	beq.n	80107da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80107c2:	2100      	movs	r1, #0
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7ff fe11 	bl	80103ec <dir_next>
 80107ca:	4603      	mov	r3, r0
 80107cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80107ce:	7dfb      	ldrb	r3, [r7, #23]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d0c5      	beq.n	8010760 <dir_find+0x24>
 80107d4:	e002      	b.n	80107dc <dir_find+0xa0>
		if (res != FR_OK) break;
 80107d6:	bf00      	nop
 80107d8:	e000      	b.n	80107dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80107da:	bf00      	nop

	return res;
 80107dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3718      	adds	r7, #24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b084      	sub	sp, #16
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80107f4:	2101      	movs	r1, #1
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7ff febd 	bl	8010576 <dir_alloc>
 80107fc:	4603      	mov	r3, r0
 80107fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010800:	7bfb      	ldrb	r3, [r7, #15]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d11c      	bne.n	8010840 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	69db      	ldr	r3, [r3, #28]
 801080a:	4619      	mov	r1, r3
 801080c:	68b8      	ldr	r0, [r7, #8]
 801080e:	f7ff f9f5 	bl	800fbfc <move_window>
 8010812:	4603      	mov	r3, r0
 8010814:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010816:	7bfb      	ldrb	r3, [r7, #15]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d111      	bne.n	8010840 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6a1b      	ldr	r3, [r3, #32]
 8010820:	2220      	movs	r2, #32
 8010822:	2100      	movs	r1, #0
 8010824:	4618      	mov	r0, r3
 8010826:	f7fe ffdc 	bl	800f7e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a18      	ldr	r0, [r3, #32]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	3324      	adds	r3, #36	@ 0x24
 8010832:	220b      	movs	r2, #11
 8010834:	4619      	mov	r1, r3
 8010836:	f7fe ffb3 	bl	800f7a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2201      	movs	r2, #1
 801083e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010840:	7bfb      	ldrb	r3, [r7, #15]
}
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b084      	sub	sp, #16
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	4619      	mov	r1, r3
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7ff f9cc 	bl	800fbfc <move_window>
 8010864:	4603      	mov	r3, r0
 8010866:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6a1b      	ldr	r3, [r3, #32]
 8010872:	22e5      	movs	r2, #229	@ 0xe5
 8010874:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2201      	movs	r2, #1
 801087a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801087c:	7afb      	ldrb	r3, [r7, #11]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b086      	sub	sp, #24
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2200      	movs	r2, #0
 8010894:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	69db      	ldr	r3, [r3, #28]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d04f      	beq.n	801093e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801089e:	2300      	movs	r3, #0
 80108a0:	613b      	str	r3, [r7, #16]
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80108a6:	e022      	b.n	80108ee <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a1a      	ldr	r2, [r3, #32]
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	1c59      	adds	r1, r3, #1
 80108b0:	6179      	str	r1, [r7, #20]
 80108b2:	4413      	add	r3, r2
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80108b8:	7bfb      	ldrb	r3, [r7, #15]
 80108ba:	2b20      	cmp	r3, #32
 80108bc:	d016      	beq.n	80108ec <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	2b05      	cmp	r3, #5
 80108c2:	d101      	bne.n	80108c8 <get_fileinfo+0x42>
 80108c4:	23e5      	movs	r3, #229	@ 0xe5
 80108c6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	2b09      	cmp	r3, #9
 80108cc:	d106      	bne.n	80108dc <get_fileinfo+0x56>
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	613a      	str	r2, [r7, #16]
 80108d4:	683a      	ldr	r2, [r7, #0]
 80108d6:	4413      	add	r3, r2
 80108d8:	222e      	movs	r2, #46	@ 0x2e
 80108da:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	613a      	str	r2, [r7, #16]
 80108e2:	683a      	ldr	r2, [r7, #0]
 80108e4:	4413      	add	r3, r2
 80108e6:	7bfa      	ldrb	r2, [r7, #15]
 80108e8:	725a      	strb	r2, [r3, #9]
 80108ea:	e000      	b.n	80108ee <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80108ec:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	2b0a      	cmp	r3, #10
 80108f2:	d9d9      	bls.n	80108a8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	4413      	add	r3, r2
 80108fa:	3309      	adds	r3, #9
 80108fc:	2200      	movs	r2, #0
 80108fe:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a1b      	ldr	r3, [r3, #32]
 8010904:	7ada      	ldrb	r2, [r3, #11]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6a1b      	ldr	r3, [r3, #32]
 801090e:	331c      	adds	r3, #28
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe fedb 	bl	800f6cc <ld_dword>
 8010916:	4602      	mov	r2, r0
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6a1b      	ldr	r3, [r3, #32]
 8010920:	3316      	adds	r3, #22
 8010922:	4618      	mov	r0, r3
 8010924:	f7fe fed2 	bl	800f6cc <ld_dword>
 8010928:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	b29a      	uxth	r2, r3
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	80da      	strh	r2, [r3, #6]
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	0c1b      	lsrs	r3, r3, #16
 8010936:	b29a      	uxth	r2, r3
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	809a      	strh	r2, [r3, #4]
 801093c:	e000      	b.n	8010940 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801093e:	bf00      	nop
}
 8010940:	3718      	adds	r7, #24
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
	...

08010948 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b088      	sub	sp, #32
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	60fb      	str	r3, [r7, #12]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3324      	adds	r3, #36	@ 0x24
 801095c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801095e:	220b      	movs	r2, #11
 8010960:	2120      	movs	r1, #32
 8010962:	68b8      	ldr	r0, [r7, #8]
 8010964:	f7fe ff3d 	bl	800f7e2 <mem_set>
	si = i = 0; ni = 8;
 8010968:	2300      	movs	r3, #0
 801096a:	613b      	str	r3, [r7, #16]
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	61fb      	str	r3, [r7, #28]
 8010970:	2308      	movs	r3, #8
 8010972:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	1c5a      	adds	r2, r3, #1
 8010978:	61fa      	str	r2, [r7, #28]
 801097a:	68fa      	ldr	r2, [r7, #12]
 801097c:	4413      	add	r3, r2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010982:	7efb      	ldrb	r3, [r7, #27]
 8010984:	2b20      	cmp	r3, #32
 8010986:	d94e      	bls.n	8010a26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010988:	7efb      	ldrb	r3, [r7, #27]
 801098a:	2b2f      	cmp	r3, #47	@ 0x2f
 801098c:	d006      	beq.n	801099c <create_name+0x54>
 801098e:	7efb      	ldrb	r3, [r7, #27]
 8010990:	2b5c      	cmp	r3, #92	@ 0x5c
 8010992:	d110      	bne.n	80109b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010994:	e002      	b.n	801099c <create_name+0x54>
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	3301      	adds	r3, #1
 801099a:	61fb      	str	r3, [r7, #28]
 801099c:	68fa      	ldr	r2, [r7, #12]
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	4413      	add	r3, r2
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80109a6:	d0f6      	beq.n	8010996 <create_name+0x4e>
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	4413      	add	r3, r2
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80109b2:	d0f0      	beq.n	8010996 <create_name+0x4e>
			break;
 80109b4:	e038      	b.n	8010a28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80109b6:	7efb      	ldrb	r3, [r7, #27]
 80109b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80109ba:	d003      	beq.n	80109c4 <create_name+0x7c>
 80109bc:	693a      	ldr	r2, [r7, #16]
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d30c      	bcc.n	80109de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	2b0b      	cmp	r3, #11
 80109c8:	d002      	beq.n	80109d0 <create_name+0x88>
 80109ca:	7efb      	ldrb	r3, [r7, #27]
 80109cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80109ce:	d001      	beq.n	80109d4 <create_name+0x8c>
 80109d0:	2306      	movs	r3, #6
 80109d2:	e044      	b.n	8010a5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80109d4:	2308      	movs	r3, #8
 80109d6:	613b      	str	r3, [r7, #16]
 80109d8:	230b      	movs	r3, #11
 80109da:	617b      	str	r3, [r7, #20]
			continue;
 80109dc:	e022      	b.n	8010a24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80109de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	da04      	bge.n	80109f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80109e6:	7efb      	ldrb	r3, [r7, #27]
 80109e8:	3b80      	subs	r3, #128	@ 0x80
 80109ea:	4a1f      	ldr	r2, [pc, #124]	@ (8010a68 <create_name+0x120>)
 80109ec:	5cd3      	ldrb	r3, [r2, r3]
 80109ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80109f0:	7efb      	ldrb	r3, [r7, #27]
 80109f2:	4619      	mov	r1, r3
 80109f4:	481d      	ldr	r0, [pc, #116]	@ (8010a6c <create_name+0x124>)
 80109f6:	f7fe ff36 	bl	800f866 <chk_chr>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d001      	beq.n	8010a04 <create_name+0xbc>
 8010a00:	2306      	movs	r3, #6
 8010a02:	e02c      	b.n	8010a5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010a04:	7efb      	ldrb	r3, [r7, #27]
 8010a06:	2b60      	cmp	r3, #96	@ 0x60
 8010a08:	d905      	bls.n	8010a16 <create_name+0xce>
 8010a0a:	7efb      	ldrb	r3, [r7, #27]
 8010a0c:	2b7a      	cmp	r3, #122	@ 0x7a
 8010a0e:	d802      	bhi.n	8010a16 <create_name+0xce>
 8010a10:	7efb      	ldrb	r3, [r7, #27]
 8010a12:	3b20      	subs	r3, #32
 8010a14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	1c5a      	adds	r2, r3, #1
 8010a1a:	613a      	str	r2, [r7, #16]
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	4413      	add	r3, r2
 8010a20:	7efa      	ldrb	r2, [r7, #27]
 8010a22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010a24:	e7a6      	b.n	8010974 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010a26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	441a      	add	r2, r3
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d101      	bne.n	8010a3c <create_name+0xf4>
 8010a38:	2306      	movs	r3, #6
 8010a3a:	e010      	b.n	8010a5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	2be5      	cmp	r3, #229	@ 0xe5
 8010a42:	d102      	bne.n	8010a4a <create_name+0x102>
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2205      	movs	r2, #5
 8010a48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010a4a:	7efb      	ldrb	r3, [r7, #27]
 8010a4c:	2b20      	cmp	r3, #32
 8010a4e:	d801      	bhi.n	8010a54 <create_name+0x10c>
 8010a50:	2204      	movs	r2, #4
 8010a52:	e000      	b.n	8010a56 <create_name+0x10e>
 8010a54:	2200      	movs	r2, #0
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	330b      	adds	r3, #11
 8010a5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010a5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3720      	adds	r7, #32
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	08013e44 	.word	0x08013e44
 8010a6c:	08013dac 	.word	0x08013dac

08010a70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010a84:	e002      	b.n	8010a8c <follow_path+0x1c>
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	603b      	str	r3, [r7, #0]
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a92:	d0f8      	beq.n	8010a86 <follow_path+0x16>
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a9a:	d0f4      	beq.n	8010a86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	2b1f      	cmp	r3, #31
 8010aa8:	d80a      	bhi.n	8010ac0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2280      	movs	r2, #128	@ 0x80
 8010aae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7ff fc1e 	bl	80102f6 <dir_sdi>
 8010aba:	4603      	mov	r3, r0
 8010abc:	75fb      	strb	r3, [r7, #23]
 8010abe:	e043      	b.n	8010b48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ac0:	463b      	mov	r3, r7
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f7ff ff3f 	bl	8010948 <create_name>
 8010aca:	4603      	mov	r3, r0
 8010acc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d134      	bne.n	8010b3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fe31 	bl	801073c <dir_find>
 8010ada:	4603      	mov	r3, r0
 8010adc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010ae4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010ae6:	7dfb      	ldrb	r3, [r7, #23]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00a      	beq.n	8010b02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010aec:	7dfb      	ldrb	r3, [r7, #23]
 8010aee:	2b04      	cmp	r3, #4
 8010af0:	d127      	bne.n	8010b42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010af2:	7afb      	ldrb	r3, [r7, #11]
 8010af4:	f003 0304 	and.w	r3, r3, #4
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d122      	bne.n	8010b42 <follow_path+0xd2>
 8010afc:	2305      	movs	r3, #5
 8010afe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010b00:	e01f      	b.n	8010b42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b02:	7afb      	ldrb	r3, [r7, #11]
 8010b04:	f003 0304 	and.w	r3, r3, #4
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d11c      	bne.n	8010b46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	799b      	ldrb	r3, [r3, #6]
 8010b10:	f003 0310 	and.w	r3, r3, #16
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d102      	bne.n	8010b1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010b18:	2305      	movs	r3, #5
 8010b1a:	75fb      	strb	r3, [r7, #23]
 8010b1c:	e014      	b.n	8010b48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	695b      	ldr	r3, [r3, #20]
 8010b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b2c:	4413      	add	r3, r2
 8010b2e:	4619      	mov	r1, r3
 8010b30:	68f8      	ldr	r0, [r7, #12]
 8010b32:	f7ff fd67 	bl	8010604 <ld_clust>
 8010b36:	4602      	mov	r2, r0
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010b3c:	e7c0      	b.n	8010ac0 <follow_path+0x50>
			if (res != FR_OK) break;
 8010b3e:	bf00      	nop
 8010b40:	e002      	b.n	8010b48 <follow_path+0xd8>
				break;
 8010b42:	bf00      	nop
 8010b44:	e000      	b.n	8010b48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b46:	bf00      	nop
			}
		}
	}

	return res;
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3718      	adds	r7, #24
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b087      	sub	sp, #28
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d031      	beq.n	8010bcc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	617b      	str	r3, [r7, #20]
 8010b6e:	e002      	b.n	8010b76 <get_ldnumber+0x24>
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	3301      	adds	r3, #1
 8010b74:	617b      	str	r3, [r7, #20]
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	2b20      	cmp	r3, #32
 8010b7c:	d903      	bls.n	8010b86 <get_ldnumber+0x34>
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b84:	d1f4      	bne.n	8010b70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b8c:	d11c      	bne.n	8010bc8 <get_ldnumber+0x76>
			tp = *path;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	1c5a      	adds	r2, r3, #1
 8010b98:	60fa      	str	r2, [r7, #12]
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	3b30      	subs	r3, #48	@ 0x30
 8010b9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2b09      	cmp	r3, #9
 8010ba4:	d80e      	bhi.n	8010bc4 <get_ldnumber+0x72>
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d10a      	bne.n	8010bc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d107      	bne.n	8010bc4 <get_ldnumber+0x72>
					vol = (int)i;
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	617b      	str	r3, [r7, #20]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	697a      	ldr	r2, [r7, #20]
 8010bc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	e002      	b.n	8010bce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010bc8:	2300      	movs	r3, #0
 8010bca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010bcc:	693b      	ldr	r3, [r7, #16]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	371c      	adds	r7, #28
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
	...

08010bdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	70da      	strb	r2, [r3, #3]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7ff f800 	bl	800fbfc <move_window>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d001      	beq.n	8010c06 <check_fs+0x2a>
 8010c02:	2304      	movs	r3, #4
 8010c04:	e038      	b.n	8010c78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3330      	adds	r3, #48	@ 0x30
 8010c0a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fe fd44 	bl	800f69c <ld_word>
 8010c14:	4603      	mov	r3, r0
 8010c16:	461a      	mov	r2, r3
 8010c18:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d001      	beq.n	8010c24 <check_fs+0x48>
 8010c20:	2303      	movs	r3, #3
 8010c22:	e029      	b.n	8010c78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c2a:	2be9      	cmp	r3, #233	@ 0xe9
 8010c2c:	d009      	beq.n	8010c42 <check_fs+0x66>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c34:	2beb      	cmp	r3, #235	@ 0xeb
 8010c36:	d11e      	bne.n	8010c76 <check_fs+0x9a>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010c3e:	2b90      	cmp	r3, #144	@ 0x90
 8010c40:	d119      	bne.n	8010c76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	3330      	adds	r3, #48	@ 0x30
 8010c46:	3336      	adds	r3, #54	@ 0x36
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fe fd3f 	bl	800f6cc <ld_dword>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010c54:	4a0a      	ldr	r2, [pc, #40]	@ (8010c80 <check_fs+0xa4>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d101      	bne.n	8010c5e <check_fs+0x82>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e00c      	b.n	8010c78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	3330      	adds	r3, #48	@ 0x30
 8010c62:	3352      	adds	r3, #82	@ 0x52
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fe fd31 	bl	800f6cc <ld_dword>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	4a05      	ldr	r2, [pc, #20]	@ (8010c84 <check_fs+0xa8>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d101      	bne.n	8010c76 <check_fs+0x9a>
 8010c72:	2300      	movs	r3, #0
 8010c74:	e000      	b.n	8010c78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010c76:	2302      	movs	r3, #2
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	00544146 	.word	0x00544146
 8010c84:	33544146 	.word	0x33544146

08010c88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b096      	sub	sp, #88	@ 0x58
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	4613      	mov	r3, r2
 8010c94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f7ff ff58 	bl	8010b52 <get_ldnumber>
 8010ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	da01      	bge.n	8010cae <find_volume+0x26>
 8010caa:	230b      	movs	r3, #11
 8010cac:	e22d      	b.n	801110a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010cae:	4aa1      	ldr	r2, [pc, #644]	@ (8010f34 <find_volume+0x2ac>)
 8010cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d101      	bne.n	8010cc2 <find_volume+0x3a>
 8010cbe:	230c      	movs	r3, #12
 8010cc0:	e223      	b.n	801110a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010cc8:	79fb      	ldrb	r3, [r7, #7]
 8010cca:	f023 0301 	bic.w	r3, r3, #1
 8010cce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d01a      	beq.n	8010d0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cda:	785b      	ldrb	r3, [r3, #1]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fe fc3d 	bl	800f55c <disk_status>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010ce8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d10c      	bne.n	8010d0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d007      	beq.n	8010d0a <find_volume+0x82>
 8010cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cfe:	f003 0304 	and.w	r3, r3, #4
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010d06:	230a      	movs	r3, #10
 8010d08:	e1ff      	b.n	801110a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	e1fd      	b.n	801110a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d10:	2200      	movs	r2, #0
 8010d12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d16:	b2da      	uxtb	r2, r3
 8010d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1e:	785b      	ldrb	r3, [r3, #1]
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fc35 	bl	800f590 <disk_initialize>
 8010d26:	4603      	mov	r3, r0
 8010d28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010d38:	2303      	movs	r3, #3
 8010d3a:	e1e6      	b.n	801110a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d007      	beq.n	8010d52 <find_volume+0xca>
 8010d42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d46:	f003 0304 	and.w	r3, r3, #4
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010d4e:	230a      	movs	r3, #10
 8010d50:	e1db      	b.n	801110a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d5a:	f7ff ff3f 	bl	8010bdc <check_fs>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d68:	2b02      	cmp	r3, #2
 8010d6a:	d149      	bne.n	8010e00 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d70:	e01e      	b.n	8010db0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d7a:	011b      	lsls	r3, r3, #4
 8010d7c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010d80:	4413      	add	r3, r2
 8010d82:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d86:	3304      	adds	r3, #4
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d006      	beq.n	8010d9c <find_volume+0x114>
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d90:	3308      	adds	r3, #8
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe fc9a 	bl	800f6cc <ld_dword>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	e000      	b.n	8010d9e <find_volume+0x116>
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	3358      	adds	r3, #88	@ 0x58
 8010da4:	443b      	add	r3, r7
 8010da6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dac:	3301      	adds	r3, #1
 8010dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8010db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d9dd      	bls.n	8010d72 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010db6:	2300      	movs	r3, #0
 8010db8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <find_volume+0x13e>
 8010dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	3358      	adds	r3, #88	@ 0x58
 8010dcc:	443b      	add	r3, r7
 8010dce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010dd2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d005      	beq.n	8010de6 <find_volume+0x15e>
 8010dda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ddc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010dde:	f7ff fefd 	bl	8010bdc <check_fs>
 8010de2:	4603      	mov	r3, r0
 8010de4:	e000      	b.n	8010de8 <find_volume+0x160>
 8010de6:	2303      	movs	r3, #3
 8010de8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010dec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d905      	bls.n	8010e00 <find_volume+0x178>
 8010df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010df6:	3301      	adds	r3, #1
 8010df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8010dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	d9e2      	bls.n	8010dc6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010e00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e04:	2b04      	cmp	r3, #4
 8010e06:	d101      	bne.n	8010e0c <find_volume+0x184>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e17e      	b.n	801110a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d901      	bls.n	8010e18 <find_volume+0x190>
 8010e14:	230d      	movs	r3, #13
 8010e16:	e178      	b.n	801110a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1a:	3330      	adds	r3, #48	@ 0x30
 8010e1c:	330b      	adds	r3, #11
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fe fc3c 	bl	800f69c <ld_word>
 8010e24:	4603      	mov	r3, r0
 8010e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e2a:	d001      	beq.n	8010e30 <find_volume+0x1a8>
 8010e2c:	230d      	movs	r3, #13
 8010e2e:	e16c      	b.n	801110a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e32:	3330      	adds	r3, #48	@ 0x30
 8010e34:	3316      	adds	r3, #22
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7fe fc30 	bl	800f69c <ld_word>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d106      	bne.n	8010e54 <find_volume+0x1cc>
 8010e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e48:	3330      	adds	r3, #48	@ 0x30
 8010e4a:	3324      	adds	r3, #36	@ 0x24
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fe fc3d 	bl	800f6cc <ld_dword>
 8010e52:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e58:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8010e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e66:	789b      	ldrb	r3, [r3, #2]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d005      	beq.n	8010e78 <find_volume+0x1f0>
 8010e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e6e:	789b      	ldrb	r3, [r3, #2]
 8010e70:	2b02      	cmp	r3, #2
 8010e72:	d001      	beq.n	8010e78 <find_volume+0x1f0>
 8010e74:	230d      	movs	r3, #13
 8010e76:	e148      	b.n	801110a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e7a:	789b      	ldrb	r3, [r3, #2]
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e80:	fb02 f303 	mul.w	r3, r2, r3
 8010e84:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e94:	895b      	ldrh	r3, [r3, #10]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d008      	beq.n	8010eac <find_volume+0x224>
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9c:	895b      	ldrh	r3, [r3, #10]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea2:	895b      	ldrh	r3, [r3, #10]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	4013      	ands	r3, r2
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d001      	beq.n	8010eb0 <find_volume+0x228>
 8010eac:	230d      	movs	r3, #13
 8010eae:	e12c      	b.n	801110a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb2:	3330      	adds	r3, #48	@ 0x30
 8010eb4:	3311      	adds	r3, #17
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fe fbf0 	bl	800f69c <ld_word>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec6:	891b      	ldrh	r3, [r3, #8]
 8010ec8:	f003 030f 	and.w	r3, r3, #15
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <find_volume+0x24e>
 8010ed2:	230d      	movs	r3, #13
 8010ed4:	e119      	b.n	801110a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ed8:	3330      	adds	r3, #48	@ 0x30
 8010eda:	3313      	adds	r3, #19
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7fe fbdd 	bl	800f69c <ld_word>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d106      	bne.n	8010efa <find_volume+0x272>
 8010eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eee:	3330      	adds	r3, #48	@ 0x30
 8010ef0:	3320      	adds	r3, #32
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fe fbea 	bl	800f6cc <ld_dword>
 8010ef8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010efc:	3330      	adds	r3, #48	@ 0x30
 8010efe:	330e      	adds	r3, #14
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7fe fbcb 	bl	800f69c <ld_word>
 8010f06:	4603      	mov	r3, r0
 8010f08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010f0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <find_volume+0x28c>
 8010f10:	230d      	movs	r3, #13
 8010f12:	e0fa      	b.n	801110a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010f14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f18:	4413      	add	r3, r2
 8010f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f1c:	8912      	ldrh	r2, [r2, #8]
 8010f1e:	0912      	lsrs	r2, r2, #4
 8010f20:	b292      	uxth	r2, r2
 8010f22:	4413      	add	r3, r2
 8010f24:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d204      	bcs.n	8010f38 <find_volume+0x2b0>
 8010f2e:	230d      	movs	r3, #13
 8010f30:	e0eb      	b.n	801110a <find_volume+0x482>
 8010f32:	bf00      	nop
 8010f34:	20000818 	.word	0x20000818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3c:	1ad3      	subs	r3, r2, r3
 8010f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f40:	8952      	ldrh	r2, [r2, #10]
 8010f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f46:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d101      	bne.n	8010f52 <find_volume+0x2ca>
 8010f4e:	230d      	movs	r3, #13
 8010f50:	e0db      	b.n	801110a <find_volume+0x482>
		fmt = FS_FAT32;
 8010f52:	2303      	movs	r3, #3
 8010f54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f5a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d802      	bhi.n	8010f68 <find_volume+0x2e0>
 8010f62:	2302      	movs	r3, #2
 8010f64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d802      	bhi.n	8010f78 <find_volume+0x2f0>
 8010f72:	2301      	movs	r3, #1
 8010f74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f7a:	1c9a      	adds	r2, r3, #2
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f84:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f8a:	441a      	add	r2, r3
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010f90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f94:	441a      	add	r2, r3
 8010f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f98:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8010f9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f9e:	2b03      	cmp	r3, #3
 8010fa0:	d11e      	bne.n	8010fe0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	3330      	adds	r3, #48	@ 0x30
 8010fa6:	332a      	adds	r3, #42	@ 0x2a
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fe fb77 	bl	800f69c <ld_word>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <find_volume+0x330>
 8010fb4:	230d      	movs	r3, #13
 8010fb6:	e0a8      	b.n	801110a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fba:	891b      	ldrh	r3, [r3, #8]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d001      	beq.n	8010fc4 <find_volume+0x33c>
 8010fc0:	230d      	movs	r3, #13
 8010fc2:	e0a2      	b.n	801110a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc6:	3330      	adds	r3, #48	@ 0x30
 8010fc8:	332c      	adds	r3, #44	@ 0x2c
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fe fb7e 	bl	800f6cc <ld_dword>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd8:	695b      	ldr	r3, [r3, #20]
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fde:	e01f      	b.n	8011020 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe2:	891b      	ldrh	r3, [r3, #8]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <find_volume+0x364>
 8010fe8:	230d      	movs	r3, #13
 8010fea:	e08e      	b.n	801110a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fee:	6a1a      	ldr	r2, [r3, #32]
 8010ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ff2:	441a      	add	r2, r3
 8010ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ffc:	2b02      	cmp	r3, #2
 8010ffe:	d103      	bne.n	8011008 <find_volume+0x380>
 8011000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011002:	695b      	ldr	r3, [r3, #20]
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	e00a      	b.n	801101e <find_volume+0x396>
 8011008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100a:	695a      	ldr	r2, [r3, #20]
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	085a      	lsrs	r2, r3, #1
 8011014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011016:	695b      	ldr	r3, [r3, #20]
 8011018:	f003 0301 	and.w	r3, r3, #1
 801101c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801101e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011022:	699a      	ldr	r2, [r3, #24]
 8011024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011026:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801102a:	0a5b      	lsrs	r3, r3, #9
 801102c:	429a      	cmp	r2, r3
 801102e:	d201      	bcs.n	8011034 <find_volume+0x3ac>
 8011030:	230d      	movs	r3, #13
 8011032:	e06a      	b.n	801110a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011036:	f04f 32ff 	mov.w	r2, #4294967295
 801103a:	611a      	str	r2, [r3, #16]
 801103c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801103e:	691a      	ldr	r2, [r3, #16]
 8011040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011042:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011046:	2280      	movs	r2, #128	@ 0x80
 8011048:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801104a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801104e:	2b03      	cmp	r3, #3
 8011050:	d149      	bne.n	80110e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011054:	3330      	adds	r3, #48	@ 0x30
 8011056:	3330      	adds	r3, #48	@ 0x30
 8011058:	4618      	mov	r0, r3
 801105a:	f7fe fb1f 	bl	800f69c <ld_word>
 801105e:	4603      	mov	r3, r0
 8011060:	2b01      	cmp	r3, #1
 8011062:	d140      	bne.n	80110e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011066:	3301      	adds	r3, #1
 8011068:	4619      	mov	r1, r3
 801106a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801106c:	f7fe fdc6 	bl	800fbfc <move_window>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d137      	bne.n	80110e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011078:	2200      	movs	r2, #0
 801107a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801107c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801107e:	3330      	adds	r3, #48	@ 0x30
 8011080:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011084:	4618      	mov	r0, r3
 8011086:	f7fe fb09 	bl	800f69c <ld_word>
 801108a:	4603      	mov	r3, r0
 801108c:	461a      	mov	r2, r3
 801108e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011092:	429a      	cmp	r2, r3
 8011094:	d127      	bne.n	80110e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011098:	3330      	adds	r3, #48	@ 0x30
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe fb16 	bl	800f6cc <ld_dword>
 80110a0:	4603      	mov	r3, r0
 80110a2:	4a1c      	ldr	r2, [pc, #112]	@ (8011114 <find_volume+0x48c>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d11e      	bne.n	80110e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80110a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110aa:	3330      	adds	r3, #48	@ 0x30
 80110ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fe fb0b 	bl	800f6cc <ld_dword>
 80110b6:	4603      	mov	r3, r0
 80110b8:	4a17      	ldr	r2, [pc, #92]	@ (8011118 <find_volume+0x490>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d113      	bne.n	80110e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80110be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c0:	3330      	adds	r3, #48	@ 0x30
 80110c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fe fb00 	bl	800f6cc <ld_dword>
 80110cc:	4602      	mov	r2, r0
 80110ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80110d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d4:	3330      	adds	r3, #48	@ 0x30
 80110d6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fe faf6 	bl	800f6cc <ld_dword>
 80110e0:	4602      	mov	r2, r0
 80110e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80110ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80110ee:	4b0b      	ldr	r3, [pc, #44]	@ (801111c <find_volume+0x494>)
 80110f0:	881b      	ldrh	r3, [r3, #0]
 80110f2:	3301      	adds	r3, #1
 80110f4:	b29a      	uxth	r2, r3
 80110f6:	4b09      	ldr	r3, [pc, #36]	@ (801111c <find_volume+0x494>)
 80110f8:	801a      	strh	r2, [r3, #0]
 80110fa:	4b08      	ldr	r3, [pc, #32]	@ (801111c <find_volume+0x494>)
 80110fc:	881a      	ldrh	r2, [r3, #0]
 80110fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011100:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011102:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011104:	f7fe fd12 	bl	800fb2c <clear_lock>
#endif
	return FR_OK;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3758      	adds	r7, #88	@ 0x58
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	41615252 	.word	0x41615252
 8011118:	61417272 	.word	0x61417272
 801111c:	2000081c 	.word	0x2000081c

08011120 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801112a:	2309      	movs	r3, #9
 801112c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d01c      	beq.n	801116e <validate+0x4e>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d018      	beq.n	801116e <validate+0x4e>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d013      	beq.n	801116e <validate+0x4e>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	889a      	ldrh	r2, [r3, #4]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	88db      	ldrh	r3, [r3, #6]
 8011150:	429a      	cmp	r2, r3
 8011152:	d10c      	bne.n	801116e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	785b      	ldrb	r3, [r3, #1]
 801115a:	4618      	mov	r0, r3
 801115c:	f7fe f9fe 	bl	800f55c <disk_status>
 8011160:	4603      	mov	r3, r0
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <validate+0x4e>
			res = FR_OK;
 801116a:	2300      	movs	r3, #0
 801116c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d102      	bne.n	801117a <validate+0x5a>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	e000      	b.n	801117c <validate+0x5c>
 801117a:	2300      	movs	r3, #0
 801117c:	683a      	ldr	r2, [r7, #0]
 801117e:	6013      	str	r3, [r2, #0]
	return res;
 8011180:	7bfb      	ldrb	r3, [r7, #15]
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
	...

0801118c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b088      	sub	sp, #32
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	4613      	mov	r3, r2
 8011198:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801119e:	f107 0310 	add.w	r3, r7, #16
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff fcd5 	bl	8010b52 <get_ldnumber>
 80111a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	da01      	bge.n	80111b4 <f_mount+0x28>
 80111b0:	230b      	movs	r3, #11
 80111b2:	e02b      	b.n	801120c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80111b4:	4a17      	ldr	r2, [pc, #92]	@ (8011214 <f_mount+0x88>)
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d005      	beq.n	80111d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80111c4:	69b8      	ldr	r0, [r7, #24]
 80111c6:	f7fe fcb1 	bl	800fb2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	2200      	movs	r2, #0
 80111ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d002      	beq.n	80111dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2200      	movs	r2, #0
 80111da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	490d      	ldr	r1, [pc, #52]	@ (8011214 <f_mount+0x88>)
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d002      	beq.n	80111f2 <f_mount+0x66>
 80111ec:	79fb      	ldrb	r3, [r7, #7]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d001      	beq.n	80111f6 <f_mount+0x6a>
 80111f2:	2300      	movs	r3, #0
 80111f4:	e00a      	b.n	801120c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80111f6:	f107 010c 	add.w	r1, r7, #12
 80111fa:	f107 0308 	add.w	r3, r7, #8
 80111fe:	2200      	movs	r2, #0
 8011200:	4618      	mov	r0, r3
 8011202:	f7ff fd41 	bl	8010c88 <find_volume>
 8011206:	4603      	mov	r3, r0
 8011208:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801120a:	7dfb      	ldrb	r3, [r7, #23]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3720      	adds	r7, #32
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	20000818 	.word	0x20000818

08011218 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b098      	sub	sp, #96	@ 0x60
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	4613      	mov	r3, r2
 8011224:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d101      	bne.n	8011230 <f_open+0x18>
 801122c:	2309      	movs	r3, #9
 801122e:	e1a9      	b.n	8011584 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011230:	79fb      	ldrb	r3, [r7, #7]
 8011232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011236:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011238:	79fa      	ldrb	r2, [r7, #7]
 801123a:	f107 0110 	add.w	r1, r7, #16
 801123e:	f107 0308 	add.w	r3, r7, #8
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fd20 	bl	8010c88 <find_volume>
 8011248:	4603      	mov	r3, r0
 801124a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801124e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011252:	2b00      	cmp	r3, #0
 8011254:	f040 818d 	bne.w	8011572 <f_open+0x35a>
		dj.obj.fs = fs;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801125c:	68ba      	ldr	r2, [r7, #8]
 801125e:	f107 0314 	add.w	r3, r7, #20
 8011262:	4611      	mov	r1, r2
 8011264:	4618      	mov	r0, r3
 8011266:	f7ff fc03 	bl	8010a70 <follow_path>
 801126a:	4603      	mov	r3, r0
 801126c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011270:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011274:	2b00      	cmp	r3, #0
 8011276:	d118      	bne.n	80112aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011278:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801127c:	b25b      	sxtb	r3, r3
 801127e:	2b00      	cmp	r3, #0
 8011280:	da03      	bge.n	801128a <f_open+0x72>
				res = FR_INVALID_NAME;
 8011282:	2306      	movs	r3, #6
 8011284:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011288:	e00f      	b.n	80112aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801128a:	79fb      	ldrb	r3, [r7, #7]
 801128c:	2b01      	cmp	r3, #1
 801128e:	bf8c      	ite	hi
 8011290:	2301      	movhi	r3, #1
 8011292:	2300      	movls	r3, #0
 8011294:	b2db      	uxtb	r3, r3
 8011296:	461a      	mov	r2, r3
 8011298:	f107 0314 	add.w	r3, r7, #20
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fe fafc 	bl	800f89c <chk_lock>
 80112a4:	4603      	mov	r3, r0
 80112a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80112aa:	79fb      	ldrb	r3, [r7, #7]
 80112ac:	f003 031c 	and.w	r3, r3, #28
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d07f      	beq.n	80113b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80112b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d017      	beq.n	80112ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80112bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80112c0:	2b04      	cmp	r3, #4
 80112c2:	d10e      	bne.n	80112e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80112c4:	f7fe fb46 	bl	800f954 <enq_lock>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d006      	beq.n	80112dc <f_open+0xc4>
 80112ce:	f107 0314 	add.w	r3, r7, #20
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ff fa87 	bl	80107e6 <dir_register>
 80112d8:	4603      	mov	r3, r0
 80112da:	e000      	b.n	80112de <f_open+0xc6>
 80112dc:	2312      	movs	r3, #18
 80112de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80112e2:	79fb      	ldrb	r3, [r7, #7]
 80112e4:	f043 0308 	orr.w	r3, r3, #8
 80112e8:	71fb      	strb	r3, [r7, #7]
 80112ea:	e010      	b.n	801130e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80112ec:	7ebb      	ldrb	r3, [r7, #26]
 80112ee:	f003 0311 	and.w	r3, r3, #17
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d003      	beq.n	80112fe <f_open+0xe6>
					res = FR_DENIED;
 80112f6:	2307      	movs	r3, #7
 80112f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80112fc:	e007      	b.n	801130e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	d002      	beq.n	801130e <f_open+0xf6>
 8011308:	2308      	movs	r3, #8
 801130a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801130e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011312:	2b00      	cmp	r3, #0
 8011314:	d168      	bne.n	80113e8 <f_open+0x1d0>
 8011316:	79fb      	ldrb	r3, [r7, #7]
 8011318:	f003 0308 	and.w	r3, r3, #8
 801131c:	2b00      	cmp	r3, #0
 801131e:	d063      	beq.n	80113e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011320:	f7fb fe5a 	bl	800cfd8 <get_fattime>
 8011324:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011328:	330e      	adds	r3, #14
 801132a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801132c:	4618      	mov	r0, r3
 801132e:	f7fe fa0b 	bl	800f748 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011334:	3316      	adds	r3, #22
 8011336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe fa05 	bl	800f748 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011340:	330b      	adds	r3, #11
 8011342:	2220      	movs	r2, #32
 8011344:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801134a:	4611      	mov	r1, r2
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff f959 	bl	8010604 <ld_clust>
 8011352:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011358:	2200      	movs	r2, #0
 801135a:	4618      	mov	r0, r3
 801135c:	f7ff f971 	bl	8010642 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011362:	331c      	adds	r3, #28
 8011364:	2100      	movs	r1, #0
 8011366:	4618      	mov	r0, r3
 8011368:	f7fe f9ee 	bl	800f748 <st_dword>
					fs->wflag = 1;
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	2201      	movs	r2, #1
 8011370:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011374:	2b00      	cmp	r3, #0
 8011376:	d037      	beq.n	80113e8 <f_open+0x1d0>
						dw = fs->winsect;
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801137c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801137e:	f107 0314 	add.w	r3, r7, #20
 8011382:	2200      	movs	r2, #0
 8011384:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011386:	4618      	mov	r0, r3
 8011388:	f7fe fe84 	bl	8010094 <remove_chain>
 801138c:	4603      	mov	r3, r0
 801138e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8011392:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011396:	2b00      	cmp	r3, #0
 8011398:	d126      	bne.n	80113e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fe fc2c 	bl	800fbfc <move_window>
 80113a4:	4603      	mov	r3, r0
 80113a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113ae:	3a01      	subs	r2, #1
 80113b0:	60da      	str	r2, [r3, #12]
 80113b2:	e019      	b.n	80113e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80113b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d115      	bne.n	80113e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80113bc:	7ebb      	ldrb	r3, [r7, #26]
 80113be:	f003 0310 	and.w	r3, r3, #16
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d003      	beq.n	80113ce <f_open+0x1b6>
					res = FR_NO_FILE;
 80113c6:	2304      	movs	r3, #4
 80113c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80113cc:	e00c      	b.n	80113e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80113ce:	79fb      	ldrb	r3, [r7, #7]
 80113d0:	f003 0302 	and.w	r3, r3, #2
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d007      	beq.n	80113e8 <f_open+0x1d0>
 80113d8:	7ebb      	ldrb	r3, [r7, #26]
 80113da:	f003 0301 	and.w	r3, r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d002      	beq.n	80113e8 <f_open+0x1d0>
						res = FR_DENIED;
 80113e2:	2307      	movs	r3, #7
 80113e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80113e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d126      	bne.n	801143e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80113f0:	79fb      	ldrb	r3, [r7, #7]
 80113f2:	f003 0308 	and.w	r3, r3, #8
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d003      	beq.n	8011402 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80113fa:	79fb      	ldrb	r3, [r7, #7]
 80113fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011400:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801140a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	2b01      	cmp	r3, #1
 8011414:	bf8c      	ite	hi
 8011416:	2301      	movhi	r3, #1
 8011418:	2300      	movls	r3, #0
 801141a:	b2db      	uxtb	r3, r3
 801141c:	461a      	mov	r2, r3
 801141e:	f107 0314 	add.w	r3, r7, #20
 8011422:	4611      	mov	r1, r2
 8011424:	4618      	mov	r0, r3
 8011426:	f7fe fab7 	bl	800f998 <inc_lock>
 801142a:	4602      	mov	r2, r0
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d102      	bne.n	801143e <f_open+0x226>
 8011438:	2302      	movs	r3, #2
 801143a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801143e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011442:	2b00      	cmp	r3, #0
 8011444:	f040 8095 	bne.w	8011572 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801144c:	4611      	mov	r1, r2
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff f8d8 	bl	8010604 <ld_clust>
 8011454:	4602      	mov	r2, r0
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801145a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801145c:	331c      	adds	r3, #28
 801145e:	4618      	mov	r0, r3
 8011460:	f7fe f934 	bl	800f6cc <ld_dword>
 8011464:	4602      	mov	r2, r0
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2200      	movs	r2, #0
 801146e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011470:	693a      	ldr	r2, [r7, #16]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	88da      	ldrh	r2, [r3, #6]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	79fa      	ldrb	r2, [r7, #7]
 8011482:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2200      	movs	r2, #0
 8011488:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2200      	movs	r2, #0
 801148e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2200      	movs	r2, #0
 8011494:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	3330      	adds	r3, #48	@ 0x30
 801149a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801149e:	2100      	movs	r1, #0
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fe f99e 	bl	800f7e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80114a6:	79fb      	ldrb	r3, [r7, #7]
 80114a8:	f003 0320 	and.w	r3, r3, #32
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d060      	beq.n	8011572 <f_open+0x35a>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d05c      	beq.n	8011572 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	68da      	ldr	r2, [r3, #12]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	895b      	ldrh	r3, [r3, #10]
 80114c4:	025b      	lsls	r3, r3, #9
 80114c6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80114d4:	e016      	b.n	8011504 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fe fc49 	bl	800fd72 <get_fat>
 80114e0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80114e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d802      	bhi.n	80114ee <f_open+0x2d6>
 80114e8:	2302      	movs	r3, #2
 80114ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80114ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f4:	d102      	bne.n	80114fc <f_open+0x2e4>
 80114f6:	2301      	movs	r3, #1
 80114f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80114fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80114fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	657b      	str	r3, [r7, #84]	@ 0x54
 8011504:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011508:	2b00      	cmp	r3, #0
 801150a:	d103      	bne.n	8011514 <f_open+0x2fc>
 801150c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801150e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011510:	429a      	cmp	r2, r3
 8011512:	d8e0      	bhi.n	80114d6 <f_open+0x2be>
				}
				fp->clust = clst;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011518:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801151a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801151e:	2b00      	cmp	r3, #0
 8011520:	d127      	bne.n	8011572 <f_open+0x35a>
 8011522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011528:	2b00      	cmp	r3, #0
 801152a:	d022      	beq.n	8011572 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011530:	4618      	mov	r0, r3
 8011532:	f7fe fbff 	bl	800fd34 <clust2sect>
 8011536:	6478      	str	r0, [r7, #68]	@ 0x44
 8011538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801153a:	2b00      	cmp	r3, #0
 801153c:	d103      	bne.n	8011546 <f_open+0x32e>
						res = FR_INT_ERR;
 801153e:	2302      	movs	r3, #2
 8011540:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011544:	e015      	b.n	8011572 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011548:	0a5a      	lsrs	r2, r3, #9
 801154a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801154c:	441a      	add	r2, r3
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	7858      	ldrb	r0, [r3, #1]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	6a1a      	ldr	r2, [r3, #32]
 8011560:	2301      	movs	r3, #1
 8011562:	f7fe f83d 	bl	800f5e0 <disk_read>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d002      	beq.n	8011572 <f_open+0x35a>
 801156c:	2301      	movs	r3, #1
 801156e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011572:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <f_open+0x368>
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2200      	movs	r2, #0
 801157e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8011584:	4618      	mov	r0, r3
 8011586:	3760      	adds	r7, #96	@ 0x60
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b08e      	sub	sp, #56	@ 0x38
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
 8011598:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	2200      	movs	r2, #0
 80115a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f107 0214 	add.w	r2, r7, #20
 80115aa:	4611      	mov	r1, r2
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff fdb7 	bl	8011120 <validate>
 80115b2:	4603      	mov	r3, r0
 80115b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80115b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d107      	bne.n	80115d0 <f_read+0x44>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	7d5b      	ldrb	r3, [r3, #21]
 80115c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80115c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <f_read+0x4a>
 80115d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115d4:	e115      	b.n	8011802 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	7d1b      	ldrb	r3, [r3, #20]
 80115da:	f003 0301 	and.w	r3, r3, #1
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d101      	bne.n	80115e6 <f_read+0x5a>
 80115e2:	2307      	movs	r3, #7
 80115e4:	e10d      	b.n	8011802 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	68da      	ldr	r2, [r3, #12]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	699b      	ldr	r3, [r3, #24]
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	6a3b      	ldr	r3, [r7, #32]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	f240 80fe 	bls.w	80117f8 <f_read+0x26c>
 80115fc:	6a3b      	ldr	r3, [r7, #32]
 80115fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011600:	e0fa      	b.n	80117f8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	699b      	ldr	r3, [r3, #24]
 8011606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801160a:	2b00      	cmp	r3, #0
 801160c:	f040 80c6 	bne.w	801179c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	699b      	ldr	r3, [r3, #24]
 8011614:	0a5b      	lsrs	r3, r3, #9
 8011616:	697a      	ldr	r2, [r7, #20]
 8011618:	8952      	ldrh	r2, [r2, #10]
 801161a:	3a01      	subs	r2, #1
 801161c:	4013      	ands	r3, r2
 801161e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d12f      	bne.n	8011686 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d103      	bne.n	8011636 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	633b      	str	r3, [r7, #48]	@ 0x30
 8011634:	e013      	b.n	801165e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801163a:	2b00      	cmp	r3, #0
 801163c:	d007      	beq.n	801164e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	699b      	ldr	r3, [r3, #24]
 8011642:	4619      	mov	r1, r3
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f7fe fe22 	bl	801028e <clmt_clust>
 801164a:	6338      	str	r0, [r7, #48]	@ 0x30
 801164c:	e007      	b.n	801165e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801164e:	68fa      	ldr	r2, [r7, #12]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	69db      	ldr	r3, [r3, #28]
 8011654:	4619      	mov	r1, r3
 8011656:	4610      	mov	r0, r2
 8011658:	f7fe fb8b 	bl	800fd72 <get_fat>
 801165c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801165e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011660:	2b01      	cmp	r3, #1
 8011662:	d804      	bhi.n	801166e <f_read+0xe2>
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2202      	movs	r2, #2
 8011668:	755a      	strb	r2, [r3, #21]
 801166a:	2302      	movs	r3, #2
 801166c:	e0c9      	b.n	8011802 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801166e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011674:	d104      	bne.n	8011680 <f_read+0xf4>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2201      	movs	r2, #1
 801167a:	755a      	strb	r2, [r3, #21]
 801167c:	2301      	movs	r3, #1
 801167e:	e0c0      	b.n	8011802 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011684:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011686:	697a      	ldr	r2, [r7, #20]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	69db      	ldr	r3, [r3, #28]
 801168c:	4619      	mov	r1, r3
 801168e:	4610      	mov	r0, r2
 8011690:	f7fe fb50 	bl	800fd34 <clust2sect>
 8011694:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d104      	bne.n	80116a6 <f_read+0x11a>
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2202      	movs	r2, #2
 80116a0:	755a      	strb	r2, [r3, #21]
 80116a2:	2302      	movs	r3, #2
 80116a4:	e0ad      	b.n	8011802 <f_read+0x276>
			sect += csect;
 80116a6:	69ba      	ldr	r2, [r7, #24]
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	4413      	add	r3, r2
 80116ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	0a5b      	lsrs	r3, r3, #9
 80116b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80116b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d039      	beq.n	801172e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80116ba:	69fa      	ldr	r2, [r7, #28]
 80116bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116be:	4413      	add	r3, r2
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	8952      	ldrh	r2, [r2, #10]
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d905      	bls.n	80116d4 <f_read+0x148>
					cc = fs->csize - csect;
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	895b      	ldrh	r3, [r3, #10]
 80116cc:	461a      	mov	r2, r3
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	7858      	ldrb	r0, [r3, #1]
 80116d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116da:	69ba      	ldr	r2, [r7, #24]
 80116dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80116de:	f7fd ff7f 	bl	800f5e0 <disk_read>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d004      	beq.n	80116f2 <f_read+0x166>
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2201      	movs	r2, #1
 80116ec:	755a      	strb	r2, [r3, #21]
 80116ee:	2301      	movs	r3, #1
 80116f0:	e087      	b.n	8011802 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	7d1b      	ldrb	r3, [r3, #20]
 80116f6:	b25b      	sxtb	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	da14      	bge.n	8011726 <f_read+0x19a>
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6a1a      	ldr	r2, [r3, #32]
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011706:	429a      	cmp	r2, r3
 8011708:	d90d      	bls.n	8011726 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6a1a      	ldr	r2, [r3, #32]
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	025b      	lsls	r3, r3, #9
 8011714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011716:	18d0      	adds	r0, r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	3330      	adds	r3, #48	@ 0x30
 801171c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011720:	4619      	mov	r1, r3
 8011722:	f7fe f83d 	bl	800f7a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011728:	025b      	lsls	r3, r3, #9
 801172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801172c:	e050      	b.n	80117d0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6a1b      	ldr	r3, [r3, #32]
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	429a      	cmp	r2, r3
 8011736:	d02e      	beq.n	8011796 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	7d1b      	ldrb	r3, [r3, #20]
 801173c:	b25b      	sxtb	r3, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	da18      	bge.n	8011774 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	7858      	ldrb	r0, [r3, #1]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6a1a      	ldr	r2, [r3, #32]
 8011750:	2301      	movs	r3, #1
 8011752:	f7fd ff65 	bl	800f620 <disk_write>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d004      	beq.n	8011766 <f_read+0x1da>
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2201      	movs	r2, #1
 8011760:	755a      	strb	r2, [r3, #21]
 8011762:	2301      	movs	r3, #1
 8011764:	e04d      	b.n	8011802 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	7d1b      	ldrb	r3, [r3, #20]
 801176a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801176e:	b2da      	uxtb	r2, r3
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	7858      	ldrb	r0, [r3, #1]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801177e:	2301      	movs	r3, #1
 8011780:	69ba      	ldr	r2, [r7, #24]
 8011782:	f7fd ff2d 	bl	800f5e0 <disk_read>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d004      	beq.n	8011796 <f_read+0x20a>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2201      	movs	r2, #1
 8011790:	755a      	strb	r2, [r3, #21]
 8011792:	2301      	movs	r3, #1
 8011794:	e035      	b.n	8011802 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	69ba      	ldr	r2, [r7, #24]
 801179a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117a4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80117a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80117aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d901      	bls.n	80117b6 <f_read+0x22a>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	699b      	ldr	r3, [r3, #24]
 80117c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117c4:	4413      	add	r3, r2
 80117c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117c8:	4619      	mov	r1, r3
 80117ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117cc:	f7fd ffe8 	bl	800f7a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80117d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d4:	4413      	add	r3, r2
 80117d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	699a      	ldr	r2, [r3, #24]
 80117dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117de:	441a      	add	r2, r3
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	619a      	str	r2, [r3, #24]
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ea:	441a      	add	r2, r3
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	f47f af01 	bne.w	8011602 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3738      	adds	r7, #56	@ 0x38
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b08c      	sub	sp, #48	@ 0x30
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	60b9      	str	r1, [r7, #8]
 8011814:	607a      	str	r2, [r7, #4]
 8011816:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f107 0210 	add.w	r2, r7, #16
 8011828:	4611      	mov	r1, r2
 801182a:	4618      	mov	r0, r3
 801182c:	f7ff fc78 	bl	8011120 <validate>
 8011830:	4603      	mov	r3, r0
 8011832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801183a:	2b00      	cmp	r3, #0
 801183c:	d107      	bne.n	801184e <f_write+0x44>
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	7d5b      	ldrb	r3, [r3, #21]
 8011842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801184a:	2b00      	cmp	r3, #0
 801184c:	d002      	beq.n	8011854 <f_write+0x4a>
 801184e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011852:	e14b      	b.n	8011aec <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	7d1b      	ldrb	r3, [r3, #20]
 8011858:	f003 0302 	and.w	r3, r3, #2
 801185c:	2b00      	cmp	r3, #0
 801185e:	d101      	bne.n	8011864 <f_write+0x5a>
 8011860:	2307      	movs	r3, #7
 8011862:	e143      	b.n	8011aec <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	699a      	ldr	r2, [r3, #24]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	441a      	add	r2, r3
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	699b      	ldr	r3, [r3, #24]
 8011870:	429a      	cmp	r2, r3
 8011872:	f080 812d 	bcs.w	8011ad0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	43db      	mvns	r3, r3
 801187c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801187e:	e127      	b.n	8011ad0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	699b      	ldr	r3, [r3, #24]
 8011884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011888:	2b00      	cmp	r3, #0
 801188a:	f040 80e3 	bne.w	8011a54 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	0a5b      	lsrs	r3, r3, #9
 8011894:	693a      	ldr	r2, [r7, #16]
 8011896:	8952      	ldrh	r2, [r2, #10]
 8011898:	3a01      	subs	r2, #1
 801189a:	4013      	ands	r3, r2
 801189c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d143      	bne.n	801192c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	699b      	ldr	r3, [r3, #24]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d10c      	bne.n	80118c6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	689b      	ldr	r3, [r3, #8]
 80118b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80118b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d11a      	bne.n	80118ee <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2100      	movs	r1, #0
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fe fc4e 	bl	801015e <create_chain>
 80118c2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80118c4:	e013      	b.n	80118ee <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d007      	beq.n	80118de <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	699b      	ldr	r3, [r3, #24]
 80118d2:	4619      	mov	r1, r3
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f7fe fcda 	bl	801028e <clmt_clust>
 80118da:	62b8      	str	r0, [r7, #40]	@ 0x28
 80118dc:	e007      	b.n	80118ee <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	69db      	ldr	r3, [r3, #28]
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fe fc39 	bl	801015e <create_chain>
 80118ec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80118ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 80f2 	beq.w	8011ada <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80118f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d104      	bne.n	8011906 <f_write+0xfc>
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2202      	movs	r2, #2
 8011900:	755a      	strb	r2, [r3, #21]
 8011902:	2302      	movs	r3, #2
 8011904:	e0f2      	b.n	8011aec <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801190c:	d104      	bne.n	8011918 <f_write+0x10e>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2201      	movs	r2, #1
 8011912:	755a      	strb	r2, [r3, #21]
 8011914:	2301      	movs	r3, #1
 8011916:	e0e9      	b.n	8011aec <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801191c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d102      	bne.n	801192c <f_write+0x122>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801192a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	7d1b      	ldrb	r3, [r3, #20]
 8011930:	b25b      	sxtb	r3, r3
 8011932:	2b00      	cmp	r3, #0
 8011934:	da18      	bge.n	8011968 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	7858      	ldrb	r0, [r3, #1]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6a1a      	ldr	r2, [r3, #32]
 8011944:	2301      	movs	r3, #1
 8011946:	f7fd fe6b 	bl	800f620 <disk_write>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d004      	beq.n	801195a <f_write+0x150>
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2201      	movs	r2, #1
 8011954:	755a      	strb	r2, [r3, #21]
 8011956:	2301      	movs	r3, #1
 8011958:	e0c8      	b.n	8011aec <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	7d1b      	ldrb	r3, [r3, #20]
 801195e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011962:	b2da      	uxtb	r2, r3
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011968:	693a      	ldr	r2, [r7, #16]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	69db      	ldr	r3, [r3, #28]
 801196e:	4619      	mov	r1, r3
 8011970:	4610      	mov	r0, r2
 8011972:	f7fe f9df 	bl	800fd34 <clust2sect>
 8011976:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d104      	bne.n	8011988 <f_write+0x17e>
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2202      	movs	r2, #2
 8011982:	755a      	strb	r2, [r3, #21]
 8011984:	2302      	movs	r3, #2
 8011986:	e0b1      	b.n	8011aec <f_write+0x2e2>
			sect += csect;
 8011988:	697a      	ldr	r2, [r7, #20]
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	4413      	add	r3, r2
 801198e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	0a5b      	lsrs	r3, r3, #9
 8011994:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d03c      	beq.n	8011a16 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801199c:	69ba      	ldr	r2, [r7, #24]
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	4413      	add	r3, r2
 80119a2:	693a      	ldr	r2, [r7, #16]
 80119a4:	8952      	ldrh	r2, [r2, #10]
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d905      	bls.n	80119b6 <f_write+0x1ac>
					cc = fs->csize - csect;
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	895b      	ldrh	r3, [r3, #10]
 80119ae:	461a      	mov	r2, r3
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	7858      	ldrb	r0, [r3, #1]
 80119ba:	6a3b      	ldr	r3, [r7, #32]
 80119bc:	697a      	ldr	r2, [r7, #20]
 80119be:	69f9      	ldr	r1, [r7, #28]
 80119c0:	f7fd fe2e 	bl	800f620 <disk_write>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d004      	beq.n	80119d4 <f_write+0x1ca>
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2201      	movs	r2, #1
 80119ce:	755a      	strb	r2, [r3, #21]
 80119d0:	2301      	movs	r3, #1
 80119d2:	e08b      	b.n	8011aec <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	6a1a      	ldr	r2, [r3, #32]
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	6a3a      	ldr	r2, [r7, #32]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d915      	bls.n	8011a0e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	6a1a      	ldr	r2, [r3, #32]
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	025b      	lsls	r3, r3, #9
 80119f2:	69fa      	ldr	r2, [r7, #28]
 80119f4:	4413      	add	r3, r2
 80119f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119fa:	4619      	mov	r1, r3
 80119fc:	f7fd fed0 	bl	800f7a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	7d1b      	ldrb	r3, [r3, #20]
 8011a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a08:	b2da      	uxtb	r2, r3
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	025b      	lsls	r3, r3, #9
 8011a12:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011a14:	e03f      	b.n	8011a96 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6a1b      	ldr	r3, [r3, #32]
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d016      	beq.n	8011a4e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	699a      	ldr	r2, [r3, #24]
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d210      	bcs.n	8011a4e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	7858      	ldrb	r0, [r3, #1]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a36:	2301      	movs	r3, #1
 8011a38:	697a      	ldr	r2, [r7, #20]
 8011a3a:	f7fd fdd1 	bl	800f5e0 <disk_read>
 8011a3e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d004      	beq.n	8011a4e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2201      	movs	r2, #1
 8011a48:	755a      	strb	r2, [r3, #21]
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e04e      	b.n	8011aec <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	697a      	ldr	r2, [r7, #20]
 8011a52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	699b      	ldr	r3, [r3, #24]
 8011a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a5c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011a60:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d901      	bls.n	8011a6e <f_write+0x264>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a7c:	4413      	add	r3, r2
 8011a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a80:	69f9      	ldr	r1, [r7, #28]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fd fe8c 	bl	800f7a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	7d1b      	ldrb	r3, [r3, #20]
 8011a8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011a90:	b2da      	uxtb	r2, r3
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011a96:	69fa      	ldr	r2, [r7, #28]
 8011a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a9a:	4413      	add	r3, r2
 8011a9c:	61fb      	str	r3, [r7, #28]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	699a      	ldr	r2, [r3, #24]
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa4:	441a      	add	r2, r3
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	619a      	str	r2, [r3, #24]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	68da      	ldr	r2, [r3, #12]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	699b      	ldr	r3, [r3, #24]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	bf38      	it	cc
 8011ab6:	461a      	movcc	r2, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	60da      	str	r2, [r3, #12]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ac2:	441a      	add	r2, r3
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	601a      	str	r2, [r3, #0]
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011acc:	1ad3      	subs	r3, r2, r3
 8011ace:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	f47f aed4 	bne.w	8011880 <f_write+0x76>
 8011ad8:	e000      	b.n	8011adc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ada:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	7d1b      	ldrb	r3, [r3, #20]
 8011ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3730      	adds	r7, #48	@ 0x30
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f107 0208 	add.w	r2, r7, #8
 8011b02:	4611      	mov	r1, r2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7ff fb0b 	bl	8011120 <validate>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b0e:	7dfb      	ldrb	r3, [r7, #23]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d168      	bne.n	8011be6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	7d1b      	ldrb	r3, [r3, #20]
 8011b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d062      	beq.n	8011be6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	7d1b      	ldrb	r3, [r3, #20]
 8011b24:	b25b      	sxtb	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	da15      	bge.n	8011b56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	7858      	ldrb	r0, [r3, #1]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a1a      	ldr	r2, [r3, #32]
 8011b38:	2301      	movs	r3, #1
 8011b3a:	f7fd fd71 	bl	800f620 <disk_write>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d001      	beq.n	8011b48 <f_sync+0x54>
 8011b44:	2301      	movs	r3, #1
 8011b46:	e04f      	b.n	8011be8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
 8011b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b50:	b2da      	uxtb	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011b56:	f7fb fa3f 	bl	800cfd8 <get_fattime>
 8011b5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011b5c:	68ba      	ldr	r2, [r7, #8]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b62:	4619      	mov	r1, r3
 8011b64:	4610      	mov	r0, r2
 8011b66:	f7fe f849 	bl	800fbfc <move_window>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011b6e:	7dfb      	ldrb	r3, [r7, #23]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d138      	bne.n	8011be6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	330b      	adds	r3, #11
 8011b7e:	781a      	ldrb	r2, [r3, #0]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	330b      	adds	r3, #11
 8011b84:	f042 0220 	orr.w	r2, r2, #32
 8011b88:	b2d2      	uxtb	r2, r2
 8011b8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6818      	ldr	r0, [r3, #0]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	461a      	mov	r2, r3
 8011b96:	68f9      	ldr	r1, [r7, #12]
 8011b98:	f7fe fd53 	bl	8010642 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f103 021c 	add.w	r2, r3, #28
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	4610      	mov	r0, r2
 8011baa:	f7fd fdcd 	bl	800f748 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	3316      	adds	r3, #22
 8011bb2:	6939      	ldr	r1, [r7, #16]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fd fdc7 	bl	800f748 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	3312      	adds	r3, #18
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fd fda6 	bl	800f712 <st_word>
					fs->wflag = 1;
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	2201      	movs	r2, #1
 8011bca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fe f842 	bl	800fc58 <sync_fs>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	7d1b      	ldrb	r3, [r3, #20]
 8011bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3718      	adds	r7, #24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f7ff ff7b 	bl	8011af4 <f_sync>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011c02:	7bfb      	ldrb	r3, [r7, #15]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d118      	bne.n	8011c3a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f107 0208 	add.w	r2, r7, #8
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7ff fa85 	bl	8011120 <validate>
 8011c16:	4603      	mov	r3, r0
 8011c18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011c1a:	7bfb      	ldrb	r3, [r7, #15]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d10c      	bne.n	8011c3a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fd ff45 	bl	800fab4 <dec_lock>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011c2e:	7bfb      	ldrb	r3, [r7, #15]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d102      	bne.n	8011c3a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2200      	movs	r2, #0
 8011c38:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b086      	sub	sp, #24
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d101      	bne.n	8011c58 <f_opendir+0x14>
 8011c54:	2309      	movs	r3, #9
 8011c56:	e064      	b.n	8011d22 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011c5c:	f107 010c 	add.w	r1, r7, #12
 8011c60:	463b      	mov	r3, r7
 8011c62:	2200      	movs	r2, #0
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7ff f80f 	bl	8010c88 <find_volume>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d14f      	bne.n	8011d14 <f_opendir+0xd0>
		obj->fs = fs;
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7fe fef6 	bl	8010a70 <follow_path>
 8011c84:	4603      	mov	r3, r0
 8011c86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011c88:	7dfb      	ldrb	r3, [r7, #23]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d13d      	bne.n	8011d0a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011c94:	b25b      	sxtb	r3, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	db12      	blt.n	8011cc0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	799b      	ldrb	r3, [r3, #6]
 8011c9e:	f003 0310 	and.w	r3, r3, #16
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00a      	beq.n	8011cbc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6a1b      	ldr	r3, [r3, #32]
 8011cac:	4619      	mov	r1, r3
 8011cae:	4610      	mov	r0, r2
 8011cb0:	f7fe fca8 	bl	8010604 <ld_clust>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	609a      	str	r2, [r3, #8]
 8011cba:	e001      	b.n	8011cc0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011cbc:	2305      	movs	r3, #5
 8011cbe:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011cc0:	7dfb      	ldrb	r3, [r7, #23]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d121      	bne.n	8011d0a <f_opendir+0xc6>
				obj->id = fs->id;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	88da      	ldrh	r2, [r3, #6]
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011cce:	2100      	movs	r1, #0
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f7fe fb10 	bl	80102f6 <dir_sdi>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011cda:	7dfb      	ldrb	r3, [r7, #23]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d114      	bne.n	8011d0a <f_opendir+0xc6>
					if (obj->sclust) {
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00d      	beq.n	8011d04 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011ce8:	2100      	movs	r1, #0
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7fd fe54 	bl	800f998 <inc_lock>
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	691b      	ldr	r3, [r3, #16]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d105      	bne.n	8011d0a <f_opendir+0xc6>
 8011cfe:	2312      	movs	r3, #18
 8011d00:	75fb      	strb	r3, [r7, #23]
 8011d02:	e002      	b.n	8011d0a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	2200      	movs	r2, #0
 8011d08:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
 8011d0c:	2b04      	cmp	r3, #4
 8011d0e:	d101      	bne.n	8011d14 <f_opendir+0xd0>
 8011d10:	2305      	movs	r3, #5
 8011d12:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011d14:	7dfb      	ldrb	r3, [r7, #23]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d002      	beq.n	8011d20 <f_opendir+0xdc>
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3718      	adds	r7, #24
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b084      	sub	sp, #16
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f107 0208 	add.w	r2, r7, #8
 8011d38:	4611      	mov	r1, r2
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff f9f0 	bl	8011120 <validate>
 8011d40:	4603      	mov	r3, r0
 8011d42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d44:	7bfb      	ldrb	r3, [r7, #15]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d110      	bne.n	8011d6c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	691b      	ldr	r3, [r3, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d006      	beq.n	8011d60 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fd feac 	bl	800fab4 <dec_lock>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011d60:	7bfb      	ldrb	r3, [r7, #15]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d102      	bne.n	8011d6c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
 8011d7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f107 0208 	add.w	r2, r7, #8
 8011d86:	4611      	mov	r1, r2
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff f9c9 	bl	8011120 <validate>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d92:	7bfb      	ldrb	r3, [r7, #15]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d126      	bne.n	8011de6 <f_readdir+0x70>
		if (!fno) {
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d106      	bne.n	8011dac <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011d9e:	2100      	movs	r1, #0
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7fe faa8 	bl	80102f6 <dir_sdi>
 8011da6:	4603      	mov	r3, r0
 8011da8:	73fb      	strb	r3, [r7, #15]
 8011daa:	e01c      	b.n	8011de6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011dac:	2100      	movs	r1, #0
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f7fe fc67 	bl	8010682 <dir_read>
 8011db4:	4603      	mov	r3, r0
 8011db6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011db8:	7bfb      	ldrb	r3, [r7, #15]
 8011dba:	2b04      	cmp	r3, #4
 8011dbc:	d101      	bne.n	8011dc2 <f_readdir+0x4c>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011dc2:	7bfb      	ldrb	r3, [r7, #15]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d10e      	bne.n	8011de6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011dc8:	6839      	ldr	r1, [r7, #0]
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f7fe fd5b 	bl	8010886 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7fe fb0a 	bl	80103ec <dir_next>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
 8011dde:	2b04      	cmp	r3, #4
 8011de0:	d101      	bne.n	8011de6 <f_readdir+0x70>
 8011de2:	2300      	movs	r3, #0
 8011de4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b090      	sub	sp, #64	@ 0x40
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8011dfa:	f107 010c 	add.w	r1, r7, #12
 8011dfe:	1d3b      	adds	r3, r7, #4
 8011e00:	2200      	movs	r2, #0
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fe ff40 	bl	8010c88 <find_volume>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8011e0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d11f      	bne.n	8011e56 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	f107 030c 	add.w	r3, r7, #12
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fe fe26 	bl	8010a70 <follow_path>
 8011e24:	4603      	mov	r3, r0
 8011e26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8011e2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d111      	bne.n	8011e56 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8011e32:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011e36:	b25b      	sxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	da03      	bge.n	8011e44 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8011e3c:	2306      	movs	r3, #6
 8011e3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011e42:	e008      	b.n	8011e56 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d005      	beq.n	8011e56 <f_stat+0x66>
 8011e4a:	f107 030c 	add.w	r3, r7, #12
 8011e4e:	6839      	ldr	r1, [r7, #0]
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fe fd18 	bl	8010886 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8011e56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3740      	adds	r7, #64	@ 0x40
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}

08011e62 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b09e      	sub	sp, #120	@ 0x78
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011e6e:	f107 010c 	add.w	r1, r7, #12
 8011e72:	1d3b      	adds	r3, r7, #4
 8011e74:	2202      	movs	r2, #2
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fe ff06 	bl	8010c88 <find_volume>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8011e86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	f040 808e 	bne.w	8011fac <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011e96:	4611      	mov	r1, r2
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe fde9 	bl	8010a70 <follow_path>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011ea4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d108      	bne.n	8011ebe <f_unlink+0x5c>
 8011eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011eb0:	2102      	movs	r1, #2
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7fd fcf2 	bl	800f89c <chk_lock>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011ebe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d172      	bne.n	8011fac <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011ec6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8011eca:	b25b      	sxtb	r3, r3
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	da03      	bge.n	8011ed8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011ed0:	2306      	movs	r3, #6
 8011ed2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8011ed6:	e008      	b.n	8011eea <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011ed8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8011edc:	f003 0301 	and.w	r3, r3, #1
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d002      	beq.n	8011eea <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011ee4:	2307      	movs	r3, #7
 8011ee6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8011eea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d134      	bne.n	8011f5c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7fe fb83 	bl	8010604 <ld_clust>
 8011efe:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011f00:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8011f04:	f003 0310 	and.w	r3, r3, #16
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d027      	beq.n	8011f5c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f12:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011f14:	f107 0310 	add.w	r3, r7, #16
 8011f18:	2100      	movs	r1, #0
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe f9eb 	bl	80102f6 <dir_sdi>
 8011f20:	4603      	mov	r3, r0
 8011f22:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8011f26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d116      	bne.n	8011f5c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011f2e:	f107 0310 	add.w	r3, r7, #16
 8011f32:	2100      	movs	r1, #0
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fba4 	bl	8010682 <dir_read>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011f40:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d102      	bne.n	8011f4e <f_unlink+0xec>
 8011f48:	2307      	movs	r3, #7
 8011f4a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011f4e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011f52:	2b04      	cmp	r3, #4
 8011f54:	d102      	bne.n	8011f5c <f_unlink+0xfa>
 8011f56:	2300      	movs	r3, #0
 8011f58:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011f5c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d123      	bne.n	8011fac <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011f64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fe fc6e 	bl	801084a <dir_remove>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011f74:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10c      	bne.n	8011f96 <f_unlink+0x134>
 8011f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d009      	beq.n	8011f96 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011f82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011f86:	2200      	movs	r2, #0
 8011f88:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fe f882 	bl	8010094 <remove_chain>
 8011f90:	4603      	mov	r3, r0
 8011f92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011f96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <f_unlink+0x14a>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fd fe59 	bl	800fc58 <sync_fs>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011fac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3778      	adds	r7, #120	@ 0x78
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}

08011fb8 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 8011fb8:	b590      	push	{r4, r7, lr}
 8011fba:	b0a5      	sub	sp, #148	@ 0x94
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 8011fc2:	463b      	mov	r3, r7
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fe fdc4 	bl	8010b52 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8011fca:	f107 0120 	add.w	r1, r7, #32
 8011fce:	1d3b      	adds	r3, r7, #4
 8011fd0:	2202      	movs	r2, #2
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe fe58 	bl	8010c88 <find_volume>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 8011fde:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	f040 80db 	bne.w	801219e <f_rename+0x1e6>
		djo.obj.fs = fs;
 8011fe8:	6a3b      	ldr	r3, [r7, #32]
 8011fea:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe fd3b 	bl	8010a70 <follow_path>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8012000:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012004:	2b00      	cmp	r3, #0
 8012006:	d108      	bne.n	801201a <f_rename+0x62>
 8012008:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801200c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d002      	beq.n	801201a <f_rename+0x62>
 8012014:	2306      	movs	r3, #6
 8012016:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 801201a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801201e:	2b00      	cmp	r3, #0
 8012020:	d108      	bne.n	8012034 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 8012022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8012026:	2102      	movs	r1, #2
 8012028:	4618      	mov	r0, r3
 801202a:	f7fd fc37 	bl	800f89c <chk_lock>
 801202e:	4603      	mov	r3, r0
 8012030:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8012034:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012038:	2b00      	cmp	r3, #0
 801203a:	f040 80b0 	bne.w	801219e <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 801203e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012040:	f103 010b 	add.w	r1, r3, #11
 8012044:	f107 0308 	add.w	r3, r7, #8
 8012048:	2215      	movs	r2, #21
 801204a:	4618      	mov	r0, r3
 801204c:	f7fd fba8 	bl	800f7a0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8012050:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8012054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012058:	2230      	movs	r2, #48	@ 0x30
 801205a:	4618      	mov	r0, r3
 801205c:	f7fd fba0 	bl	800f7a0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8012060:	683a      	ldr	r2, [r7, #0]
 8012062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012066:	4611      	mov	r1, r2
 8012068:	4618      	mov	r0, r3
 801206a:	f7fe fd01 	bl	8010a70 <follow_path>
 801206e:	4603      	mov	r3, r0
 8012070:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8012074:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012078:	2b00      	cmp	r3, #0
 801207a:	d10c      	bne.n	8012096 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 801207c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801207e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012080:	429a      	cmp	r2, r3
 8012082:	d105      	bne.n	8012090 <f_rename+0xd8>
 8012084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012086:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012088:	429a      	cmp	r2, r3
 801208a:	d101      	bne.n	8012090 <f_rename+0xd8>
 801208c:	2304      	movs	r3, #4
 801208e:	e000      	b.n	8012092 <f_rename+0xda>
 8012090:	2308      	movs	r3, #8
 8012092:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8012096:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801209a:	2b04      	cmp	r3, #4
 801209c:	d168      	bne.n	8012170 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 801209e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7fe fb9f 	bl	80107e6 <dir_register>
 80120a8:	4603      	mov	r3, r0
 80120aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 80120ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d15c      	bne.n	8012170 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 80120b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 80120bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80120c0:	f103 000d 	add.w	r0, r3, #13
 80120c4:	f107 0308 	add.w	r3, r7, #8
 80120c8:	3302      	adds	r3, #2
 80120ca:	2213      	movs	r2, #19
 80120cc:	4619      	mov	r1, r3
 80120ce:	f7fd fb67 	bl	800f7a0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 80120d2:	7a3a      	ldrb	r2, [r7, #8]
 80120d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80120d8:	330b      	adds	r3, #11
 80120da:	f042 0220 	orr.w	r2, r2, #32
 80120de:	b2d2      	uxtb	r2, r2
 80120e0:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 80120e2:	6a3b      	ldr	r3, [r7, #32]
 80120e4:	2201      	movs	r2, #1
 80120e6:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 80120e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80120ec:	330b      	adds	r3, #11
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f003 0310 	and.w	r3, r3, #16
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d03b      	beq.n	8012170 <f_rename+0x1b8>
 80120f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80120fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d037      	beq.n	8012170 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8012100:	6a3c      	ldr	r4, [r7, #32]
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8012108:	4618      	mov	r0, r3
 801210a:	f7fe fa7b 	bl	8010604 <ld_clust>
 801210e:	4603      	mov	r3, r0
 8012110:	4619      	mov	r1, r3
 8012112:	4620      	mov	r0, r4
 8012114:	f7fd fe0e 	bl	800fd34 <clust2sect>
 8012118:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 801211c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012120:	2b00      	cmp	r3, #0
 8012122:	d103      	bne.n	801212c <f_rename+0x174>
								res = FR_INT_ERR;
 8012124:	2302      	movs	r3, #2
 8012126:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 801212a:	e021      	b.n	8012170 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 801212c:	6a3b      	ldr	r3, [r7, #32]
 801212e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8012132:	4618      	mov	r0, r3
 8012134:	f7fd fd62 	bl	800fbfc <move_window>
 8012138:	4603      	mov	r3, r0
 801213a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 801213e:	6a3b      	ldr	r3, [r7, #32]
 8012140:	3330      	adds	r3, #48	@ 0x30
 8012142:	3320      	adds	r3, #32
 8012144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8012148:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801214c:	2b00      	cmp	r3, #0
 801214e:	d10f      	bne.n	8012170 <f_rename+0x1b8>
 8012150:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012154:	3301      	adds	r3, #1
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	2b2e      	cmp	r3, #46	@ 0x2e
 801215a:	d109      	bne.n	8012170 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 801215c:	6a3b      	ldr	r3, [r7, #32]
 801215e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012160:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8012164:	4618      	mov	r0, r3
 8012166:	f7fe fa6c 	bl	8010642 <st_clust>
									fs->wflag = 1;
 801216a:	6a3b      	ldr	r3, [r7, #32]
 801216c:	2201      	movs	r2, #1
 801216e:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8012170:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8012174:	2b00      	cmp	r3, #0
 8012176:	d112      	bne.n	801219e <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8012178:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801217c:	4618      	mov	r0, r3
 801217e:	f7fe fb64 	bl	801084a <dir_remove>
 8012182:	4603      	mov	r3, r0
 8012184:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 8012188:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801218c:	2b00      	cmp	r3, #0
 801218e:	d106      	bne.n	801219e <f_rename+0x1e6>
					res = sync_fs(fs);
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	4618      	mov	r0, r3
 8012194:	f7fd fd60 	bl	800fc58 <sync_fs>
 8012198:	4603      	mov	r3, r0
 801219a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801219e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3794      	adds	r7, #148	@ 0x94
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd90      	pop	{r4, r7, pc}
	...

080121ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b087      	sub	sp, #28
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	4613      	mov	r3, r2
 80121b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80121ba:	2301      	movs	r3, #1
 80121bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80121c2:	4b1f      	ldr	r3, [pc, #124]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121c4:	7a5b      	ldrb	r3, [r3, #9]
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d131      	bne.n	8012230 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80121cc:	4b1c      	ldr	r3, [pc, #112]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121ce:	7a5b      	ldrb	r3, [r3, #9]
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	461a      	mov	r2, r3
 80121d4:	4b1a      	ldr	r3, [pc, #104]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121d6:	2100      	movs	r1, #0
 80121d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80121da:	4b19      	ldr	r3, [pc, #100]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121dc:	7a5b      	ldrb	r3, [r3, #9]
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	4a17      	ldr	r2, [pc, #92]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	4413      	add	r3, r2
 80121e6:	68fa      	ldr	r2, [r7, #12]
 80121e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80121ea:	4b15      	ldr	r3, [pc, #84]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121ec:	7a5b      	ldrb	r3, [r3, #9]
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	461a      	mov	r2, r3
 80121f2:	4b13      	ldr	r3, [pc, #76]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121f4:	4413      	add	r3, r2
 80121f6:	79fa      	ldrb	r2, [r7, #7]
 80121f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80121fa:	4b11      	ldr	r3, [pc, #68]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 80121fc:	7a5b      	ldrb	r3, [r3, #9]
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	1c5a      	adds	r2, r3, #1
 8012202:	b2d1      	uxtb	r1, r2
 8012204:	4a0e      	ldr	r2, [pc, #56]	@ (8012240 <FATFS_LinkDriverEx+0x94>)
 8012206:	7251      	strb	r1, [r2, #9]
 8012208:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801220a:	7dbb      	ldrb	r3, [r7, #22]
 801220c:	3330      	adds	r3, #48	@ 0x30
 801220e:	b2da      	uxtb	r2, r3
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	3301      	adds	r3, #1
 8012218:	223a      	movs	r2, #58	@ 0x3a
 801221a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	3302      	adds	r3, #2
 8012220:	222f      	movs	r2, #47	@ 0x2f
 8012222:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	3303      	adds	r3, #3
 8012228:	2200      	movs	r2, #0
 801222a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012230:	7dfb      	ldrb	r3, [r7, #23]
}
 8012232:	4618      	mov	r0, r3
 8012234:	371c      	adds	r7, #28
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	20000840 	.word	0x20000840

08012244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801224e:	2200      	movs	r2, #0
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7ff ffaa 	bl	80121ac <FATFS_LinkDriverEx>
 8012258:	4603      	mov	r3, r0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3708      	adds	r7, #8
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
	...

08012264 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012268:	2201      	movs	r2, #1
 801226a:	490e      	ldr	r1, [pc, #56]	@ (80122a4 <MX_USB_HOST_Init+0x40>)
 801226c:	480e      	ldr	r0, [pc, #56]	@ (80122a8 <MX_USB_HOST_Init+0x44>)
 801226e:	f7fb fc91 	bl	800db94 <USBH_Init>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d001      	beq.n	801227c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012278:	f7f0 f920 	bl	80024bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801227c:	490b      	ldr	r1, [pc, #44]	@ (80122ac <MX_USB_HOST_Init+0x48>)
 801227e:	480a      	ldr	r0, [pc, #40]	@ (80122a8 <MX_USB_HOST_Init+0x44>)
 8012280:	f7fb fd35 	bl	800dcee <USBH_RegisterClass>
 8012284:	4603      	mov	r3, r0
 8012286:	2b00      	cmp	r3, #0
 8012288:	d001      	beq.n	801228e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801228a:	f7f0 f917 	bl	80024bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801228e:	4806      	ldr	r0, [pc, #24]	@ (80122a8 <MX_USB_HOST_Init+0x44>)
 8012290:	f7fb fdb9 	bl	800de06 <USBH_Start>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d001      	beq.n	801229e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801229a:	f7f0 f90f 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801229e:	bf00      	nop
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	080122c5 	.word	0x080122c5
 80122a8:	2000084c 	.word	0x2000084c
 80122ac:	2000000c 	.word	0x2000000c

080122b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80122b4:	4802      	ldr	r0, [pc, #8]	@ (80122c0 <MX_USB_HOST_Process+0x10>)
 80122b6:	f7fb fdb7 	bl	800de28 <USBH_Process>
}
 80122ba:	bf00      	nop
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	2000084c 	.word	0x2000084c

080122c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	460b      	mov	r3, r1
 80122ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80122d0:	78fb      	ldrb	r3, [r7, #3]
 80122d2:	3b01      	subs	r3, #1
 80122d4:	2b04      	cmp	r3, #4
 80122d6:	d819      	bhi.n	801230c <USBH_UserProcess+0x48>
 80122d8:	a201      	add	r2, pc, #4	@ (adr r2, 80122e0 <USBH_UserProcess+0x1c>)
 80122da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122de:	bf00      	nop
 80122e0:	0801230d 	.word	0x0801230d
 80122e4:	080122fd 	.word	0x080122fd
 80122e8:	0801230d 	.word	0x0801230d
 80122ec:	08012305 	.word	0x08012305
 80122f0:	080122f5 	.word	0x080122f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80122f4:	4b09      	ldr	r3, [pc, #36]	@ (801231c <USBH_UserProcess+0x58>)
 80122f6:	2203      	movs	r2, #3
 80122f8:	701a      	strb	r2, [r3, #0]
  break;
 80122fa:	e008      	b.n	801230e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80122fc:	4b07      	ldr	r3, [pc, #28]	@ (801231c <USBH_UserProcess+0x58>)
 80122fe:	2202      	movs	r2, #2
 8012300:	701a      	strb	r2, [r3, #0]
  break;
 8012302:	e004      	b.n	801230e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012304:	4b05      	ldr	r3, [pc, #20]	@ (801231c <USBH_UserProcess+0x58>)
 8012306:	2201      	movs	r2, #1
 8012308:	701a      	strb	r2, [r3, #0]
  break;
 801230a:	e000      	b.n	801230e <USBH_UserProcess+0x4a>

  default:
  break;
 801230c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801230e:	bf00      	nop
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	20000c24 	.word	0x20000c24

08012320 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b08a      	sub	sp, #40	@ 0x28
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012328:	f107 0314 	add.w	r3, r7, #20
 801232c:	2200      	movs	r2, #0
 801232e:	601a      	str	r2, [r3, #0]
 8012330:	605a      	str	r2, [r3, #4]
 8012332:	609a      	str	r2, [r3, #8]
 8012334:	60da      	str	r2, [r3, #12]
 8012336:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012340:	d147      	bne.n	80123d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012342:	2300      	movs	r3, #0
 8012344:	613b      	str	r3, [r7, #16]
 8012346:	4b25      	ldr	r3, [pc, #148]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 8012348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801234a:	4a24      	ldr	r2, [pc, #144]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 801234c:	f043 0301 	orr.w	r3, r3, #1
 8012350:	6313      	str	r3, [r2, #48]	@ 0x30
 8012352:	4b22      	ldr	r3, [pc, #136]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 8012354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012356:	f003 0301 	and.w	r3, r3, #1
 801235a:	613b      	str	r3, [r7, #16]
 801235c:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 801235e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8012362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012364:	2302      	movs	r3, #2
 8012366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012368:	2300      	movs	r3, #0
 801236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801236c:	2303      	movs	r3, #3
 801236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012370:	230a      	movs	r3, #10
 8012372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012374:	f107 0314 	add.w	r3, r7, #20
 8012378:	4619      	mov	r1, r3
 801237a:	4819      	ldr	r0, [pc, #100]	@ (80123e0 <HAL_HCD_MspInit+0xc0>)
 801237c:	f7f2 fc2a 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8012380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012386:	2302      	movs	r3, #2
 8012388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801238a:	2300      	movs	r3, #0
 801238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 801238e:	f107 0314 	add.w	r3, r7, #20
 8012392:	4619      	mov	r1, r3
 8012394:	4812      	ldr	r0, [pc, #72]	@ (80123e0 <HAL_HCD_MspInit+0xc0>)
 8012396:	f7f2 fc1d 	bl	8004bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801239a:	4b10      	ldr	r3, [pc, #64]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 801239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801239e:	4a0f      	ldr	r2, [pc, #60]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 80123a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80123a6:	2300      	movs	r3, #0
 80123a8:	60fb      	str	r3, [r7, #12]
 80123aa:	4b0c      	ldr	r3, [pc, #48]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 80123ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123ae:	4a0b      	ldr	r2, [pc, #44]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 80123b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80123b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80123b6:	4b09      	ldr	r3, [pc, #36]	@ (80123dc <HAL_HCD_MspInit+0xbc>)
 80123b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80123be:	60fb      	str	r3, [r7, #12]
 80123c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80123c2:	2200      	movs	r2, #0
 80123c4:	2100      	movs	r1, #0
 80123c6:	2043      	movs	r0, #67	@ 0x43
 80123c8:	f7f1 f82c 	bl	8003424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80123cc:	2043      	movs	r0, #67	@ 0x43
 80123ce:	f7f1 f845 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80123d2:	bf00      	nop
 80123d4:	3728      	adds	r7, #40	@ 0x28
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	40023800 	.word	0x40023800
 80123e0:	40020000 	.word	0x40020000

080123e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b082      	sub	sp, #8
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fc f8ef 	bl	800e5d6 <USBH_LL_IncTimer>
}
 80123f8:	bf00      	nop
 80123fa:	3708      	adds	r7, #8
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801240e:	4618      	mov	r0, r3
 8012410:	f7fc f927 	bl	800e662 <USBH_LL_Connect>
}
 8012414:	bf00      	nop
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801242a:	4618      	mov	r0, r3
 801242c:	f7fc f930 	bl	800e690 <USBH_LL_Disconnect>
}
 8012430:	bf00      	nop
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012438:	b480      	push	{r7}
 801243a:	b083      	sub	sp, #12
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	460b      	mov	r3, r1
 8012442:	70fb      	strb	r3, [r7, #3]
 8012444:	4613      	mov	r3, r2
 8012446:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012448:	bf00      	nop
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr

08012454 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012462:	4618      	mov	r0, r3
 8012464:	f7fc f8e1 	bl	800e62a <USBH_LL_PortEnabled>
}
 8012468:	bf00      	nop
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801247e:	4618      	mov	r0, r3
 8012480:	f7fc f8e1 	bl	800e646 <USBH_LL_PortDisabled>
}
 8012484:	bf00      	nop
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801249a:	2b01      	cmp	r3, #1
 801249c:	d12a      	bne.n	80124f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801249e:	4a18      	ldr	r2, [pc, #96]	@ (8012500 <USBH_LL_Init+0x74>)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4a15      	ldr	r2, [pc, #84]	@ (8012500 <USBH_LL_Init+0x74>)
 80124aa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80124ae:	4b14      	ldr	r3, [pc, #80]	@ (8012500 <USBH_LL_Init+0x74>)
 80124b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80124b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80124b6:	4b12      	ldr	r3, [pc, #72]	@ (8012500 <USBH_LL_Init+0x74>)
 80124b8:	2208      	movs	r2, #8
 80124ba:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80124bc:	4b10      	ldr	r3, [pc, #64]	@ (8012500 <USBH_LL_Init+0x74>)
 80124be:	2201      	movs	r2, #1
 80124c0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80124c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012500 <USBH_LL_Init+0x74>)
 80124c4:	2200      	movs	r2, #0
 80124c6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80124c8:	4b0d      	ldr	r3, [pc, #52]	@ (8012500 <USBH_LL_Init+0x74>)
 80124ca:	2202      	movs	r2, #2
 80124cc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80124ce:	4b0c      	ldr	r3, [pc, #48]	@ (8012500 <USBH_LL_Init+0x74>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80124d4:	480a      	ldr	r0, [pc, #40]	@ (8012500 <USBH_LL_Init+0x74>)
 80124d6:	f7f2 fd5a 	bl	8004f8e <HAL_HCD_Init>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80124e0:	f7ef ffec 	bl	80024bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80124e4:	4806      	ldr	r0, [pc, #24]	@ (8012500 <USBH_LL_Init+0x74>)
 80124e6:	f7f3 f9bb 	bl	8005860 <HAL_HCD_GetCurrentFrame>
 80124ea:	4603      	mov	r3, r0
 80124ec:	4619      	mov	r1, r3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7fc f862 	bl	800e5b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	20000c28 	.word	0x20000c28

08012504 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801250c:	2300      	movs	r3, #0
 801250e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012510:	2300      	movs	r3, #0
 8012512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801251a:	4618      	mov	r0, r3
 801251c:	f7f3 f928 	bl	8005770 <HAL_HCD_Start>
 8012520:	4603      	mov	r3, r0
 8012522:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012524:	7bfb      	ldrb	r3, [r7, #15]
 8012526:	4618      	mov	r0, r3
 8012528:	f000 f95e 	bl	80127e8 <USBH_Get_USB_Status>
 801252c:	4603      	mov	r3, r0
 801252e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012530:	7bbb      	ldrb	r3, [r7, #14]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3710      	adds	r7, #16
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801253a:	b580      	push	{r7, lr}
 801253c:	b084      	sub	sp, #16
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012546:	2300      	movs	r3, #0
 8012548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012550:	4618      	mov	r0, r3
 8012552:	f7f3 f930 	bl	80057b6 <HAL_HCD_Stop>
 8012556:	4603      	mov	r3, r0
 8012558:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801255a:	7bfb      	ldrb	r3, [r7, #15]
 801255c:	4618      	mov	r0, r3
 801255e:	f000 f943 	bl	80127e8 <USBH_Get_USB_Status>
 8012562:	4603      	mov	r3, r0
 8012564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012566:	7bbb      	ldrb	r3, [r7, #14]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3710      	adds	r7, #16
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012578:	2301      	movs	r3, #1
 801257a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012582:	4618      	mov	r0, r3
 8012584:	f7f3 f97a 	bl	800587c <HAL_HCD_GetCurrentSpeed>
 8012588:	4603      	mov	r3, r0
 801258a:	2b02      	cmp	r3, #2
 801258c:	d00c      	beq.n	80125a8 <USBH_LL_GetSpeed+0x38>
 801258e:	2b02      	cmp	r3, #2
 8012590:	d80d      	bhi.n	80125ae <USBH_LL_GetSpeed+0x3e>
 8012592:	2b00      	cmp	r3, #0
 8012594:	d002      	beq.n	801259c <USBH_LL_GetSpeed+0x2c>
 8012596:	2b01      	cmp	r3, #1
 8012598:	d003      	beq.n	80125a2 <USBH_LL_GetSpeed+0x32>
 801259a:	e008      	b.n	80125ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801259c:	2300      	movs	r3, #0
 801259e:	73fb      	strb	r3, [r7, #15]
    break;
 80125a0:	e008      	b.n	80125b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80125a2:	2301      	movs	r3, #1
 80125a4:	73fb      	strb	r3, [r7, #15]
    break;
 80125a6:	e005      	b.n	80125b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80125a8:	2302      	movs	r3, #2
 80125aa:	73fb      	strb	r3, [r7, #15]
    break;
 80125ac:	e002      	b.n	80125b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80125ae:	2301      	movs	r3, #1
 80125b0:	73fb      	strb	r3, [r7, #15]
    break;
 80125b2:	bf00      	nop
  }
  return  speed;
 80125b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3710      	adds	r7, #16
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b084      	sub	sp, #16
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125c6:	2300      	movs	r3, #0
 80125c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80125ca:	2300      	movs	r3, #0
 80125cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7f3 f90b 	bl	80057f0 <HAL_HCD_ResetPort>
 80125da:	4603      	mov	r3, r0
 80125dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80125de:	7bfb      	ldrb	r3, [r7, #15]
 80125e0:	4618      	mov	r0, r3
 80125e2:	f000 f901 	bl	80127e8 <USBH_Get_USB_Status>
 80125e6:	4603      	mov	r3, r0
 80125e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012606:	78fa      	ldrb	r2, [r7, #3]
 8012608:	4611      	mov	r1, r2
 801260a:	4618      	mov	r0, r3
 801260c:	f7f3 f913 	bl	8005836 <HAL_HCD_HC_GetXferCount>
 8012610:	4603      	mov	r3, r0
}
 8012612:	4618      	mov	r0, r3
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801261a:	b590      	push	{r4, r7, lr}
 801261c:	b089      	sub	sp, #36	@ 0x24
 801261e:	af04      	add	r7, sp, #16
 8012620:	6078      	str	r0, [r7, #4]
 8012622:	4608      	mov	r0, r1
 8012624:	4611      	mov	r1, r2
 8012626:	461a      	mov	r2, r3
 8012628:	4603      	mov	r3, r0
 801262a:	70fb      	strb	r3, [r7, #3]
 801262c:	460b      	mov	r3, r1
 801262e:	70bb      	strb	r3, [r7, #2]
 8012630:	4613      	mov	r3, r2
 8012632:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012634:	2300      	movs	r3, #0
 8012636:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012638:	2300      	movs	r3, #0
 801263a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012642:	787c      	ldrb	r4, [r7, #1]
 8012644:	78ba      	ldrb	r2, [r7, #2]
 8012646:	78f9      	ldrb	r1, [r7, #3]
 8012648:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801264a:	9302      	str	r3, [sp, #8]
 801264c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012650:	9301      	str	r3, [sp, #4]
 8012652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	4623      	mov	r3, r4
 801265a:	f7f2 fcff 	bl	800505c <HAL_HCD_HC_Init>
 801265e:	4603      	mov	r3, r0
 8012660:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012662:	7bfb      	ldrb	r3, [r7, #15]
 8012664:	4618      	mov	r0, r3
 8012666:	f000 f8bf 	bl	80127e8 <USBH_Get_USB_Status>
 801266a:	4603      	mov	r3, r0
 801266c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801266e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012670:	4618      	mov	r0, r3
 8012672:	3714      	adds	r7, #20
 8012674:	46bd      	mov	sp, r7
 8012676:	bd90      	pop	{r4, r7, pc}

08012678 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	460b      	mov	r3, r1
 8012682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012684:	2300      	movs	r3, #0
 8012686:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012688:	2300      	movs	r3, #0
 801268a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012692:	78fa      	ldrb	r2, [r7, #3]
 8012694:	4611      	mov	r1, r2
 8012696:	4618      	mov	r0, r3
 8012698:	f7f2 fd98 	bl	80051cc <HAL_HCD_HC_Halt>
 801269c:	4603      	mov	r3, r0
 801269e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80126a0:	7bfb      	ldrb	r3, [r7, #15]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f000 f8a0 	bl	80127e8 <USBH_Get_USB_Status>
 80126a8:	4603      	mov	r3, r0
 80126aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80126b6:	b590      	push	{r4, r7, lr}
 80126b8:	b089      	sub	sp, #36	@ 0x24
 80126ba:	af04      	add	r7, sp, #16
 80126bc:	6078      	str	r0, [r7, #4]
 80126be:	4608      	mov	r0, r1
 80126c0:	4611      	mov	r1, r2
 80126c2:	461a      	mov	r2, r3
 80126c4:	4603      	mov	r3, r0
 80126c6:	70fb      	strb	r3, [r7, #3]
 80126c8:	460b      	mov	r3, r1
 80126ca:	70bb      	strb	r3, [r7, #2]
 80126cc:	4613      	mov	r3, r2
 80126ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80126d4:	2300      	movs	r3, #0
 80126d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80126de:	787c      	ldrb	r4, [r7, #1]
 80126e0:	78ba      	ldrb	r2, [r7, #2]
 80126e2:	78f9      	ldrb	r1, [r7, #3]
 80126e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80126e8:	9303      	str	r3, [sp, #12]
 80126ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80126ec:	9302      	str	r3, [sp, #8]
 80126ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f0:	9301      	str	r3, [sp, #4]
 80126f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80126f6:	9300      	str	r3, [sp, #0]
 80126f8:	4623      	mov	r3, r4
 80126fa:	f7f2 fd8b 	bl	8005214 <HAL_HCD_HC_SubmitRequest>
 80126fe:	4603      	mov	r3, r0
 8012700:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012702:	7bfb      	ldrb	r3, [r7, #15]
 8012704:	4618      	mov	r0, r3
 8012706:	f000 f86f 	bl	80127e8 <USBH_Get_USB_Status>
 801270a:	4603      	mov	r3, r0
 801270c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801270e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012710:	4618      	mov	r0, r3
 8012712:	3714      	adds	r7, #20
 8012714:	46bd      	mov	sp, r7
 8012716:	bd90      	pop	{r4, r7, pc}

08012718 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801272a:	78fa      	ldrb	r2, [r7, #3]
 801272c:	4611      	mov	r1, r2
 801272e:	4618      	mov	r0, r3
 8012730:	f7f3 f86c 	bl	800580c <HAL_HCD_HC_GetURBState>
 8012734:	4603      	mov	r3, r0
}
 8012736:	4618      	mov	r0, r3
 8012738:	3708      	adds	r7, #8
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}

0801273e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b082      	sub	sp, #8
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	460b      	mov	r3, r1
 8012748:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012750:	2b01      	cmp	r3, #1
 8012752:	d103      	bne.n	801275c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012754:	78fb      	ldrb	r3, [r7, #3]
 8012756:	4618      	mov	r0, r3
 8012758:	f000 f872 	bl	8012840 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801275c:	20c8      	movs	r0, #200	@ 0xc8
 801275e:	f7f0 fd85 	bl	800326c <HAL_Delay>
  return USBH_OK;
 8012762:	2300      	movs	r3, #0
}
 8012764:	4618      	mov	r0, r3
 8012766:	3708      	adds	r7, #8
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	460b      	mov	r3, r1
 8012776:	70fb      	strb	r3, [r7, #3]
 8012778:	4613      	mov	r3, r2
 801277a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012782:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012784:	78fa      	ldrb	r2, [r7, #3]
 8012786:	68f9      	ldr	r1, [r7, #12]
 8012788:	4613      	mov	r3, r2
 801278a:	011b      	lsls	r3, r3, #4
 801278c:	1a9b      	subs	r3, r3, r2
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	440b      	add	r3, r1
 8012792:	3317      	adds	r3, #23
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d00a      	beq.n	80127b0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801279a:	78fa      	ldrb	r2, [r7, #3]
 801279c:	68f9      	ldr	r1, [r7, #12]
 801279e:	4613      	mov	r3, r2
 80127a0:	011b      	lsls	r3, r3, #4
 80127a2:	1a9b      	subs	r3, r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	440b      	add	r3, r1
 80127a8:	333c      	adds	r3, #60	@ 0x3c
 80127aa:	78ba      	ldrb	r2, [r7, #2]
 80127ac:	701a      	strb	r2, [r3, #0]
 80127ae:	e009      	b.n	80127c4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80127b0:	78fa      	ldrb	r2, [r7, #3]
 80127b2:	68f9      	ldr	r1, [r7, #12]
 80127b4:	4613      	mov	r3, r2
 80127b6:	011b      	lsls	r3, r3, #4
 80127b8:	1a9b      	subs	r3, r3, r2
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	440b      	add	r3, r1
 80127be:	333d      	adds	r3, #61	@ 0x3d
 80127c0:	78ba      	ldrb	r2, [r7, #2]
 80127c2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80127c4:	2300      	movs	r3, #0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3714      	adds	r7, #20
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80127d2:	b580      	push	{r7, lr}
 80127d4:	b082      	sub	sp, #8
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7f0 fd46 	bl	800326c <HAL_Delay>
}
 80127e0:	bf00      	nop
 80127e2:	3708      	adds	r7, #8
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	4603      	mov	r3, r0
 80127f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80127f2:	2300      	movs	r3, #0
 80127f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80127f6:	79fb      	ldrb	r3, [r7, #7]
 80127f8:	2b03      	cmp	r3, #3
 80127fa:	d817      	bhi.n	801282c <USBH_Get_USB_Status+0x44>
 80127fc:	a201      	add	r2, pc, #4	@ (adr r2, 8012804 <USBH_Get_USB_Status+0x1c>)
 80127fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012802:	bf00      	nop
 8012804:	08012815 	.word	0x08012815
 8012808:	0801281b 	.word	0x0801281b
 801280c:	08012821 	.word	0x08012821
 8012810:	08012827 	.word	0x08012827
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012814:	2300      	movs	r3, #0
 8012816:	73fb      	strb	r3, [r7, #15]
    break;
 8012818:	e00b      	b.n	8012832 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801281a:	2302      	movs	r3, #2
 801281c:	73fb      	strb	r3, [r7, #15]
    break;
 801281e:	e008      	b.n	8012832 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012820:	2301      	movs	r3, #1
 8012822:	73fb      	strb	r3, [r7, #15]
    break;
 8012824:	e005      	b.n	8012832 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012826:	2302      	movs	r3, #2
 8012828:	73fb      	strb	r3, [r7, #15]
    break;
 801282a:	e002      	b.n	8012832 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801282c:	2302      	movs	r3, #2
 801282e:	73fb      	strb	r3, [r7, #15]
    break;
 8012830:	bf00      	nop
  }
  return usb_status;
 8012832:	7bfb      	ldrb	r3, [r7, #15]
}
 8012834:	4618      	mov	r0, r3
 8012836:	3714      	adds	r7, #20
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr

08012840 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	4603      	mov	r3, r0
 8012848:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801284a:	79fb      	ldrb	r3, [r7, #7]
 801284c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801284e:	79fb      	ldrb	r3, [r7, #7]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d102      	bne.n	801285a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012854:	2300      	movs	r3, #0
 8012856:	73fb      	strb	r3, [r7, #15]
 8012858:	e001      	b.n	801285e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801285a:	2301      	movs	r3, #1
 801285c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 801285e:	7bfb      	ldrb	r3, [r7, #15]
 8012860:	461a      	mov	r2, r3
 8012862:	2104      	movs	r1, #4
 8012864:	4803      	ldr	r0, [pc, #12]	@ (8012874 <MX_DriverVbusFS+0x34>)
 8012866:	f7f2 fb79 	bl	8004f5c <HAL_GPIO_WritePin>
}
 801286a:	bf00      	nop
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	40020400 	.word	0x40020400

08012878 <_ZdlPvj>:
 8012878:	f000 b9bc 	b.w	8012bf4 <_ZdlPv>

0801287c <_Znwj>:
 801287c:	2801      	cmp	r0, #1
 801287e:	bf38      	it	cc
 8012880:	2001      	movcc	r0, #1
 8012882:	b510      	push	{r4, lr}
 8012884:	4604      	mov	r4, r0
 8012886:	4620      	mov	r0, r4
 8012888:	f000 f9c6 	bl	8012c18 <malloc>
 801288c:	b100      	cbz	r0, 8012890 <_Znwj+0x14>
 801288e:	bd10      	pop	{r4, pc}
 8012890:	f000 f9b2 	bl	8012bf8 <_ZSt15get_new_handlerv>
 8012894:	b908      	cbnz	r0, 801289a <_Znwj+0x1e>
 8012896:	f000 f9b7 	bl	8012c08 <abort>
 801289a:	4780      	blx	r0
 801289c:	e7f3      	b.n	8012886 <_Znwj+0xa>

0801289e <_ZNSaIcEC1Ev>:
 801289e:	4770      	bx	lr

080128a0 <_ZNSaIcED1Ev>:
 80128a0:	4770      	bx	lr

080128a2 <_ZSt17__throw_bad_allocv>:
 80128a2:	b508      	push	{r3, lr}
 80128a4:	f000 f9b0 	bl	8012c08 <abort>

080128a8 <_ZSt28__throw_bad_array_new_lengthv>:
 80128a8:	b508      	push	{r3, lr}
 80128aa:	f000 f9ad 	bl	8012c08 <abort>

080128ae <_ZSt19__throw_logic_errorPKc>:
 80128ae:	b508      	push	{r3, lr}
 80128b0:	f000 f9aa 	bl	8012c08 <abort>

080128b4 <_ZSt20__throw_length_errorPKc>:
 80128b4:	b508      	push	{r3, lr}
 80128b6:	f000 f9a7 	bl	8012c08 <abort>

080128ba <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80128ba:	b10a      	cbz	r2, 80128c0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80128bc:	f000 bd5d 	b.w	801337a <memcpy>
 80128c0:	4770      	bx	lr

080128c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80128c2:	f850 3b08 	ldr.w	r3, [r0], #8
 80128c6:	1a1b      	subs	r3, r3, r0
 80128c8:	4258      	negs	r0, r3
 80128ca:	4158      	adcs	r0, r3
 80128cc:	4770      	bx	lr
	...

080128d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80128d0:	b508      	push	{r3, lr}
 80128d2:	680b      	ldr	r3, [r1, #0]
 80128d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128d8:	d302      	bcc.n	80128e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80128da:	480d      	ldr	r0, [pc, #52]	@ (8012910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80128dc:	f7ff ffea 	bl	80128b4 <_ZSt20__throw_length_errorPKc>
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d90b      	bls.n	80128fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80128e4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80128e8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80128ec:	d206      	bcs.n	80128fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80128ee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80128f2:	bf2a      	itet	cs
 80128f4:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80128f8:	6008      	strcc	r0, [r1, #0]
 80128fa:	600b      	strcs	r3, [r1, #0]
 80128fc:	6808      	ldr	r0, [r1, #0]
 80128fe:	3001      	adds	r0, #1
 8012900:	d501      	bpl.n	8012906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012902:	f7ff ffce 	bl	80128a2 <_ZSt17__throw_bad_allocv>
 8012906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801290a:	f7ff bfb7 	b.w	801287c <_Znwj>
 801290e:	bf00      	nop
 8012910:	08013ec4 	.word	0x08013ec4

08012914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012914:	b510      	push	{r4, lr}
 8012916:	4604      	mov	r4, r0
 8012918:	f7ff ffd3 	bl	80128c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801291c:	b920      	cbnz	r0, 8012928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801291e:	6820      	ldr	r0, [r4, #0]
 8012920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012924:	f000 b966 	b.w	8012bf4 <_ZdlPv>
 8012928:	bd10      	pop	{r4, pc}

0801292a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801292a:	6840      	ldr	r0, [r0, #4]
 801292c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8012930:	3901      	subs	r1, #1
 8012932:	1a09      	subs	r1, r1, r0
 8012934:	4291      	cmp	r1, r2
 8012936:	b508      	push	{r3, lr}
 8012938:	d202      	bcs.n	8012940 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff ffba 	bl	80128b4 <_ZSt20__throw_length_errorPKc>
 8012940:	bd08      	pop	{r3, pc}

08012942 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8012942:	6803      	ldr	r3, [r0, #0]
 8012944:	428b      	cmp	r3, r1
 8012946:	d806      	bhi.n	8012956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8012948:	6842      	ldr	r2, [r0, #4]
 801294a:	4413      	add	r3, r2
 801294c:	4299      	cmp	r1, r3
 801294e:	bf94      	ite	ls
 8012950:	2000      	movls	r0, #0
 8012952:	2001      	movhi	r0, #1
 8012954:	4770      	bx	lr
 8012956:	2001      	movs	r0, #1
 8012958:	4770      	bx	lr

0801295a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801295a:	2a01      	cmp	r2, #1
 801295c:	b410      	push	{r4}
 801295e:	d104      	bne.n	801296a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8012960:	780a      	ldrb	r2, [r1, #0]
 8012962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012966:	7002      	strb	r2, [r0, #0]
 8012968:	4770      	bx	lr
 801296a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801296e:	f7ff bfa4 	b.w	80128ba <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08012972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012972:	2a01      	cmp	r2, #1
 8012974:	b430      	push	{r4, r5}
 8012976:	d103      	bne.n	8012980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8012978:	780b      	ldrb	r3, [r1, #0]
 801297a:	7003      	strb	r3, [r0, #0]
 801297c:	bc30      	pop	{r4, r5}
 801297e:	4770      	bx	lr
 8012980:	2a00      	cmp	r2, #0
 8012982:	d0fb      	beq.n	801297c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012984:	bc30      	pop	{r4, r5}
 8012986:	f000 bc0f 	b.w	80131a8 <memmove>

0801298a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801298a:	b508      	push	{r3, lr}
 801298c:	1a52      	subs	r2, r2, r1
 801298e:	f7ff ffe4 	bl	801295a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012992:	bd08      	pop	{r3, pc}

08012994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8012994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012996:	f100 0708 	add.w	r7, r0, #8
 801299a:	6007      	str	r7, [r0, #0]
 801299c:	4605      	mov	r5, r0
 801299e:	4608      	mov	r0, r1
 80129a0:	460c      	mov	r4, r1
 80129a2:	f7ff ff8e 	bl	80128c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80129a6:	f104 0608 	add.w	r6, r4, #8
 80129aa:	6862      	ldr	r2, [r4, #4]
 80129ac:	b160      	cbz	r0, 80129c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 80129ae:	3201      	adds	r2, #1
 80129b0:	4631      	mov	r1, r6
 80129b2:	4638      	mov	r0, r7
 80129b4:	f7ff ff81 	bl	80128ba <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 80129b8:	6863      	ldr	r3, [r4, #4]
 80129ba:	606b      	str	r3, [r5, #4]
 80129bc:	2300      	movs	r3, #0
 80129be:	7223      	strb	r3, [r4, #8]
 80129c0:	6026      	str	r6, [r4, #0]
 80129c2:	6063      	str	r3, [r4, #4]
 80129c4:	4628      	mov	r0, r5
 80129c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c8:	6823      	ldr	r3, [r4, #0]
 80129ca:	602b      	str	r3, [r5, #0]
 80129cc:	68a3      	ldr	r3, [r4, #8]
 80129ce:	60ab      	str	r3, [r5, #8]
 80129d0:	e7f2      	b.n	80129b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

080129d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80129d2:	b510      	push	{r4, lr}
 80129d4:	4604      	mov	r4, r0
 80129d6:	f7ff ff9d 	bl	8012914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80129da:	4620      	mov	r0, r4
 80129dc:	bd10      	pop	{r4, pc}

080129de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80129de:	b510      	push	{r4, lr}
 80129e0:	4604      	mov	r4, r0
 80129e2:	f7ff ff6e 	bl	80128c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80129e6:	b908      	cbnz	r0, 80129ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80129e8:	68a0      	ldr	r0, [r4, #8]
 80129ea:	bd10      	pop	{r4, pc}
 80129ec:	200f      	movs	r0, #15
 80129ee:	e7fc      	b.n	80129ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080129f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80129f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80129f4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80129f6:	461f      	mov	r7, r3
 80129f8:	6843      	ldr	r3, [r0, #4]
 80129fa:	eb01 0802 	add.w	r8, r1, r2
 80129fe:	1ab2      	subs	r2, r6, r2
 8012a00:	441a      	add	r2, r3
 8012a02:	4604      	mov	r4, r0
 8012a04:	460d      	mov	r5, r1
 8012a06:	eba3 0908 	sub.w	r9, r3, r8
 8012a0a:	9201      	str	r2, [sp, #4]
 8012a0c:	f7ff ffe7 	bl	80129de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012a10:	a901      	add	r1, sp, #4
 8012a12:	4602      	mov	r2, r0
 8012a14:	4620      	mov	r0, r4
 8012a16:	f7ff ff5b 	bl	80128d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012a1a:	4682      	mov	sl, r0
 8012a1c:	b11d      	cbz	r5, 8012a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8012a1e:	6821      	ldr	r1, [r4, #0]
 8012a20:	462a      	mov	r2, r5
 8012a22:	f7ff ff9a 	bl	801295a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012a26:	b137      	cbz	r7, 8012a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012a28:	b12e      	cbz	r6, 8012a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012a2a:	4632      	mov	r2, r6
 8012a2c:	4639      	mov	r1, r7
 8012a2e:	eb0a 0005 	add.w	r0, sl, r5
 8012a32:	f7ff ff92 	bl	801295a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012a36:	f1b9 0f00 	cmp.w	r9, #0
 8012a3a:	d007      	beq.n	8012a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8012a3c:	6821      	ldr	r1, [r4, #0]
 8012a3e:	4435      	add	r5, r6
 8012a40:	464a      	mov	r2, r9
 8012a42:	4441      	add	r1, r8
 8012a44:	eb0a 0005 	add.w	r0, sl, r5
 8012a48:	f7ff ff87 	bl	801295a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f7ff ff61 	bl	8012914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012a52:	9b01      	ldr	r3, [sp, #4]
 8012a54:	f8c4 a000 	str.w	sl, [r4]
 8012a58:	60a3      	str	r3, [r4, #8]
 8012a5a:	b002      	add	sp, #8
 8012a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8012a60:	6802      	ldr	r2, [r0, #0]
 8012a62:	2300      	movs	r3, #0
 8012a64:	6043      	str	r3, [r0, #4]
 8012a66:	7013      	strb	r3, [r2, #0]
 8012a68:	4770      	bx	lr
	...

08012a6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8012a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a70:	b085      	sub	sp, #20
 8012a72:	4680      	mov	r8, r0
 8012a74:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8012a76:	4614      	mov	r4, r2
 8012a78:	4689      	mov	r9, r1
 8012a7a:	462a      	mov	r2, r5
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	461f      	mov	r7, r3
 8012a80:	4b37      	ldr	r3, [pc, #220]	@ (8012b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8012a82:	f7ff ff52 	bl	801292a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012a86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012a8a:	9303      	str	r3, [sp, #12]
 8012a8c:	eba5 0b04 	sub.w	fp, r5, r4
 8012a90:	4640      	mov	r0, r8
 8012a92:	eb03 0a0b 	add.w	sl, r3, fp
 8012a96:	f7ff ffa2 	bl	80129de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012a9a:	4550      	cmp	r0, sl
 8012a9c:	d354      	bcc.n	8012b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8012a9e:	f8d8 6000 	ldr.w	r6, [r8]
 8012aa2:	9b03      	ldr	r3, [sp, #12]
 8012aa4:	444e      	add	r6, r9
 8012aa6:	4639      	mov	r1, r7
 8012aa8:	44a1      	add	r9, r4
 8012aaa:	4640      	mov	r0, r8
 8012aac:	eba3 0909 	sub.w	r9, r3, r9
 8012ab0:	f7ff ff47 	bl	8012942 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8012ab4:	b180      	cbz	r0, 8012ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8012ab6:	f1b9 0f00 	cmp.w	r9, #0
 8012aba:	d006      	beq.n	8012aca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8012abc:	42ac      	cmp	r4, r5
 8012abe:	d004      	beq.n	8012aca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8012ac0:	464a      	mov	r2, r9
 8012ac2:	1931      	adds	r1, r6, r4
 8012ac4:	1970      	adds	r0, r6, r5
 8012ac6:	f7ff ff54 	bl	8012972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012aca:	b315      	cbz	r5, 8012b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012acc:	462a      	mov	r2, r5
 8012ace:	4639      	mov	r1, r7
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f7ff ff42 	bl	801295a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012ad6:	e01c      	b.n	8012b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012ad8:	b135      	cbz	r5, 8012ae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8012ada:	42ac      	cmp	r4, r5
 8012adc:	d33c      	bcc.n	8012b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8012ade:	462a      	mov	r2, r5
 8012ae0:	4639      	mov	r1, r7
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	f7ff ff45 	bl	8012972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012ae8:	f1b9 0f00 	cmp.w	r9, #0
 8012aec:	d011      	beq.n	8012b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012aee:	42ac      	cmp	r4, r5
 8012af0:	d00f      	beq.n	8012b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012af2:	464a      	mov	r2, r9
 8012af4:	1931      	adds	r1, r6, r4
 8012af6:	1970      	adds	r0, r6, r5
 8012af8:	f7ff ff3b 	bl	8012972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012afc:	42ac      	cmp	r4, r5
 8012afe:	d208      	bcs.n	8012b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012b00:	4434      	add	r4, r6
 8012b02:	197b      	adds	r3, r7, r5
 8012b04:	429c      	cmp	r4, r3
 8012b06:	d30f      	bcc.n	8012b28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8012b08:	462a      	mov	r2, r5
 8012b0a:	4639      	mov	r1, r7
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f7ff ff30 	bl	8012972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012b12:	f8d8 3000 	ldr.w	r3, [r8]
 8012b16:	f8c8 a004 	str.w	sl, [r8, #4]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	f803 200a 	strb.w	r2, [r3, sl]
 8012b22:	b005      	add	sp, #20
 8012b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b28:	42bc      	cmp	r4, r7
 8012b2a:	d803      	bhi.n	8012b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8012b2c:	462a      	mov	r2, r5
 8012b2e:	eb07 010b 	add.w	r1, r7, fp
 8012b32:	e7cd      	b.n	8012ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8012b34:	1be4      	subs	r4, r4, r7
 8012b36:	4622      	mov	r2, r4
 8012b38:	4639      	mov	r1, r7
 8012b3a:	4630      	mov	r0, r6
 8012b3c:	f7ff ff19 	bl	8012972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012b40:	1b2a      	subs	r2, r5, r4
 8012b42:	1971      	adds	r1, r6, r5
 8012b44:	1930      	adds	r0, r6, r4
 8012b46:	e7c4      	b.n	8012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8012b48:	9500      	str	r5, [sp, #0]
 8012b4a:	463b      	mov	r3, r7
 8012b4c:	4622      	mov	r2, r4
 8012b4e:	4649      	mov	r1, r9
 8012b50:	4640      	mov	r0, r8
 8012b52:	f7ff ff4d 	bl	80129f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8012b56:	e7dc      	b.n	8012b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8012b58:	f1b9 0f00 	cmp.w	r9, #0
 8012b5c:	d0d0      	beq.n	8012b00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8012b5e:	e7c8      	b.n	8012af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8012b60:	08013edc 	.word	0x08013edc

08012b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8012b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b66:	4604      	mov	r4, r0
 8012b68:	4608      	mov	r0, r1
 8012b6a:	460d      	mov	r5, r1
 8012b6c:	f7ed fb98 	bl	80002a0 <strlen>
 8012b70:	9000      	str	r0, [sp, #0]
 8012b72:	6862      	ldr	r2, [r4, #4]
 8012b74:	462b      	mov	r3, r5
 8012b76:	2100      	movs	r1, #0
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f7ff ff77 	bl	8012a6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8012b7e:	b003      	add	sp, #12
 8012b80:	bd30      	pop	{r4, r5, pc}

08012b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8012b82:	b508      	push	{r3, lr}
 8012b84:	f7ff ffee 	bl	8012b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8012b88:	bd08      	pop	{r3, pc}

08012b8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8012b8a:	6800      	ldr	r0, [r0, #0]
 8012b8c:	4770      	bx	lr

08012b8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8012b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b90:	1a53      	subs	r3, r2, r1
 8012b92:	2b0f      	cmp	r3, #15
 8012b94:	4604      	mov	r4, r0
 8012b96:	460d      	mov	r5, r1
 8012b98:	4616      	mov	r6, r2
 8012b9a:	9301      	str	r3, [sp, #4]
 8012b9c:	d906      	bls.n	8012bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	a901      	add	r1, sp, #4
 8012ba2:	f7ff fe95 	bl	80128d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012ba6:	9b01      	ldr	r3, [sp, #4]
 8012ba8:	6020      	str	r0, [r4, #0]
 8012baa:	60a3      	str	r3, [r4, #8]
 8012bac:	4632      	mov	r2, r6
 8012bae:	4629      	mov	r1, r5
 8012bb0:	6820      	ldr	r0, [r4, #0]
 8012bb2:	f7ff feea 	bl	801298a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8012bb6:	9b01      	ldr	r3, [sp, #4]
 8012bb8:	6822      	ldr	r2, [r4, #0]
 8012bba:	6063      	str	r3, [r4, #4]
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	54d1      	strb	r1, [r2, r3]
 8012bc0:	b002      	add	sp, #8
 8012bc2:	bd70      	pop	{r4, r5, r6, pc}

08012bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8012bc4:	b538      	push	{r3, r4, r5, lr}
 8012bc6:	f100 0308 	add.w	r3, r0, #8
 8012bca:	4604      	mov	r4, r0
 8012bcc:	6003      	str	r3, [r0, #0]
 8012bce:	460d      	mov	r5, r1
 8012bd0:	b911      	cbnz	r1, 8012bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8012bd2:	4807      	ldr	r0, [pc, #28]	@ (8012bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8012bd4:	f7ff fe6b 	bl	80128ae <_ZSt19__throw_logic_errorPKc>
 8012bd8:	4608      	mov	r0, r1
 8012bda:	f7ed fb61 	bl	80002a0 <strlen>
 8012bde:	f04f 0300 	mov.w	r3, #0
 8012be2:	182a      	adds	r2, r5, r0
 8012be4:	4629      	mov	r1, r5
 8012be6:	4620      	mov	r0, r4
 8012be8:	f7ff ffd1 	bl	8012b8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8012bec:	4620      	mov	r0, r4
 8012bee:	bd38      	pop	{r3, r4, r5, pc}
 8012bf0:	08013ef5 	.word	0x08013ef5

08012bf4 <_ZdlPv>:
 8012bf4:	f000 b818 	b.w	8012c28 <free>

08012bf8 <_ZSt15get_new_handlerv>:
 8012bf8:	4b02      	ldr	r3, [pc, #8]	@ (8012c04 <_ZSt15get_new_handlerv+0xc>)
 8012bfa:	6818      	ldr	r0, [r3, #0]
 8012bfc:	f3bf 8f5b 	dmb	ish
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop
 8012c04:	20001008 	.word	0x20001008

08012c08 <abort>:
 8012c08:	b508      	push	{r3, lr}
 8012c0a:	2006      	movs	r0, #6
 8012c0c:	f000 fb16 	bl	801323c <raise>
 8012c10:	2001      	movs	r0, #1
 8012c12:	f7f0 f9ff 	bl	8003014 <_exit>
	...

08012c18 <malloc>:
 8012c18:	4b02      	ldr	r3, [pc, #8]	@ (8012c24 <malloc+0xc>)
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	6818      	ldr	r0, [r3, #0]
 8012c1e:	f000 b82d 	b.w	8012c7c <_malloc_r>
 8012c22:	bf00      	nop
 8012c24:	20000038 	.word	0x20000038

08012c28 <free>:
 8012c28:	4b02      	ldr	r3, [pc, #8]	@ (8012c34 <free+0xc>)
 8012c2a:	4601      	mov	r1, r0
 8012c2c:	6818      	ldr	r0, [r3, #0]
 8012c2e:	f000 bbb3 	b.w	8013398 <_free_r>
 8012c32:	bf00      	nop
 8012c34:	20000038 	.word	0x20000038

08012c38 <sbrk_aligned>:
 8012c38:	b570      	push	{r4, r5, r6, lr}
 8012c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8012c78 <sbrk_aligned+0x40>)
 8012c3c:	460c      	mov	r4, r1
 8012c3e:	6831      	ldr	r1, [r6, #0]
 8012c40:	4605      	mov	r5, r0
 8012c42:	b911      	cbnz	r1, 8012c4a <sbrk_aligned+0x12>
 8012c44:	f000 fb4a 	bl	80132dc <_sbrk_r>
 8012c48:	6030      	str	r0, [r6, #0]
 8012c4a:	4621      	mov	r1, r4
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f000 fb45 	bl	80132dc <_sbrk_r>
 8012c52:	1c43      	adds	r3, r0, #1
 8012c54:	d103      	bne.n	8012c5e <sbrk_aligned+0x26>
 8012c56:	f04f 34ff 	mov.w	r4, #4294967295
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	bd70      	pop	{r4, r5, r6, pc}
 8012c5e:	1cc4      	adds	r4, r0, #3
 8012c60:	f024 0403 	bic.w	r4, r4, #3
 8012c64:	42a0      	cmp	r0, r4
 8012c66:	d0f8      	beq.n	8012c5a <sbrk_aligned+0x22>
 8012c68:	1a21      	subs	r1, r4, r0
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	f000 fb36 	bl	80132dc <_sbrk_r>
 8012c70:	3001      	adds	r0, #1
 8012c72:	d1f2      	bne.n	8012c5a <sbrk_aligned+0x22>
 8012c74:	e7ef      	b.n	8012c56 <sbrk_aligned+0x1e>
 8012c76:	bf00      	nop
 8012c78:	2000100c 	.word	0x2000100c

08012c7c <_malloc_r>:
 8012c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c80:	1ccd      	adds	r5, r1, #3
 8012c82:	f025 0503 	bic.w	r5, r5, #3
 8012c86:	3508      	adds	r5, #8
 8012c88:	2d0c      	cmp	r5, #12
 8012c8a:	bf38      	it	cc
 8012c8c:	250c      	movcc	r5, #12
 8012c8e:	2d00      	cmp	r5, #0
 8012c90:	4606      	mov	r6, r0
 8012c92:	db01      	blt.n	8012c98 <_malloc_r+0x1c>
 8012c94:	42a9      	cmp	r1, r5
 8012c96:	d904      	bls.n	8012ca2 <_malloc_r+0x26>
 8012c98:	230c      	movs	r3, #12
 8012c9a:	6033      	str	r3, [r6, #0]
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d78 <_malloc_r+0xfc>
 8012ca6:	f000 f869 	bl	8012d7c <__malloc_lock>
 8012caa:	f8d8 3000 	ldr.w	r3, [r8]
 8012cae:	461c      	mov	r4, r3
 8012cb0:	bb44      	cbnz	r4, 8012d04 <_malloc_r+0x88>
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	f7ff ffbf 	bl	8012c38 <sbrk_aligned>
 8012cba:	1c43      	adds	r3, r0, #1
 8012cbc:	4604      	mov	r4, r0
 8012cbe:	d158      	bne.n	8012d72 <_malloc_r+0xf6>
 8012cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8012cc4:	4627      	mov	r7, r4
 8012cc6:	2f00      	cmp	r7, #0
 8012cc8:	d143      	bne.n	8012d52 <_malloc_r+0xd6>
 8012cca:	2c00      	cmp	r4, #0
 8012ccc:	d04b      	beq.n	8012d66 <_malloc_r+0xea>
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	4639      	mov	r1, r7
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	eb04 0903 	add.w	r9, r4, r3
 8012cd8:	f000 fb00 	bl	80132dc <_sbrk_r>
 8012cdc:	4581      	cmp	r9, r0
 8012cde:	d142      	bne.n	8012d66 <_malloc_r+0xea>
 8012ce0:	6821      	ldr	r1, [r4, #0]
 8012ce2:	1a6d      	subs	r5, r5, r1
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	f7ff ffa6 	bl	8012c38 <sbrk_aligned>
 8012cec:	3001      	adds	r0, #1
 8012cee:	d03a      	beq.n	8012d66 <_malloc_r+0xea>
 8012cf0:	6823      	ldr	r3, [r4, #0]
 8012cf2:	442b      	add	r3, r5
 8012cf4:	6023      	str	r3, [r4, #0]
 8012cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8012cfa:	685a      	ldr	r2, [r3, #4]
 8012cfc:	bb62      	cbnz	r2, 8012d58 <_malloc_r+0xdc>
 8012cfe:	f8c8 7000 	str.w	r7, [r8]
 8012d02:	e00f      	b.n	8012d24 <_malloc_r+0xa8>
 8012d04:	6822      	ldr	r2, [r4, #0]
 8012d06:	1b52      	subs	r2, r2, r5
 8012d08:	d420      	bmi.n	8012d4c <_malloc_r+0xd0>
 8012d0a:	2a0b      	cmp	r2, #11
 8012d0c:	d917      	bls.n	8012d3e <_malloc_r+0xc2>
 8012d0e:	1961      	adds	r1, r4, r5
 8012d10:	42a3      	cmp	r3, r4
 8012d12:	6025      	str	r5, [r4, #0]
 8012d14:	bf18      	it	ne
 8012d16:	6059      	strne	r1, [r3, #4]
 8012d18:	6863      	ldr	r3, [r4, #4]
 8012d1a:	bf08      	it	eq
 8012d1c:	f8c8 1000 	streq.w	r1, [r8]
 8012d20:	5162      	str	r2, [r4, r5]
 8012d22:	604b      	str	r3, [r1, #4]
 8012d24:	4630      	mov	r0, r6
 8012d26:	f000 f82f 	bl	8012d88 <__malloc_unlock>
 8012d2a:	f104 000b 	add.w	r0, r4, #11
 8012d2e:	1d23      	adds	r3, r4, #4
 8012d30:	f020 0007 	bic.w	r0, r0, #7
 8012d34:	1ac2      	subs	r2, r0, r3
 8012d36:	bf1c      	itt	ne
 8012d38:	1a1b      	subne	r3, r3, r0
 8012d3a:	50a3      	strne	r3, [r4, r2]
 8012d3c:	e7af      	b.n	8012c9e <_malloc_r+0x22>
 8012d3e:	6862      	ldr	r2, [r4, #4]
 8012d40:	42a3      	cmp	r3, r4
 8012d42:	bf0c      	ite	eq
 8012d44:	f8c8 2000 	streq.w	r2, [r8]
 8012d48:	605a      	strne	r2, [r3, #4]
 8012d4a:	e7eb      	b.n	8012d24 <_malloc_r+0xa8>
 8012d4c:	4623      	mov	r3, r4
 8012d4e:	6864      	ldr	r4, [r4, #4]
 8012d50:	e7ae      	b.n	8012cb0 <_malloc_r+0x34>
 8012d52:	463c      	mov	r4, r7
 8012d54:	687f      	ldr	r7, [r7, #4]
 8012d56:	e7b6      	b.n	8012cc6 <_malloc_r+0x4a>
 8012d58:	461a      	mov	r2, r3
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	42a3      	cmp	r3, r4
 8012d5e:	d1fb      	bne.n	8012d58 <_malloc_r+0xdc>
 8012d60:	2300      	movs	r3, #0
 8012d62:	6053      	str	r3, [r2, #4]
 8012d64:	e7de      	b.n	8012d24 <_malloc_r+0xa8>
 8012d66:	230c      	movs	r3, #12
 8012d68:	6033      	str	r3, [r6, #0]
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f000 f80c 	bl	8012d88 <__malloc_unlock>
 8012d70:	e794      	b.n	8012c9c <_malloc_r+0x20>
 8012d72:	6005      	str	r5, [r0, #0]
 8012d74:	e7d6      	b.n	8012d24 <_malloc_r+0xa8>
 8012d76:	bf00      	nop
 8012d78:	20001010 	.word	0x20001010

08012d7c <__malloc_lock>:
 8012d7c:	4801      	ldr	r0, [pc, #4]	@ (8012d84 <__malloc_lock+0x8>)
 8012d7e:	f000 bafa 	b.w	8013376 <__retarget_lock_acquire_recursive>
 8012d82:	bf00      	nop
 8012d84:	20001154 	.word	0x20001154

08012d88 <__malloc_unlock>:
 8012d88:	4801      	ldr	r0, [pc, #4]	@ (8012d90 <__malloc_unlock+0x8>)
 8012d8a:	f000 baf5 	b.w	8013378 <__retarget_lock_release_recursive>
 8012d8e:	bf00      	nop
 8012d90:	20001154 	.word	0x20001154

08012d94 <std>:
 8012d94:	2300      	movs	r3, #0
 8012d96:	b510      	push	{r4, lr}
 8012d98:	4604      	mov	r4, r0
 8012d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da2:	6083      	str	r3, [r0, #8]
 8012da4:	8181      	strh	r1, [r0, #12]
 8012da6:	6643      	str	r3, [r0, #100]	@ 0x64
 8012da8:	81c2      	strh	r2, [r0, #14]
 8012daa:	6183      	str	r3, [r0, #24]
 8012dac:	4619      	mov	r1, r3
 8012dae:	2208      	movs	r2, #8
 8012db0:	305c      	adds	r0, #92	@ 0x5c
 8012db2:	f000 fa13 	bl	80131dc <memset>
 8012db6:	4b0d      	ldr	r3, [pc, #52]	@ (8012dec <std+0x58>)
 8012db8:	6263      	str	r3, [r4, #36]	@ 0x24
 8012dba:	4b0d      	ldr	r3, [pc, #52]	@ (8012df0 <std+0x5c>)
 8012dbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012df4 <std+0x60>)
 8012dc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012df8 <std+0x64>)
 8012dc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012dfc <std+0x68>)
 8012dc8:	6224      	str	r4, [r4, #32]
 8012dca:	429c      	cmp	r4, r3
 8012dcc:	d006      	beq.n	8012ddc <std+0x48>
 8012dce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012dd2:	4294      	cmp	r4, r2
 8012dd4:	d002      	beq.n	8012ddc <std+0x48>
 8012dd6:	33d0      	adds	r3, #208	@ 0xd0
 8012dd8:	429c      	cmp	r4, r3
 8012dda:	d105      	bne.n	8012de8 <std+0x54>
 8012ddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de4:	f000 bac6 	b.w	8013374 <__retarget_lock_init_recursive>
 8012de8:	bd10      	pop	{r4, pc}
 8012dea:	bf00      	nop
 8012dec:	08012ff9 	.word	0x08012ff9
 8012df0:	0801301b 	.word	0x0801301b
 8012df4:	08013053 	.word	0x08013053
 8012df8:	08013077 	.word	0x08013077
 8012dfc:	20001014 	.word	0x20001014

08012e00 <stdio_exit_handler>:
 8012e00:	4a02      	ldr	r2, [pc, #8]	@ (8012e0c <stdio_exit_handler+0xc>)
 8012e02:	4903      	ldr	r1, [pc, #12]	@ (8012e10 <stdio_exit_handler+0x10>)
 8012e04:	4803      	ldr	r0, [pc, #12]	@ (8012e14 <stdio_exit_handler+0x14>)
 8012e06:	f000 b869 	b.w	8012edc <_fwalk_sglue>
 8012e0a:	bf00      	nop
 8012e0c:	2000002c 	.word	0x2000002c
 8012e10:	08013ad5 	.word	0x08013ad5
 8012e14:	2000003c 	.word	0x2000003c

08012e18 <cleanup_stdio>:
 8012e18:	6841      	ldr	r1, [r0, #4]
 8012e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8012e4c <cleanup_stdio+0x34>)
 8012e1c:	4299      	cmp	r1, r3
 8012e1e:	b510      	push	{r4, lr}
 8012e20:	4604      	mov	r4, r0
 8012e22:	d001      	beq.n	8012e28 <cleanup_stdio+0x10>
 8012e24:	f000 fe56 	bl	8013ad4 <_fflush_r>
 8012e28:	68a1      	ldr	r1, [r4, #8]
 8012e2a:	4b09      	ldr	r3, [pc, #36]	@ (8012e50 <cleanup_stdio+0x38>)
 8012e2c:	4299      	cmp	r1, r3
 8012e2e:	d002      	beq.n	8012e36 <cleanup_stdio+0x1e>
 8012e30:	4620      	mov	r0, r4
 8012e32:	f000 fe4f 	bl	8013ad4 <_fflush_r>
 8012e36:	68e1      	ldr	r1, [r4, #12]
 8012e38:	4b06      	ldr	r3, [pc, #24]	@ (8012e54 <cleanup_stdio+0x3c>)
 8012e3a:	4299      	cmp	r1, r3
 8012e3c:	d004      	beq.n	8012e48 <cleanup_stdio+0x30>
 8012e3e:	4620      	mov	r0, r4
 8012e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e44:	f000 be46 	b.w	8013ad4 <_fflush_r>
 8012e48:	bd10      	pop	{r4, pc}
 8012e4a:	bf00      	nop
 8012e4c:	20001014 	.word	0x20001014
 8012e50:	2000107c 	.word	0x2000107c
 8012e54:	200010e4 	.word	0x200010e4

08012e58 <global_stdio_init.part.0>:
 8012e58:	b510      	push	{r4, lr}
 8012e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8012e88 <global_stdio_init.part.0+0x30>)
 8012e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8012e8c <global_stdio_init.part.0+0x34>)
 8012e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8012e90 <global_stdio_init.part.0+0x38>)
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	4620      	mov	r0, r4
 8012e64:	2200      	movs	r2, #0
 8012e66:	2104      	movs	r1, #4
 8012e68:	f7ff ff94 	bl	8012d94 <std>
 8012e6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012e70:	2201      	movs	r2, #1
 8012e72:	2109      	movs	r1, #9
 8012e74:	f7ff ff8e 	bl	8012d94 <std>
 8012e78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012e7c:	2202      	movs	r2, #2
 8012e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e82:	2112      	movs	r1, #18
 8012e84:	f7ff bf86 	b.w	8012d94 <std>
 8012e88:	2000114c 	.word	0x2000114c
 8012e8c:	20001014 	.word	0x20001014
 8012e90:	08012e01 	.word	0x08012e01

08012e94 <__sfp_lock_acquire>:
 8012e94:	4801      	ldr	r0, [pc, #4]	@ (8012e9c <__sfp_lock_acquire+0x8>)
 8012e96:	f000 ba6e 	b.w	8013376 <__retarget_lock_acquire_recursive>
 8012e9a:	bf00      	nop
 8012e9c:	20001155 	.word	0x20001155

08012ea0 <__sfp_lock_release>:
 8012ea0:	4801      	ldr	r0, [pc, #4]	@ (8012ea8 <__sfp_lock_release+0x8>)
 8012ea2:	f000 ba69 	b.w	8013378 <__retarget_lock_release_recursive>
 8012ea6:	bf00      	nop
 8012ea8:	20001155 	.word	0x20001155

08012eac <__sinit>:
 8012eac:	b510      	push	{r4, lr}
 8012eae:	4604      	mov	r4, r0
 8012eb0:	f7ff fff0 	bl	8012e94 <__sfp_lock_acquire>
 8012eb4:	6a23      	ldr	r3, [r4, #32]
 8012eb6:	b11b      	cbz	r3, 8012ec0 <__sinit+0x14>
 8012eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ebc:	f7ff bff0 	b.w	8012ea0 <__sfp_lock_release>
 8012ec0:	4b04      	ldr	r3, [pc, #16]	@ (8012ed4 <__sinit+0x28>)
 8012ec2:	6223      	str	r3, [r4, #32]
 8012ec4:	4b04      	ldr	r3, [pc, #16]	@ (8012ed8 <__sinit+0x2c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1f5      	bne.n	8012eb8 <__sinit+0xc>
 8012ecc:	f7ff ffc4 	bl	8012e58 <global_stdio_init.part.0>
 8012ed0:	e7f2      	b.n	8012eb8 <__sinit+0xc>
 8012ed2:	bf00      	nop
 8012ed4:	08012e19 	.word	0x08012e19
 8012ed8:	2000114c 	.word	0x2000114c

08012edc <_fwalk_sglue>:
 8012edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee0:	4607      	mov	r7, r0
 8012ee2:	4688      	mov	r8, r1
 8012ee4:	4614      	mov	r4, r2
 8012ee6:	2600      	movs	r6, #0
 8012ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eec:	f1b9 0901 	subs.w	r9, r9, #1
 8012ef0:	d505      	bpl.n	8012efe <_fwalk_sglue+0x22>
 8012ef2:	6824      	ldr	r4, [r4, #0]
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	d1f7      	bne.n	8012ee8 <_fwalk_sglue+0xc>
 8012ef8:	4630      	mov	r0, r6
 8012efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012efe:	89ab      	ldrh	r3, [r5, #12]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d907      	bls.n	8012f14 <_fwalk_sglue+0x38>
 8012f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	d003      	beq.n	8012f14 <_fwalk_sglue+0x38>
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	4638      	mov	r0, r7
 8012f10:	47c0      	blx	r8
 8012f12:	4306      	orrs	r6, r0
 8012f14:	3568      	adds	r5, #104	@ 0x68
 8012f16:	e7e9      	b.n	8012eec <_fwalk_sglue+0x10>

08012f18 <iprintf>:
 8012f18:	b40f      	push	{r0, r1, r2, r3}
 8012f1a:	b507      	push	{r0, r1, r2, lr}
 8012f1c:	4906      	ldr	r1, [pc, #24]	@ (8012f38 <iprintf+0x20>)
 8012f1e:	ab04      	add	r3, sp, #16
 8012f20:	6808      	ldr	r0, [r1, #0]
 8012f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f26:	6881      	ldr	r1, [r0, #8]
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	f000 faa9 	bl	8013480 <_vfiprintf_r>
 8012f2e:	b003      	add	sp, #12
 8012f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f34:	b004      	add	sp, #16
 8012f36:	4770      	bx	lr
 8012f38:	20000038 	.word	0x20000038

08012f3c <_puts_r>:
 8012f3c:	6a03      	ldr	r3, [r0, #32]
 8012f3e:	b570      	push	{r4, r5, r6, lr}
 8012f40:	6884      	ldr	r4, [r0, #8]
 8012f42:	4605      	mov	r5, r0
 8012f44:	460e      	mov	r6, r1
 8012f46:	b90b      	cbnz	r3, 8012f4c <_puts_r+0x10>
 8012f48:	f7ff ffb0 	bl	8012eac <__sinit>
 8012f4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f4e:	07db      	lsls	r3, r3, #31
 8012f50:	d405      	bmi.n	8012f5e <_puts_r+0x22>
 8012f52:	89a3      	ldrh	r3, [r4, #12]
 8012f54:	0598      	lsls	r0, r3, #22
 8012f56:	d402      	bmi.n	8012f5e <_puts_r+0x22>
 8012f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f5a:	f000 fa0c 	bl	8013376 <__retarget_lock_acquire_recursive>
 8012f5e:	89a3      	ldrh	r3, [r4, #12]
 8012f60:	0719      	lsls	r1, r3, #28
 8012f62:	d502      	bpl.n	8012f6a <_puts_r+0x2e>
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d135      	bne.n	8012fd6 <_puts_r+0x9a>
 8012f6a:	4621      	mov	r1, r4
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	f000 f8c5 	bl	80130fc <__swsetup_r>
 8012f72:	b380      	cbz	r0, 8012fd6 <_puts_r+0x9a>
 8012f74:	f04f 35ff 	mov.w	r5, #4294967295
 8012f78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f7a:	07da      	lsls	r2, r3, #31
 8012f7c:	d405      	bmi.n	8012f8a <_puts_r+0x4e>
 8012f7e:	89a3      	ldrh	r3, [r4, #12]
 8012f80:	059b      	lsls	r3, r3, #22
 8012f82:	d402      	bmi.n	8012f8a <_puts_r+0x4e>
 8012f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f86:	f000 f9f7 	bl	8013378 <__retarget_lock_release_recursive>
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	bd70      	pop	{r4, r5, r6, pc}
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	da04      	bge.n	8012f9c <_puts_r+0x60>
 8012f92:	69a2      	ldr	r2, [r4, #24]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	dc17      	bgt.n	8012fc8 <_puts_r+0x8c>
 8012f98:	290a      	cmp	r1, #10
 8012f9a:	d015      	beq.n	8012fc8 <_puts_r+0x8c>
 8012f9c:	6823      	ldr	r3, [r4, #0]
 8012f9e:	1c5a      	adds	r2, r3, #1
 8012fa0:	6022      	str	r2, [r4, #0]
 8012fa2:	7019      	strb	r1, [r3, #0]
 8012fa4:	68a3      	ldr	r3, [r4, #8]
 8012fa6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012faa:	3b01      	subs	r3, #1
 8012fac:	60a3      	str	r3, [r4, #8]
 8012fae:	2900      	cmp	r1, #0
 8012fb0:	d1ed      	bne.n	8012f8e <_puts_r+0x52>
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	da11      	bge.n	8012fda <_puts_r+0x9e>
 8012fb6:	4622      	mov	r2, r4
 8012fb8:	210a      	movs	r1, #10
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f000 f85f 	bl	801307e <__swbuf_r>
 8012fc0:	3001      	adds	r0, #1
 8012fc2:	d0d7      	beq.n	8012f74 <_puts_r+0x38>
 8012fc4:	250a      	movs	r5, #10
 8012fc6:	e7d7      	b.n	8012f78 <_puts_r+0x3c>
 8012fc8:	4622      	mov	r2, r4
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f000 f857 	bl	801307e <__swbuf_r>
 8012fd0:	3001      	adds	r0, #1
 8012fd2:	d1e7      	bne.n	8012fa4 <_puts_r+0x68>
 8012fd4:	e7ce      	b.n	8012f74 <_puts_r+0x38>
 8012fd6:	3e01      	subs	r6, #1
 8012fd8:	e7e4      	b.n	8012fa4 <_puts_r+0x68>
 8012fda:	6823      	ldr	r3, [r4, #0]
 8012fdc:	1c5a      	adds	r2, r3, #1
 8012fde:	6022      	str	r2, [r4, #0]
 8012fe0:	220a      	movs	r2, #10
 8012fe2:	701a      	strb	r2, [r3, #0]
 8012fe4:	e7ee      	b.n	8012fc4 <_puts_r+0x88>
	...

08012fe8 <puts>:
 8012fe8:	4b02      	ldr	r3, [pc, #8]	@ (8012ff4 <puts+0xc>)
 8012fea:	4601      	mov	r1, r0
 8012fec:	6818      	ldr	r0, [r3, #0]
 8012fee:	f7ff bfa5 	b.w	8012f3c <_puts_r>
 8012ff2:	bf00      	nop
 8012ff4:	20000038 	.word	0x20000038

08012ff8 <__sread>:
 8012ff8:	b510      	push	{r4, lr}
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013000:	f000 f946 	bl	8013290 <_read_r>
 8013004:	2800      	cmp	r0, #0
 8013006:	bfab      	itete	ge
 8013008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801300a:	89a3      	ldrhlt	r3, [r4, #12]
 801300c:	181b      	addge	r3, r3, r0
 801300e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013012:	bfac      	ite	ge
 8013014:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013016:	81a3      	strhlt	r3, [r4, #12]
 8013018:	bd10      	pop	{r4, pc}

0801301a <__swrite>:
 801301a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801301e:	461f      	mov	r7, r3
 8013020:	898b      	ldrh	r3, [r1, #12]
 8013022:	05db      	lsls	r3, r3, #23
 8013024:	4605      	mov	r5, r0
 8013026:	460c      	mov	r4, r1
 8013028:	4616      	mov	r6, r2
 801302a:	d505      	bpl.n	8013038 <__swrite+0x1e>
 801302c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013030:	2302      	movs	r3, #2
 8013032:	2200      	movs	r2, #0
 8013034:	f000 f91a 	bl	801326c <_lseek_r>
 8013038:	89a3      	ldrh	r3, [r4, #12]
 801303a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801303e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013042:	81a3      	strh	r3, [r4, #12]
 8013044:	4632      	mov	r2, r6
 8013046:	463b      	mov	r3, r7
 8013048:	4628      	mov	r0, r5
 801304a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801304e:	f000 b955 	b.w	80132fc <_write_r>

08013052 <__sseek>:
 8013052:	b510      	push	{r4, lr}
 8013054:	460c      	mov	r4, r1
 8013056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801305a:	f000 f907 	bl	801326c <_lseek_r>
 801305e:	1c43      	adds	r3, r0, #1
 8013060:	89a3      	ldrh	r3, [r4, #12]
 8013062:	bf15      	itete	ne
 8013064:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801306a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801306e:	81a3      	strheq	r3, [r4, #12]
 8013070:	bf18      	it	ne
 8013072:	81a3      	strhne	r3, [r4, #12]
 8013074:	bd10      	pop	{r4, pc}

08013076 <__sclose>:
 8013076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801307a:	f000 b8e7 	b.w	801324c <_close_r>

0801307e <__swbuf_r>:
 801307e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013080:	460e      	mov	r6, r1
 8013082:	4614      	mov	r4, r2
 8013084:	4605      	mov	r5, r0
 8013086:	b118      	cbz	r0, 8013090 <__swbuf_r+0x12>
 8013088:	6a03      	ldr	r3, [r0, #32]
 801308a:	b90b      	cbnz	r3, 8013090 <__swbuf_r+0x12>
 801308c:	f7ff ff0e 	bl	8012eac <__sinit>
 8013090:	69a3      	ldr	r3, [r4, #24]
 8013092:	60a3      	str	r3, [r4, #8]
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	071a      	lsls	r2, r3, #28
 8013098:	d501      	bpl.n	801309e <__swbuf_r+0x20>
 801309a:	6923      	ldr	r3, [r4, #16]
 801309c:	b943      	cbnz	r3, 80130b0 <__swbuf_r+0x32>
 801309e:	4621      	mov	r1, r4
 80130a0:	4628      	mov	r0, r5
 80130a2:	f000 f82b 	bl	80130fc <__swsetup_r>
 80130a6:	b118      	cbz	r0, 80130b0 <__swbuf_r+0x32>
 80130a8:	f04f 37ff 	mov.w	r7, #4294967295
 80130ac:	4638      	mov	r0, r7
 80130ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b0:	6823      	ldr	r3, [r4, #0]
 80130b2:	6922      	ldr	r2, [r4, #16]
 80130b4:	1a98      	subs	r0, r3, r2
 80130b6:	6963      	ldr	r3, [r4, #20]
 80130b8:	b2f6      	uxtb	r6, r6
 80130ba:	4283      	cmp	r3, r0
 80130bc:	4637      	mov	r7, r6
 80130be:	dc05      	bgt.n	80130cc <__swbuf_r+0x4e>
 80130c0:	4621      	mov	r1, r4
 80130c2:	4628      	mov	r0, r5
 80130c4:	f000 fd06 	bl	8013ad4 <_fflush_r>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d1ed      	bne.n	80130a8 <__swbuf_r+0x2a>
 80130cc:	68a3      	ldr	r3, [r4, #8]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	60a3      	str	r3, [r4, #8]
 80130d2:	6823      	ldr	r3, [r4, #0]
 80130d4:	1c5a      	adds	r2, r3, #1
 80130d6:	6022      	str	r2, [r4, #0]
 80130d8:	701e      	strb	r6, [r3, #0]
 80130da:	6962      	ldr	r2, [r4, #20]
 80130dc:	1c43      	adds	r3, r0, #1
 80130de:	429a      	cmp	r2, r3
 80130e0:	d004      	beq.n	80130ec <__swbuf_r+0x6e>
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	07db      	lsls	r3, r3, #31
 80130e6:	d5e1      	bpl.n	80130ac <__swbuf_r+0x2e>
 80130e8:	2e0a      	cmp	r6, #10
 80130ea:	d1df      	bne.n	80130ac <__swbuf_r+0x2e>
 80130ec:	4621      	mov	r1, r4
 80130ee:	4628      	mov	r0, r5
 80130f0:	f000 fcf0 	bl	8013ad4 <_fflush_r>
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d0d9      	beq.n	80130ac <__swbuf_r+0x2e>
 80130f8:	e7d6      	b.n	80130a8 <__swbuf_r+0x2a>
	...

080130fc <__swsetup_r>:
 80130fc:	b538      	push	{r3, r4, r5, lr}
 80130fe:	4b29      	ldr	r3, [pc, #164]	@ (80131a4 <__swsetup_r+0xa8>)
 8013100:	4605      	mov	r5, r0
 8013102:	6818      	ldr	r0, [r3, #0]
 8013104:	460c      	mov	r4, r1
 8013106:	b118      	cbz	r0, 8013110 <__swsetup_r+0x14>
 8013108:	6a03      	ldr	r3, [r0, #32]
 801310a:	b90b      	cbnz	r3, 8013110 <__swsetup_r+0x14>
 801310c:	f7ff fece 	bl	8012eac <__sinit>
 8013110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013114:	0719      	lsls	r1, r3, #28
 8013116:	d422      	bmi.n	801315e <__swsetup_r+0x62>
 8013118:	06da      	lsls	r2, r3, #27
 801311a:	d407      	bmi.n	801312c <__swsetup_r+0x30>
 801311c:	2209      	movs	r2, #9
 801311e:	602a      	str	r2, [r5, #0]
 8013120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013124:	81a3      	strh	r3, [r4, #12]
 8013126:	f04f 30ff 	mov.w	r0, #4294967295
 801312a:	e033      	b.n	8013194 <__swsetup_r+0x98>
 801312c:	0758      	lsls	r0, r3, #29
 801312e:	d512      	bpl.n	8013156 <__swsetup_r+0x5a>
 8013130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013132:	b141      	cbz	r1, 8013146 <__swsetup_r+0x4a>
 8013134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013138:	4299      	cmp	r1, r3
 801313a:	d002      	beq.n	8013142 <__swsetup_r+0x46>
 801313c:	4628      	mov	r0, r5
 801313e:	f000 f92b 	bl	8013398 <_free_r>
 8013142:	2300      	movs	r3, #0
 8013144:	6363      	str	r3, [r4, #52]	@ 0x34
 8013146:	89a3      	ldrh	r3, [r4, #12]
 8013148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801314c:	81a3      	strh	r3, [r4, #12]
 801314e:	2300      	movs	r3, #0
 8013150:	6063      	str	r3, [r4, #4]
 8013152:	6923      	ldr	r3, [r4, #16]
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	f043 0308 	orr.w	r3, r3, #8
 801315c:	81a3      	strh	r3, [r4, #12]
 801315e:	6923      	ldr	r3, [r4, #16]
 8013160:	b94b      	cbnz	r3, 8013176 <__swsetup_r+0x7a>
 8013162:	89a3      	ldrh	r3, [r4, #12]
 8013164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801316c:	d003      	beq.n	8013176 <__swsetup_r+0x7a>
 801316e:	4621      	mov	r1, r4
 8013170:	4628      	mov	r0, r5
 8013172:	f000 fcfd 	bl	8013b70 <__smakebuf_r>
 8013176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801317a:	f013 0201 	ands.w	r2, r3, #1
 801317e:	d00a      	beq.n	8013196 <__swsetup_r+0x9a>
 8013180:	2200      	movs	r2, #0
 8013182:	60a2      	str	r2, [r4, #8]
 8013184:	6962      	ldr	r2, [r4, #20]
 8013186:	4252      	negs	r2, r2
 8013188:	61a2      	str	r2, [r4, #24]
 801318a:	6922      	ldr	r2, [r4, #16]
 801318c:	b942      	cbnz	r2, 80131a0 <__swsetup_r+0xa4>
 801318e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013192:	d1c5      	bne.n	8013120 <__swsetup_r+0x24>
 8013194:	bd38      	pop	{r3, r4, r5, pc}
 8013196:	0799      	lsls	r1, r3, #30
 8013198:	bf58      	it	pl
 801319a:	6962      	ldrpl	r2, [r4, #20]
 801319c:	60a2      	str	r2, [r4, #8]
 801319e:	e7f4      	b.n	801318a <__swsetup_r+0x8e>
 80131a0:	2000      	movs	r0, #0
 80131a2:	e7f7      	b.n	8013194 <__swsetup_r+0x98>
 80131a4:	20000038 	.word	0x20000038

080131a8 <memmove>:
 80131a8:	4288      	cmp	r0, r1
 80131aa:	b510      	push	{r4, lr}
 80131ac:	eb01 0402 	add.w	r4, r1, r2
 80131b0:	d902      	bls.n	80131b8 <memmove+0x10>
 80131b2:	4284      	cmp	r4, r0
 80131b4:	4623      	mov	r3, r4
 80131b6:	d807      	bhi.n	80131c8 <memmove+0x20>
 80131b8:	1e43      	subs	r3, r0, #1
 80131ba:	42a1      	cmp	r1, r4
 80131bc:	d008      	beq.n	80131d0 <memmove+0x28>
 80131be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80131c6:	e7f8      	b.n	80131ba <memmove+0x12>
 80131c8:	4402      	add	r2, r0
 80131ca:	4601      	mov	r1, r0
 80131cc:	428a      	cmp	r2, r1
 80131ce:	d100      	bne.n	80131d2 <memmove+0x2a>
 80131d0:	bd10      	pop	{r4, pc}
 80131d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80131da:	e7f7      	b.n	80131cc <memmove+0x24>

080131dc <memset>:
 80131dc:	4402      	add	r2, r0
 80131de:	4603      	mov	r3, r0
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d100      	bne.n	80131e6 <memset+0xa>
 80131e4:	4770      	bx	lr
 80131e6:	f803 1b01 	strb.w	r1, [r3], #1
 80131ea:	e7f9      	b.n	80131e0 <memset+0x4>

080131ec <_raise_r>:
 80131ec:	291f      	cmp	r1, #31
 80131ee:	b538      	push	{r3, r4, r5, lr}
 80131f0:	4605      	mov	r5, r0
 80131f2:	460c      	mov	r4, r1
 80131f4:	d904      	bls.n	8013200 <_raise_r+0x14>
 80131f6:	2316      	movs	r3, #22
 80131f8:	6003      	str	r3, [r0, #0]
 80131fa:	f04f 30ff 	mov.w	r0, #4294967295
 80131fe:	bd38      	pop	{r3, r4, r5, pc}
 8013200:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013202:	b112      	cbz	r2, 801320a <_raise_r+0x1e>
 8013204:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013208:	b94b      	cbnz	r3, 801321e <_raise_r+0x32>
 801320a:	4628      	mov	r0, r5
 801320c:	f000 f864 	bl	80132d8 <_getpid_r>
 8013210:	4622      	mov	r2, r4
 8013212:	4601      	mov	r1, r0
 8013214:	4628      	mov	r0, r5
 8013216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801321a:	f000 b84b 	b.w	80132b4 <_kill_r>
 801321e:	2b01      	cmp	r3, #1
 8013220:	d00a      	beq.n	8013238 <_raise_r+0x4c>
 8013222:	1c59      	adds	r1, r3, #1
 8013224:	d103      	bne.n	801322e <_raise_r+0x42>
 8013226:	2316      	movs	r3, #22
 8013228:	6003      	str	r3, [r0, #0]
 801322a:	2001      	movs	r0, #1
 801322c:	e7e7      	b.n	80131fe <_raise_r+0x12>
 801322e:	2100      	movs	r1, #0
 8013230:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013234:	4620      	mov	r0, r4
 8013236:	4798      	blx	r3
 8013238:	2000      	movs	r0, #0
 801323a:	e7e0      	b.n	80131fe <_raise_r+0x12>

0801323c <raise>:
 801323c:	4b02      	ldr	r3, [pc, #8]	@ (8013248 <raise+0xc>)
 801323e:	4601      	mov	r1, r0
 8013240:	6818      	ldr	r0, [r3, #0]
 8013242:	f7ff bfd3 	b.w	80131ec <_raise_r>
 8013246:	bf00      	nop
 8013248:	20000038 	.word	0x20000038

0801324c <_close_r>:
 801324c:	b538      	push	{r3, r4, r5, lr}
 801324e:	4d06      	ldr	r5, [pc, #24]	@ (8013268 <_close_r+0x1c>)
 8013250:	2300      	movs	r3, #0
 8013252:	4604      	mov	r4, r0
 8013254:	4608      	mov	r0, r1
 8013256:	602b      	str	r3, [r5, #0]
 8013258:	f7ef ff20 	bl	800309c <_close>
 801325c:	1c43      	adds	r3, r0, #1
 801325e:	d102      	bne.n	8013266 <_close_r+0x1a>
 8013260:	682b      	ldr	r3, [r5, #0]
 8013262:	b103      	cbz	r3, 8013266 <_close_r+0x1a>
 8013264:	6023      	str	r3, [r4, #0]
 8013266:	bd38      	pop	{r3, r4, r5, pc}
 8013268:	20001150 	.word	0x20001150

0801326c <_lseek_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	4d07      	ldr	r5, [pc, #28]	@ (801328c <_lseek_r+0x20>)
 8013270:	4604      	mov	r4, r0
 8013272:	4608      	mov	r0, r1
 8013274:	4611      	mov	r1, r2
 8013276:	2200      	movs	r2, #0
 8013278:	602a      	str	r2, [r5, #0]
 801327a:	461a      	mov	r2, r3
 801327c:	f7ef ff35 	bl	80030ea <_lseek>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_lseek_r+0x1e>
 8013284:	682b      	ldr	r3, [r5, #0]
 8013286:	b103      	cbz	r3, 801328a <_lseek_r+0x1e>
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	20001150 	.word	0x20001150

08013290 <_read_r>:
 8013290:	b538      	push	{r3, r4, r5, lr}
 8013292:	4d07      	ldr	r5, [pc, #28]	@ (80132b0 <_read_r+0x20>)
 8013294:	4604      	mov	r4, r0
 8013296:	4608      	mov	r0, r1
 8013298:	4611      	mov	r1, r2
 801329a:	2200      	movs	r2, #0
 801329c:	602a      	str	r2, [r5, #0]
 801329e:	461a      	mov	r2, r3
 80132a0:	f7ef fec3 	bl	800302a <_read>
 80132a4:	1c43      	adds	r3, r0, #1
 80132a6:	d102      	bne.n	80132ae <_read_r+0x1e>
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	b103      	cbz	r3, 80132ae <_read_r+0x1e>
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	bd38      	pop	{r3, r4, r5, pc}
 80132b0:	20001150 	.word	0x20001150

080132b4 <_kill_r>:
 80132b4:	b538      	push	{r3, r4, r5, lr}
 80132b6:	4d07      	ldr	r5, [pc, #28]	@ (80132d4 <_kill_r+0x20>)
 80132b8:	2300      	movs	r3, #0
 80132ba:	4604      	mov	r4, r0
 80132bc:	4608      	mov	r0, r1
 80132be:	4611      	mov	r1, r2
 80132c0:	602b      	str	r3, [r5, #0]
 80132c2:	f7ef fe97 	bl	8002ff4 <_kill>
 80132c6:	1c43      	adds	r3, r0, #1
 80132c8:	d102      	bne.n	80132d0 <_kill_r+0x1c>
 80132ca:	682b      	ldr	r3, [r5, #0]
 80132cc:	b103      	cbz	r3, 80132d0 <_kill_r+0x1c>
 80132ce:	6023      	str	r3, [r4, #0]
 80132d0:	bd38      	pop	{r3, r4, r5, pc}
 80132d2:	bf00      	nop
 80132d4:	20001150 	.word	0x20001150

080132d8 <_getpid_r>:
 80132d8:	f7ef be84 	b.w	8002fe4 <_getpid>

080132dc <_sbrk_r>:
 80132dc:	b538      	push	{r3, r4, r5, lr}
 80132de:	4d06      	ldr	r5, [pc, #24]	@ (80132f8 <_sbrk_r+0x1c>)
 80132e0:	2300      	movs	r3, #0
 80132e2:	4604      	mov	r4, r0
 80132e4:	4608      	mov	r0, r1
 80132e6:	602b      	str	r3, [r5, #0]
 80132e8:	f7ef ff0c 	bl	8003104 <_sbrk>
 80132ec:	1c43      	adds	r3, r0, #1
 80132ee:	d102      	bne.n	80132f6 <_sbrk_r+0x1a>
 80132f0:	682b      	ldr	r3, [r5, #0]
 80132f2:	b103      	cbz	r3, 80132f6 <_sbrk_r+0x1a>
 80132f4:	6023      	str	r3, [r4, #0]
 80132f6:	bd38      	pop	{r3, r4, r5, pc}
 80132f8:	20001150 	.word	0x20001150

080132fc <_write_r>:
 80132fc:	b538      	push	{r3, r4, r5, lr}
 80132fe:	4d07      	ldr	r5, [pc, #28]	@ (801331c <_write_r+0x20>)
 8013300:	4604      	mov	r4, r0
 8013302:	4608      	mov	r0, r1
 8013304:	4611      	mov	r1, r2
 8013306:	2200      	movs	r2, #0
 8013308:	602a      	str	r2, [r5, #0]
 801330a:	461a      	mov	r2, r3
 801330c:	f7ef feaa 	bl	8003064 <_write>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_write_r+0x1e>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_write_r+0x1e>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20001150 	.word	0x20001150

08013320 <__errno>:
 8013320:	4b01      	ldr	r3, [pc, #4]	@ (8013328 <__errno+0x8>)
 8013322:	6818      	ldr	r0, [r3, #0]
 8013324:	4770      	bx	lr
 8013326:	bf00      	nop
 8013328:	20000038 	.word	0x20000038

0801332c <__libc_init_array>:
 801332c:	b570      	push	{r4, r5, r6, lr}
 801332e:	4d0d      	ldr	r5, [pc, #52]	@ (8013364 <__libc_init_array+0x38>)
 8013330:	4c0d      	ldr	r4, [pc, #52]	@ (8013368 <__libc_init_array+0x3c>)
 8013332:	1b64      	subs	r4, r4, r5
 8013334:	10a4      	asrs	r4, r4, #2
 8013336:	2600      	movs	r6, #0
 8013338:	42a6      	cmp	r6, r4
 801333a:	d109      	bne.n	8013350 <__libc_init_array+0x24>
 801333c:	4d0b      	ldr	r5, [pc, #44]	@ (801336c <__libc_init_array+0x40>)
 801333e:	4c0c      	ldr	r4, [pc, #48]	@ (8013370 <__libc_init_array+0x44>)
 8013340:	f000 fc74 	bl	8013c2c <_init>
 8013344:	1b64      	subs	r4, r4, r5
 8013346:	10a4      	asrs	r4, r4, #2
 8013348:	2600      	movs	r6, #0
 801334a:	42a6      	cmp	r6, r4
 801334c:	d105      	bne.n	801335a <__libc_init_array+0x2e>
 801334e:	bd70      	pop	{r4, r5, r6, pc}
 8013350:	f855 3b04 	ldr.w	r3, [r5], #4
 8013354:	4798      	blx	r3
 8013356:	3601      	adds	r6, #1
 8013358:	e7ee      	b.n	8013338 <__libc_init_array+0xc>
 801335a:	f855 3b04 	ldr.w	r3, [r5], #4
 801335e:	4798      	blx	r3
 8013360:	3601      	adds	r6, #1
 8013362:	e7f2      	b.n	801334a <__libc_init_array+0x1e>
 8013364:	08013f64 	.word	0x08013f64
 8013368:	08013f64 	.word	0x08013f64
 801336c:	08013f64 	.word	0x08013f64
 8013370:	08013f68 	.word	0x08013f68

08013374 <__retarget_lock_init_recursive>:
 8013374:	4770      	bx	lr

08013376 <__retarget_lock_acquire_recursive>:
 8013376:	4770      	bx	lr

08013378 <__retarget_lock_release_recursive>:
 8013378:	4770      	bx	lr

0801337a <memcpy>:
 801337a:	440a      	add	r2, r1
 801337c:	4291      	cmp	r1, r2
 801337e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013382:	d100      	bne.n	8013386 <memcpy+0xc>
 8013384:	4770      	bx	lr
 8013386:	b510      	push	{r4, lr}
 8013388:	f811 4b01 	ldrb.w	r4, [r1], #1
 801338c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013390:	4291      	cmp	r1, r2
 8013392:	d1f9      	bne.n	8013388 <memcpy+0xe>
 8013394:	bd10      	pop	{r4, pc}
	...

08013398 <_free_r>:
 8013398:	b538      	push	{r3, r4, r5, lr}
 801339a:	4605      	mov	r5, r0
 801339c:	2900      	cmp	r1, #0
 801339e:	d041      	beq.n	8013424 <_free_r+0x8c>
 80133a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133a4:	1f0c      	subs	r4, r1, #4
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	bfb8      	it	lt
 80133aa:	18e4      	addlt	r4, r4, r3
 80133ac:	f7ff fce6 	bl	8012d7c <__malloc_lock>
 80133b0:	4a1d      	ldr	r2, [pc, #116]	@ (8013428 <_free_r+0x90>)
 80133b2:	6813      	ldr	r3, [r2, #0]
 80133b4:	b933      	cbnz	r3, 80133c4 <_free_r+0x2c>
 80133b6:	6063      	str	r3, [r4, #4]
 80133b8:	6014      	str	r4, [r2, #0]
 80133ba:	4628      	mov	r0, r5
 80133bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133c0:	f7ff bce2 	b.w	8012d88 <__malloc_unlock>
 80133c4:	42a3      	cmp	r3, r4
 80133c6:	d908      	bls.n	80133da <_free_r+0x42>
 80133c8:	6820      	ldr	r0, [r4, #0]
 80133ca:	1821      	adds	r1, r4, r0
 80133cc:	428b      	cmp	r3, r1
 80133ce:	bf01      	itttt	eq
 80133d0:	6819      	ldreq	r1, [r3, #0]
 80133d2:	685b      	ldreq	r3, [r3, #4]
 80133d4:	1809      	addeq	r1, r1, r0
 80133d6:	6021      	streq	r1, [r4, #0]
 80133d8:	e7ed      	b.n	80133b6 <_free_r+0x1e>
 80133da:	461a      	mov	r2, r3
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	b10b      	cbz	r3, 80133e4 <_free_r+0x4c>
 80133e0:	42a3      	cmp	r3, r4
 80133e2:	d9fa      	bls.n	80133da <_free_r+0x42>
 80133e4:	6811      	ldr	r1, [r2, #0]
 80133e6:	1850      	adds	r0, r2, r1
 80133e8:	42a0      	cmp	r0, r4
 80133ea:	d10b      	bne.n	8013404 <_free_r+0x6c>
 80133ec:	6820      	ldr	r0, [r4, #0]
 80133ee:	4401      	add	r1, r0
 80133f0:	1850      	adds	r0, r2, r1
 80133f2:	4283      	cmp	r3, r0
 80133f4:	6011      	str	r1, [r2, #0]
 80133f6:	d1e0      	bne.n	80133ba <_free_r+0x22>
 80133f8:	6818      	ldr	r0, [r3, #0]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	6053      	str	r3, [r2, #4]
 80133fe:	4408      	add	r0, r1
 8013400:	6010      	str	r0, [r2, #0]
 8013402:	e7da      	b.n	80133ba <_free_r+0x22>
 8013404:	d902      	bls.n	801340c <_free_r+0x74>
 8013406:	230c      	movs	r3, #12
 8013408:	602b      	str	r3, [r5, #0]
 801340a:	e7d6      	b.n	80133ba <_free_r+0x22>
 801340c:	6820      	ldr	r0, [r4, #0]
 801340e:	1821      	adds	r1, r4, r0
 8013410:	428b      	cmp	r3, r1
 8013412:	bf04      	itt	eq
 8013414:	6819      	ldreq	r1, [r3, #0]
 8013416:	685b      	ldreq	r3, [r3, #4]
 8013418:	6063      	str	r3, [r4, #4]
 801341a:	bf04      	itt	eq
 801341c:	1809      	addeq	r1, r1, r0
 801341e:	6021      	streq	r1, [r4, #0]
 8013420:	6054      	str	r4, [r2, #4]
 8013422:	e7ca      	b.n	80133ba <_free_r+0x22>
 8013424:	bd38      	pop	{r3, r4, r5, pc}
 8013426:	bf00      	nop
 8013428:	20001010 	.word	0x20001010

0801342c <__sfputc_r>:
 801342c:	6893      	ldr	r3, [r2, #8]
 801342e:	3b01      	subs	r3, #1
 8013430:	2b00      	cmp	r3, #0
 8013432:	b410      	push	{r4}
 8013434:	6093      	str	r3, [r2, #8]
 8013436:	da08      	bge.n	801344a <__sfputc_r+0x1e>
 8013438:	6994      	ldr	r4, [r2, #24]
 801343a:	42a3      	cmp	r3, r4
 801343c:	db01      	blt.n	8013442 <__sfputc_r+0x16>
 801343e:	290a      	cmp	r1, #10
 8013440:	d103      	bne.n	801344a <__sfputc_r+0x1e>
 8013442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013446:	f7ff be1a 	b.w	801307e <__swbuf_r>
 801344a:	6813      	ldr	r3, [r2, #0]
 801344c:	1c58      	adds	r0, r3, #1
 801344e:	6010      	str	r0, [r2, #0]
 8013450:	7019      	strb	r1, [r3, #0]
 8013452:	4608      	mov	r0, r1
 8013454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013458:	4770      	bx	lr

0801345a <__sfputs_r>:
 801345a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	4614      	mov	r4, r2
 8013462:	18d5      	adds	r5, r2, r3
 8013464:	42ac      	cmp	r4, r5
 8013466:	d101      	bne.n	801346c <__sfputs_r+0x12>
 8013468:	2000      	movs	r0, #0
 801346a:	e007      	b.n	801347c <__sfputs_r+0x22>
 801346c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013470:	463a      	mov	r2, r7
 8013472:	4630      	mov	r0, r6
 8013474:	f7ff ffda 	bl	801342c <__sfputc_r>
 8013478:	1c43      	adds	r3, r0, #1
 801347a:	d1f3      	bne.n	8013464 <__sfputs_r+0xa>
 801347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013480 <_vfiprintf_r>:
 8013480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013484:	460d      	mov	r5, r1
 8013486:	b09d      	sub	sp, #116	@ 0x74
 8013488:	4614      	mov	r4, r2
 801348a:	4698      	mov	r8, r3
 801348c:	4606      	mov	r6, r0
 801348e:	b118      	cbz	r0, 8013498 <_vfiprintf_r+0x18>
 8013490:	6a03      	ldr	r3, [r0, #32]
 8013492:	b90b      	cbnz	r3, 8013498 <_vfiprintf_r+0x18>
 8013494:	f7ff fd0a 	bl	8012eac <__sinit>
 8013498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801349a:	07d9      	lsls	r1, r3, #31
 801349c:	d405      	bmi.n	80134aa <_vfiprintf_r+0x2a>
 801349e:	89ab      	ldrh	r3, [r5, #12]
 80134a0:	059a      	lsls	r2, r3, #22
 80134a2:	d402      	bmi.n	80134aa <_vfiprintf_r+0x2a>
 80134a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134a6:	f7ff ff66 	bl	8013376 <__retarget_lock_acquire_recursive>
 80134aa:	89ab      	ldrh	r3, [r5, #12]
 80134ac:	071b      	lsls	r3, r3, #28
 80134ae:	d501      	bpl.n	80134b4 <_vfiprintf_r+0x34>
 80134b0:	692b      	ldr	r3, [r5, #16]
 80134b2:	b99b      	cbnz	r3, 80134dc <_vfiprintf_r+0x5c>
 80134b4:	4629      	mov	r1, r5
 80134b6:	4630      	mov	r0, r6
 80134b8:	f7ff fe20 	bl	80130fc <__swsetup_r>
 80134bc:	b170      	cbz	r0, 80134dc <_vfiprintf_r+0x5c>
 80134be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80134c0:	07dc      	lsls	r4, r3, #31
 80134c2:	d504      	bpl.n	80134ce <_vfiprintf_r+0x4e>
 80134c4:	f04f 30ff 	mov.w	r0, #4294967295
 80134c8:	b01d      	add	sp, #116	@ 0x74
 80134ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ce:	89ab      	ldrh	r3, [r5, #12]
 80134d0:	0598      	lsls	r0, r3, #22
 80134d2:	d4f7      	bmi.n	80134c4 <_vfiprintf_r+0x44>
 80134d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134d6:	f7ff ff4f 	bl	8013378 <__retarget_lock_release_recursive>
 80134da:	e7f3      	b.n	80134c4 <_vfiprintf_r+0x44>
 80134dc:	2300      	movs	r3, #0
 80134de:	9309      	str	r3, [sp, #36]	@ 0x24
 80134e0:	2320      	movs	r3, #32
 80134e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80134e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ea:	2330      	movs	r3, #48	@ 0x30
 80134ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801369c <_vfiprintf_r+0x21c>
 80134f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80134f4:	f04f 0901 	mov.w	r9, #1
 80134f8:	4623      	mov	r3, r4
 80134fa:	469a      	mov	sl, r3
 80134fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013500:	b10a      	cbz	r2, 8013506 <_vfiprintf_r+0x86>
 8013502:	2a25      	cmp	r2, #37	@ 0x25
 8013504:	d1f9      	bne.n	80134fa <_vfiprintf_r+0x7a>
 8013506:	ebba 0b04 	subs.w	fp, sl, r4
 801350a:	d00b      	beq.n	8013524 <_vfiprintf_r+0xa4>
 801350c:	465b      	mov	r3, fp
 801350e:	4622      	mov	r2, r4
 8013510:	4629      	mov	r1, r5
 8013512:	4630      	mov	r0, r6
 8013514:	f7ff ffa1 	bl	801345a <__sfputs_r>
 8013518:	3001      	adds	r0, #1
 801351a:	f000 80a7 	beq.w	801366c <_vfiprintf_r+0x1ec>
 801351e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013520:	445a      	add	r2, fp
 8013522:	9209      	str	r2, [sp, #36]	@ 0x24
 8013524:	f89a 3000 	ldrb.w	r3, [sl]
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 809f 	beq.w	801366c <_vfiprintf_r+0x1ec>
 801352e:	2300      	movs	r3, #0
 8013530:	f04f 32ff 	mov.w	r2, #4294967295
 8013534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013538:	f10a 0a01 	add.w	sl, sl, #1
 801353c:	9304      	str	r3, [sp, #16]
 801353e:	9307      	str	r3, [sp, #28]
 8013540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013544:	931a      	str	r3, [sp, #104]	@ 0x68
 8013546:	4654      	mov	r4, sl
 8013548:	2205      	movs	r2, #5
 801354a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801354e:	4853      	ldr	r0, [pc, #332]	@ (801369c <_vfiprintf_r+0x21c>)
 8013550:	f7ec fe56 	bl	8000200 <memchr>
 8013554:	9a04      	ldr	r2, [sp, #16]
 8013556:	b9d8      	cbnz	r0, 8013590 <_vfiprintf_r+0x110>
 8013558:	06d1      	lsls	r1, r2, #27
 801355a:	bf44      	itt	mi
 801355c:	2320      	movmi	r3, #32
 801355e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013562:	0713      	lsls	r3, r2, #28
 8013564:	bf44      	itt	mi
 8013566:	232b      	movmi	r3, #43	@ 0x2b
 8013568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801356c:	f89a 3000 	ldrb.w	r3, [sl]
 8013570:	2b2a      	cmp	r3, #42	@ 0x2a
 8013572:	d015      	beq.n	80135a0 <_vfiprintf_r+0x120>
 8013574:	9a07      	ldr	r2, [sp, #28]
 8013576:	4654      	mov	r4, sl
 8013578:	2000      	movs	r0, #0
 801357a:	f04f 0c0a 	mov.w	ip, #10
 801357e:	4621      	mov	r1, r4
 8013580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013584:	3b30      	subs	r3, #48	@ 0x30
 8013586:	2b09      	cmp	r3, #9
 8013588:	d94b      	bls.n	8013622 <_vfiprintf_r+0x1a2>
 801358a:	b1b0      	cbz	r0, 80135ba <_vfiprintf_r+0x13a>
 801358c:	9207      	str	r2, [sp, #28]
 801358e:	e014      	b.n	80135ba <_vfiprintf_r+0x13a>
 8013590:	eba0 0308 	sub.w	r3, r0, r8
 8013594:	fa09 f303 	lsl.w	r3, r9, r3
 8013598:	4313      	orrs	r3, r2
 801359a:	9304      	str	r3, [sp, #16]
 801359c:	46a2      	mov	sl, r4
 801359e:	e7d2      	b.n	8013546 <_vfiprintf_r+0xc6>
 80135a0:	9b03      	ldr	r3, [sp, #12]
 80135a2:	1d19      	adds	r1, r3, #4
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	9103      	str	r1, [sp, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	bfbb      	ittet	lt
 80135ac:	425b      	neglt	r3, r3
 80135ae:	f042 0202 	orrlt.w	r2, r2, #2
 80135b2:	9307      	strge	r3, [sp, #28]
 80135b4:	9307      	strlt	r3, [sp, #28]
 80135b6:	bfb8      	it	lt
 80135b8:	9204      	strlt	r2, [sp, #16]
 80135ba:	7823      	ldrb	r3, [r4, #0]
 80135bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80135be:	d10a      	bne.n	80135d6 <_vfiprintf_r+0x156>
 80135c0:	7863      	ldrb	r3, [r4, #1]
 80135c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80135c4:	d132      	bne.n	801362c <_vfiprintf_r+0x1ac>
 80135c6:	9b03      	ldr	r3, [sp, #12]
 80135c8:	1d1a      	adds	r2, r3, #4
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	9203      	str	r2, [sp, #12]
 80135ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80135d2:	3402      	adds	r4, #2
 80135d4:	9305      	str	r3, [sp, #20]
 80135d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80136ac <_vfiprintf_r+0x22c>
 80135da:	7821      	ldrb	r1, [r4, #0]
 80135dc:	2203      	movs	r2, #3
 80135de:	4650      	mov	r0, sl
 80135e0:	f7ec fe0e 	bl	8000200 <memchr>
 80135e4:	b138      	cbz	r0, 80135f6 <_vfiprintf_r+0x176>
 80135e6:	9b04      	ldr	r3, [sp, #16]
 80135e8:	eba0 000a 	sub.w	r0, r0, sl
 80135ec:	2240      	movs	r2, #64	@ 0x40
 80135ee:	4082      	lsls	r2, r0
 80135f0:	4313      	orrs	r3, r2
 80135f2:	3401      	adds	r4, #1
 80135f4:	9304      	str	r3, [sp, #16]
 80135f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135fa:	4829      	ldr	r0, [pc, #164]	@ (80136a0 <_vfiprintf_r+0x220>)
 80135fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013600:	2206      	movs	r2, #6
 8013602:	f7ec fdfd 	bl	8000200 <memchr>
 8013606:	2800      	cmp	r0, #0
 8013608:	d03f      	beq.n	801368a <_vfiprintf_r+0x20a>
 801360a:	4b26      	ldr	r3, [pc, #152]	@ (80136a4 <_vfiprintf_r+0x224>)
 801360c:	bb1b      	cbnz	r3, 8013656 <_vfiprintf_r+0x1d6>
 801360e:	9b03      	ldr	r3, [sp, #12]
 8013610:	3307      	adds	r3, #7
 8013612:	f023 0307 	bic.w	r3, r3, #7
 8013616:	3308      	adds	r3, #8
 8013618:	9303      	str	r3, [sp, #12]
 801361a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801361c:	443b      	add	r3, r7
 801361e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013620:	e76a      	b.n	80134f8 <_vfiprintf_r+0x78>
 8013622:	fb0c 3202 	mla	r2, ip, r2, r3
 8013626:	460c      	mov	r4, r1
 8013628:	2001      	movs	r0, #1
 801362a:	e7a8      	b.n	801357e <_vfiprintf_r+0xfe>
 801362c:	2300      	movs	r3, #0
 801362e:	3401      	adds	r4, #1
 8013630:	9305      	str	r3, [sp, #20]
 8013632:	4619      	mov	r1, r3
 8013634:	f04f 0c0a 	mov.w	ip, #10
 8013638:	4620      	mov	r0, r4
 801363a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801363e:	3a30      	subs	r2, #48	@ 0x30
 8013640:	2a09      	cmp	r2, #9
 8013642:	d903      	bls.n	801364c <_vfiprintf_r+0x1cc>
 8013644:	2b00      	cmp	r3, #0
 8013646:	d0c6      	beq.n	80135d6 <_vfiprintf_r+0x156>
 8013648:	9105      	str	r1, [sp, #20]
 801364a:	e7c4      	b.n	80135d6 <_vfiprintf_r+0x156>
 801364c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013650:	4604      	mov	r4, r0
 8013652:	2301      	movs	r3, #1
 8013654:	e7f0      	b.n	8013638 <_vfiprintf_r+0x1b8>
 8013656:	ab03      	add	r3, sp, #12
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	462a      	mov	r2, r5
 801365c:	4b12      	ldr	r3, [pc, #72]	@ (80136a8 <_vfiprintf_r+0x228>)
 801365e:	a904      	add	r1, sp, #16
 8013660:	4630      	mov	r0, r6
 8013662:	f3af 8000 	nop.w
 8013666:	4607      	mov	r7, r0
 8013668:	1c78      	adds	r0, r7, #1
 801366a:	d1d6      	bne.n	801361a <_vfiprintf_r+0x19a>
 801366c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801366e:	07d9      	lsls	r1, r3, #31
 8013670:	d405      	bmi.n	801367e <_vfiprintf_r+0x1fe>
 8013672:	89ab      	ldrh	r3, [r5, #12]
 8013674:	059a      	lsls	r2, r3, #22
 8013676:	d402      	bmi.n	801367e <_vfiprintf_r+0x1fe>
 8013678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801367a:	f7ff fe7d 	bl	8013378 <__retarget_lock_release_recursive>
 801367e:	89ab      	ldrh	r3, [r5, #12]
 8013680:	065b      	lsls	r3, r3, #25
 8013682:	f53f af1f 	bmi.w	80134c4 <_vfiprintf_r+0x44>
 8013686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013688:	e71e      	b.n	80134c8 <_vfiprintf_r+0x48>
 801368a:	ab03      	add	r3, sp, #12
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	462a      	mov	r2, r5
 8013690:	4b05      	ldr	r3, [pc, #20]	@ (80136a8 <_vfiprintf_r+0x228>)
 8013692:	a904      	add	r1, sp, #16
 8013694:	4630      	mov	r0, r6
 8013696:	f000 f879 	bl	801378c <_printf_i>
 801369a:	e7e4      	b.n	8013666 <_vfiprintf_r+0x1e6>
 801369c:	08013f27 	.word	0x08013f27
 80136a0:	08013f31 	.word	0x08013f31
 80136a4:	00000000 	.word	0x00000000
 80136a8:	0801345b 	.word	0x0801345b
 80136ac:	08013f2d 	.word	0x08013f2d

080136b0 <_printf_common>:
 80136b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b4:	4616      	mov	r6, r2
 80136b6:	4698      	mov	r8, r3
 80136b8:	688a      	ldr	r2, [r1, #8]
 80136ba:	690b      	ldr	r3, [r1, #16]
 80136bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80136c0:	4293      	cmp	r3, r2
 80136c2:	bfb8      	it	lt
 80136c4:	4613      	movlt	r3, r2
 80136c6:	6033      	str	r3, [r6, #0]
 80136c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80136cc:	4607      	mov	r7, r0
 80136ce:	460c      	mov	r4, r1
 80136d0:	b10a      	cbz	r2, 80136d6 <_printf_common+0x26>
 80136d2:	3301      	adds	r3, #1
 80136d4:	6033      	str	r3, [r6, #0]
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	0699      	lsls	r1, r3, #26
 80136da:	bf42      	ittt	mi
 80136dc:	6833      	ldrmi	r3, [r6, #0]
 80136de:	3302      	addmi	r3, #2
 80136e0:	6033      	strmi	r3, [r6, #0]
 80136e2:	6825      	ldr	r5, [r4, #0]
 80136e4:	f015 0506 	ands.w	r5, r5, #6
 80136e8:	d106      	bne.n	80136f8 <_printf_common+0x48>
 80136ea:	f104 0a19 	add.w	sl, r4, #25
 80136ee:	68e3      	ldr	r3, [r4, #12]
 80136f0:	6832      	ldr	r2, [r6, #0]
 80136f2:	1a9b      	subs	r3, r3, r2
 80136f4:	42ab      	cmp	r3, r5
 80136f6:	dc26      	bgt.n	8013746 <_printf_common+0x96>
 80136f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80136fc:	6822      	ldr	r2, [r4, #0]
 80136fe:	3b00      	subs	r3, #0
 8013700:	bf18      	it	ne
 8013702:	2301      	movne	r3, #1
 8013704:	0692      	lsls	r2, r2, #26
 8013706:	d42b      	bmi.n	8013760 <_printf_common+0xb0>
 8013708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801370c:	4641      	mov	r1, r8
 801370e:	4638      	mov	r0, r7
 8013710:	47c8      	blx	r9
 8013712:	3001      	adds	r0, #1
 8013714:	d01e      	beq.n	8013754 <_printf_common+0xa4>
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	6922      	ldr	r2, [r4, #16]
 801371a:	f003 0306 	and.w	r3, r3, #6
 801371e:	2b04      	cmp	r3, #4
 8013720:	bf02      	ittt	eq
 8013722:	68e5      	ldreq	r5, [r4, #12]
 8013724:	6833      	ldreq	r3, [r6, #0]
 8013726:	1aed      	subeq	r5, r5, r3
 8013728:	68a3      	ldr	r3, [r4, #8]
 801372a:	bf0c      	ite	eq
 801372c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013730:	2500      	movne	r5, #0
 8013732:	4293      	cmp	r3, r2
 8013734:	bfc4      	itt	gt
 8013736:	1a9b      	subgt	r3, r3, r2
 8013738:	18ed      	addgt	r5, r5, r3
 801373a:	2600      	movs	r6, #0
 801373c:	341a      	adds	r4, #26
 801373e:	42b5      	cmp	r5, r6
 8013740:	d11a      	bne.n	8013778 <_printf_common+0xc8>
 8013742:	2000      	movs	r0, #0
 8013744:	e008      	b.n	8013758 <_printf_common+0xa8>
 8013746:	2301      	movs	r3, #1
 8013748:	4652      	mov	r2, sl
 801374a:	4641      	mov	r1, r8
 801374c:	4638      	mov	r0, r7
 801374e:	47c8      	blx	r9
 8013750:	3001      	adds	r0, #1
 8013752:	d103      	bne.n	801375c <_printf_common+0xac>
 8013754:	f04f 30ff 	mov.w	r0, #4294967295
 8013758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801375c:	3501      	adds	r5, #1
 801375e:	e7c6      	b.n	80136ee <_printf_common+0x3e>
 8013760:	18e1      	adds	r1, r4, r3
 8013762:	1c5a      	adds	r2, r3, #1
 8013764:	2030      	movs	r0, #48	@ 0x30
 8013766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801376a:	4422      	add	r2, r4
 801376c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013774:	3302      	adds	r3, #2
 8013776:	e7c7      	b.n	8013708 <_printf_common+0x58>
 8013778:	2301      	movs	r3, #1
 801377a:	4622      	mov	r2, r4
 801377c:	4641      	mov	r1, r8
 801377e:	4638      	mov	r0, r7
 8013780:	47c8      	blx	r9
 8013782:	3001      	adds	r0, #1
 8013784:	d0e6      	beq.n	8013754 <_printf_common+0xa4>
 8013786:	3601      	adds	r6, #1
 8013788:	e7d9      	b.n	801373e <_printf_common+0x8e>
	...

0801378c <_printf_i>:
 801378c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013790:	7e0f      	ldrb	r7, [r1, #24]
 8013792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013794:	2f78      	cmp	r7, #120	@ 0x78
 8013796:	4691      	mov	r9, r2
 8013798:	4680      	mov	r8, r0
 801379a:	460c      	mov	r4, r1
 801379c:	469a      	mov	sl, r3
 801379e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80137a2:	d807      	bhi.n	80137b4 <_printf_i+0x28>
 80137a4:	2f62      	cmp	r7, #98	@ 0x62
 80137a6:	d80a      	bhi.n	80137be <_printf_i+0x32>
 80137a8:	2f00      	cmp	r7, #0
 80137aa:	f000 80d2 	beq.w	8013952 <_printf_i+0x1c6>
 80137ae:	2f58      	cmp	r7, #88	@ 0x58
 80137b0:	f000 80b9 	beq.w	8013926 <_printf_i+0x19a>
 80137b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80137b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80137bc:	e03a      	b.n	8013834 <_printf_i+0xa8>
 80137be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80137c2:	2b15      	cmp	r3, #21
 80137c4:	d8f6      	bhi.n	80137b4 <_printf_i+0x28>
 80137c6:	a101      	add	r1, pc, #4	@ (adr r1, 80137cc <_printf_i+0x40>)
 80137c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137cc:	08013825 	.word	0x08013825
 80137d0:	08013839 	.word	0x08013839
 80137d4:	080137b5 	.word	0x080137b5
 80137d8:	080137b5 	.word	0x080137b5
 80137dc:	080137b5 	.word	0x080137b5
 80137e0:	080137b5 	.word	0x080137b5
 80137e4:	08013839 	.word	0x08013839
 80137e8:	080137b5 	.word	0x080137b5
 80137ec:	080137b5 	.word	0x080137b5
 80137f0:	080137b5 	.word	0x080137b5
 80137f4:	080137b5 	.word	0x080137b5
 80137f8:	08013939 	.word	0x08013939
 80137fc:	08013863 	.word	0x08013863
 8013800:	080138f3 	.word	0x080138f3
 8013804:	080137b5 	.word	0x080137b5
 8013808:	080137b5 	.word	0x080137b5
 801380c:	0801395b 	.word	0x0801395b
 8013810:	080137b5 	.word	0x080137b5
 8013814:	08013863 	.word	0x08013863
 8013818:	080137b5 	.word	0x080137b5
 801381c:	080137b5 	.word	0x080137b5
 8013820:	080138fb 	.word	0x080138fb
 8013824:	6833      	ldr	r3, [r6, #0]
 8013826:	1d1a      	adds	r2, r3, #4
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	6032      	str	r2, [r6, #0]
 801382c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013834:	2301      	movs	r3, #1
 8013836:	e09d      	b.n	8013974 <_printf_i+0x1e8>
 8013838:	6833      	ldr	r3, [r6, #0]
 801383a:	6820      	ldr	r0, [r4, #0]
 801383c:	1d19      	adds	r1, r3, #4
 801383e:	6031      	str	r1, [r6, #0]
 8013840:	0606      	lsls	r6, r0, #24
 8013842:	d501      	bpl.n	8013848 <_printf_i+0xbc>
 8013844:	681d      	ldr	r5, [r3, #0]
 8013846:	e003      	b.n	8013850 <_printf_i+0xc4>
 8013848:	0645      	lsls	r5, r0, #25
 801384a:	d5fb      	bpl.n	8013844 <_printf_i+0xb8>
 801384c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013850:	2d00      	cmp	r5, #0
 8013852:	da03      	bge.n	801385c <_printf_i+0xd0>
 8013854:	232d      	movs	r3, #45	@ 0x2d
 8013856:	426d      	negs	r5, r5
 8013858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801385c:	4859      	ldr	r0, [pc, #356]	@ (80139c4 <_printf_i+0x238>)
 801385e:	230a      	movs	r3, #10
 8013860:	e011      	b.n	8013886 <_printf_i+0xfa>
 8013862:	6821      	ldr	r1, [r4, #0]
 8013864:	6833      	ldr	r3, [r6, #0]
 8013866:	0608      	lsls	r0, r1, #24
 8013868:	f853 5b04 	ldr.w	r5, [r3], #4
 801386c:	d402      	bmi.n	8013874 <_printf_i+0xe8>
 801386e:	0649      	lsls	r1, r1, #25
 8013870:	bf48      	it	mi
 8013872:	b2ad      	uxthmi	r5, r5
 8013874:	2f6f      	cmp	r7, #111	@ 0x6f
 8013876:	4853      	ldr	r0, [pc, #332]	@ (80139c4 <_printf_i+0x238>)
 8013878:	6033      	str	r3, [r6, #0]
 801387a:	bf14      	ite	ne
 801387c:	230a      	movne	r3, #10
 801387e:	2308      	moveq	r3, #8
 8013880:	2100      	movs	r1, #0
 8013882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013886:	6866      	ldr	r6, [r4, #4]
 8013888:	60a6      	str	r6, [r4, #8]
 801388a:	2e00      	cmp	r6, #0
 801388c:	bfa2      	ittt	ge
 801388e:	6821      	ldrge	r1, [r4, #0]
 8013890:	f021 0104 	bicge.w	r1, r1, #4
 8013894:	6021      	strge	r1, [r4, #0]
 8013896:	b90d      	cbnz	r5, 801389c <_printf_i+0x110>
 8013898:	2e00      	cmp	r6, #0
 801389a:	d04b      	beq.n	8013934 <_printf_i+0x1a8>
 801389c:	4616      	mov	r6, r2
 801389e:	fbb5 f1f3 	udiv	r1, r5, r3
 80138a2:	fb03 5711 	mls	r7, r3, r1, r5
 80138a6:	5dc7      	ldrb	r7, [r0, r7]
 80138a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80138ac:	462f      	mov	r7, r5
 80138ae:	42bb      	cmp	r3, r7
 80138b0:	460d      	mov	r5, r1
 80138b2:	d9f4      	bls.n	801389e <_printf_i+0x112>
 80138b4:	2b08      	cmp	r3, #8
 80138b6:	d10b      	bne.n	80138d0 <_printf_i+0x144>
 80138b8:	6823      	ldr	r3, [r4, #0]
 80138ba:	07df      	lsls	r7, r3, #31
 80138bc:	d508      	bpl.n	80138d0 <_printf_i+0x144>
 80138be:	6923      	ldr	r3, [r4, #16]
 80138c0:	6861      	ldr	r1, [r4, #4]
 80138c2:	4299      	cmp	r1, r3
 80138c4:	bfde      	ittt	le
 80138c6:	2330      	movle	r3, #48	@ 0x30
 80138c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80138cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80138d0:	1b92      	subs	r2, r2, r6
 80138d2:	6122      	str	r2, [r4, #16]
 80138d4:	f8cd a000 	str.w	sl, [sp]
 80138d8:	464b      	mov	r3, r9
 80138da:	aa03      	add	r2, sp, #12
 80138dc:	4621      	mov	r1, r4
 80138de:	4640      	mov	r0, r8
 80138e0:	f7ff fee6 	bl	80136b0 <_printf_common>
 80138e4:	3001      	adds	r0, #1
 80138e6:	d14a      	bne.n	801397e <_printf_i+0x1f2>
 80138e8:	f04f 30ff 	mov.w	r0, #4294967295
 80138ec:	b004      	add	sp, #16
 80138ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138f2:	6823      	ldr	r3, [r4, #0]
 80138f4:	f043 0320 	orr.w	r3, r3, #32
 80138f8:	6023      	str	r3, [r4, #0]
 80138fa:	4833      	ldr	r0, [pc, #204]	@ (80139c8 <_printf_i+0x23c>)
 80138fc:	2778      	movs	r7, #120	@ 0x78
 80138fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	6831      	ldr	r1, [r6, #0]
 8013906:	061f      	lsls	r7, r3, #24
 8013908:	f851 5b04 	ldr.w	r5, [r1], #4
 801390c:	d402      	bmi.n	8013914 <_printf_i+0x188>
 801390e:	065f      	lsls	r7, r3, #25
 8013910:	bf48      	it	mi
 8013912:	b2ad      	uxthmi	r5, r5
 8013914:	6031      	str	r1, [r6, #0]
 8013916:	07d9      	lsls	r1, r3, #31
 8013918:	bf44      	itt	mi
 801391a:	f043 0320 	orrmi.w	r3, r3, #32
 801391e:	6023      	strmi	r3, [r4, #0]
 8013920:	b11d      	cbz	r5, 801392a <_printf_i+0x19e>
 8013922:	2310      	movs	r3, #16
 8013924:	e7ac      	b.n	8013880 <_printf_i+0xf4>
 8013926:	4827      	ldr	r0, [pc, #156]	@ (80139c4 <_printf_i+0x238>)
 8013928:	e7e9      	b.n	80138fe <_printf_i+0x172>
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	f023 0320 	bic.w	r3, r3, #32
 8013930:	6023      	str	r3, [r4, #0]
 8013932:	e7f6      	b.n	8013922 <_printf_i+0x196>
 8013934:	4616      	mov	r6, r2
 8013936:	e7bd      	b.n	80138b4 <_printf_i+0x128>
 8013938:	6833      	ldr	r3, [r6, #0]
 801393a:	6825      	ldr	r5, [r4, #0]
 801393c:	6961      	ldr	r1, [r4, #20]
 801393e:	1d18      	adds	r0, r3, #4
 8013940:	6030      	str	r0, [r6, #0]
 8013942:	062e      	lsls	r6, r5, #24
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	d501      	bpl.n	801394c <_printf_i+0x1c0>
 8013948:	6019      	str	r1, [r3, #0]
 801394a:	e002      	b.n	8013952 <_printf_i+0x1c6>
 801394c:	0668      	lsls	r0, r5, #25
 801394e:	d5fb      	bpl.n	8013948 <_printf_i+0x1bc>
 8013950:	8019      	strh	r1, [r3, #0]
 8013952:	2300      	movs	r3, #0
 8013954:	6123      	str	r3, [r4, #16]
 8013956:	4616      	mov	r6, r2
 8013958:	e7bc      	b.n	80138d4 <_printf_i+0x148>
 801395a:	6833      	ldr	r3, [r6, #0]
 801395c:	1d1a      	adds	r2, r3, #4
 801395e:	6032      	str	r2, [r6, #0]
 8013960:	681e      	ldr	r6, [r3, #0]
 8013962:	6862      	ldr	r2, [r4, #4]
 8013964:	2100      	movs	r1, #0
 8013966:	4630      	mov	r0, r6
 8013968:	f7ec fc4a 	bl	8000200 <memchr>
 801396c:	b108      	cbz	r0, 8013972 <_printf_i+0x1e6>
 801396e:	1b80      	subs	r0, r0, r6
 8013970:	6060      	str	r0, [r4, #4]
 8013972:	6863      	ldr	r3, [r4, #4]
 8013974:	6123      	str	r3, [r4, #16]
 8013976:	2300      	movs	r3, #0
 8013978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801397c:	e7aa      	b.n	80138d4 <_printf_i+0x148>
 801397e:	6923      	ldr	r3, [r4, #16]
 8013980:	4632      	mov	r2, r6
 8013982:	4649      	mov	r1, r9
 8013984:	4640      	mov	r0, r8
 8013986:	47d0      	blx	sl
 8013988:	3001      	adds	r0, #1
 801398a:	d0ad      	beq.n	80138e8 <_printf_i+0x15c>
 801398c:	6823      	ldr	r3, [r4, #0]
 801398e:	079b      	lsls	r3, r3, #30
 8013990:	d413      	bmi.n	80139ba <_printf_i+0x22e>
 8013992:	68e0      	ldr	r0, [r4, #12]
 8013994:	9b03      	ldr	r3, [sp, #12]
 8013996:	4298      	cmp	r0, r3
 8013998:	bfb8      	it	lt
 801399a:	4618      	movlt	r0, r3
 801399c:	e7a6      	b.n	80138ec <_printf_i+0x160>
 801399e:	2301      	movs	r3, #1
 80139a0:	4632      	mov	r2, r6
 80139a2:	4649      	mov	r1, r9
 80139a4:	4640      	mov	r0, r8
 80139a6:	47d0      	blx	sl
 80139a8:	3001      	adds	r0, #1
 80139aa:	d09d      	beq.n	80138e8 <_printf_i+0x15c>
 80139ac:	3501      	adds	r5, #1
 80139ae:	68e3      	ldr	r3, [r4, #12]
 80139b0:	9903      	ldr	r1, [sp, #12]
 80139b2:	1a5b      	subs	r3, r3, r1
 80139b4:	42ab      	cmp	r3, r5
 80139b6:	dcf2      	bgt.n	801399e <_printf_i+0x212>
 80139b8:	e7eb      	b.n	8013992 <_printf_i+0x206>
 80139ba:	2500      	movs	r5, #0
 80139bc:	f104 0619 	add.w	r6, r4, #25
 80139c0:	e7f5      	b.n	80139ae <_printf_i+0x222>
 80139c2:	bf00      	nop
 80139c4:	08013f38 	.word	0x08013f38
 80139c8:	08013f49 	.word	0x08013f49

080139cc <__sflush_r>:
 80139cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80139d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d4:	0716      	lsls	r6, r2, #28
 80139d6:	4605      	mov	r5, r0
 80139d8:	460c      	mov	r4, r1
 80139da:	d454      	bmi.n	8013a86 <__sflush_r+0xba>
 80139dc:	684b      	ldr	r3, [r1, #4]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	dc02      	bgt.n	80139e8 <__sflush_r+0x1c>
 80139e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	dd48      	ble.n	8013a7a <__sflush_r+0xae>
 80139e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80139ea:	2e00      	cmp	r6, #0
 80139ec:	d045      	beq.n	8013a7a <__sflush_r+0xae>
 80139ee:	2300      	movs	r3, #0
 80139f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80139f4:	682f      	ldr	r7, [r5, #0]
 80139f6:	6a21      	ldr	r1, [r4, #32]
 80139f8:	602b      	str	r3, [r5, #0]
 80139fa:	d030      	beq.n	8013a5e <__sflush_r+0x92>
 80139fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80139fe:	89a3      	ldrh	r3, [r4, #12]
 8013a00:	0759      	lsls	r1, r3, #29
 8013a02:	d505      	bpl.n	8013a10 <__sflush_r+0x44>
 8013a04:	6863      	ldr	r3, [r4, #4]
 8013a06:	1ad2      	subs	r2, r2, r3
 8013a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013a0a:	b10b      	cbz	r3, 8013a10 <__sflush_r+0x44>
 8013a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013a0e:	1ad2      	subs	r2, r2, r3
 8013a10:	2300      	movs	r3, #0
 8013a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a14:	6a21      	ldr	r1, [r4, #32]
 8013a16:	4628      	mov	r0, r5
 8013a18:	47b0      	blx	r6
 8013a1a:	1c43      	adds	r3, r0, #1
 8013a1c:	89a3      	ldrh	r3, [r4, #12]
 8013a1e:	d106      	bne.n	8013a2e <__sflush_r+0x62>
 8013a20:	6829      	ldr	r1, [r5, #0]
 8013a22:	291d      	cmp	r1, #29
 8013a24:	d82b      	bhi.n	8013a7e <__sflush_r+0xb2>
 8013a26:	4a2a      	ldr	r2, [pc, #168]	@ (8013ad0 <__sflush_r+0x104>)
 8013a28:	410a      	asrs	r2, r1
 8013a2a:	07d6      	lsls	r6, r2, #31
 8013a2c:	d427      	bmi.n	8013a7e <__sflush_r+0xb2>
 8013a2e:	2200      	movs	r2, #0
 8013a30:	6062      	str	r2, [r4, #4]
 8013a32:	04d9      	lsls	r1, r3, #19
 8013a34:	6922      	ldr	r2, [r4, #16]
 8013a36:	6022      	str	r2, [r4, #0]
 8013a38:	d504      	bpl.n	8013a44 <__sflush_r+0x78>
 8013a3a:	1c42      	adds	r2, r0, #1
 8013a3c:	d101      	bne.n	8013a42 <__sflush_r+0x76>
 8013a3e:	682b      	ldr	r3, [r5, #0]
 8013a40:	b903      	cbnz	r3, 8013a44 <__sflush_r+0x78>
 8013a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8013a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a46:	602f      	str	r7, [r5, #0]
 8013a48:	b1b9      	cbz	r1, 8013a7a <__sflush_r+0xae>
 8013a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a4e:	4299      	cmp	r1, r3
 8013a50:	d002      	beq.n	8013a58 <__sflush_r+0x8c>
 8013a52:	4628      	mov	r0, r5
 8013a54:	f7ff fca0 	bl	8013398 <_free_r>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a5c:	e00d      	b.n	8013a7a <__sflush_r+0xae>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	4628      	mov	r0, r5
 8013a62:	47b0      	blx	r6
 8013a64:	4602      	mov	r2, r0
 8013a66:	1c50      	adds	r0, r2, #1
 8013a68:	d1c9      	bne.n	80139fe <__sflush_r+0x32>
 8013a6a:	682b      	ldr	r3, [r5, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d0c6      	beq.n	80139fe <__sflush_r+0x32>
 8013a70:	2b1d      	cmp	r3, #29
 8013a72:	d001      	beq.n	8013a78 <__sflush_r+0xac>
 8013a74:	2b16      	cmp	r3, #22
 8013a76:	d11e      	bne.n	8013ab6 <__sflush_r+0xea>
 8013a78:	602f      	str	r7, [r5, #0]
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	e022      	b.n	8013ac4 <__sflush_r+0xf8>
 8013a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a82:	b21b      	sxth	r3, r3
 8013a84:	e01b      	b.n	8013abe <__sflush_r+0xf2>
 8013a86:	690f      	ldr	r7, [r1, #16]
 8013a88:	2f00      	cmp	r7, #0
 8013a8a:	d0f6      	beq.n	8013a7a <__sflush_r+0xae>
 8013a8c:	0793      	lsls	r3, r2, #30
 8013a8e:	680e      	ldr	r6, [r1, #0]
 8013a90:	bf08      	it	eq
 8013a92:	694b      	ldreq	r3, [r1, #20]
 8013a94:	600f      	str	r7, [r1, #0]
 8013a96:	bf18      	it	ne
 8013a98:	2300      	movne	r3, #0
 8013a9a:	eba6 0807 	sub.w	r8, r6, r7
 8013a9e:	608b      	str	r3, [r1, #8]
 8013aa0:	f1b8 0f00 	cmp.w	r8, #0
 8013aa4:	dde9      	ble.n	8013a7a <__sflush_r+0xae>
 8013aa6:	6a21      	ldr	r1, [r4, #32]
 8013aa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013aaa:	4643      	mov	r3, r8
 8013aac:	463a      	mov	r2, r7
 8013aae:	4628      	mov	r0, r5
 8013ab0:	47b0      	blx	r6
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	dc08      	bgt.n	8013ac8 <__sflush_r+0xfc>
 8013ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013abe:	81a3      	strh	r3, [r4, #12]
 8013ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ac8:	4407      	add	r7, r0
 8013aca:	eba8 0800 	sub.w	r8, r8, r0
 8013ace:	e7e7      	b.n	8013aa0 <__sflush_r+0xd4>
 8013ad0:	dfbffffe 	.word	0xdfbffffe

08013ad4 <_fflush_r>:
 8013ad4:	b538      	push	{r3, r4, r5, lr}
 8013ad6:	690b      	ldr	r3, [r1, #16]
 8013ad8:	4605      	mov	r5, r0
 8013ada:	460c      	mov	r4, r1
 8013adc:	b913      	cbnz	r3, 8013ae4 <_fflush_r+0x10>
 8013ade:	2500      	movs	r5, #0
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	b118      	cbz	r0, 8013aee <_fflush_r+0x1a>
 8013ae6:	6a03      	ldr	r3, [r0, #32]
 8013ae8:	b90b      	cbnz	r3, 8013aee <_fflush_r+0x1a>
 8013aea:	f7ff f9df 	bl	8012eac <__sinit>
 8013aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d0f3      	beq.n	8013ade <_fflush_r+0xa>
 8013af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013af8:	07d0      	lsls	r0, r2, #31
 8013afa:	d404      	bmi.n	8013b06 <_fflush_r+0x32>
 8013afc:	0599      	lsls	r1, r3, #22
 8013afe:	d402      	bmi.n	8013b06 <_fflush_r+0x32>
 8013b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b02:	f7ff fc38 	bl	8013376 <__retarget_lock_acquire_recursive>
 8013b06:	4628      	mov	r0, r5
 8013b08:	4621      	mov	r1, r4
 8013b0a:	f7ff ff5f 	bl	80139cc <__sflush_r>
 8013b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013b10:	07da      	lsls	r2, r3, #31
 8013b12:	4605      	mov	r5, r0
 8013b14:	d4e4      	bmi.n	8013ae0 <_fflush_r+0xc>
 8013b16:	89a3      	ldrh	r3, [r4, #12]
 8013b18:	059b      	lsls	r3, r3, #22
 8013b1a:	d4e1      	bmi.n	8013ae0 <_fflush_r+0xc>
 8013b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b1e:	f7ff fc2b 	bl	8013378 <__retarget_lock_release_recursive>
 8013b22:	e7dd      	b.n	8013ae0 <_fflush_r+0xc>

08013b24 <__swhatbuf_r>:
 8013b24:	b570      	push	{r4, r5, r6, lr}
 8013b26:	460c      	mov	r4, r1
 8013b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b2c:	2900      	cmp	r1, #0
 8013b2e:	b096      	sub	sp, #88	@ 0x58
 8013b30:	4615      	mov	r5, r2
 8013b32:	461e      	mov	r6, r3
 8013b34:	da0d      	bge.n	8013b52 <__swhatbuf_r+0x2e>
 8013b36:	89a3      	ldrh	r3, [r4, #12]
 8013b38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013b3c:	f04f 0100 	mov.w	r1, #0
 8013b40:	bf14      	ite	ne
 8013b42:	2340      	movne	r3, #64	@ 0x40
 8013b44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013b48:	2000      	movs	r0, #0
 8013b4a:	6031      	str	r1, [r6, #0]
 8013b4c:	602b      	str	r3, [r5, #0]
 8013b4e:	b016      	add	sp, #88	@ 0x58
 8013b50:	bd70      	pop	{r4, r5, r6, pc}
 8013b52:	466a      	mov	r2, sp
 8013b54:	f000 f848 	bl	8013be8 <_fstat_r>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	dbec      	blt.n	8013b36 <__swhatbuf_r+0x12>
 8013b5c:	9901      	ldr	r1, [sp, #4]
 8013b5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013b62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013b66:	4259      	negs	r1, r3
 8013b68:	4159      	adcs	r1, r3
 8013b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013b6e:	e7eb      	b.n	8013b48 <__swhatbuf_r+0x24>

08013b70 <__smakebuf_r>:
 8013b70:	898b      	ldrh	r3, [r1, #12]
 8013b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b74:	079d      	lsls	r5, r3, #30
 8013b76:	4606      	mov	r6, r0
 8013b78:	460c      	mov	r4, r1
 8013b7a:	d507      	bpl.n	8013b8c <__smakebuf_r+0x1c>
 8013b7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013b80:	6023      	str	r3, [r4, #0]
 8013b82:	6123      	str	r3, [r4, #16]
 8013b84:	2301      	movs	r3, #1
 8013b86:	6163      	str	r3, [r4, #20]
 8013b88:	b003      	add	sp, #12
 8013b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b8c:	ab01      	add	r3, sp, #4
 8013b8e:	466a      	mov	r2, sp
 8013b90:	f7ff ffc8 	bl	8013b24 <__swhatbuf_r>
 8013b94:	9f00      	ldr	r7, [sp, #0]
 8013b96:	4605      	mov	r5, r0
 8013b98:	4639      	mov	r1, r7
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f7ff f86e 	bl	8012c7c <_malloc_r>
 8013ba0:	b948      	cbnz	r0, 8013bb6 <__smakebuf_r+0x46>
 8013ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ba6:	059a      	lsls	r2, r3, #22
 8013ba8:	d4ee      	bmi.n	8013b88 <__smakebuf_r+0x18>
 8013baa:	f023 0303 	bic.w	r3, r3, #3
 8013bae:	f043 0302 	orr.w	r3, r3, #2
 8013bb2:	81a3      	strh	r3, [r4, #12]
 8013bb4:	e7e2      	b.n	8013b7c <__smakebuf_r+0xc>
 8013bb6:	89a3      	ldrh	r3, [r4, #12]
 8013bb8:	6020      	str	r0, [r4, #0]
 8013bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013bbe:	81a3      	strh	r3, [r4, #12]
 8013bc0:	9b01      	ldr	r3, [sp, #4]
 8013bc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013bc6:	b15b      	cbz	r3, 8013be0 <__smakebuf_r+0x70>
 8013bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bcc:	4630      	mov	r0, r6
 8013bce:	f000 f81d 	bl	8013c0c <_isatty_r>
 8013bd2:	b128      	cbz	r0, 8013be0 <__smakebuf_r+0x70>
 8013bd4:	89a3      	ldrh	r3, [r4, #12]
 8013bd6:	f023 0303 	bic.w	r3, r3, #3
 8013bda:	f043 0301 	orr.w	r3, r3, #1
 8013bde:	81a3      	strh	r3, [r4, #12]
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	431d      	orrs	r5, r3
 8013be4:	81a5      	strh	r5, [r4, #12]
 8013be6:	e7cf      	b.n	8013b88 <__smakebuf_r+0x18>

08013be8 <_fstat_r>:
 8013be8:	b538      	push	{r3, r4, r5, lr}
 8013bea:	4d07      	ldr	r5, [pc, #28]	@ (8013c08 <_fstat_r+0x20>)
 8013bec:	2300      	movs	r3, #0
 8013bee:	4604      	mov	r4, r0
 8013bf0:	4608      	mov	r0, r1
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	602b      	str	r3, [r5, #0]
 8013bf6:	f7ef fa5d 	bl	80030b4 <_fstat>
 8013bfa:	1c43      	adds	r3, r0, #1
 8013bfc:	d102      	bne.n	8013c04 <_fstat_r+0x1c>
 8013bfe:	682b      	ldr	r3, [r5, #0]
 8013c00:	b103      	cbz	r3, 8013c04 <_fstat_r+0x1c>
 8013c02:	6023      	str	r3, [r4, #0]
 8013c04:	bd38      	pop	{r3, r4, r5, pc}
 8013c06:	bf00      	nop
 8013c08:	20001150 	.word	0x20001150

08013c0c <_isatty_r>:
 8013c0c:	b538      	push	{r3, r4, r5, lr}
 8013c0e:	4d06      	ldr	r5, [pc, #24]	@ (8013c28 <_isatty_r+0x1c>)
 8013c10:	2300      	movs	r3, #0
 8013c12:	4604      	mov	r4, r0
 8013c14:	4608      	mov	r0, r1
 8013c16:	602b      	str	r3, [r5, #0]
 8013c18:	f7ef fa5c 	bl	80030d4 <_isatty>
 8013c1c:	1c43      	adds	r3, r0, #1
 8013c1e:	d102      	bne.n	8013c26 <_isatty_r+0x1a>
 8013c20:	682b      	ldr	r3, [r5, #0]
 8013c22:	b103      	cbz	r3, 8013c26 <_isatty_r+0x1a>
 8013c24:	6023      	str	r3, [r4, #0]
 8013c26:	bd38      	pop	{r3, r4, r5, pc}
 8013c28:	20001150 	.word	0x20001150

08013c2c <_init>:
 8013c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c2e:	bf00      	nop
 8013c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c32:	bc08      	pop	{r3}
 8013c34:	469e      	mov	lr, r3
 8013c36:	4770      	bx	lr

08013c38 <_fini>:
 8013c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3a:	bf00      	nop
 8013c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c3e:	bc08      	pop	{r3}
 8013c40:	469e      	mov	lr, r3
 8013c42:	4770      	bx	lr
