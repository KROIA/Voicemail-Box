
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116cc  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08011880  08011880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119f8  080119f8  0001307c  2**0
                  CONTENTS
  4 .ARM          00000008  080119f8  080119f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a00  08011a00  0001307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a00  08011a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a04  08011a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08011a08  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001307c  2**0
                  CONTENTS
 10 .bss          000012f0  2000007c  2000007c  0001307c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000136c  2000136c  0001307c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001307c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003130d  00000000  00000000  000130ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c59  00000000  00000000  000443b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027e8  00000000  00000000  0004b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001edd  00000000  00000000  0004d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000371e2  00000000  00000000  0004f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038e20  00000000  00000000  000868bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119860  00000000  00000000  000bf6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d8f3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ad68  00000000  00000000  001d8f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  001e3cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	@ (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08011868 	.word	0x08011868

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000080 	.word	0x20000080
 80001f0:	08011868 	.word	0x08011868

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN3VMB5IFileC1Ev>:
#define IFILE_HPP_


namespace VMB
{
	class IFile
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <_ZN3VMB5IFileC1Ev+0x1c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	0801191c 	.word	0x0801191c

08000514 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <_ZN3VMB5IFileD1Ev+0x1c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	0801191c 	.word	0x0801191c

08000534 <_ZN3VMB5IFileD0Ev>:
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ffe9 	bl	8000514 <_ZN3VMB5IFileD1Ev>
 8000542:	2104      	movs	r1, #4
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f011 f83f 	bl	80115c8 <_ZdlPvj>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <_ZN3VMB9FAT32FileC1Ev>:
	bool FAT32File::s_isMounted = false;
	//FATFS FAT32File::s_SDFatFS;
    //char FAT32File::s_SDPath[4] = "0:/";
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ffc8 	bl	80004f4 <_ZN3VMB5IFileC1Ev>
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <_ZN3VMB9FAT32FileC1Ev+0x48>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
	{
		if(!s_isMounted)
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <_ZN3VMB9FAT32FileC1Ev+0x4c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00c      	beq.n	8000592 <_ZN3VMB9FAT32FileC1Ev+0x3e>
		{
			FRESULT res =  f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	490a      	ldr	r1, [pc, #40]	@ (80005a4 <_ZN3VMB9FAT32FileC1Ev+0x50>)
 800057c:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <_ZN3VMB9FAT32FileC1Ev+0x54>)
 800057e:	f00f fc73 	bl	800fe68 <f_mount>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]
			if(res == FRESULT::FR_OK)
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <_ZN3VMB9FAT32FileC1Ev+0x3e>
			{
				//res = f_mkfs((TCHAR const*)s_SDPath, FM_ANY, 0, s_rtext, sizeof(s_rtext));
				//if(res == FRESULT::FR_OK)
				//{
					s_isMounted = true;
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <_ZN3VMB9FAT32FileC1Ev+0x4c>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
			else
			{

			}
		}
	}
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	0801190c 	.word	0x0801190c
 80005a0:	20000098 	.word	0x20000098
 80005a4:	200005d0 	.word	0x200005d0
 80005a8:	200005d4 	.word	0x200005d4

080005ac <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <_ZN3VMB9FAT32FileD1Ev+0x20>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
	{

	}
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffa9 	bl	8000514 <_ZN3VMB5IFileD1Ev>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	0801190c 	.word	0x0801190c

080005d0 <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	}
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffe7 	bl	80005ac <_ZN3VMB9FAT32FileD1Ev>
 80005de:	f44f 710d 	mov.w	r1, #564	@ 0x234
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f010 fff0 	bl	80115c8 <_ZdlPvj>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>:

	bool FAT32File::open(const char* path, AccessMode mode)
	{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71fb      	strb	r3, [r7, #7]
		switch(mode)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d022      	beq.n	800064c <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x5a>
 8000606:	2b02      	cmp	r3, #2
 8000608:	dc2e      	bgt.n	8000668 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x76>
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x22>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00e      	beq.n	8000630 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x3e>
 8000612:	e029      	b.n	8000668 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x76>
		{
			case AccessMode::read:
			{
				return f_open(&m_fileHandle, path, FA_READ) == FRESULT::FR_OK;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3304      	adds	r3, #4
 8000618:	2201      	movs	r2, #1
 800061a:	68b9      	ldr	r1, [r7, #8]
 800061c:	4618      	mov	r0, r3
 800061e:	f00f fc69 	bl	800fef4 <f_open>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	bf0c      	ite	eq
 8000628:	2301      	moveq	r3, #1
 800062a:	2300      	movne	r3, #0
 800062c:	b2db      	uxtb	r3, r3
 800062e:	e01c      	b.n	800066a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x78>
			}
			case AccessMode::write:
			{
				return f_open(&m_fileHandle, path, FA_CREATE_ALWAYS | FA_WRITE) == FRESULT::FR_OK;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3304      	adds	r3, #4
 8000634:	220a      	movs	r2, #10
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	4618      	mov	r0, r3
 800063a:	f00f fc5b 	bl	800fef4 <f_open>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	e00e      	b.n	800066a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x78>
			}
			case AccessMode::append:
			{
				return f_open(&m_fileHandle, path, FA_OPEN_APPEND | FA_WRITE) == FRESULT::FR_OK;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3304      	adds	r3, #4
 8000650:	2232      	movs	r2, #50	@ 0x32
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	4618      	mov	r0, r3
 8000656:	f00f fc4d 	bl	800fef4 <f_open>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	e000      	b.n	800066a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x78>
			}
		}
		return false;
 8000668:	2300      	movs	r3, #0
	}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
		return f_close(&m_fileHandle) == FRESULT::FR_OK;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3304      	adds	r3, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f00f ffe5 	bl	801064e <f_close>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
	}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text)
	{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
		size_t len = strlen(text);
 80006a2:	6838      	ldr	r0, [r7, #0]
 80006a4:	f7ff fda6 	bl	80001f4 <strlen>
 80006a8:	6178      	str	r0, [r7, #20]
		UINT bytesWritten = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
		FRESULT res = f_write(&m_fileHandle, text, len, &bytesWritten);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	1d18      	adds	r0, r3, #4
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	6839      	ldr	r1, [r7, #0]
 80006ba:	f00f fdd5 	bl	8010268 <f_write>
 80006be:	4603      	mov	r3, r0
 80006c0:	74fb      	strb	r3, [r7, #19]
		return bytesWritten;
 80006c2:	68fb      	ldr	r3, [r7, #12]
	}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <setup>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "FAT32File.hpp"

void setup()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80006d2:	af00      	add	r7, sp, #0
	//int a = VMB::test();
	VMB::FAT32File file;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff3c 	bl	8000554 <_ZN3VMB9FAT32FileC1Ev>

	if(file.open("test.txt", VMB::FAT32File::AccessMode::write))
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2201      	movs	r2, #1
 80006e0:	490b      	ldr	r1, [pc, #44]	@ (8000710 <setup+0x44>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff85 	bl	80005f2 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <setup+0x34>
	{
		file.write("Text");
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4908      	ldr	r1, [pc, #32]	@ (8000714 <setup+0x48>)
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffd0 	bl	8000698 <_ZN3VMB9FAT32File5writeEPKc>
		file.close();
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffb9 	bl	8000672 <_ZN3VMB9FAT32File5closeEv>
	}


}
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff52 	bl	80005ac <_ZN3VMB9FAT32FileD1Ev>
 8000708:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	08011880 	.word	0x08011880
 8000714:	0801188c 	.word	0x0801188c

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800071e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f001 fcc4 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f89a 	bl	800085c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000728:	f000 f90a 	bl	8000940 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 fd1a 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f000 fca0 	bl	8001074 <MX_DMA_Init>
  MX_CRC_Init();
 8000734:	f000 f930 	bl	8000998 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000738:	f000 f942 	bl	80009c0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800073c:	f000 f972 	bl	8000a24 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000740:	f000 fcc0 	bl	80010c4 <MX_FMC_Init>
  MX_I2C1_Init();
 8000744:	f000 fa6e 	bl	8000c24 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000748:	f000 fa9a 	bl	8000c80 <MX_I2C2_Init>
  MX_LTDC_Init();
 800074c:	f000 fac6 	bl	8000cdc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000750:	f000 fb42 	bl	8000dd8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000754:	f000 fb6c 	bl	8000e30 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000758:	f000 fbc8 	bl	8000eec <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800075c:	f000 fbe6 	bl	8000f2c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000760:	f000 fc34 	bl	8000fcc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000764:	f000 fc5c 	bl	8001020 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000768:	f00b fbf6 	bl	800bf58 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800076c:	f010 fc22 	bl	8010fb4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  FRESULT res;
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000770:	4b35      	ldr	r3, [pc, #212]	@ (8000848 <main+0x130>)
 8000772:	f507 7401 	add.w	r4, r7, #516	@ 0x204
 8000776:	461d      	mov	r5, r3
 8000778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000780:	c403      	stmia	r4!, {r0, r1}
 8000782:	7022      	strb	r2, [r4, #0]
  uint8_t rtext[_MAX_SS];/* File read buffer */
  if(res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8000784:	2200      	movs	r2, #0
 8000786:	4931      	ldr	r1, [pc, #196]	@ (800084c <main+0x134>)
 8000788:	4831      	ldr	r0, [pc, #196]	@ (8000850 <main+0x138>)
 800078a:	f00f fb6d 	bl	800fe68 <f_mount>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
 800079e:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d143      	bne.n	800082e <main+0x116>
  	{
  		//Error_Handler();
  	}
  	else
  	{
  		if(res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	9200      	str	r2, [sp, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	2107      	movs	r1, #7
 80007b2:	4826      	ldr	r0, [pc, #152]	@ (800084c <main+0x134>)
 80007b4:	f00f ff76 	bl	80106a4 <f_mkfs>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
 80007c8:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d12e      	bne.n	800082e <main+0x116>
  			//Error_Handler();
  		}
  		else
  		{
  			//Open file for writing (Create)
              		if(res = f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80007d0:	220a      	movs	r2, #10
 80007d2:	4920      	ldr	r1, [pc, #128]	@ (8000854 <main+0x13c>)
 80007d4:	4820      	ldr	r0, [pc, #128]	@ (8000858 <main+0x140>)
 80007d6:	f00f fb8d 	bl	800fef4 <f_open>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
 80007ea:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d11d      	bne.n	800082e <main+0x116>
              			//Error_Handler();
              		}
              		else
              		{
              			//Write to the text file
              			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80007f2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fcfc 	bl	80001f4 <strlen>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000802:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <main+0x140>)
 8000808:	f00f fd2e 	bl	8010268 <f_write>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
              			if((byteswritten == 0) || (res != FR_OK))
 8000812:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000816:	2b00      	cmp	r3, #0
 8000818:	d009      	beq.n	800082e <main+0x116>
 800081a:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 800081e:	2b00      	cmp	r3, #0
 8000820:	d105      	bne.n	800082e <main+0x116>
              			{
              				//Error_Handler();
              			}
              			else
              			{
              				res = f_close(&SDFile);
 8000822:	480d      	ldr	r0, [pc, #52]	@ (8000858 <main+0x140>)
 8000824:	f00f ff13 	bl	801064e <f_close>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
              			}
              		}
  		}
  	}
  	res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	4807      	ldr	r0, [pc, #28]	@ (8000850 <main+0x138>)
 8000834:	f00f fb18 	bl	800fe68 <f_mount>
 8000838:	4603      	mov	r3, r0
 800083a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
  setup();
 800083e:	f7ff ff45 	bl	80006cc <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000842:	f010 fbdd 	bl	8011000 <MX_USB_HOST_Process>
 8000846:	e7fc      	b.n	8000842 <main+0x12a>
 8000848:	080118a0 	.word	0x080118a0
 800084c:	200005d0 	.word	0x200005d0
 8000850:	200005d4 	.word	0x200005d4
 8000854:	08011894 	.word	0x08011894
 8000858:	20000804 	.word	0x20000804

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2234      	movs	r2, #52	@ 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f010 ff6e 	bl	801174c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b2c      	ldr	r3, [pc, #176]	@ (8000938 <SystemClock_Config+0xdc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a2b      	ldr	r2, [pc, #172]	@ (8000938 <SystemClock_Config+0xdc>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <SystemClock_Config+0xdc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <SystemClock_Config+0xe0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a25      	ldr	r2, [pc, #148]	@ (800093c <SystemClock_Config+0xe0>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <SystemClock_Config+0xe0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008d0:	23b4      	movs	r3, #180	@ 0xb4
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008d8:	2306      	movs	r3, #6
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80008dc:	2306      	movs	r3, #6
 80008de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4618      	mov	r0, r3
 80008e6:	f006 fda5 	bl	8007434 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f0:	f000 fdd6 	bl	80014a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008f4:	f005 fffc 	bl	80068f0 <HAL_PWREx_EnableOverDrive>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008fe:	f000 fdcf 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800090e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000918:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2105      	movs	r1, #5
 8000920:	4618      	mov	r0, r3
 8000922:	f006 f8f7 	bl	8006b14 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800092c:	f000 fdb8 	bl	80014a0 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	@ 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b090      	sub	sp, #64	@ 0x40
 8000944:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	223c      	movs	r2, #60	@ 0x3c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f010 fefd 	bl	801174c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000952:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000956:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000958:	2390      	movs	r3, #144	@ 0x90
 800095a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000964:	2306      	movs	r3, #6
 8000966:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800096c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000972:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000976:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000978:	2300      	movs	r3, #0
 800097a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f006 fb1a 	bl	8006fb8 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800098a:	f000 fd89 	bl	80014a0 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3740      	adds	r7, #64	@ 0x40
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_CRC_Init+0x20>)
 800099e:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <MX_CRC_Init+0x24>)
 80009a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_CRC_Init+0x20>)
 80009a4:	f001 fcca 	bl	800233c <HAL_CRC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009ae:	f000 fd77 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	40023000 	.word	0x40023000

080009c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009c6:	4a16      	ldr	r2, [pc, #88]	@ (8000a20 <MX_DMA2D_Init+0x60>)
 80009c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 80009f6:	f001 ffc9 	bl	800298c <HAL_DMA2D_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a00:	f000 fd4e 	bl	80014a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a04:	2101      	movs	r1, #1
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_DMA2D_Init+0x5c>)
 8000a08:	f002 f91a 	bl	8002c40 <HAL_DMA2D_ConfigLayer>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a12:	f000 fd45 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000a4 	.word	0x200000a4
 8000a20:	4002b000 	.word	0x4002b000

08000a24 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0aa      	sub	sp, #168	@ 0xa8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a36:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a3a:	2224      	movs	r2, #36	@ 0x24
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f010 fe84 	bl	801174c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a44:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5a:	2234      	movs	r2, #52	@ 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f010 fe74 	bl	801174c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	222c      	movs	r2, #44	@ 0x2c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f010 fe6e 	bl	801174c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a70:	4b6a      	ldr	r3, [pc, #424]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a72:	4a6b      	ldr	r2, [pc, #428]	@ (8000c20 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a74:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a76:	4b69      	ldr	r3, [pc, #420]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a7c:	4b67      	ldr	r3, [pc, #412]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a82:	4b66      	ldr	r3, [pc, #408]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000a88:	237d      	movs	r3, #125	@ 0x7d
 8000a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	485e      	ldr	r0, [pc, #376]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aa2:	f002 f95f 	bl	8002d64 <HAL_DSI_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 fcf8 	bl	80014a0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ae2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	484c      	ldr	r0, [pc, #304]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aea:	f002 fe4f 	bl	800378c <HAL_DSI_ConfigHostTimeouts>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000af4:	f000 fcd4 	bl	80014a0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000af8:	231c      	movs	r3, #28
 8000afa:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000afc:	2321      	movs	r3, #33	@ 0x21
 8000afe:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000b00:	230f      	movs	r3, #15
 8000b02:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b04:	2319      	movs	r3, #25
 8000b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b10:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b14:	4619      	mov	r1, r3
 8000b16:	4841      	ldr	r0, [pc, #260]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b18:	f002 fdce 	bl	80036b8 <HAL_DSI_ConfigPhyTimer>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000b22:	f000 fcbd 	bl	80014a0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b26:	2104      	movs	r1, #4
 8000b28:	483c      	ldr	r0, [pc, #240]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b2a:	f002 fd9d 	bl	8003668 <HAL_DSI_ConfigFlowControl>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000b34:	f000 fcb4 	bl	80014a0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b38:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b3c:	4837      	ldr	r0, [pc, #220]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b3e:	f002 feeb 	bl	8003918 <HAL_DSI_SetLowPowerRXFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b48:	f000 fcaa 	bl	80014a0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4833      	ldr	r0, [pc, #204]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b50:	f002 fa88 	bl	8003064 <HAL_DSI_ConfigErrorMonitor>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b5a:	f000 fca1 	bl	80014a0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b80:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b86:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b98:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000b9a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b9e:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ba0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bb2:	f002 fcfb 	bl	80035ac <HAL_DSI_ConfigCommand>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000bbc:	f000 fc70 	bl	80014a0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000bc8:	23c8      	movs	r3, #200	@ 0xc8
 8000bca:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000be4:	2340      	movs	r3, #64	@ 0x40
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bf2:	f002 fc03 	bl	80033fc <HAL_DSI_ConfigAdaptedCommandMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000bfc:	f000 fc50 	bl	80014a0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c04:	f002 fbd2 	bl	80033ac <HAL_DSI_SetGenericVCID>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000c0e:	f000 fc47 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	37a8      	adds	r7, #168	@ 0xa8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000e4 	.word	0x200000e4
 8000c20:	40016c00 	.word	0x40016c00

08000c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f005 f999 	bl	8005f98 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 fc18 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000100 	.word	0x20000100
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	000186a0 	.word	0x000186a0

08000c80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <MX_I2C2_Init+0x54>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000c8c:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <MX_I2C2_Init+0x58>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000c9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_I2C2_Init+0x50>)
 8000cbe:	f005 f96b 	bl	8005f98 <HAL_I2C_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cc8:	f000 fbea 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000154 	.word	0x20000154
 8000cd4:	40005800 	.word	0x40005800
 8000cd8:	000186a0 	.word	0x000186a0

08000cdc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2234      	movs	r2, #52	@ 0x34
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f010 fd2f 	bl	801174c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cee:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000cf0:	4a38      	ldr	r2, [pc, #224]	@ (8000dd4 <MX_LTDC_Init+0xf8>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cf4:	4b36      	ldr	r3, [pc, #216]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cfa:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d00:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000d0c:	4b30      	ldr	r3, [pc, #192]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d26:	22c9      	movs	r2, #201	@ 0xc9
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d2c:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d34:	22ca      	movs	r2, #202	@ 0xca
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d3a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d58:	481d      	ldr	r0, [pc, #116]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d5a:	f005 fa61 	bl	8006220 <HAL_LTDC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000d64:	f000 fb9c 	bl	80014a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000d6c:	23c8      	movs	r3, #200	@ 0xc8
 8000d6e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000d74:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d78:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d7e:	23ff      	movs	r3, #255	@ 0xff
 8000d80:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d8a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d90:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000d96:	23c8      	movs	r3, #200	@ 0xc8
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000d9a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_LTDC_Init+0xf4>)
 8000dba:	f005 fbc3 	bl	8006544 <HAL_LTDC_ConfigLayer>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000dc4:	f000 fb6c 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3738      	adds	r7, #56	@ 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001a8 	.word	0x200001a8
 8000dd4:	40016800 	.word	0x40016800

08000dd8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000dde:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <MX_QUADSPI_Init+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000df0:	2210      	movs	r2, #16
 8000df2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000df6:	2218      	movs	r2, #24
 8000df8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e00:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e08:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_QUADSPI_Init+0x50>)
 8000e16:	f005 fdbb 	bl	8006990 <HAL_QSPI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000e20:	f000 fb3e 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000250 	.word	0x20000250
 8000e2c:	a0001000 	.word	0xa0001000

08000e30 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e36:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee4 <MX_SAI1_Init+0xb4>)
 8000e38:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e48:	2240      	movs	r2, #64	@ 0x40
 8000e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e52:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <MX_SAI1_Init+0xb8>)
 8000e7a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_SAI1_Init+0xb0>)
 8000ecc:	f006 fd36 	bl	800793c <HAL_SAI_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000ed6:	f000 fae3 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000029c 	.word	0x2000029c
 8000ee4:	40015804 	.word	0x40015804
 8000ee8:	0002ee00 	.word	0x0002ee00

08000eec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <MX_SDIO_SD_Init+0x3c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <MX_SDIO_SD_Init+0x38>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000324 	.word	0x20000324
 8000f28:	40012c00 	.word	0x40012c00

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc8 <MX_TIM1_Init+0x9c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f76:	f008 f95b 	bl	8009230 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f80:	f000 fa8e 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000f92:	f008 fafd 	bl	8009590 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f9c:	f000 fa80 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_TIM1_Init+0x98>)
 8000fae:	f008 fd25 	bl	80099fc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fb8:	f000 fa72 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000468 	.word	0x20000468
 8000fc8:	40010000 	.word	0x40010000

08000fcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_USART3_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_USART3_UART_Init+0x4c>)
 8001004:	f008 fd8a 	bl	8009b1c <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 fa47 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200004b0 	.word	0x200004b0
 800101c:	40004800 	.word	0x40004800

08001020 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <MX_USART6_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_USART6_UART_Init+0x4c>)
 8001058:	f008 fd60 	bl	8009b1c <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 fa1d 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200004f8 	.word	0x200004f8
 8001070:	40011400 	.word	0x40011400

08001074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_DMA_Init+0x4c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <MX_DMA_Init+0x4c>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <MX_DMA_Init+0x4c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	203b      	movs	r0, #59	@ 0x3b
 800109c:	f001 f924 	bl	80022e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010a0:	203b      	movs	r0, #59	@ 0x3b
 80010a2:	f001 f93d 	bl	8002320 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2045      	movs	r0, #69	@ 0x45
 80010ac:	f001 f91c 	bl	80022e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010b0:	2045      	movs	r0, #69	@ 0x45
 80010b2:	f001 f935 	bl	8002320 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_FMC_Init+0x98>)
 80010de:	4a20      	ldr	r2, [pc, #128]	@ (8001160 <MX_FMC_Init+0x9c>)
 80010e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <MX_FMC_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_FMC_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_FMC_Init+0x98>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_FMC_Init+0x98>)
 80010f6:	2220      	movs	r2, #32
 80010f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_FMC_Init+0x98>)
 80010fc:	2240      	movs	r2, #64	@ 0x40
 80010fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_FMC_Init+0x98>)
 8001102:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001106:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_FMC_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_FMC_Init+0x98>)
 8001110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001114:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_FMC_Init+0x98>)
 8001118:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_FMC_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001130:	2307      	movs	r3, #7
 8001132:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001134:	2303      	movs	r3, #3
 8001136:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_FMC_Init+0x98>)
 8001146:	f008 f83f 	bl	80091c8 <HAL_SDRAM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001150:	f000 f9a6 	bl	80014a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000540 	.word	0x20000540
 8001160:	a0000140 	.word	0xa0000140

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	@ 0x40
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117e:	4bae      	ldr	r3, [pc, #696]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4aad      	ldr	r2, [pc, #692]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4bab      	ldr	r3, [pc, #684]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
 800119a:	4ba7      	ldr	r3, [pc, #668]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4aa6      	ldr	r2, [pc, #664]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	4ba0      	ldr	r3, [pc, #640]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a9f      	ldr	r2, [pc, #636]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b9d      	ldr	r3, [pc, #628]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
 80011cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	4b99      	ldr	r3, [pc, #612]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a98      	ldr	r2, [pc, #608]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b96      	ldr	r3, [pc, #600]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	4b92      	ldr	r3, [pc, #584]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a91      	ldr	r2, [pc, #580]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b8f      	ldr	r3, [pc, #572]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	4b8b      	ldr	r3, [pc, #556]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a8a      	ldr	r2, [pc, #552]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b88      	ldr	r3, [pc, #544]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b84      	ldr	r3, [pc, #528]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a83      	ldr	r2, [pc, #524]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b81      	ldr	r3, [pc, #516]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b7d      	ldr	r3, [pc, #500]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a7c      	ldr	r2, [pc, #496]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b7a      	ldr	r3, [pc, #488]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b76      	ldr	r3, [pc, #472]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a75      	ldr	r2, [pc, #468]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b73      	ldr	r3, [pc, #460]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b6f      	ldr	r3, [pc, #444]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a6e      	ldr	r2, [pc, #440]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b6c      	ldr	r3, [pc, #432]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b68      	ldr	r3, [pc, #416]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a67      	ldr	r2, [pc, #412]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 800129c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b65      	ldr	r3, [pc, #404]	@ (8001438 <MX_GPIO_Init+0x2d4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210c      	movs	r1, #12
 80012b2:	4862      	ldr	r0, [pc, #392]	@ (800143c <MX_GPIO_Init+0x2d8>)
 80012b4:	f002 fd22 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2130      	movs	r1, #48	@ 0x30
 80012bc:	4860      	ldr	r0, [pc, #384]	@ (8001440 <MX_GPIO_Init+0x2dc>)
 80012be:	f002 fd1d 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2108      	movs	r1, #8
 80012c6:	485f      	ldr	r0, [pc, #380]	@ (8001444 <MX_GPIO_Init+0x2e0>)
 80012c8:	f002 fd18 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	485d      	ldr	r0, [pc, #372]	@ (8001448 <MX_GPIO_Init+0x2e4>)
 80012d2:	f002 fd13 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	485c      	ldr	r0, [pc, #368]	@ (800144c <MX_GPIO_Init+0x2e8>)
 80012dc:	f002 fd0e 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	@ 0x80
 80012e4:	485a      	ldr	r0, [pc, #360]	@ (8001450 <MX_GPIO_Init+0x2ec>)
 80012e6:	f002 fd09 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2108      	movs	r1, #8
 80012ee:	4859      	ldr	r0, [pc, #356]	@ (8001454 <MX_GPIO_Init+0x2f0>)
 80012f0:	f002 fd04 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80012f4:	230c      	movs	r3, #12
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	484c      	ldr	r0, [pc, #304]	@ (800143c <MX_GPIO_Init+0x2d8>)
 800130c:	f002 fb32 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001310:	2308      	movs	r3, #8
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001320:	2306      	movs	r3, #6
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001328:	4619      	mov	r1, r3
 800132a:	4848      	ldr	r0, [pc, #288]	@ (800144c <MX_GPIO_Init+0x2e8>)
 800132c:	f002 fb22 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001334:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001338:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4841      	ldr	r0, [pc, #260]	@ (800144c <MX_GPIO_Init+0x2e8>)
 8001346:	f002 fb15 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800134a:	2330      	movs	r3, #48	@ 0x30
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800134e:	2311      	movs	r3, #17
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	4837      	ldr	r0, [pc, #220]	@ (8001440 <MX_GPIO_Init+0x2dc>)
 8001362:	f002 fb07 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001366:	2308      	movs	r3, #8
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800136a:	2311      	movs	r3, #17
 800136c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	4831      	ldr	r0, [pc, #196]	@ (8001444 <MX_GPIO_Init+0x2e0>)
 800137e:	f002 faf9 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001382:	2340      	movs	r3, #64	@ 0x40
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001386:	2311      	movs	r3, #17
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001396:	4619      	mov	r1, r3
 8001398:	482b      	ldr	r0, [pc, #172]	@ (8001448 <MX_GPIO_Init+0x2e4>)
 800139a:	f002 faeb 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800139e:	2305      	movs	r3, #5
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	4825      	ldr	r0, [pc, #148]	@ (800144c <MX_GPIO_Init+0x2e8>)
 80013b6:	f002 fadd 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013cc:	2302      	movs	r3, #2
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d4:	4619      	mov	r1, r3
 80013d6:	481a      	ldr	r0, [pc, #104]	@ (8001440 <MX_GPIO_Init+0x2dc>)
 80013d8:	f002 facc 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013dc:	2304      	movs	r3, #4
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	4816      	ldr	r0, [pc, #88]	@ (8001448 <MX_GPIO_Init+0x2e4>)
 80013f0:	f002 fac0 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80013f4:	2320      	movs	r3, #32
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001406:	4619      	mov	r1, r3
 8001408:	4813      	ldr	r0, [pc, #76]	@ (8001458 <MX_GPIO_Init+0x2f4>)
 800140a:	f002 fab3 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	480a      	ldr	r0, [pc, #40]	@ (8001450 <MX_GPIO_Init+0x2ec>)
 8001426:	f002 faa5 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800142a:	2308      	movs	r3, #8
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	e012      	b.n	800145c <MX_GPIO_Init+0x2f8>
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40021000 	.word	0x40021000
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40022800 	.word	0x40022800
 8001448:	40021800 	.word	0x40021800
 800144c:	40020400 	.word	0x40020400
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40020000 	.word	0x40020000
 8001458:	40022400 	.word	0x40022400
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001466:	4619      	mov	r1, r3
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <MX_GPIO_Init+0x314>)
 800146a:	f002 fa83 	bl	8003974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	@ 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800148e:	f000 fe2f 	bl	80020f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40001000 	.word	0x40001000

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <Error_Handler+0x8>

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <HAL_MspInit+0x58>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <HAL_MspInit+0x58>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <HAL_MspInit+0x58>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_MspInit+0x58>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_MspInit+0x58>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_MspInit+0x58>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2005      	movs	r0, #5
 80014f0:	f000 fefa 	bl	80022e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014f4:	2005      	movs	r0, #5
 80014f6:	f000 ff13 	bl	8002320 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_CRC_MspInit+0x3c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10d      	bne.n	8001536 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_CRC_MspInit+0x40>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_CRC_MspInit+0x40>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_CRC_MspInit+0x40>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023000 	.word	0x40023000
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_DMA2D_MspInit+0x48>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d115      	bne.n	800158a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_DMA2D_MspInit+0x4c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <HAL_DMA2D_MspInit+0x4c>)
 8001568:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_DMA2D_MspInit+0x4c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	205a      	movs	r0, #90	@ 0x5a
 8001580:	f000 feb2 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001584:	205a      	movs	r0, #90	@ 0x5a
 8001586:	f000 fecb 	bl	8002320 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	4002b000 	.word	0x4002b000
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <HAL_DSI_MspInit+0x94>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d133      	bne.n	8001626 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_DSI_MspInit+0x98>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <HAL_DSI_MspInit+0x98>)
 80015c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_DSI_MspInit+0x98>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_DSI_MspInit+0x98>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <HAL_DSI_MspInit+0x98>)
 80015e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_DSI_MspInit+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80015f6:	2304      	movs	r3, #4
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001606:	230d      	movs	r3, #13
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4809      	ldr	r0, [pc, #36]	@ (8001638 <HAL_DSI_MspInit+0x9c>)
 8001612:	f002 f9af 	bl	8003974 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	205c      	movs	r0, #92	@ 0x5c
 800161c:	f000 fe64 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001620:	205c      	movs	r0, #92	@ 0x5c
 8001622:	f000 fe7d 	bl	8002320 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40016c00 	.word	0x40016c00
 8001634:	40023800 	.word	0x40023800
 8001638:	40022400 	.word	0x40022400

0800163c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a32      	ldr	r2, [pc, #200]	@ (8001724 <HAL_I2C_MspInit+0xe8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12d      	bne.n	80016ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800167a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168c:	2304      	movs	r3, #4
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4825      	ldr	r0, [pc, #148]	@ (800172c <HAL_I2C_MspInit+0xf0>)
 8001698:	f002 f96c 	bl	8003974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016b8:	e030      	b.n	800171c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_I2C_MspInit+0xf4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d12b      	bne.n	800171c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	4a16      	ldr	r2, [pc, #88]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80016e0:	2330      	movs	r3, #48	@ 0x30
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e4:	2312      	movs	r3, #18
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016f0:	2304      	movs	r3, #4
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	480e      	ldr	r0, [pc, #56]	@ (8001734 <HAL_I2C_MspInit+0xf8>)
 80016fc:	f002 f93a 	bl	8003974 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 800170a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800170e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_I2C_MspInit+0xec>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	bf00      	nop
 800171e:	3730      	adds	r7, #48	@ 0x30
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400
 8001730:	40005800 	.word	0x40005800
 8001734:	40021c00 	.word	0x40021c00

08001738 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <HAL_LTDC_MspInit+0x48>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d115      	bne.n	8001776 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_LTDC_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	4a0c      	ldr	r2, [pc, #48]	@ (8001784 <HAL_LTDC_MspInit+0x4c>)
 8001754:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001758:	6453      	str	r3, [r2, #68]	@ 0x44
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_LTDC_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2058      	movs	r0, #88	@ 0x58
 800176c:	f000 fdbc 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001770:	2058      	movs	r0, #88	@ 0x58
 8001772:	f000 fdd5 	bl	8002320 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40016800 	.word	0x40016800
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	@ (800186c <HAL_QSPI_MspInit+0xe4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d15b      	bne.n	8001862 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6393      	str	r3, [r2, #56]	@ 0x38
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a28      	ldr	r2, [pc, #160]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_QSPI_MspInit+0xe8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017fe:	2340      	movs	r3, #64	@ 0x40
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800180e:	230a      	movs	r3, #10
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4816      	ldr	r0, [pc, #88]	@ (8001874 <HAL_QSPI_MspInit+0xec>)
 800181a:	f002 f8ab 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800181e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001830:	2309      	movs	r3, #9
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	@ (8001878 <HAL_QSPI_MspInit+0xf0>)
 800183c:	f002 f89a 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001840:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001852:	230a      	movs	r3, #10
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4806      	ldr	r0, [pc, #24]	@ (8001878 <HAL_QSPI_MspInit+0xf0>)
 800185e:	f002 f889 	bl	8003974 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	a0001000 	.word	0xa0001000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020400 	.word	0x40020400
 8001878:	40021400 	.word	0x40021400

0800187c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a68      	ldr	r2, [pc, #416]	@ (8001a3c <HAL_SD_MspInit+0x1c0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f040 80c9 	bne.w	8001a32 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	4b66      	ldr	r3, [pc, #408]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a8:	4a65      	ldr	r2, [pc, #404]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b0:	4b63      	ldr	r3, [pc, #396]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	4a5e      	ldr	r2, [pc, #376]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80018cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	4a57      	ldr	r2, [pc, #348]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e8:	4b55      	ldr	r3, [pc, #340]	@ (8001a40 <HAL_SD_MspInit+0x1c4>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80018f4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018f8:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001906:	230c      	movs	r3, #12
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	484c      	ldr	r0, [pc, #304]	@ (8001a44 <HAL_SD_MspInit+0x1c8>)
 8001912:	f002 f82f 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001916:	2304      	movs	r3, #4
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001926:	230c      	movs	r3, #12
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4845      	ldr	r0, [pc, #276]	@ (8001a48 <HAL_SD_MspInit+0x1cc>)
 8001932:	f002 f81f 	bl	8003974 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001936:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_SD_MspInit+0x1d4>)
 800193a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800193c:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 800193e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001942:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001944:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194a:	4b40      	ldr	r3, [pc, #256]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001950:	4b3e      	ldr	r3, [pc, #248]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001952:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001956:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001958:	4b3c      	ldr	r3, [pc, #240]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 800195a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800195e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001960:	4b3a      	ldr	r3, [pc, #232]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001966:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 800196a:	2220      	movs	r2, #32
 800196c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001974:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001976:	2204      	movs	r2, #4
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800197a:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 800197c:	2203      	movs	r2, #3
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001980:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001982:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001986:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001988:	4b30      	ldr	r3, [pc, #192]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 800198a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001990:	482e      	ldr	r0, [pc, #184]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 8001992:	f000 fcef 	bl	8002374 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800199c:	f7ff fd80 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019a6:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <HAL_SD_MspInit+0x1d0>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80019ac:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001a58 <HAL_SD_MspInit+0x1dc>)
 80019b0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019b8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019bc:	2240      	movs	r2, #64	@ 0x40
 80019be:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019d4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019dc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019e0:	2220      	movs	r2, #32
 80019e2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019ec:	2204      	movs	r2, #4
 80019ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019f2:	2203      	movs	r2, #3
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019f6:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 80019f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 8001a00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a04:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001a06:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 8001a08:	f000 fcb4 	bl	8002374 <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001a12:	f7ff fd45 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <HAL_SD_MspInit+0x1d8>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2031      	movs	r0, #49	@ 0x31
 8001a28:	f000 fc5e 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001a2c:	2031      	movs	r0, #49	@ 0x31
 8001a2e:	f000 fc77 	bl	8002320 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	@ 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	200003a8 	.word	0x200003a8
 8001a50:	40026458 	.word	0x40026458
 8001a54:	20000408 	.word	0x20000408
 8001a58:	400264a0 	.word	0x400264a0

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_TIM_Base_MspInit+0x3c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10d      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_TIM_Base_MspInit+0x40>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <HAL_TIM_Base_MspInit+0x40>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <HAL_TIM_Base_MspInit+0x40>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a33      	ldr	r2, [pc, #204]	@ (8001b8c <HAL_UART_MspInit+0xec>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12d      	bne.n	8001b1e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a31      	ldr	r2, [pc, #196]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001afa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	481f      	ldr	r0, [pc, #124]	@ (8001b94 <HAL_UART_MspInit+0xf4>)
 8001b18:	f001 ff2c 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b1c:	e031      	b.n	8001b82 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1d      	ldr	r2, [pc, #116]	@ (8001b98 <HAL_UART_MspInit+0xf8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d12c      	bne.n	8001b82 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b32:	f043 0320 	orr.w	r3, r3, #32
 8001b36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b38:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b54:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001b60:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b72:	2308      	movs	r3, #8
 8001b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <HAL_UART_MspInit+0xfc>)
 8001b7e:	f001 fef9 	bl	8003974 <HAL_GPIO_Init>
}
 8001b82:	bf00      	nop
 8001b84:	3730      	adds	r7, #48	@ 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40011400 	.word	0x40011400
 8001b9c:	40021800 	.word	0x40021800

08001ba0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001bb4:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <HAL_FMC_MspInit+0x128>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 8081 	bne.w	8001cc0 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001bbe:	4b42      	ldr	r3, [pc, #264]	@ (8001cc8 <HAL_FMC_MspInit+0x128>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ccc <HAL_FMC_MspInit+0x12c>)
 8001bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8001ccc <HAL_FMC_MspInit+0x12c>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <HAL_FMC_MspInit+0x12c>)
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001be0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001be4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4835      	ldr	r0, [pc, #212]	@ (8001cd0 <HAL_FMC_MspInit+0x130>)
 8001bfc:	f001 feba 	bl	8003974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001c00:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001c04:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c12:	230c      	movs	r3, #12
 8001c14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	482e      	ldr	r0, [pc, #184]	@ (8001cd4 <HAL_FMC_MspInit+0x134>)
 8001c1c:	f001 feaa 	bl	8003974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001c20:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001c24:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c32:	230c      	movs	r3, #12
 8001c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4827      	ldr	r0, [pc, #156]	@ (8001cd8 <HAL_FMC_MspInit+0x138>)
 8001c3c:	f001 fe9a 	bl	8003974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001c40:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001c44:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c52:	230c      	movs	r3, #12
 8001c54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4820      	ldr	r0, [pc, #128]	@ (8001cdc <HAL_FMC_MspInit+0x13c>)
 8001c5c:	f001 fe8a 	bl	8003974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001c60:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c64:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c72:	230c      	movs	r3, #12
 8001c74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4819      	ldr	r0, [pc, #100]	@ (8001ce0 <HAL_FMC_MspInit+0x140>)
 8001c7c:	f001 fe7a 	bl	8003974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001c80:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001c84:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4812      	ldr	r0, [pc, #72]	@ (8001ce4 <HAL_FMC_MspInit+0x144>)
 8001c9c:	f001 fe6a 	bl	8003974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480b      	ldr	r0, [pc, #44]	@ (8001ce8 <HAL_FMC_MspInit+0x148>)
 8001cba:	f001 fe5b 	bl	8003974 <HAL_GPIO_Init>
 8001cbe:	e000      	b.n	8001cc2 <HAL_FMC_MspInit+0x122>
    return;
 8001cc0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000574 	.word	0x20000574
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021800 	.word	0x40021800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40020800 	.word	0x40020800

08001cec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001cf4:	f7ff ff54 	bl	8001ba0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a26      	ldr	r2, [pc, #152]	@ (8001da8 <HAL_SAI_MspInit+0xa8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d146      	bne.n	8001da0 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001d12:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <HAL_SAI_MspInit+0xac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_SAI_MspInit+0xb0>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <HAL_SAI_MspInit+0xb0>)
 8001d24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <HAL_SAI_MspInit+0xb0>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_SAI_MspInit+0xac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_SAI_MspInit+0xac>)
 8001d3e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001d40:	2330      	movs	r3, #48	@ 0x30
 8001d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d50:	2306      	movs	r3, #6
 8001d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <HAL_SAI_MspInit+0xb4>)
 8001d5c:	f001 fe0a 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001d60:	2340      	movs	r3, #64	@ 0x40
 8001d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d70:	2306      	movs	r3, #6
 8001d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480f      	ldr	r0, [pc, #60]	@ (8001db8 <HAL_SAI_MspInit+0xb8>)
 8001d7c:	f001 fdfa 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d90:	2306      	movs	r3, #6
 8001d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4808      	ldr	r0, [pc, #32]	@ (8001dbc <HAL_SAI_MspInit+0xbc>)
 8001d9c:	f001 fdea 	bl	8003974 <HAL_GPIO_Init>

    }
}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40015804 	.word	0x40015804
 8001dac:	20000578 	.word	0x20000578
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021800 	.word	0x40021800

08001dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	@ 0x38
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <HAL_InitTick+0xe4>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	4a32      	ldr	r2, [pc, #200]	@ (8001ea4 <HAL_InitTick+0xe4>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de0:	4b30      	ldr	r3, [pc, #192]	@ (8001ea4 <HAL_InitTick+0xe4>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 f8ac 	bl	8006f54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e06:	f005 f87d 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8001e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e0e:	f005 f879 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <HAL_InitTick+0xe8>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9b      	lsrs	r3, r3, #18
 8001e22:	3b01      	subs	r3, #1
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <HAL_InitTick+0xec>)
 8001e28:	4a21      	ldr	r2, [pc, #132]	@ (8001eb0 <HAL_InitTick+0xf0>)
 8001e2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <HAL_InitTick+0xec>)
 8001e2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e34:	4a1d      	ldr	r2, [pc, #116]	@ (8001eac <HAL_InitTick+0xec>)
 8001e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <HAL_InitTick+0xec>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <HAL_InitTick+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_InitTick+0xec>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e4c:	4817      	ldr	r0, [pc, #92]	@ (8001eac <HAL_InitTick+0xec>)
 8001e4e:	f007 f9ef 	bl	8009230 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d11b      	bne.n	8001e98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e60:	4812      	ldr	r0, [pc, #72]	@ (8001eac <HAL_InitTick+0xec>)
 8001e62:	f007 fa35 	bl	80092d0 <HAL_TIM_Base_Start_IT>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d111      	bne.n	8001e98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e74:	2036      	movs	r0, #54	@ 0x36
 8001e76:	f000 fa53 	bl	8002320 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d808      	bhi.n	8001e92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	2036      	movs	r0, #54	@ 0x36
 8001e86:	f000 fa2f 	bl	80022e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <HAL_InitTick+0xf4>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e002      	b.n	8001e98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3738      	adds	r7, #56	@ 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	431bde83 	.word	0x431bde83
 8001eac:	2000057c 	.word	0x2000057c
 8001eb0:	40001000 	.word	0x40001000
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <NMI_Handler+0x4>

08001ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <MemManage_Handler+0x4>

08001ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <UsageFault_Handler+0x4>

08001ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001f2c:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <SDIO_IRQHandler+0x10>)
 8001f2e:	f006 fb43 	bl	80085b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000324 	.word	0x20000324

08001f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <TIM6_DAC_IRQHandler+0x10>)
 8001f42:	f007 fa35 	bl	80093b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000057c 	.word	0x2000057c

08001f50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <DMA2_Stream3_IRQHandler+0x10>)
 8001f56:	f000 fadd 	bl	8002514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003a8 	.word	0x200003a8

08001f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <OTG_FS_IRQHandler+0x10>)
 8001f6a:	f002 f9c1 	bl	80042f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000e44 	.word	0x20000e44

08001f78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <DMA2_Stream6_IRQHandler+0x10>)
 8001f7e:	f000 fac9 	bl	8002514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000408 	.word	0x20000408

08001f8c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <LTDC_IRQHandler+0x10>)
 8001f92:	f004 fa15 	bl	80063c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200001a8 	.word	0x200001a8

08001fa0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <DMA2D_IRQHandler+0x10>)
 8001fa6:	f000 fd3a 	bl	8002a1e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200000a4 	.word	0x200000a4

08001fb4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <DSI_IRQHandler+0x10>)
 8001fba:	f001 f910 	bl	80031de <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200000e4 	.word	0x200000e4

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f00f fbc0 	bl	801177c <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20050000 	.word	0x20050000
 8002028:	00000400 	.word	0x00000400
 800202c:	200005c4 	.word	0x200005c4
 8002030:	20001370 	.word	0x20001370

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002086:	f00f fb7f 	bl	8011788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7fe fb45 	bl	8000718 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002090:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800209c:	08011a08 	.word	0x08011a08
  ldr r2, =_sbss
 80020a0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80020a4:	2000136c 	.word	0x2000136c

080020a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC_IRQHandler>
	...

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_Init+0x40>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <HAL_Init+0x40>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_Init+0x40>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f8fc 	bl	80022d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	200f      	movs	r0, #15
 80020dc:	f7ff fe70 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff f9e4 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008
 8002114:	200005c8 	.word	0x200005c8

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	200005c8 	.word	0x200005c8

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db0b      	blt.n	8002206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4907      	ldr	r1, [pc, #28]	@ (8002214 <__NVIC_EnableIRQ+0x38>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ff4c 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fa:	f7ff ff61 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 80022fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	6978      	ldr	r0, [r7, #20]
 8002306:	f7ff ffb1 	bl	800226c <NVIC_EncodePriority>
 800230a:	4602      	mov	r2, r0
 800230c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff80 	bl	8002218 <__NVIC_SetPriority>
}
 8002318:	bf00      	nop
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff54 	bl	80021dc <__NVIC_EnableIRQ>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	795b      	ldrb	r3, [r3, #5]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff f8d2 	bl	8001508 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff feca 	bl	8002118 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e099      	b.n	80024c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b0:	e00f      	b.n	80023d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b2:	f7ff feb1 	bl	8002118 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d908      	bls.n	80023d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e078      	b.n	80024c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e8      	bne.n	80023b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_DMA_Init+0x158>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0307 	bic.w	r3, r3, #7
 8002452:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	2b04      	cmp	r3, #4
 8002464:	d117      	bne.n	8002496 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa0b 	bl	8002894 <DMA_CheckFifoParam>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	@ 0x40
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002492:	2301      	movs	r3, #1
 8002494:	e016      	b.n	80024c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f9c2 	bl	8002828 <DMA_CalcBaseAndBitshift>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	223f      	movs	r2, #63	@ 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	f010803f 	.word	0xf010803f

080024d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00c      	b.n	8002508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2205      	movs	r2, #5
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002520:	4b8e      	ldr	r3, [pc, #568]	@ (800275c <HAL_DMA_IRQHandler+0x248>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a8e      	ldr	r2, [pc, #568]	@ (8002760 <HAL_DMA_IRQHandler+0x24c>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0a9b      	lsrs	r3, r3, #10
 800252c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	2208      	movs	r2, #8
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01a      	beq.n	8002580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0204 	bic.w	r2, r2, #4
 8002566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	2208      	movs	r2, #8
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	2201      	movs	r2, #1
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a2:	2201      	movs	r2, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	2204      	movs	r2, #4
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d8:	2204      	movs	r2, #4
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	2210      	movs	r2, #16
 80025f2:	409a      	lsls	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d043      	beq.n	8002684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03c      	beq.n	8002684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	2210      	movs	r2, #16
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d018      	beq.n	8002656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d024      	beq.n	8002684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
 8002642:	e01f      	b.n	8002684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e016      	b.n	8002684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0208 	bic.w	r2, r2, #8
 8002672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2220      	movs	r2, #32
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 808f 	beq.w	80027b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8087 	beq.w	80027b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	2220      	movs	r2, #32
 80026ac:	409a      	lsls	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d136      	bne.n	800272c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0216 	bic.w	r2, r2, #22
 80026cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <HAL_DMA_IRQHandler+0x1da>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0208 	bic.w	r2, r2, #8
 80026fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	223f      	movs	r2, #63	@ 0x3f
 8002704:	409a      	lsls	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800271e:	2b00      	cmp	r3, #0
 8002720:	d07e      	beq.n	8002820 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
        }
        return;
 800272a:	e079      	b.n	8002820 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01d      	beq.n	8002776 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	2b00      	cmp	r3, #0
 800274e:	d031      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
 8002758:	e02c      	b.n	80027b4 <HAL_DMA_IRQHandler+0x2a0>
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000
 8002760:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
 8002774:	e01e      	b.n	80027b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10f      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0210 	bic.w	r2, r2, #16
 8002792:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d032      	beq.n	8002822 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2205      	movs	r2, #5
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3301      	adds	r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d307      	bcc.n	80027fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f2      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x2cc>
 80027fa:	e000      	b.n	80027fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
 800281e:	e000      	b.n	8002822 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002820:	bf00      	nop
    }
  }
}
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3b10      	subs	r3, #16
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <DMA_CalcBaseAndBitshift+0x64>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002842:	4a13      	ldr	r2, [pc, #76]	@ (8002890 <DMA_CalcBaseAndBitshift+0x68>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d909      	bls.n	800286a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	1d1a      	adds	r2, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	659a      	str	r2, [r3, #88]	@ 0x58
 8002868:	e007      	b.n	800287a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	aaaaaaab 	.word	0xaaaaaaab
 8002890:	0801193c 	.word	0x0801193c

08002894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d856      	bhi.n	8002962 <DMA_CheckFifoParam+0xce>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <DMA_CheckFifoParam+0x28>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028df 	.word	0x080028df
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	08002963 	.word	0x08002963
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d046      	beq.n	8002966 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e043      	b.n	8002966 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028e6:	d140      	bne.n	800296a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e03d      	b.n	800296a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f6:	d121      	bne.n	800293c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d837      	bhi.n	800296e <DMA_CheckFifoParam+0xda>
 80028fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <DMA_CheckFifoParam+0x70>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291b 	.word	0x0800291b
 800290c:	08002915 	.word	0x08002915
 8002910:	0800292d 	.word	0x0800292d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e030      	b.n	800297c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d025      	beq.n	8002972 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292a:	e022      	b.n	8002972 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002934:	d11f      	bne.n	8002976 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800293a:	e01c      	b.n	8002976 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d903      	bls.n	800294a <DMA_CheckFifoParam+0xb6>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d003      	beq.n	8002950 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002948:	e018      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      break;
 800294e:	e015      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e00b      	b.n	800297a <DMA_CheckFifoParam+0xe6>
      break;
 8002962:	bf00      	nop
 8002964:	e00a      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e008      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e006      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e004      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;   
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
    }
  } 
  
  return status; 
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e03b      	b.n	8002a16 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fdca 	bl	800154c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029dc:	f023 0107 	bic.w	r1, r3, #7
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68d1      	ldr	r1, [r2, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d026      	beq.n	8002a8e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d021      	beq.n	8002a8e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a58:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d026      	beq.n	8002ae6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d021      	beq.n	8002ae6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	f043 0202 	orr.w	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d026      	beq.n	8002b3e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d021      	beq.n	8002b3e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b60:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2204      	movs	r2, #4
 8002b68:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f853 	bl	8002c16 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01f      	beq.n	8002bc4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01f      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01a      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002be6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2210      	movs	r2, #16
 8002bee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f80e 	bl	8002c2a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_DMA2D_ConfigLayer+0x20>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e079      	b.n	8002d54 <HAL_DMA2D_ConfigLayer+0x114>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	3318      	adds	r3, #24
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c8a:	4b35      	ldr	r3, [pc, #212]	@ (8002d60 <HAL_DMA2D_ConfigLayer+0x120>)
 8002c8c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA2D_ConfigLayer+0x5e>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	d107      	bne.n	8002cae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e005      	b.n	8002cba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d120      	bne.n	8002d02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	ea02 0103 	and.w	r1, r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b0a      	cmp	r3, #10
 8002ce8:	d003      	beq.n	8002cf2 <HAL_DMA2D_ConfigLayer+0xb2>
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d127      	bne.n	8002d42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d00:	e01f      	b.n	8002d42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	ea02 0103 	and.w	r1, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b0a      	cmp	r3, #10
 8002d2a:	d003      	beq.n	8002d34 <HAL_DMA2D_ConfigLayer+0xf4>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d106      	bne.n	8002d42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d40:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	ff03000f 	.word	0xff03000f

08002d64 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e16e      	b.n	8003056 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7c5b      	ldrb	r3, [r3, #17]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fc0a 	bl	800159c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002da2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db6:	f7ff f9af 	bl	8002118 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002dbc:	e009      	b.n	8002dd2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002dbe:	f7ff f9ab 	bl	8002118 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dcc:	d901      	bls.n	8002dd2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e141      	b.n	8003056 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ed      	beq.n	8002dbe <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002df2:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002df6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002e0e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002e16:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f7ff f970 	bl	8002130 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e50:	f7ff f962 	bl	8002118 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e56:	e009      	b.n	8002e6c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e58:	f7ff f95e 	bl	8002118 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e66:	d901      	bls.n	8002e6c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0f4      	b.n	8003056 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ed      	beq.n	8002e58 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eac:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0202 	orr.w	r2, r2, #2
 8002ed0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0204 	orr.w	r2, r2, #4
 8002ee4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0203 	bic.w	r2, r2, #3
 8002ef8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f12:	f7ff f901 	bl	8002118 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d123      	bne.n	8002f70 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002f28:	e00c      	b.n	8002f44 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f2a:	f7ff f8f5 	bl	8002118 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f38:	d904      	bls.n	8002f44 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e088      	b.n	8003056 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f4c:	f003 0314 	and.w	r3, r3, #20
 8002f50:	2b14      	cmp	r3, #20
 8002f52:	d1ea      	bne.n	8002f2a <HAL_DSI_Init+0x1c6>
 8002f54:	e014      	b.n	8002f80 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f56:	f7ff f8df 	bl	8002118 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f64:	d904      	bls.n	8002f70 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e072      	b.n	8003056 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f78:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8002f7c:	2b94      	cmp	r3, #148	@ 0x94
 8002f7e:	d1ea      	bne.n	8002f56 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_DSI_Init+0x22a>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	e000      	b.n	8002f90 <HAL_DSI_Init+0x22c>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <HAL_DSI_Init+0x2fc>)
 8002f96:	fb03 f202 	mul.w	r2, r3, r2
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002fc6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0203 	bic.w	r2, r2, #3
 800302a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3728      	adds	r7, #40	@ 0x28
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	003d0900 	.word	0x003d0900

08003064 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7c1b      	ldrb	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_DSI_ConfigErrorMonitor+0x16>
 8003076:	2302      	movs	r3, #2
 8003078:	e0ab      	b.n	80031d2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80030b4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80030b8:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80030d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0202 	orr.w	r2, r2, #2
 8003112:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 020c 	orr.w	r2, r2, #12
 8003130:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0210 	orr.w	r2, r2, #16
 800314e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800318a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80031c6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00f      	beq.n	8003216 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8ad 	bl	8003370 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00f      	beq.n	8003246 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2202      	movs	r2, #2
 800323c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f89f 	bl	8003384 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 808c 	beq.w	8003368 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003258:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003270:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f818 	bl	8003398 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7c1b      	ldrb	r3, [r3, #16]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_DSI_SetGenericVCID+0x16>
 80033be:	2302      	movs	r3, #2
 80033c0:	e016      	b.n	80033f0 <HAL_DSI_SetGenericVCID+0x44>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0203 	bic.w	r2, r2, #3
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7c1b      	ldrb	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800340e:	2302      	movs	r3, #2
 8003410:	e0c5      	b.n	800359e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0203 	bic.w	r2, r2, #3
 800345e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0207 	bic.w	r2, r2, #7
 8003480:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6959      	ldr	r1, [r3, #20]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	431a      	orrs	r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 020f 	bic.w	r2, r2, #15
 80034ae:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6919      	ldr	r1, [r3, #16]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	005a      	lsls	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003520:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	431a      	orrs	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0202 	orr.w	r2, r2, #2
 8003592:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7c1b      	ldrb	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_DSI_ConfigCommand+0x16>
 80035be:	2302      	movs	r3, #2
 80035c0:	e049      	b.n	8003656 <HAL_DSI_ConfigCommand+0xaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_DSI_ConfigCommand+0xb8>)
 80035d4:	400b      	ands	r3, r1
 80035d6:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80035e6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80035ec:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80035f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80035f8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80035fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003604:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800360a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003610:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003616:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800361c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003622:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0202 	bic.w	r2, r2, #2
 800363a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	fef080ff 	.word	0xfef080ff

08003668 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7c1b      	ldrb	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_DSI_ConfigFlowControl+0x16>
 800367a:	2302      	movs	r3, #2
 800367c:	e016      	b.n	80036ac <HAL_DSI_ConfigFlowControl+0x44>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 021f 	bic.w	r2, r2, #31
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7c1b      	ldrb	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_DSI_ConfigPhyTimer+0x16>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e058      	b.n	8003780 <HAL_DSI_ConfigPhyTimer+0xc8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4293      	cmp	r3, r2
 80036de:	bf38      	it	cc
 80036e0:	4613      	movcc	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80036f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	041a      	lsls	r2, r3, #16
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003722:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800375c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7c1b      	ldrb	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_DSI_ConfigHostTimeouts+0x16>
 800379e:	2302      	movs	r3, #2
 80037a0:	e0b4      	b.n	800390c <HAL_DSI_ConfigHostTimeouts+0x180>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80037b6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	021a      	lsls	r2, r3, #8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b292      	uxth	r2, r2
 80037d8:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	041a      	lsls	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	0c1b      	lsrs	r3, r3, #16
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7c1b      	ldrb	r3, [r3, #16]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800392a:	2302      	movs	r3, #2
 800392c:	e01b      	b.n	8003966 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003944:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	065a      	lsls	r2, r3, #25
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	@ 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e177      	b.n	8003c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003990:	2201      	movs	r2, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8166 	bne.w	8003c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d005      	beq.n	80039c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d130      	bne.n	8003a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039fc:	2201      	movs	r2, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0201 	and.w	r2, r3, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d017      	beq.n	8003a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d123      	bne.n	8003ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	08da      	lsrs	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3208      	adds	r2, #8
 8003a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	220f      	movs	r2, #15
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0203 	and.w	r2, r3, #3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80c0 	beq.w	8003c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <HAL_GPIO_Init+0x324>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	4a65      	ldr	r2, [pc, #404]	@ (8003c98 <HAL_GPIO_Init+0x324>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b0a:	4b63      	ldr	r3, [pc, #396]	@ (8003c98 <HAL_GPIO_Init+0x324>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b16:	4a61      	ldr	r2, [pc, #388]	@ (8003c9c <HAL_GPIO_Init+0x328>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a58      	ldr	r2, [pc, #352]	@ (8003ca0 <HAL_GPIO_Init+0x32c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d037      	beq.n	8003bb2 <HAL_GPIO_Init+0x23e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a57      	ldr	r2, [pc, #348]	@ (8003ca4 <HAL_GPIO_Init+0x330>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d031      	beq.n	8003bae <HAL_GPIO_Init+0x23a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a56      	ldr	r2, [pc, #344]	@ (8003ca8 <HAL_GPIO_Init+0x334>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02b      	beq.n	8003baa <HAL_GPIO_Init+0x236>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a55      	ldr	r2, [pc, #340]	@ (8003cac <HAL_GPIO_Init+0x338>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d025      	beq.n	8003ba6 <HAL_GPIO_Init+0x232>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a54      	ldr	r2, [pc, #336]	@ (8003cb0 <HAL_GPIO_Init+0x33c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01f      	beq.n	8003ba2 <HAL_GPIO_Init+0x22e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a53      	ldr	r2, [pc, #332]	@ (8003cb4 <HAL_GPIO_Init+0x340>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d019      	beq.n	8003b9e <HAL_GPIO_Init+0x22a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	@ (8003cb8 <HAL_GPIO_Init+0x344>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x226>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a51      	ldr	r2, [pc, #324]	@ (8003cbc <HAL_GPIO_Init+0x348>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	@ (8003cc0 <HAL_GPIO_Init+0x34c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc4 <HAL_GPIO_Init+0x350>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x21a>
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	e012      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b8e:	230a      	movs	r3, #10
 8003b90:	e010      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b92:	2308      	movs	r3, #8
 8003b94:	e00e      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc4:	4935      	ldr	r1, [pc, #212]	@ (8003c9c <HAL_GPIO_Init+0x328>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf6:	4a34      	ldr	r2, [pc, #208]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bfc:	4b32      	ldr	r3, [pc, #200]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c20:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c26:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c74:	4a14      	ldr	r2, [pc, #80]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	f67f ae84 	bls.w	8003990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40022400 	.word	0x40022400
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b086      	sub	sp, #24
 8003d32:	af02      	add	r7, sp, #8
 8003d34:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e059      	b.n	8003df4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f00d f988 	bl	8011070 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d6e:	d102      	bne.n	8003d76 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f006 ffff 	bl	800ad7e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7c1a      	ldrb	r2, [r3, #16]
 8003d88:	f88d 2000 	strb.w	r2, [sp]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d90:	f006 ff80 	bl	800ac94 <USB_CoreInit>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e026      	b.n	8003df4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f006 fff7 	bl	800ada0 <USB_SetCurrentMode>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e017      	b.n	8003df4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7c1a      	ldrb	r2, [r3, #16]
 8003dcc:	f88d 2000 	strb.w	r2, [sp]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd4:	f007 f99a 	bl	800b10c <USB_HostInit>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e004      	b.n	8003df4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b08b      	sub	sp, #44	@ 0x2c
 8003e00:	af04      	add	r7, sp, #16
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	70fb      	strb	r3, [r7, #3]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	70bb      	strb	r3, [r7, #2]
 8003e12:	4613      	mov	r3, r2
 8003e14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003e16:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e18:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_HCD_HC_Init+0x2c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e09d      	b.n	8003f64 <HAL_HCD_HC_Init+0x168>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3319      	adds	r3, #25
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3314      	adds	r3, #20
 8003e54:	787a      	ldrb	r2, [r7, #1]
 8003e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3315      	adds	r3, #21
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3326      	adds	r3, #38	@ 0x26
 8003e7c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003e80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	78bb      	ldrb	r3, [r7, #2]
 8003e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8a:	b2d8      	uxtb	r0, r3
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3316      	adds	r3, #22
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fbc8 	bl	8004638 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003ea8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da0a      	bge.n	8003ec6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3317      	adds	r3, #23
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e009      	b.n	8003eda <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3317      	adds	r3, #23
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f007 fa6c 	bl	800b3bc <USB_GetHostSpeed>
 8003ee4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10b      	bne.n	8003f06 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003eee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_HCD_HC_Init+0x10a>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2bbc      	cmp	r3, #188	@ 0xbc
 8003f00:	d901      	bls.n	8003f06 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003f02:	23bc      	movs	r3, #188	@ 0xbc
 8003f04:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	3318      	adds	r3, #24
 8003f16:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003f1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	b298      	uxth	r0, r3
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3328      	adds	r3, #40	@ 0x28
 8003f30:	4602      	mov	r2, r0
 8003f32:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	787c      	ldrb	r4, [r7, #1]
 8003f3e:	78ba      	ldrb	r2, [r7, #2]
 8003f40:	78f9      	ldrb	r1, [r7, #3]
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4623      	mov	r3, r4
 8003f52:	f007 fa5b 	bl	800b40c <USB_HC_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}

08003f6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_HCD_HC_Halt+0x1e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e00f      	b.n	8003faa <HAL_HCD_HC_Halt+0x3e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f007 fded 	bl	800bb7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	70fb      	strb	r3, [r7, #3]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70bb      	strb	r3, [r7, #2]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3317      	adds	r3, #23
 8003fde:	78ba      	ldrb	r2, [r7, #2]
 8003fe0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3326      	adds	r3, #38	@ 0x26
 8003ff2:	787a      	ldrb	r2, [r7, #1]
 8003ff4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003ff6:	7c3b      	ldrb	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d114      	bne.n	8004026 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	332a      	adds	r3, #42	@ 0x2a
 800400c:	2203      	movs	r2, #3
 800400e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	3319      	adds	r3, #25
 8004020:	7f3a      	ldrb	r2, [r7, #28]
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e009      	b.n	800403a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	332a      	adds	r3, #42	@ 0x2a
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800403a:	787b      	ldrb	r3, [r7, #1]
 800403c:	2b03      	cmp	r3, #3
 800403e:	f200 8102 	bhi.w	8004246 <HAL_HCD_HC_SubmitRequest+0x292>
 8004042:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	08004059 	.word	0x08004059
 800404c:	08004231 	.word	0x08004231
 8004050:	0800411d 	.word	0x0800411d
 8004054:	080041a7 	.word	0x080041a7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004058:	7c3b      	ldrb	r3, [r7, #16]
 800405a:	2b01      	cmp	r3, #1
 800405c:	f040 80f5 	bne.w	800424a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004060:	78bb      	ldrb	r3, [r7, #2]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d12d      	bne.n	80040c2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004066:	8b3b      	ldrh	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	333d      	adds	r3, #61	@ 0x3d
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	333d      	adds	r3, #61	@ 0x3d
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	332a      	adds	r3, #42	@ 0x2a
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80040aa:	e0ce      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	332a      	adds	r3, #42	@ 0x2a
 80040bc:	2202      	movs	r2, #2
 80040be:	701a      	strb	r2, [r3, #0]
      break;
 80040c0:	e0c3      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	331a      	adds	r3, #26
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f040 80b8 	bne.w	800424a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	333c      	adds	r3, #60	@ 0x3c
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	332a      	adds	r3, #42	@ 0x2a
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
      break;
 8004104:	e0a1      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	332a      	adds	r3, #42	@ 0x2a
 8004116:	2202      	movs	r2, #2
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e096      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800411c:	78bb      	ldrb	r3, [r7, #2]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d120      	bne.n	8004164 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	333d      	adds	r3, #61	@ 0x3d
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	332a      	adds	r3, #42	@ 0x2a
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800414c:	e07e      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	332a      	adds	r3, #42	@ 0x2a
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e073      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	333c      	adds	r3, #60	@ 0x3c
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	332a      	adds	r3, #42	@ 0x2a
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
      break;
 800418e:	e05d      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	332a      	adds	r3, #42	@ 0x2a
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
      break;
 80041a4:	e052      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80041a6:	78bb      	ldrb	r3, [r7, #2]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d120      	bne.n	80041ee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	333d      	adds	r3, #61	@ 0x3d
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	332a      	adds	r3, #42	@ 0x2a
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041d6:	e039      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	332a      	adds	r3, #42	@ 0x2a
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
      break;
 80041ec:	e02e      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	333c      	adds	r3, #60	@ 0x3c
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	332a      	adds	r3, #42	@ 0x2a
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
      break;
 8004218:	e018      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	332a      	adds	r3, #42	@ 0x2a
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
      break;
 800422e:	e00d      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	332a      	adds	r3, #42	@ 0x2a
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
      break;
 8004244:	e002      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800424a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	332c      	adds	r3, #44	@ 0x2c
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	8b39      	ldrh	r1, [r7, #24]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4403      	add	r3, r0
 8004270:	3334      	adds	r3, #52	@ 0x34
 8004272:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334c      	adds	r3, #76	@ 0x4c
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3338      	adds	r3, #56	@ 0x38
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3315      	adds	r3, #21
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	334d      	adds	r3, #77	@ 0x4d
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	3310      	adds	r3, #16
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	1d19      	adds	r1, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	799b      	ldrb	r3, [r3, #6]
 80042de:	461a      	mov	r2, r3
 80042e0:	f007 f9c0 	bl	800b664 <USB_HC_StartXfer>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop

080042f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f006 fec0 	bl	800b08c <USB_GetMode>
 800430c:	4603      	mov	r3, r0
 800430e:	2b01      	cmp	r3, #1
 8004310:	f040 80fb 	bne.w	800450a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f006 fe83 	bl	800b024 <USB_ReadInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80f1 	beq.w	8004508 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f006 fe7a 	bl	800b024 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800433a:	d104      	bne.n	8004346 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004344:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f006 fe6a 	bl	800b024 <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800435a:	d104      	bne.n	8004366 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004364:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f006 fe5a 	bl	800b024 <USB_ReadInterrupts>
 8004370:	4603      	mov	r3, r0
 8004372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800437a:	d104      	bne.n	8004386 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004384:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f006 fe4a 	bl	800b024 <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d103      	bne.n	80043a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2202      	movs	r2, #2
 80043a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f006 fe3c 	bl	800b024 <USB_ReadInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b6:	d120      	bne.n	80043fa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80043c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d113      	bne.n	80043fa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80043d2:	2110      	movs	r1, #16
 80043d4:	6938      	ldr	r0, [r7, #16]
 80043d6:	f006 fd2f 	bl	800ae38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f006 fd5e 	bl	800ae9c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7a5b      	ldrb	r3, [r3, #9]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d105      	bne.n	80043f4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f006 ff44 	bl	800b27c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f00c feb9 	bl	801116c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f006 fe10 	bl	800b024 <USB_ReadInterrupts>
 8004404:	4603      	mov	r3, r0
 8004406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800440a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800440e:	d102      	bne.n	8004416 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f001 fd4d 	bl	8005eb0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f006 fe02 	bl	800b024 <USB_ReadInterrupts>
 8004420:	4603      	mov	r3, r0
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b08      	cmp	r3, #8
 8004428:	d106      	bne.n	8004438 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f00c fe82 	bl	8011134 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2208      	movs	r2, #8
 8004436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f006 fdf1 	bl	800b024 <USB_ReadInterrupts>
 8004442:	4603      	mov	r3, r0
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800444c:	d139      	bne.n	80044c2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f007 fb80 	bl	800bb58 <USB_HC_ReadInterrupt>
 8004458:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e025      	b.n	80044ac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d018      	beq.n	80044a6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448a:	d106      	bne.n	800449a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f905 	bl	80046a2 <HCD_HC_IN_IRQHandler>
 8004498:	e005      	b.n	80044a6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 ff67 	bl	8005374 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	3301      	adds	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	795b      	ldrb	r3, [r3, #5]
 80044b0:	461a      	mov	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d3d3      	bcc.n	8004460 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f006 fdac 	bl	800b024 <USB_ReadInterrupts>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d101      	bne.n	80044da <HAL_HCD_IRQHandler+0x1ea>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_HCD_IRQHandler+0x1ec>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d014      	beq.n	800450a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0210 	bic.w	r2, r2, #16
 80044ee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 fbfe 	bl	8005cf2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0210 	orr.w	r2, r2, #16
 8004504:	619a      	str	r2, [r3, #24]
 8004506:	e000      	b.n	800450a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004508:	bf00      	nop
    }
  }
}
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_HCD_Start+0x16>
 8004522:	2302      	movs	r3, #2
 8004524:	e013      	b.n	800454e <HAL_HCD_Start+0x3e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f006 ff08 	bl	800b34a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f006 fc0c 	bl	800ad5c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_HCD_Stop+0x16>
 8004568:	2302      	movs	r3, #2
 800456a:	e00d      	b.n	8004588 <HAL_HCD_Stop+0x32>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f007 fc5b 	bl	800be34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f006 feaa 	bl	800b2f6 <USB_ResetPort>
 80045a2:	4603      	mov	r3, r0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	334c      	adds	r3, #76	@ 0x4c
 80045c8:	781b      	ldrb	r3, [r3, #0]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3338      	adds	r3, #56	@ 0x38
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f006 feec 	bl	800b3ea <USB_GetCurrentFrame>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f006 fec7 	bl	800b3bc <USB_GetHostSpeed>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	331a      	adds	r3, #26
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	331b      	adds	r3, #27
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3325      	adds	r3, #37	@ 0x25
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3324      	adds	r3, #36	@ 0x24
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 fcc2 	bl	800b04a <USB_ReadChInterrupts>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d11a      	bne.n	8004706 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046dc:	461a      	mov	r2, r3
 80046de:	2304      	movs	r3, #4
 80046e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	334d      	adds	r3, #77	@ 0x4d
 80046f2:	2207      	movs	r2, #7
 80046f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f007 fa3b 	bl	800bb7a <USB_HC_Halt>
 8004704:	e09e      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f006 fc9b 	bl	800b04a <USB_ReadChInterrupts>
 8004714:	4603      	mov	r3, r0
 8004716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800471e:	d11b      	bne.n	8004758 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004732:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	334d      	adds	r3, #77	@ 0x4d
 8004744:	2208      	movs	r2, #8
 8004746:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f007 fa12 	bl	800bb7a <USB_HC_Halt>
 8004756:	e075      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f006 fc72 	bl	800b04a <USB_ReadChInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d11a      	bne.n	80047a6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477c:	461a      	mov	r2, r3
 800477e:	2308      	movs	r3, #8
 8004780:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	334d      	adds	r3, #77	@ 0x4d
 8004792:	2206      	movs	r2, #6
 8004794:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f007 f9eb 	bl	800bb7a <USB_HC_Halt>
 80047a4:	e04e      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f006 fc4b 	bl	800b04a <USB_ReadChInterrupts>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047be:	d11b      	bne.n	80047f8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047cc:	461a      	mov	r2, r3
 80047ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334d      	adds	r3, #77	@ 0x4d
 80047e4:	2209      	movs	r2, #9
 80047e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f007 f9c2 	bl	800bb7a <USB_HC_Halt>
 80047f6:	e025      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f006 fc22 	bl	800b04a <USB_ReadChInterrupts>
 8004806:	4603      	mov	r3, r0
 8004808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480c:	2b80      	cmp	r3, #128	@ 0x80
 800480e:	d119      	bne.n	8004844 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	334d      	adds	r3, #77	@ 0x4d
 8004832:	2207      	movs	r2, #7
 8004834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f007 f99b 	bl	800bb7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f006 fbfc 	bl	800b04a <USB_ReadChInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d112      	bne.n	8004884 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f007 f987 	bl	800bb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004878:	461a      	mov	r2, r3
 800487a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800487e:	6093      	str	r3, [r2, #8]
 8004880:	f000 bd75 	b.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f006 fbdc 	bl	800b04a <USB_ReadChInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 8128 	bne.w	8004aee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048aa:	461a      	mov	r2, r3
 80048ac:	2320      	movs	r3, #32
 80048ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	331b      	adds	r3, #27
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d119      	bne.n	80048fa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	331b      	adds	r3, #27
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	799b      	ldrb	r3, [r3, #6]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	3330      	adds	r3, #48	@ 0x30
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	1ac9      	subs	r1, r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4403      	add	r3, r0
 8004936:	3338      	adds	r3, #56	@ 0x38
 8004938:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	334d      	adds	r3, #77	@ 0x4d
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	3344      	adds	r3, #68	@ 0x44
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4413      	add	r3, r2
 800496a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496e:	461a      	mov	r2, r3
 8004970:	2301      	movs	r3, #1
 8004972:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	3326      	adds	r3, #38	@ 0x26
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3326      	adds	r3, #38	@ 0x26
 800499a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800499c:	2b02      	cmp	r3, #2
 800499e:	d110      	bne.n	80049c2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	4611      	mov	r1, r2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f007 f8e6 	bl	800bb7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ba:	461a      	mov	r2, r3
 80049bc:	2310      	movs	r3, #16
 80049be:	6093      	str	r3, [r2, #8]
 80049c0:	e03d      	b.n	8004a3e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3326      	adds	r3, #38	@ 0x26
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d00a      	beq.n	80049ee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	3326      	adds	r3, #38	@ 0x26
 80049e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d127      	bne.n	8004a3e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a0c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	334c      	adds	r3, #76	@ 0x4c
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	334c      	adds	r3, #76	@ 0x4c
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f00c fba5 	bl	8011188 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	799b      	ldrb	r3, [r3, #6]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d13b      	bne.n	8004abe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3338      	adds	r3, #56	@ 0x38
 8004a56:	6819      	ldr	r1, [r3, #0]
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4403      	add	r3, r0
 8004a66:	3328      	adds	r3, #40	@ 0x28
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	440b      	add	r3, r1
 8004a6c:	1e59      	subs	r1, r3, #1
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4403      	add	r3, r0
 8004a7c:	3328      	adds	r3, #40	@ 0x28
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8470 	beq.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004a8e:	78fa      	ldrb	r2, [r7, #3]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	333c      	adds	r3, #60	@ 0x3c
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	f083 0301 	eor.w	r3, r3, #1
 8004aa6:	b2d8      	uxtb	r0, r3
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	333c      	adds	r3, #60	@ 0x3c
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	f000 bc58 	b.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	333c      	adds	r3, #60	@ 0x3c
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	f083 0301 	eor.w	r3, r3, #1
 8004ad6:	b2d8      	uxtb	r0, r3
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	333c      	adds	r3, #60	@ 0x3c
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	f000 bc40 	b.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f006 faa7 	bl	800b04a <USB_ReadChInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d131      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b12:	461a      	mov	r2, r3
 8004b14:	2320      	movs	r3, #32
 8004b16:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	331a      	adds	r3, #26
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	f040 841f 	bne.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	331b      	adds	r3, #27
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	334d      	adds	r3, #77	@ 0x4d
 8004b54:	2203      	movs	r2, #3
 8004b56:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f007 f80a 	bl	800bb7a <USB_HC_Halt>
 8004b66:	f000 bc02 	b.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f006 fa69 	bl	800b04a <USB_ReadChInterrupts>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	f040 8305 	bne.w	800518e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b90:	461a      	mov	r2, r3
 8004b92:	2302      	movs	r3, #2
 8004b94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	334d      	adds	r3, #77	@ 0x4d
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d114      	bne.n	8004bd6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	334d      	adds	r3, #77	@ 0x4d
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	334c      	adds	r3, #76	@ 0x4c
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e2cc      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	334d      	adds	r3, #77	@ 0x4d
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b06      	cmp	r3, #6
 8004bea:	d114      	bne.n	8004c16 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	334d      	adds	r3, #77	@ 0x4d
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	334c      	adds	r3, #76	@ 0x4c
 8004c10:	2205      	movs	r2, #5
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	e2ac      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	334d      	adds	r3, #77	@ 0x4d
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b07      	cmp	r3, #7
 8004c2a:	d00b      	beq.n	8004c44 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004c2c:	78fa      	ldrb	r2, [r7, #3]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	334d      	adds	r3, #77	@ 0x4d
 8004c3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	f040 80a6 	bne.w	8004d90 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	334d      	adds	r3, #77	@ 0x4d
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	3344      	adds	r3, #68	@ 0x44
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	1c59      	adds	r1, r3, #1
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4403      	add	r3, r0
 8004c78:	3344      	adds	r3, #68	@ 0x44
 8004c7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3344      	adds	r3, #68	@ 0x44
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d943      	bls.n	8004d1a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3344      	adds	r3, #68	@ 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	331a      	adds	r3, #26
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d123      	bne.n	8004d04 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	331b      	adds	r3, #27
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	331c      	adds	r3, #28
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	334c      	adds	r3, #76	@ 0x4c
 8004d14:	2204      	movs	r2, #4
 8004d16:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d18:	e229      	b.n	800516e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	334c      	adds	r3, #76	@ 0x4c
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3326      	adds	r3, #38	@ 0x26
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	3326      	adds	r3, #38	@ 0x26
 8004d54:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	f040 8209 	bne.w	800516e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d72:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d7a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d8e:	e1ee      	b.n	800516e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	334d      	adds	r3, #77	@ 0x4d
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	f040 80c8 	bne.w	8004f38 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	334d      	adds	r3, #77	@ 0x4d
 8004db8:	2202      	movs	r2, #2
 8004dba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	331b      	adds	r3, #27
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	f040 81ce 	bne.w	8005170 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3326      	adds	r3, #38	@ 0x26
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d16b      	bne.n	8004ec2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004dea:	78fa      	ldrb	r2, [r7, #3]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	3348      	adds	r3, #72	@ 0x48
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4403      	add	r3, r0
 8004e0a:	3348      	adds	r3, #72	@ 0x48
 8004e0c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3348      	adds	r3, #72	@ 0x48
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d943      	bls.n	8004eac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	3348      	adds	r3, #72	@ 0x48
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	331b      	adds	r3, #27
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3344      	adds	r3, #68	@ 0x44
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d809      	bhi.n	8004e76 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	331c      	adds	r3, #28
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e94:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	334c      	adds	r3, #76	@ 0x4c
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e014      	b.n	8004ed6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	334c      	adds	r3, #76	@ 0x4c
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	e009      	b.n	8004ed6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	334c      	adds	r3, #76	@ 0x4c
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3326      	adds	r3, #38	@ 0x26
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3326      	adds	r3, #38	@ 0x26
 8004efc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 8136 	bne.w	8005170 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f1a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f22:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f30:	461a      	mov	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e11b      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	334d      	adds	r3, #77	@ 0x4d
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	f040 8081 	bne.w	8005052 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	334d      	adds	r3, #77	@ 0x4d
 8004f60:	2202      	movs	r2, #2
 8004f62:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	331b      	adds	r3, #27
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	f040 80fa 	bne.w	8005170 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	334c      	adds	r3, #76	@ 0x4c
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fea:	f023 0320 	bic.w	r3, r3, #32
 8004fee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3326      	adds	r3, #38	@ 0x26
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00b      	beq.n	800501e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3326      	adds	r3, #38	@ 0x26
 8005016:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005018:	2b02      	cmp	r3, #2
 800501a:	f040 80a9 	bne.w	8005170 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005034:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800503c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e08e      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	334d      	adds	r3, #77	@ 0x4d
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d143      	bne.n	80050f0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	334d      	adds	r3, #77	@ 0x4d
 8005078:	2202      	movs	r2, #2
 800507a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	334c      	adds	r3, #76	@ 0x4c
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3326      	adds	r3, #38	@ 0x26
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3326      	adds	r3, #38	@ 0x26
 80050b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d159      	bne.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e03f      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	334d      	adds	r3, #77	@ 0x4d
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d126      	bne.n	8005154 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	334d      	adds	r3, #77	@ 0x4d
 8005116:	2202      	movs	r2, #2
 8005118:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3344      	adds	r3, #68	@ 0x44
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	1c59      	adds	r1, r3, #1
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4403      	add	r3, r0
 800513a:	3344      	adds	r3, #68	@ 0x44
 800513c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	334c      	adds	r3, #76	@ 0x4c
 800514e:	2204      	movs	r2, #4
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e00d      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	334d      	adds	r3, #77	@ 0x4d
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b02      	cmp	r3, #2
 8005168:	f000 8100 	beq.w	800536c <HCD_HC_IN_IRQHandler+0xcca>
 800516c:	e000      	b.n	8005170 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800516e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	334c      	adds	r3, #76	@ 0x4c
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f00b fffe 	bl	8011188 <HAL_HCD_HC_NotifyURBChange_Callback>
 800518c:	e0ef      	b.n	800536e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f005 ff57 	bl	800b04a <USB_ReadChInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a2:	2b40      	cmp	r3, #64	@ 0x40
 80051a4:	d12f      	bne.n	8005206 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b2:	461a      	mov	r2, r3
 80051b4:	2340      	movs	r3, #64	@ 0x40
 80051b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	334d      	adds	r3, #77	@ 0x4d
 80051c8:	2205      	movs	r2, #5
 80051ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	331a      	adds	r3, #26
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3344      	adds	r3, #68	@ 0x44
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f006 fcbb 	bl	800bb7a <USB_HC_Halt>
 8005204:	e0b3      	b.n	800536e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f005 ff1b 	bl	800b04a <USB_ReadChInterrupts>
 8005214:	4603      	mov	r3, r0
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	f040 80a7 	bne.w	800536e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3326      	adds	r3, #38	@ 0x26
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d11b      	bne.n	800526e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	3344      	adds	r3, #68	@ 0x44
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	334d      	adds	r3, #77	@ 0x4d
 800525a:	2204      	movs	r2, #4
 800525c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f006 fc87 	bl	800bb7a <USB_HC_Halt>
 800526c:	e03f      	b.n	80052ee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	3326      	adds	r3, #38	@ 0x26
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3326      	adds	r3, #38	@ 0x26
 8005294:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005296:	2b02      	cmp	r3, #2
 8005298:	d129      	bne.n	80052ee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800529a:	78fa      	ldrb	r2, [r7, #3]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3344      	adds	r3, #68	@ 0x44
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	799b      	ldrb	r3, [r3, #6]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HCD_HC_IN_IRQHandler+0xc2a>
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	331b      	adds	r3, #27
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d110      	bne.n	80052ee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	334d      	adds	r3, #77	@ 0x4d
 80052dc:	2204      	movs	r2, #4
 80052de:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f006 fc46 	bl	800bb7a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	331b      	adds	r3, #27
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d129      	bne.n	8005358 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	331b      	adds	r3, #27
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	440a      	add	r2, r1
 800532e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005336:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	440a      	add	r2, r1
 800534e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005352:	f043 0320 	orr.w	r3, r3, #32
 8005356:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005364:	461a      	mov	r2, r3
 8005366:	2310      	movs	r3, #16
 8005368:	6093      	str	r3, [r2, #8]
 800536a:	e000      	b.n	800536e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800536c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f005 fe59 	bl	800b04a <USB_ReadChInterrupts>
 8005398:	4603      	mov	r3, r0
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d11b      	bne.n	80053da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ae:	461a      	mov	r2, r3
 80053b0:	2304      	movs	r3, #4
 80053b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	334d      	adds	r3, #77	@ 0x4d
 80053c4:	2207      	movs	r2, #7
 80053c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f006 fbd2 	bl	800bb7a <USB_HC_Halt>
 80053d6:	f000 bc89 	b.w	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f005 fe31 	bl	800b04a <USB_ReadChInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	f040 8082 	bne.w	80054f8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005400:	461a      	mov	r2, r3
 8005402:	2320      	movs	r3, #32
 8005404:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	3319      	adds	r3, #25
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d124      	bne.n	8005466 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	3319      	adds	r3, #25
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334c      	adds	r3, #76	@ 0x4c
 8005440:	2202      	movs	r2, #2
 8005442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	334d      	adds	r3, #77	@ 0x4d
 8005454:	2203      	movs	r2, #3
 8005456:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	4611      	mov	r1, r2
 8005460:	4618      	mov	r0, r3
 8005462:	f006 fb8a 	bl	800bb7a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	331a      	adds	r3, #26
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	f040 8437 	bne.w	8005cec <HCD_HC_OUT_IRQHandler+0x978>
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	331b      	adds	r3, #27
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f040 842b 	bne.w	8005cec <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3326      	adds	r3, #38	@ 0x26
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d009      	beq.n	80054c0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	331b      	adds	r3, #27
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	334d      	adds	r3, #77	@ 0x4d
 80054d0:	2203      	movs	r2, #3
 80054d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f006 fb4c 	bl	800bb7a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	3344      	adds	r3, #68	@ 0x44
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e3f9      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	4611      	mov	r1, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f005 fda2 	bl	800b04a <USB_ReadChInterrupts>
 8005506:	4603      	mov	r3, r0
 8005508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800550c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005510:	d111      	bne.n	8005536 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800551e:	461a      	mov	r2, r3
 8005520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005524:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f006 fb23 	bl	800bb7a <USB_HC_Halt>
 8005534:	e3da      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f005 fd83 	bl	800b04a <USB_ReadChInterrupts>
 8005544:	4603      	mov	r3, r0
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d168      	bne.n	8005620 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	3344      	adds	r3, #68	@ 0x44
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	4611      	mov	r1, r2
 800556a:	4618      	mov	r0, r3
 800556c:	f005 fd6d 	bl	800b04a <USB_ReadChInterrupts>
 8005570:	4603      	mov	r3, r0
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d112      	bne.n	80055a0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	3319      	adds	r3, #25
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	2340      	movs	r3, #64	@ 0x40
 800559e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	331b      	adds	r3, #27
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d019      	beq.n	80055ea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	331b      	adds	r3, #27
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f6:	461a      	mov	r2, r3
 80055f8:	2301      	movs	r3, #1
 80055fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	334d      	adds	r3, #77	@ 0x4d
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f006 faae 	bl	800bb7a <USB_HC_Halt>
 800561e:	e365      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f005 fd0e 	bl	800b04a <USB_ReadChInterrupts>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	d139      	bne.n	80056ac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	334d      	adds	r3, #77	@ 0x4d
 8005648:	2205      	movs	r2, #5
 800564a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	331a      	adds	r3, #26
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3319      	adds	r3, #25
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	3344      	adds	r3, #68	@ 0x44
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f006 fa71 	bl	800bb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a4:	461a      	mov	r2, r3
 80056a6:	2340      	movs	r3, #64	@ 0x40
 80056a8:	6093      	str	r3, [r2, #8]
 80056aa:	e31f      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f005 fcc8 	bl	800b04a <USB_ReadChInterrupts>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d11a      	bne.n	80056fa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d0:	461a      	mov	r2, r3
 80056d2:	2308      	movs	r3, #8
 80056d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	334d      	adds	r3, #77	@ 0x4d
 80056e6:	2206      	movs	r2, #6
 80056e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f006 fa41 	bl	800bb7a <USB_HC_Halt>
 80056f8:	e2f8      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f005 fca1 	bl	800b04a <USB_ReadChInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d144      	bne.n	800579c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3344      	adds	r3, #68	@ 0x44
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	334d      	adds	r3, #77	@ 0x4d
 8005736:	2204      	movs	r2, #4
 8005738:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3319      	adds	r3, #25
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d114      	bne.n	800577a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3318      	adds	r3, #24
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3319      	adds	r3, #25
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f006 f9f9 	bl	800bb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005794:	461a      	mov	r2, r3
 8005796:	2310      	movs	r3, #16
 8005798:	6093      	str	r3, [r2, #8]
 800579a:	e2a7      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	4611      	mov	r1, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f005 fc50 	bl	800b04a <USB_ReadChInterrupts>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b0:	2b80      	cmp	r3, #128	@ 0x80
 80057b2:	f040 8083 	bne.w	80058bc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	799b      	ldrb	r3, [r3, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d111      	bne.n	80057e2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	334d      	adds	r3, #77	@ 0x4d
 80057ce:	2207      	movs	r2, #7
 80057d0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f006 f9cd 	bl	800bb7a <USB_HC_Halt>
 80057e0:	e062      	b.n	80058a8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	3344      	adds	r3, #68	@ 0x44
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4403      	add	r3, r0
 8005802:	3344      	adds	r3, #68	@ 0x44
 8005804:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005806:	78fa      	ldrb	r2, [r7, #3]
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	3344      	adds	r3, #68	@ 0x44
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d922      	bls.n	8005862 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	3344      	adds	r3, #68	@ 0x44
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	334c      	adds	r3, #76	@ 0x4c
 8005840:	2204      	movs	r2, #4
 8005842:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	334c      	adds	r3, #76	@ 0x4c
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f00b fc94 	bl	8011188 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005860:	e022      	b.n	80058a8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005862:	78fa      	ldrb	r2, [r7, #3]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	334c      	adds	r3, #76	@ 0x4c
 8005872:	2202      	movs	r2, #2
 8005874:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800588c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005894:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a2:	461a      	mov	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	2380      	movs	r3, #128	@ 0x80
 80058b8:	6093      	str	r3, [r2, #8]
 80058ba:	e217      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f005 fbc0 	bl	800b04a <USB_ReadChInterrupts>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d4:	d11b      	bne.n	800590e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80058d6:	78fa      	ldrb	r2, [r7, #3]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	334d      	adds	r3, #77	@ 0x4d
 80058e6:	2209      	movs	r2, #9
 80058e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f006 f941 	bl	800bb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005904:	461a      	mov	r2, r3
 8005906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800590a:	6093      	str	r3, [r2, #8]
 800590c:	e1ee      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f005 fb97 	bl	800b04a <USB_ReadChInterrupts>
 800591c:	4603      	mov	r3, r0
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	f040 81df 	bne.w	8005ce6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005934:	461a      	mov	r2, r3
 8005936:	2302      	movs	r3, #2
 8005938:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	334d      	adds	r3, #77	@ 0x4d
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	f040 8093 	bne.w	8005a78 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	334d      	adds	r3, #77	@ 0x4d
 8005962:	2202      	movs	r2, #2
 8005964:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005966:	78fa      	ldrb	r2, [r7, #3]
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	4613      	mov	r3, r2
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	334c      	adds	r3, #76	@ 0x4c
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800597a:	78fa      	ldrb	r2, [r7, #3]
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	3326      	adds	r3, #38	@ 0x26
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d00b      	beq.n	80059a8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	3326      	adds	r3, #38	@ 0x26
 80059a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	f040 8190 	bne.w	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	799b      	ldrb	r3, [r3, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d115      	bne.n	80059dc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	333d      	adds	r3, #61	@ 0x3d
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	f083 0301 	eor.w	r3, r3, #1
 80059c8:	b2d8      	uxtb	r0, r3
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	333d      	adds	r3, #61	@ 0x3d
 80059d8:	4602      	mov	r2, r0
 80059da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	799b      	ldrb	r3, [r3, #6]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 8171 	bne.w	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3334      	adds	r3, #52	@ 0x34
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8165 	beq.w	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3334      	adds	r3, #52	@ 0x34
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4403      	add	r3, r0
 8005a1e:	3328      	adds	r3, #40	@ 0x28
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	440b      	add	r3, r1
 8005a24:	1e59      	subs	r1, r3, #1
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4403      	add	r3, r0
 8005a34:	3328      	adds	r3, #40	@ 0x28
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a3c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 813f 	beq.w	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	333d      	adds	r3, #61	@ 0x3d
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	f083 0301 	eor.w	r3, r3, #1
 8005a62:	b2d8      	uxtb	r0, r3
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	333d      	adds	r3, #61	@ 0x3d
 8005a72:	4602      	mov	r2, r0
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e127      	b.n	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	334d      	adds	r3, #77	@ 0x4d
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d120      	bne.n	8005ad0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	334d      	adds	r3, #77	@ 0x4d
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	331b      	adds	r3, #27
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f040 8107 	bne.w	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	334c      	adds	r3, #76	@ 0x4c
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e0fb      	b.n	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	334d      	adds	r3, #77	@ 0x4d
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d13a      	bne.n	8005b5c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	334d      	adds	r3, #77	@ 0x4d
 8005af6:	2202      	movs	r2, #2
 8005af8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	334c      	adds	r3, #76	@ 0x4c
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	331b      	adds	r3, #27
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 80d1 	bne.w	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	331b      	adds	r3, #27
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b58:	6053      	str	r3, [r2, #4]
 8005b5a:	e0b5      	b.n	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	1a9b      	subs	r3, r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	334d      	adds	r3, #77	@ 0x4d
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d114      	bne.n	8005b9c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	334d      	adds	r3, #77	@ 0x4d
 8005b82:	2202      	movs	r2, #2
 8005b84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	334c      	adds	r3, #76	@ 0x4c
 8005b96:	2202      	movs	r2, #2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e095      	b.n	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	334d      	adds	r3, #77	@ 0x4d
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b06      	cmp	r3, #6
 8005bb0:	d114      	bne.n	8005bdc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	334d      	adds	r3, #77	@ 0x4d
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	334c      	adds	r3, #76	@ 0x4c
 8005bd6:	2205      	movs	r2, #5
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e075      	b.n	8005cc8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	334d      	adds	r3, #77	@ 0x4d
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b07      	cmp	r3, #7
 8005bf0:	d00a      	beq.n	8005c08 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	334d      	adds	r3, #77	@ 0x4d
 8005c02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d170      	bne.n	8005cea <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	334d      	adds	r3, #77	@ 0x4d
 8005c18:	2202      	movs	r2, #2
 8005c1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	3344      	adds	r3, #68	@ 0x44
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4403      	add	r3, r0
 8005c3c:	3344      	adds	r3, #68	@ 0x44
 8005c3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3344      	adds	r3, #68	@ 0x44
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d914      	bls.n	8005c80 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	1a9b      	subs	r3, r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	3344      	adds	r3, #68	@ 0x44
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	334c      	adds	r3, #76	@ 0x4c
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c7e:	e022      	b.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	334c      	adds	r3, #76	@ 0x4c
 8005c90:	2202      	movs	r2, #2
 8005c92:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005caa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cb2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005cc6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	334c      	adds	r3, #76	@ 0x4c
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f00b fa52 	bl	8011188 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ce4:	e002      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005cea:	bf00      	nop
  }
}
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b08a      	sub	sp, #40	@ 0x28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	0c5b      	lsrs	r3, r3, #17
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d004      	beq.n	8005d38 <HCD_RXQLVL_IRQHandler+0x46>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	f000 80b6 	beq.w	8005ea2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005d36:	e0b7      	b.n	8005ea8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80b3 	beq.w	8005ea6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4613      	mov	r3, r2
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	332c      	adds	r3, #44	@ 0x2c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80a7 	beq.w	8005ea6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	3338      	adds	r3, #56	@ 0x38
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	18d1      	adds	r1, r2, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4613      	mov	r3, r2
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4403      	add	r3, r0
 8005d7c:	3334      	adds	r3, #52	@ 0x34
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4299      	cmp	r1, r3
 8005d82:	f200 8083 	bhi.w	8005e8c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	332c      	adds	r3, #44	@ 0x2c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	f005 f8e7 	bl	800af74 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4613      	mov	r3, r2
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	332c      	adds	r3, #44	@ 0x2c
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	18d1      	adds	r1, r2, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4403      	add	r3, r0
 8005dca:	332c      	adds	r3, #44	@ 0x2c
 8005dcc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3338      	adds	r3, #56	@ 0x38
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	18d1      	adds	r1, r2, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4613      	mov	r3, r2
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4403      	add	r3, r0
 8005df2:	3338      	adds	r3, #56	@ 0x38
 8005df4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	0cdb      	lsrs	r3, r3, #19
 8005e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e0a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4613      	mov	r3, r2
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	3328      	adds	r3, #40	@ 0x28
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d13f      	bne.n	8005ea6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d03c      	beq.n	8005ea6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e42:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e4a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4613      	mov	r3, r2
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	333c      	adds	r3, #60	@ 0x3c
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f083 0301 	eor.w	r3, r3, #1
 8005e74:	b2d8      	uxtb	r0, r3
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	333c      	adds	r3, #60	@ 0x3c
 8005e86:	4602      	mov	r2, r0
 8005e88:	701a      	strb	r2, [r3, #0]
      break;
 8005e8a:	e00c      	b.n	8005ea6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4613      	mov	r3, r2
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	334c      	adds	r3, #76	@ 0x4c
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	701a      	strb	r2, [r3, #0]
      break;
 8005ea0:	e001      	b.n	8005ea6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005ea2:	bf00      	nop
 8005ea4:	e000      	b.n	8005ea8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005ea6:	bf00      	nop
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	3728      	adds	r7, #40	@ 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005edc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d10b      	bne.n	8005f00 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f00b f92c 	bl	8011150 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f043 0302 	orr.w	r3, r3, #2
 8005efe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d132      	bne.n	8005f70 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f043 0308 	orr.w	r3, r3, #8
 8005f10:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d126      	bne.n	8005f6a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	7a5b      	ldrb	r3, [r3, #9]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d113      	bne.n	8005f4c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005f2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f2e:	d106      	bne.n	8005f3e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2102      	movs	r1, #2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f005 f9a0 	bl	800b27c <USB_InitFSLSPClkSel>
 8005f3c:	e011      	b.n	8005f62 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2101      	movs	r1, #1
 8005f44:	4618      	mov	r0, r3
 8005f46:	f005 f999 	bl	800b27c <USB_InitFSLSPClkSel>
 8005f4a:	e00a      	b.n	8005f62 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	79db      	ldrb	r3, [r3, #7]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005f60:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f00b f91e 	bl	80111a4 <HAL_HCD_PortEnabled_Callback>
 8005f68:	e002      	b.n	8005f70 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f00b f928 	bl	80111c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d103      	bne.n	8005f82 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f043 0320 	orr.w	r3, r3, #32
 8005f80:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6013      	str	r3, [r2, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e12b      	b.n	8006202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb fb3c 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	@ 0x24
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f000 ff82 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8006000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4a81      	ldr	r2, [pc, #516]	@ (800620c <HAL_I2C_Init+0x274>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d807      	bhi.n	800601c <HAL_I2C_Init+0x84>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a80      	ldr	r2, [pc, #512]	@ (8006210 <HAL_I2C_Init+0x278>)
 8006010:	4293      	cmp	r3, r2
 8006012:	bf94      	ite	ls
 8006014:	2301      	movls	r3, #1
 8006016:	2300      	movhi	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	e006      	b.n	800602a <HAL_I2C_Init+0x92>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a7d      	ldr	r2, [pc, #500]	@ (8006214 <HAL_I2C_Init+0x27c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	bf94      	ite	ls
 8006024:	2301      	movls	r3, #1
 8006026:	2300      	movhi	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e0e7      	b.n	8006202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a78      	ldr	r2, [pc, #480]	@ (8006218 <HAL_I2C_Init+0x280>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	0c9b      	lsrs	r3, r3, #18
 800603c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a6a      	ldr	r2, [pc, #424]	@ (800620c <HAL_I2C_Init+0x274>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d802      	bhi.n	800606c <HAL_I2C_Init+0xd4>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	3301      	adds	r3, #1
 800606a:	e009      	b.n	8006080 <HAL_I2C_Init+0xe8>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006072:	fb02 f303 	mul.w	r3, r2, r3
 8006076:	4a69      	ldr	r2, [pc, #420]	@ (800621c <HAL_I2C_Init+0x284>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	099b      	lsrs	r3, r3, #6
 800607e:	3301      	adds	r3, #1
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	430b      	orrs	r3, r1
 8006086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	495c      	ldr	r1, [pc, #368]	@ (800620c <HAL_I2C_Init+0x274>)
 800609c:	428b      	cmp	r3, r1
 800609e:	d819      	bhi.n	80060d4 <HAL_I2C_Init+0x13c>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	1e59      	subs	r1, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80060b4:	400b      	ands	r3, r1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_I2C_Init+0x138>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1e59      	subs	r1, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80060c8:	3301      	adds	r3, #1
 80060ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ce:	e051      	b.n	8006174 <HAL_I2C_Init+0x1dc>
 80060d0:	2304      	movs	r3, #4
 80060d2:	e04f      	b.n	8006174 <HAL_I2C_Init+0x1dc>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d111      	bne.n	8006100 <HAL_I2C_Init+0x168>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1e58      	subs	r0, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6859      	ldr	r1, [r3, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	440b      	add	r3, r1
 80060ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf0c      	ite	eq
 80060f8:	2301      	moveq	r3, #1
 80060fa:	2300      	movne	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	e012      	b.n	8006126 <HAL_I2C_Init+0x18e>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1e58      	subs	r0, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	0099      	lsls	r1, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	fbb0 f3f3 	udiv	r3, r0, r3
 8006116:	3301      	adds	r3, #1
 8006118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Init+0x196>
 800612a:	2301      	movs	r3, #1
 800612c:	e022      	b.n	8006174 <HAL_I2C_Init+0x1dc>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10e      	bne.n	8006154 <HAL_I2C_Init+0x1bc>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1e58      	subs	r0, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	440b      	add	r3, r1
 8006144:	fbb0 f3f3 	udiv	r3, r0, r3
 8006148:	3301      	adds	r3, #1
 800614a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800614e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006152:	e00f      	b.n	8006174 <HAL_I2C_Init+0x1dc>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1e58      	subs	r0, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	0099      	lsls	r1, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	fbb0 f3f3 	udiv	r3, r0, r3
 800616a:	3301      	adds	r3, #1
 800616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	6809      	ldr	r1, [r1, #0]
 8006178:	4313      	orrs	r3, r2
 800617a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69da      	ldr	r2, [r3, #28]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6911      	ldr	r1, [r2, #16]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	4311      	orrs	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	000186a0 	.word	0x000186a0
 8006210:	001e847f 	.word	0x001e847f
 8006214:	003d08ff 	.word	0x003d08ff
 8006218:	431bde83 	.word	0x431bde83
 800621c:	10624dd3 	.word	0x10624dd3

08006220 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0bf      	b.n	80063b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb fa76 	bl	8001738 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006262:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6999      	ldr	r1, [r3, #24]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006278:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6899      	ldr	r1, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b4a      	ldr	r3, [pc, #296]	@ (80063bc <HAL_LTDC_Init+0x19c>)
 8006294:	400b      	ands	r3, r1
 8006296:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	041b      	lsls	r3, r3, #16
 800629e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68d9      	ldr	r1, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b3e      	ldr	r3, [pc, #248]	@ (80063bc <HAL_LTDC_Init+0x19c>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68d9      	ldr	r1, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6919      	ldr	r1, [r3, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b33      	ldr	r3, [pc, #204]	@ (80063bc <HAL_LTDC_Init+0x19c>)
 80062f0:	400b      	ands	r3, r1
 80062f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6919      	ldr	r1, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6959      	ldr	r1, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4b27      	ldr	r3, [pc, #156]	@ (80063bc <HAL_LTDC_Init+0x19c>)
 800631e:	400b      	ands	r3, r1
 8006320:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6959      	ldr	r1, [r3, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0206 	orr.w	r2, r2, #6
 800638e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	f000f800 	.word	0xf000f800

080063c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d023      	beq.n	800642a <HAL_LTDC_IRQHandler+0x6a>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01e      	beq.n	800642a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2204      	movs	r2, #4
 8006402:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2204      	movs	r2, #4
 8006418:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f86f 	bl	8006508 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d023      	beq.n	800647c <HAL_LTDC_IRQHandler+0xbc>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01e      	beq.n	800647c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0202 	bic.w	r2, r2, #2
 800644c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2202      	movs	r2, #2
 8006454:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800645c:	f043 0202 	orr.w	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2204      	movs	r2, #4
 800646a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f846 	bl	8006508 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01b      	beq.n	80064be <HAL_LTDC_IRQHandler+0xfe>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d016      	beq.n	80064be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f82f 	bl	800651c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <HAL_LTDC_IRQHandler+0x140>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0208 	bic.w	r2, r2, #8
 80064e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2208      	movs	r2, #8
 80064e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f818 	bl	8006530 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006544:	b5b0      	push	{r4, r5, r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_LTDC_ConfigLayer+0x1a>
 800655a:	2302      	movs	r3, #2
 800655c:	e02c      	b.n	80065b8 <HAL_LTDC_ConfigLayer+0x74>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2134      	movs	r1, #52	@ 0x34
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	4413      	add	r3, r2
 800657a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4614      	mov	r4, r2
 8006582:	461d      	mov	r5, r3
 8006584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f811 	bl	80065c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2201      	movs	r2, #1
 80065a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bdb0      	pop	{r4, r5, r7, pc}

080065c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b089      	sub	sp, #36	@ 0x24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065dc:	4413      	add	r3, r2
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	01db      	lsls	r3, r3, #7
 80065ec:	4413      	add	r3, r2
 80065ee:	3384      	adds	r3, #132	@ 0x84
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	4611      	mov	r1, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	01d2      	lsls	r2, r2, #7
 80065fc:	440a      	add	r2, r1
 80065fe:	3284      	adds	r2, #132	@ 0x84
 8006600:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006604:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006616:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006618:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	440b      	add	r3, r1
 8006626:	3384      	adds	r3, #132	@ 0x84
 8006628:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800662e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800663e:	4413      	add	r3, r2
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	01db      	lsls	r3, r3, #7
 800664e:	4413      	add	r3, r2
 8006650:	3384      	adds	r3, #132	@ 0x84
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	4611      	mov	r1, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	01d2      	lsls	r2, r2, #7
 800665e:	440a      	add	r2, r1
 8006660:	3284      	adds	r2, #132	@ 0x84
 8006662:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006666:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006676:	4413      	add	r3, r2
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	440b      	add	r3, r1
 8006686:	3384      	adds	r3, #132	@ 0x84
 8006688:	4619      	mov	r1, r3
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4313      	orrs	r3, r2
 800668e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	01db      	lsls	r3, r3, #7
 800669a:	4413      	add	r3, r2
 800669c:	3384      	adds	r3, #132	@ 0x84
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	4611      	mov	r1, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	01d2      	lsls	r2, r2, #7
 80066aa:	440a      	add	r2, r1
 80066ac:	3284      	adds	r2, #132	@ 0x84
 80066ae:	f023 0307 	bic.w	r3, r3, #7
 80066b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	01db      	lsls	r3, r3, #7
 80066be:	4413      	add	r3, r2
 80066c0:	3384      	adds	r3, #132	@ 0x84
 80066c2:	461a      	mov	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	061b      	lsls	r3, r3, #24
 80066e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	01db      	lsls	r3, r3, #7
 80066f0:	4413      	add	r3, r2
 80066f2:	3384      	adds	r3, #132	@ 0x84
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	01db      	lsls	r3, r3, #7
 8006700:	4413      	add	r3, r2
 8006702:	3384      	adds	r3, #132	@ 0x84
 8006704:	461a      	mov	r2, r3
 8006706:	2300      	movs	r3, #0
 8006708:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006710:	461a      	mov	r2, r3
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	431a      	orrs	r2, r3
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	01db      	lsls	r3, r3, #7
 8006724:	440b      	add	r3, r1
 8006726:	3384      	adds	r3, #132	@ 0x84
 8006728:	4619      	mov	r1, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	01db      	lsls	r3, r3, #7
 800673a:	4413      	add	r3, r2
 800673c:	3384      	adds	r3, #132	@ 0x84
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	4611      	mov	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	01d2      	lsls	r2, r2, #7
 800674a:	440a      	add	r2, r1
 800674c:	3284      	adds	r2, #132	@ 0x84
 800674e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006752:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	01db      	lsls	r3, r3, #7
 800675e:	4413      	add	r3, r2
 8006760:	3384      	adds	r3, #132	@ 0x84
 8006762:	461a      	mov	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	01db      	lsls	r3, r3, #7
 8006774:	4413      	add	r3, r2
 8006776:	3384      	adds	r3, #132	@ 0x84
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	4611      	mov	r1, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	01d2      	lsls	r2, r2, #7
 8006784:	440a      	add	r2, r1
 8006786:	3284      	adds	r2, #132	@ 0x84
 8006788:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	6809      	ldr	r1, [r1, #0]
 800679e:	4608      	mov	r0, r1
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	01c9      	lsls	r1, r1, #7
 80067a4:	4401      	add	r1, r0
 80067a6:	3184      	adds	r1, #132	@ 0x84
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	01db      	lsls	r3, r3, #7
 80067b6:	4413      	add	r3, r2
 80067b8:	3384      	adds	r3, #132	@ 0x84
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	01db      	lsls	r3, r3, #7
 80067c6:	4413      	add	r3, r2
 80067c8:	3384      	adds	r3, #132	@ 0x84
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	01db      	lsls	r3, r3, #7
 80067da:	4413      	add	r3, r2
 80067dc:	3384      	adds	r3, #132	@ 0x84
 80067de:	461a      	mov	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80067ee:	2304      	movs	r3, #4
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e01b      	b.n	800682c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80067fc:	2303      	movs	r3, #3
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	e014      	b.n	800682c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d00b      	beq.n	8006822 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800680e:	2b02      	cmp	r3, #2
 8006810:	d007      	beq.n	8006822 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006816:	2b03      	cmp	r3, #3
 8006818:	d003      	beq.n	8006822 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800681e:	2b07      	cmp	r3, #7
 8006820:	d102      	bne.n	8006828 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006822:	2302      	movs	r3, #2
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e001      	b.n	800682c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006828:	2301      	movs	r3, #1
 800682a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	01db      	lsls	r3, r3, #7
 8006836:	4413      	add	r3, r2
 8006838:	3384      	adds	r3, #132	@ 0x84
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	4611      	mov	r1, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	01d2      	lsls	r2, r2, #7
 8006846:	440a      	add	r2, r1
 8006848:	3284      	adds	r2, #132	@ 0x84
 800684a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800684e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6859      	ldr	r1, [r3, #4]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	1acb      	subs	r3, r1, r3
 8006866:	69f9      	ldr	r1, [r7, #28]
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	6809      	ldr	r1, [r1, #0]
 8006872:	4608      	mov	r0, r1
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	01c9      	lsls	r1, r1, #7
 8006878:	4401      	add	r1, r0
 800687a:	3184      	adds	r1, #132	@ 0x84
 800687c:	4313      	orrs	r3, r2
 800687e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	01db      	lsls	r3, r3, #7
 800688a:	4413      	add	r3, r2
 800688c:	3384      	adds	r3, #132	@ 0x84
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	4611      	mov	r1, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	01d2      	lsls	r2, r2, #7
 800689a:	440a      	add	r2, r1
 800689c:	3284      	adds	r2, #132	@ 0x84
 800689e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	01db      	lsls	r3, r3, #7
 80068b2:	4413      	add	r3, r2
 80068b4:	3384      	adds	r3, #132	@ 0x84
 80068b6:	461a      	mov	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	01db      	lsls	r3, r3, #7
 80068c8:	4413      	add	r3, r2
 80068ca:	3384      	adds	r3, #132	@ 0x84
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	4611      	mov	r1, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	01d2      	lsls	r2, r2, #7
 80068d8:	440a      	add	r2, r1
 80068da:	3284      	adds	r2, #132	@ 0x84
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6013      	str	r3, [r2, #0]
}
 80068e2:	bf00      	nop
 80068e4:	3724      	adds	r7, #36	@ 0x24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <HAL_PWREx_EnableOverDrive+0x90>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <HAL_PWREx_EnableOverDrive+0x90>)
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006908:	6413      	str	r3, [r2, #64]	@ 0x40
 800690a:	4b1d      	ldr	r3, [pc, #116]	@ (8006980 <HAL_PWREx_EnableOverDrive+0x90>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006916:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <HAL_PWREx_EnableOverDrive+0x94>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800691c:	f7fb fbfc 	bl	8002118 <HAL_GetTick>
 8006920:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006922:	e009      	b.n	8006938 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006924:	f7fb fbf8 	bl	8002118 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006932:	d901      	bls.n	8006938 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e01f      	b.n	8006978 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006938:	4b13      	ldr	r3, [pc, #76]	@ (8006988 <HAL_PWREx_EnableOverDrive+0x98>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006944:	d1ee      	bne.n	8006924 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006946:	4b11      	ldr	r3, [pc, #68]	@ (800698c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006948:	2201      	movs	r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800694c:	f7fb fbe4 	bl	8002118 <HAL_GetTick>
 8006950:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006952:	e009      	b.n	8006968 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006954:	f7fb fbe0 	bl	8002118 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006962:	d901      	bls.n	8006968 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e007      	b.n	8006978 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006968:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <HAL_PWREx_EnableOverDrive+0x98>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006974:	d1ee      	bne.n	8006954 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40023800 	.word	0x40023800
 8006984:	420e0040 	.word	0x420e0040
 8006988:	40007000 	.word	0x40007000
 800698c:	420e0044 	.word	0x420e0044

08006990 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af02      	add	r7, sp, #8
 8006996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006998:	f7fb fbbe 	bl	8002118 <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e069      	b.n	8006a7c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fa fee3 	bl	8001788 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80069c2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f85e 	bl	8006a88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	3b01      	subs	r3, #1
 80069dc:	021a      	lsls	r2, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2120      	movs	r1, #32
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f856 	bl	8006aa4 <QSPI_WaitFlagStateUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d137      	bne.n	8006a72 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a0c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6852      	ldr	r2, [r2, #4]
 8006a14:	0611      	lsls	r1, r2, #24
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68d2      	ldr	r2, [r2, #12]
 8006a1a:	4311      	orrs	r1, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	69d2      	ldr	r2, [r2, #28]
 8006a20:	4311      	orrs	r1, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6a12      	ldr	r2, [r2, #32]
 8006a26:	4311      	orrs	r1, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b13      	ldr	r3, [pc, #76]	@ (8006a84 <HAL_QSPI_Init+0xf4>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6912      	ldr	r2, [r2, #16]
 8006a3e:	0411      	lsls	r1, r2, #16
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6952      	ldr	r2, [r2, #20]
 8006a44:	4311      	orrs	r1, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6992      	ldr	r2, [r2, #24]
 8006a4a:	4311      	orrs	r1, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	ffe0f8fe 	.word	0xffe0f8fe

08006a88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ab4:	e01a      	b.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d016      	beq.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fb fb2b 	bl	8002118 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	f043 0201 	orr.w	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e00e      	b.n	8006b0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d1d6      	bne.n	8006ab6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0cc      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b28:	4b68      	ldr	r3, [pc, #416]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d90c      	bls.n	8006b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b36:	4b65      	ldr	r3, [pc, #404]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3e:	4b63      	ldr	r3, [pc, #396]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0b8      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b68:	4b59      	ldr	r3, [pc, #356]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4a58      	ldr	r2, [pc, #352]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b80:	4b53      	ldr	r3, [pc, #332]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	4a52      	ldr	r2, [pc, #328]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b8c:	4b50      	ldr	r3, [pc, #320]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	494d      	ldr	r1, [pc, #308]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d044      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb2:	4b47      	ldr	r3, [pc, #284]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d119      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e07f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e06f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e067      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bf2:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f023 0203 	bic.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4934      	ldr	r1, [pc, #208]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c04:	f7fb fa88 	bl	8002118 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c0c:	f7fb fa84 	bl	8002118 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e04f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 020c 	and.w	r2, r3, #12
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d1eb      	bne.n	8006c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c34:	4b25      	ldr	r3, [pc, #148]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d20c      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c42:	4b22      	ldr	r3, [pc, #136]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4a:	4b20      	ldr	r3, [pc, #128]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e032      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c68:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4916      	ldr	r1, [pc, #88]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c86:	4b12      	ldr	r3, [pc, #72]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	490e      	ldr	r1, [pc, #56]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c9a:	f000 f821 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	490a      	ldr	r1, [pc, #40]	@ (8006cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	5ccb      	ldrb	r3, [r1, r3]
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	4a09      	ldr	r2, [pc, #36]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cb6:	4b09      	ldr	r3, [pc, #36]	@ (8006cdc <HAL_RCC_ClockConfig+0x1c8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb f880 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40023c00 	.word	0x40023c00
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	08011924 	.word	0x08011924
 8006cd8:	20000000 	.word	0x20000000
 8006cdc:	20000004 	.word	0x20000004

08006ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce4:	b094      	sub	sp, #80	@ 0x50
 8006ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cf8:	4b79      	ldr	r3, [pc, #484]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 030c 	and.w	r3, r3, #12
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d00d      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0x40>
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	f200 80e1 	bhi.w	8006ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0x34>
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d003      	beq.n	8006d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d12:	e0db      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b73      	ldr	r3, [pc, #460]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d18:	e0db      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d1a:	4b73      	ldr	r3, [pc, #460]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d1e:	e0d8      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d20:	4b6f      	ldr	r3, [pc, #444]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d063      	beq.n	8006dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d36:	4b6a      	ldr	r3, [pc, #424]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	099b      	lsrs	r3, r3, #6
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	f04f 0000 	mov.w	r0, #0
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	0159      	lsls	r1, r3, #5
 8006d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d64:	0150      	lsls	r0, r2, #5
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	1a51      	subs	r1, r2, r1
 8006d6e:	6139      	str	r1, [r7, #16]
 8006d70:	4629      	mov	r1, r5
 8006d72:	eb63 0301 	sbc.w	r3, r3, r1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d84:	4659      	mov	r1, fp
 8006d86:	018b      	lsls	r3, r1, #6
 8006d88:	4651      	mov	r1, sl
 8006d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d8e:	4651      	mov	r1, sl
 8006d90:	018a      	lsls	r2, r1, #6
 8006d92:	4651      	mov	r1, sl
 8006d94:	ebb2 0801 	subs.w	r8, r2, r1
 8006d98:	4659      	mov	r1, fp
 8006d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006db2:	4690      	mov	r8, r2
 8006db4:	4699      	mov	r9, r3
 8006db6:	4623      	mov	r3, r4
 8006db8:	eb18 0303 	adds.w	r3, r8, r3
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	462b      	mov	r3, r5
 8006dc0:	eb49 0303 	adc.w	r3, r9, r3
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	024b      	lsls	r3, r1, #9
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ddc:	4621      	mov	r1, r4
 8006dde:	024a      	lsls	r2, r1, #9
 8006de0:	4610      	mov	r0, r2
 8006de2:	4619      	mov	r1, r3
 8006de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de6:	2200      	movs	r2, #0
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006df0:	f7f9 fa08 	bl	8000204 <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4613      	mov	r3, r2
 8006dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dfc:	e058      	b.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dfe:	4b38      	ldr	r3, [pc, #224]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	099b      	lsrs	r3, r3, #6
 8006e04:	2200      	movs	r2, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	4611      	mov	r1, r2
 8006e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	2300      	movs	r3, #0
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	f04f 0000 	mov.w	r0, #0
 8006e20:	f04f 0100 	mov.w	r1, #0
 8006e24:	0159      	lsls	r1, r3, #5
 8006e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e2a:	0150      	lsls	r0, r2, #5
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4641      	mov	r1, r8
 8006e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e36:	4649      	mov	r1, r9
 8006e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e50:	ebb2 040a 	subs.w	r4, r2, sl
 8006e54:	eb63 050b 	sbc.w	r5, r3, fp
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	00eb      	lsls	r3, r5, #3
 8006e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e66:	00e2      	lsls	r2, r4, #3
 8006e68:	4614      	mov	r4, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	4643      	mov	r3, r8
 8006e6e:	18e3      	adds	r3, r4, r3
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	464b      	mov	r3, r9
 8006e74:	eb45 0303 	adc.w	r3, r5, r3
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e86:	4629      	mov	r1, r5
 8006e88:	028b      	lsls	r3, r1, #10
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e90:	4621      	mov	r1, r4
 8006e92:	028a      	lsls	r2, r1, #10
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	61fa      	str	r2, [r7, #28]
 8006ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea4:	f7f9 f9ae 	bl	8000204 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4613      	mov	r3, r2
 8006eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	3301      	adds	r3, #1
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3750      	adds	r7, #80	@ 0x50
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ede:	bf00      	nop
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	007a1200 	.word	0x007a1200

08006eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000000 	.word	0x20000000

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f08:	f7ff fff0 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	@ (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40023800 	.word	0x40023800
 8006f28:	08011934 	.word	0x08011934

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f30:	f7ff ffdc 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0b5b      	lsrs	r3, r3, #13
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4903      	ldr	r1, [pc, #12]	@ (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	08011934 	.word	0x08011934

08006f54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	220f      	movs	r2, #15
 8006f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f64:	4b12      	ldr	r3, [pc, #72]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0203 	and.w	r2, r3, #3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f70:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f88:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	08db      	lsrs	r3, r3, #3
 8006f8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f96:	4b07      	ldr	r3, [pc, #28]	@ (8006fb4 <HAL_RCC_GetClockConfig+0x60>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 020f 	and.w	r2, r3, #15
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	40023c00 	.word	0x40023c00

08006fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006fe0:	4b66      	ldr	r3, [pc, #408]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fee:	4963      	ldr	r1, [pc, #396]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007002:	4b5e      	ldr	r3, [pc, #376]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007008:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	495a      	ldr	r1, [pc, #360]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007012:	4313      	orrs	r3, r2
 8007014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007038:	2b00      	cmp	r3, #0
 800703a:	d075      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800703c:	4b50      	ldr	r3, [pc, #320]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007042:	f7fb f869 	bl	8002118 <HAL_GetTick>
 8007046:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007048:	e008      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800704a:	f7fb f865 	bl	8002118 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e1dc      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800705c:	4b47      	ldr	r3, [pc, #284]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f0      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d009      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	019a      	lsls	r2, r3, #6
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	071b      	lsls	r3, r3, #28
 8007080:	493e      	ldr	r1, [pc, #248]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01f      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007094:	4b39      	ldr	r3, [pc, #228]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800709a:	0f1b      	lsrs	r3, r3, #28
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	019a      	lsls	r2, r3, #6
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	061b      	lsls	r3, r3, #24
 80070ae:	431a      	orrs	r2, r3
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	071b      	lsls	r3, r3, #28
 80070b4:	4931      	ldr	r1, [pc, #196]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070bc:	4b2f      	ldr	r3, [pc, #188]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070c2:	f023 021f 	bic.w	r2, r3, #31
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	492b      	ldr	r1, [pc, #172]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	019a      	lsls	r2, r3, #6
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	061b      	lsls	r3, r3, #24
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	071b      	lsls	r3, r3, #28
 80070f4:	4921      	ldr	r1, [pc, #132]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070fc:	4b20      	ldr	r3, [pc, #128]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007102:	f7fb f809 	bl	8002118 <HAL_GetTick>
 8007106:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007108:	e008      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800710a:	f7fb f805 	bl	8002118 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e17c      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d112      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10c      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80ce 	beq.w	80072ea <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007156:	f040 80c8 	bne.w	80072ea <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800715a:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007160:	f7fa ffda 	bl	8002118 <HAL_GetTick>
 8007164:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007166:	e00f      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007168:	f7fa ffd6 	bl	8002118 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d908      	bls.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e14d      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800717a:	bf00      	nop
 800717c:	40023800 	.word	0x40023800
 8007180:	42470068 	.word	0x42470068
 8007184:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007188:	4ba5      	ldr	r3, [pc, #660]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007194:	d0e8      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d02e      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80071a2:	4b9f      	ldr	r3, [pc, #636]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	3301      	adds	r3, #1
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071b4:	4b9a      	ldr	r3, [pc, #616]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ba:	0f1b      	lsrs	r3, r3, #28
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	019a      	lsls	r2, r3, #6
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	3b01      	subs	r3, #1
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	061b      	lsls	r3, r3, #24
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	071b      	lsls	r3, r3, #28
 80071de:	4990      	ldr	r1, [pc, #576]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071e6:	4b8e      	ldr	r3, [pc, #568]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	3b01      	subs	r3, #1
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	4989      	ldr	r1, [pc, #548]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d02c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800720c:	4b84      	ldr	r3, [pc, #528]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	0c1b      	lsrs	r3, r3, #16
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	3301      	adds	r3, #1
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800721e:	4b80      	ldr	r3, [pc, #512]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007224:	0e1b      	lsrs	r3, r3, #24
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	019a      	lsls	r2, r3, #6
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	3b01      	subs	r3, #1
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	431a      	orrs	r2, r3
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	061b      	lsls	r3, r3, #24
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	071b      	lsls	r3, r3, #28
 8007248:	4975      	ldr	r1, [pc, #468]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007250:	4b73      	ldr	r3, [pc, #460]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007256:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725e:	4970      	ldr	r1, [pc, #448]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726e:	2b00      	cmp	r3, #0
 8007270:	d024      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800727a:	d11f      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800727c:	4b68      	ldr	r3, [pc, #416]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007282:	0e1b      	lsrs	r3, r3, #24
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800728a:	4b65      	ldr	r3, [pc, #404]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007290:	0f1b      	lsrs	r3, r3, #28
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	019a      	lsls	r2, r3, #6
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	3b01      	subs	r3, #1
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	431a      	orrs	r2, r3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	061b      	lsls	r3, r3, #24
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	071b      	lsls	r3, r3, #28
 80072b4:	495a      	ldr	r1, [pc, #360]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072bc:	4b59      	ldr	r3, [pc, #356]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072c2:	f7fa ff29 	bl	8002118 <HAL_GetTick>
 80072c6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072c8:	e008      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072ca:	f7fa ff25 	bl	8002118 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e09c      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072dc:	4b50      	ldr	r3, [pc, #320]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e8:	d1ef      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8083 	beq.w	80073fe <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072f8:	2300      	movs	r3, #0
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	4b48      	ldr	r3, [pc, #288]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	4a47      	ldr	r2, [pc, #284]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007306:	6413      	str	r3, [r2, #64]	@ 0x40
 8007308:	4b45      	ldr	r3, [pc, #276]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800730a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007314:	4b44      	ldr	r3, [pc, #272]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a43      	ldr	r2, [pc, #268]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800731a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007320:	f7fa fefa 	bl	8002118 <HAL_GetTick>
 8007324:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007328:	f7fa fef6 	bl	8002118 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e06d      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800733a:	4b3b      	ldr	r3, [pc, #236]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007346:	4b36      	ldr	r3, [pc, #216]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734e:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d02f      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d028      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007364:	4b2e      	ldr	r3, [pc, #184]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800736c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800736e:	4b2f      	ldr	r3, [pc, #188]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007370:	2201      	movs	r2, #1
 8007372:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007374:	4b2d      	ldr	r3, [pc, #180]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800737a:	4a29      	ldr	r2, [pc, #164]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007380:	4b27      	ldr	r3, [pc, #156]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b01      	cmp	r3, #1
 800738a:	d114      	bne.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800738c:	f7fa fec4 	bl	8002118 <HAL_GetTick>
 8007390:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007392:	e00a      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007394:	f7fa fec0 	bl	8002118 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d901      	bls.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e035      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0ee      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073c2:	d10d      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80073c4:	4b16      	ldr	r3, [pc, #88]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80073d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d8:	4911      	ldr	r1, [pc, #68]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	e005      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x434>
 80073e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073f8:	4909      	ldr	r1, [pc, #36]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007412:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800
 8007424:	42470070 	.word	0x42470070
 8007428:	40007000 	.word	0x40007000
 800742c:	42470e40 	.word	0x42470e40
 8007430:	424711e0 	.word	0x424711e0

08007434 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e273      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d075      	beq.n	800753e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007452:	4b88      	ldr	r3, [pc, #544]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 030c 	and.w	r3, r3, #12
 800745a:	2b04      	cmp	r3, #4
 800745c:	d00c      	beq.n	8007478 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800745e:	4b85      	ldr	r3, [pc, #532]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 030c 	and.w	r3, r3, #12
        || \
 8007466:	2b08      	cmp	r3, #8
 8007468:	d112      	bne.n	8007490 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800746a:	4b82      	ldr	r3, [pc, #520]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007476:	d10b      	bne.n	8007490 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007478:	4b7e      	ldr	r3, [pc, #504]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d05b      	beq.n	800753c <HAL_RCC_OscConfig+0x108>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d157      	bne.n	800753c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e24e      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007498:	d106      	bne.n	80074a8 <HAL_RCC_OscConfig+0x74>
 800749a:	4b76      	ldr	r3, [pc, #472]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a75      	ldr	r2, [pc, #468]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e01d      	b.n	80074e4 <HAL_RCC_OscConfig+0xb0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074b0:	d10c      	bne.n	80074cc <HAL_RCC_OscConfig+0x98>
 80074b2:	4b70      	ldr	r3, [pc, #448]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a6f      	ldr	r2, [pc, #444]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4b6d      	ldr	r3, [pc, #436]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a6c      	ldr	r2, [pc, #432]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e00b      	b.n	80074e4 <HAL_RCC_OscConfig+0xb0>
 80074cc:	4b69      	ldr	r3, [pc, #420]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a68      	ldr	r2, [pc, #416]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	4b66      	ldr	r3, [pc, #408]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a65      	ldr	r2, [pc, #404]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80074de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d013      	beq.n	8007514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7fa fe14 	bl	8002118 <HAL_GetTick>
 80074f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f4:	f7fa fe10 	bl	8002118 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b64      	cmp	r3, #100	@ 0x64
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e213      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007506:	4b5b      	ldr	r3, [pc, #364]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f0      	beq.n	80074f4 <HAL_RCC_OscConfig+0xc0>
 8007512:	e014      	b.n	800753e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fa fe00 	bl	8002118 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800751c:	f7fa fdfc 	bl	8002118 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b64      	cmp	r3, #100	@ 0x64
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e1ff      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800752e:	4b51      	ldr	r3, [pc, #324]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f0      	bne.n	800751c <HAL_RCC_OscConfig+0xe8>
 800753a:	e000      	b.n	800753e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800753c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d063      	beq.n	8007612 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800754a:	4b4a      	ldr	r3, [pc, #296]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007556:	4b47      	ldr	r3, [pc, #284]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
        || \
 800755e:	2b08      	cmp	r3, #8
 8007560:	d11c      	bne.n	800759c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007562:	4b44      	ldr	r3, [pc, #272]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d116      	bne.n	800759c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800756e:	4b41      	ldr	r3, [pc, #260]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <HAL_RCC_OscConfig+0x152>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d001      	beq.n	8007586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e1d3      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007586:	4b3b      	ldr	r3, [pc, #236]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4937      	ldr	r1, [pc, #220]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800759a:	e03a      	b.n	8007612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d020      	beq.n	80075e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075a4:	4b34      	ldr	r3, [pc, #208]	@ (8007678 <HAL_RCC_OscConfig+0x244>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075aa:	f7fa fdb5 	bl	8002118 <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075b2:	f7fa fdb1 	bl	8002118 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e1b4      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d0:	4b28      	ldr	r3, [pc, #160]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4925      	ldr	r1, [pc, #148]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	600b      	str	r3, [r1, #0]
 80075e4:	e015      	b.n	8007612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075e6:	4b24      	ldr	r3, [pc, #144]	@ (8007678 <HAL_RCC_OscConfig+0x244>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fa fd94 	bl	8002118 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075f4:	f7fa fd90 	bl	8002118 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e193      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007606:	4b1b      	ldr	r3, [pc, #108]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d036      	beq.n	800768c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d016      	beq.n	8007654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007626:	4b15      	ldr	r3, [pc, #84]	@ (800767c <HAL_RCC_OscConfig+0x248>)
 8007628:	2201      	movs	r2, #1
 800762a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762c:	f7fa fd74 	bl	8002118 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007634:	f7fa fd70 	bl	8002118 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e173      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007646:	4b0b      	ldr	r3, [pc, #44]	@ (8007674 <HAL_RCC_OscConfig+0x240>)
 8007648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f0      	beq.n	8007634 <HAL_RCC_OscConfig+0x200>
 8007652:	e01b      	b.n	800768c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007654:	4b09      	ldr	r3, [pc, #36]	@ (800767c <HAL_RCC_OscConfig+0x248>)
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765a:	f7fa fd5d 	bl	8002118 <HAL_GetTick>
 800765e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007660:	e00e      	b.n	8007680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007662:	f7fa fd59 	bl	8002118 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d907      	bls.n	8007680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e15c      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
 8007674:	40023800 	.word	0x40023800
 8007678:	42470000 	.word	0x42470000
 800767c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007680:	4b8a      	ldr	r3, [pc, #552]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1ea      	bne.n	8007662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8097 	beq.w	80077c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800769e:	4b83      	ldr	r3, [pc, #524]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10f      	bne.n	80076ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	4b7f      	ldr	r3, [pc, #508]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	4a7e      	ldr	r2, [pc, #504]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80076b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80076ba:	4b7c      	ldr	r3, [pc, #496]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076c2:	60bb      	str	r3, [r7, #8]
 80076c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ca:	4b79      	ldr	r3, [pc, #484]	@ (80078b0 <HAL_RCC_OscConfig+0x47c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d118      	bne.n	8007708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076d6:	4b76      	ldr	r3, [pc, #472]	@ (80078b0 <HAL_RCC_OscConfig+0x47c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a75      	ldr	r2, [pc, #468]	@ (80078b0 <HAL_RCC_OscConfig+0x47c>)
 80076dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076e2:	f7fa fd19 	bl	8002118 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ea:	f7fa fd15 	bl	8002118 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e118      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fc:	4b6c      	ldr	r3, [pc, #432]	@ (80078b0 <HAL_RCC_OscConfig+0x47c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d106      	bne.n	800771e <HAL_RCC_OscConfig+0x2ea>
 8007710:	4b66      	ldr	r3, [pc, #408]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007714:	4a65      	ldr	r2, [pc, #404]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	6713      	str	r3, [r2, #112]	@ 0x70
 800771c:	e01c      	b.n	8007758 <HAL_RCC_OscConfig+0x324>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b05      	cmp	r3, #5
 8007724:	d10c      	bne.n	8007740 <HAL_RCC_OscConfig+0x30c>
 8007726:	4b61      	ldr	r3, [pc, #388]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772a:	4a60      	ldr	r2, [pc, #384]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 800772c:	f043 0304 	orr.w	r3, r3, #4
 8007730:	6713      	str	r3, [r2, #112]	@ 0x70
 8007732:	4b5e      	ldr	r3, [pc, #376]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007736:	4a5d      	ldr	r2, [pc, #372]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	6713      	str	r3, [r2, #112]	@ 0x70
 800773e:	e00b      	b.n	8007758 <HAL_RCC_OscConfig+0x324>
 8007740:	4b5a      	ldr	r3, [pc, #360]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007744:	4a59      	ldr	r2, [pc, #356]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	6713      	str	r3, [r2, #112]	@ 0x70
 800774c:	4b57      	ldr	r3, [pc, #348]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 800774e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007750:	4a56      	ldr	r2, [pc, #344]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007752:	f023 0304 	bic.w	r3, r3, #4
 8007756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d015      	beq.n	800778c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007760:	f7fa fcda 	bl	8002118 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007766:	e00a      	b.n	800777e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007768:	f7fa fcd6 	bl	8002118 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e0d7      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800777e:	4b4b      	ldr	r3, [pc, #300]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0ee      	beq.n	8007768 <HAL_RCC_OscConfig+0x334>
 800778a:	e014      	b.n	80077b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778c:	f7fa fcc4 	bl	8002118 <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007792:	e00a      	b.n	80077aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007794:	f7fa fcc0 	bl	8002118 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e0c1      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077aa:	4b40      	ldr	r3, [pc, #256]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1ee      	bne.n	8007794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d105      	bne.n	80077c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077bc:	4b3b      	ldr	r3, [pc, #236]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	4a3a      	ldr	r2, [pc, #232]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80077c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80ad 	beq.w	800792c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077d2:	4b36      	ldr	r3, [pc, #216]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d060      	beq.n	80078a0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d145      	bne.n	8007872 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077e6:	4b33      	ldr	r3, [pc, #204]	@ (80078b4 <HAL_RCC_OscConfig+0x480>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fa fc94 	bl	8002118 <HAL_GetTick>
 80077f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077f2:	e008      	b.n	8007806 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077f4:	f7fa fc90 	bl	8002118 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e093      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007806:	4b29      	ldr	r3, [pc, #164]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f0      	bne.n	80077f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69da      	ldr	r2, [r3, #28]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007820:	019b      	lsls	r3, r3, #6
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	3b01      	subs	r3, #1
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007834:	061b      	lsls	r3, r3, #24
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	071b      	lsls	r3, r3, #28
 800783e:	491b      	ldr	r1, [pc, #108]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007840:	4313      	orrs	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007844:	4b1b      	ldr	r3, [pc, #108]	@ (80078b4 <HAL_RCC_OscConfig+0x480>)
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784a:	f7fa fc65 	bl	8002118 <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007850:	e008      	b.n	8007864 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007852:	f7fa fc61 	bl	8002118 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e064      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007864:	4b11      	ldr	r3, [pc, #68]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <HAL_RCC_OscConfig+0x41e>
 8007870:	e05c      	b.n	800792c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007872:	4b10      	ldr	r3, [pc, #64]	@ (80078b4 <HAL_RCC_OscConfig+0x480>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007878:	f7fa fc4e 	bl	8002118 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007880:	f7fa fc4a 	bl	8002118 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e04d      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_RCC_OscConfig+0x478>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f0      	bne.n	8007880 <HAL_RCC_OscConfig+0x44c>
 800789e:	e045      	b.n	800792c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d107      	bne.n	80078b8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e040      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
 80078ac:	40023800 	.word	0x40023800
 80078b0:	40007000 	.word	0x40007000
 80078b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007938 <HAL_RCC_OscConfig+0x504>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d030      	beq.n	8007928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d129      	bne.n	8007928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078de:	429a      	cmp	r2, r3
 80078e0:	d122      	bne.n	8007928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80078e8:	4013      	ands	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d119      	bne.n	8007928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	3b01      	subs	r3, #1
 8007902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007904:	429a      	cmp	r2, r3
 8007906:	d10f      	bne.n	8007928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007914:	429a      	cmp	r2, r3
 8007916:	d107      	bne.n	8007928 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007922:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007924:	429a      	cmp	r2, r3
 8007926:	d001      	beq.n	800792c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40023800 	.word	0x40023800

0800793c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e10c      	b.n	8007b78 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fa f9c4 	bl	8001d00 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f903 	bl	8007b8c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f938 	bl	8007bfc <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d030      	beq.n	80079f6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f957 	bl	8007c48 <SAI_GetInputClock>
 800799a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	025b      	lsls	r3, r3, #9
 80079ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b2:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4a72      	ldr	r2, [pc, #456]	@ (8007b80 <HAL_SAI_Init+0x244>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	08da      	lsrs	r2, r3, #3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007b80 <HAL_SAI_Init+0x244>)
 80079c6:	fba3 2301 	umull	r2, r3, r3, r1
 80079ca:	08da      	lsrs	r2, r3, #3
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	1aca      	subs	r2, r1, r3
 80079d6:	2a08      	cmp	r2, #8
 80079d8:	d904      	bls.n	80079e4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d104      	bne.n	80079f6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	085a      	lsrs	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_SAI_Init+0xca>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d109      	bne.n	8007a1a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_SAI_Init+0xd6>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e001      	b.n	8007a16 <HAL_SAI_Init+0xda>
 8007a12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e008      	b.n	8007a2c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d102      	bne.n	8007a28 <HAL_SAI_Init+0xec>
 8007a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a26:	e000      	b.n	8007a2a <HAL_SAI_Init+0xee>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d811      	bhi.n	8007a58 <HAL_SAI_Init+0x11c>
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d20b      	bcs.n	8007a50 <HAL_SAI_Init+0x114>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_SAI_Init+0x106>
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d003      	beq.n	8007a48 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007a40:	e00a      	b.n	8007a58 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	613b      	str	r3, [r7, #16]
    break;
 8007a46:	e008      	b.n	8007a5a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a4c:	613b      	str	r3, [r7, #16]
    break;
 8007a4e:	e004      	b.n	8007a5a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a54:	613b      	str	r3, [r7, #16]
    break;
 8007a56:	e000      	b.n	8007a5a <HAL_SAI_Init+0x11e>
      break;
 8007a58:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b47      	ldr	r3, [pc, #284]	@ (8007b84 <HAL_SAI_Init+0x248>)
 8007a66:	400b      	ands	r3, r1
 8007a68:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a78:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a7e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a84:	431a      	orrs	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007a92:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a9e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	051b      	lsls	r3, r3, #20
 8007aa6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007abe:	f023 030f 	bic.w	r3, r3, #15
 8007ac2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6859      	ldr	r1, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6899      	ldr	r1, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	4b26      	ldr	r3, [pc, #152]	@ (8007b88 <HAL_SAI_Init+0x24c>)
 8007aee:	400b      	ands	r3, r1
 8007af0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6899      	ldr	r1, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007b08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007b0e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b14:	3b01      	subs	r3, #1
 8007b16:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b18:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68d9      	ldr	r1, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007b30:	400b      	ands	r3, r1
 8007b32:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68d9      	ldr	r1, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b42:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b48:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007b4a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b50:	3b01      	subs	r3, #1
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	cccccccd 	.word	0xcccccccd
 8007b84:	ff05c010 	.word	0xff05c010
 8007b88:	fff88000 	.word	0xfff88000

08007b8c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007b94:	4b17      	ldr	r3, [pc, #92]	@ (8007bf4 <SAI_Disable+0x68>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a17      	ldr	r2, [pc, #92]	@ (8007bf8 <SAI_Disable+0x6c>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	0b1b      	lsrs	r3, r3, #12
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007bb6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	1e5a      	subs	r2, r3, #1
 8007bbc:	60fa      	str	r2, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd6:	e006      	b.n	8007be6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e8      	bne.n	8007bb8 <SAI_Disable+0x2c>

  return status;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20000000 	.word	0x20000000
 8007bf8:	95cbec1b 	.word	0x95cbec1b

08007bfc <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d00c      	beq.n	8007c26 <SAI_BlockSynchroConfig+0x2a>
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d80d      	bhi.n	8007c2c <SAI_BlockSynchroConfig+0x30>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <SAI_BlockSynchroConfig+0x1e>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d003      	beq.n	8007c20 <SAI_BlockSynchroConfig+0x24>
 8007c18:	e008      	b.n	8007c2c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
      break;
 8007c1e:	e008      	b.n	8007c32 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c20:	2310      	movs	r3, #16
 8007c22:	60fb      	str	r3, [r7, #12]
      break;
 8007c24:	e005      	b.n	8007c32 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c26:	2320      	movs	r3, #32
 8007c28:	60fb      	str	r3, [r7, #12]
      break;
 8007c2a:	e002      	b.n	8007c32 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
      break;
 8007c30:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007c32:	4a04      	ldr	r2, [pc, #16]	@ (8007c44 <SAI_BlockSynchroConfig+0x48>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40015800 	.word	0x40015800

08007c48 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a46      	ldr	r2, [pc, #280]	@ (8007d7c <SAI_GetInputClock+0x134>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10b      	bne.n	8007c7e <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007c66:	4b46      	ldr	r3, [pc, #280]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	4942      	ldr	r1, [pc, #264]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007c7c:	e00b      	b.n	8007c96 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007c7e:	4b40      	ldr	r3, [pc, #256]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	493c      	ldr	r1, [pc, #240]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c96:	4b3a      	ldr	r3, [pc, #232]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d108      	bne.n	8007cb4 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ca2:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007caa:	4a36      	ldr	r2, [pc, #216]	@ (8007d84 <SAI_GetInputClock+0x13c>)
 8007cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	e007      	b.n	8007cc4 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007cb4:	4b32      	ldr	r3, [pc, #200]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cbc:	4a32      	ldr	r2, [pc, #200]	@ (8007d88 <SAI_GetInputClock+0x140>)
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d121      	bne.n	8007d10 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd2:	0e1b      	lsrs	r3, r3, #24
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007cda:	4b29      	ldr	r3, [pc, #164]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce0:	099b      	lsrs	r3, r3, #6
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	fb03 f202 	mul.w	r2, r3, r2
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007cf4:	4b22      	ldr	r3, [pc, #136]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cfa:	0a1b      	lsrs	r3, r3, #8
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	3301      	adds	r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e02d      	b.n	8007d6c <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d18:	d120      	bne.n	8007d5c <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007d1a:	4b19      	ldr	r3, [pc, #100]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d20:	0e1b      	lsrs	r3, r3, #24
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007d28:	4b15      	ldr	r3, [pc, #84]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d2e:	099b      	lsrs	r3, r3, #6
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	fb03 f202 	mul.w	r2, r3, r2
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007d42:	4b0f      	ldr	r3, [pc, #60]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	e007      	b.n	8007d6c <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007d5c:	4b08      	ldr	r3, [pc, #32]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	4a07      	ldr	r2, [pc, #28]	@ (8007d80 <SAI_GetInputClock+0x138>)
 8007d62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d66:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007d68:	4b08      	ldr	r3, [pc, #32]	@ (8007d8c <SAI_GetInputClock+0x144>)
 8007d6a:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007d6c:	697b      	ldr	r3, [r7, #20]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40015804 	.word	0x40015804
 8007d80:	40023800 	.word	0x40023800
 8007d84:	00f42400 	.word	0x00f42400
 8007d88:	007a1200 	.word	0x007a1200
 8007d8c:	00bb8000 	.word	0x00bb8000

08007d90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e022      	b.n	8007de8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d105      	bne.n	8007dba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7f9 fd61 	bl	800187c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f814 	bl	8007df0 <HAL_SD_InitCard>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e00a      	b.n	8007de8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007df0:	b5b0      	push	{r4, r5, r7, lr}
 8007df2:	b08e      	sub	sp, #56	@ 0x38
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007e0c:	2376      	movs	r3, #118	@ 0x76
 8007e0e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681d      	ldr	r5, [r3, #0]
 8007e14:	466c      	mov	r4, sp
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f002 fa01 	bl	800a230 <SDIO_Init>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e04f      	b.n	8007ee0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007e40:	4b29      	ldr	r3, [pc, #164]	@ (8007ee8 <HAL_SD_InitCard+0xf8>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f002 fa39 	bl	800a2c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007e50:	4b25      	ldr	r3, [pc, #148]	@ (8007ee8 <HAL_SD_InitCard+0xf8>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007e56:	2002      	movs	r0, #2
 8007e58:	f7fa f96a 	bl	8002130 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f857 	bl	8008f10 <SD_PowerON>
 8007e62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e02e      	b.n	8007ee0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ff76 	bl	8008d74 <SD_InitCard>
 8007e88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e01b      	b.n	8007ee0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f002 fa98 	bl	800a3e6 <SDMMC_CmdBlockLength>
 8007eb6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00f      	beq.n	8007ede <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8007eec <HAL_SD_InitCard+0xfc>)
 8007ec4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3728      	adds	r7, #40	@ 0x28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee8:	422580a0 	.word	0x422580a0
 8007eec:	004005ff 	.word	0x004005ff

08007ef0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b092      	sub	sp, #72	@ 0x48
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007efe:	f7fa f90b 	bl	8002118 <HAL_GetTick>
 8007f02:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e1bd      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	f040 81b0 	bne.w	8008290 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	441a      	add	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d907      	bls.n	8007f54 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f48:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e1a4      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2203      	movs	r2, #3
 8007f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2200      	movs	r2, #0
 8007f62:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d002      	beq.n	8007f72 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6e:	025b      	lsls	r3, r3, #9
 8007f70:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f72:	f04f 33ff 	mov.w	r3, #4294967295
 8007f76:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	025b      	lsls	r3, r3, #9
 8007f7c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007f7e:	2390      	movs	r3, #144	@ 0x90
 8007f80:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f82:	2302      	movs	r3, #2
 8007f84:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f107 0214 	add.w	r2, r7, #20
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 f9f8 	bl	800a38e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d90a      	bls.n	8007fba <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f002 fa5c 	bl	800a46e <SDMMC_CmdReadMultiBlock>
 8007fb6:	6478      	str	r0, [r7, #68]	@ 0x44
 8007fb8:	e009      	b.n	8007fce <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f002 fa2f 	bl	800a42a <SDMMC_CmdReadSingleBlock>
 8007fcc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d012      	beq.n	8007ffa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80081c4 <HAL_SD_ReadBlocks+0x2d4>)
 8007fda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e151      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007ffe:	e061      	b.n	80080c4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d03c      	beq.n	8008088 <HAL_SD_ReadBlocks+0x198>
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d039      	beq.n	8008088 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008014:	2300      	movs	r3, #0
 8008016:	643b      	str	r3, [r7, #64]	@ 0x40
 8008018:	e033      	b.n	8008082 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f002 f931 	bl	800a286 <SDIO_ReadFIFO>
 8008024:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008028:	b2da      	uxtb	r2, r3
 800802a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800802e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008030:	3301      	adds	r3, #1
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008036:	3b01      	subs	r3, #1
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800803a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	b2da      	uxtb	r2, r3
 8008040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008042:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008046:	3301      	adds	r3, #1
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804c:	3b01      	subs	r3, #1
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	b2da      	uxtb	r2, r3
 8008056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008058:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800805a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805c:	3301      	adds	r3, #1
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008062:	3b01      	subs	r3, #1
 8008064:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	0e1b      	lsrs	r3, r3, #24
 800806a:	b2da      	uxtb	r2, r3
 800806c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008072:	3301      	adds	r3, #1
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008078:	3b01      	subs	r3, #1
 800807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800807c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800807e:	3301      	adds	r3, #1
 8008080:	643b      	str	r3, [r7, #64]	@ 0x40
 8008082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008084:	2b07      	cmp	r3, #7
 8008086:	d9c8      	bls.n	800801a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008088:	f7fa f846 	bl	8002118 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008094:	429a      	cmp	r2, r3
 8008096:	d902      	bls.n	800809e <HAL_SD_ReadBlocks+0x1ae>
 8008098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d112      	bne.n	80080c4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a48      	ldr	r2, [pc, #288]	@ (80081c4 <HAL_SD_ReadBlocks+0x2d4>)
 80080a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e0ec      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ca:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d096      	beq.n	8008000 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d022      	beq.n	8008126 <HAL_SD_ReadBlocks+0x236>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d91f      	bls.n	8008126 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d01b      	beq.n	8008126 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f002 fa22 	bl	800a53c <SDMMC_CmdStopTransfer>
 80080f8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80080fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d012      	beq.n	8008126 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2f      	ldr	r2, [pc, #188]	@ (80081c4 <HAL_SD_ReadBlocks+0x2d4>)
 8008106:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800810c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800810e:	431a      	orrs	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e0bb      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d012      	beq.n	800815a <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a22      	ldr	r2, [pc, #136]	@ (80081c4 <HAL_SD_ReadBlocks+0x2d4>)
 800813a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008140:	f043 0208 	orr.w	r2, r3, #8
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e0a1      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d012      	beq.n	800818e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a15      	ldr	r2, [pc, #84]	@ (80081c4 <HAL_SD_ReadBlocks+0x2d4>)
 800816e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008174:	f043 0202 	orr.w	r2, r3, #2
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e087      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d064      	beq.n	8008266 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a08      	ldr	r2, [pc, #32]	@ (80081c4 <HAL_SD_ReadBlocks+0x2d4>)
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a8:	f043 0220 	orr.w	r2, r3, #32
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e06d      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
 80081c2:	bf00      	nop
 80081c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f002 f85a 	bl	800a286 <SDIO_ReadFIFO>
 80081d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80081dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081de:	3301      	adds	r3, #1
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80081e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e4:	3b01      	subs	r3, #1
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80081f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f4:	3301      	adds	r3, #1
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80081f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fa:	3b01      	subs	r3, #1
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	b2da      	uxtb	r2, r3
 8008204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008206:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820a:	3301      	adds	r3, #1
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800820e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008210:	3b01      	subs	r3, #1
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008216:	0e1b      	lsrs	r3, r3, #24
 8008218:	b2da      	uxtb	r2, r3
 800821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800821e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008220:	3301      	adds	r3, #1
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008226:	3b01      	subs	r3, #1
 8008228:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800822a:	f7f9 ff75 	bl	8002118 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008236:	429a      	cmp	r2, r3
 8008238:	d902      	bls.n	8008240 <HAL_SD_ReadBlocks+0x350>
 800823a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800823c:	2b00      	cmp	r3, #0
 800823e:	d112      	bne.n	8008266 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a18      	ldr	r2, [pc, #96]	@ (80082a8 <HAL_SD_ReadBlocks+0x3b8>)
 8008246:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e01b      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <HAL_SD_ReadBlocks+0x38a>
 8008274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1a6      	bne.n	80081c8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008282:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	e006      	b.n	800829e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
  }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3748      	adds	r7, #72	@ 0x48
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	004005ff 	.word	0x004005ff

080082ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b092      	sub	sp, #72	@ 0x48
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082ba:	f7f9 ff2d 	bl	8002118 <HAL_GetTick>
 80082be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d107      	bne.n	80082de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e165      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	f040 8158 	bne.w	800859c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d907      	bls.n	8008310 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008304:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e14c      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2203      	movs	r2, #3
 8008314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2200      	movs	r2, #0
 800831e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008324:	2b01      	cmp	r3, #1
 8008326:	d002      	beq.n	800832e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	025b      	lsls	r3, r3, #9
 800832c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800832e:	f04f 33ff 	mov.w	r3, #4294967295
 8008332:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	025b      	lsls	r3, r3, #9
 8008338:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800833a:	2390      	movs	r3, #144	@ 0x90
 800833c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800833e:	2300      	movs	r3, #0
 8008340:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008342:	2300      	movs	r3, #0
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008346:	2301      	movs	r3, #1
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f107 0218 	add.w	r2, r7, #24
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f002 f81a 	bl	800a38e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d90a      	bls.n	8008376 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2220      	movs	r2, #32
 8008364:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800836c:	4618      	mov	r0, r3
 800836e:	f002 f8c2 	bl	800a4f6 <SDMMC_CmdWriteMultiBlock>
 8008372:	6478      	str	r0, [r7, #68]	@ 0x44
 8008374:	e009      	b.n	800838a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2210      	movs	r2, #16
 800837a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008382:	4618      	mov	r0, r3
 8008384:	f002 f895 	bl	800a4b2 <SDMMC_CmdWriteSingleBlock>
 8008388:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800838a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800838c:	2b00      	cmp	r3, #0
 800838e:	d012      	beq.n	80083b6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a87      	ldr	r2, [pc, #540]	@ (80085b4 <HAL_SD_WriteBlocks+0x308>)
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800839e:	431a      	orrs	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e0f9      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80083ba:	e065      	b.n	8008488 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d040      	beq.n	800844c <HAL_SD_WriteBlocks+0x1a0>
 80083ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d03d      	beq.n	800844c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083d4:	e037      	b.n	8008446 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80083d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80083dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083de:	3301      	adds	r3, #1
 80083e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80083e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e4:	3b01      	subs	r3, #1
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80083e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	021a      	lsls	r2, r3, #8
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80083f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f6:	3301      	adds	r3, #1
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80083fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fc:	3b01      	subs	r3, #1
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	041a      	lsls	r2, r3, #16
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	3301      	adds	r3, #1
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008414:	3b01      	subs	r3, #1
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	061a      	lsls	r2, r3, #24
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	3301      	adds	r3, #1
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800842a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800842c:	3b01      	subs	r3, #1
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f107 0214 	add.w	r2, r7, #20
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f001 ff30 	bl	800a2a0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008442:	3301      	adds	r3, #1
 8008444:	643b      	str	r3, [r7, #64]	@ 0x40
 8008446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008448:	2b07      	cmp	r3, #7
 800844a:	d9c4      	bls.n	80083d6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800844c:	f7f9 fe64 	bl	8002118 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008458:	429a      	cmp	r2, r3
 800845a:	d902      	bls.n	8008462 <HAL_SD_WriteBlocks+0x1b6>
 800845c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800845e:	2b00      	cmp	r3, #0
 8008460:	d112      	bne.n	8008488 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a53      	ldr	r2, [pc, #332]	@ (80085b4 <HAL_SD_WriteBlocks+0x308>)
 8008468:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800846e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008470:	431a      	orrs	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e090      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008492:	2b00      	cmp	r3, #0
 8008494:	d092      	beq.n	80083bc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d022      	beq.n	80084ea <HAL_SD_WriteBlocks+0x23e>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d91f      	bls.n	80084ea <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d01b      	beq.n	80084ea <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f002 f840 	bl	800a53c <SDMMC_CmdStopTransfer>
 80084bc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80084be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d012      	beq.n	80084ea <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a3a      	ldr	r2, [pc, #232]	@ (80085b4 <HAL_SD_WriteBlocks+0x308>)
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d2:	431a      	orrs	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e05f      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d012      	beq.n	800851e <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2d      	ldr	r2, [pc, #180]	@ (80085b4 <HAL_SD_WriteBlocks+0x308>)
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	f043 0208 	orr.w	r2, r3, #8
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e045      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d012      	beq.n	8008552 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a20      	ldr	r2, [pc, #128]	@ (80085b4 <HAL_SD_WriteBlocks+0x308>)
 8008532:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008538:	f043 0202 	orr.w	r2, r3, #2
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e02b      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008558:	f003 0310 	and.w	r3, r3, #16
 800855c:	2b00      	cmp	r3, #0
 800855e:	d012      	beq.n	8008586 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a13      	ldr	r2, [pc, #76]	@ (80085b4 <HAL_SD_WriteBlocks+0x308>)
 8008566:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856c:	f043 0210 	orr.w	r2, r3, #16
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e011      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800858e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	e006      	b.n	80085aa <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
  }
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3748      	adds	r7, #72	@ 0x48
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	004005ff 	.word	0x004005ff

080085b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d008      	beq.n	80085e6 <HAL_SD_IRQHandler+0x2e>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fd4c 	bl	800907c <SD_Read_IT>
 80085e4:	e155      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 808f 	beq.w	8008714 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085fe:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800860e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008612:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0201 	bic.w	r2, r2, #1
 8008622:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d039      	beq.n	80086a2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_SD_IRQHandler+0x8a>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d011      	beq.n	8008666 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f001 ff78 	bl	800a53c <SDMMC_CmdStopTransfer>
 800864c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d008      	beq.n	8008666 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f91f 	bl	80088a4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <HAL_SD_IRQHandler+0xda>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f003 fd00 	bl	800c098 <HAL_SD_RxCpltCallback>
 8008698:	e0fb      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f003 fcf2 	bl	800c084 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80086a0:	e0f7      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80f2 	beq.w	8008892 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d011      	beq.n	80086dc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 ff3d 	bl	800a53c <SDMMC_CmdStopTransfer>
 80086c2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d008      	beq.n	80086dc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8e4 	bl	80088a4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f040 80d5 	bne.w	8008892 <HAL_SD_IRQHandler+0x2da>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 80cf 	bne.w	8008892 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0208 	bic.w	r2, r2, #8
 8008702:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f003 fcb9 	bl	800c084 <HAL_SD_TxCpltCallback>
}
 8008712:	e0be      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <HAL_SD_IRQHandler+0x17c>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fcf6 	bl	800911e <SD_Write_IT>
 8008732:	e0ae      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80a7 	beq.w	8008892 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008756:	f043 0202 	orr.w	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	f043 0208 	orr.w	r2, r3, #8
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	f043 0220 	orr.w	r2, r3, #32
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	f043 0210 	orr.w	r2, r3, #16
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80087b4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80087c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 feb6 	bl	800a53c <SDMMC_CmdStopTransfer>
 80087d0:	4602      	mov	r2, r0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f855 	bl	80088a4 <HAL_SD_ErrorCallback>
}
 80087fa:	e04a      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008802:	2b00      	cmp	r3, #0
 8008804:	d045      	beq.n	8008892 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <HAL_SD_IRQHandler+0x262>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d011      	beq.n	800883e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881e:	4a1f      	ldr	r2, [pc, #124]	@ (800889c <HAL_SD_IRQHandler+0x2e4>)
 8008820:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008826:	4618      	mov	r0, r3
 8008828:	f7f9 fe52 	bl	80024d0 <HAL_DMA_Abort_IT>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d02f      	beq.n	8008892 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fa2e 	bl	8008c98 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800883c:	e029      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <HAL_SD_IRQHandler+0x29a>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d011      	beq.n	8008876 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	4a12      	ldr	r2, [pc, #72]	@ (80088a0 <HAL_SD_IRQHandler+0x2e8>)
 8008858:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885e:	4618      	mov	r0, r3
 8008860:	f7f9 fe36 	bl	80024d0 <HAL_DMA_Abort_IT>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d013      	beq.n	8008892 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fa49 	bl	8008d06 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008874:	e00d      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f003 fbf0 	bl	800c070 <HAL_SD_AbortCallback>
}
 8008890:	e7ff      	b.n	8008892 <HAL_SD_IRQHandler+0x2da>
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	08008c99 	.word	0x08008c99
 80088a0:	08008d07 	.word	0x08008d07

080088a4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c6:	0f9b      	lsrs	r3, r3, #30
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d2:	0e9b      	lsrs	r3, r3, #26
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0303 	and.w	r3, r3, #3
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	b2da      	uxtb	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800890e:	b2da      	uxtb	r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008918:	0d1b      	lsrs	r3, r3, #20
 800891a:	b29a      	uxth	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 030f 	and.w	r3, r3, #15
 800892c:	b2da      	uxtb	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008936:	0bdb      	lsrs	r3, r3, #15
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008948:	0b9b      	lsrs	r3, r3, #14
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800895a:	0b5b      	lsrs	r3, r3, #13
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	b2da      	uxtb	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896c:	0b1b      	lsrs	r3, r3, #12
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	b2da      	uxtb	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008984:	2b00      	cmp	r3, #0
 8008986:	d163      	bne.n	8008a50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800898c:	009a      	lsls	r2, r3, #2
 800898e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008992:	4013      	ands	r3, r2
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008998:	0f92      	lsrs	r2, r2, #30
 800899a:	431a      	orrs	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089a4:	0edb      	lsrs	r3, r3, #27
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b6:	0e1b      	lsrs	r3, r3, #24
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089c8:	0d5b      	lsrs	r3, r3, #21
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089da:	0c9b      	lsrs	r3, r3, #18
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ec:	0bdb      	lsrs	r3, r3, #15
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	7e1b      	ldrb	r3, [r3, #24]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	3302      	adds	r3, #2
 8008a10:	2201      	movs	r2, #1
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008a1a:	fb03 f202 	mul.w	r2, r3, r2
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	7a1b      	ldrb	r3, [r3, #8]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	409a      	lsls	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008a3c:	0a52      	lsrs	r2, r2, #9
 8008a3e:	fb03 f202 	mul.w	r2, r3, r2
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008a4e:	e031      	b.n	8008ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d11d      	bne.n	8008a94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a66:	0c1b      	lsrs	r3, r3, #16
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	3301      	adds	r3, #1
 8008a74:	029a      	lsls	r2, r3, #10
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a88:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
 8008a92:	e00f      	b.n	8008ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a58      	ldr	r2, [pc, #352]	@ (8008bfc <HAL_SD_GetCardCSD+0x344>)
 8008a9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e09d      	b.n	8008bf0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab8:	0b9b      	lsrs	r3, r3, #14
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aca:	09db      	lsrs	r3, r3, #7
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aec:	0fdb      	lsrs	r3, r3, #31
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af8:	0f5b      	lsrs	r3, r3, #29
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b0a:	0e9b      	lsrs	r3, r3, #26
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1c:	0d9b      	lsrs	r3, r3, #22
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b2e:	0d5b      	lsrs	r3, r3, #21
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5e:	0bdb      	lsrs	r3, r3, #15
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b72:	0b9b      	lsrs	r3, r3, #14
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b86:	0b5b      	lsrs	r3, r3, #13
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b9a:	0b1b      	lsrs	r3, r3, #12
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bae:	0a9b      	lsrs	r3, r3, #10
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd6:	085b      	lsrs	r3, r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	004005ff 	.word	0x004005ff

08008c00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c64:	f107 030c 	add.w	r3, r7, #12
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9de 	bl	800902c <SD_SendStatus>
 8008c70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	0a5b      	lsrs	r3, r3, #9
 8008c88:	f003 030f 	and.w	r3, r3, #15
 8008c8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c8e:	693b      	ldr	r3, [r7, #16]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008cae:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff ffd1 	bl	8008c58 <HAL_SD_GetCardState>
 8008cb6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b06      	cmp	r3, #6
 8008cca:	d002      	beq.n	8008cd2 <SD_DMATxAbort+0x3a>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d10a      	bne.n	8008ce8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fc30 	bl	800a53c <SDMMC_CmdStopTransfer>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d103      	bne.n	8008cf8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f003 f9bd 	bl	800c070 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008cf6:	e002      	b.n	8008cfe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff fdd3 	bl	80088a4 <HAL_SD_ErrorCallback>
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d12:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008d1c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff ff9a 	bl	8008c58 <HAL_SD_GetCardState>
 8008d24:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2b06      	cmp	r3, #6
 8008d38:	d002      	beq.n	8008d40 <SD_DMARxAbort+0x3a>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b05      	cmp	r3, #5
 8008d3e:	d10a      	bne.n	8008d56 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 fbf9 	bl	800a53c <SDMMC_CmdStopTransfer>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d50:	431a      	orrs	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f003 f986 	bl	800c070 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008d64:	e002      	b.n	8008d6c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fd9c 	bl	80088a4 <HAL_SD_ErrorCallback>
}
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d74:	b5b0      	push	{r4, r5, r7, lr}
 8008d76:	b094      	sub	sp, #80	@ 0x50
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 faaa 	bl	800a2de <SDIO_GetPowerState>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d90:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008d94:	e0b8      	b.n	8008f08 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d02f      	beq.n	8008dfe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 fc91 	bl	800a6ca <SDMMC_CmdSendCID>
 8008da8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db2:	e0a9      	b.n	8008f08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 fad4 	bl	800a368 <SDIO_GetResponse>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2104      	movs	r1, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 facb 	bl	800a368 <SDIO_GetResponse>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2108      	movs	r1, #8
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 fac2 	bl	800a368 <SDIO_GetResponse>
 8008de4:	4602      	mov	r2, r0
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	210c      	movs	r1, #12
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 fab9 	bl	800a368 <SDIO_GetResponse>
 8008df6:	4602      	mov	r2, r0
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d00d      	beq.n	8008e22 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f107 020e 	add.w	r2, r7, #14
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 fc97 	bl	800a744 <SDMMC_CmdSetRelAdd>
 8008e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <SD_InitCard+0xae>
    {
      return errorstate;
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e20:	e072      	b.n	8008f08 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d036      	beq.n	8008e98 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e2a:	89fb      	ldrh	r3, [r7, #14]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f001 fc61 	bl	800a706 <SDMMC_CmdSendCSD>
 8008e44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4e:	e05b      	b.n	8008f08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f001 fa86 	bl	800a368 <SDIO_GetResponse>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2104      	movs	r1, #4
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 fa7d 	bl	800a368 <SDIO_GetResponse>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2108      	movs	r1, #8
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f001 fa74 	bl	800a368 <SDIO_GetResponse>
 8008e80:	4602      	mov	r2, r0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	210c      	movs	r1, #12
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 fa6b 	bl	800a368 <SDIO_GetResponse>
 8008e92:	4602      	mov	r2, r0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fa62 	bl	800a368 <SDIO_GetResponse>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	0d1a      	lsrs	r2, r3, #20
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008eac:	f107 0310 	add.w	r3, r7, #16
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fd00 	bl	80088b8 <HAL_SD_GetCardCSD>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ebe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008ec2:	e021      	b.n	8008f08 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6819      	ldr	r1, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ecc:	041b      	lsls	r3, r3, #16
 8008ece:	2200      	movs	r2, #0
 8008ed0:	461c      	mov	r4, r3
 8008ed2:	4615      	mov	r5, r2
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	4608      	mov	r0, r1
 8008eda:	f001 fb51 	bl	800a580 <SDMMC_CmdSelDesel>
 8008ede:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <SD_InitCard+0x176>
  {
    return errorstate;
 8008ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee8:	e00e      	b.n	8008f08 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681d      	ldr	r5, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	466c      	mov	r4, sp
 8008ef2:	f103 0210 	add.w	r2, r3, #16
 8008ef6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008efc:	3304      	adds	r3, #4
 8008efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f00:	4628      	mov	r0, r5
 8008f02:	f001 f995 	bl	800a230 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3740      	adds	r7, #64	@ 0x40
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bdb0      	pop	{r4, r5, r7, pc}

08008f10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 fb4c 	bl	800a5c6 <SDMMC_CmdGoIdleState>
 8008f2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	e072      	b.n	8009020 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 fb5f 	bl	800a602 <SDMMC_CmdOperCond>
 8008f44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00d      	beq.n	8008f68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 fb35 	bl	800a5c6 <SDMMC_CmdGoIdleState>
 8008f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	e05b      	b.n	8009020 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d137      	bne.n	8008fe6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 fb5f 	bl	800a640 <SDMMC_CmdAppCommand>
 8008f82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d02d      	beq.n	8008fe6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008f8e:	e047      	b.n	8009020 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 fb52 	bl	800a640 <SDMMC_CmdAppCommand>
 8008f9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	e03b      	b.n	8009020 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	491e      	ldr	r1, [pc, #120]	@ (8009028 <SD_PowerON+0x118>)
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fb68 	bl	800a684 <SDMMC_CmdAppOperCommand>
 8008fb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fbc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008fc0:	e02e      	b.n	8009020 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 f9cd 	bl	800a368 <SDIO_GetResponse>
 8008fce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	0fdb      	lsrs	r3, r3, #31
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <SD_PowerON+0xcc>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <SD_PowerON+0xce>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]

    count++;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d802      	bhi.n	8008ff6 <SD_PowerON+0xe6>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0cc      	beq.n	8008f90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d902      	bls.n	8009006 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009004:	e00c      	b.n	8009020 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	645a      	str	r2, [r3, #68]	@ 0x44
 8009016:	e002      	b.n	800901e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	c1100000 	.word	0xc1100000

0800902c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800903c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009040:	e018      	b.n	8009074 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f001 fb99 	bl	800a786 <SDMMC_CmdSendStatus>
 8009054:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <SD_SendStatus+0x34>
  {
    return errorstate;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	e009      	b.n	8009074 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f97e 	bl	800a368 <SDIO_GetResponse>
 800906c:	4602      	mov	r2, r0
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d03f      	beq.n	8009116 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	e033      	b.n	8009104 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f001 f8f0 	bl	800a286 <SDIO_ReadFIFO>
 80090a6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3301      	adds	r3, #1
 80090b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	0c1b      	lsrs	r3, r3, #16
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	0e1b      	lsrs	r3, r3, #24
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	3301      	adds	r3, #1
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b07      	cmp	r3, #7
 8009108:	d9c8      	bls.n	800909c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009116:	bf00      	nop
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009130:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d043      	beq.n	80091c0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009138:	2300      	movs	r3, #0
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e037      	b.n	80091ae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3b01      	subs	r3, #1
 800914e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	021a      	lsls	r2, r3, #8
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4313      	orrs	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	3b01      	subs	r3, #1
 8009166:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	041a      	lsls	r2, r3, #16
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	4313      	orrs	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	061a      	lsls	r2, r3, #24
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4313      	orrs	r3, r2
 800918a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3b01      	subs	r3, #1
 8009196:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f107 0208 	add.w	r2, r7, #8
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 f87c 	bl	800a2a0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3301      	adds	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b07      	cmp	r3, #7
 80091b2:	d9c4      	bls.n	800913e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80091c0:	bf00      	nop
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e025      	b.n	8009228 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f8 fd7b 	bl	8001cec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2202      	movs	r2, #2
 80091fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f000 ff4b 	bl	800a0a4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	461a      	mov	r2, r3
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	f000 ffa0 	bl	800a15e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e041      	b.n	80092c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d106      	bne.n	800925c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7f8 fc00 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f000 fa7e 	bl	8009770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d001      	beq.n	80092e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e04e      	b.n	8009386 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a23      	ldr	r2, [pc, #140]	@ (8009394 <HAL_TIM_Base_Start_IT+0xc4>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d022      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009312:	d01d      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1f      	ldr	r2, [pc, #124]	@ (8009398 <HAL_TIM_Base_Start_IT+0xc8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d018      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1e      	ldr	r2, [pc, #120]	@ (800939c <HAL_TIM_Base_Start_IT+0xcc>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d013      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a1c      	ldr	r2, [pc, #112]	@ (80093a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00e      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a1b      	ldr	r2, [pc, #108]	@ (80093a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d009      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a19      	ldr	r2, [pc, #100]	@ (80093a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d004      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0x80>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a18      	ldr	r2, [pc, #96]	@ (80093ac <HAL_TIM_Base_Start_IT+0xdc>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d111      	bne.n	8009374 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b06      	cmp	r3, #6
 8009360:	d010      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f042 0201 	orr.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009372:	e007      	b.n	8009384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0201 	orr.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40010000 	.word	0x40010000
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40001800 	.word	0x40001800

080093b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d020      	beq.n	8009414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01b      	beq.n	8009414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f06f 0202 	mvn.w	r2, #2
 80093e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f999 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 8009400:	e005      	b.n	800940e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f98b 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f99c 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d020      	beq.n	8009460 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01b      	beq.n	8009460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0204 	mvn.w	r2, #4
 8009430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f973 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 800944c:	e005      	b.n	800945a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f965 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f976 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d020      	beq.n	80094ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01b      	beq.n	80094ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0208 	mvn.w	r2, #8
 800947c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2204      	movs	r2, #4
 8009482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f94d 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 8009498:	e005      	b.n	80094a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f93f 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f950 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 0310 	and.w	r3, r3, #16
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d020      	beq.n	80094f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f003 0310 	and.w	r3, r3, #16
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01b      	beq.n	80094f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f06f 0210 	mvn.w	r2, #16
 80094c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2208      	movs	r2, #8
 80094ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f927 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 80094e4:	e005      	b.n	80094f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f919 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f92a 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00c      	beq.n	800951c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	d007      	beq.n	800951c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f06f 0201 	mvn.w	r2, #1
 8009514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7f7 ffb0 	bl	800147c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00c      	beq.n	8009540 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800952c:	2b00      	cmp	r3, #0
 800952e:	d007      	beq.n	8009540 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fae4 	bl	8009b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d007      	beq.n	8009564 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800955c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f8fb 	bl	800975a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00c      	beq.n	8009588 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f003 0320 	and.w	r3, r3, #32
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f06f 0220 	mvn.w	r2, #32
 8009580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fab6 	bl	8009af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_TIM_ConfigClockSource+0x1c>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e0b4      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x186>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80095ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e4:	d03e      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0xd4>
 80095e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ea:	f200 8087 	bhi.w	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 80095ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f2:	f000 8086 	beq.w	8009702 <HAL_TIM_ConfigClockSource+0x172>
 80095f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095fa:	d87f      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 80095fc:	2b70      	cmp	r3, #112	@ 0x70
 80095fe:	d01a      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0xa6>
 8009600:	2b70      	cmp	r3, #112	@ 0x70
 8009602:	d87b      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 8009604:	2b60      	cmp	r3, #96	@ 0x60
 8009606:	d050      	beq.n	80096aa <HAL_TIM_ConfigClockSource+0x11a>
 8009608:	2b60      	cmp	r3, #96	@ 0x60
 800960a:	d877      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 800960c:	2b50      	cmp	r3, #80	@ 0x50
 800960e:	d03c      	beq.n	800968a <HAL_TIM_ConfigClockSource+0xfa>
 8009610:	2b50      	cmp	r3, #80	@ 0x50
 8009612:	d873      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 8009614:	2b40      	cmp	r3, #64	@ 0x40
 8009616:	d058      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x13a>
 8009618:	2b40      	cmp	r3, #64	@ 0x40
 800961a:	d86f      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 800961c:	2b30      	cmp	r3, #48	@ 0x30
 800961e:	d064      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x15a>
 8009620:	2b30      	cmp	r3, #48	@ 0x30
 8009622:	d86b      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 8009624:	2b20      	cmp	r3, #32
 8009626:	d060      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x15a>
 8009628:	2b20      	cmp	r3, #32
 800962a:	d867      	bhi.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
 800962c:	2b00      	cmp	r3, #0
 800962e:	d05c      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x15a>
 8009630:	2b10      	cmp	r3, #16
 8009632:	d05a      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x15a>
 8009634:	e062      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009646:	f000 f9b9 	bl	80099bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	609a      	str	r2, [r3, #8]
      break;
 8009662:	e04f      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009674:	f000 f9a2 	bl	80099bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009686:	609a      	str	r2, [r3, #8]
      break;
 8009688:	e03c      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009696:	461a      	mov	r2, r3
 8009698:	f000 f916 	bl	80098c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2150      	movs	r1, #80	@ 0x50
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f96f 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 80096a8:	e02c      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096b6:	461a      	mov	r2, r3
 80096b8:	f000 f935 	bl	8009926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2160      	movs	r1, #96	@ 0x60
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f95f 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 80096c8:	e01c      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096d6:	461a      	mov	r2, r3
 80096d8:	f000 f8f6 	bl	80098c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2140      	movs	r1, #64	@ 0x40
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f94f 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 80096e8:	e00c      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f000 f946 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 80096fa:	e003      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009700:	e000      	b.n	8009704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a46      	ldr	r2, [pc, #280]	@ (800989c <TIM_Base_SetConfig+0x12c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d013      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978e:	d00f      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a43      	ldr	r2, [pc, #268]	@ (80098a0 <TIM_Base_SetConfig+0x130>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00b      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a42      	ldr	r2, [pc, #264]	@ (80098a4 <TIM_Base_SetConfig+0x134>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d007      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a41      	ldr	r2, [pc, #260]	@ (80098a8 <TIM_Base_SetConfig+0x138>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a40      	ldr	r2, [pc, #256]	@ (80098ac <TIM_Base_SetConfig+0x13c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d108      	bne.n	80097c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a35      	ldr	r2, [pc, #212]	@ (800989c <TIM_Base_SetConfig+0x12c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d02b      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d0:	d027      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a32      	ldr	r2, [pc, #200]	@ (80098a0 <TIM_Base_SetConfig+0x130>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d023      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a31      	ldr	r2, [pc, #196]	@ (80098a4 <TIM_Base_SetConfig+0x134>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d01f      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a30      	ldr	r2, [pc, #192]	@ (80098a8 <TIM_Base_SetConfig+0x138>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d01b      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2f      	ldr	r2, [pc, #188]	@ (80098ac <TIM_Base_SetConfig+0x13c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d017      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a2e      	ldr	r2, [pc, #184]	@ (80098b0 <TIM_Base_SetConfig+0x140>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d013      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2d      	ldr	r2, [pc, #180]	@ (80098b4 <TIM_Base_SetConfig+0x144>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00f      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a2c      	ldr	r2, [pc, #176]	@ (80098b8 <TIM_Base_SetConfig+0x148>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d00b      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a2b      	ldr	r2, [pc, #172]	@ (80098bc <TIM_Base_SetConfig+0x14c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d007      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2a      	ldr	r2, [pc, #168]	@ (80098c0 <TIM_Base_SetConfig+0x150>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d003      	beq.n	8009822 <TIM_Base_SetConfig+0xb2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a29      	ldr	r2, [pc, #164]	@ (80098c4 <TIM_Base_SetConfig+0x154>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d108      	bne.n	8009834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a10      	ldr	r2, [pc, #64]	@ (800989c <TIM_Base_SetConfig+0x12c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_Base_SetConfig+0xf8>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a12      	ldr	r2, [pc, #72]	@ (80098ac <TIM_Base_SetConfig+0x13c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d103      	bne.n	8009870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b01      	cmp	r3, #1
 8009880:	d105      	bne.n	800988e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	611a      	str	r2, [r3, #16]
  }
}
 800988e:	bf00      	nop
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40010000 	.word	0x40010000
 80098a0:	40000400 	.word	0x40000400
 80098a4:	40000800 	.word	0x40000800
 80098a8:	40000c00 	.word	0x40000c00
 80098ac:	40010400 	.word	0x40010400
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400
 80098b8:	40014800 	.word	0x40014800
 80098bc:	40001800 	.word	0x40001800
 80098c0:	40001c00 	.word	0x40001c00
 80098c4:	40002000 	.word	0x40002000

080098c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	f023 0201 	bic.w	r2, r3, #1
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f023 030a 	bic.w	r3, r3, #10
 8009904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4313      	orrs	r3, r2
 800990c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	621a      	str	r2, [r3, #32]
}
 800991a:	bf00      	nop
 800991c:	371c      	adds	r7, #28
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009926:	b480      	push	{r7}
 8009928:	b087      	sub	sp, #28
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	f023 0210 	bic.w	r2, r3, #16
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	031b      	lsls	r3, r3, #12
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4313      	orrs	r3, r2
 800995a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	4313      	orrs	r3, r2
 800996c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f043 0307 	orr.w	r3, r3, #7
 80099a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	609a      	str	r2, [r3, #8]
}
 80099b0:	bf00      	nop
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	021a      	lsls	r2, r3, #8
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	431a      	orrs	r2, r3
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	609a      	str	r2, [r3, #8]
}
 80099f0:	bf00      	nop
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e05a      	b.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a21      	ldr	r2, [pc, #132]	@ (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d022      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a60:	d01d      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1d      	ldr	r2, [pc, #116]	@ (8009adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d018      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00e      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a18      	ldr	r2, [pc, #96]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d009      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a17      	ldr	r2, [pc, #92]	@ (8009aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d004      	beq.n	8009a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a15      	ldr	r2, [pc, #84]	@ (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d10c      	bne.n	8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000
 8009adc:	40000400 	.word	0x40000400
 8009ae0:	40000800 	.word	0x40000800
 8009ae4:	40000c00 	.word	0x40000c00
 8009ae8:	40010400 	.word	0x40010400
 8009aec:	40014000 	.word	0x40014000
 8009af0:	40001800 	.word	0x40001800

08009af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e042      	b.n	8009bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7f7 ffac 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2224      	movs	r2, #36	@ 0x24
 8009b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f82b 	bl	8009bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695a      	ldr	r2, [r3, #20]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc0:	b0c0      	sub	sp, #256	@ 0x100
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd8:	68d9      	ldr	r1, [r3, #12]
 8009bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	ea40 0301 	orr.w	r3, r0, r1
 8009be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c14:	f021 010c 	bic.w	r1, r1, #12
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c22:	430b      	orrs	r3, r1
 8009c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c36:	6999      	ldr	r1, [r3, #24]
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	ea40 0301 	orr.w	r3, r0, r1
 8009c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	4b8f      	ldr	r3, [pc, #572]	@ (8009e88 <UART_SetConfig+0x2cc>)
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d005      	beq.n	8009c5c <UART_SetConfig+0xa0>
 8009c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b8d      	ldr	r3, [pc, #564]	@ (8009e8c <UART_SetConfig+0x2d0>)
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d104      	bne.n	8009c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c5c:	f7fd f966 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 8009c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c64:	e003      	b.n	8009c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c66:	f7fd f94d 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8009c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c78:	f040 810c 	bne.w	8009e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c8e:	4622      	mov	r2, r4
 8009c90:	462b      	mov	r3, r5
 8009c92:	1891      	adds	r1, r2, r2
 8009c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c96:	415b      	adcs	r3, r3
 8009c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	eb12 0801 	adds.w	r8, r2, r1
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	eb43 0901 	adc.w	r9, r3, r1
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cbe:	4690      	mov	r8, r2
 8009cc0:	4699      	mov	r9, r3
 8009cc2:	4623      	mov	r3, r4
 8009cc4:	eb18 0303 	adds.w	r3, r8, r3
 8009cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ccc:	462b      	mov	r3, r5
 8009cce:	eb49 0303 	adc.w	r3, r9, r3
 8009cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009cea:	460b      	mov	r3, r1
 8009cec:	18db      	adds	r3, r3, r3
 8009cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	eb42 0303 	adc.w	r3, r2, r3
 8009cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d00:	f7f6 fa80 	bl	8000204 <__aeabi_uldivmod>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4b61      	ldr	r3, [pc, #388]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0e:	095b      	lsrs	r3, r3, #5
 8009d10:	011c      	lsls	r4, r3, #4
 8009d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	1891      	adds	r1, r2, r2
 8009d2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d2c:	415b      	adcs	r3, r3
 8009d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d34:	4641      	mov	r1, r8
 8009d36:	eb12 0a01 	adds.w	sl, r2, r1
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d54:	4692      	mov	sl, r2
 8009d56:	469b      	mov	fp, r3
 8009d58:	4643      	mov	r3, r8
 8009d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8009d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d62:	464b      	mov	r3, r9
 8009d64:	eb4b 0303 	adc.w	r3, fp, r3
 8009d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d80:	460b      	mov	r3, r1
 8009d82:	18db      	adds	r3, r3, r3
 8009d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d86:	4613      	mov	r3, r2
 8009d88:	eb42 0303 	adc.w	r3, r2, r3
 8009d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d96:	f7f6 fa35 	bl	8000204 <__aeabi_uldivmod>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4b3b      	ldr	r3, [pc, #236]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009da2:	fba3 2301 	umull	r2, r3, r3, r1
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	2264      	movs	r2, #100	@ 0x64
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	1acb      	subs	r3, r1, r3
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009db6:	4b36      	ldr	r3, [pc, #216]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009db8:	fba3 2302 	umull	r2, r3, r3, r2
 8009dbc:	095b      	lsrs	r3, r3, #5
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009dc4:	441c      	add	r4, r3
 8009dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	1891      	adds	r1, r2, r2
 8009dde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009de0:	415b      	adcs	r3, r3
 8009de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009de8:	4641      	mov	r1, r8
 8009dea:	1851      	adds	r1, r2, r1
 8009dec:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dee:	4649      	mov	r1, r9
 8009df0:	414b      	adcs	r3, r1
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df4:	f04f 0200 	mov.w	r2, #0
 8009df8:	f04f 0300 	mov.w	r3, #0
 8009dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e00:	4659      	mov	r1, fp
 8009e02:	00cb      	lsls	r3, r1, #3
 8009e04:	4651      	mov	r1, sl
 8009e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e0a:	4651      	mov	r1, sl
 8009e0c:	00ca      	lsls	r2, r1, #3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4619      	mov	r1, r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	4642      	mov	r2, r8
 8009e16:	189b      	adds	r3, r3, r2
 8009e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	460a      	mov	r2, r1
 8009e20:	eb42 0303 	adc.w	r3, r2, r3
 8009e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	18db      	adds	r3, r3, r3
 8009e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e42:	4613      	mov	r3, r2
 8009e44:	eb42 0303 	adc.w	r3, r2, r3
 8009e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e52:	f7f6 f9d7 	bl	8000204 <__aeabi_uldivmod>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	2164      	movs	r1, #100	@ 0x64
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	3332      	adds	r3, #50	@ 0x32
 8009e6e:	4a08      	ldr	r2, [pc, #32]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009e70:	fba2 2303 	umull	r2, r3, r2, r3
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	f003 0207 	and.w	r2, r3, #7
 8009e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4422      	add	r2, r4
 8009e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e84:	e106      	b.n	800a094 <UART_SetConfig+0x4d8>
 8009e86:	bf00      	nop
 8009e88:	40011000 	.word	0x40011000
 8009e8c:	40011400 	.word	0x40011400
 8009e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	464b      	mov	r3, r9
 8009eaa:	1891      	adds	r1, r2, r2
 8009eac:	6239      	str	r1, [r7, #32]
 8009eae:	415b      	adcs	r3, r3
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	1854      	adds	r4, r2, r1
 8009eba:	4649      	mov	r1, r9
 8009ebc:	eb43 0501 	adc.w	r5, r3, r1
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	00eb      	lsls	r3, r5, #3
 8009eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ece:	00e2      	lsls	r2, r4, #3
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	4643      	mov	r3, r8
 8009ed6:	18e3      	adds	r3, r4, r3
 8009ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009edc:	464b      	mov	r3, r9
 8009ede:	eb45 0303 	adc.w	r3, r5, r3
 8009ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	f04f 0300 	mov.w	r3, #0
 8009efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f02:	4629      	mov	r1, r5
 8009f04:	008b      	lsls	r3, r1, #2
 8009f06:	4621      	mov	r1, r4
 8009f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	008a      	lsls	r2, r1, #2
 8009f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f14:	f7f6 f976 	bl	8000204 <__aeabi_uldivmod>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4b60      	ldr	r3, [pc, #384]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 8009f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	011c      	lsls	r4, r3, #4
 8009f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f38:	4642      	mov	r2, r8
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	1891      	adds	r1, r2, r2
 8009f3e:	61b9      	str	r1, [r7, #24]
 8009f40:	415b      	adcs	r3, r3
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f48:	4641      	mov	r1, r8
 8009f4a:	1851      	adds	r1, r2, r1
 8009f4c:	6139      	str	r1, [r7, #16]
 8009f4e:	4649      	mov	r1, r9
 8009f50:	414b      	adcs	r3, r1
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f60:	4659      	mov	r1, fp
 8009f62:	00cb      	lsls	r3, r1, #3
 8009f64:	4651      	mov	r1, sl
 8009f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f6a:	4651      	mov	r1, sl
 8009f6c:	00ca      	lsls	r2, r1, #3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4619      	mov	r1, r3
 8009f72:	4603      	mov	r3, r0
 8009f74:	4642      	mov	r2, r8
 8009f76:	189b      	adds	r3, r3, r2
 8009f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	460a      	mov	r2, r1
 8009f80:	eb42 0303 	adc.w	r3, r2, r3
 8009f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	008b      	lsls	r3, r1, #2
 8009fa4:	4641      	mov	r1, r8
 8009fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009faa:	4641      	mov	r1, r8
 8009fac:	008a      	lsls	r2, r1, #2
 8009fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009fb2:	f7f6 f927 	bl	8000204 <__aeabi_uldivmod>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4b38      	ldr	r3, [pc, #224]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 8009fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8009fc2:	095b      	lsrs	r3, r3, #5
 8009fc4:	2264      	movs	r2, #100	@ 0x64
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	1acb      	subs	r3, r1, r3
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	3332      	adds	r3, #50	@ 0x32
 8009fd0:	4a33      	ldr	r2, [pc, #204]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 8009fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd6:	095b      	lsrs	r3, r3, #5
 8009fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fdc:	441c      	add	r4, r3
 8009fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	1891      	adds	r1, r2, r2
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	415b      	adcs	r3, r3
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ffc:	4641      	mov	r1, r8
 8009ffe:	1851      	adds	r1, r2, r1
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	4649      	mov	r1, r9
 800a004:	414b      	adcs	r3, r1
 800a006:	607b      	str	r3, [r7, #4]
 800a008:	f04f 0200 	mov.w	r2, #0
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a014:	4659      	mov	r1, fp
 800a016:	00cb      	lsls	r3, r1, #3
 800a018:	4651      	mov	r1, sl
 800a01a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a01e:	4651      	mov	r1, sl
 800a020:	00ca      	lsls	r2, r1, #3
 800a022:	4610      	mov	r0, r2
 800a024:	4619      	mov	r1, r3
 800a026:	4603      	mov	r3, r0
 800a028:	4642      	mov	r2, r8
 800a02a:	189b      	adds	r3, r3, r2
 800a02c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a02e:	464b      	mov	r3, r9
 800a030:	460a      	mov	r2, r1
 800a032:	eb42 0303 	adc.w	r3, r2, r3
 800a036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	663b      	str	r3, [r7, #96]	@ 0x60
 800a042:	667a      	str	r2, [r7, #100]	@ 0x64
 800a044:	f04f 0200 	mov.w	r2, #0
 800a048:	f04f 0300 	mov.w	r3, #0
 800a04c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a050:	4649      	mov	r1, r9
 800a052:	008b      	lsls	r3, r1, #2
 800a054:	4641      	mov	r1, r8
 800a056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a05a:	4641      	mov	r1, r8
 800a05c:	008a      	lsls	r2, r1, #2
 800a05e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a062:	f7f6 f8cf 	bl	8000204 <__aeabi_uldivmod>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 800a06c:	fba3 1302 	umull	r1, r3, r3, r2
 800a070:	095b      	lsrs	r3, r3, #5
 800a072:	2164      	movs	r1, #100	@ 0x64
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	3332      	adds	r3, #50	@ 0x32
 800a07e:	4a08      	ldr	r2, [pc, #32]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 800a080:	fba2 2303 	umull	r2, r3, r2, r3
 800a084:	095b      	lsrs	r3, r3, #5
 800a086:	f003 020f 	and.w	r2, r3, #15
 800a08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4422      	add	r2, r4
 800a092:	609a      	str	r2, [r3, #8]
}
 800a094:	bf00      	nop
 800a096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a09a:	46bd      	mov	sp, r7
 800a09c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0a0:	51eb851f 	.word	0x51eb851f

0800a0a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d123      	bne.n	800a0fe <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a0be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	6851      	ldr	r1, [r2, #4]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	6892      	ldr	r2, [r2, #8]
 800a0ca:	4311      	orrs	r1, r2
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	68d2      	ldr	r2, [r2, #12]
 800a0d0:	4311      	orrs	r1, r2
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	6912      	ldr	r2, [r2, #16]
 800a0d6:	4311      	orrs	r1, r2
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	6952      	ldr	r2, [r2, #20]
 800a0dc:	4311      	orrs	r1, r2
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	6992      	ldr	r2, [r2, #24]
 800a0e2:	4311      	orrs	r1, r2
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	69d2      	ldr	r2, [r2, #28]
 800a0e8:	4311      	orrs	r1, r2
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	6a12      	ldr	r2, [r2, #32]
 800a0ee:	4311      	orrs	r1, r2
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	e028      	b.n	800a150 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	69d9      	ldr	r1, [r3, #28]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	4319      	orrs	r1, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a114:	430b      	orrs	r3, r1
 800a116:	431a      	orrs	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a124:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	6851      	ldr	r1, [r2, #4]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	6892      	ldr	r2, [r2, #8]
 800a130:	4311      	orrs	r1, r2
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	68d2      	ldr	r2, [r2, #12]
 800a136:	4311      	orrs	r1, r2
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	6912      	ldr	r2, [r2, #16]
 800a13c:	4311      	orrs	r1, r2
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	6952      	ldr	r2, [r2, #20]
 800a142:	4311      	orrs	r1, r2
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	6992      	ldr	r2, [r2, #24]
 800a148:	430a      	orrs	r2, r1
 800a14a:	431a      	orrs	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d128      	bne.n	800a1c2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	1e59      	subs	r1, r3, #1
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	3b01      	subs	r3, #1
 800a184:	011b      	lsls	r3, r3, #4
 800a186:	4319      	orrs	r1, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	4319      	orrs	r1, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	3b01      	subs	r3, #1
 800a198:	031b      	lsls	r3, r3, #12
 800a19a:	4319      	orrs	r1, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	041b      	lsls	r3, r3, #16
 800a1a4:	4319      	orrs	r1, r3
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	051b      	lsls	r3, r3, #20
 800a1ae:	4319      	orrs	r1, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	061b      	lsls	r3, r3, #24
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	609a      	str	r2, [r3, #8]
 800a1c0:	e02f      	b.n	800a222 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	68d2      	ldr	r2, [r2, #12]
 800a1d2:	3a01      	subs	r2, #1
 800a1d4:	0311      	lsls	r1, r2, #12
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	6952      	ldr	r2, [r2, #20]
 800a1da:	3a01      	subs	r2, #1
 800a1dc:	0512      	lsls	r2, r2, #20
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	1e59      	subs	r1, r3, #1
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	4319      	orrs	r1, r3
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	3b01      	subs	r3, #1
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	4319      	orrs	r1, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	041b      	lsls	r3, r3, #16
 800a210:	4319      	orrs	r1, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	3b01      	subs	r3, #1
 800a218:	061b      	lsls	r3, r3, #24
 800a21a:	430b      	orrs	r3, r1
 800a21c:	431a      	orrs	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a230:	b084      	sub	sp, #16
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	f107 001c 	add.w	r0, r7, #28
 800a23e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a246:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a248:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a24a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a24e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a252:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a256:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a25a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4313      	orrs	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a26a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	b004      	add	sp, #16
 800a284:	4770      	bx	lr

0800a286 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0303 	and.w	r3, r3, #3
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a318:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a31e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a324:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a334:	f023 030f 	bic.w	r3, r3, #15
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	b2db      	uxtb	r3, r3
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3314      	adds	r3, #20
 800a376:	461a      	mov	r2, r3
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	4413      	add	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
}  
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a38e:	b480      	push	{r7}
 800a390:	b085      	sub	sp, #20
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a3ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a3c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0

}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3f8:	2340      	movs	r3, #64	@ 0x40
 800a3fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a404:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a406:	f107 0308 	add.w	r3, r7, #8
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff ff74 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a412:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a416:	2110      	movs	r1, #16
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f9d7 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a41e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a420:	69fb      	ldr	r3, [r7, #28]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b088      	sub	sp, #32
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a438:	2311      	movs	r3, #17
 800a43a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a43c:	2340      	movs	r3, #64	@ 0x40
 800a43e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a44a:	f107 0308 	add.w	r3, r7, #8
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ff52 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a45a:	2111      	movs	r1, #17
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f9b5 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a464:	69fb      	ldr	r3, [r7, #28]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3720      	adds	r7, #32
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b088      	sub	sp, #32
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a47c:	2312      	movs	r3, #18
 800a47e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a480:	2340      	movs	r3, #64	@ 0x40
 800a482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a48c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a48e:	f107 0308 	add.w	r3, r7, #8
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff ff30 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a49a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a49e:	2112      	movs	r1, #18
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f993 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a4a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a8:	69fb      	ldr	r3, [r7, #28]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3720      	adds	r7, #32
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b088      	sub	sp, #32
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a4c0:	2318      	movs	r3, #24
 800a4c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4c4:	2340      	movs	r3, #64	@ 0x40
 800a4c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4d2:	f107 0308 	add.w	r3, r7, #8
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff ff0e 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e2:	2118      	movs	r1, #24
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f971 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a4ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ec:	69fb      	ldr	r3, [r7, #28]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3720      	adds	r7, #32
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b088      	sub	sp, #32
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a504:	2319      	movs	r3, #25
 800a506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a508:	2340      	movs	r3, #64	@ 0x40
 800a50a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a50c:	2300      	movs	r3, #0
 800a50e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a514:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a516:	f107 0308 	add.w	r3, r7, #8
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff feec 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a522:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a526:	2119      	movs	r1, #25
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f94f 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a52e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a530:	69fb      	ldr	r3, [r7, #28]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a548:	230c      	movs	r3, #12
 800a54a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a54c:	2340      	movs	r3, #64	@ 0x40
 800a54e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a558:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff feca 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a566:	4a05      	ldr	r2, [pc, #20]	@ (800a57c <SDMMC_CmdStopTransfer+0x40>)
 800a568:	210c      	movs	r1, #12
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f92e 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a572:	69fb      	ldr	r3, [r7, #28]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3720      	adds	r7, #32
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	05f5e100 	.word	0x05f5e100

0800a580 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08a      	sub	sp, #40	@ 0x28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a590:	2307      	movs	r3, #7
 800a592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a594:	2340      	movs	r3, #64	@ 0x40
 800a596:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a59c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5a2:	f107 0310 	add.w	r3, r7, #16
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fea6 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a5ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5b2:	2107      	movs	r1, #7
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 f909 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a5ba:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3728      	adds	r7, #40	@ 0x28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b088      	sub	sp, #32
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5e4:	f107 0308 	add.w	r3, r7, #8
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff fe85 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fb23 	bl	800ac3c <SDMMC_GetCmdError>
 800a5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3720      	adds	r7, #32
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b088      	sub	sp, #32
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a60a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a60e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a610:	2308      	movs	r3, #8
 800a612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a614:	2340      	movs	r3, #64	@ 0x40
 800a616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a618:	2300      	movs	r3, #0
 800a61a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a61c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a620:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a622:	f107 0308 	add.w	r3, r7, #8
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff fe66 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fab6 	bl	800aba0 <SDMMC_GetCmdResp7>
 800a634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a636:	69fb      	ldr	r3, [r7, #28]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a64e:	2337      	movs	r3, #55	@ 0x37
 800a650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a652:	2340      	movs	r3, #64	@ 0x40
 800a654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a656:	2300      	movs	r3, #0
 800a658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a65e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fe47 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a66c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a670:	2137      	movs	r1, #55	@ 0x37
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f8aa 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a67a:	69fb      	ldr	r3, [r7, #28]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3720      	adds	r7, #32
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a69a:	2329      	movs	r3, #41	@ 0x29
 800a69c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a69e:	2340      	movs	r3, #64	@ 0x40
 800a6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ac:	f107 0308 	add.w	r3, r7, #8
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff fe21 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f9bd 	bl	800aa38 <SDMMC_GetCmdResp3>
 800a6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a6da:	23c0      	movs	r3, #192	@ 0xc0
 800a6dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6e8:	f107 0308 	add.w	r3, r7, #8
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fe03 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f957 	bl	800a9a8 <SDMMC_GetCmdResp2>
 800a6fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b088      	sub	sp, #32
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a714:	2309      	movs	r3, #9
 800a716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a718:	23c0      	movs	r3, #192	@ 0xc0
 800a71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a724:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff fde4 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f938 	bl	800a9a8 <SDMMC_GetCmdResp2>
 800a738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a73a:	69fb      	ldr	r3, [r7, #28]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a752:	2303      	movs	r3, #3
 800a754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a756:	2340      	movs	r3, #64	@ 0x40
 800a758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a75e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a762:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a764:	f107 0308 	add.w	r3, r7, #8
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff fdc5 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	2103      	movs	r1, #3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f99d 	bl	800aab4 <SDMMC_GetCmdResp6>
 800a77a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77c:	69fb      	ldr	r3, [r7, #28]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3720      	adds	r7, #32
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b088      	sub	sp, #32
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a794:	230d      	movs	r3, #13
 800a796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a798:	2340      	movs	r3, #64	@ 0x40
 800a79a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a79c:	2300      	movs	r3, #0
 800a79e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7a6:	f107 0308 	add.w	r3, r7, #8
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff fda4 	bl	800a2fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a7b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7b6:	210d      	movs	r1, #13
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f807 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a7be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3720      	adds	r7, #32
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a7da:	4b70      	ldr	r3, [pc, #448]	@ (800a99c <SDMMC_GetCmdResp1+0x1d0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a70      	ldr	r2, [pc, #448]	@ (800a9a0 <SDMMC_GetCmdResp1+0x1d4>)
 800a7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e4:	0a5a      	lsrs	r2, r3, #9
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	1e5a      	subs	r2, r3, #1
 800a7f2:	61fa      	str	r2, [r7, #28]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7fc:	e0c9      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a802:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0ef      	beq.n	800a7ee <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1ea      	bne.n	800a7ee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d004      	beq.n	800a82e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2204      	movs	r2, #4
 800a828:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a82a:	2304      	movs	r3, #4
 800a82c:	e0b1      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2201      	movs	r2, #1
 800a83e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a840:	2301      	movs	r3, #1
 800a842:	e0a6      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	22c5      	movs	r2, #197	@ 0xc5
 800a848:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff fd7f 	bl	800a34e <SDIO_GetCommandResponse>
 800a850:	4603      	mov	r3, r0
 800a852:	461a      	mov	r2, r3
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	4293      	cmp	r3, r2
 800a858:	d001      	beq.n	800a85e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e099      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a85e:	2100      	movs	r1, #0
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7ff fd81 	bl	800a368 <SDIO_GetResponse>
 800a866:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4b4e      	ldr	r3, [pc, #312]	@ (800a9a4 <SDMMC_GetCmdResp1+0x1d8>)
 800a86c:	4013      	ands	r3, r2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a872:	2300      	movs	r3, #0
 800a874:	e08d      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	da02      	bge.n	800a882 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a87c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a880:	e087      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a88c:	2340      	movs	r3, #64	@ 0x40
 800a88e:	e080      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a89a:	2380      	movs	r3, #128	@ 0x80
 800a89c:	e079      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8ac:	e071      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8bc:	e069      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a8c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8cc:	e061      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a8d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8dc:	e059      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8ec:	e051      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8fc:	e049      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a908:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a90c:	e041      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a91c:	e039      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a92c:	e031      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a938:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a93c:	e029      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a948:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a94c:	e021      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a958:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a95c:	e019      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a968:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a96c:	e011      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a978:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a97c:	e009      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f003 0308 	and.w	r3, r3, #8
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a988:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a98c:	e001      	b.n	800a992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a98e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20000000 	.word	0x20000000
 800a9a0:	10624dd3 	.word	0x10624dd3
 800a9a4:	fdffe008 	.word	0xfdffe008

0800a9a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9b0:	4b1f      	ldr	r3, [pc, #124]	@ (800aa30 <SDMMC_GetCmdResp2+0x88>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a1f      	ldr	r2, [pc, #124]	@ (800aa34 <SDMMC_GetCmdResp2+0x8c>)
 800a9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ba:	0a5b      	lsrs	r3, r3, #9
 800a9bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
 800a9c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	1e5a      	subs	r2, r3, #1
 800a9ca:	60fa      	str	r2, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9d4:	e026      	b.n	800aa24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0ef      	beq.n	800a9c6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1ea      	bne.n	800a9c6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d004      	beq.n	800aa06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2204      	movs	r2, #4
 800aa00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa02:	2304      	movs	r3, #4
 800aa04:	e00e      	b.n	800aa24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e003      	b.n	800aa24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	22c5      	movs	r2, #197	@ 0xc5
 800aa20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20000000 	.word	0x20000000
 800aa34:	10624dd3 	.word	0x10624dd3

0800aa38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa40:	4b1a      	ldr	r3, [pc, #104]	@ (800aaac <SDMMC_GetCmdResp3+0x74>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a1a      	ldr	r2, [pc, #104]	@ (800aab0 <SDMMC_GetCmdResp3+0x78>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	0a5b      	lsrs	r3, r3, #9
 800aa4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa50:	fb02 f303 	mul.w	r3, r2, r3
 800aa54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	1e5a      	subs	r2, r3, #1
 800aa5a:	60fa      	str	r2, [r7, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa64:	e01b      	b.n	800aa9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0ef      	beq.n	800aa56 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1ea      	bne.n	800aa56 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa92:	2304      	movs	r3, #4
 800aa94:	e003      	b.n	800aa9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	22c5      	movs	r2, #197	@ 0xc5
 800aa9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000000 	.word	0x20000000
 800aab0:	10624dd3 	.word	0x10624dd3

0800aab4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	460b      	mov	r3, r1
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aac2:	4b35      	ldr	r3, [pc, #212]	@ (800ab98 <SDMMC_GetCmdResp6+0xe4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a35      	ldr	r2, [pc, #212]	@ (800ab9c <SDMMC_GetCmdResp6+0xe8>)
 800aac8:	fba2 2303 	umull	r2, r3, r2, r3
 800aacc:	0a5b      	lsrs	r3, r3, #9
 800aace:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	61fa      	str	r2, [r7, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aae2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aae6:	e052      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0ef      	beq.n	800aad8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1ea      	bne.n	800aad8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab06:	f003 0304 	and.w	r3, r3, #4
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2204      	movs	r2, #4
 800ab12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab14:	2304      	movs	r3, #4
 800ab16:	e03a      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e02f      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7ff fc0d 	bl	800a34e <SDIO_GetCommandResponse>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d001      	beq.n	800ab42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e025      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22c5      	movs	r2, #197	@ 0xc5
 800ab46:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab48:	2100      	movs	r1, #0
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f7ff fc0c 	bl	800a368 <SDIO_GetResponse>
 800ab50:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d106      	bne.n	800ab6a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e011      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab78:	e009      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab88:	e001      	b.n	800ab8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3720      	adds	r7, #32
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000000 	.word	0x20000000
 800ab9c:	10624dd3 	.word	0x10624dd3

0800aba0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aba8:	4b22      	ldr	r3, [pc, #136]	@ (800ac34 <SDMMC_GetCmdResp7+0x94>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a22      	ldr	r2, [pc, #136]	@ (800ac38 <SDMMC_GetCmdResp7+0x98>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	0a5b      	lsrs	r3, r3, #9
 800abb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abb8:	fb02 f303 	mul.w	r3, r2, r3
 800abbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	1e5a      	subs	r2, r3, #1
 800abc2:	60fa      	str	r2, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abcc:	e02c      	b.n	800ac28 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0ef      	beq.n	800abbe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1ea      	bne.n	800abbe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2204      	movs	r2, #4
 800abf8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abfa:	2304      	movs	r3, #4
 800abfc:	e014      	b.n	800ac28 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d004      	beq.n	800ac14 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e009      	b.n	800ac28 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2240      	movs	r2, #64	@ 0x40
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac26:	2300      	movs	r3, #0
  
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	20000000 	.word	0x20000000
 800ac38:	10624dd3 	.word	0x10624dd3

0800ac3c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac44:	4b11      	ldr	r3, [pc, #68]	@ (800ac8c <SDMMC_GetCmdError+0x50>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a11      	ldr	r2, [pc, #68]	@ (800ac90 <SDMMC_GetCmdError+0x54>)
 800ac4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4e:	0a5b      	lsrs	r3, r3, #9
 800ac50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac54:	fb02 f303 	mul.w	r3, r2, r3
 800ac58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	1e5a      	subs	r2, r3, #1
 800ac5e:	60fa      	str	r2, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac68:	e009      	b.n	800ac7e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f1      	beq.n	800ac5a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	22c5      	movs	r2, #197	@ 0xc5
 800ac7a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20000000 	.word	0x20000000
 800ac90:	10624dd3 	.word	0x10624dd3

0800ac94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac94:	b084      	sub	sp, #16
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	f107 001c 	add.w	r0, r7, #28
 800aca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aca6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d123      	bne.n	800acf6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800acc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d105      	bne.n	800acea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f9dc 	bl	800b0a8 <USB_CoreReset>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]
 800acf4:	e01b      	b.n	800ad2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f9d0 	bl	800b0a8 <USB_CoreReset>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad20:	e005      	b.n	800ad2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad2e:	7fbb      	ldrb	r3, [r7, #30]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d10b      	bne.n	800ad4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f043 0206 	orr.w	r2, r3, #6
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f043 0220 	orr.w	r2, r3, #32
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad58:	b004      	add	sp, #16
 800ad5a:	4770      	bx	lr

0800ad5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f043 0201 	orr.w	r2, r3, #1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	f023 0201 	bic.w	r2, r3, #1
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d115      	bne.n	800adee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800adce:	200a      	movs	r0, #10
 800add0:	f7f7 f9ae 	bl	8002130 <HAL_Delay>
      ms += 10U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	330a      	adds	r3, #10
 800add8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f956 	bl	800b08c <USB_GetMode>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d01e      	beq.n	800ae24 <USB_SetCurrentMode+0x84>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2bc7      	cmp	r3, #199	@ 0xc7
 800adea:	d9f0      	bls.n	800adce <USB_SetCurrentMode+0x2e>
 800adec:	e01a      	b.n	800ae24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d115      	bne.n	800ae20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae00:	200a      	movs	r0, #10
 800ae02:	f7f7 f995 	bl	8002130 <HAL_Delay>
      ms += 10U;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	330a      	adds	r3, #10
 800ae0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f93d 	bl	800b08c <USB_GetMode>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <USB_SetCurrentMode+0x84>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae1c:	d9f0      	bls.n	800ae00 <USB_SetCurrentMode+0x60>
 800ae1e:	e001      	b.n	800ae24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e005      	b.n	800ae30 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae28:	d101      	bne.n	800ae2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae52:	d901      	bls.n	800ae58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e01b      	b.n	800ae90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	daf2      	bge.n	800ae46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	019b      	lsls	r3, r3, #6
 800ae68:	f043 0220 	orr.w	r2, r3, #32
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3301      	adds	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae7c:	d901      	bls.n	800ae82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e006      	b.n	800ae90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d0f0      	beq.n	800ae70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aeb4:	d901      	bls.n	800aeba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e018      	b.n	800aeec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	daf2      	bge.n	800aea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2210      	movs	r2, #16
 800aeca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3301      	adds	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aed8:	d901      	bls.n	800aede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e006      	b.n	800aeec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0310 	and.w	r3, r3, #16
 800aee6:	2b10      	cmp	r3, #16
 800aee8:	d0f0      	beq.n	800aecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b089      	sub	sp, #36	@ 0x24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4611      	mov	r1, r2
 800af04:	461a      	mov	r2, r3
 800af06:	460b      	mov	r3, r1
 800af08:	71fb      	strb	r3, [r7, #7]
 800af0a:	4613      	mov	r3, r2
 800af0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800af16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d123      	bne.n	800af66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af1e:	88bb      	ldrh	r3, [r7, #4]
 800af20:	3303      	adds	r3, #3
 800af22:	089b      	lsrs	r3, r3, #2
 800af24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af26:	2300      	movs	r3, #0
 800af28:	61bb      	str	r3, [r7, #24]
 800af2a:	e018      	b.n	800af5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	031a      	lsls	r2, r3, #12
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	4413      	add	r3, r2
 800af34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af38:	461a      	mov	r2, r3
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	3301      	adds	r3, #1
 800af44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	3301      	adds	r3, #1
 800af4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	3301      	adds	r3, #1
 800af50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	3301      	adds	r3, #1
 800af56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	3301      	adds	r3, #1
 800af5c:	61bb      	str	r3, [r7, #24]
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	429a      	cmp	r2, r3
 800af64:	d3e2      	bcc.n	800af2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3724      	adds	r7, #36	@ 0x24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af74:	b480      	push	{r7}
 800af76:	b08b      	sub	sp, #44	@ 0x2c
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	4613      	mov	r3, r2
 800af80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af8a:	88fb      	ldrh	r3, [r7, #6]
 800af8c:	089b      	lsrs	r3, r3, #2
 800af8e:	b29b      	uxth	r3, r3
 800af90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	f003 0303 	and.w	r3, r3, #3
 800af98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af9a:	2300      	movs	r3, #0
 800af9c:	623b      	str	r3, [r7, #32]
 800af9e:	e014      	b.n	800afca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afaa:	601a      	str	r2, [r3, #0]
    pDest++;
 800afac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afae:	3301      	adds	r3, #1
 800afb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb4:	3301      	adds	r3, #1
 800afb6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afba:	3301      	adds	r3, #1
 800afbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	3301      	adds	r3, #1
 800afc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	3301      	adds	r3, #1
 800afc8:	623b      	str	r3, [r7, #32]
 800afca:	6a3a      	ldr	r2, [r7, #32]
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d3e6      	bcc.n	800afa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afd2:	8bfb      	ldrh	r3, [r7, #30]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d01e      	beq.n	800b016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe2:	461a      	mov	r2, r3
 800afe4:	f107 0310 	add.w	r3, r7, #16
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	fa22 f303 	lsr.w	r3, r2, r3
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	701a      	strb	r2, [r3, #0]
      i++;
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	3301      	adds	r3, #1
 800b002:	623b      	str	r3, [r7, #32]
      pDest++;
 800b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b006:	3301      	adds	r3, #1
 800b008:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b00a:	8bfb      	ldrh	r3, [r7, #30]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b010:	8bfb      	ldrh	r3, [r7, #30]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1ea      	bne.n	800afec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b018:	4618      	mov	r0, r3
 800b01a:	372c      	adds	r7, #44	@ 0x2c
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	695b      	ldr	r3, [r3, #20]
 800b030:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	4013      	ands	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b03c:	68fb      	ldr	r3, [r7, #12]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b085      	sub	sp, #20
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b05a:	78fb      	ldrb	r3, [r7, #3]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	4413      	add	r3, r2
 800b062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4413      	add	r3, r2
 800b072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	4013      	ands	r3, r2
 800b07c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b07e:	68bb      	ldr	r3, [r7, #8]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	f003 0301 	and.w	r3, r3, #1
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0c0:	d901      	bls.n	800b0c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e01b      	b.n	800b0fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	daf2      	bge.n	800b0b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	f043 0201 	orr.w	r2, r3, #1
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0ea:	d901      	bls.n	800b0f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e006      	b.n	800b0fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d0f0      	beq.n	800b0de <USB_CoreReset+0x36>

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
	...

0800b10c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b10c:	b084      	sub	sp, #16
 800b10e:	b580      	push	{r7, lr}
 800b110:	b086      	sub	sp, #24
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b11a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b12c:	461a      	mov	r2, r3
 800b12e:	2300      	movs	r3, #0
 800b130:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b136:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b146:	2b00      	cmp	r3, #0
 800b148:	d119      	bne.n	800b17e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b14a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d10a      	bne.n	800b168 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b160:	f043 0304 	orr.w	r3, r3, #4
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	e014      	b.n	800b192 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b176:	f023 0304 	bic.w	r3, r3, #4
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	e009      	b.n	800b192 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b18c:	f023 0304 	bic.w	r3, r3, #4
 800b190:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b192:	2110      	movs	r1, #16
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fe4f 	bl	800ae38 <USB_FlushTxFifo>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff fe79 	bl	800ae9c <USB_FlushRxFifo>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	613b      	str	r3, [r7, #16]
 800b1b8:	e015      	b.n	800b1e6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1cc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1da:	461a      	mov	r2, r3
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	613b      	str	r3, [r7, #16]
 800b1e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d3e3      	bcc.n	800b1ba <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fe:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a18      	ldr	r2, [pc, #96]	@ (800b264 <USB_HostInit+0x158>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d10b      	bne.n	800b220 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b20e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a15      	ldr	r2, [pc, #84]	@ (800b268 <USB_HostInit+0x15c>)
 800b214:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a14      	ldr	r2, [pc, #80]	@ (800b26c <USB_HostInit+0x160>)
 800b21a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b21e:	e009      	b.n	800b234 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2280      	movs	r2, #128	@ 0x80
 800b224:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a11      	ldr	r2, [pc, #68]	@ (800b270 <USB_HostInit+0x164>)
 800b22a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a11      	ldr	r2, [pc, #68]	@ (800b274 <USB_HostInit+0x168>)
 800b230:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b234:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d105      	bne.n	800b248 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	f043 0210 	orr.w	r2, r3, #16
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699a      	ldr	r2, [r3, #24]
 800b24c:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <USB_HostInit+0x16c>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b254:	7dfb      	ldrb	r3, [r7, #23]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b260:	b004      	add	sp, #16
 800b262:	4770      	bx	lr
 800b264:	40040000 	.word	0x40040000
 800b268:	01000200 	.word	0x01000200
 800b26c:	00e00300 	.word	0x00e00300
 800b270:	00600080 	.word	0x00600080
 800b274:	004000e0 	.word	0x004000e0
 800b278:	a3200008 	.word	0xa3200008

0800b27c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b29a:	f023 0303 	bic.w	r3, r3, #3
 800b29e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	68f9      	ldr	r1, [r7, #12]
 800b2b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d107      	bne.n	800b2ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b2ca:	6053      	str	r3, [r2, #4]
 800b2cc:	e00c      	b.n	800b2e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b2ce:	78fb      	ldrb	r3, [r7, #3]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d107      	bne.n	800b2e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b2e0:	6053      	str	r3, [r2, #4]
 800b2e2:	e001      	b.n	800b2e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e000      	b.n	800b2ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b302:	2300      	movs	r3, #0
 800b304:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b316:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b324:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b326:	2064      	movs	r0, #100	@ 0x64
 800b328:	f7f6 ff02 	bl	8002130 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b338:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b33a:	200a      	movs	r0, #10
 800b33c:	f7f6 fef8 	bl	8002130 <HAL_Delay>

  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	460b      	mov	r3, r1
 800b354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b36e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d109      	bne.n	800b38e <USB_DriveVbus+0x44>
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d106      	bne.n	800b38e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b388:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b38c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b398:	d109      	bne.n	800b3ae <USB_DriveVbus+0x64>
 800b39a:	78fb      	ldrb	r3, [r7, #3]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d106      	bne.n	800b3ae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b3a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3ac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	0c5b      	lsrs	r3, r3, #17
 800b3da:	f003 0303 	and.w	r3, r3, #3
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	b29b      	uxth	r3, r3
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	70fb      	strb	r3, [r7, #3]
 800b41e:	460b      	mov	r3, r1
 800b420:	70bb      	strb	r3, [r7, #2]
 800b422:	4613      	mov	r3, r2
 800b424:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	4413      	add	r3, r2
 800b436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b43a:	461a      	mov	r2, r3
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
 800b440:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b442:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b446:	2b03      	cmp	r3, #3
 800b448:	d87c      	bhi.n	800b544 <USB_HC_Init+0x138>
 800b44a:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <USB_HC_Init+0x44>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b507 	.word	0x0800b507
 800b458:	0800b461 	.word	0x0800b461
 800b45c:	0800b4c9 	.word	0x0800b4c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	4413      	add	r3, r2
 800b468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b46c:	461a      	mov	r2, r3
 800b46e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b474:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	da10      	bge.n	800b49e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	4413      	add	r3, r2
 800b484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	78fa      	ldrb	r2, [r7, #3]
 800b48c:	0151      	lsls	r1, r2, #5
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	440a      	add	r2, r1
 800b492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b49a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b49c:	e055      	b.n	800b54a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a6f      	ldr	r2, [pc, #444]	@ (800b660 <USB_HC_Init+0x254>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d151      	bne.n	800b54a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	015a      	lsls	r2, r3, #5
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	78fa      	ldrb	r2, [r7, #3]
 800b4b6:	0151      	lsls	r1, r2, #5
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	440a      	add	r2, r1
 800b4bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b4c4:	60d3      	str	r3, [r2, #12]
      break;
 800b4c6:	e040      	b.n	800b54a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b4c8:	78fb      	ldrb	r3, [r7, #3]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b4da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b4dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	da34      	bge.n	800b54e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	015a      	lsls	r2, r3, #5
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	0151      	lsls	r1, r2, #5
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	440a      	add	r2, r1
 800b4fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b502:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b504:	e023      	b.n	800b54e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b506:	78fb      	ldrb	r3, [r7, #3]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b512:	461a      	mov	r2, r3
 800b514:	f240 2325 	movw	r3, #549	@ 0x225
 800b518:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b51a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	da17      	bge.n	800b552 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	78fa      	ldrb	r2, [r7, #3]
 800b532:	0151      	lsls	r1, r2, #5
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	440a      	add	r2, r1
 800b538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b53c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b540:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b542:	e006      	b.n	800b552 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	77fb      	strb	r3, [r7, #31]
      break;
 800b548:	e004      	b.n	800b554 <USB_HC_Init+0x148>
      break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <USB_HC_Init+0x148>
      break;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <USB_HC_Init+0x148>
      break;
 800b552:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b554:	78fb      	ldrb	r3, [r7, #3]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b560:	461a      	mov	r2, r3
 800b562:	2300      	movs	r3, #0
 800b564:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	78fa      	ldrb	r2, [r7, #3]
 800b576:	0151      	lsls	r1, r2, #5
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	440a      	add	r2, r1
 800b57c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b580:	f043 0302 	orr.w	r3, r3, #2
 800b584:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b58c:	699a      	ldr	r2, [r3, #24]
 800b58e:	78fb      	ldrb	r3, [r7, #3]
 800b590:	f003 030f 	and.w	r3, r3, #15
 800b594:	2101      	movs	r1, #1
 800b596:	fa01 f303 	lsl.w	r3, r1, r3
 800b59a:	6939      	ldr	r1, [r7, #16]
 800b59c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b5b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da03      	bge.n	800b5c0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b5b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	e001      	b.n	800b5c4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff fef9 	bl	800b3bc <USB_GetHostSpeed>
 800b5ca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b5cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d106      	bne.n	800b5e2 <USB_HC_Init+0x1d6>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d003      	beq.n	800b5e2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b5da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	e001      	b.n	800b5e6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5e6:	787b      	ldrb	r3, [r7, #1]
 800b5e8:	059b      	lsls	r3, r3, #22
 800b5ea:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b5ee:	78bb      	ldrb	r3, [r7, #2]
 800b5f0:	02db      	lsls	r3, r3, #11
 800b5f2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5fc:	049b      	lsls	r3, r3, #18
 800b5fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b602:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b604:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b606:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b60a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	431a      	orrs	r2, r3
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b614:	78fa      	ldrb	r2, [r7, #3]
 800b616:	0151      	lsls	r1, r2, #5
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	440a      	add	r2, r1
 800b61c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b624:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d003      	beq.n	800b636 <USB_HC_Init+0x22a>
 800b62e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b632:	2b01      	cmp	r3, #1
 800b634:	d10f      	bne.n	800b656 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	78fa      	ldrb	r2, [r7, #3]
 800b646:	0151      	lsls	r1, r2, #5
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	440a      	add	r2, r1
 800b64c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b650:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b654:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b656:	7ffb      	ldrb	r3, [r7, #31]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3720      	adds	r7, #32
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	40040000 	.word	0x40040000

0800b664 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08c      	sub	sp, #48	@ 0x30
 800b668:	af02      	add	r7, sp, #8
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	4613      	mov	r3, r2
 800b670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	785b      	ldrb	r3, [r3, #1]
 800b67a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b67c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b680:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	4a5d      	ldr	r2, [pc, #372]	@ (800b7fc <USB_HC_StartXfer+0x198>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d12f      	bne.n	800b6ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d11c      	bne.n	800b6ca <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	7c9b      	ldrb	r3, [r3, #18]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d003      	beq.n	800b6a0 <USB_HC_StartXfer+0x3c>
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	7c9b      	ldrb	r3, [r3, #18]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d124      	bne.n	800b6ea <USB_HC_StartXfer+0x86>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	799b      	ldrb	r3, [r3, #6]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d120      	bne.n	800b6ea <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	6a3a      	ldr	r2, [r7, #32]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6c6:	60d3      	str	r3, [r2, #12]
 800b6c8:	e00f      	b.n	800b6ea <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	791b      	ldrb	r3, [r3, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10b      	bne.n	800b6ea <USB_HC_StartXfer+0x86>
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	795b      	ldrb	r3, [r3, #5]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d107      	bne.n	800b6ea <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f000 fb6b 	bl	800bdbc <USB_DoPing>
        return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e232      	b.n	800bb50 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	799b      	ldrb	r3, [r3, #6]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d158      	bne.n	800b7a4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	78db      	ldrb	r3, [r3, #3]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b6fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	8a92      	ldrh	r2, [r2, #20]
 800b704:	fb03 f202 	mul.w	r2, r3, r2
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	61da      	str	r2, [r3, #28]
 800b70c:	e07c      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	7c9b      	ldrb	r3, [r3, #18]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d130      	bne.n	800b778 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	2bbc      	cmp	r3, #188	@ 0xbc
 800b71c:	d918      	bls.n	800b750 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	8a9b      	ldrh	r3, [r3, #20]
 800b722:	461a      	mov	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	69da      	ldr	r2, [r3, #28]
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d003      	beq.n	800b740 <USB_HC_StartXfer+0xdc>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d103      	bne.n	800b748 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2202      	movs	r2, #2
 800b744:	60da      	str	r2, [r3, #12]
 800b746:	e05f      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2201      	movs	r2, #1
 800b74c:	60da      	str	r2, [r3, #12]
 800b74e:	e05b      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	6a1a      	ldr	r2, [r3, #32]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d007      	beq.n	800b770 <USB_HC_StartXfer+0x10c>
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d003      	beq.n	800b770 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2204      	movs	r2, #4
 800b76c:	60da      	str	r2, [r3, #12]
 800b76e:	e04b      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2203      	movs	r2, #3
 800b774:	60da      	str	r2, [r3, #12]
 800b776:	e047      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d10d      	bne.n	800b79a <USB_HC_StartXfer+0x136>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	8a92      	ldrh	r2, [r2, #20]
 800b786:	4293      	cmp	r3, r2
 800b788:	d907      	bls.n	800b79a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b78a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	8a92      	ldrh	r2, [r2, #20]
 800b790:	fb03 f202 	mul.w	r2, r3, r2
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	61da      	str	r2, [r3, #28]
 800b798:	e036      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6a1a      	ldr	r2, [r3, #32]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	61da      	str	r2, [r3, #28]
 800b7a2:	e031      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d018      	beq.n	800b7de <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	8a92      	ldrh	r2, [r2, #20]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	8a92      	ldrh	r2, [r2, #20]
 800b7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b7c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b7c4:	8b7b      	ldrh	r3, [r7, #26]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d90b      	bls.n	800b7e2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b7ca:	8b7b      	ldrh	r3, [r7, #26]
 800b7cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b7ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	8a92      	ldrh	r2, [r2, #20]
 800b7d4:	fb03 f202 	mul.w	r2, r3, r2
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	61da      	str	r2, [r3, #28]
 800b7dc:	e001      	b.n	800b7e2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	78db      	ldrb	r3, [r3, #3]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b7ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	8a92      	ldrh	r2, [r2, #20]
 800b7f0:	fb03 f202 	mul.w	r2, r3, r2
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	61da      	str	r2, [r3, #28]
 800b7f8:	e006      	b.n	800b808 <USB_HC_StartXfer+0x1a4>
 800b7fa:	bf00      	nop
 800b7fc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6a1a      	ldr	r2, [r3, #32]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	69db      	ldr	r3, [r3, #28]
 800b80c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b810:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b812:	04d9      	lsls	r1, r3, #19
 800b814:	4ba3      	ldr	r3, [pc, #652]	@ (800baa4 <USB_HC_StartXfer+0x440>)
 800b816:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b818:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	7d9b      	ldrb	r3, [r3, #22]
 800b81e:	075b      	lsls	r3, r3, #29
 800b820:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b824:	69f9      	ldr	r1, [r7, #28]
 800b826:	0148      	lsls	r0, r1, #5
 800b828:	6a39      	ldr	r1, [r7, #32]
 800b82a:	4401      	add	r1, r0
 800b82c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b830:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b832:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b834:	79fb      	ldrb	r3, [r7, #7]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d009      	beq.n	800b84e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	6999      	ldr	r1, [r3, #24]
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	4413      	add	r3, r2
 800b846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b84a:	460a      	mov	r2, r1
 800b84c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b84e:	6a3b      	ldr	r3, [r7, #32]
 800b850:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bf0c      	ite	eq
 800b85e:	2301      	moveq	r3, #1
 800b860:	2300      	movne	r3, #0
 800b862:	b2db      	uxtb	r3, r3
 800b864:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	69fa      	ldr	r2, [r7, #28]
 800b876:	0151      	lsls	r1, r2, #5
 800b878:	6a3a      	ldr	r2, [r7, #32]
 800b87a:	440a      	add	r2, r1
 800b87c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b880:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b884:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	7e7b      	ldrb	r3, [r7, #25]
 800b896:	075b      	lsls	r3, r3, #29
 800b898:	69f9      	ldr	r1, [r7, #28]
 800b89a:	0148      	lsls	r0, r1, #5
 800b89c:	6a39      	ldr	r1, [r7, #32]
 800b89e:	4401      	add	r1, r0
 800b8a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	799b      	ldrb	r3, [r3, #6]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	f040 80c3 	bne.w	800ba38 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	7c5b      	ldrb	r3, [r3, #17]
 800b8b6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	69fa      	ldr	r2, [r7, #28]
 800b8c0:	0151      	lsls	r1, r2, #5
 800b8c2:	6a3a      	ldr	r2, [r7, #32]
 800b8c4:	440a      	add	r2, r1
 800b8c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b8ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b8ce:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	0151      	lsls	r1, r2, #5
 800b8e2:	6a3a      	ldr	r2, [r7, #32]
 800b8e4:	440a      	add	r2, r1
 800b8e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b8ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	79db      	ldrb	r3, [r3, #7]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d123      	bne.n	800b940 <USB_HC_StartXfer+0x2dc>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	78db      	ldrb	r3, [r3, #3]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d11f      	bne.n	800b940 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	4413      	add	r3, r2
 800b908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	69fa      	ldr	r2, [r7, #28]
 800b910:	0151      	lsls	r1, r2, #5
 800b912:	6a3a      	ldr	r2, [r7, #32]
 800b914:	440a      	add	r2, r1
 800b916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b91a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b91e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	4413      	add	r3, r2
 800b928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	0151      	lsls	r1, r2, #5
 800b932:	6a3a      	ldr	r2, [r7, #32]
 800b934:	440a      	add	r2, r1
 800b936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b93e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	7c9b      	ldrb	r3, [r3, #18]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d003      	beq.n	800b950 <USB_HC_StartXfer+0x2ec>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	7c9b      	ldrb	r3, [r3, #18]
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d117      	bne.n	800b980 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b954:	2b01      	cmp	r3, #1
 800b956:	d113      	bne.n	800b980 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	78db      	ldrb	r3, [r3, #3]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d10f      	bne.n	800b980 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	015a      	lsls	r2, r3, #5
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	4413      	add	r3, r2
 800b968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	0151      	lsls	r1, r2, #5
 800b972:	6a3a      	ldr	r2, [r7, #32]
 800b974:	440a      	add	r2, r1
 800b976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b97a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b97e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	7c9b      	ldrb	r3, [r3, #18]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d162      	bne.n	800ba4e <USB_HC_StartXfer+0x3ea>
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	78db      	ldrb	r3, [r3, #3]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d15e      	bne.n	800ba4e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	3b01      	subs	r3, #1
 800b996:	2b03      	cmp	r3, #3
 800b998:	d858      	bhi.n	800ba4c <USB_HC_StartXfer+0x3e8>
 800b99a:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a0 <USB_HC_StartXfer+0x33c>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800b9d3 	.word	0x0800b9d3
 800b9a8:	0800b9f5 	.word	0x0800b9f5
 800b9ac:	0800ba17 	.word	0x0800ba17
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	69fa      	ldr	r2, [r7, #28]
 800b9c0:	0151      	lsls	r1, r2, #5
 800b9c2:	6a3a      	ldr	r2, [r7, #32]
 800b9c4:	440a      	add	r2, r1
 800b9c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9ce:	6053      	str	r3, [r2, #4]
          break;
 800b9d0:	e03d      	b.n	800ba4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	015a      	lsls	r2, r3, #5
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	4413      	add	r3, r2
 800b9da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	0151      	lsls	r1, r2, #5
 800b9e4:	6a3a      	ldr	r2, [r7, #32]
 800b9e6:	440a      	add	r2, r1
 800b9e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9ec:	f043 030e 	orr.w	r3, r3, #14
 800b9f0:	6053      	str	r3, [r2, #4]
          break;
 800b9f2:	e02c      	b.n	800ba4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	0151      	lsls	r1, r2, #5
 800ba06:	6a3a      	ldr	r2, [r7, #32]
 800ba08:	440a      	add	r2, r1
 800ba0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ba12:	6053      	str	r3, [r2, #4]
          break;
 800ba14:	e01b      	b.n	800ba4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	69fa      	ldr	r2, [r7, #28]
 800ba26:	0151      	lsls	r1, r2, #5
 800ba28:	6a3a      	ldr	r2, [r7, #32]
 800ba2a:	440a      	add	r2, r1
 800ba2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba34:	6053      	str	r3, [r2, #4]
          break;
 800ba36:	e00a      	b.n	800ba4e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba44:	461a      	mov	r2, r3
 800ba46:	2300      	movs	r3, #0
 800ba48:	6053      	str	r3, [r2, #4]
 800ba4a:	e000      	b.n	800ba4e <USB_HC_StartXfer+0x3ea>
          break;
 800ba4c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba64:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	78db      	ldrb	r3, [r3, #3]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	e003      	b.n	800ba80 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ba7e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba86:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba94:	461a      	mov	r2, r3
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	e055      	b.n	800bb50 <USB_HC_StartXfer+0x4ec>
 800baa4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	78db      	ldrb	r3, [r3, #3]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d14e      	bne.n	800bb4e <USB_HC_StartXfer+0x4ea>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d04a      	beq.n	800bb4e <USB_HC_StartXfer+0x4ea>
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	79db      	ldrb	r3, [r3, #7]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d146      	bne.n	800bb4e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	7c9b      	ldrb	r3, [r3, #18]
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	d831      	bhi.n	800bb2c <USB_HC_StartXfer+0x4c8>
 800bac8:	a201      	add	r2, pc, #4	@ (adr r2, 800bad0 <USB_HC_StartXfer+0x46c>)
 800baca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bace:	bf00      	nop
 800bad0:	0800bae1 	.word	0x0800bae1
 800bad4:	0800bb05 	.word	0x0800bb05
 800bad8:	0800bae1 	.word	0x0800bae1
 800badc:	0800bb05 	.word	0x0800bb05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6a1b      	ldr	r3, [r3, #32]
 800bae4:	3303      	adds	r3, #3
 800bae6:	089b      	lsrs	r3, r3, #2
 800bae8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800baea:	8afa      	ldrh	r2, [r7, #22]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d91c      	bls.n	800bb30 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	f043 0220 	orr.w	r2, r3, #32
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	619a      	str	r2, [r3, #24]
        }
        break;
 800bb02:	e015      	b.n	800bb30 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	3303      	adds	r3, #3
 800bb0a:	089b      	lsrs	r3, r3, #2
 800bb0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bb0e:	8afa      	ldrh	r2, [r7, #22]
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d90a      	bls.n	800bb34 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	619a      	str	r2, [r3, #24]
        }
        break;
 800bb2a:	e003      	b.n	800bb34 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800bb2c:	bf00      	nop
 800bb2e:	e002      	b.n	800bb36 <USB_HC_StartXfer+0x4d2>
        break;
 800bb30:	bf00      	nop
 800bb32:	e000      	b.n	800bb36 <USB_HC_StartXfer+0x4d2>
        break;
 800bb34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	6999      	ldr	r1, [r3, #24]
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	785a      	ldrb	r2, [r3, #1]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2000      	movs	r0, #0
 800bb46:	9000      	str	r0, [sp, #0]
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7ff f9d5 	bl	800aef8 <USB_WritePacket>
  }

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3728      	adds	r7, #40	@ 0x28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb6a:	695b      	ldr	r3, [r3, #20]
 800bb6c:	b29b      	uxth	r3, r3
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b089      	sub	sp, #36	@ 0x24
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800bb8a:	78fb      	ldrb	r3, [r7, #3]
 800bb8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	0c9b      	lsrs	r3, r3, #18
 800bba2:	f003 0303 	and.w	r3, r3, #3
 800bba6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	015a      	lsls	r2, r3, #5
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	0fdb      	lsrs	r3, r3, #31
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	0fdb      	lsrs	r3, r3, #31
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f003 0320 	and.w	r3, r3, #32
 800bbdc:	2b20      	cmp	r3, #32
 800bbde:	d10d      	bne.n	800bbfc <USB_HC_Halt+0x82>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10a      	bne.n	800bbfc <USB_HC_Halt+0x82>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d005      	beq.n	800bbf8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d002      	beq.n	800bbf8 <USB_HC_Halt+0x7e>
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d101      	bne.n	800bbfc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e0d8      	b.n	800bdae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <USB_HC_Halt+0x8e>
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d173      	bne.n	800bcf0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	0151      	lsls	r1, r2, #5
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	440a      	add	r2, r1
 800bc1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f003 0320 	and.w	r3, r3, #32
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d14a      	bne.n	800bcca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d133      	bne.n	800bca8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	015a      	lsls	r2, r3, #5
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	69ba      	ldr	r2, [r7, #24]
 800bc50:	0151      	lsls	r1, r2, #5
 800bc52:	69fa      	ldr	r2, [r7, #28]
 800bc54:	440a      	add	r2, r1
 800bc56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc5e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	0151      	lsls	r1, r2, #5
 800bc72:	69fa      	ldr	r2, [r7, #28]
 800bc74:	440a      	add	r2, r1
 800bc76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc7e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	3301      	adds	r3, #1
 800bc84:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc8c:	d82e      	bhi.n	800bcec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	015a      	lsls	r2, r3, #5
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bca4:	d0ec      	beq.n	800bc80 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bca6:	e081      	b.n	800bdac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	0151      	lsls	r1, r2, #5
 800bcba:	69fa      	ldr	r2, [r7, #28]
 800bcbc:	440a      	add	r2, r1
 800bcbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bcc6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bcc8:	e070      	b.n	800bdac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	015a      	lsls	r2, r3, #5
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	69ba      	ldr	r2, [r7, #24]
 800bcda:	0151      	lsls	r1, r2, #5
 800bcdc:	69fa      	ldr	r2, [r7, #28]
 800bcde:	440a      	add	r2, r1
 800bce0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bce4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bce8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bcea:	e05f      	b.n	800bdac <USB_HC_Halt+0x232>
            break;
 800bcec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bcee:	e05d      	b.n	800bdac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69ba      	ldr	r2, [r7, #24]
 800bd00:	0151      	lsls	r1, r2, #5
 800bd02:	69fa      	ldr	r2, [r7, #28]
 800bd04:	440a      	add	r2, r1
 800bd06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d133      	bne.n	800bd88 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	0151      	lsls	r1, r2, #5
 800bd32:	69fa      	ldr	r2, [r7, #28]
 800bd34:	440a      	add	r2, r1
 800bd36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	015a      	lsls	r2, r3, #5
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	4413      	add	r3, r2
 800bd48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	0151      	lsls	r1, r2, #5
 800bd52:	69fa      	ldr	r2, [r7, #28]
 800bd54:	440a      	add	r2, r1
 800bd56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	3301      	adds	r3, #1
 800bd64:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd6c:	d81d      	bhi.n	800bdaa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd84:	d0ec      	beq.n	800bd60 <USB_HC_Halt+0x1e6>
 800bd86:	e011      	b.n	800bdac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	015a      	lsls	r2, r3, #5
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	0151      	lsls	r1, r2, #5
 800bd9a:	69fa      	ldr	r2, [r7, #28]
 800bd9c:	440a      	add	r2, r1
 800bd9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bda2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	e000      	b.n	800bdac <USB_HC_Halt+0x232>
          break;
 800bdaa:	bf00      	nop
    }
  }

  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3724      	adds	r7, #36	@ 0x24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bdcc:	78fb      	ldrb	r3, [r7, #3]
 800bdce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	04da      	lsls	r2, r3, #19
 800bdd8:	4b15      	ldr	r3, [pc, #84]	@ (800be30 <USB_DoPing+0x74>)
 800bdda:	4013      	ands	r3, r2
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	0151      	lsls	r1, r2, #5
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	440a      	add	r2, r1
 800bde4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bde8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bdec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800be04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	4413      	add	r3, r2
 800be16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be1a:	461a      	mov	r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	1ff80000 	.word	0x1ff80000

0800be34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7fe ff98 	bl	800ad7e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be4e:	2110      	movs	r1, #16
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7fe fff1 	bl	800ae38 <USB_FlushTxFifo>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff f81b 	bl	800ae9c <USB_FlushRxFifo>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800be70:	2300      	movs	r3, #0
 800be72:	61bb      	str	r3, [r7, #24]
 800be74:	e01f      	b.n	800beb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	015a      	lsls	r2, r3, #5
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	4413      	add	r3, r2
 800be7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800be9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	015a      	lsls	r2, r3, #5
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	4413      	add	r3, r2
 800bea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beaa:	461a      	mov	r2, r3
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	3301      	adds	r3, #1
 800beb4:	61bb      	str	r3, [r7, #24]
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2b0f      	cmp	r3, #15
 800beba:	d9dc      	bls.n	800be76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bebc:	2300      	movs	r3, #0
 800bebe:	61bb      	str	r3, [r7, #24]
 800bec0:	e034      	b.n	800bf2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bed8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bee0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bee8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	015a      	lsls	r2, r3, #5
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bef6:	461a      	mov	r2, r3
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3301      	adds	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf08:	d80c      	bhi.n	800bf24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	015a      	lsls	r2, r3, #5
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	4413      	add	r3, r2
 800bf12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf20:	d0ec      	beq.n	800befc <USB_StopHost+0xc8>
 800bf22:	e000      	b.n	800bf26 <USB_StopHost+0xf2>
        break;
 800bf24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	61bb      	str	r3, [r7, #24]
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	2b0f      	cmp	r3, #15
 800bf30:	d9c7      	bls.n	800bec2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f04f 32ff 	mov.w	r2, #4294967295
 800bf46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7fe ff07 	bl	800ad5c <USB_EnableGlobalInt>

  return ret;
 800bf4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf5c:	4904      	ldr	r1, [pc, #16]	@ (800bf70 <MX_FATFS_Init+0x18>)
 800bf5e:	4805      	ldr	r0, [pc, #20]	@ (800bf74 <MX_FATFS_Init+0x1c>)
 800bf60:	f005 f818 	bl	8010f94 <FATFS_LinkDriver>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461a      	mov	r2, r3
 800bf68:	4b03      	ldr	r3, [pc, #12]	@ (800bf78 <MX_FATFS_Init+0x20>)
 800bf6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bf6c:	bf00      	nop
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	200005d0 	.word	0x200005d0
 800bf74:	08011944 	.word	0x08011944
 800bf78:	200005cc 	.word	0x200005cc

0800bf7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bf80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bf96:	f000 f89e 	bl	800c0d6 <BSP_SD_IsDetected>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d001      	beq.n	800bfa4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e005      	b.n	800bfb0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bfa4:	4804      	ldr	r0, [pc, #16]	@ (800bfb8 <BSP_SD_Init+0x2c>)
 800bfa6:	f7fb fef3 	bl	8007d90 <HAL_SD_Init>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bfae:	79fb      	ldrb	r3, [r7, #7]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20000324 	.word	0x20000324

0800bfbc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	68f9      	ldr	r1, [r7, #12]
 800bfd8:	4806      	ldr	r0, [pc, #24]	@ (800bff4 <BSP_SD_ReadBlocks+0x38>)
 800bfda:	f7fb ff89 	bl	8007ef0 <HAL_SD_ReadBlocks>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	20000324 	.word	0x20000324

0800bff8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b088      	sub	sp, #32
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
 800c004:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	68f9      	ldr	r1, [r7, #12]
 800c014:	4806      	ldr	r0, [pc, #24]	@ (800c030 <BSP_SD_WriteBlocks+0x38>)
 800c016:	f7fc f949 	bl	80082ac <HAL_SD_WriteBlocks>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c024:	7dfb      	ldrb	r3, [r7, #23]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20000324 	.word	0x20000324

0800c034 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c038:	4805      	ldr	r0, [pc, #20]	@ (800c050 <BSP_SD_GetCardState+0x1c>)
 800c03a:	f7fc fe0d 	bl	8008c58 <HAL_SD_GetCardState>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b04      	cmp	r3, #4
 800c042:	bf14      	ite	ne
 800c044:	2301      	movne	r3, #1
 800c046:	2300      	moveq	r3, #0
 800c048:	b2db      	uxtb	r3, r3
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20000324 	.word	0x20000324

0800c054 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4803      	ldr	r0, [pc, #12]	@ (800c06c <BSP_SD_GetCardInfo+0x18>)
 800c060:	f7fc fdce 	bl	8008c00 <HAL_SD_GetCardInfo>
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20000324 	.word	0x20000324

0800c070 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c078:	f000 f818 	bl	800c0ac <BSP_SD_AbortCallback>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c08c:	f000 f815 	bl	800c0ba <BSP_SD_WriteCpltCallback>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c0a0:	f000 f812 	bl	800c0c8 <BSP_SD_ReadCpltCallback>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0

}
 800c0b0:	bf00      	nop
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	af00      	add	r7, sp, #0

}
 800c0be:	bf00      	nop
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	af00      	add	r7, sp, #0

}
 800c0cc:	bf00      	nop
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c0e0:	f000 f80c 	bl	800c0fc <BSP_PlatformIsDetected>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c0ee:	79fb      	ldrb	r3, [r7, #7]
 800c0f0:	b2db      	uxtb	r3, r3
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c102:	2301      	movs	r3, #1
 800c104:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c106:	2104      	movs	r1, #4
 800c108:	4806      	ldr	r0, [pc, #24]	@ (800c124 <BSP_PlatformIsDetected+0x28>)
 800c10a:	f7f7 fddf 	bl	8003ccc <HAL_GPIO_ReadPin>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c114:	2300      	movs	r3, #0
 800c116:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c118:	79fb      	ldrb	r3, [r7, #7]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	40021800 	.word	0x40021800

0800c128 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c132:	4b0b      	ldr	r3, [pc, #44]	@ (800c160 <SD_CheckStatus+0x38>)
 800c134:	2201      	movs	r2, #1
 800c136:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c138:	f7ff ff7c 	bl	800c034 <BSP_SD_GetCardState>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d107      	bne.n	800c152 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c142:	4b07      	ldr	r3, [pc, #28]	@ (800c160 <SD_CheckStatus+0x38>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f023 0301 	bic.w	r3, r3, #1
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	4b04      	ldr	r3, [pc, #16]	@ (800c160 <SD_CheckStatus+0x38>)
 800c150:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c152:	4b03      	ldr	r3, [pc, #12]	@ (800c160 <SD_CheckStatus+0x38>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	b2db      	uxtb	r3, r3
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20000009 	.word	0x20000009

0800c164 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	4603      	mov	r3, r0
 800c16c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c16e:	4b0b      	ldr	r3, [pc, #44]	@ (800c19c <SD_initialize+0x38>)
 800c170:	2201      	movs	r2, #1
 800c172:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c174:	f7ff ff0a 	bl	800bf8c <BSP_SD_Init>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d107      	bne.n	800c18e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff ffd1 	bl	800c128 <SD_CheckStatus>
 800c186:	4603      	mov	r3, r0
 800c188:	461a      	mov	r2, r3
 800c18a:	4b04      	ldr	r3, [pc, #16]	@ (800c19c <SD_initialize+0x38>)
 800c18c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c18e:	4b03      	ldr	r3, [pc, #12]	@ (800c19c <SD_initialize+0x38>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	b2db      	uxtb	r3, r3
}
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20000009 	.word	0x20000009

0800c1a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ffbb 	bl	800c128 <SD_CheckStatus>
 800c1b2:	4603      	mov	r3, r0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	68b8      	ldr	r0, [r7, #8]
 800c1da:	f7ff feef 	bl	800bfbc <BSP_SD_ReadBlocks>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d107      	bne.n	800c1f4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c1e4:	bf00      	nop
 800c1e6:	f7ff ff25 	bl	800c034 <BSP_SD_GetCardState>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1fa      	bne.n	800c1e6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b086      	sub	sp, #24
 800c202:	af00      	add	r7, sp, #0
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
 800c20a:	4603      	mov	r3, r0
 800c20c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c212:	f04f 33ff 	mov.w	r3, #4294967295
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	68b8      	ldr	r0, [r7, #8]
 800c21c:	f7ff feec 	bl	800bff8 <BSP_SD_WriteBlocks>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d107      	bne.n	800c236 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c226:	bf00      	nop
 800c228:	f7ff ff04 	bl	800c034 <BSP_SD_GetCardState>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1fa      	bne.n	800c228 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c236:	7dfb      	ldrb	r3, [r7, #23]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08c      	sub	sp, #48	@ 0x30
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	603a      	str	r2, [r7, #0]
 800c24a:	71fb      	strb	r3, [r7, #7]
 800c24c:	460b      	mov	r3, r1
 800c24e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c256:	4b25      	ldr	r3, [pc, #148]	@ (800c2ec <SD_ioctl+0xac>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <SD_ioctl+0x28>
 800c264:	2303      	movs	r3, #3
 800c266:	e03c      	b.n	800c2e2 <SD_ioctl+0xa2>

  switch (cmd)
 800c268:	79bb      	ldrb	r3, [r7, #6]
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d834      	bhi.n	800c2d8 <SD_ioctl+0x98>
 800c26e:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <SD_ioctl+0x34>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c285 	.word	0x0800c285
 800c278:	0800c28d 	.word	0x0800c28d
 800c27c:	0800c2a5 	.word	0x0800c2a5
 800c280:	0800c2bf 	.word	0x0800c2bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c28a:	e028      	b.n	800c2de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c28c:	f107 030c 	add.w	r3, r7, #12
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fedf 	bl	800c054 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c2a2:	e01c      	b.n	800c2de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2a4:	f107 030c 	add.w	r3, r7, #12
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff fed3 	bl	800c054 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c2bc:	e00f      	b.n	800c2de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2be:	f107 030c 	add.w	r3, r7, #12
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7ff fec6 	bl	800c054 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ca:	0a5a      	lsrs	r2, r3, #9
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c2d6:	e002      	b.n	800c2de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c2d8:	2304      	movs	r3, #4
 800c2da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c2de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3730      	adds	r7, #48	@ 0x30
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000009 	.word	0x20000009

0800c2f0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c2f0:	b590      	push	{r4, r7, lr}
 800c2f2:	b089      	sub	sp, #36	@ 0x24
 800c2f4:	af04      	add	r7, sp, #16
 800c2f6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fc85 	bl	800cc0e <USBH_FindInterface>
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	2bff      	cmp	r3, #255	@ 0xff
 800c30c:	d002      	beq.n	800c314 <USBH_CDC_InterfaceInit+0x24>
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d901      	bls.n	800c318 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c314:	2302      	movs	r3, #2
 800c316:	e13d      	b.n	800c594 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fc5a 	bl	800cbd6 <USBH_SelectInterface>
 800c322:	4603      	mov	r3, r0
 800c324:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c32c:	2302      	movs	r3, #2
 800c32e:	e131      	b.n	800c594 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c336:	2050      	movs	r0, #80	@ 0x50
 800c338:	f005 f94a 	bl	80115d0 <malloc>
 800c33c:	4603      	mov	r3, r0
 800c33e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c346:	69db      	ldr	r3, [r3, #28]
 800c348:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c350:	2302      	movs	r3, #2
 800c352:	e11f      	b.n	800c594 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c354:	2250      	movs	r2, #80	@ 0x50
 800c356:	2100      	movs	r1, #0
 800c358:	68b8      	ldr	r0, [r7, #8]
 800c35a:	f005 f9f7 	bl	801174c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	211a      	movs	r1, #26
 800c364:	fb01 f303 	mul.w	r3, r1, r3
 800c368:	4413      	add	r3, r2
 800c36a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	b25b      	sxtb	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	da15      	bge.n	800c3a2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	211a      	movs	r1, #26
 800c37c:	fb01 f303 	mul.w	r3, r1, r3
 800c380:	4413      	add	r3, r2
 800c382:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c386:	781a      	ldrb	r2, [r3, #0]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	211a      	movs	r1, #26
 800c392:	fb01 f303 	mul.w	r3, r1, r3
 800c396:	4413      	add	r3, r2
 800c398:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c39c:	881a      	ldrh	r2, [r3, #0]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	785b      	ldrb	r3, [r3, #1]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f001 ffbe 	bl	800e32a <USBH_AllocPipe>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	7819      	ldrb	r1, [r3, #0]
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	7858      	ldrb	r0, [r3, #1]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	8952      	ldrh	r2, [r2, #10]
 800c3ce:	9202      	str	r2, [sp, #8]
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	9201      	str	r2, [sp, #4]
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	4623      	mov	r3, r4
 800c3d8:	4602      	mov	r2, r0
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f001 ff76 	bl	800e2cc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f005 f867 	bl	80114bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	210a      	movs	r1, #10
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fc0a 	bl	800cc0e <USBH_FindInterface>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2bff      	cmp	r3, #255	@ 0xff
 800c402:	d002      	beq.n	800c40a <USBH_CDC_InterfaceInit+0x11a>
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d901      	bls.n	800c40e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c40a:	2302      	movs	r3, #2
 800c40c:	e0c2      	b.n	800c594 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	211a      	movs	r1, #26
 800c414:	fb01 f303 	mul.w	r3, r1, r3
 800c418:	4413      	add	r3, r2
 800c41a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	b25b      	sxtb	r3, r3
 800c422:	2b00      	cmp	r3, #0
 800c424:	da16      	bge.n	800c454 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	211a      	movs	r1, #26
 800c42c:	fb01 f303 	mul.w	r3, r1, r3
 800c430:	4413      	add	r3, r2
 800c432:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c436:	781a      	ldrb	r2, [r3, #0]
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	211a      	movs	r1, #26
 800c442:	fb01 f303 	mul.w	r3, r1, r3
 800c446:	4413      	add	r3, r2
 800c448:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c44c:	881a      	ldrh	r2, [r3, #0]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	835a      	strh	r2, [r3, #26]
 800c452:	e015      	b.n	800c480 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	211a      	movs	r1, #26
 800c45a:	fb01 f303 	mul.w	r3, r1, r3
 800c45e:	4413      	add	r3, r2
 800c460:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c464:	781a      	ldrb	r2, [r3, #0]
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	211a      	movs	r1, #26
 800c470:	fb01 f303 	mul.w	r3, r1, r3
 800c474:	4413      	add	r3, r2
 800c476:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c47a:	881a      	ldrh	r2, [r3, #0]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	211a      	movs	r1, #26
 800c486:	fb01 f303 	mul.w	r3, r1, r3
 800c48a:	4413      	add	r3, r2
 800c48c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	b25b      	sxtb	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	da16      	bge.n	800c4c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	211a      	movs	r1, #26
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	211a      	movs	r1, #26
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c4be:	881a      	ldrh	r2, [r3, #0]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	835a      	strh	r2, [r3, #26]
 800c4c4:	e015      	b.n	800c4f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	211a      	movs	r1, #26
 800c4cc:	fb01 f303 	mul.w	r3, r1, r3
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c4d6:	781a      	ldrb	r2, [r3, #0]
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	211a      	movs	r1, #26
 800c4e2:	fb01 f303 	mul.w	r3, r1, r3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c4ec:	881a      	ldrh	r2, [r3, #0]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	7b9b      	ldrb	r3, [r3, #14]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f001 ff16 	bl	800e32a <USBH_AllocPipe>
 800c4fe:	4603      	mov	r3, r0
 800c500:	461a      	mov	r2, r3
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	7bdb      	ldrb	r3, [r3, #15]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f001 ff0c 	bl	800e32a <USBH_AllocPipe>
 800c512:	4603      	mov	r3, r0
 800c514:	461a      	mov	r2, r3
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	7b59      	ldrb	r1, [r3, #13]
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	7b98      	ldrb	r0, [r3, #14]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	8b12      	ldrh	r2, [r2, #24]
 800c532:	9202      	str	r2, [sp, #8]
 800c534:	2202      	movs	r2, #2
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4623      	mov	r3, r4
 800c53c:	4602      	mov	r2, r0
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 fec4 	bl	800e2cc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	7b19      	ldrb	r1, [r3, #12]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	7bd8      	ldrb	r0, [r3, #15]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	8b52      	ldrh	r2, [r2, #26]
 800c55c:	9202      	str	r2, [sp, #8]
 800c55e:	2202      	movs	r2, #2
 800c560:	9201      	str	r2, [sp, #4]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4623      	mov	r3, r4
 800c566:	4602      	mov	r2, r0
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f001 feaf 	bl	800e2cc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	7b5b      	ldrb	r3, [r3, #13]
 800c57a:	2200      	movs	r2, #0
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f004 ff9c 	bl	80114bc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	7b1b      	ldrb	r3, [r3, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f004 ff95 	bl	80114bc <USBH_LL_SetToggle>

  return USBH_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}

0800c59c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00e      	beq.n	800c5d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f001 fea4 	bl	800e30a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 fecf 	bl	800e36c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	7b1b      	ldrb	r3, [r3, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00e      	beq.n	800c5fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	7b1b      	ldrb	r3, [r3, #12]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 fe91 	bl	800e30a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	7b1b      	ldrb	r3, [r3, #12]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f001 febc 	bl	800e36c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	7b5b      	ldrb	r3, [r3, #13]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00e      	beq.n	800c620 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	7b5b      	ldrb	r3, [r3, #13]
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f001 fe7e 	bl	800e30a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	7b5b      	ldrb	r3, [r3, #13]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f001 fea9 	bl	800e36c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c626:	69db      	ldr	r3, [r3, #28]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00b      	beq.n	800c644 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c632:	69db      	ldr	r3, [r3, #28]
 800c634:	4618      	mov	r0, r3
 800c636:	f004 ffd3 	bl	80115e0 <free>
    phost->pActiveClass->pData = 0U;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c640:	2200      	movs	r2, #0
 800c642:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c65c:	69db      	ldr	r3, [r3, #28]
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3340      	adds	r3, #64	@ 0x40
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f8b1 	bl	800c7ce <GetLineCoding>
 800c66c:	4603      	mov	r3, r0
 800c66e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c670:	7afb      	ldrb	r3, [r7, #11]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c67c:	2102      	movs	r1, #2
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c682:	7afb      	ldrb	r3, [r7, #11]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c694:	2301      	movs	r3, #1
 800c696:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c6ac:	2b04      	cmp	r3, #4
 800c6ae:	d877      	bhi.n	800c7a0 <USBH_CDC_Process+0x114>
 800c6b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b8 <USBH_CDC_Process+0x2c>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c6cd 	.word	0x0800c6cd
 800c6bc:	0800c6d3 	.word	0x0800c6d3
 800c6c0:	0800c703 	.word	0x0800c703
 800c6c4:	0800c777 	.word	0x0800c777
 800c6c8:	0800c785 	.word	0x0800c785
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c6d0:	e06d      	b.n	800c7ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f897 	bl	800c80c <SetLineCoding>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c6e2:	7bbb      	ldrb	r3, [r7, #14]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d104      	bne.n	800c6f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c6f0:	e058      	b.n	800c7a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d055      	beq.n	800c7a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2204      	movs	r2, #4
 800c6fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c700:	e050      	b.n	800c7a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	3340      	adds	r3, #64	@ 0x40
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 f860 	bl	800c7ce <GetLineCoding>
 800c70e:	4603      	mov	r3, r0
 800c710:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c712:	7bbb      	ldrb	r3, [r7, #14]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d126      	bne.n	800c766 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c72a:	791b      	ldrb	r3, [r3, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d13b      	bne.n	800c7a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c73a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d133      	bne.n	800c7a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c74a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d12b      	bne.n	800c7a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c758:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d124      	bne.n	800c7a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f958 	bl	800ca14 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c764:	e020      	b.n	800c7a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c766:	7bbb      	ldrb	r3, [r7, #14]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d01d      	beq.n	800c7a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2204      	movs	r2, #4
 800c770:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c774:	e018      	b.n	800c7a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f867 	bl	800c84a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f8da 	bl	800c936 <CDC_ProcessReception>
      break;
 800c782:	e014      	b.n	800c7ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c784:	2100      	movs	r1, #0
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 f81a 	bl	800d7c0 <USBH_ClrFeature>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c790:	7bbb      	ldrb	r3, [r7, #14]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d10a      	bne.n	800c7ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c79e:	e005      	b.n	800c7ac <USBH_CDC_Process+0x120>

    default:
      break;
 800c7a0:	bf00      	nop
 800c7a2:	e004      	b.n	800c7ae <USBH_CDC_Process+0x122>
      break;
 800c7a4:	bf00      	nop
 800c7a6:	e002      	b.n	800c7ae <USBH_CDC_Process+0x122>
      break;
 800c7a8:	bf00      	nop
 800c7aa:	e000      	b.n	800c7ae <USBH_CDC_Process+0x122>
      break;
 800c7ac:	bf00      	nop

  }

  return status;
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	22a1      	movs	r2, #161	@ 0xa1
 800c7dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2221      	movs	r2, #33	@ 0x21
 800c7e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2207      	movs	r2, #7
 800c7f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2207      	movs	r2, #7
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f001 fb14 	bl	800de2a <USBH_CtlReq>
 800c802:	4603      	mov	r3, r0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2221      	movs	r2, #33	@ 0x21
 800c81a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2220      	movs	r2, #32
 800c820:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2207      	movs	r2, #7
 800c832:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	2207      	movs	r2, #7
 800c838:	4619      	mov	r1, r3
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f001 faf5 	bl	800de2a <USBH_CtlReq>
 800c840:	4603      	mov	r3, r0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b086      	sub	sp, #24
 800c84e:	af02      	add	r7, sp, #8
 800c850:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c85c:	2300      	movs	r3, #0
 800c85e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c866:	2b01      	cmp	r3, #1
 800c868:	d002      	beq.n	800c870 <CDC_ProcessTransmission+0x26>
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d023      	beq.n	800c8b6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c86e:	e05e      	b.n	800c92e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	8b12      	ldrh	r2, [r2, #24]
 800c878:	4293      	cmp	r3, r2
 800c87a:	d90b      	bls.n	800c894 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	69d9      	ldr	r1, [r3, #28]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	8b1a      	ldrh	r2, [r3, #24]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	7b5b      	ldrb	r3, [r3, #13]
 800c888:	2001      	movs	r0, #1
 800c88a:	9000      	str	r0, [sp, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f001 fcda 	bl	800e246 <USBH_BulkSendData>
 800c892:	e00b      	b.n	800c8ac <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	7b5b      	ldrb	r3, [r3, #13]
 800c8a2:	2001      	movs	r0, #1
 800c8a4:	9000      	str	r0, [sp, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f001 fccd 	bl	800e246 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c8b4:	e03b      	b.n	800c92e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	7b5b      	ldrb	r3, [r3, #13]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f004 fdd3 	bl	8011468 <USBH_LL_GetURBState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c8c6:	7afb      	ldrb	r3, [r7, #11]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d128      	bne.n	800c91e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	8b12      	ldrh	r2, [r2, #24]
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d90e      	bls.n	800c8f6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	8b12      	ldrh	r2, [r2, #24]
 800c8e0:	1a9a      	subs	r2, r3, r2
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	8b12      	ldrh	r2, [r2, #24]
 800c8ee:	441a      	add	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	61da      	str	r2, [r3, #28]
 800c8f4:	e002      	b.n	800c8fc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c90c:	e00e      	b.n	800c92c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f868 	bl	800c9ec <USBH_CDC_TransmitCallback>
      break;
 800c91c:	e006      	b.n	800c92c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c91e:	7afb      	ldrb	r3, [r7, #11]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d103      	bne.n	800c92c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c92c:	bf00      	nop
  }
}
 800c92e:	bf00      	nop
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b086      	sub	sp, #24
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c944:	69db      	ldr	r3, [r3, #28]
 800c946:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c948:	2300      	movs	r3, #0
 800c94a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c952:	2b03      	cmp	r3, #3
 800c954:	d002      	beq.n	800c95c <CDC_ProcessReception+0x26>
 800c956:	2b04      	cmp	r3, #4
 800c958:	d00e      	beq.n	800c978 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c95a:	e043      	b.n	800c9e4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	6a19      	ldr	r1, [r3, #32]
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	8b5a      	ldrh	r2, [r3, #26]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	7b1b      	ldrb	r3, [r3, #12]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 fc91 	bl	800e290 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2204      	movs	r2, #4
 800c972:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c976:	e035      	b.n	800c9e4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	7b1b      	ldrb	r3, [r3, #12]
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f004 fd72 	bl	8011468 <USBH_LL_GetURBState>
 800c984:	4603      	mov	r3, r0
 800c986:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c988:	7cfb      	ldrb	r3, [r7, #19]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d129      	bne.n	800c9e2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	7b1b      	ldrb	r3, [r3, #12]
 800c992:	4619      	mov	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f004 fcd5 	bl	8011344 <USBH_LL_GetLastXferSize>
 800c99a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d016      	beq.n	800c9d4 <CDC_ProcessReception+0x9e>
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	8b5b      	ldrh	r3, [r3, #26]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d110      	bne.n	800c9d4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	1ad2      	subs	r2, r2, r3
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	441a      	add	r2, r3
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2203      	movs	r2, #3
 800c9ce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c9d2:	e006      	b.n	800c9e2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f80f 	bl	800ca00 <USBH_CDC_ReceiveCallback>
      break;
 800c9e2:	bf00      	nop
  }
}
 800c9e4:	bf00      	nop
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	4613      	mov	r3, r2
 800ca34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	e029      	b.n	800ca94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	79fa      	ldrb	r2, [r7, #7]
 800ca44:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 f81f 	bl	800ca9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f004 fba5 	bl	80111dc <USBH_LL_Init>

  return USBH_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800caa4:	2300      	movs	r3, #0
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800caa8:	2300      	movs	r3, #0
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	e009      	b.n	800cac2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	33e0      	adds	r3, #224	@ 0xe0
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	2200      	movs	r2, #0
 800caba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3301      	adds	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b0f      	cmp	r3, #15
 800cac6:	d9f2      	bls.n	800caae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cac8:	2300      	movs	r3, #0
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	e009      	b.n	800cae2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cad8:	2200      	movs	r2, #0
 800cada:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3301      	adds	r3, #1
 800cae0:	60fb      	str	r3, [r7, #12]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cae8:	d3f1      	bcc.n	800cace <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2240      	movs	r2, #64	@ 0x40
 800cb0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	331c      	adds	r3, #28
 800cb3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb3e:	2100      	movs	r1, #0
 800cb40:	4618      	mov	r0, r3
 800cb42:	f004 fe03 	bl	801174c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb50:	2100      	movs	r1, #0
 800cb52:	4618      	mov	r0, r3
 800cb54:	f004 fdfa 	bl	801174c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cb5e:	2212      	movs	r2, #18
 800cb60:	2100      	movs	r1, #0
 800cb62:	4618      	mov	r0, r3
 800cb64:	f004 fdf2 	bl	801174c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cb6e:	223e      	movs	r2, #62	@ 0x3e
 800cb70:	2100      	movs	r1, #0
 800cb72:	4618      	mov	r0, r3
 800cb74:	f004 fdea 	bl	801174c <memset>

  return USBH_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb82:	b480      	push	{r7}
 800cb84:	b085      	sub	sp, #20
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d016      	beq.n	800cbc4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10e      	bne.n	800cbbe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cba6:	1c59      	adds	r1, r3, #1
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	33de      	adds	r3, #222	@ 0xde
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]
 800cbbc:	e004      	b.n	800cbc8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	73fb      	strb	r3, [r7, #15]
 800cbc2:	e001      	b.n	800cbc8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800cbec:	78fa      	ldrb	r2, [r7, #3]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d204      	bcs.n	800cbfc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	78fa      	ldrb	r2, [r7, #3]
 800cbf6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800cbfa:	e001      	b.n	800cc00 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b087      	sub	sp, #28
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	4608      	mov	r0, r1
 800cc18:	4611      	mov	r1, r2
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	70fb      	strb	r3, [r7, #3]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70bb      	strb	r3, [r7, #2]
 800cc24:	4613      	mov	r3, r2
 800cc26:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cc36:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc38:	e025      	b.n	800cc86 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	221a      	movs	r2, #26
 800cc3e:	fb02 f303 	mul.w	r3, r2, r3
 800cc42:	3308      	adds	r3, #8
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	4413      	add	r3, r2
 800cc48:	3302      	adds	r3, #2
 800cc4a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	795b      	ldrb	r3, [r3, #5]
 800cc50:	78fa      	ldrb	r2, [r7, #3]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d002      	beq.n	800cc5c <USBH_FindInterface+0x4e>
 800cc56:	78fb      	ldrb	r3, [r7, #3]
 800cc58:	2bff      	cmp	r3, #255	@ 0xff
 800cc5a:	d111      	bne.n	800cc80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cc60:	78ba      	ldrb	r2, [r7, #2]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d002      	beq.n	800cc6c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc66:	78bb      	ldrb	r3, [r7, #2]
 800cc68:	2bff      	cmp	r3, #255	@ 0xff
 800cc6a:	d109      	bne.n	800cc80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc70:	787a      	ldrb	r2, [r7, #1]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d002      	beq.n	800cc7c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc76:	787b      	ldrb	r3, [r7, #1]
 800cc78:	2bff      	cmp	r3, #255	@ 0xff
 800cc7a:	d101      	bne.n	800cc80 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
 800cc7e:	e006      	b.n	800cc8e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	3301      	adds	r3, #1
 800cc84:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d9d6      	bls.n	800cc3a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cc8c:	23ff      	movs	r3, #255	@ 0xff
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f004 fad6 	bl	8011254 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cca8:	2101      	movs	r1, #1
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f004 fbef 	bl	801148e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af04      	add	r7, sp, #16
 800ccc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d102      	bne.n	800ccde <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b0b      	cmp	r3, #11
 800cce6:	f200 81bb 	bhi.w	800d060 <USBH_Process+0x3a4>
 800ccea:	a201      	add	r2, pc, #4	@ (adr r2, 800ccf0 <USBH_Process+0x34>)
 800ccec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf0:	0800cd21 	.word	0x0800cd21
 800ccf4:	0800cd53 	.word	0x0800cd53
 800ccf8:	0800cdbb 	.word	0x0800cdbb
 800ccfc:	0800cffb 	.word	0x0800cffb
 800cd00:	0800d061 	.word	0x0800d061
 800cd04:	0800ce5b 	.word	0x0800ce5b
 800cd08:	0800cfa1 	.word	0x0800cfa1
 800cd0c:	0800ce91 	.word	0x0800ce91
 800cd10:	0800ceb1 	.word	0x0800ceb1
 800cd14:	0800cecf 	.word	0x0800cecf
 800cd18:	0800cf13 	.word	0x0800cf13
 800cd1c:	0800cfe3 	.word	0x0800cfe3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 819b 	beq.w	800d064 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cd34:	20c8      	movs	r0, #200	@ 0xc8
 800cd36:	f004 fbf4 	bl	8011522 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f004 fae7 	bl	801130e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cd50:	e188      	b.n	800d064 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d107      	bne.n	800cd6c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2202      	movs	r2, #2
 800cd68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd6a:	e18a      	b.n	800d082 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cd72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd76:	d914      	bls.n	800cda2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cd7e:	3301      	adds	r3, #1
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d903      	bls.n	800cd9a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	220d      	movs	r2, #13
 800cd96:	701a      	strb	r2, [r3, #0]
      break;
 800cd98:	e173      	b.n	800d082 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
      break;
 800cda0:	e16f      	b.n	800d082 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cda8:	f103 020a 	add.w	r2, r3, #10
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800cdb2:	200a      	movs	r0, #10
 800cdb4:	f004 fbb5 	bl	8011522 <USBH_Delay>
      break;
 800cdb8:	e163      	b.n	800d082 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d005      	beq.n	800cdd0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cdca:	2104      	movs	r1, #4
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cdd0:	2064      	movs	r0, #100	@ 0x64
 800cdd2:	f004 fba6 	bl	8011522 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f004 fa72 	bl	80112c0 <USBH_LL_GetSpeed>
 800cddc:	4603      	mov	r3, r0
 800cdde:	461a      	mov	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2205      	movs	r2, #5
 800cdea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cdec:	2100      	movs	r1, #0
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f001 fa9b 	bl	800e32a <USBH_AllocPipe>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cdfc:	2180      	movs	r1, #128	@ 0x80
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f001 fa93 	bl	800e32a <USBH_AllocPipe>
 800ce04:	4603      	mov	r3, r0
 800ce06:	461a      	mov	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	7919      	ldrb	r1, [r3, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ce20:	9202      	str	r2, [sp, #8]
 800ce22:	2200      	movs	r2, #0
 800ce24:	9201      	str	r2, [sp, #4]
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2280      	movs	r2, #128	@ 0x80
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f001 fa4d 	bl	800e2cc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7959      	ldrb	r1, [r3, #5]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce46:	9202      	str	r2, [sp, #8]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	9201      	str	r2, [sp, #4]
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2200      	movs	r2, #0
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f001 fa3a 	bl	800e2cc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce58:	e113      	b.n	800d082 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f916 	bl	800d08c <USBH_HandleEnum>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f040 80fd 	bne.w	800d068 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d103      	bne.n	800ce88 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2208      	movs	r2, #8
 800ce84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce86:	e0ef      	b.n	800d068 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2207      	movs	r2, #7
 800ce8c:	701a      	strb	r2, [r3, #0]
      break;
 800ce8e:	e0eb      	b.n	800d068 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 80e8 	beq.w	800d06c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cea2:	2101      	movs	r1, #1
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2208      	movs	r2, #8
 800ceac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ceae:	e0dd      	b.n	800d06c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fc3a 	bl	800d732 <USBH_SetCfg>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f040 80d5 	bne.w	800d070 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2209      	movs	r2, #9
 800ceca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cecc:	e0d0      	b.n	800d070 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ced4:	f003 0320 	and.w	r3, r3, #32
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d016      	beq.n	800cf0a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cedc:	2101      	movs	r1, #1
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fc4a 	bl	800d778 <USBH_SetFeature>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d103      	bne.n	800cef8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	220a      	movs	r2, #10
 800cef4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cef6:	e0bd      	b.n	800d074 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800cef8:	7bbb      	ldrb	r3, [r7, #14]
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	f040 80b9 	bne.w	800d074 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	220a      	movs	r2, #10
 800cf06:	701a      	strb	r2, [r3, #0]
      break;
 800cf08:	e0b4      	b.n	800d074 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	220a      	movs	r2, #10
 800cf0e:	701a      	strb	r2, [r3, #0]
      break;
 800cf10:	e0b0      	b.n	800d074 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 80ad 	beq.w	800d078 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
 800cf2a:	e016      	b.n	800cf5a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cf2c:	7bfa      	ldrb	r2, [r7, #15]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	32de      	adds	r2, #222	@ 0xde
 800cf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf36:	791a      	ldrb	r2, [r3, #4]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d108      	bne.n	800cf54 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cf42:	7bfa      	ldrb	r2, [r7, #15]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	32de      	adds	r2, #222	@ 0xde
 800cf48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800cf52:	e005      	b.n	800cf60 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	3301      	adds	r3, #1
 800cf58:	73fb      	strb	r3, [r7, #15]
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d0e5      	beq.n	800cf2c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d016      	beq.n	800cf98 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d109      	bne.n	800cf90 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2206      	movs	r2, #6
 800cf80:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf88:	2103      	movs	r1, #3
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf8e:	e073      	b.n	800d078 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	220d      	movs	r2, #13
 800cf94:	701a      	strb	r2, [r3, #0]
      break;
 800cf96:	e06f      	b.n	800d078 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	220d      	movs	r2, #13
 800cf9c:	701a      	strb	r2, [r3, #0]
      break;
 800cf9e:	e06b      	b.n	800d078 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d017      	beq.n	800cfda <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	4798      	blx	r3
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cfba:	7bbb      	ldrb	r3, [r7, #14]
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d103      	bne.n	800cfca <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	220b      	movs	r2, #11
 800cfc6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfc8:	e058      	b.n	800d07c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d154      	bne.n	800d07c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	220d      	movs	r2, #13
 800cfd6:	701a      	strb	r2, [r3, #0]
      break;
 800cfd8:	e050      	b.n	800d07c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	220d      	movs	r2, #13
 800cfde:	701a      	strb	r2, [r3, #0]
      break;
 800cfe0:	e04c      	b.n	800d07c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d049      	beq.n	800d080 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
      }
      break;
 800cff8:	e042      	b.n	800d080 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff fd4a 	bl	800ca9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d009      	beq.n	800d026 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d036:	2105      	movs	r1, #5
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b01      	cmp	r3, #1
 800d046:	d107      	bne.n	800d058 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff fe22 	bl	800cc9a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d056:	e014      	b.n	800d082 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f004 f8fb 	bl	8011254 <USBH_LL_Start>
      break;
 800d05e:	e010      	b.n	800d082 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d060:	bf00      	nop
 800d062:	e00e      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d064:	bf00      	nop
 800d066:	e00c      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d068:	bf00      	nop
 800d06a:	e00a      	b.n	800d082 <USBH_Process+0x3c6>
    break;
 800d06c:	bf00      	nop
 800d06e:	e008      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d070:	bf00      	nop
 800d072:	e006      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d074:	bf00      	nop
 800d076:	e004      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d078:	bf00      	nop
 800d07a:	e002      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d07c:	bf00      	nop
 800d07e:	e000      	b.n	800d082 <USBH_Process+0x3c6>
      break;
 800d080:	bf00      	nop
  }
  return USBH_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b088      	sub	sp, #32
 800d090:	af04      	add	r7, sp, #16
 800d092:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d094:	2301      	movs	r3, #1
 800d096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d098:	2301      	movs	r3, #1
 800d09a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	785b      	ldrb	r3, [r3, #1]
 800d0a0:	2b07      	cmp	r3, #7
 800d0a2:	f200 81bd 	bhi.w	800d420 <USBH_HandleEnum+0x394>
 800d0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <USBH_HandleEnum+0x20>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d0cd 	.word	0x0800d0cd
 800d0b0:	0800d187 	.word	0x0800d187
 800d0b4:	0800d1f1 	.word	0x0800d1f1
 800d0b8:	0800d27b 	.word	0x0800d27b
 800d0bc:	0800d2e5 	.word	0x0800d2e5
 800d0c0:	0800d355 	.word	0x0800d355
 800d0c4:	0800d39b 	.word	0x0800d39b
 800d0c8:	0800d3e1 	.word	0x0800d3e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d0cc:	2108      	movs	r1, #8
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fa4c 	bl	800d56c <USBH_Get_DevDesc>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0d8:	7bbb      	ldrb	r3, [r7, #14]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d12e      	bne.n	800d13c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	7919      	ldrb	r1, [r3, #4]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d102:	9202      	str	r2, [sp, #8]
 800d104:	2200      	movs	r2, #0
 800d106:	9201      	str	r2, [sp, #4]
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	4603      	mov	r3, r0
 800d10c:	2280      	movs	r2, #128	@ 0x80
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f001 f8dc 	bl	800e2cc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	7959      	ldrb	r1, [r3, #5]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d128:	9202      	str	r2, [sp, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	9201      	str	r2, [sp, #4]
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	4603      	mov	r3, r0
 800d132:	2200      	movs	r2, #0
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 f8c9 	bl	800e2cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d13a:	e173      	b.n	800d424 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d13c:	7bbb      	ldrb	r3, [r7, #14]
 800d13e:	2b03      	cmp	r3, #3
 800d140:	f040 8170 	bne.w	800d424 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d14a:	3301      	adds	r3, #1
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d903      	bls.n	800d166 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	220d      	movs	r2, #13
 800d162:	701a      	strb	r2, [r3, #0]
      break;
 800d164:	e15e      	b.n	800d424 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	795b      	ldrb	r3, [r3, #5]
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f001 f8fd 	bl	800e36c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	791b      	ldrb	r3, [r3, #4]
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f001 f8f7 	bl	800e36c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	701a      	strb	r2, [r3, #0]
      break;
 800d184:	e14e      	b.n	800d424 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d186:	2112      	movs	r1, #18
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f9ef 	bl	800d56c <USBH_Get_DevDesc>
 800d18e:	4603      	mov	r3, r0
 800d190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d192:	7bbb      	ldrb	r3, [r7, #14]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d103      	bne.n	800d1a0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2202      	movs	r2, #2
 800d19c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d19e:	e143      	b.n	800d428 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	f040 8140 	bne.w	800d428 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d903      	bls.n	800d1ca <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	220d      	movs	r2, #13
 800d1c6:	701a      	strb	r2, [r3, #0]
      break;
 800d1c8:	e12e      	b.n	800d428 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	795b      	ldrb	r3, [r3, #5]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f001 f8cb 	bl	800e36c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	791b      	ldrb	r3, [r3, #4]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f001 f8c5 	bl	800e36c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	701a      	strb	r2, [r3, #0]
      break;
 800d1ee:	e11b      	b.n	800d428 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fa79 	bl	800d6ea <USBH_SetAddress>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d1fc:	7bbb      	ldrb	r3, [r7, #14]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d130      	bne.n	800d264 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d202:	2002      	movs	r0, #2
 800d204:	f004 f98d 	bl	8011522 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2203      	movs	r2, #3
 800d214:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7919      	ldrb	r1, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d22a:	9202      	str	r2, [sp, #8]
 800d22c:	2200      	movs	r2, #0
 800d22e:	9201      	str	r2, [sp, #4]
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	4603      	mov	r3, r0
 800d234:	2280      	movs	r2, #128	@ 0x80
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 f848 	bl	800e2cc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	7959      	ldrb	r1, [r3, #5]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d250:	9202      	str	r2, [sp, #8]
 800d252:	2200      	movs	r2, #0
 800d254:	9201      	str	r2, [sp, #4]
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	4603      	mov	r3, r0
 800d25a:	2200      	movs	r2, #0
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 f835 	bl	800e2cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d262:	e0e3      	b.n	800d42c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	2b03      	cmp	r3, #3
 800d268:	f040 80e0 	bne.w	800d42c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	220d      	movs	r2, #13
 800d270:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	705a      	strb	r2, [r3, #1]
      break;
 800d278:	e0d8      	b.n	800d42c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d27a:	2109      	movs	r1, #9
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f9a1 	bl	800d5c4 <USBH_Get_CfgDesc>
 800d282:	4603      	mov	r3, r0
 800d284:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d286:	7bbb      	ldrb	r3, [r7, #14]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d103      	bne.n	800d294 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2204      	movs	r2, #4
 800d290:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d292:	e0cd      	b.n	800d430 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	2b03      	cmp	r3, #3
 800d298:	f040 80ca 	bne.w	800d430 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d903      	bls.n	800d2be <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	220d      	movs	r2, #13
 800d2ba:	701a      	strb	r2, [r3, #0]
      break;
 800d2bc:	e0b8      	b.n	800d430 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	795b      	ldrb	r3, [r3, #5]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f001 f851 	bl	800e36c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	791b      	ldrb	r3, [r3, #4]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 f84b 	bl	800e36c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	701a      	strb	r2, [r3, #0]
      break;
 800d2e2:	e0a5      	b.n	800d430 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f969 	bl	800d5c4 <USBH_Get_CfgDesc>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d103      	bne.n	800d304 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2205      	movs	r2, #5
 800d300:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d302:	e097      	b.n	800d434 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d304:	7bbb      	ldrb	r3, [r7, #14]
 800d306:	2b03      	cmp	r3, #3
 800d308:	f040 8094 	bne.w	800d434 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d312:	3301      	adds	r3, #1
 800d314:	b2da      	uxtb	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d322:	2b03      	cmp	r3, #3
 800d324:	d903      	bls.n	800d32e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	220d      	movs	r2, #13
 800d32a:	701a      	strb	r2, [r3, #0]
      break;
 800d32c:	e082      	b.n	800d434 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	795b      	ldrb	r3, [r3, #5]
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 f819 	bl	800e36c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	791b      	ldrb	r3, [r3, #4]
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f001 f813 	bl	800e36c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	701a      	strb	r2, [r3, #0]
      break;
 800d352:	e06f      	b.n	800d434 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d019      	beq.n	800d392 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d36a:	23ff      	movs	r3, #255	@ 0xff
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f953 	bl	800d618 <USBH_Get_StringDesc>
 800d372:	4603      	mov	r3, r0
 800d374:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d376:	7bbb      	ldrb	r3, [r7, #14]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d103      	bne.n	800d384 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2206      	movs	r2, #6
 800d380:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d382:	e059      	b.n	800d438 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d384:	7bbb      	ldrb	r3, [r7, #14]
 800d386:	2b03      	cmp	r3, #3
 800d388:	d156      	bne.n	800d438 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2206      	movs	r2, #6
 800d38e:	705a      	strb	r2, [r3, #1]
      break;
 800d390:	e052      	b.n	800d438 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2206      	movs	r2, #6
 800d396:	705a      	strb	r2, [r3, #1]
      break;
 800d398:	e04e      	b.n	800d438 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d019      	beq.n	800d3d8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d3b0:	23ff      	movs	r3, #255	@ 0xff
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f930 	bl	800d618 <USBH_Get_StringDesc>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d103      	bne.n	800d3ca <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2207      	movs	r2, #7
 800d3c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d3c8:	e038      	b.n	800d43c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3ca:	7bbb      	ldrb	r3, [r7, #14]
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d135      	bne.n	800d43c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2207      	movs	r2, #7
 800d3d4:	705a      	strb	r2, [r3, #1]
      break;
 800d3d6:	e031      	b.n	800d43c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2207      	movs	r2, #7
 800d3dc:	705a      	strb	r2, [r3, #1]
      break;
 800d3de:	e02d      	b.n	800d43c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d017      	beq.n	800d41a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d3f6:	23ff      	movs	r3, #255	@ 0xff
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f90d 	bl	800d618 <USBH_Get_StringDesc>
 800d3fe:	4603      	mov	r3, r0
 800d400:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d402:	7bbb      	ldrb	r3, [r7, #14]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d102      	bne.n	800d40e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d40c:	e018      	b.n	800d440 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
 800d410:	2b03      	cmp	r3, #3
 800d412:	d115      	bne.n	800d440 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
      break;
 800d418:	e012      	b.n	800d440 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	73fb      	strb	r3, [r7, #15]
      break;
 800d41e:	e00f      	b.n	800d440 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d420:	bf00      	nop
 800d422:	e00e      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d424:	bf00      	nop
 800d426:	e00c      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d428:	bf00      	nop
 800d42a:	e00a      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d42c:	bf00      	nop
 800d42e:	e008      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d430:	bf00      	nop
 800d432:	e006      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d434:	bf00      	nop
 800d436:	e004      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d438:	bf00      	nop
 800d43a:	e002      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d43c:	bf00      	nop
 800d43e:	e000      	b.n	800d442 <USBH_HandleEnum+0x3b6>
      break;
 800d440:	bf00      	nop
  }
  return Status;
 800d442:	7bfb      	ldrb	r3, [r7, #15]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	683a      	ldr	r2, [r7, #0]
 800d45a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d45e:	bf00      	nop
 800d460:	370c      	adds	r7, #12
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b082      	sub	sp, #8
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f804 	bl	800d48e <USBH_HandleSof>
}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b082      	sub	sp, #8
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b0b      	cmp	r3, #11
 800d49e:	d10a      	bne.n	800d4b6 <USBH_HandleSof+0x28>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d005      	beq.n	800d4b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	4798      	blx	r3
  }
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d4ce:	bf00      	nop
}
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b083      	sub	sp, #12
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d4ea:	bf00      	nop
}
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b083      	sub	sp, #12
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f003 fea0 	bl	801128a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	791b      	ldrb	r3, [r3, #4]
 800d54e:	4619      	mov	r1, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 ff0b 	bl	800e36c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	795b      	ldrb	r3, [r3, #5]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 ff05 	bl	800e36c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af02      	add	r7, sp, #8
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d578:	887b      	ldrh	r3, [r7, #2]
 800d57a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d57e:	d901      	bls.n	800d584 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d580:	2303      	movs	r3, #3
 800d582:	e01b      	b.n	800d5bc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d58a:	887b      	ldrh	r3, [r7, #2]
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	4613      	mov	r3, r2
 800d590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d594:	2100      	movs	r1, #0
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f872 	bl	800d680 <USBH_GetDescriptor>
 800d59c:	4603      	mov	r3, r0
 800d59e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d109      	bne.n	800d5ba <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d5ac:	887a      	ldrh	r2, [r7, #2]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f929 	bl	800d808 <USBH_ParseDevDesc>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af02      	add	r7, sp, #8
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	331c      	adds	r3, #28
 800d5d4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d5d6:	887b      	ldrh	r3, [r7, #2]
 800d5d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5dc:	d901      	bls.n	800d5e2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e016      	b.n	800d610 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d5e2:	887b      	ldrh	r3, [r7, #2]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f846 	bl	800d680 <USBH_GetDescriptor>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d107      	bne.n	800d60e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d5fe:	887b      	ldrh	r3, [r7, #2]
 800d600:	461a      	mov	r2, r3
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 f9af 	bl	800d968 <USBH_ParseCfgDesc>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af02      	add	r7, sp, #8
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	607a      	str	r2, [r7, #4]
 800d622:	461a      	mov	r2, r3
 800d624:	460b      	mov	r3, r1
 800d626:	72fb      	strb	r3, [r7, #11]
 800d628:	4613      	mov	r3, r2
 800d62a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d62c:	893b      	ldrh	r3, [r7, #8]
 800d62e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d632:	d802      	bhi.n	800d63a <USBH_Get_StringDesc+0x22>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d63a:	2303      	movs	r3, #3
 800d63c:	e01c      	b.n	800d678 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	b29b      	uxth	r3, r3
 800d642:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d646:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d64e:	893b      	ldrh	r3, [r7, #8]
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	460b      	mov	r3, r1
 800d654:	2100      	movs	r1, #0
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f000 f812 	bl	800d680 <USBH_GetDescriptor>
 800d65c:	4603      	mov	r3, r0
 800d65e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d660:	7dfb      	ldrb	r3, [r7, #23]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d107      	bne.n	800d676 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d66c:	893a      	ldrh	r2, [r7, #8]
 800d66e:	6879      	ldr	r1, [r7, #4]
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fb8d 	bl	800dd90 <USBH_ParseStringDesc>
  }

  return status;
 800d676:	7dfb      	ldrb	r3, [r7, #23]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	607b      	str	r3, [r7, #4]
 800d68a:	460b      	mov	r3, r1
 800d68c:	72fb      	strb	r3, [r7, #11]
 800d68e:	4613      	mov	r3, r2
 800d690:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	789b      	ldrb	r3, [r3, #2]
 800d696:	2b01      	cmp	r3, #1
 800d698:	d11c      	bne.n	800d6d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d69a:	7afb      	ldrb	r3, [r7, #11]
 800d69c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2206      	movs	r2, #6
 800d6aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	893a      	ldrh	r2, [r7, #8]
 800d6b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d6b2:	893b      	ldrh	r3, [r7, #8]
 800d6b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d6b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d6bc:	d104      	bne.n	800d6c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f240 4209 	movw	r2, #1033	@ 0x409
 800d6c4:	829a      	strh	r2, [r3, #20]
 800d6c6:	e002      	b.n	800d6ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	8b3a      	ldrh	r2, [r7, #24]
 800d6d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d6d4:	8b3b      	ldrh	r3, [r7, #24]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	6879      	ldr	r1, [r7, #4]
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f000 fba5 	bl	800de2a <USBH_CtlReq>
 800d6e0:	4603      	mov	r3, r0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	789b      	ldrb	r3, [r3, #2]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d10f      	bne.n	800d71e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2205      	movs	r2, #5
 800d708:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d70a:	78fb      	ldrb	r3, [r7, #3]
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d71e:	2200      	movs	r2, #0
 800d720:	2100      	movs	r1, #0
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 fb81 	bl	800de2a <USBH_CtlReq>
 800d728:	4603      	mov	r3, r0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	460b      	mov	r3, r1
 800d73c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	789b      	ldrb	r3, [r3, #2]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d10e      	bne.n	800d764 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2209      	movs	r2, #9
 800d750:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	887a      	ldrh	r2, [r7, #2]
 800d756:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d764:	2200      	movs	r2, #0
 800d766:	2100      	movs	r1, #0
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fb5e 	bl	800de2a <USBH_CtlReq>
 800d76e:	4603      	mov	r3, r0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	460b      	mov	r3, r1
 800d782:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	789b      	ldrb	r3, [r3, #2]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d10f      	bne.n	800d7ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2203      	movs	r2, #3
 800d796:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d798:	78fb      	ldrb	r3, [r7, #3]
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fb3a 	bl	800de2a <USBH_CtlReq>
 800d7b6:	4603      	mov	r3, r0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	789b      	ldrb	r3, [r3, #2]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d10f      	bne.n	800d7f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2202      	movs	r2, #2
 800d7d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d7e6:	78fb      	ldrb	r3, [r7, #3]
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fb16 	bl	800de2a <USBH_CtlReq>
 800d7fe:	4603      	mov	r3, r0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	4613      	mov	r3, r2
 800d814:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d81c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d101      	bne.n	800d82c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d828:	2302      	movs	r3, #2
 800d82a:	e094      	b.n	800d956 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	781a      	ldrb	r2, [r3, #0]
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	785a      	ldrb	r2, [r3, #1]
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	3302      	adds	r3, #2
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	3303      	adds	r3, #3
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	021b      	lsls	r3, r3, #8
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	4313      	orrs	r3, r2
 800d850:	b29a      	uxth	r2, r3
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	791a      	ldrb	r2, [r3, #4]
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	795a      	ldrb	r2, [r3, #5]
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	799a      	ldrb	r2, [r3, #6]
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	79da      	ldrb	r2, [r3, #7]
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d004      	beq.n	800d88a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d886:	2b01      	cmp	r3, #1
 800d888:	d11b      	bne.n	800d8c2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	79db      	ldrb	r3, [r3, #7]
 800d88e:	2b20      	cmp	r3, #32
 800d890:	dc0f      	bgt.n	800d8b2 <USBH_ParseDevDesc+0xaa>
 800d892:	2b08      	cmp	r3, #8
 800d894:	db0f      	blt.n	800d8b6 <USBH_ParseDevDesc+0xae>
 800d896:	3b08      	subs	r3, #8
 800d898:	4a32      	ldr	r2, [pc, #200]	@ (800d964 <USBH_ParseDevDesc+0x15c>)
 800d89a:	fa22 f303 	lsr.w	r3, r2, r3
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bf14      	ite	ne
 800d8a6:	2301      	movne	r3, #1
 800d8a8:	2300      	moveq	r3, #0
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d106      	bne.n	800d8be <USBH_ParseDevDesc+0xb6>
 800d8b0:	e001      	b.n	800d8b6 <USBH_ParseDevDesc+0xae>
 800d8b2:	2b40      	cmp	r3, #64	@ 0x40
 800d8b4:	d003      	beq.n	800d8be <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	2208      	movs	r2, #8
 800d8ba:	71da      	strb	r2, [r3, #7]
        break;
 800d8bc:	e000      	b.n	800d8c0 <USBH_ParseDevDesc+0xb8>
        break;
 800d8be:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d8c0:	e00e      	b.n	800d8e0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d107      	bne.n	800d8dc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	79db      	ldrb	r3, [r3, #7]
 800d8d0:	2b08      	cmp	r3, #8
 800d8d2:	d005      	beq.n	800d8e0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	2208      	movs	r2, #8
 800d8d8:	71da      	strb	r2, [r3, #7]
 800d8da:	e001      	b.n	800d8e0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d8e0:	88fb      	ldrh	r3, [r7, #6]
 800d8e2:	2b08      	cmp	r3, #8
 800d8e4:	d936      	bls.n	800d954 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	3309      	adds	r3, #9
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	330a      	adds	r3, #10
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	330b      	adds	r3, #11
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	021b      	lsls	r3, r3, #8
 800d910:	b29b      	uxth	r3, r3
 800d912:	4313      	orrs	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	330c      	adds	r3, #12
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	330d      	adds	r3, #13
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	4313      	orrs	r3, r2
 800d92e:	b29a      	uxth	r2, r3
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	7b9a      	ldrb	r2, [r3, #14]
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	7bda      	ldrb	r2, [r3, #15]
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	7c1a      	ldrb	r2, [r3, #16]
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	7c5a      	ldrb	r2, [r3, #17]
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d954:	7dfb      	ldrb	r3, [r7, #23]
}
 800d956:	4618      	mov	r0, r3
 800d958:	371c      	adds	r7, #28
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	01000101 	.word	0x01000101

0800d968 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08c      	sub	sp, #48	@ 0x30
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	4613      	mov	r3, r2
 800d974:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d97c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d984:	2300      	movs	r3, #0
 800d986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d98a:	2300      	movs	r3, #0
 800d98c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d996:	2302      	movs	r3, #2
 800d998:	e0da      	b.n	800db50 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b09      	cmp	r3, #9
 800d9a4:	d002      	beq.n	800d9ac <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a8:	2209      	movs	r2, #9
 800d9aa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	781a      	ldrb	r2, [r3, #0]
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	785a      	ldrb	r2, [r3, #1]
 800d9b8:	6a3b      	ldr	r3, [r7, #32]
 800d9ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	3302      	adds	r3, #2
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	3303      	adds	r3, #3
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	021b      	lsls	r3, r3, #8
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9d6:	bf28      	it	cs
 800d9d8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	791a      	ldrb	r2, [r3, #4]
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	795a      	ldrb	r2, [r3, #5]
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	799a      	ldrb	r2, [r3, #6]
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	79da      	ldrb	r2, [r3, #7]
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	7a1a      	ldrb	r2, [r3, #8]
 800da06:	6a3b      	ldr	r3, [r7, #32]
 800da08:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800da0a:	88fb      	ldrh	r3, [r7, #6]
 800da0c:	2b09      	cmp	r3, #9
 800da0e:	f240 809d 	bls.w	800db4c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800da12:	2309      	movs	r3, #9
 800da14:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800da16:	2300      	movs	r3, #0
 800da18:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da1a:	e081      	b.n	800db20 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da1c:	f107 0316 	add.w	r3, r7, #22
 800da20:	4619      	mov	r1, r3
 800da22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da24:	f000 f9e7 	bl	800ddf6 <USBH_GetNextDesc>
 800da28:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800da2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2c:	785b      	ldrb	r3, [r3, #1]
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d176      	bne.n	800db20 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b09      	cmp	r3, #9
 800da38:	d002      	beq.n	800da40 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800da3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3c:	2209      	movs	r2, #9
 800da3e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800da40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da44:	221a      	movs	r2, #26
 800da46:	fb02 f303 	mul.w	r3, r2, r3
 800da4a:	3308      	adds	r3, #8
 800da4c:	6a3a      	ldr	r2, [r7, #32]
 800da4e:	4413      	add	r3, r2
 800da50:	3302      	adds	r3, #2
 800da52:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800da54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da56:	69f8      	ldr	r0, [r7, #28]
 800da58:	f000 f87e 	bl	800db58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da66:	e043      	b.n	800daf0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da68:	f107 0316 	add.w	r3, r7, #22
 800da6c:	4619      	mov	r1, r3
 800da6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da70:	f000 f9c1 	bl	800ddf6 <USBH_GetNextDesc>
 800da74:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da78:	785b      	ldrb	r3, [r3, #1]
 800da7a:	2b05      	cmp	r3, #5
 800da7c:	d138      	bne.n	800daf0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	795b      	ldrb	r3, [r3, #5]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d113      	bne.n	800daae <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d003      	beq.n	800da96 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	799b      	ldrb	r3, [r3, #6]
 800da92:	2b03      	cmp	r3, #3
 800da94:	d10b      	bne.n	800daae <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800da96:	69fb      	ldr	r3, [r7, #28]
 800da98:	79db      	ldrb	r3, [r3, #7]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10b      	bne.n	800dab6 <USBH_ParseCfgDesc+0x14e>
 800da9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b09      	cmp	r3, #9
 800daa4:	d007      	beq.n	800dab6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800daa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa8:	2209      	movs	r2, #9
 800daaa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800daac:	e003      	b.n	800dab6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800daae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab0:	2207      	movs	r2, #7
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	e000      	b.n	800dab8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dab6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dabc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dac0:	3201      	adds	r2, #1
 800dac2:	00d2      	lsls	r2, r2, #3
 800dac4:	211a      	movs	r1, #26
 800dac6:	fb01 f303 	mul.w	r3, r1, r3
 800daca:	4413      	add	r3, r2
 800dacc:	3308      	adds	r3, #8
 800dace:	6a3a      	ldr	r2, [r7, #32]
 800dad0:	4413      	add	r3, r2
 800dad2:	3304      	adds	r3, #4
 800dad4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dad8:	69b9      	ldr	r1, [r7, #24]
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f000 f870 	bl	800dbc0 <USBH_ParseEPDesc>
 800dae0:	4603      	mov	r3, r0
 800dae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800dae6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800daea:	3301      	adds	r3, #1
 800daec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	791b      	ldrb	r3, [r3, #4]
 800daf4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d204      	bcs.n	800db06 <USBH_ParseCfgDesc+0x19e>
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	885a      	ldrh	r2, [r3, #2]
 800db00:	8afb      	ldrh	r3, [r7, #22]
 800db02:	429a      	cmp	r2, r3
 800db04:	d8b0      	bhi.n	800da68 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	791b      	ldrb	r3, [r3, #4]
 800db0a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800db0e:	429a      	cmp	r2, r3
 800db10:	d201      	bcs.n	800db16 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800db12:	2303      	movs	r3, #3
 800db14:	e01c      	b.n	800db50 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800db16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db1a:	3301      	adds	r3, #1
 800db1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800db20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db24:	2b01      	cmp	r3, #1
 800db26:	d805      	bhi.n	800db34 <USBH_ParseCfgDesc+0x1cc>
 800db28:	6a3b      	ldr	r3, [r7, #32]
 800db2a:	885a      	ldrh	r2, [r3, #2]
 800db2c:	8afb      	ldrh	r3, [r7, #22]
 800db2e:	429a      	cmp	r2, r3
 800db30:	f63f af74 	bhi.w	800da1c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800db34:	6a3b      	ldr	r3, [r7, #32]
 800db36:	791b      	ldrb	r3, [r3, #4]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	bf28      	it	cs
 800db3c:	2302      	movcs	r3, #2
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800db44:	429a      	cmp	r2, r3
 800db46:	d201      	bcs.n	800db4c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800db48:	2303      	movs	r3, #3
 800db4a:	e001      	b.n	800db50 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800db4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800db50:	4618      	mov	r0, r3
 800db52:	3730      	adds	r7, #48	@ 0x30
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	781a      	ldrb	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	785a      	ldrb	r2, [r3, #1]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	789a      	ldrb	r2, [r3, #2]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	78da      	ldrb	r2, [r3, #3]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	3304      	adds	r3, #4
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	bf28      	it	cs
 800db8c:	2302      	movcs	r3, #2
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	795a      	ldrb	r2, [r3, #5]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	799a      	ldrb	r2, [r3, #6]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	79da      	ldrb	r2, [r3, #7]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	7a1a      	ldrb	r2, [r3, #8]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	721a      	strb	r2, [r3, #8]
}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	785a      	ldrb	r2, [r3, #1]
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	789a      	ldrb	r2, [r3, #2]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	78da      	ldrb	r2, [r3, #3]
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	3305      	adds	r3, #5
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	021b      	lsls	r3, r3, #8
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	4313      	orrs	r3, r2
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	799a      	ldrb	r2, [r3, #6]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	889b      	ldrh	r3, [r3, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dc1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc22:	d804      	bhi.n	800dc2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dc28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc2c:	d901      	bls.n	800dc32 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d136      	bne.n	800dcaa <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	78db      	ldrb	r3, [r3, #3]
 800dc40:	f003 0303 	and.w	r3, r3, #3
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d108      	bne.n	800dc5a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	889b      	ldrh	r3, [r3, #4]
 800dc4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc50:	f240 8097 	bls.w	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc54:	2303      	movs	r3, #3
 800dc56:	75fb      	strb	r3, [r7, #23]
 800dc58:	e093      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	78db      	ldrb	r3, [r3, #3]
 800dc5e:	f003 0303 	and.w	r3, r3, #3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d107      	bne.n	800dc76 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	889b      	ldrh	r3, [r3, #4]
 800dc6a:	2b40      	cmp	r3, #64	@ 0x40
 800dc6c:	f240 8089 	bls.w	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc70:	2303      	movs	r3, #3
 800dc72:	75fb      	strb	r3, [r7, #23]
 800dc74:	e085      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	78db      	ldrb	r3, [r3, #3]
 800dc7a:	f003 0303 	and.w	r3, r3, #3
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d005      	beq.n	800dc8e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	78db      	ldrb	r3, [r3, #3]
 800dc86:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	d10a      	bne.n	800dca4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	799b      	ldrb	r3, [r3, #6]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <USBH_ParseEPDesc+0xde>
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	799b      	ldrb	r3, [r3, #6]
 800dc9a:	2b10      	cmp	r3, #16
 800dc9c:	d970      	bls.n	800dd80 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dca2:	e06d      	b.n	800dd80 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dca4:	2303      	movs	r3, #3
 800dca6:	75fb      	strb	r3, [r7, #23]
 800dca8:	e06b      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d13c      	bne.n	800dd2e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	78db      	ldrb	r3, [r3, #3]
 800dcb8:	f003 0303 	and.w	r3, r3, #3
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d005      	beq.n	800dccc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	78db      	ldrb	r3, [r3, #3]
 800dcc4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d106      	bne.n	800dcda <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	889b      	ldrh	r3, [r3, #4]
 800dcd0:	2b40      	cmp	r3, #64	@ 0x40
 800dcd2:	d956      	bls.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dcd8:	e053      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	78db      	ldrb	r3, [r3, #3]
 800dcde:	f003 0303 	and.w	r3, r3, #3
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d10e      	bne.n	800dd04 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	799b      	ldrb	r3, [r3, #6]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d007      	beq.n	800dcfe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800dcf2:	2b10      	cmp	r3, #16
 800dcf4:	d803      	bhi.n	800dcfe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800dcfa:	2b40      	cmp	r3, #64	@ 0x40
 800dcfc:	d941      	bls.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	75fb      	strb	r3, [r7, #23]
 800dd02:	e03e      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	78db      	ldrb	r3, [r3, #3]
 800dd08:	f003 0303 	and.w	r3, r3, #3
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d10b      	bne.n	800dd28 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	799b      	ldrb	r3, [r3, #6]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d004      	beq.n	800dd22 <USBH_ParseEPDesc+0x162>
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	889b      	ldrh	r3, [r3, #4]
 800dd1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd20:	d32f      	bcc.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd22:	2303      	movs	r3, #3
 800dd24:	75fb      	strb	r3, [r7, #23]
 800dd26:	e02c      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	75fb      	strb	r3, [r7, #23]
 800dd2c:	e029      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d120      	bne.n	800dd7a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	78db      	ldrb	r3, [r3, #3]
 800dd3c:	f003 0303 	and.w	r3, r3, #3
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	889b      	ldrh	r3, [r3, #4]
 800dd48:	2b08      	cmp	r3, #8
 800dd4a:	d01a      	beq.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	75fb      	strb	r3, [r7, #23]
 800dd50:	e017      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	78db      	ldrb	r3, [r3, #3]
 800dd56:	f003 0303 	and.w	r3, r3, #3
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d10a      	bne.n	800dd74 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	799b      	ldrb	r3, [r3, #6]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d003      	beq.n	800dd6e <USBH_ParseEPDesc+0x1ae>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	889b      	ldrh	r3, [r3, #4]
 800dd6a:	2b08      	cmp	r3, #8
 800dd6c:	d909      	bls.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	75fb      	strb	r3, [r7, #23]
 800dd72:	e006      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd74:	2303      	movs	r3, #3
 800dd76:	75fb      	strb	r3, [r7, #23]
 800dd78:	e003      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	75fb      	strb	r3, [r7, #23]
 800dd7e:	e000      	b.n	800dd82 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dd80:	bf00      	nop
  }

  return status;
 800dd82:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	371c      	adds	r7, #28
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3301      	adds	r3, #1
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2b03      	cmp	r3, #3
 800dda6:	d120      	bne.n	800ddea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	1e9a      	subs	r2, r3, #2
 800ddae:	88fb      	ldrh	r3, [r7, #6]
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	bf28      	it	cs
 800ddb4:	4613      	movcs	r3, r2
 800ddb6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3302      	adds	r3, #2
 800ddbc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	82fb      	strh	r3, [r7, #22]
 800ddc2:	e00b      	b.n	800dddc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ddc4:	8afb      	ldrh	r3, [r7, #22]
 800ddc6:	68fa      	ldr	r2, [r7, #12]
 800ddc8:	4413      	add	r3, r2
 800ddca:	781a      	ldrb	r2, [r3, #0]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ddd6:	8afb      	ldrh	r3, [r7, #22]
 800ddd8:	3302      	adds	r3, #2
 800ddda:	82fb      	strh	r3, [r7, #22]
 800dddc:	8afa      	ldrh	r2, [r7, #22]
 800ddde:	8abb      	ldrh	r3, [r7, #20]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d3ef      	bcc.n	800ddc4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2200      	movs	r2, #0
 800dde8:	701a      	strb	r2, [r3, #0]
  }
}
 800ddea:	bf00      	nop
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b085      	sub	sp, #20
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
 800ddfe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	7812      	ldrb	r2, [r2, #0]
 800de08:	4413      	add	r3, r2
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4413      	add	r3, r2
 800de1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de1c:	68fb      	ldr	r3, [r7, #12]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b086      	sub	sp, #24
 800de2e:	af00      	add	r7, sp, #0
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	4613      	mov	r3, r2
 800de36:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800de38:	2301      	movs	r3, #1
 800de3a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	789b      	ldrb	r3, [r3, #2]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d002      	beq.n	800de4a <USBH_CtlReq+0x20>
 800de44:	2b02      	cmp	r3, #2
 800de46:	d00f      	beq.n	800de68 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800de48:	e027      	b.n	800de9a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	88fa      	ldrh	r2, [r7, #6]
 800de54:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2201      	movs	r2, #1
 800de5a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2202      	movs	r2, #2
 800de60:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800de62:	2301      	movs	r3, #1
 800de64:	75fb      	strb	r3, [r7, #23]
      break;
 800de66:	e018      	b.n	800de9a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 f81b 	bl	800dea4 <USBH_HandleControl>
 800de6e:	4603      	mov	r3, r0
 800de70:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <USBH_CtlReq+0x54>
 800de78:	7dfb      	ldrb	r3, [r7, #23]
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	d106      	bne.n	800de8c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2201      	movs	r2, #1
 800de82:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	761a      	strb	r2, [r3, #24]
      break;
 800de8a:	e005      	b.n	800de98 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d102      	bne.n	800de98 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2201      	movs	r2, #1
 800de96:	709a      	strb	r2, [r3, #2]
      break;
 800de98:	bf00      	nop
  }
  return status;
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af02      	add	r7, sp, #8
 800deaa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800deac:	2301      	movs	r3, #1
 800deae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	7e1b      	ldrb	r3, [r3, #24]
 800deb8:	3b01      	subs	r3, #1
 800deba:	2b0a      	cmp	r3, #10
 800debc:	f200 8156 	bhi.w	800e16c <USBH_HandleControl+0x2c8>
 800dec0:	a201      	add	r2, pc, #4	@ (adr r2, 800dec8 <USBH_HandleControl+0x24>)
 800dec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec6:	bf00      	nop
 800dec8:	0800def5 	.word	0x0800def5
 800decc:	0800df0f 	.word	0x0800df0f
 800ded0:	0800df79 	.word	0x0800df79
 800ded4:	0800df9f 	.word	0x0800df9f
 800ded8:	0800dfd7 	.word	0x0800dfd7
 800dedc:	0800e001 	.word	0x0800e001
 800dee0:	0800e053 	.word	0x0800e053
 800dee4:	0800e075 	.word	0x0800e075
 800dee8:	0800e0b1 	.word	0x0800e0b1
 800deec:	0800e0d7 	.word	0x0800e0d7
 800def0:	0800e115 	.word	0x0800e115
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f103 0110 	add.w	r1, r3, #16
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	795b      	ldrb	r3, [r3, #5]
 800defe:	461a      	mov	r2, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f943 	bl	800e18c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2202      	movs	r2, #2
 800df0a:	761a      	strb	r2, [r3, #24]
      break;
 800df0c:	e139      	b.n	800e182 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	795b      	ldrb	r3, [r3, #5]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f003 faa7 	bl	8011468 <USBH_LL_GetURBState>
 800df1a:	4603      	mov	r3, r0
 800df1c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800df1e:	7bbb      	ldrb	r3, [r7, #14]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d11e      	bne.n	800df62 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	7c1b      	ldrb	r3, [r3, #16]
 800df28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800df2c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	8adb      	ldrh	r3, [r3, #22]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800df36:	7b7b      	ldrb	r3, [r7, #13]
 800df38:	2b80      	cmp	r3, #128	@ 0x80
 800df3a:	d103      	bne.n	800df44 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2203      	movs	r2, #3
 800df40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df42:	e115      	b.n	800e170 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2205      	movs	r2, #5
 800df48:	761a      	strb	r2, [r3, #24]
      break;
 800df4a:	e111      	b.n	800e170 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800df4c:	7b7b      	ldrb	r3, [r7, #13]
 800df4e:	2b80      	cmp	r3, #128	@ 0x80
 800df50:	d103      	bne.n	800df5a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2209      	movs	r2, #9
 800df56:	761a      	strb	r2, [r3, #24]
      break;
 800df58:	e10a      	b.n	800e170 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2207      	movs	r2, #7
 800df5e:	761a      	strb	r2, [r3, #24]
      break;
 800df60:	e106      	b.n	800e170 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800df62:	7bbb      	ldrb	r3, [r7, #14]
 800df64:	2b04      	cmp	r3, #4
 800df66:	d003      	beq.n	800df70 <USBH_HandleControl+0xcc>
 800df68:	7bbb      	ldrb	r3, [r7, #14]
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	f040 8100 	bne.w	800e170 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	220b      	movs	r2, #11
 800df74:	761a      	strb	r2, [r3, #24]
      break;
 800df76:	e0fb      	b.n	800e170 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800df7e:	b29a      	uxth	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6899      	ldr	r1, [r3, #8]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	899a      	ldrh	r2, [r3, #12]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	791b      	ldrb	r3, [r3, #4]
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 f93a 	bl	800e20a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2204      	movs	r2, #4
 800df9a:	761a      	strb	r2, [r3, #24]
      break;
 800df9c:	e0f1      	b.n	800e182 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	791b      	ldrb	r3, [r3, #4]
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f003 fa5f 	bl	8011468 <USBH_LL_GetURBState>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dfae:	7bbb      	ldrb	r3, [r7, #14]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d102      	bne.n	800dfba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2209      	movs	r2, #9
 800dfb8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dfba:	7bbb      	ldrb	r3, [r7, #14]
 800dfbc:	2b05      	cmp	r3, #5
 800dfbe:	d102      	bne.n	800dfc6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dfc4:	e0d6      	b.n	800e174 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
 800dfc8:	2b04      	cmp	r3, #4
 800dfca:	f040 80d3 	bne.w	800e174 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	220b      	movs	r2, #11
 800dfd2:	761a      	strb	r2, [r3, #24]
      break;
 800dfd4:	e0ce      	b.n	800e174 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6899      	ldr	r1, [r3, #8]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	899a      	ldrh	r2, [r3, #12]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	795b      	ldrb	r3, [r3, #5]
 800dfe2:	2001      	movs	r0, #1
 800dfe4:	9000      	str	r0, [sp, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f8ea 	bl	800e1c0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2206      	movs	r2, #6
 800dffc:	761a      	strb	r2, [r3, #24]
      break;
 800dffe:	e0c0      	b.n	800e182 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	795b      	ldrb	r3, [r3, #5]
 800e004:	4619      	mov	r1, r3
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f003 fa2e 	bl	8011468 <USBH_LL_GetURBState>
 800e00c:	4603      	mov	r3, r0
 800e00e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d103      	bne.n	800e01e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2207      	movs	r2, #7
 800e01a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e01c:	e0ac      	b.n	800e178 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e01e:	7bbb      	ldrb	r3, [r7, #14]
 800e020:	2b05      	cmp	r3, #5
 800e022:	d105      	bne.n	800e030 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	220c      	movs	r2, #12
 800e028:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e02a:	2303      	movs	r3, #3
 800e02c:	73fb      	strb	r3, [r7, #15]
      break;
 800e02e:	e0a3      	b.n	800e178 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e030:	7bbb      	ldrb	r3, [r7, #14]
 800e032:	2b02      	cmp	r3, #2
 800e034:	d103      	bne.n	800e03e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2205      	movs	r2, #5
 800e03a:	761a      	strb	r2, [r3, #24]
      break;
 800e03c:	e09c      	b.n	800e178 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	2b04      	cmp	r3, #4
 800e042:	f040 8099 	bne.w	800e178 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	220b      	movs	r2, #11
 800e04a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e04c:	2302      	movs	r3, #2
 800e04e:	73fb      	strb	r3, [r7, #15]
      break;
 800e050:	e092      	b.n	800e178 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	791b      	ldrb	r3, [r3, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	2100      	movs	r1, #0
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f8d5 	bl	800e20a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e066:	b29a      	uxth	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2208      	movs	r2, #8
 800e070:	761a      	strb	r2, [r3, #24]

      break;
 800e072:	e086      	b.n	800e182 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	791b      	ldrb	r3, [r3, #4]
 800e078:	4619      	mov	r1, r3
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f003 f9f4 	bl	8011468 <USBH_LL_GetURBState>
 800e080:	4603      	mov	r3, r0
 800e082:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d105      	bne.n	800e096 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	220d      	movs	r2, #13
 800e08e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e094:	e072      	b.n	800e17c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	2b04      	cmp	r3, #4
 800e09a:	d103      	bne.n	800e0a4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	220b      	movs	r2, #11
 800e0a0:	761a      	strb	r2, [r3, #24]
      break;
 800e0a2:	e06b      	b.n	800e17c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	2b05      	cmp	r3, #5
 800e0a8:	d168      	bne.n	800e17c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ae:	e065      	b.n	800e17c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	795b      	ldrb	r3, [r3, #5]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	9200      	str	r2, [sp, #0]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f87f 	bl	800e1c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	220a      	movs	r2, #10
 800e0d2:	761a      	strb	r2, [r3, #24]
      break;
 800e0d4:	e055      	b.n	800e182 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	795b      	ldrb	r3, [r3, #5]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f003 f9c3 	bl	8011468 <USBH_LL_GetURBState>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e0e6:	7bbb      	ldrb	r3, [r7, #14]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d105      	bne.n	800e0f8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	220d      	movs	r2, #13
 800e0f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e0f6:	e043      	b.n	800e180 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e0f8:	7bbb      	ldrb	r3, [r7, #14]
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	d103      	bne.n	800e106 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2209      	movs	r2, #9
 800e102:	761a      	strb	r2, [r3, #24]
      break;
 800e104:	e03c      	b.n	800e180 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e106:	7bbb      	ldrb	r3, [r7, #14]
 800e108:	2b04      	cmp	r3, #4
 800e10a:	d139      	bne.n	800e180 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	220b      	movs	r2, #11
 800e110:	761a      	strb	r2, [r3, #24]
      break;
 800e112:	e035      	b.n	800e180 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	7e5b      	ldrb	r3, [r3, #25]
 800e118:	3301      	adds	r3, #1
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	765a      	strb	r2, [r3, #25]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7e5b      	ldrb	r3, [r3, #25]
 800e124:	2b02      	cmp	r3, #2
 800e126:	d806      	bhi.n	800e136 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e134:	e025      	b.n	800e182 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e13c:	2106      	movs	r1, #6
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	795b      	ldrb	r3, [r3, #5]
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f90c 	bl	800e36c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	791b      	ldrb	r3, [r3, #4]
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f906 	bl	800e36c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e166:	2302      	movs	r3, #2
 800e168:	73fb      	strb	r3, [r7, #15]
      break;
 800e16a:	e00a      	b.n	800e182 <USBH_HandleControl+0x2de>

    default:
      break;
 800e16c:	bf00      	nop
 800e16e:	e008      	b.n	800e182 <USBH_HandleControl+0x2de>
      break;
 800e170:	bf00      	nop
 800e172:	e006      	b.n	800e182 <USBH_HandleControl+0x2de>
      break;
 800e174:	bf00      	nop
 800e176:	e004      	b.n	800e182 <USBH_HandleControl+0x2de>
      break;
 800e178:	bf00      	nop
 800e17a:	e002      	b.n	800e182 <USBH_HandleControl+0x2de>
      break;
 800e17c:	bf00      	nop
 800e17e:	e000      	b.n	800e182 <USBH_HandleControl+0x2de>
      break;
 800e180:	bf00      	nop
  }

  return status;
 800e182:	7bfb      	ldrb	r3, [r7, #15]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af04      	add	r7, sp, #16
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	4613      	mov	r3, r2
 800e198:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e19a:	79f9      	ldrb	r1, [r7, #7]
 800e19c:	2300      	movs	r3, #0
 800e19e:	9303      	str	r3, [sp, #12]
 800e1a0:	2308      	movs	r3, #8
 800e1a2:	9302      	str	r3, [sp, #8]
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	9301      	str	r3, [sp, #4]
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f003 f928 	bl	8011406 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b088      	sub	sp, #32
 800e1c4:	af04      	add	r7, sp, #16
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	80fb      	strh	r3, [r7, #6]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d001      	beq.n	800e1e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1e4:	7979      	ldrb	r1, [r7, #5]
 800e1e6:	7e3b      	ldrb	r3, [r7, #24]
 800e1e8:	9303      	str	r3, [sp, #12]
 800e1ea:	88fb      	ldrh	r3, [r7, #6]
 800e1ec:	9302      	str	r3, [sp, #8]
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f003 f903 	bl	8011406 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b088      	sub	sp, #32
 800e20e:	af04      	add	r7, sp, #16
 800e210:	60f8      	str	r0, [r7, #12]
 800e212:	60b9      	str	r1, [r7, #8]
 800e214:	4611      	mov	r1, r2
 800e216:	461a      	mov	r2, r3
 800e218:	460b      	mov	r3, r1
 800e21a:	80fb      	strh	r3, [r7, #6]
 800e21c:	4613      	mov	r3, r2
 800e21e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e220:	7979      	ldrb	r1, [r7, #5]
 800e222:	2300      	movs	r3, #0
 800e224:	9303      	str	r3, [sp, #12]
 800e226:	88fb      	ldrh	r3, [r7, #6]
 800e228:	9302      	str	r3, [sp, #8]
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	9301      	str	r3, [sp, #4]
 800e22e:	2301      	movs	r3, #1
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	2300      	movs	r3, #0
 800e234:	2201      	movs	r2, #1
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f003 f8e5 	bl	8011406 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e23c:	2300      	movs	r3, #0

}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b088      	sub	sp, #32
 800e24a:	af04      	add	r7, sp, #16
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	60b9      	str	r1, [r7, #8]
 800e250:	4611      	mov	r1, r2
 800e252:	461a      	mov	r2, r3
 800e254:	460b      	mov	r3, r1
 800e256:	80fb      	strh	r3, [r7, #6]
 800e258:	4613      	mov	r3, r2
 800e25a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e266:	2300      	movs	r3, #0
 800e268:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e26a:	7979      	ldrb	r1, [r7, #5]
 800e26c:	7e3b      	ldrb	r3, [r7, #24]
 800e26e:	9303      	str	r3, [sp, #12]
 800e270:	88fb      	ldrh	r3, [r7, #6]
 800e272:	9302      	str	r3, [sp, #8]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	9301      	str	r3, [sp, #4]
 800e278:	2301      	movs	r3, #1
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	2302      	movs	r3, #2
 800e27e:	2200      	movs	r2, #0
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f003 f8c0 	bl	8011406 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af04      	add	r7, sp, #16
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	4611      	mov	r1, r2
 800e29c:	461a      	mov	r2, r3
 800e29e:	460b      	mov	r3, r1
 800e2a0:	80fb      	strh	r3, [r7, #6]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2a6:	7979      	ldrb	r1, [r7, #5]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	9303      	str	r3, [sp, #12]
 800e2ac:	88fb      	ldrh	r3, [r7, #6]
 800e2ae:	9302      	str	r3, [sp, #8]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	2302      	movs	r3, #2
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f003 f8a2 	bl	8011406 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af04      	add	r7, sp, #16
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4603      	mov	r3, r0
 800e2dc:	70fb      	strb	r3, [r7, #3]
 800e2de:	460b      	mov	r3, r1
 800e2e0:	70bb      	strb	r3, [r7, #2]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e2e6:	7878      	ldrb	r0, [r7, #1]
 800e2e8:	78ba      	ldrb	r2, [r7, #2]
 800e2ea:	78f9      	ldrb	r1, [r7, #3]
 800e2ec:	8b3b      	ldrh	r3, [r7, #24]
 800e2ee:	9302      	str	r3, [sp, #8]
 800e2f0:	7d3b      	ldrb	r3, [r7, #20]
 800e2f2:	9301      	str	r3, [sp, #4]
 800e2f4:	7c3b      	ldrb	r3, [r7, #16]
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f003 f835 	bl	801136a <USBH_LL_OpenPipe>

  return USBH_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b082      	sub	sp, #8
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	460b      	mov	r3, r1
 800e314:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f003 f854 	bl	80113c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	460b      	mov	r3, r1
 800e334:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f836 	bl	800e3a8 <USBH_GetFreePipe>
 800e33c:	4603      	mov	r3, r0
 800e33e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e340:	89fb      	ldrh	r3, [r7, #14]
 800e342:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e346:	4293      	cmp	r3, r2
 800e348:	d00a      	beq.n	800e360 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e34a:	78fa      	ldrb	r2, [r7, #3]
 800e34c:	89fb      	ldrh	r3, [r7, #14]
 800e34e:	f003 030f 	and.w	r3, r3, #15
 800e352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e356:	6879      	ldr	r1, [r7, #4]
 800e358:	33e0      	adds	r3, #224	@ 0xe0
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	440b      	add	r3, r1
 800e35e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e360:	89fb      	ldrh	r3, [r7, #14]
 800e362:	b2db      	uxtb	r3, r3
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e378:	78fb      	ldrb	r3, [r7, #3]
 800e37a:	2b0f      	cmp	r3, #15
 800e37c:	d80d      	bhi.n	800e39a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e37e:	78fb      	ldrb	r3, [r7, #3]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	33e0      	adds	r3, #224	@ 0xe0
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	685a      	ldr	r2, [r3, #4]
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e390:	6879      	ldr	r1, [r7, #4]
 800e392:	33e0      	adds	r3, #224	@ 0xe0
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	440b      	add	r3, r1
 800e398:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	73fb      	strb	r3, [r7, #15]
 800e3b8:	e00f      	b.n	800e3da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	33e0      	adds	r3, #224	@ 0xe0
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d102      	bne.n	800e3d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	e007      	b.n	800e3e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	73fb      	strb	r3, [r7, #15]
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
 800e3dc:	2b0f      	cmp	r3, #15
 800e3de:	d9ec      	bls.n	800e3ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e3e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	4a08      	ldr	r2, [pc, #32]	@ (800e420 <disk_status+0x30>)
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	79fa      	ldrb	r2, [r7, #7]
 800e408:	4905      	ldr	r1, [pc, #20]	@ (800e420 <disk_status+0x30>)
 800e40a:	440a      	add	r2, r1
 800e40c:	7a12      	ldrb	r2, [r2, #8]
 800e40e:	4610      	mov	r0, r2
 800e410:	4798      	blx	r3
 800e412:	4603      	mov	r3, r0
 800e414:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e416:	7bfb      	ldrb	r3, [r7, #15]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	20000a5c 	.word	0x20000a5c

0800e424 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e432:	79fb      	ldrb	r3, [r7, #7]
 800e434:	4a0e      	ldr	r2, [pc, #56]	@ (800e470 <disk_initialize+0x4c>)
 800e436:	5cd3      	ldrb	r3, [r2, r3]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d114      	bne.n	800e466 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	4a0c      	ldr	r2, [pc, #48]	@ (800e470 <disk_initialize+0x4c>)
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	79fa      	ldrb	r2, [r7, #7]
 800e44a:	4909      	ldr	r1, [pc, #36]	@ (800e470 <disk_initialize+0x4c>)
 800e44c:	440a      	add	r2, r1
 800e44e:	7a12      	ldrb	r2, [r2, #8]
 800e450:	4610      	mov	r0, r2
 800e452:	4798      	blx	r3
 800e454:	4603      	mov	r3, r0
 800e456:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e458:	7bfb      	ldrb	r3, [r7, #15]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d103      	bne.n	800e466 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	4a03      	ldr	r2, [pc, #12]	@ (800e470 <disk_initialize+0x4c>)
 800e462:	2101      	movs	r1, #1
 800e464:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e466:	7bfb      	ldrb	r3, [r7, #15]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	20000a5c 	.word	0x20000a5c

0800e474 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e474:	b590      	push	{r4, r7, lr}
 800e476:	b087      	sub	sp, #28
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60b9      	str	r1, [r7, #8]
 800e47c:	607a      	str	r2, [r7, #4]
 800e47e:	603b      	str	r3, [r7, #0]
 800e480:	4603      	mov	r3, r0
 800e482:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	4a0a      	ldr	r2, [pc, #40]	@ (800e4b0 <disk_read+0x3c>)
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4413      	add	r3, r2
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	689c      	ldr	r4, [r3, #8]
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	4a07      	ldr	r2, [pc, #28]	@ (800e4b0 <disk_read+0x3c>)
 800e494:	4413      	add	r3, r2
 800e496:	7a18      	ldrb	r0, [r3, #8]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	68b9      	ldr	r1, [r7, #8]
 800e49e:	47a0      	blx	r4
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	371c      	adds	r7, #28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000a5c 	.word	0x20000a5c

0800e4b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e4b4:	b590      	push	{r4, r7, lr}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60b9      	str	r1, [r7, #8]
 800e4bc:	607a      	str	r2, [r7, #4]
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4a0a      	ldr	r2, [pc, #40]	@ (800e4f0 <disk_write+0x3c>)
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	68dc      	ldr	r4, [r3, #12]
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
 800e4d2:	4a07      	ldr	r2, [pc, #28]	@ (800e4f0 <disk_write+0x3c>)
 800e4d4:	4413      	add	r3, r2
 800e4d6:	7a18      	ldrb	r0, [r3, #8]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	68b9      	ldr	r1, [r7, #8]
 800e4de:	47a0      	blx	r4
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd90      	pop	{r4, r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	20000a5c 	.word	0x20000a5c

0800e4f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	603a      	str	r2, [r7, #0]
 800e4fe:	71fb      	strb	r3, [r7, #7]
 800e500:	460b      	mov	r3, r1
 800e502:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	4a09      	ldr	r2, [pc, #36]	@ (800e52c <disk_ioctl+0x38>)
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4413      	add	r3, r2
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	79fa      	ldrb	r2, [r7, #7]
 800e512:	4906      	ldr	r1, [pc, #24]	@ (800e52c <disk_ioctl+0x38>)
 800e514:	440a      	add	r2, r1
 800e516:	7a10      	ldrb	r0, [r2, #8]
 800e518:	79b9      	ldrb	r1, [r7, #6]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	4798      	blx	r3
 800e51e:	4603      	mov	r3, r0
 800e520:	73fb      	strb	r3, [r7, #15]
  return res;
 800e522:	7bfb      	ldrb	r3, [r7, #15]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20000a5c 	.word	0x20000a5c

0800e530 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3301      	adds	r3, #1
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e540:	89fb      	ldrh	r3, [r7, #14]
 800e542:	021b      	lsls	r3, r3, #8
 800e544:	b21a      	sxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	b21b      	sxth	r3, r3
 800e54c:	4313      	orrs	r3, r2
 800e54e:	b21b      	sxth	r3, r3
 800e550:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e552:	89fb      	ldrh	r3, [r7, #14]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3303      	adds	r3, #3
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	021b      	lsls	r3, r3, #8
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	3202      	adds	r2, #2
 800e578:	7812      	ldrb	r2, [r2, #0]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	021b      	lsls	r3, r3, #8
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	3201      	adds	r2, #1
 800e586:	7812      	ldrb	r2, [r2, #0]
 800e588:	4313      	orrs	r3, r2
 800e58a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	021b      	lsls	r3, r3, #8
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	7812      	ldrb	r2, [r2, #0]
 800e594:	4313      	orrs	r3, r2
 800e596:	60fb      	str	r3, [r7, #12]
	return rv;
 800e598:	68fb      	ldr	r3, [r7, #12]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3714      	adds	r7, #20
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr

0800e5a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e5a6:	b480      	push	{r7}
 800e5a8:	b083      	sub	sp, #12
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	1c5a      	adds	r2, r3, #1
 800e5b6:	607a      	str	r2, [r7, #4]
 800e5b8:	887a      	ldrh	r2, [r7, #2]
 800e5ba:	b2d2      	uxtb	r2, r2
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	887b      	ldrh	r3, [r7, #2]
 800e5c0:	0a1b      	lsrs	r3, r3, #8
 800e5c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	1c5a      	adds	r2, r3, #1
 800e5c8:	607a      	str	r2, [r7, #4]
 800e5ca:	887a      	ldrh	r2, [r7, #2]
 800e5cc:	b2d2      	uxtb	r2, r2
 800e5ce:	701a      	strb	r2, [r3, #0]
}
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	607a      	str	r2, [r7, #4]
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	b2d2      	uxtb	r2, r2
 800e5f0:	701a      	strb	r2, [r3, #0]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	0a1b      	lsrs	r3, r3, #8
 800e5f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	607a      	str	r2, [r7, #4]
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	b2d2      	uxtb	r2, r2
 800e602:	701a      	strb	r2, [r3, #0]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	0a1b      	lsrs	r3, r3, #8
 800e608:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	607a      	str	r2, [r7, #4]
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	b2d2      	uxtb	r2, r2
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	0a1b      	lsrs	r3, r3, #8
 800e61a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	1c5a      	adds	r2, r3, #1
 800e620:	607a      	str	r2, [r7, #4]
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	b2d2      	uxtb	r2, r2
 800e626:	701a      	strb	r2, [r3, #0]
}
 800e628:	bf00      	nop
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e634:	b480      	push	{r7}
 800e636:	b087      	sub	sp, #28
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00d      	beq.n	800e66a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	1c53      	adds	r3, r2, #1
 800e652:	613b      	str	r3, [r7, #16]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	1c59      	adds	r1, r3, #1
 800e658:	6179      	str	r1, [r7, #20]
 800e65a:	7812      	ldrb	r2, [r2, #0]
 800e65c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3b01      	subs	r3, #1
 800e662:	607b      	str	r3, [r7, #4]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1f1      	bne.n	800e64e <mem_cpy+0x1a>
	}
}
 800e66a:	bf00      	nop
 800e66c:	371c      	adds	r7, #28
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e676:	b480      	push	{r7}
 800e678:	b087      	sub	sp, #28
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	60f8      	str	r0, [r7, #12]
 800e67e:	60b9      	str	r1, [r7, #8]
 800e680:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	1c5a      	adds	r2, r3, #1
 800e68a:	617a      	str	r2, [r7, #20]
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	b2d2      	uxtb	r2, r2
 800e690:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3b01      	subs	r3, #1
 800e696:	607b      	str	r3, [r7, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1f3      	bne.n	800e686 <mem_set+0x10>
}
 800e69e:	bf00      	nop
 800e6a0:	bf00      	nop
 800e6a2:	371c      	adds	r7, #28
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6ac:	b480      	push	{r7}
 800e6ae:	b089      	sub	sp, #36	@ 0x24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	61fb      	str	r3, [r7, #28]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	61fa      	str	r2, [r7, #28]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	61ba      	str	r2, [r7, #24]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	1acb      	subs	r3, r1, r3
 800e6d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	607b      	str	r3, [r7, #4]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <mem_cmp+0x40>
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d0eb      	beq.n	800e6c4 <mem_cmp+0x18>

	return r;
 800e6ec:	697b      	ldr	r3, [r7, #20]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3724      	adds	r7, #36	@ 0x24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e6fa:	b480      	push	{r7}
 800e6fc:	b083      	sub	sp, #12
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e704:	e002      	b.n	800e70c <chk_chr+0x12>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3301      	adds	r3, #1
 800e70a:	607b      	str	r3, [r7, #4]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d005      	beq.n	800e720 <chk_chr+0x26>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d1f2      	bne.n	800e706 <chk_chr+0xc>
	return *str;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	781b      	ldrb	r3, [r3, #0]
}
 800e724:	4618      	mov	r0, r3
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e730:	b480      	push	{r7}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e73a:	2300      	movs	r3, #0
 800e73c:	60bb      	str	r3, [r7, #8]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	e029      	b.n	800e798 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e744:	4a27      	ldr	r2, [pc, #156]	@ (800e7e4 <chk_lock+0xb4>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	011b      	lsls	r3, r3, #4
 800e74a:	4413      	add	r3, r2
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d01d      	beq.n	800e78e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e752:	4a24      	ldr	r2, [pc, #144]	@ (800e7e4 <chk_lock+0xb4>)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	011b      	lsls	r3, r3, #4
 800e758:	4413      	add	r3, r2
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	429a      	cmp	r2, r3
 800e762:	d116      	bne.n	800e792 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e764:	4a1f      	ldr	r2, [pc, #124]	@ (800e7e4 <chk_lock+0xb4>)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	011b      	lsls	r3, r3, #4
 800e76a:	4413      	add	r3, r2
 800e76c:	3304      	adds	r3, #4
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e774:	429a      	cmp	r2, r3
 800e776:	d10c      	bne.n	800e792 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e778:	4a1a      	ldr	r2, [pc, #104]	@ (800e7e4 <chk_lock+0xb4>)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	011b      	lsls	r3, r3, #4
 800e77e:	4413      	add	r3, r2
 800e780:	3308      	adds	r3, #8
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e788:	429a      	cmp	r2, r3
 800e78a:	d102      	bne.n	800e792 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e78c:	e007      	b.n	800e79e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e78e:	2301      	movs	r3, #1
 800e790:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3301      	adds	r3, #1
 800e796:	60fb      	str	r3, [r7, #12]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d9d2      	bls.n	800e744 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d109      	bne.n	800e7b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d102      	bne.n	800e7b0 <chk_lock+0x80>
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d101      	bne.n	800e7b4 <chk_lock+0x84>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e010      	b.n	800e7d6 <chk_lock+0xa6>
 800e7b4:	2312      	movs	r3, #18
 800e7b6:	e00e      	b.n	800e7d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d108      	bne.n	800e7d0 <chk_lock+0xa0>
 800e7be:	4a09      	ldr	r2, [pc, #36]	@ (800e7e4 <chk_lock+0xb4>)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	011b      	lsls	r3, r3, #4
 800e7c4:	4413      	add	r3, r2
 800e7c6:	330c      	adds	r3, #12
 800e7c8:	881b      	ldrh	r3, [r3, #0]
 800e7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ce:	d101      	bne.n	800e7d4 <chk_lock+0xa4>
 800e7d0:	2310      	movs	r3, #16
 800e7d2:	e000      	b.n	800e7d6 <chk_lock+0xa6>
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20000a3c 	.word	0x20000a3c

0800e7e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	607b      	str	r3, [r7, #4]
 800e7f2:	e002      	b.n	800e7fa <enq_lock+0x12>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	607b      	str	r3, [r7, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d806      	bhi.n	800e80e <enq_lock+0x26>
 800e800:	4a09      	ldr	r2, [pc, #36]	@ (800e828 <enq_lock+0x40>)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	011b      	lsls	r3, r3, #4
 800e806:	4413      	add	r3, r2
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1f2      	bne.n	800e7f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b02      	cmp	r3, #2
 800e812:	bf14      	ite	ne
 800e814:	2301      	movne	r3, #1
 800e816:	2300      	moveq	r3, #0
 800e818:	b2db      	uxtb	r3, r3
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	370c      	adds	r7, #12
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	20000a3c 	.word	0x20000a3c

0800e82c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e836:	2300      	movs	r3, #0
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	e01f      	b.n	800e87c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e83c:	4a41      	ldr	r2, [pc, #260]	@ (800e944 <inc_lock+0x118>)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	011b      	lsls	r3, r3, #4
 800e842:	4413      	add	r3, r2
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d113      	bne.n	800e876 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e84e:	4a3d      	ldr	r2, [pc, #244]	@ (800e944 <inc_lock+0x118>)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	011b      	lsls	r3, r3, #4
 800e854:	4413      	add	r3, r2
 800e856:	3304      	adds	r3, #4
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e85e:	429a      	cmp	r2, r3
 800e860:	d109      	bne.n	800e876 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e862:	4a38      	ldr	r2, [pc, #224]	@ (800e944 <inc_lock+0x118>)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	011b      	lsls	r3, r3, #4
 800e868:	4413      	add	r3, r2
 800e86a:	3308      	adds	r3, #8
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e872:	429a      	cmp	r2, r3
 800e874:	d006      	beq.n	800e884 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	3301      	adds	r3, #1
 800e87a:	60fb      	str	r3, [r7, #12]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d9dc      	bls.n	800e83c <inc_lock+0x10>
 800e882:	e000      	b.n	800e886 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e884:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d132      	bne.n	800e8f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e88c:	2300      	movs	r3, #0
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	e002      	b.n	800e898 <inc_lock+0x6c>
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3301      	adds	r3, #1
 800e896:	60fb      	str	r3, [r7, #12]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d806      	bhi.n	800e8ac <inc_lock+0x80>
 800e89e:	4a29      	ldr	r2, [pc, #164]	@ (800e944 <inc_lock+0x118>)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	4413      	add	r3, r2
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1f2      	bne.n	800e892 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d101      	bne.n	800e8b6 <inc_lock+0x8a>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	e040      	b.n	800e938 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	4922      	ldr	r1, [pc, #136]	@ (800e944 <inc_lock+0x118>)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	011b      	lsls	r3, r3, #4
 800e8c0:	440b      	add	r3, r1
 800e8c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	689a      	ldr	r2, [r3, #8]
 800e8c8:	491e      	ldr	r1, [pc, #120]	@ (800e944 <inc_lock+0x118>)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	011b      	lsls	r3, r3, #4
 800e8ce:	440b      	add	r3, r1
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	695a      	ldr	r2, [r3, #20]
 800e8d8:	491a      	ldr	r1, [pc, #104]	@ (800e944 <inc_lock+0x118>)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	011b      	lsls	r3, r3, #4
 800e8de:	440b      	add	r3, r1
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e8e4:	4a17      	ldr	r2, [pc, #92]	@ (800e944 <inc_lock+0x118>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	4413      	add	r3, r2
 800e8ec:	330c      	adds	r3, #12
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d009      	beq.n	800e90c <inc_lock+0xe0>
 800e8f8:	4a12      	ldr	r2, [pc, #72]	@ (800e944 <inc_lock+0x118>)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	011b      	lsls	r3, r3, #4
 800e8fe:	4413      	add	r3, r2
 800e900:	330c      	adds	r3, #12
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <inc_lock+0xe0>
 800e908:	2300      	movs	r3, #0
 800e90a:	e015      	b.n	800e938 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d108      	bne.n	800e924 <inc_lock+0xf8>
 800e912:	4a0c      	ldr	r2, [pc, #48]	@ (800e944 <inc_lock+0x118>)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	011b      	lsls	r3, r3, #4
 800e918:	4413      	add	r3, r2
 800e91a:	330c      	adds	r3, #12
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	3301      	adds	r3, #1
 800e920:	b29a      	uxth	r2, r3
 800e922:	e001      	b.n	800e928 <inc_lock+0xfc>
 800e924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e928:	4906      	ldr	r1, [pc, #24]	@ (800e944 <inc_lock+0x118>)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	011b      	lsls	r3, r3, #4
 800e92e:	440b      	add	r3, r1
 800e930:	330c      	adds	r3, #12
 800e932:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	3301      	adds	r3, #1
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	20000a3c 	.word	0x20000a3c

0800e948 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	3b01      	subs	r3, #1
 800e954:	607b      	str	r3, [r7, #4]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d825      	bhi.n	800e9a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e95c:	4a17      	ldr	r2, [pc, #92]	@ (800e9bc <dec_lock+0x74>)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	011b      	lsls	r3, r3, #4
 800e962:	4413      	add	r3, r2
 800e964:	330c      	adds	r3, #12
 800e966:	881b      	ldrh	r3, [r3, #0]
 800e968:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e96a:	89fb      	ldrh	r3, [r7, #14]
 800e96c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e970:	d101      	bne.n	800e976 <dec_lock+0x2e>
 800e972:	2300      	movs	r3, #0
 800e974:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e976:	89fb      	ldrh	r3, [r7, #14]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <dec_lock+0x3a>
 800e97c:	89fb      	ldrh	r3, [r7, #14]
 800e97e:	3b01      	subs	r3, #1
 800e980:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e982:	4a0e      	ldr	r2, [pc, #56]	@ (800e9bc <dec_lock+0x74>)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	011b      	lsls	r3, r3, #4
 800e988:	4413      	add	r3, r2
 800e98a:	330c      	adds	r3, #12
 800e98c:	89fa      	ldrh	r2, [r7, #14]
 800e98e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e990:	89fb      	ldrh	r3, [r7, #14]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d105      	bne.n	800e9a2 <dec_lock+0x5a>
 800e996:	4a09      	ldr	r2, [pc, #36]	@ (800e9bc <dec_lock+0x74>)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	011b      	lsls	r3, r3, #4
 800e99c:	4413      	add	r3, r2
 800e99e:	2200      	movs	r2, #0
 800e9a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	737b      	strb	r3, [r7, #13]
 800e9a6:	e001      	b.n	800e9ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e9ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3714      	adds	r7, #20
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop
 800e9bc:	20000a3c 	.word	0x20000a3c

0800e9c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60fb      	str	r3, [r7, #12]
 800e9cc:	e010      	b.n	800e9f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9ce:	4a0d      	ldr	r2, [pc, #52]	@ (800ea04 <clear_lock+0x44>)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	011b      	lsls	r3, r3, #4
 800e9d4:	4413      	add	r3, r2
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d105      	bne.n	800e9ea <clear_lock+0x2a>
 800e9de:	4a09      	ldr	r2, [pc, #36]	@ (800ea04 <clear_lock+0x44>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	4413      	add	r3, r2
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d9eb      	bls.n	800e9ce <clear_lock+0xe>
	}
}
 800e9f6:	bf00      	nop
 800e9f8:	bf00      	nop
 800e9fa:	3714      	adds	r7, #20
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	20000a3c 	.word	0x20000a3c

0800ea08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	78db      	ldrb	r3, [r3, #3]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d034      	beq.n	800ea86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	7858      	ldrb	r0, [r3, #1]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	f7ff fd40 	bl	800e4b4 <disk_write>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	73fb      	strb	r3, [r7, #15]
 800ea3e:	e022      	b.n	800ea86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a1b      	ldr	r3, [r3, #32]
 800ea4a:	697a      	ldr	r2, [r7, #20]
 800ea4c:	1ad2      	subs	r2, r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d217      	bcs.n	800ea86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	789b      	ldrb	r3, [r3, #2]
 800ea5a:	613b      	str	r3, [r7, #16]
 800ea5c:	e010      	b.n	800ea80 <sync_window+0x78>
					wsect += fs->fsize;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	4413      	add	r3, r2
 800ea66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	7858      	ldrb	r0, [r3, #1]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea72:	2301      	movs	r3, #1
 800ea74:	697a      	ldr	r2, [r7, #20]
 800ea76:	f7ff fd1d 	bl	800e4b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	3b01      	subs	r3, #1
 800ea7e:	613b      	str	r3, [r7, #16]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d8eb      	bhi.n	800ea5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3718      	adds	r7, #24
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa2:	683a      	ldr	r2, [r7, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d01b      	beq.n	800eae0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7ff ffad 	bl	800ea08 <sync_window>
 800eaae:	4603      	mov	r3, r0
 800eab0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eab2:	7bfb      	ldrb	r3, [r7, #15]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d113      	bne.n	800eae0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	7858      	ldrb	r0, [r3, #1]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eac2:	2301      	movs	r3, #1
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	f7ff fcd5 	bl	800e474 <disk_read>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d004      	beq.n	800eada <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ead0:	f04f 33ff 	mov.w	r3, #4294967295
 800ead4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ead6:	2301      	movs	r3, #1
 800ead8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
	...

0800eaec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ff87 	bl	800ea08 <sync_window>
 800eafa:	4603      	mov	r3, r0
 800eafc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d158      	bne.n	800ebb6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b03      	cmp	r3, #3
 800eb0a:	d148      	bne.n	800eb9e <sync_fs+0xb2>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	791b      	ldrb	r3, [r3, #4]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d144      	bne.n	800eb9e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3330      	adds	r3, #48	@ 0x30
 800eb18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff fda9 	bl	800e676 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3330      	adds	r3, #48	@ 0x30
 800eb28:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eb2c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff fd38 	bl	800e5a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3330      	adds	r3, #48	@ 0x30
 800eb3a:	4921      	ldr	r1, [pc, #132]	@ (800ebc0 <sync_fs+0xd4>)
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fd4d 	bl	800e5dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	3330      	adds	r3, #48	@ 0x30
 800eb46:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800eb4a:	491e      	ldr	r1, [pc, #120]	@ (800ebc4 <sync_fs+0xd8>)
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fd45 	bl	800e5dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3330      	adds	r3, #48	@ 0x30
 800eb56:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4610      	mov	r0, r2
 800eb62:	f7ff fd3b 	bl	800e5dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	3330      	adds	r3, #48	@ 0x30
 800eb6a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7ff fd31 	bl	800e5dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	69db      	ldr	r3, [r3, #28]
 800eb7e:	1c5a      	adds	r2, r3, #1
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7858      	ldrb	r0, [r3, #1]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb92:	2301      	movs	r3, #1
 800eb94:	f7ff fc8e 	bl	800e4b4 <disk_write>
			fs->fsi_flag = 0;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	785b      	ldrb	r3, [r3, #1]
 800eba2:	2200      	movs	r2, #0
 800eba4:	2100      	movs	r1, #0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fca4 	bl	800e4f4 <disk_ioctl>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <sync_fs+0xca>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	41615252 	.word	0x41615252
 800ebc4:	61417272 	.word	0x61417272

0800ebc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	3b02      	subs	r3, #2
 800ebd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	3b02      	subs	r3, #2
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d301      	bcc.n	800ebe8 <clust2sect+0x20>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	e008      	b.n	800ebfa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	895b      	ldrh	r3, [r3, #10]
 800ebec:	461a      	mov	r2, r3
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	fb03 f202 	mul.w	r2, r3, r2
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebf8:	4413      	add	r3, r2
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	370c      	adds	r7, #12
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b086      	sub	sp, #24
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d904      	bls.n	800ec26 <get_fat+0x20>
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	695b      	ldr	r3, [r3, #20]
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d302      	bcc.n	800ec2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ec26:	2301      	movs	r3, #1
 800ec28:	617b      	str	r3, [r7, #20]
 800ec2a:	e08e      	b.n	800ed4a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b03      	cmp	r3, #3
 800ec38:	d061      	beq.n	800ecfe <get_fat+0xf8>
 800ec3a:	2b03      	cmp	r3, #3
 800ec3c:	dc7b      	bgt.n	800ed36 <get_fat+0x130>
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d002      	beq.n	800ec48 <get_fat+0x42>
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d041      	beq.n	800ecca <get_fat+0xc4>
 800ec46:	e076      	b.n	800ed36 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	085b      	lsrs	r3, r3, #1
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	4413      	add	r3, r2
 800ec54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	6a1a      	ldr	r2, [r3, #32]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	0a5b      	lsrs	r3, r3, #9
 800ec5e:	4413      	add	r3, r2
 800ec60:	4619      	mov	r1, r3
 800ec62:	6938      	ldr	r0, [r7, #16]
 800ec64:	f7ff ff14 	bl	800ea90 <move_window>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d166      	bne.n	800ed3c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	60fa      	str	r2, [r7, #12]
 800ec74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec78:	693a      	ldr	r2, [r7, #16]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6a1a      	ldr	r2, [r3, #32]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	0a5b      	lsrs	r3, r3, #9
 800ec8a:	4413      	add	r3, r2
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	6938      	ldr	r0, [r7, #16]
 800ec90:	f7ff fefe 	bl	800ea90 <move_window>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d152      	bne.n	800ed40 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	4413      	add	r3, r2
 800eca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eca8:	021b      	lsls	r3, r3, #8
 800ecaa:	68ba      	ldr	r2, [r7, #8]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <get_fat+0xba>
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	091b      	lsrs	r3, r3, #4
 800ecbe:	e002      	b.n	800ecc6 <get_fat+0xc0>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecc6:	617b      	str	r3, [r7, #20]
			break;
 800ecc8:	e03f      	b.n	800ed4a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	6a1a      	ldr	r2, [r3, #32]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	0a1b      	lsrs	r3, r3, #8
 800ecd2:	4413      	add	r3, r2
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	6938      	ldr	r0, [r7, #16]
 800ecd8:	f7ff feda 	bl	800ea90 <move_window>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d130      	bne.n	800ed44 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ecf0:	4413      	add	r3, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7ff fc1c 	bl	800e530 <ld_word>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	617b      	str	r3, [r7, #20]
			break;
 800ecfc:	e025      	b.n	800ed4a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	6a1a      	ldr	r2, [r3, #32]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	09db      	lsrs	r3, r3, #7
 800ed06:	4413      	add	r3, r2
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6938      	ldr	r0, [r7, #16]
 800ed0c:	f7ff fec0 	bl	800ea90 <move_window>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d118      	bne.n	800ed48 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ed24:	4413      	add	r3, r2
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff fc1a 	bl	800e560 <ld_dword>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ed32:	617b      	str	r3, [r7, #20]
			break;
 800ed34:	e009      	b.n	800ed4a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed36:	2301      	movs	r3, #1
 800ed38:	617b      	str	r3, [r7, #20]
 800ed3a:	e006      	b.n	800ed4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed3c:	bf00      	nop
 800ed3e:	e004      	b.n	800ed4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed40:	bf00      	nop
 800ed42:	e002      	b.n	800ed4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed44:	bf00      	nop
 800ed46:	e000      	b.n	800ed4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed48:	bf00      	nop
		}
	}

	return val;
 800ed4a:	697b      	ldr	r3, [r7, #20]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3718      	adds	r7, #24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ed54:	b590      	push	{r4, r7, lr}
 800ed56:	b089      	sub	sp, #36	@ 0x24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ed60:	2302      	movs	r3, #2
 800ed62:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	f240 80d9 	bls.w	800ef1e <put_fat+0x1ca>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	f080 80d3 	bcs.w	800ef1e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	2b03      	cmp	r3, #3
 800ed7e:	f000 8096 	beq.w	800eeae <put_fat+0x15a>
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	f300 80cb 	bgt.w	800ef1e <put_fat+0x1ca>
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d002      	beq.n	800ed92 <put_fat+0x3e>
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d06e      	beq.n	800ee6e <put_fat+0x11a>
 800ed90:	e0c5      	b.n	800ef1e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	61bb      	str	r3, [r7, #24]
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	085b      	lsrs	r3, r3, #1
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6a1a      	ldr	r2, [r3, #32]
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	0a5b      	lsrs	r3, r3, #9
 800eda8:	4413      	add	r3, r2
 800edaa:	4619      	mov	r1, r3
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f7ff fe6f 	bl	800ea90 <move_window>
 800edb2:	4603      	mov	r3, r0
 800edb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edb6:	7ffb      	ldrb	r3, [r7, #31]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f040 80a9 	bne.w	800ef10 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	1c59      	adds	r1, r3, #1
 800edc8:	61b9      	str	r1, [r7, #24]
 800edca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edce:	4413      	add	r3, r2
 800edd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	f003 0301 	and.w	r3, r3, #1
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d00d      	beq.n	800edf8 <put_fat+0xa4>
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	b25b      	sxtb	r3, r3
 800ede2:	f003 030f 	and.w	r3, r3, #15
 800ede6:	b25a      	sxtb	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	b2db      	uxtb	r3, r3
 800edec:	011b      	lsls	r3, r3, #4
 800edee:	b25b      	sxtb	r3, r3
 800edf0:	4313      	orrs	r3, r2
 800edf2:	b25b      	sxtb	r3, r3
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	e001      	b.n	800edfc <put_fat+0xa8>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	697a      	ldr	r2, [r7, #20]
 800edfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2201      	movs	r2, #1
 800ee04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6a1a      	ldr	r2, [r3, #32]
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	0a5b      	lsrs	r3, r3, #9
 800ee0e:	4413      	add	r3, r2
 800ee10:	4619      	mov	r1, r3
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff fe3c 	bl	800ea90 <move_window>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee1c:	7ffb      	ldrb	r3, [r7, #31]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d178      	bne.n	800ef14 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee2e:	4413      	add	r3, r2
 800ee30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	f003 0301 	and.w	r3, r3, #1
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <put_fat+0xf0>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	091b      	lsrs	r3, r3, #4
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	e00e      	b.n	800ee62 <put_fat+0x10e>
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	b25b      	sxtb	r3, r3
 800ee4a:	f023 030f 	bic.w	r3, r3, #15
 800ee4e:	b25a      	sxtb	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	0a1b      	lsrs	r3, r3, #8
 800ee54:	b25b      	sxtb	r3, r3
 800ee56:	f003 030f 	and.w	r3, r3, #15
 800ee5a:	b25b      	sxtb	r3, r3
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	b25b      	sxtb	r3, r3
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	697a      	ldr	r2, [r7, #20]
 800ee64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	70da      	strb	r2, [r3, #3]
			break;
 800ee6c:	e057      	b.n	800ef1e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6a1a      	ldr	r2, [r3, #32]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	0a1b      	lsrs	r3, r3, #8
 800ee76:	4413      	add	r3, r2
 800ee78:	4619      	mov	r1, r3
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f7ff fe08 	bl	800ea90 <move_window>
 800ee80:	4603      	mov	r3, r0
 800ee82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee84:	7ffb      	ldrb	r3, [r7, #31]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d146      	bne.n	800ef18 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	005b      	lsls	r3, r3, #1
 800ee94:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ee98:	4413      	add	r3, r2
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	b292      	uxth	r2, r2
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff fb80 	bl	800e5a6 <st_word>
			fs->wflag = 1;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	70da      	strb	r2, [r3, #3]
			break;
 800eeac:	e037      	b.n	800ef1e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6a1a      	ldr	r2, [r3, #32]
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	09db      	lsrs	r3, r3, #7
 800eeb6:	4413      	add	r3, r2
 800eeb8:	4619      	mov	r1, r3
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7ff fde8 	bl	800ea90 <move_window>
 800eec0:	4603      	mov	r3, r0
 800eec2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eec4:	7ffb      	ldrb	r3, [r7, #31]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d128      	bne.n	800ef1c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eede:	4413      	add	r3, r2
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff fb3d 	bl	800e560 <ld_dword>
 800eee6:	4603      	mov	r3, r0
 800eee8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800eeec:	4323      	orrs	r3, r4
 800eeee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eefe:	4413      	add	r3, r2
 800ef00:	6879      	ldr	r1, [r7, #4]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff fb6a 	bl	800e5dc <st_dword>
			fs->wflag = 1;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	70da      	strb	r2, [r3, #3]
			break;
 800ef0e:	e006      	b.n	800ef1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef10:	bf00      	nop
 800ef12:	e004      	b.n	800ef1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef14:	bf00      	nop
 800ef16:	e002      	b.n	800ef1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef18:	bf00      	nop
 800ef1a:	e000      	b.n	800ef1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef1c:	bf00      	nop
		}
	}
	return res;
 800ef1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3724      	adds	r7, #36	@ 0x24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd90      	pop	{r4, r7, pc}

0800ef28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b088      	sub	sp, #32
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d904      	bls.n	800ef4e <remove_chain+0x26>
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	695b      	ldr	r3, [r3, #20]
 800ef48:	68ba      	ldr	r2, [r7, #8]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d301      	bcc.n	800ef52 <remove_chain+0x2a>
 800ef4e:	2302      	movs	r3, #2
 800ef50:	e04b      	b.n	800efea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00c      	beq.n	800ef72 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ef58:	f04f 32ff 	mov.w	r2, #4294967295
 800ef5c:	6879      	ldr	r1, [r7, #4]
 800ef5e:	69b8      	ldr	r0, [r7, #24]
 800ef60:	f7ff fef8 	bl	800ed54 <put_fat>
 800ef64:	4603      	mov	r3, r0
 800ef66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ef68:	7ffb      	ldrb	r3, [r7, #31]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <remove_chain+0x4a>
 800ef6e:	7ffb      	ldrb	r3, [r7, #31]
 800ef70:	e03b      	b.n	800efea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef72:	68b9      	ldr	r1, [r7, #8]
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f7ff fe46 	bl	800ec06 <get_fat>
 800ef7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d031      	beq.n	800efe6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d101      	bne.n	800ef8c <remove_chain+0x64>
 800ef88:	2302      	movs	r3, #2
 800ef8a:	e02e      	b.n	800efea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	d101      	bne.n	800ef98 <remove_chain+0x70>
 800ef94:	2301      	movs	r3, #1
 800ef96:	e028      	b.n	800efea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef98:	2200      	movs	r2, #0
 800ef9a:	68b9      	ldr	r1, [r7, #8]
 800ef9c:	69b8      	ldr	r0, [r7, #24]
 800ef9e:	f7ff fed9 	bl	800ed54 <put_fat>
 800efa2:	4603      	mov	r3, r0
 800efa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800efa6:	7ffb      	ldrb	r3, [r7, #31]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <remove_chain+0x88>
 800efac:	7ffb      	ldrb	r3, [r7, #31]
 800efae:	e01c      	b.n	800efea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	3b02      	subs	r3, #2
 800efba:	429a      	cmp	r2, r3
 800efbc:	d20b      	bcs.n	800efd6 <remove_chain+0xae>
			fs->free_clst++;
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	791b      	ldrb	r3, [r3, #4]
 800efcc:	f043 0301 	orr.w	r3, r3, #1
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	695b      	ldr	r3, [r3, #20]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d3c6      	bcc.n	800ef72 <remove_chain+0x4a>
 800efe4:	e000      	b.n	800efe8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800efe6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3720      	adds	r7, #32
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b088      	sub	sp, #32
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10d      	bne.n	800f024 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d004      	beq.n	800f01e <create_chain+0x2c>
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	695b      	ldr	r3, [r3, #20]
 800f018:	69ba      	ldr	r2, [r7, #24]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d31b      	bcc.n	800f056 <create_chain+0x64>
 800f01e:	2301      	movs	r3, #1
 800f020:	61bb      	str	r3, [r7, #24]
 800f022:	e018      	b.n	800f056 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7ff fded 	bl	800ec06 <get_fat>
 800f02c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d801      	bhi.n	800f038 <create_chain+0x46>
 800f034:	2301      	movs	r3, #1
 800f036:	e070      	b.n	800f11a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03e:	d101      	bne.n	800f044 <create_chain+0x52>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	e06a      	b.n	800f11a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	695b      	ldr	r3, [r3, #20]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d201      	bcs.n	800f052 <create_chain+0x60>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	e063      	b.n	800f11a <create_chain+0x128>
		scl = clst;
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	3301      	adds	r3, #1
 800f05e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	69fa      	ldr	r2, [r7, #28]
 800f066:	429a      	cmp	r2, r3
 800f068:	d307      	bcc.n	800f07a <create_chain+0x88>
				ncl = 2;
 800f06a:	2302      	movs	r3, #2
 800f06c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f06e:	69fa      	ldr	r2, [r7, #28]
 800f070:	69bb      	ldr	r3, [r7, #24]
 800f072:	429a      	cmp	r2, r3
 800f074:	d901      	bls.n	800f07a <create_chain+0x88>
 800f076:	2300      	movs	r3, #0
 800f078:	e04f      	b.n	800f11a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f07a:	69f9      	ldr	r1, [r7, #28]
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f7ff fdc2 	bl	800ec06 <get_fat>
 800f082:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d00e      	beq.n	800f0a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d003      	beq.n	800f098 <create_chain+0xa6>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f096:	d101      	bne.n	800f09c <create_chain+0xaa>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	e03e      	b.n	800f11a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f09c:	69fa      	ldr	r2, [r7, #28]
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d1da      	bne.n	800f05a <create_chain+0x68>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	e038      	b.n	800f11a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f0a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ae:	69f9      	ldr	r1, [r7, #28]
 800f0b0:	6938      	ldr	r0, [r7, #16]
 800f0b2:	f7ff fe4f 	bl	800ed54 <put_fat>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d109      	bne.n	800f0d4 <create_chain+0xe2>
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d006      	beq.n	800f0d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f0c6:	69fa      	ldr	r2, [r7, #28]
 800f0c8:	6839      	ldr	r1, [r7, #0]
 800f0ca:	6938      	ldr	r0, [r7, #16]
 800f0cc:	f7ff fe42 	bl	800ed54 <put_fat>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f0d4:	7dfb      	ldrb	r3, [r7, #23]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d116      	bne.n	800f108 <create_chain+0x116>
		fs->last_clst = ncl;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	69fa      	ldr	r2, [r7, #28]
 800f0de:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	691a      	ldr	r2, [r3, #16]
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	695b      	ldr	r3, [r3, #20]
 800f0e8:	3b02      	subs	r3, #2
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d804      	bhi.n	800f0f8 <create_chain+0x106>
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	1e5a      	subs	r2, r3, #1
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	791b      	ldrb	r3, [r3, #4]
 800f0fc:	f043 0301 	orr.w	r3, r3, #1
 800f100:	b2da      	uxtb	r2, r3
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	711a      	strb	r2, [r3, #4]
 800f106:	e007      	b.n	800f118 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f108:	7dfb      	ldrb	r3, [r7, #23]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d102      	bne.n	800f114 <create_chain+0x122>
 800f10e:	f04f 33ff 	mov.w	r3, #4294967295
 800f112:	e000      	b.n	800f116 <create_chain+0x124>
 800f114:	2301      	movs	r3, #1
 800f116:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f118:	69fb      	ldr	r3, [r7, #28]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3720      	adds	r7, #32
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f122:	b480      	push	{r7}
 800f124:	b087      	sub	sp, #28
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f136:	3304      	adds	r3, #4
 800f138:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	0a5b      	lsrs	r3, r3, #9
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	8952      	ldrh	r2, [r2, #10]
 800f142:	fbb3 f3f2 	udiv	r3, r3, r2
 800f146:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	1d1a      	adds	r2, r3, #4
 800f14c:	613a      	str	r2, [r7, #16]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d101      	bne.n	800f15c <clmt_clust+0x3a>
 800f158:	2300      	movs	r3, #0
 800f15a:	e010      	b.n	800f17e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f15c:	697a      	ldr	r2, [r7, #20]
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	429a      	cmp	r2, r3
 800f162:	d307      	bcc.n	800f174 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f164:	697a      	ldr	r2, [r7, #20]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	617b      	str	r3, [r7, #20]
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	3304      	adds	r3, #4
 800f170:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f172:	e7e9      	b.n	800f148 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f174:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	4413      	add	r3, r2
}
 800f17e:	4618      	mov	r0, r3
 800f180:	371c      	adds	r7, #28
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b086      	sub	sp, #24
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f1a0:	d204      	bcs.n	800f1ac <dir_sdi+0x22>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	f003 031f 	and.w	r3, r3, #31
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	e063      	b.n	800f278 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d106      	bne.n	800f1d0 <dir_sdi+0x46>
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d902      	bls.n	800f1d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10c      	bne.n	800f1f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	095b      	lsrs	r3, r3, #5
 800f1da:	693a      	ldr	r2, [r7, #16]
 800f1dc:	8912      	ldrh	r2, [r2, #8]
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d301      	bcc.n	800f1e6 <dir_sdi+0x5c>
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e048      	b.n	800f278 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	61da      	str	r2, [r3, #28]
 800f1ee:	e029      	b.n	800f244 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	895b      	ldrh	r3, [r3, #10]
 800f1f4:	025b      	lsls	r3, r3, #9
 800f1f6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1f8:	e019      	b.n	800f22e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6979      	ldr	r1, [r7, #20]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff fd01 	bl	800ec06 <get_fat>
 800f204:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20c:	d101      	bne.n	800f212 <dir_sdi+0x88>
 800f20e:	2301      	movs	r3, #1
 800f210:	e032      	b.n	800f278 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d904      	bls.n	800f222 <dir_sdi+0x98>
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	695b      	ldr	r3, [r3, #20]
 800f21c:	697a      	ldr	r2, [r7, #20]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d301      	bcc.n	800f226 <dir_sdi+0x9c>
 800f222:	2302      	movs	r3, #2
 800f224:	e028      	b.n	800f278 <dir_sdi+0xee>
			ofs -= csz;
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	429a      	cmp	r2, r3
 800f234:	d2e1      	bcs.n	800f1fa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f236:	6979      	ldr	r1, [r7, #20]
 800f238:	6938      	ldr	r0, [r7, #16]
 800f23a:	f7ff fcc5 	bl	800ebc8 <clust2sect>
 800f23e:	4602      	mov	r2, r0
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	69db      	ldr	r3, [r3, #28]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <dir_sdi+0xcc>
 800f252:	2302      	movs	r3, #2
 800f254:	e010      	b.n	800f278 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	69da      	ldr	r2, [r3, #28]
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	0a5b      	lsrs	r3, r3, #9
 800f25e:	441a      	add	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f270:	441a      	add	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3718      	adds	r7, #24
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	3320      	adds	r3, #32
 800f296:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	69db      	ldr	r3, [r3, #28]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <dir_next+0x28>
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f2a6:	d301      	bcc.n	800f2ac <dir_next+0x2c>
 800f2a8:	2304      	movs	r3, #4
 800f2aa:	e0aa      	b.n	800f402 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f040 8098 	bne.w	800f3e8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	69db      	ldr	r3, [r3, #28]
 800f2bc:	1c5a      	adds	r2, r3, #1
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10b      	bne.n	800f2e2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	095b      	lsrs	r3, r3, #5
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	8912      	ldrh	r2, [r2, #8]
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	f0c0 8088 	bcc.w	800f3e8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	61da      	str	r2, [r3, #28]
 800f2de:	2304      	movs	r3, #4
 800f2e0:	e08f      	b.n	800f402 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	0a5b      	lsrs	r3, r3, #9
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	8952      	ldrh	r2, [r2, #10]
 800f2ea:	3a01      	subs	r2, #1
 800f2ec:	4013      	ands	r3, r2
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d17a      	bne.n	800f3e8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f7ff fc83 	bl	800ec06 <get_fat>
 800f300:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d801      	bhi.n	800f30c <dir_next+0x8c>
 800f308:	2302      	movs	r3, #2
 800f30a:	e07a      	b.n	800f402 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f312:	d101      	bne.n	800f318 <dir_next+0x98>
 800f314:	2301      	movs	r3, #1
 800f316:	e074      	b.n	800f402 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	695b      	ldr	r3, [r3, #20]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d358      	bcc.n	800f3d4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d104      	bne.n	800f332 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	61da      	str	r2, [r3, #28]
 800f32e:	2304      	movs	r3, #4
 800f330:	e067      	b.n	800f402 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	699b      	ldr	r3, [r3, #24]
 800f338:	4619      	mov	r1, r3
 800f33a:	4610      	mov	r0, r2
 800f33c:	f7ff fe59 	bl	800eff2 <create_chain>
 800f340:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <dir_next+0xcc>
 800f348:	2307      	movs	r3, #7
 800f34a:	e05a      	b.n	800f402 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d101      	bne.n	800f356 <dir_next+0xd6>
 800f352:	2302      	movs	r3, #2
 800f354:	e055      	b.n	800f402 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35c:	d101      	bne.n	800f362 <dir_next+0xe2>
 800f35e:	2301      	movs	r3, #1
 800f360:	e04f      	b.n	800f402 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff fb50 	bl	800ea08 <sync_window>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <dir_next+0xf2>
 800f36e:	2301      	movs	r3, #1
 800f370:	e047      	b.n	800f402 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3330      	adds	r3, #48	@ 0x30
 800f376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f37a:	2100      	movs	r1, #0
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff f97a 	bl	800e676 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f382:	2300      	movs	r3, #0
 800f384:	613b      	str	r3, [r7, #16]
 800f386:	6979      	ldr	r1, [r7, #20]
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7ff fc1d 	bl	800ebc8 <clust2sect>
 800f38e:	4602      	mov	r2, r0
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f394:	e012      	b.n	800f3bc <dir_next+0x13c>
						fs->wflag = 1;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2201      	movs	r2, #1
 800f39a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7ff fb33 	bl	800ea08 <sync_window>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <dir_next+0x12c>
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	e02a      	b.n	800f402 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	613b      	str	r3, [r7, #16]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b6:	1c5a      	adds	r2, r3, #1
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	895b      	ldrh	r3, [r3, #10]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d3e6      	bcc.n	800f396 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	1ad2      	subs	r2, r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f3da:	6979      	ldr	r1, [r7, #20]
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7ff fbf3 	bl	800ebc8 <clust2sect>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3fa:	441a      	add	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b086      	sub	sp, #24
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f41a:	2100      	movs	r1, #0
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7ff feb4 	bl	800f18a <dir_sdi>
 800f422:	4603      	mov	r3, r0
 800f424:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f426:	7dfb      	ldrb	r3, [r7, #23]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d12b      	bne.n	800f484 <dir_alloc+0x7a>
		n = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	4619      	mov	r1, r3
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7ff fb2a 	bl	800ea90 <move_window>
 800f43c:	4603      	mov	r3, r0
 800f43e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f440:	7dfb      	ldrb	r3, [r7, #23]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d11d      	bne.n	800f482 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	2be5      	cmp	r3, #229	@ 0xe5
 800f44e:	d004      	beq.n	800f45a <dir_alloc+0x50>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a1b      	ldr	r3, [r3, #32]
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d107      	bne.n	800f46a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	3301      	adds	r3, #1
 800f45e:	613b      	str	r3, [r7, #16]
 800f460:	693a      	ldr	r2, [r7, #16]
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	429a      	cmp	r2, r3
 800f466:	d102      	bne.n	800f46e <dir_alloc+0x64>
 800f468:	e00c      	b.n	800f484 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f46a:	2300      	movs	r3, #0
 800f46c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f46e:	2101      	movs	r1, #1
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ff05 	bl	800f280 <dir_next>
 800f476:	4603      	mov	r3, r0
 800f478:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d0d7      	beq.n	800f430 <dir_alloc+0x26>
 800f480:	e000      	b.n	800f484 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f482:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f484:	7dfb      	ldrb	r3, [r7, #23]
 800f486:	2b04      	cmp	r3, #4
 800f488:	d101      	bne.n	800f48e <dir_alloc+0x84>
 800f48a:	2307      	movs	r3, #7
 800f48c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3718      	adds	r7, #24
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	331a      	adds	r3, #26
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff f842 	bl	800e530 <ld_word>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d109      	bne.n	800f4cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	3314      	adds	r3, #20
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff f837 	bl	800e530 <ld_word>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	041b      	lsls	r3, r3, #16
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b084      	sub	sp, #16
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	331a      	adds	r3, #26
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	b292      	uxth	r2, r2
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff f85a 	bl	800e5a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d109      	bne.n	800f50e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	f103 0214 	add.w	r2, r3, #20
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	0c1b      	lsrs	r3, r3, #16
 800f504:	b29b      	uxth	r3, r3
 800f506:	4619      	mov	r1, r3
 800f508:	4610      	mov	r0, r2
 800f50a:	f7ff f84c 	bl	800e5a6 <st_word>
	}
}
 800f50e:	bf00      	nop
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b086      	sub	sp, #24
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f524:	2100      	movs	r1, #0
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7ff fe2f 	bl	800f18a <dir_sdi>
 800f52c:	4603      	mov	r3, r0
 800f52e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f530:	7dfb      	ldrb	r3, [r7, #23]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <dir_find+0x24>
 800f536:	7dfb      	ldrb	r3, [r7, #23]
 800f538:	e03e      	b.n	800f5b8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	69db      	ldr	r3, [r3, #28]
 800f53e:	4619      	mov	r1, r3
 800f540:	6938      	ldr	r0, [r7, #16]
 800f542:	f7ff faa5 	bl	800ea90 <move_window>
 800f546:	4603      	mov	r3, r0
 800f548:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f54a:	7dfb      	ldrb	r3, [r7, #23]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d12f      	bne.n	800f5b0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a1b      	ldr	r3, [r3, #32]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d102      	bne.n	800f564 <dir_find+0x4e>
 800f55e:	2304      	movs	r3, #4
 800f560:	75fb      	strb	r3, [r7, #23]
 800f562:	e028      	b.n	800f5b6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6a1b      	ldr	r3, [r3, #32]
 800f568:	330b      	adds	r3, #11
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f570:	b2da      	uxtb	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	330b      	adds	r3, #11
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	f003 0308 	and.w	r3, r3, #8
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10a      	bne.n	800f59c <dir_find+0x86>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6a18      	ldr	r0, [r3, #32]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	3324      	adds	r3, #36	@ 0x24
 800f58e:	220b      	movs	r2, #11
 800f590:	4619      	mov	r1, r3
 800f592:	f7ff f88b 	bl	800e6ac <mem_cmp>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00b      	beq.n	800f5b4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f59c:	2100      	movs	r1, #0
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff fe6e 	bl	800f280 <dir_next>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f5a8:	7dfb      	ldrb	r3, [r7, #23]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d0c5      	beq.n	800f53a <dir_find+0x24>
 800f5ae:	e002      	b.n	800f5b6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f5b0:	bf00      	nop
 800f5b2:	e000      	b.n	800f5b6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5b4:	bf00      	nop

	return res;
 800f5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f5ce:	2101      	movs	r1, #1
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f7ff ff1a 	bl	800f40a <dir_alloc>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d11c      	bne.n	800f61a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	69db      	ldr	r3, [r3, #28]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	68b8      	ldr	r0, [r7, #8]
 800f5e8:	f7ff fa52 	bl	800ea90 <move_window>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d111      	bne.n	800f61a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	2220      	movs	r2, #32
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff f839 	bl	800e676 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a18      	ldr	r0, [r3, #32]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3324      	adds	r3, #36	@ 0x24
 800f60c:	220b      	movs	r2, #11
 800f60e:	4619      	mov	r1, r3
 800f610:	f7ff f810 	bl	800e634 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	2201      	movs	r2, #1
 800f618:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b088      	sub	sp, #32
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	60fb      	str	r3, [r7, #12]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3324      	adds	r3, #36	@ 0x24
 800f638:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f63a:	220b      	movs	r2, #11
 800f63c:	2120      	movs	r1, #32
 800f63e:	68b8      	ldr	r0, [r7, #8]
 800f640:	f7ff f819 	bl	800e676 <mem_set>
	si = i = 0; ni = 8;
 800f644:	2300      	movs	r3, #0
 800f646:	613b      	str	r3, [r7, #16]
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	61fb      	str	r3, [r7, #28]
 800f64c:	2308      	movs	r3, #8
 800f64e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	61fa      	str	r2, [r7, #28]
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	4413      	add	r3, r2
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f65e:	7efb      	ldrb	r3, [r7, #27]
 800f660:	2b20      	cmp	r3, #32
 800f662:	d94e      	bls.n	800f702 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f664:	7efb      	ldrb	r3, [r7, #27]
 800f666:	2b2f      	cmp	r3, #47	@ 0x2f
 800f668:	d006      	beq.n	800f678 <create_name+0x54>
 800f66a:	7efb      	ldrb	r3, [r7, #27]
 800f66c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f66e:	d110      	bne.n	800f692 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f670:	e002      	b.n	800f678 <create_name+0x54>
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	3301      	adds	r3, #1
 800f676:	61fb      	str	r3, [r7, #28]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	4413      	add	r3, r2
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b2f      	cmp	r3, #47	@ 0x2f
 800f682:	d0f6      	beq.n	800f672 <create_name+0x4e>
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	4413      	add	r3, r2
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f68e:	d0f0      	beq.n	800f672 <create_name+0x4e>
			break;
 800f690:	e038      	b.n	800f704 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f692:	7efb      	ldrb	r3, [r7, #27]
 800f694:	2b2e      	cmp	r3, #46	@ 0x2e
 800f696:	d003      	beq.n	800f6a0 <create_name+0x7c>
 800f698:	693a      	ldr	r2, [r7, #16]
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d30c      	bcc.n	800f6ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	2b0b      	cmp	r3, #11
 800f6a4:	d002      	beq.n	800f6ac <create_name+0x88>
 800f6a6:	7efb      	ldrb	r3, [r7, #27]
 800f6a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6aa:	d001      	beq.n	800f6b0 <create_name+0x8c>
 800f6ac:	2306      	movs	r3, #6
 800f6ae:	e044      	b.n	800f73a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f6b0:	2308      	movs	r3, #8
 800f6b2:	613b      	str	r3, [r7, #16]
 800f6b4:	230b      	movs	r3, #11
 800f6b6:	617b      	str	r3, [r7, #20]
			continue;
 800f6b8:	e022      	b.n	800f700 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f6ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	da04      	bge.n	800f6cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f6c2:	7efb      	ldrb	r3, [r7, #27]
 800f6c4:	3b80      	subs	r3, #128	@ 0x80
 800f6c6:	4a1f      	ldr	r2, [pc, #124]	@ (800f744 <create_name+0x120>)
 800f6c8:	5cd3      	ldrb	r3, [r2, r3]
 800f6ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f6cc:	7efb      	ldrb	r3, [r7, #27]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	481d      	ldr	r0, [pc, #116]	@ (800f748 <create_name+0x124>)
 800f6d2:	f7ff f812 	bl	800e6fa <chk_chr>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <create_name+0xbc>
 800f6dc:	2306      	movs	r3, #6
 800f6de:	e02c      	b.n	800f73a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f6e0:	7efb      	ldrb	r3, [r7, #27]
 800f6e2:	2b60      	cmp	r3, #96	@ 0x60
 800f6e4:	d905      	bls.n	800f6f2 <create_name+0xce>
 800f6e6:	7efb      	ldrb	r3, [r7, #27]
 800f6e8:	2b7a      	cmp	r3, #122	@ 0x7a
 800f6ea:	d802      	bhi.n	800f6f2 <create_name+0xce>
 800f6ec:	7efb      	ldrb	r3, [r7, #27]
 800f6ee:	3b20      	subs	r3, #32
 800f6f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	613a      	str	r2, [r7, #16]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	7efa      	ldrb	r2, [r7, #27]
 800f6fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f700:	e7a6      	b.n	800f650 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f702:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	441a      	add	r2, r3
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d101      	bne.n	800f718 <create_name+0xf4>
 800f714:	2306      	movs	r3, #6
 800f716:	e010      	b.n	800f73a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2be5      	cmp	r3, #229	@ 0xe5
 800f71e:	d102      	bne.n	800f726 <create_name+0x102>
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	2205      	movs	r2, #5
 800f724:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f726:	7efb      	ldrb	r3, [r7, #27]
 800f728:	2b20      	cmp	r3, #32
 800f72a:	d801      	bhi.n	800f730 <create_name+0x10c>
 800f72c:	2204      	movs	r2, #4
 800f72e:	e000      	b.n	800f732 <create_name+0x10e>
 800f730:	2200      	movs	r2, #0
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	330b      	adds	r3, #11
 800f736:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f738:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3720      	adds	r7, #32
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	08011958 	.word	0x08011958
 800f748:	080118c0 	.word	0x080118c0

0800f74c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f760:	e002      	b.n	800f768 <follow_path+0x1c>
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	3301      	adds	r3, #1
 800f766:	603b      	str	r3, [r7, #0]
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f76e:	d0f8      	beq.n	800f762 <follow_path+0x16>
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	2b5c      	cmp	r3, #92	@ 0x5c
 800f776:	d0f4      	beq.n	800f762 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	2200      	movs	r2, #0
 800f77c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	2b1f      	cmp	r3, #31
 800f784:	d80a      	bhi.n	800f79c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2280      	movs	r2, #128	@ 0x80
 800f78a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f78e:	2100      	movs	r1, #0
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff fcfa 	bl	800f18a <dir_sdi>
 800f796:	4603      	mov	r3, r0
 800f798:	75fb      	strb	r3, [r7, #23]
 800f79a:	e043      	b.n	800f824 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f79c:	463b      	mov	r3, r7
 800f79e:	4619      	mov	r1, r3
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7ff ff3f 	bl	800f624 <create_name>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7aa:	7dfb      	ldrb	r3, [r7, #23]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d134      	bne.n	800f81a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff feb0 	bl	800f516 <dir_find>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f7c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f7c2:	7dfb      	ldrb	r3, [r7, #23]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00a      	beq.n	800f7de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
 800f7ca:	2b04      	cmp	r3, #4
 800f7cc:	d127      	bne.n	800f81e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f7ce:	7afb      	ldrb	r3, [r7, #11]
 800f7d0:	f003 0304 	and.w	r3, r3, #4
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d122      	bne.n	800f81e <follow_path+0xd2>
 800f7d8:	2305      	movs	r3, #5
 800f7da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f7dc:	e01f      	b.n	800f81e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f7de:	7afb      	ldrb	r3, [r7, #11]
 800f7e0:	f003 0304 	and.w	r3, r3, #4
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d11c      	bne.n	800f822 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	799b      	ldrb	r3, [r3, #6]
 800f7ec:	f003 0310 	and.w	r3, r3, #16
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f7f4:	2305      	movs	r3, #5
 800f7f6:	75fb      	strb	r3, [r7, #23]
 800f7f8:	e014      	b.n	800f824 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f808:	4413      	add	r3, r2
 800f80a:	4619      	mov	r1, r3
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f7ff fe43 	bl	800f498 <ld_clust>
 800f812:	4602      	mov	r2, r0
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f818:	e7c0      	b.n	800f79c <follow_path+0x50>
			if (res != FR_OK) break;
 800f81a:	bf00      	nop
 800f81c:	e002      	b.n	800f824 <follow_path+0xd8>
				break;
 800f81e:	bf00      	nop
 800f820:	e000      	b.n	800f824 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f822:	bf00      	nop
			}
		}
	}

	return res;
 800f824:	7dfb      	ldrb	r3, [r7, #23]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3718      	adds	r7, #24
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f82e:	b480      	push	{r7}
 800f830:	b087      	sub	sp, #28
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f836:	f04f 33ff 	mov.w	r3, #4294967295
 800f83a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d031      	beq.n	800f8a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	617b      	str	r3, [r7, #20]
 800f84a:	e002      	b.n	800f852 <get_ldnumber+0x24>
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	3301      	adds	r3, #1
 800f850:	617b      	str	r3, [r7, #20]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	2b20      	cmp	r3, #32
 800f858:	d903      	bls.n	800f862 <get_ldnumber+0x34>
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f860:	d1f4      	bne.n	800f84c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	2b3a      	cmp	r3, #58	@ 0x3a
 800f868:	d11c      	bne.n	800f8a4 <get_ldnumber+0x76>
			tp = *path;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	1c5a      	adds	r2, r3, #1
 800f874:	60fa      	str	r2, [r7, #12]
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	3b30      	subs	r3, #48	@ 0x30
 800f87a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2b09      	cmp	r3, #9
 800f880:	d80e      	bhi.n	800f8a0 <get_ldnumber+0x72>
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	429a      	cmp	r2, r3
 800f888:	d10a      	bne.n	800f8a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d107      	bne.n	800f8a0 <get_ldnumber+0x72>
					vol = (int)i;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	3301      	adds	r3, #1
 800f898:	617b      	str	r3, [r7, #20]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	697a      	ldr	r2, [r7, #20]
 800f89e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	e002      	b.n	800f8aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f8a8:	693b      	ldr	r3, [r7, #16]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	371c      	adds	r7, #28
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
	...

0800f8b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	70da      	strb	r2, [r3, #3]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f8d0:	6839      	ldr	r1, [r7, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f7ff f8dc 	bl	800ea90 <move_window>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <check_fs+0x2a>
 800f8de:	2304      	movs	r3, #4
 800f8e0:	e038      	b.n	800f954 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3330      	adds	r3, #48	@ 0x30
 800f8e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fe fe20 	bl	800e530 <ld_word>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d001      	beq.n	800f900 <check_fs+0x48>
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	e029      	b.n	800f954 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f906:	2be9      	cmp	r3, #233	@ 0xe9
 800f908:	d009      	beq.n	800f91e <check_fs+0x66>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f910:	2beb      	cmp	r3, #235	@ 0xeb
 800f912:	d11e      	bne.n	800f952 <check_fs+0x9a>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f91a:	2b90      	cmp	r3, #144	@ 0x90
 800f91c:	d119      	bne.n	800f952 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	3330      	adds	r3, #48	@ 0x30
 800f922:	3336      	adds	r3, #54	@ 0x36
 800f924:	4618      	mov	r0, r3
 800f926:	f7fe fe1b 	bl	800e560 <ld_dword>
 800f92a:	4603      	mov	r3, r0
 800f92c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f930:	4a0a      	ldr	r2, [pc, #40]	@ (800f95c <check_fs+0xa4>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d101      	bne.n	800f93a <check_fs+0x82>
 800f936:	2300      	movs	r3, #0
 800f938:	e00c      	b.n	800f954 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	3330      	adds	r3, #48	@ 0x30
 800f93e:	3352      	adds	r3, #82	@ 0x52
 800f940:	4618      	mov	r0, r3
 800f942:	f7fe fe0d 	bl	800e560 <ld_dword>
 800f946:	4603      	mov	r3, r0
 800f948:	4a05      	ldr	r2, [pc, #20]	@ (800f960 <check_fs+0xa8>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d101      	bne.n	800f952 <check_fs+0x9a>
 800f94e:	2300      	movs	r3, #0
 800f950:	e000      	b.n	800f954 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f952:	2302      	movs	r3, #2
}
 800f954:	4618      	mov	r0, r3
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	00544146 	.word	0x00544146
 800f960:	33544146 	.word	0x33544146

0800f964 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b096      	sub	sp, #88	@ 0x58
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	4613      	mov	r3, r2
 800f970:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2200      	movs	r2, #0
 800f976:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff ff58 	bl	800f82e <get_ldnumber>
 800f97e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f982:	2b00      	cmp	r3, #0
 800f984:	da01      	bge.n	800f98a <find_volume+0x26>
 800f986:	230b      	movs	r3, #11
 800f988:	e22d      	b.n	800fde6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f98a:	4aa1      	ldr	r2, [pc, #644]	@ (800fc10 <find_volume+0x2ac>)
 800f98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f992:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f996:	2b00      	cmp	r3, #0
 800f998:	d101      	bne.n	800f99e <find_volume+0x3a>
 800f99a:	230c      	movs	r3, #12
 800f99c:	e223      	b.n	800fde6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	f023 0301 	bic.w	r3, r3, #1
 800f9aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d01a      	beq.n	800f9ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b6:	785b      	ldrb	r3, [r3, #1]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe fd19 	bl	800e3f0 <disk_status>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f9c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9c8:	f003 0301 	and.w	r3, r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d10c      	bne.n	800f9ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f9d0:	79fb      	ldrb	r3, [r7, #7]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d007      	beq.n	800f9e6 <find_volume+0x82>
 800f9d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9da:	f003 0304 	and.w	r3, r3, #4
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f9e2:	230a      	movs	r3, #10
 800f9e4:	e1ff      	b.n	800fde6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	e1fd      	b.n	800fde6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9fa:	785b      	ldrb	r3, [r3, #1]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe fd11 	bl	800e424 <disk_initialize>
 800fa02:	4603      	mov	r3, r0
 800fa04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fa08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa0c:	f003 0301 	and.w	r3, r3, #1
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fa14:	2303      	movs	r3, #3
 800fa16:	e1e6      	b.n	800fde6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fa18:	79fb      	ldrb	r3, [r7, #7]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d007      	beq.n	800fa2e <find_volume+0xca>
 800fa1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa22:	f003 0304 	and.w	r3, r3, #4
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fa2a:	230a      	movs	r3, #10
 800fa2c:	e1db      	b.n	800fde6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fa32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa36:	f7ff ff3f 	bl	800f8b8 <check_fs>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fa40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d149      	bne.n	800fadc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa48:	2300      	movs	r3, #0
 800fa4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa4c:	e01e      	b.n	800fa8c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fa54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa56:	011b      	lsls	r3, r3, #4
 800fa58:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fa5c:	4413      	add	r3, r2
 800fa5e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fa60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa62:	3304      	adds	r3, #4
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d006      	beq.n	800fa78 <find_volume+0x114>
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe fd76 	bl	800e560 <ld_dword>
 800fa74:	4602      	mov	r2, r0
 800fa76:	e000      	b.n	800fa7a <find_volume+0x116>
 800fa78:	2200      	movs	r2, #0
 800fa7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	3358      	adds	r3, #88	@ 0x58
 800fa80:	443b      	add	r3, r7
 800fa82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa88:	3301      	adds	r3, #1
 800fa8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d9dd      	bls.n	800fa4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fa92:	2300      	movs	r3, #0
 800fa94:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fa96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <find_volume+0x13e>
 800fa9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800faa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	3358      	adds	r3, #88	@ 0x58
 800faa8:	443b      	add	r3, r7
 800faaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800faae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d005      	beq.n	800fac2 <find_volume+0x15e>
 800fab6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fab8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800faba:	f7ff fefd 	bl	800f8b8 <check_fs>
 800fabe:	4603      	mov	r3, r0
 800fac0:	e000      	b.n	800fac4 <find_volume+0x160>
 800fac2:	2303      	movs	r3, #3
 800fac4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fac8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800facc:	2b01      	cmp	r3, #1
 800face:	d905      	bls.n	800fadc <find_volume+0x178>
 800fad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fad2:	3301      	adds	r3, #1
 800fad4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fad8:	2b03      	cmp	r3, #3
 800fada:	d9e2      	bls.n	800faa2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fadc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fae0:	2b04      	cmp	r3, #4
 800fae2:	d101      	bne.n	800fae8 <find_volume+0x184>
 800fae4:	2301      	movs	r3, #1
 800fae6:	e17e      	b.n	800fde6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fae8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800faec:	2b01      	cmp	r3, #1
 800faee:	d901      	bls.n	800faf4 <find_volume+0x190>
 800faf0:	230d      	movs	r3, #13
 800faf2:	e178      	b.n	800fde6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800faf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf6:	3330      	adds	r3, #48	@ 0x30
 800faf8:	330b      	adds	r3, #11
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fe fd18 	bl	800e530 <ld_word>
 800fb00:	4603      	mov	r3, r0
 800fb02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb06:	d001      	beq.n	800fb0c <find_volume+0x1a8>
 800fb08:	230d      	movs	r3, #13
 800fb0a:	e16c      	b.n	800fde6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0e:	3330      	adds	r3, #48	@ 0x30
 800fb10:	3316      	adds	r3, #22
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe fd0c 	bl	800e530 <ld_word>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fb1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d106      	bne.n	800fb30 <find_volume+0x1cc>
 800fb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb24:	3330      	adds	r3, #48	@ 0x30
 800fb26:	3324      	adds	r3, #36	@ 0x24
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fe fd19 	bl	800e560 <ld_dword>
 800fb2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fb34:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb38:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb42:	789b      	ldrb	r3, [r3, #2]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d005      	beq.n	800fb54 <find_volume+0x1f0>
 800fb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb4a:	789b      	ldrb	r3, [r3, #2]
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	d001      	beq.n	800fb54 <find_volume+0x1f0>
 800fb50:	230d      	movs	r3, #13
 800fb52:	e148      	b.n	800fde6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb56:	789b      	ldrb	r3, [r3, #2]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb5c:	fb02 f303 	mul.w	r3, r2, r3
 800fb60:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb68:	461a      	mov	r2, r3
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb70:	895b      	ldrh	r3, [r3, #10]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d008      	beq.n	800fb88 <find_volume+0x224>
 800fb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb78:	895b      	ldrh	r3, [r3, #10]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	895b      	ldrh	r3, [r3, #10]
 800fb80:	3b01      	subs	r3, #1
 800fb82:	4013      	ands	r3, r2
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d001      	beq.n	800fb8c <find_volume+0x228>
 800fb88:	230d      	movs	r3, #13
 800fb8a:	e12c      	b.n	800fde6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8e:	3330      	adds	r3, #48	@ 0x30
 800fb90:	3311      	adds	r3, #17
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fe fccc 	bl	800e530 <ld_word>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba2:	891b      	ldrh	r3, [r3, #8]
 800fba4:	f003 030f 	and.w	r3, r3, #15
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <find_volume+0x24e>
 800fbae:	230d      	movs	r3, #13
 800fbb0:	e119      	b.n	800fde6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb4:	3330      	adds	r3, #48	@ 0x30
 800fbb6:	3313      	adds	r3, #19
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fe fcb9 	bl	800e530 <ld_word>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fbc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d106      	bne.n	800fbd6 <find_volume+0x272>
 800fbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbca:	3330      	adds	r3, #48	@ 0x30
 800fbcc:	3320      	adds	r3, #32
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fcc6 	bl	800e560 <ld_dword>
 800fbd4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd8:	3330      	adds	r3, #48	@ 0x30
 800fbda:	330e      	adds	r3, #14
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7fe fca7 	bl	800e530 <ld_word>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fbe6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d101      	bne.n	800fbf0 <find_volume+0x28c>
 800fbec:	230d      	movs	r3, #13
 800fbee:	e0fa      	b.n	800fde6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fbf0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fbf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbf4:	4413      	add	r3, r2
 800fbf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fbf8:	8912      	ldrh	r2, [r2, #8]
 800fbfa:	0912      	lsrs	r2, r2, #4
 800fbfc:	b292      	uxth	r2, r2
 800fbfe:	4413      	add	r3, r2
 800fc00:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fc02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d204      	bcs.n	800fc14 <find_volume+0x2b0>
 800fc0a:	230d      	movs	r3, #13
 800fc0c:	e0eb      	b.n	800fde6 <find_volume+0x482>
 800fc0e:	bf00      	nop
 800fc10:	20000a34 	.word	0x20000a34
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fc14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc1c:	8952      	ldrh	r2, [r2, #10]
 800fc1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc22:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d101      	bne.n	800fc2e <find_volume+0x2ca>
 800fc2a:	230d      	movs	r3, #13
 800fc2c:	e0db      	b.n	800fde6 <find_volume+0x482>
		fmt = FS_FAT32;
 800fc2e:	2303      	movs	r3, #3
 800fc30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc36:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d802      	bhi.n	800fc44 <find_volume+0x2e0>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc46:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d802      	bhi.n	800fc54 <find_volume+0x2f0>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc56:	1c9a      	adds	r2, r3, #2
 800fc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc60:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fc62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc66:	441a      	add	r2, r3
 800fc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fc6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc70:	441a      	add	r2, r3
 800fc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc74:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800fc76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	d11e      	bne.n	800fcbc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc80:	3330      	adds	r3, #48	@ 0x30
 800fc82:	332a      	adds	r3, #42	@ 0x2a
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fe fc53 	bl	800e530 <ld_word>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <find_volume+0x330>
 800fc90:	230d      	movs	r3, #13
 800fc92:	e0a8      	b.n	800fde6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc96:	891b      	ldrh	r3, [r3, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d001      	beq.n	800fca0 <find_volume+0x33c>
 800fc9c:	230d      	movs	r3, #13
 800fc9e:	e0a2      	b.n	800fde6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca2:	3330      	adds	r3, #48	@ 0x30
 800fca4:	332c      	adds	r3, #44	@ 0x2c
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fe fc5a 	bl	800e560 <ld_dword>
 800fcac:	4602      	mov	r2, r0
 800fcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb4:	695b      	ldr	r3, [r3, #20]
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcba:	e01f      	b.n	800fcfc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcbe:	891b      	ldrh	r3, [r3, #8]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d101      	bne.n	800fcc8 <find_volume+0x364>
 800fcc4:	230d      	movs	r3, #13
 800fcc6:	e08e      	b.n	800fde6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcca:	6a1a      	ldr	r2, [r3, #32]
 800fccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcce:	441a      	add	r2, r3
 800fcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcd2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fcd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d103      	bne.n	800fce4 <find_volume+0x380>
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcde:	695b      	ldr	r3, [r3, #20]
 800fce0:	005b      	lsls	r3, r3, #1
 800fce2:	e00a      	b.n	800fcfa <find_volume+0x396>
 800fce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce6:	695a      	ldr	r2, [r3, #20]
 800fce8:	4613      	mov	r3, r2
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	4413      	add	r3, r2
 800fcee:	085a      	lsrs	r2, r3, #1
 800fcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf2:	695b      	ldr	r3, [r3, #20]
 800fcf4:	f003 0301 	and.w	r3, r3, #1
 800fcf8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fcfa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcfe:	699a      	ldr	r2, [r3, #24]
 800fd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd02:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fd06:	0a5b      	lsrs	r3, r3, #9
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d201      	bcs.n	800fd10 <find_volume+0x3ac>
 800fd0c:	230d      	movs	r3, #13
 800fd0e:	e06a      	b.n	800fde6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd12:	f04f 32ff 	mov.w	r2, #4294967295
 800fd16:	611a      	str	r2, [r3, #16]
 800fd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1a:	691a      	ldr	r2, [r3, #16]
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd22:	2280      	movs	r2, #128	@ 0x80
 800fd24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fd26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fd2a:	2b03      	cmp	r3, #3
 800fd2c:	d149      	bne.n	800fdc2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd30:	3330      	adds	r3, #48	@ 0x30
 800fd32:	3330      	adds	r3, #48	@ 0x30
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fe fbfb 	bl	800e530 <ld_word>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d140      	bne.n	800fdc2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fd40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd42:	3301      	adds	r3, #1
 800fd44:	4619      	mov	r1, r3
 800fd46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd48:	f7fe fea2 	bl	800ea90 <move_window>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d137      	bne.n	800fdc2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd54:	2200      	movs	r2, #0
 800fd56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd5a:	3330      	adds	r3, #48	@ 0x30
 800fd5c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fe fbe5 	bl	800e530 <ld_word>
 800fd66:	4603      	mov	r3, r0
 800fd68:	461a      	mov	r2, r3
 800fd6a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d127      	bne.n	800fdc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd74:	3330      	adds	r3, #48	@ 0x30
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe fbf2 	bl	800e560 <ld_dword>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	4a1c      	ldr	r2, [pc, #112]	@ (800fdf0 <find_volume+0x48c>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d11e      	bne.n	800fdc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd86:	3330      	adds	r3, #48	@ 0x30
 800fd88:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fe fbe7 	bl	800e560 <ld_dword>
 800fd92:	4603      	mov	r3, r0
 800fd94:	4a17      	ldr	r2, [pc, #92]	@ (800fdf4 <find_volume+0x490>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d113      	bne.n	800fdc2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9c:	3330      	adds	r3, #48	@ 0x30
 800fd9e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fe fbdc 	bl	800e560 <ld_dword>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb0:	3330      	adds	r3, #48	@ 0x30
 800fdb2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fe fbd2 	bl	800e560 <ld_dword>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fdc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fdca:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf8 <find_volume+0x494>)
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	4b09      	ldr	r3, [pc, #36]	@ (800fdf8 <find_volume+0x494>)
 800fdd4:	801a      	strh	r2, [r3, #0]
 800fdd6:	4b08      	ldr	r3, [pc, #32]	@ (800fdf8 <find_volume+0x494>)
 800fdd8:	881a      	ldrh	r2, [r3, #0]
 800fdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fddc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fdde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fde0:	f7fe fdee 	bl	800e9c0 <clear_lock>
#endif
	return FR_OK;
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3758      	adds	r7, #88	@ 0x58
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	41615252 	.word	0x41615252
 800fdf4:	61417272 	.word	0x61417272
 800fdf8:	20000a38 	.word	0x20000a38

0800fdfc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fe06:	2309      	movs	r3, #9
 800fe08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d01c      	beq.n	800fe4a <validate+0x4e>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d018      	beq.n	800fe4a <validate+0x4e>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d013      	beq.n	800fe4a <validate+0x4e>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	889a      	ldrh	r2, [r3, #4]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	88db      	ldrh	r3, [r3, #6]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d10c      	bne.n	800fe4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	785b      	ldrb	r3, [r3, #1]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fe fada 	bl	800e3f0 <disk_status>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d101      	bne.n	800fe4a <validate+0x4e>
			res = FR_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d102      	bne.n	800fe56 <validate+0x5a>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	e000      	b.n	800fe58 <validate+0x5c>
 800fe56:	2300      	movs	r3, #0
 800fe58:	683a      	ldr	r2, [r7, #0]
 800fe5a:	6013      	str	r3, [r2, #0]
	return res;
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b088      	sub	sp, #32
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	4613      	mov	r3, r2
 800fe74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fe7a:	f107 0310 	add.w	r3, r7, #16
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7ff fcd5 	bl	800f82e <get_ldnumber>
 800fe84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	da01      	bge.n	800fe90 <f_mount+0x28>
 800fe8c:	230b      	movs	r3, #11
 800fe8e:	e02b      	b.n	800fee8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fe90:	4a17      	ldr	r2, [pc, #92]	@ (800fef0 <f_mount+0x88>)
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d005      	beq.n	800feac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fea0:	69b8      	ldr	r0, [r7, #24]
 800fea2:	f7fe fd8d 	bl	800e9c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	2200      	movs	r2, #0
 800feaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2200      	movs	r2, #0
 800feb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	490d      	ldr	r1, [pc, #52]	@ (800fef0 <f_mount+0x88>)
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <f_mount+0x66>
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d001      	beq.n	800fed2 <f_mount+0x6a>
 800fece:	2300      	movs	r3, #0
 800fed0:	e00a      	b.n	800fee8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fed2:	f107 010c 	add.w	r1, r7, #12
 800fed6:	f107 0308 	add.w	r3, r7, #8
 800feda:	2200      	movs	r2, #0
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff fd41 	bl	800f964 <find_volume>
 800fee2:	4603      	mov	r3, r0
 800fee4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3720      	adds	r7, #32
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	20000a34 	.word	0x20000a34

0800fef4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b098      	sub	sp, #96	@ 0x60
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	4613      	mov	r3, r2
 800ff00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <f_open+0x18>
 800ff08:	2309      	movs	r3, #9
 800ff0a:	e1a9      	b.n	8010260 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ff0c:	79fb      	ldrb	r3, [r7, #7]
 800ff0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ff14:	79fa      	ldrb	r2, [r7, #7]
 800ff16:	f107 0110 	add.w	r1, r7, #16
 800ff1a:	f107 0308 	add.w	r3, r7, #8
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7ff fd20 	bl	800f964 <find_volume>
 800ff24:	4603      	mov	r3, r0
 800ff26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ff2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	f040 818d 	bne.w	801024e <f_open+0x35a>
		dj.obj.fs = fs;
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ff38:	68ba      	ldr	r2, [r7, #8]
 800ff3a:	f107 0314 	add.w	r3, r7, #20
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff fc03 	bl	800f74c <follow_path>
 800ff46:	4603      	mov	r3, r0
 800ff48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ff4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d118      	bne.n	800ff86 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ff54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff58:	b25b      	sxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	da03      	bge.n	800ff66 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ff5e:	2306      	movs	r3, #6
 800ff60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ff64:	e00f      	b.n	800ff86 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff66:	79fb      	ldrb	r3, [r7, #7]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	bf8c      	ite	hi
 800ff6c:	2301      	movhi	r3, #1
 800ff6e:	2300      	movls	r3, #0
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	461a      	mov	r2, r3
 800ff74:	f107 0314 	add.w	r3, r7, #20
 800ff78:	4611      	mov	r1, r2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fe fbd8 	bl	800e730 <chk_lock>
 800ff80:	4603      	mov	r3, r0
 800ff82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ff86:	79fb      	ldrb	r3, [r7, #7]
 800ff88:	f003 031c 	and.w	r3, r3, #28
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d07f      	beq.n	8010090 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ff90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d017      	beq.n	800ffc8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ff98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff9c:	2b04      	cmp	r3, #4
 800ff9e:	d10e      	bne.n	800ffbe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ffa0:	f7fe fc22 	bl	800e7e8 <enq_lock>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d006      	beq.n	800ffb8 <f_open+0xc4>
 800ffaa:	f107 0314 	add.w	r3, r7, #20
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff fb06 	bl	800f5c0 <dir_register>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	e000      	b.n	800ffba <f_open+0xc6>
 800ffb8:	2312      	movs	r3, #18
 800ffba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ffbe:	79fb      	ldrb	r3, [r7, #7]
 800ffc0:	f043 0308 	orr.w	r3, r3, #8
 800ffc4:	71fb      	strb	r3, [r7, #7]
 800ffc6:	e010      	b.n	800ffea <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ffc8:	7ebb      	ldrb	r3, [r7, #26]
 800ffca:	f003 0311 	and.w	r3, r3, #17
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <f_open+0xe6>
					res = FR_DENIED;
 800ffd2:	2307      	movs	r3, #7
 800ffd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ffd8:	e007      	b.n	800ffea <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ffda:	79fb      	ldrb	r3, [r7, #7]
 800ffdc:	f003 0304 	and.w	r3, r3, #4
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d002      	beq.n	800ffea <f_open+0xf6>
 800ffe4:	2308      	movs	r3, #8
 800ffe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ffea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d168      	bne.n	80100c4 <f_open+0x1d0>
 800fff2:	79fb      	ldrb	r3, [r7, #7]
 800fff4:	f003 0308 	and.w	r3, r3, #8
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d063      	beq.n	80100c4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fffc:	f7fb ffbe 	bl	800bf7c <get_fattime>
 8010000:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010004:	330e      	adds	r3, #14
 8010006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010008:	4618      	mov	r0, r3
 801000a:	f7fe fae7 	bl	800e5dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801000e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010010:	3316      	adds	r3, #22
 8010012:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010014:	4618      	mov	r0, r3
 8010016:	f7fe fae1 	bl	800e5dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801001a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801001c:	330b      	adds	r3, #11
 801001e:	2220      	movs	r2, #32
 8010020:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010026:	4611      	mov	r1, r2
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fa35 	bl	800f498 <ld_clust>
 801002e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010034:	2200      	movs	r2, #0
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff fa4d 	bl	800f4d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801003c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801003e:	331c      	adds	r3, #28
 8010040:	2100      	movs	r1, #0
 8010042:	4618      	mov	r0, r3
 8010044:	f7fe faca 	bl	800e5dc <st_dword>
					fs->wflag = 1;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	2201      	movs	r2, #1
 801004c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801004e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d037      	beq.n	80100c4 <f_open+0x1d0>
						dw = fs->winsect;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010058:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801005a:	f107 0314 	add.w	r3, r7, #20
 801005e:	2200      	movs	r2, #0
 8010060:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe ff60 	bl	800ef28 <remove_chain>
 8010068:	4603      	mov	r3, r0
 801006a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801006e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010072:	2b00      	cmp	r3, #0
 8010074:	d126      	bne.n	80100c4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801007a:	4618      	mov	r0, r3
 801007c:	f7fe fd08 	bl	800ea90 <move_window>
 8010080:	4603      	mov	r3, r0
 8010082:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801008a:	3a01      	subs	r2, #1
 801008c:	60da      	str	r2, [r3, #12]
 801008e:	e019      	b.n	80100c4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010090:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010094:	2b00      	cmp	r3, #0
 8010096:	d115      	bne.n	80100c4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010098:	7ebb      	ldrb	r3, [r7, #26]
 801009a:	f003 0310 	and.w	r3, r3, #16
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <f_open+0x1b6>
					res = FR_NO_FILE;
 80100a2:	2304      	movs	r3, #4
 80100a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80100a8:	e00c      	b.n	80100c4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	f003 0302 	and.w	r3, r3, #2
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d007      	beq.n	80100c4 <f_open+0x1d0>
 80100b4:	7ebb      	ldrb	r3, [r7, #26]
 80100b6:	f003 0301 	and.w	r3, r3, #1
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d002      	beq.n	80100c4 <f_open+0x1d0>
						res = FR_DENIED;
 80100be:	2307      	movs	r3, #7
 80100c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80100c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d126      	bne.n	801011a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80100cc:	79fb      	ldrb	r3, [r7, #7]
 80100ce:	f003 0308 	and.w	r3, r3, #8
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d003      	beq.n	80100de <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80100d6:	79fb      	ldrb	r3, [r7, #7]
 80100d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80100e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80100ec:	79fb      	ldrb	r3, [r7, #7]
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	bf8c      	ite	hi
 80100f2:	2301      	movhi	r3, #1
 80100f4:	2300      	movls	r3, #0
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	461a      	mov	r2, r3
 80100fa:	f107 0314 	add.w	r3, r7, #20
 80100fe:	4611      	mov	r1, r2
 8010100:	4618      	mov	r0, r3
 8010102:	f7fe fb93 	bl	800e82c <inc_lock>
 8010106:	4602      	mov	r2, r0
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d102      	bne.n	801011a <f_open+0x226>
 8010114:	2302      	movs	r3, #2
 8010116:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801011a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801011e:	2b00      	cmp	r3, #0
 8010120:	f040 8095 	bne.w	801024e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010128:	4611      	mov	r1, r2
 801012a:	4618      	mov	r0, r3
 801012c:	f7ff f9b4 	bl	800f498 <ld_clust>
 8010130:	4602      	mov	r2, r0
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010138:	331c      	adds	r3, #28
 801013a:	4618      	mov	r0, r3
 801013c:	f7fe fa10 	bl	800e560 <ld_dword>
 8010140:	4602      	mov	r2, r0
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	88da      	ldrh	r2, [r3, #6]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	79fa      	ldrb	r2, [r7, #7]
 801015e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2200      	movs	r2, #0
 8010164:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2200      	movs	r2, #0
 801016a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2200      	movs	r2, #0
 8010170:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3330      	adds	r3, #48	@ 0x30
 8010176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801017a:	2100      	movs	r1, #0
 801017c:	4618      	mov	r0, r3
 801017e:	f7fe fa7a 	bl	800e676 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	f003 0320 	and.w	r3, r3, #32
 8010188:	2b00      	cmp	r3, #0
 801018a:	d060      	beq.n	801024e <f_open+0x35a>
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d05c      	beq.n	801024e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	68da      	ldr	r2, [r3, #12]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	895b      	ldrh	r3, [r3, #10]
 80101a0:	025b      	lsls	r3, r3, #9
 80101a2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80101b0:	e016      	b.n	80101e0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fe fd25 	bl	800ec06 <get_fat>
 80101bc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80101be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d802      	bhi.n	80101ca <f_open+0x2d6>
 80101c4:	2302      	movs	r3, #2
 80101c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80101ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80101cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d0:	d102      	bne.n	80101d8 <f_open+0x2e4>
 80101d2:	2301      	movs	r3, #1
 80101d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80101d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80101da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	657b      	str	r3, [r7, #84]	@ 0x54
 80101e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d103      	bne.n	80101f0 <f_open+0x2fc>
 80101e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80101ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d8e0      	bhi.n	80101b2 <f_open+0x2be>
				}
				fp->clust = clst;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80101f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80101f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d127      	bne.n	801024e <f_open+0x35a>
 80101fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010204:	2b00      	cmp	r3, #0
 8010206:	d022      	beq.n	801024e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe fcdb 	bl	800ebc8 <clust2sect>
 8010212:	6478      	str	r0, [r7, #68]	@ 0x44
 8010214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010216:	2b00      	cmp	r3, #0
 8010218:	d103      	bne.n	8010222 <f_open+0x32e>
						res = FR_INT_ERR;
 801021a:	2302      	movs	r3, #2
 801021c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010220:	e015      	b.n	801024e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010224:	0a5a      	lsrs	r2, r3, #9
 8010226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010228:	441a      	add	r2, r3
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	7858      	ldrb	r0, [r3, #1]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6a1a      	ldr	r2, [r3, #32]
 801023c:	2301      	movs	r3, #1
 801023e:	f7fe f919 	bl	800e474 <disk_read>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d002      	beq.n	801024e <f_open+0x35a>
 8010248:	2301      	movs	r3, #1
 801024a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801024e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <f_open+0x368>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2200      	movs	r2, #0
 801025a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801025c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010260:	4618      	mov	r0, r3
 8010262:	3760      	adds	r7, #96	@ 0x60
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b08c      	sub	sp, #48	@ 0x30
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	2200      	movs	r2, #0
 801027e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f107 0210 	add.w	r2, r7, #16
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff fdb7 	bl	800fdfc <validate>
 801028e:	4603      	mov	r3, r0
 8010290:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010294:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010298:	2b00      	cmp	r3, #0
 801029a:	d107      	bne.n	80102ac <f_write+0x44>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	7d5b      	ldrb	r3, [r3, #21]
 80102a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80102a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d002      	beq.n	80102b2 <f_write+0x4a>
 80102ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80102b0:	e14b      	b.n	801054a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	7d1b      	ldrb	r3, [r3, #20]
 80102b6:	f003 0302 	and.w	r3, r3, #2
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <f_write+0x5a>
 80102be:	2307      	movs	r3, #7
 80102c0:	e143      	b.n	801054a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	699a      	ldr	r2, [r3, #24]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	441a      	add	r2, r3
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	699b      	ldr	r3, [r3, #24]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	f080 812d 	bcs.w	801052e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	43db      	mvns	r3, r3
 80102da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80102dc:	e127      	b.n	801052e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	699b      	ldr	r3, [r3, #24]
 80102e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f040 80e3 	bne.w	80104b2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	699b      	ldr	r3, [r3, #24]
 80102f0:	0a5b      	lsrs	r3, r3, #9
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	8952      	ldrh	r2, [r2, #10]
 80102f6:	3a01      	subs	r2, #1
 80102f8:	4013      	ands	r3, r2
 80102fa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d143      	bne.n	801038a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	699b      	ldr	r3, [r3, #24]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d10c      	bne.n	8010324 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010312:	2b00      	cmp	r3, #0
 8010314:	d11a      	bne.n	801034c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2100      	movs	r1, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f7fe fe69 	bl	800eff2 <create_chain>
 8010320:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010322:	e013      	b.n	801034c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010328:	2b00      	cmp	r3, #0
 801032a:	d007      	beq.n	801033c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	4619      	mov	r1, r3
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f7fe fef5 	bl	800f122 <clmt_clust>
 8010338:	62b8      	str	r0, [r7, #40]	@ 0x28
 801033a:	e007      	b.n	801034c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	69db      	ldr	r3, [r3, #28]
 8010342:	4619      	mov	r1, r3
 8010344:	4610      	mov	r0, r2
 8010346:	f7fe fe54 	bl	800eff2 <create_chain>
 801034a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801034c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801034e:	2b00      	cmp	r3, #0
 8010350:	f000 80f2 	beq.w	8010538 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010356:	2b01      	cmp	r3, #1
 8010358:	d104      	bne.n	8010364 <f_write+0xfc>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2202      	movs	r2, #2
 801035e:	755a      	strb	r2, [r3, #21]
 8010360:	2302      	movs	r3, #2
 8010362:	e0f2      	b.n	801054a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010366:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036a:	d104      	bne.n	8010376 <f_write+0x10e>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2201      	movs	r2, #1
 8010370:	755a      	strb	r2, [r3, #21]
 8010372:	2301      	movs	r3, #1
 8010374:	e0e9      	b.n	801054a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801037a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <f_write+0x122>
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010388:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	7d1b      	ldrb	r3, [r3, #20]
 801038e:	b25b      	sxtb	r3, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	da18      	bge.n	80103c6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	7858      	ldrb	r0, [r3, #1]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	6a1a      	ldr	r2, [r3, #32]
 80103a2:	2301      	movs	r3, #1
 80103a4:	f7fe f886 	bl	800e4b4 <disk_write>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d004      	beq.n	80103b8 <f_write+0x150>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2201      	movs	r2, #1
 80103b2:	755a      	strb	r2, [r3, #21]
 80103b4:	2301      	movs	r3, #1
 80103b6:	e0c8      	b.n	801054a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80103c6:	693a      	ldr	r2, [r7, #16]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	69db      	ldr	r3, [r3, #28]
 80103cc:	4619      	mov	r1, r3
 80103ce:	4610      	mov	r0, r2
 80103d0:	f7fe fbfa 	bl	800ebc8 <clust2sect>
 80103d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d104      	bne.n	80103e6 <f_write+0x17e>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2202      	movs	r2, #2
 80103e0:	755a      	strb	r2, [r3, #21]
 80103e2:	2302      	movs	r3, #2
 80103e4:	e0b1      	b.n	801054a <f_write+0x2e2>
			sect += csect;
 80103e6:	697a      	ldr	r2, [r7, #20]
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	4413      	add	r3, r2
 80103ec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	0a5b      	lsrs	r3, r3, #9
 80103f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80103f4:	6a3b      	ldr	r3, [r7, #32]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d03c      	beq.n	8010474 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80103fa:	69ba      	ldr	r2, [r7, #24]
 80103fc:	6a3b      	ldr	r3, [r7, #32]
 80103fe:	4413      	add	r3, r2
 8010400:	693a      	ldr	r2, [r7, #16]
 8010402:	8952      	ldrh	r2, [r2, #10]
 8010404:	4293      	cmp	r3, r2
 8010406:	d905      	bls.n	8010414 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	895b      	ldrh	r3, [r3, #10]
 801040c:	461a      	mov	r2, r3
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	7858      	ldrb	r0, [r3, #1]
 8010418:	6a3b      	ldr	r3, [r7, #32]
 801041a:	697a      	ldr	r2, [r7, #20]
 801041c:	69f9      	ldr	r1, [r7, #28]
 801041e:	f7fe f849 	bl	800e4b4 <disk_write>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d004      	beq.n	8010432 <f_write+0x1ca>
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2201      	movs	r2, #1
 801042c:	755a      	strb	r2, [r3, #21]
 801042e:	2301      	movs	r3, #1
 8010430:	e08b      	b.n	801054a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6a1a      	ldr	r2, [r3, #32]
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	6a3a      	ldr	r2, [r7, #32]
 801043c:	429a      	cmp	r2, r3
 801043e:	d915      	bls.n	801046c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	6a1a      	ldr	r2, [r3, #32]
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	025b      	lsls	r3, r3, #9
 8010450:	69fa      	ldr	r2, [r7, #28]
 8010452:	4413      	add	r3, r2
 8010454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010458:	4619      	mov	r1, r3
 801045a:	f7fe f8eb 	bl	800e634 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	7d1b      	ldrb	r3, [r3, #20]
 8010462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010466:	b2da      	uxtb	r2, r3
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	025b      	lsls	r3, r3, #9
 8010470:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010472:	e03f      	b.n	80104f4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6a1b      	ldr	r3, [r3, #32]
 8010478:	697a      	ldr	r2, [r7, #20]
 801047a:	429a      	cmp	r2, r3
 801047c:	d016      	beq.n	80104ac <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	699a      	ldr	r2, [r3, #24]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010486:	429a      	cmp	r2, r3
 8010488:	d210      	bcs.n	80104ac <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	7858      	ldrb	r0, [r3, #1]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010494:	2301      	movs	r3, #1
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	f7fd ffec 	bl	800e474 <disk_read>
 801049c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d004      	beq.n	80104ac <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2201      	movs	r2, #1
 80104a6:	755a      	strb	r2, [r3, #21]
 80104a8:	2301      	movs	r3, #1
 80104aa:	e04e      	b.n	801054a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ba:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80104be:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80104c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d901      	bls.n	80104cc <f_write+0x264>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	699b      	ldr	r3, [r3, #24]
 80104d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104da:	4413      	add	r3, r2
 80104dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104de:	69f9      	ldr	r1, [r7, #28]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fe f8a7 	bl	800e634 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	7d1b      	ldrb	r3, [r3, #20]
 80104ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80104ee:	b2da      	uxtb	r2, r3
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80104f4:	69fa      	ldr	r2, [r7, #28]
 80104f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f8:	4413      	add	r3, r2
 80104fa:	61fb      	str	r3, [r7, #28]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	699a      	ldr	r2, [r3, #24]
 8010500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010502:	441a      	add	r2, r3
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	619a      	str	r2, [r3, #24]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	68da      	ldr	r2, [r3, #12]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	699b      	ldr	r3, [r3, #24]
 8010510:	429a      	cmp	r2, r3
 8010512:	bf38      	it	cc
 8010514:	461a      	movcc	r2, r3
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	60da      	str	r2, [r3, #12]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010520:	441a      	add	r2, r3
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b00      	cmp	r3, #0
 8010532:	f47f aed4 	bne.w	80102de <f_write+0x76>
 8010536:	e000      	b.n	801053a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010538:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	7d1b      	ldrb	r3, [r3, #20]
 801053e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010542:	b2da      	uxtb	r2, r3
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3730      	adds	r7, #48	@ 0x30
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b086      	sub	sp, #24
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f107 0208 	add.w	r2, r7, #8
 8010560:	4611      	mov	r1, r2
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff fc4a 	bl	800fdfc <validate>
 8010568:	4603      	mov	r3, r0
 801056a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801056c:	7dfb      	ldrb	r3, [r7, #23]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d168      	bne.n	8010644 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	7d1b      	ldrb	r3, [r3, #20]
 8010576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801057a:	2b00      	cmp	r3, #0
 801057c:	d062      	beq.n	8010644 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	7d1b      	ldrb	r3, [r3, #20]
 8010582:	b25b      	sxtb	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	da15      	bge.n	80105b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	7858      	ldrb	r0, [r3, #1]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a1a      	ldr	r2, [r3, #32]
 8010596:	2301      	movs	r3, #1
 8010598:	f7fd ff8c 	bl	800e4b4 <disk_write>
 801059c:	4603      	mov	r3, r0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <f_sync+0x54>
 80105a2:	2301      	movs	r3, #1
 80105a4:	e04f      	b.n	8010646 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	7d1b      	ldrb	r3, [r3, #20]
 80105aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105ae:	b2da      	uxtb	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80105b4:	f7fb fce2 	bl	800bf7c <get_fattime>
 80105b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105c0:	4619      	mov	r1, r3
 80105c2:	4610      	mov	r0, r2
 80105c4:	f7fe fa64 	bl	800ea90 <move_window>
 80105c8:	4603      	mov	r3, r0
 80105ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80105cc:	7dfb      	ldrb	r3, [r7, #23]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d138      	bne.n	8010644 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	330b      	adds	r3, #11
 80105dc:	781a      	ldrb	r2, [r3, #0]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	330b      	adds	r3, #11
 80105e2:	f042 0220 	orr.w	r2, r2, #32
 80105e6:	b2d2      	uxtb	r2, r2
 80105e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6818      	ldr	r0, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	461a      	mov	r2, r3
 80105f4:	68f9      	ldr	r1, [r7, #12]
 80105f6:	f7fe ff6e 	bl	800f4d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f103 021c 	add.w	r2, r3, #28
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	4619      	mov	r1, r3
 8010606:	4610      	mov	r0, r2
 8010608:	f7fd ffe8 	bl	800e5dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3316      	adds	r3, #22
 8010610:	6939      	ldr	r1, [r7, #16]
 8010612:	4618      	mov	r0, r3
 8010614:	f7fd ffe2 	bl	800e5dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	3312      	adds	r3, #18
 801061c:	2100      	movs	r1, #0
 801061e:	4618      	mov	r0, r3
 8010620:	f7fd ffc1 	bl	800e5a6 <st_word>
					fs->wflag = 1;
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2201      	movs	r2, #1
 8010628:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	4618      	mov	r0, r3
 801062e:	f7fe fa5d 	bl	800eaec <sync_fs>
 8010632:	4603      	mov	r3, r0
 8010634:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7d1b      	ldrb	r3, [r3, #20]
 801063a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801063e:	b2da      	uxtb	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010644:	7dfb      	ldrb	r3, [r7, #23]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3718      	adds	r7, #24
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b084      	sub	sp, #16
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f7ff ff7b 	bl	8010552 <f_sync>
 801065c:	4603      	mov	r3, r0
 801065e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010660:	7bfb      	ldrb	r3, [r7, #15]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d118      	bne.n	8010698 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f107 0208 	add.w	r2, r7, #8
 801066c:	4611      	mov	r1, r2
 801066e:	4618      	mov	r0, r3
 8010670:	f7ff fbc4 	bl	800fdfc <validate>
 8010674:	4603      	mov	r3, r0
 8010676:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010678:	7bfb      	ldrb	r3, [r7, #15]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d10c      	bne.n	8010698 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	691b      	ldr	r3, [r3, #16]
 8010682:	4618      	mov	r0, r3
 8010684:	f7fe f960 	bl	800e948 <dec_lock>
 8010688:	4603      	mov	r3, r0
 801068a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801068c:	7bfb      	ldrb	r3, [r7, #15]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d102      	bne.n	8010698 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2200      	movs	r2, #0
 8010696:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010698:	7bfb      	ldrb	r3, [r7, #15]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
	...

080106a4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80106a4:	b590      	push	{r4, r7, lr}
 80106a6:	b09d      	sub	sp, #116	@ 0x74
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	607a      	str	r2, [r7, #4]
 80106ae:	603b      	str	r3, [r7, #0]
 80106b0:	460b      	mov	r3, r1
 80106b2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80106b4:	2301      	movs	r3, #1
 80106b6:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80106b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106bc:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80106be:	f107 030c 	add.w	r3, r7, #12
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7ff f8b3 	bl	800f82e <get_ldnumber>
 80106c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80106ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	da02      	bge.n	80106d6 <f_mkfs+0x32>
 80106d0:	230b      	movs	r3, #11
 80106d2:	f000 bc0d 	b.w	8010ef0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80106d6:	4a94      	ldr	r2, [pc, #592]	@ (8010928 <f_mkfs+0x284>)
 80106d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d005      	beq.n	80106ee <f_mkfs+0x4a>
 80106e2:	4a91      	ldr	r2, [pc, #580]	@ (8010928 <f_mkfs+0x284>)
 80106e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106ea:	2200      	movs	r2, #0
 80106ec:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80106ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80106f4:	2300      	movs	r3, #0
 80106f6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80106fa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fd fe90 	bl	800e424 <disk_initialize>
 8010704:	4603      	mov	r3, r0
 8010706:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801070a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801070e:	f003 0301 	and.w	r3, r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	d001      	beq.n	801071a <f_mkfs+0x76>
 8010716:	2303      	movs	r3, #3
 8010718:	e3ea      	b.n	8010ef0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801071a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801071e:	f003 0304 	and.w	r3, r3, #4
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <f_mkfs+0x86>
 8010726:	230a      	movs	r3, #10
 8010728:	e3e2      	b.n	8010ef0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801072a:	f107 0214 	add.w	r2, r7, #20
 801072e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010732:	2103      	movs	r1, #3
 8010734:	4618      	mov	r0, r3
 8010736:	f7fd fedd 	bl	800e4f4 <disk_ioctl>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d10c      	bne.n	801075a <f_mkfs+0xb6>
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d009      	beq.n	801075a <f_mkfs+0xb6>
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801074c:	d805      	bhi.n	801075a <f_mkfs+0xb6>
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	1e5a      	subs	r2, r3, #1
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	4013      	ands	r3, r2
 8010756:	2b00      	cmp	r3, #0
 8010758:	d001      	beq.n	801075e <f_mkfs+0xba>
 801075a:	2301      	movs	r3, #1
 801075c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801075e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010762:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <f_mkfs+0xce>
 801076a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	429a      	cmp	r2, r3
 8010770:	d309      	bcc.n	8010786 <f_mkfs+0xe2>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010778:	d805      	bhi.n	8010786 <f_mkfs+0xe2>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	1e5a      	subs	r2, r3, #1
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4013      	ands	r3, r2
 8010782:	2b00      	cmp	r3, #0
 8010784:	d001      	beq.n	801078a <f_mkfs+0xe6>
 8010786:	2313      	movs	r3, #19
 8010788:	e3b2      	b.n	8010ef0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801078a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010792:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010798:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801079a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801079e:	fbb2 f3f3 	udiv	r3, r2, r3
 80107a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80107a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80107a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a8:	fb02 f303 	mul.w	r3, r2, r3
 80107ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80107ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d101      	bne.n	80107b8 <f_mkfs+0x114>
 80107b4:	230e      	movs	r3, #14
 80107b6:	e39b      	b.n	8010ef0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80107b8:	f107 0210 	add.w	r2, r7, #16
 80107bc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80107c0:	2101      	movs	r1, #1
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fd fe96 	bl	800e4f4 <disk_ioctl>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d001      	beq.n	80107d2 <f_mkfs+0x12e>
 80107ce:	2301      	movs	r3, #1
 80107d0:	e38e      	b.n	8010ef0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80107d2:	7afb      	ldrb	r3, [r7, #11]
 80107d4:	f003 0308 	and.w	r3, r3, #8
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d001      	beq.n	80107e0 <f_mkfs+0x13c>
 80107dc:	2300      	movs	r3, #0
 80107de:	e000      	b.n	80107e2 <f_mkfs+0x13e>
 80107e0:	233f      	movs	r3, #63	@ 0x3f
 80107e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d901      	bls.n	80107f0 <f_mkfs+0x14c>
 80107ec:	230e      	movs	r3, #14
 80107ee:	e37f      	b.n	8010ef0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80107f0:	693a      	ldr	r2, [r7, #16]
 80107f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f4:	1ad3      	subs	r3, r2, r3
 80107f6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80107fc:	d801      	bhi.n	8010802 <f_mkfs+0x15e>
 80107fe:	230e      	movs	r3, #14
 8010800:	e376      	b.n	8010ef0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2b80      	cmp	r3, #128	@ 0x80
 8010806:	d901      	bls.n	801080c <f_mkfs+0x168>
 8010808:	2313      	movs	r3, #19
 801080a:	e371      	b.n	8010ef0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 801080c:	7afb      	ldrb	r3, [r7, #11]
 801080e:	f003 0302 	and.w	r3, r3, #2
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00d      	beq.n	8010832 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8010816:	7afb      	ldrb	r3, [r7, #11]
 8010818:	f003 0307 	and.w	r3, r3, #7
 801081c:	2b02      	cmp	r3, #2
 801081e:	d004      	beq.n	801082a <f_mkfs+0x186>
 8010820:	7afb      	ldrb	r3, [r7, #11]
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801082a:	2303      	movs	r3, #3
 801082c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010830:	e009      	b.n	8010846 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010832:	7afb      	ldrb	r3, [r7, #11]
 8010834:	f003 0301 	and.w	r3, r3, #1
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <f_mkfs+0x19c>
 801083c:	2313      	movs	r3, #19
 801083e:	e357      	b.n	8010ef0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010840:	2302      	movs	r3, #2
 8010842:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801084a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801084e:	2b03      	cmp	r3, #3
 8010850:	d13c      	bne.n	80108cc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010854:	2b00      	cmp	r3, #0
 8010856:	d11b      	bne.n	8010890 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	0c5b      	lsrs	r3, r3, #17
 801085c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801085e:	2300      	movs	r3, #0
 8010860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010862:	2301      	movs	r3, #1
 8010864:	653b      	str	r3, [r7, #80]	@ 0x50
 8010866:	e005      	b.n	8010874 <f_mkfs+0x1d0>
 8010868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801086a:	3301      	adds	r3, #1
 801086c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801086e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	653b      	str	r3, [r7, #80]	@ 0x50
 8010874:	4a2d      	ldr	r2, [pc, #180]	@ (801092c <f_mkfs+0x288>)
 8010876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d007      	beq.n	8010890 <f_mkfs+0x1ec>
 8010880:	4a2a      	ldr	r2, [pc, #168]	@ (801092c <f_mkfs+0x288>)
 8010882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010888:	461a      	mov	r2, r3
 801088a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801088c:	4293      	cmp	r3, r2
 801088e:	d2eb      	bcs.n	8010868 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8010890:	693a      	ldr	r2, [r7, #16]
 8010892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010894:	fbb2 f3f3 	udiv	r3, r2, r3
 8010898:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	3302      	adds	r3, #2
 801089e:	009a      	lsls	r2, r3, #2
 80108a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80108a2:	4413      	add	r3, r2
 80108a4:	1e5a      	subs	r2, r3, #1
 80108a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80108a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80108ac:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80108ae:	2320      	movs	r3, #32
 80108b0:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 80108b2:	2300      	movs	r3, #0
 80108b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80108bc:	4293      	cmp	r3, r2
 80108be:	d903      	bls.n	80108c8 <f_mkfs+0x224>
 80108c0:	6a3b      	ldr	r3, [r7, #32]
 80108c2:	4a1b      	ldr	r2, [pc, #108]	@ (8010930 <f_mkfs+0x28c>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d952      	bls.n	801096e <f_mkfs+0x2ca>
 80108c8:	230e      	movs	r3, #14
 80108ca:	e311      	b.n	8010ef0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80108cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d11b      	bne.n	801090a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	0b1b      	lsrs	r3, r3, #12
 80108d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80108d8:	2300      	movs	r3, #0
 80108da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108dc:	2301      	movs	r3, #1
 80108de:	653b      	str	r3, [r7, #80]	@ 0x50
 80108e0:	e005      	b.n	80108ee <f_mkfs+0x24a>
 80108e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108e4:	3301      	adds	r3, #1
 80108e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ea:	005b      	lsls	r3, r3, #1
 80108ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80108ee:	4a11      	ldr	r2, [pc, #68]	@ (8010934 <f_mkfs+0x290>)
 80108f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d007      	beq.n	801090a <f_mkfs+0x266>
 80108fa:	4a0e      	ldr	r2, [pc, #56]	@ (8010934 <f_mkfs+0x290>)
 80108fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010902:	461a      	mov	r2, r3
 8010904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010906:	4293      	cmp	r3, r2
 8010908:	d2eb      	bcs.n	80108e2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801090a:	693a      	ldr	r2, [r7, #16]
 801090c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010912:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8010914:	6a3b      	ldr	r3, [r7, #32]
 8010916:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801091a:	4293      	cmp	r3, r2
 801091c:	d90c      	bls.n	8010938 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801091e:	6a3b      	ldr	r3, [r7, #32]
 8010920:	3302      	adds	r3, #2
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010926:	e012      	b.n	801094e <f_mkfs+0x2aa>
 8010928:	20000a34 	.word	0x20000a34
 801092c:	080119d8 	.word	0x080119d8
 8010930:	0ffffff5 	.word	0x0ffffff5
 8010934:	080119e8 	.word	0x080119e8
				} else {
					fmt = FS_FAT12;
 8010938:	2301      	movs	r3, #1
 801093a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801093e:	6a3a      	ldr	r2, [r7, #32]
 8010940:	4613      	mov	r3, r2
 8010942:	005b      	lsls	r3, r3, #1
 8010944:	4413      	add	r3, r2
 8010946:	3301      	adds	r3, #1
 8010948:	085b      	lsrs	r3, r3, #1
 801094a:	3303      	adds	r3, #3
 801094c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801094e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010952:	4413      	add	r3, r2
 8010954:	1e5a      	subs	r2, r3, #1
 8010956:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010958:	fbb2 f3f3 	udiv	r3, r2, r3
 801095c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801095e:	2301      	movs	r3, #1
 8010960:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8010962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010964:	015a      	lsls	r2, r3, #5
 8010966:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010968:	fbb2 f3f3 	udiv	r3, r2, r3
 801096c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801096e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010972:	4413      	add	r3, r2
 8010974:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8010976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801097a:	fb03 f202 	mul.w	r2, r3, r2
 801097e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010980:	4413      	add	r3, r2
 8010982:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010984:	4413      	add	r3, r2
 8010986:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8010988:	697a      	ldr	r2, [r7, #20]
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	4413      	add	r3, r2
 801098e:	1e5a      	subs	r2, r3, #1
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	425b      	negs	r3, r3
 8010994:	401a      	ands	r2, r3
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 801099c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	d108      	bne.n	80109b6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80109a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80109a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109a8:	4413      	add	r3, r2
 80109aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80109ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80109ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109b0:	4413      	add	r3, r2
 80109b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80109b4:	e006      	b.n	80109c4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80109b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80109b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80109be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80109c0:	4413      	add	r3, r2
 80109c2:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80109c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109c6:	011a      	lsls	r2, r3, #4
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	441a      	add	r2, r3
 80109cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ce:	1ad2      	subs	r2, r2, r3
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d901      	bls.n	80109da <f_mkfs+0x336>
 80109d6:	230e      	movs	r3, #14
 80109d8:	e28a      	b.n	8010ef0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80109da:	693a      	ldr	r2, [r7, #16]
 80109dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109de:	1ad2      	subs	r2, r2, r3
 80109e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109e4:	fb01 f303 	mul.w	r3, r1, r3
 80109e8:	1ad2      	subs	r2, r2, r3
 80109ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109ec:	1ad2      	subs	r2, r2, r3
 80109ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80109f4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80109f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80109fa:	2b03      	cmp	r3, #3
 80109fc:	d10f      	bne.n	8010a1e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80109fe:	6a3b      	ldr	r3, [r7, #32]
 8010a00:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d80a      	bhi.n	8010a1e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d105      	bne.n	8010a1a <f_mkfs+0x376>
 8010a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a10:	085b      	lsrs	r3, r3, #1
 8010a12:	607b      	str	r3, [r7, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d144      	bne.n	8010aa4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8010a1a:	230e      	movs	r3, #14
 8010a1c:	e268      	b.n	8010ef0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8010a1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010a22:	2b02      	cmp	r3, #2
 8010a24:	d133      	bne.n	8010a8e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d91e      	bls.n	8010a6e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d107      	bne.n	8010a46 <f_mkfs+0x3a2>
 8010a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	2b40      	cmp	r3, #64	@ 0x40
 8010a3c:	d803      	bhi.n	8010a46 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8010a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	607b      	str	r3, [r7, #4]
 8010a44:	e033      	b.n	8010aae <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8010a46:	7afb      	ldrb	r3, [r7, #11]
 8010a48:	f003 0302 	and.w	r3, r3, #2
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d003      	beq.n	8010a58 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8010a50:	2303      	movs	r3, #3
 8010a52:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010a56:	e02a      	b.n	8010aae <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d105      	bne.n	8010a6a <f_mkfs+0x3c6>
 8010a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	607b      	str	r3, [r7, #4]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2b80      	cmp	r3, #128	@ 0x80
 8010a68:	d91e      	bls.n	8010aa8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8010a6a:	230e      	movs	r3, #14
 8010a6c:	e240      	b.n	8010ef0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8010a6e:	6a3b      	ldr	r3, [r7, #32]
 8010a70:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d80a      	bhi.n	8010a8e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d105      	bne.n	8010a8a <f_mkfs+0x3e6>
 8010a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a80:	005b      	lsls	r3, r3, #1
 8010a82:	607b      	str	r3, [r7, #4]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b80      	cmp	r3, #128	@ 0x80
 8010a88:	d910      	bls.n	8010aac <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8010a8a:	230e      	movs	r3, #14
 8010a8c:	e230      	b.n	8010ef0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8010a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d10c      	bne.n	8010ab0 <f_mkfs+0x40c>
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d907      	bls.n	8010ab0 <f_mkfs+0x40c>
 8010aa0:	230e      	movs	r3, #14
 8010aa2:	e225      	b.n	8010ef0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010aa4:	bf00      	nop
 8010aa6:	e6ce      	b.n	8010846 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010aa8:	bf00      	nop
 8010aaa:	e6cc      	b.n	8010846 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010aac:	bf00      	nop
			pau = au;
 8010aae:	e6ca      	b.n	8010846 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8010ab0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8010ab2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010aba:	f7fd fddc 	bl	800e676 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8010abe:	220b      	movs	r2, #11
 8010ac0:	49b2      	ldr	r1, [pc, #712]	@ (8010d8c <f_mkfs+0x6e8>)
 8010ac2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ac4:	f7fd fdb6 	bl	800e634 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aca:	330b      	adds	r3, #11
 8010acc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010ace:	4611      	mov	r1, r2
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fd fd68 	bl	800e5a6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad8:	330d      	adds	r3, #13
 8010ada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010adc:	b2d2      	uxtb	r2, r2
 8010ade:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8010ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae2:	330e      	adds	r3, #14
 8010ae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010ae6:	b292      	uxth	r2, r2
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fd fd5b 	bl	800e5a6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8010af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af2:	3310      	adds	r3, #16
 8010af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010af6:	b2d2      	uxtb	r2, r2
 8010af8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8010afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010afc:	f103 0211 	add.w	r2, r3, #17
 8010b00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010b04:	2b03      	cmp	r3, #3
 8010b06:	d002      	beq.n	8010b0e <f_mkfs+0x46a>
 8010b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	e000      	b.n	8010b10 <f_mkfs+0x46c>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	4619      	mov	r1, r3
 8010b12:	4610      	mov	r0, r2
 8010b14:	f7fd fd47 	bl	800e5a6 <st_word>
		if (sz_vol < 0x10000) {
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b1e:	d208      	bcs.n	8010b32 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b22:	3313      	adds	r3, #19
 8010b24:	693a      	ldr	r2, [r7, #16]
 8010b26:	b292      	uxth	r2, r2
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7fd fd3b 	bl	800e5a6 <st_word>
 8010b30:	e006      	b.n	8010b40 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8010b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b34:	3320      	adds	r3, #32
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	4611      	mov	r1, r2
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fd fd4e 	bl	800e5dc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b42:	3315      	adds	r3, #21
 8010b44:	22f8      	movs	r2, #248	@ 0xf8
 8010b46:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8010b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b4a:	3318      	adds	r3, #24
 8010b4c:	213f      	movs	r1, #63	@ 0x3f
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fd fd29 	bl	800e5a6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b56:	331a      	adds	r3, #26
 8010b58:	21ff      	movs	r1, #255	@ 0xff
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fd fd23 	bl	800e5a6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8010b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b62:	331c      	adds	r3, #28
 8010b64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fd fd38 	bl	800e5dc <st_dword>
		if (fmt == FS_FAT32) {
 8010b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010b70:	2b03      	cmp	r3, #3
 8010b72:	d131      	bne.n	8010bd8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8010b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b76:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8010b7a:	f7fb f9ff 	bl	800bf7c <get_fattime>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	4619      	mov	r1, r3
 8010b82:	4620      	mov	r0, r4
 8010b84:	f7fd fd2a 	bl	800e5dc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8010b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8a:	3324      	adds	r3, #36	@ 0x24
 8010b8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fd fd24 	bl	800e5dc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b96:	332c      	adds	r3, #44	@ 0x2c
 8010b98:	2102      	movs	r1, #2
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fd fd1e 	bl	800e5dc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8010ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba2:	3330      	adds	r3, #48	@ 0x30
 8010ba4:	2101      	movs	r1, #1
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fd fcfd 	bl	800e5a6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bae:	3332      	adds	r3, #50	@ 0x32
 8010bb0:	2106      	movs	r1, #6
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fd fcf7 	bl	800e5a6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bba:	3340      	adds	r3, #64	@ 0x40
 8010bbc:	2280      	movs	r2, #128	@ 0x80
 8010bbe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc2:	3342      	adds	r3, #66	@ 0x42
 8010bc4:	2229      	movs	r2, #41	@ 0x29
 8010bc6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bca:	3347      	adds	r3, #71	@ 0x47
 8010bcc:	2213      	movs	r2, #19
 8010bce:	4970      	ldr	r1, [pc, #448]	@ (8010d90 <f_mkfs+0x6ec>)
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fd fd2f 	bl	800e634 <mem_cpy>
 8010bd6:	e020      	b.n	8010c1a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bda:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8010bde:	f7fb f9cd 	bl	800bf7c <get_fattime>
 8010be2:	4603      	mov	r3, r0
 8010be4:	4619      	mov	r1, r3
 8010be6:	4620      	mov	r0, r4
 8010be8:	f7fd fcf8 	bl	800e5dc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8010bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bee:	3316      	adds	r3, #22
 8010bf0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010bf2:	b292      	uxth	r2, r2
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fd fcd5 	bl	800e5a6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfe:	3324      	adds	r3, #36	@ 0x24
 8010c00:	2280      	movs	r2, #128	@ 0x80
 8010c02:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8010c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c06:	3326      	adds	r3, #38	@ 0x26
 8010c08:	2229      	movs	r2, #41	@ 0x29
 8010c0a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c0e:	332b      	adds	r3, #43	@ 0x2b
 8010c10:	2213      	movs	r2, #19
 8010c12:	4960      	ldr	r1, [pc, #384]	@ (8010d94 <f_mkfs+0x6f0>)
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fd fd0d 	bl	800e634 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010c20:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fd fcbe 	bl	800e5a6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010c2a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010c2e:	2301      	movs	r3, #1
 8010c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010c34:	f7fd fc3e 	bl	800e4b4 <disk_write>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d001      	beq.n	8010c42 <f_mkfs+0x59e>
 8010c3e:	2301      	movs	r3, #1
 8010c40:	e156      	b.n	8010ef0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8010c42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010c46:	2b03      	cmp	r3, #3
 8010c48:	d140      	bne.n	8010ccc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4c:	1d9a      	adds	r2, r3, #6
 8010c4e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010c52:	2301      	movs	r3, #1
 8010c54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010c56:	f7fd fc2d 	bl	800e4b4 <disk_write>
			mem_set(buf, 0, ss);
 8010c5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	2100      	movs	r1, #0
 8010c60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c62:	f7fd fd08 	bl	800e676 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8010c66:	494c      	ldr	r1, [pc, #304]	@ (8010d98 <f_mkfs+0x6f4>)
 8010c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c6a:	f7fd fcb7 	bl	800e5dc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010c74:	4949      	ldr	r1, [pc, #292]	@ (8010d9c <f_mkfs+0x6f8>)
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fd fcb0 	bl	800e5dc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	3b01      	subs	r3, #1
 8010c86:	4619      	mov	r1, r3
 8010c88:	4610      	mov	r0, r2
 8010c8a:	f7fd fca7 	bl	800e5dc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c90:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010c94:	2102      	movs	r1, #2
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fd fca0 	bl	800e5dc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8010c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010ca2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fd fc7d 	bl	800e5a6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cae:	1dda      	adds	r2, r3, #7
 8010cb0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010cb8:	f7fd fbfc 	bl	800e4b4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbe:	1c5a      	adds	r2, r3, #1
 8010cc0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010cc8:	f7fd fbf4 	bl	800e4b4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cce:	2100      	movs	r1, #0
 8010cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cd2:	f7fd fcd0 	bl	800e676 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010cd8:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010cda:	2300      	movs	r3, #0
 8010cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010cde:	e04b      	b.n	8010d78 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8010ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010ce4:	2b03      	cmp	r3, #3
 8010ce6:	d113      	bne.n	8010d10 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010ce8:	f06f 0107 	mvn.w	r1, #7
 8010cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cee:	f7fd fc75 	bl	800e5dc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf4:	3304      	adds	r3, #4
 8010cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fd fc6e 	bl	800e5dc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d02:	3308      	adds	r3, #8
 8010d04:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fd fc67 	bl	800e5dc <st_dword>
 8010d0e:	e00b      	b.n	8010d28 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010d10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d101      	bne.n	8010d1c <f_mkfs+0x678>
 8010d18:	4b21      	ldr	r3, [pc, #132]	@ (8010da0 <f_mkfs+0x6fc>)
 8010d1a:	e001      	b.n	8010d20 <f_mkfs+0x67c>
 8010d1c:	f06f 0307 	mvn.w	r3, #7
 8010d20:	4619      	mov	r1, r3
 8010d22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d24:	f7fd fc5a 	bl	800e5dc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010d2a:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010d2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d30:	4293      	cmp	r3, r2
 8010d32:	bf28      	it	cs
 8010d34:	4613      	movcs	r3, r2
 8010d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010d38:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010d40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d42:	f7fd fbb7 	bl	800e4b4 <disk_write>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d001      	beq.n	8010d50 <f_mkfs+0x6ac>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e0cf      	b.n	8010ef0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8010d50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010d52:	461a      	mov	r2, r3
 8010d54:	2100      	movs	r1, #0
 8010d56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d58:	f7fd fc8d 	bl	800e676 <mem_set>
				sect += n; nsect -= n;
 8010d5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d60:	4413      	add	r3, r2
 8010d62:	667b      	str	r3, [r7, #100]	@ 0x64
 8010d64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d68:	1ad3      	subs	r3, r2, r3
 8010d6a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8010d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1dc      	bne.n	8010d2c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d74:	3301      	adds	r3, #1
 8010d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d3af      	bcc.n	8010ce0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8010d80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d10d      	bne.n	8010da4 <f_mkfs+0x700>
 8010d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d8a:	e00c      	b.n	8010da6 <f_mkfs+0x702>
 8010d8c:	080118d0 	.word	0x080118d0
 8010d90:	080118dc 	.word	0x080118dc
 8010d94:	080118f0 	.word	0x080118f0
 8010d98:	41615252 	.word	0x41615252
 8010d9c:	61417272 	.word	0x61417272
 8010da0:	00fffff8 	.word	0x00fffff8
 8010da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010da6:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010da8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dac:	4293      	cmp	r3, r2
 8010dae:	bf28      	it	cs
 8010db0:	4613      	movcs	r3, r2
 8010db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010db4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010dba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010dbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010dbe:	f7fd fb79 	bl	800e4b4 <disk_write>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d001      	beq.n	8010dcc <f_mkfs+0x728>
 8010dc8:	2301      	movs	r3, #1
 8010dca:	e091      	b.n	8010ef0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010dcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010dd0:	4413      	add	r3, r2
 8010dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8010dd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8010ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1e2      	bne.n	8010da8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8010de2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010de6:	2b03      	cmp	r3, #3
 8010de8:	d103      	bne.n	8010df2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010dea:	230c      	movs	r3, #12
 8010dec:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8010df0:	e010      	b.n	8010e14 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010df8:	d303      	bcc.n	8010e02 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010dfa:	2306      	movs	r3, #6
 8010dfc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8010e00:	e008      	b.n	8010e14 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8010e02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d101      	bne.n	8010e0e <f_mkfs+0x76a>
 8010e0a:	2304      	movs	r3, #4
 8010e0c:	e000      	b.n	8010e10 <f_mkfs+0x76c>
 8010e0e:	2301      	movs	r3, #1
 8010e10:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010e14:	7afb      	ldrb	r3, [r7, #11]
 8010e16:	f003 0308 	and.w	r3, r3, #8
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d15b      	bne.n	8010ed6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010e1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e20:	461a      	mov	r2, r3
 8010e22:	2100      	movs	r1, #0
 8010e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e26:	f7fd fc26 	bl	800e676 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010e30:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fd fbb6 	bl	800e5a6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010e40:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	2200      	movs	r2, #0
 8010e46:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	3302      	adds	r3, #2
 8010e54:	2201      	movs	r2, #1
 8010e56:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	3303      	adds	r3, #3
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	3304      	adds	r3, #4
 8010e64:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8010e68:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010e6a:	693a      	ldr	r2, [r7, #16]
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6e:	441a      	add	r2, r3
 8010e70:	4b21      	ldr	r3, [pc, #132]	@ (8010ef8 <f_mkfs+0x854>)
 8010e72:	fba3 1302 	umull	r1, r3, r3, r2
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	0852      	lsrs	r2, r2, #1
 8010e7a:	4413      	add	r3, r2
 8010e7c:	0b5b      	lsrs	r3, r3, #13
 8010e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	3305      	adds	r3, #5
 8010e84:	22fe      	movs	r2, #254	@ 0xfe
 8010e86:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e8a:	089b      	lsrs	r3, r3, #2
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	3306      	adds	r3, #6
 8010e92:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8010e96:	b2d2      	uxtb	r2, r2
 8010e98:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	3307      	adds	r3, #7
 8010e9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010ea0:	b2d2      	uxtb	r2, r2
 8010ea2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	3308      	adds	r3, #8
 8010ea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fd fb96 	bl	800e5dc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	330c      	adds	r3, #12
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7fd fb8f 	bl	800e5dc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010ebe:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ec8:	f7fd faf4 	bl	800e4b4 <disk_write>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <f_mkfs+0x832>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e00c      	b.n	8010ef0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010ed6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010eda:	2200      	movs	r2, #0
 8010edc:	2100      	movs	r1, #0
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fd fb08 	bl	800e4f4 <disk_ioctl>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <f_mkfs+0x84a>
 8010eea:	2301      	movs	r3, #1
 8010eec:	e000      	b.n	8010ef0 <f_mkfs+0x84c>

	return FR_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3774      	adds	r7, #116	@ 0x74
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd90      	pop	{r4, r7, pc}
 8010ef8:	0515565b 	.word	0x0515565b

08010efc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b087      	sub	sp, #28
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	4613      	mov	r3, r2
 8010f08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010f12:	4b1f      	ldr	r3, [pc, #124]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f14:	7a5b      	ldrb	r3, [r3, #9]
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d131      	bne.n	8010f80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f1e:	7a5b      	ldrb	r3, [r3, #9]
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	461a      	mov	r2, r3
 8010f24:	4b1a      	ldr	r3, [pc, #104]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f26:	2100      	movs	r1, #0
 8010f28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010f2a:	4b19      	ldr	r3, [pc, #100]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f2c:	7a5b      	ldrb	r3, [r3, #9]
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	4a17      	ldr	r2, [pc, #92]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	4413      	add	r3, r2
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010f3a:	4b15      	ldr	r3, [pc, #84]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f3c:	7a5b      	ldrb	r3, [r3, #9]
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	461a      	mov	r2, r3
 8010f42:	4b13      	ldr	r3, [pc, #76]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f44:	4413      	add	r3, r2
 8010f46:	79fa      	ldrb	r2, [r7, #7]
 8010f48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010f4a:	4b11      	ldr	r3, [pc, #68]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f4c:	7a5b      	ldrb	r3, [r3, #9]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	1c5a      	adds	r2, r3, #1
 8010f52:	b2d1      	uxtb	r1, r2
 8010f54:	4a0e      	ldr	r2, [pc, #56]	@ (8010f90 <FATFS_LinkDriverEx+0x94>)
 8010f56:	7251      	strb	r1, [r2, #9]
 8010f58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010f5a:	7dbb      	ldrb	r3, [r7, #22]
 8010f5c:	3330      	adds	r3, #48	@ 0x30
 8010f5e:	b2da      	uxtb	r2, r3
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	3301      	adds	r3, #1
 8010f68:	223a      	movs	r2, #58	@ 0x3a
 8010f6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	3302      	adds	r3, #2
 8010f70:	222f      	movs	r2, #47	@ 0x2f
 8010f72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	3303      	adds	r3, #3
 8010f78:	2200      	movs	r2, #0
 8010f7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	371c      	adds	r7, #28
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	20000a5c 	.word	0x20000a5c

08010f94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f7ff ffaa 	bl	8010efc <FATFS_LinkDriverEx>
 8010fa8:	4603      	mov	r3, r0
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
	...

08010fb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010fb8:	2201      	movs	r2, #1
 8010fba:	490e      	ldr	r1, [pc, #56]	@ (8010ff4 <MX_USB_HOST_Init+0x40>)
 8010fbc:	480e      	ldr	r0, [pc, #56]	@ (8010ff8 <MX_USB_HOST_Init+0x44>)
 8010fbe:	f7fb fd33 	bl	800ca28 <USBH_Init>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010fc8:	f7f0 fa6a 	bl	80014a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010fcc:	490b      	ldr	r1, [pc, #44]	@ (8010ffc <MX_USB_HOST_Init+0x48>)
 8010fce:	480a      	ldr	r0, [pc, #40]	@ (8010ff8 <MX_USB_HOST_Init+0x44>)
 8010fd0:	f7fb fdd7 	bl	800cb82 <USBH_RegisterClass>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d001      	beq.n	8010fde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010fda:	f7f0 fa61 	bl	80014a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010fde:	4806      	ldr	r0, [pc, #24]	@ (8010ff8 <MX_USB_HOST_Init+0x44>)
 8010fe0:	f7fb fe5b 	bl	800cc9a <USBH_Start>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d001      	beq.n	8010fee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010fea:	f7f0 fa59 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010fee:	bf00      	nop
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	08011015 	.word	0x08011015
 8010ff8:	20000a68 	.word	0x20000a68
 8010ffc:	2000000c 	.word	0x2000000c

08011000 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011004:	4802      	ldr	r0, [pc, #8]	@ (8011010 <MX_USB_HOST_Process+0x10>)
 8011006:	f7fb fe59 	bl	800ccbc <USBH_Process>
}
 801100a:	bf00      	nop
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20000a68 	.word	0x20000a68

08011014 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	460b      	mov	r3, r1
 801101e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011020:	78fb      	ldrb	r3, [r7, #3]
 8011022:	3b01      	subs	r3, #1
 8011024:	2b04      	cmp	r3, #4
 8011026:	d819      	bhi.n	801105c <USBH_UserProcess+0x48>
 8011028:	a201      	add	r2, pc, #4	@ (adr r2, 8011030 <USBH_UserProcess+0x1c>)
 801102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801102e:	bf00      	nop
 8011030:	0801105d 	.word	0x0801105d
 8011034:	0801104d 	.word	0x0801104d
 8011038:	0801105d 	.word	0x0801105d
 801103c:	08011055 	.word	0x08011055
 8011040:	08011045 	.word	0x08011045
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011044:	4b09      	ldr	r3, [pc, #36]	@ (801106c <USBH_UserProcess+0x58>)
 8011046:	2203      	movs	r2, #3
 8011048:	701a      	strb	r2, [r3, #0]
  break;
 801104a:	e008      	b.n	801105e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801104c:	4b07      	ldr	r3, [pc, #28]	@ (801106c <USBH_UserProcess+0x58>)
 801104e:	2202      	movs	r2, #2
 8011050:	701a      	strb	r2, [r3, #0]
  break;
 8011052:	e004      	b.n	801105e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011054:	4b05      	ldr	r3, [pc, #20]	@ (801106c <USBH_UserProcess+0x58>)
 8011056:	2201      	movs	r2, #1
 8011058:	701a      	strb	r2, [r3, #0]
  break;
 801105a:	e000      	b.n	801105e <USBH_UserProcess+0x4a>

  default:
  break;
 801105c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801105e:	bf00      	nop
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	20000e40 	.word	0x20000e40

08011070 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b08a      	sub	sp, #40	@ 0x28
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011078:	f107 0314 	add.w	r3, r7, #20
 801107c:	2200      	movs	r2, #0
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	605a      	str	r2, [r3, #4]
 8011082:	609a      	str	r2, [r3, #8]
 8011084:	60da      	str	r2, [r3, #12]
 8011086:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011090:	d147      	bne.n	8011122 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011092:	2300      	movs	r3, #0
 8011094:	613b      	str	r3, [r7, #16]
 8011096:	4b25      	ldr	r3, [pc, #148]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 8011098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801109a:	4a24      	ldr	r2, [pc, #144]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 801109c:	f043 0301 	orr.w	r3, r3, #1
 80110a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80110a2:	4b22      	ldr	r3, [pc, #136]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 80110a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110a6:	f003 0301 	and.w	r3, r3, #1
 80110aa:	613b      	str	r3, [r7, #16]
 80110ac:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80110ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80110b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110b4:	2302      	movs	r3, #2
 80110b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110b8:	2300      	movs	r3, #0
 80110ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110bc:	2303      	movs	r3, #3
 80110be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80110c0:	230a      	movs	r3, #10
 80110c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80110c4:	f107 0314 	add.w	r3, r7, #20
 80110c8:	4619      	mov	r1, r3
 80110ca:	4819      	ldr	r0, [pc, #100]	@ (8011130 <HAL_HCD_MspInit+0xc0>)
 80110cc:	f7f2 fc52 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80110d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80110d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110d6:	2302      	movs	r3, #2
 80110d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110da:	2300      	movs	r3, #0
 80110dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80110de:	f107 0314 	add.w	r3, r7, #20
 80110e2:	4619      	mov	r1, r3
 80110e4:	4812      	ldr	r0, [pc, #72]	@ (8011130 <HAL_HCD_MspInit+0xc0>)
 80110e6:	f7f2 fc45 	bl	8003974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80110ea:	4b10      	ldr	r3, [pc, #64]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 80110ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ee:	4a0f      	ldr	r2, [pc, #60]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 80110f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80110f6:	2300      	movs	r3, #0
 80110f8:	60fb      	str	r3, [r7, #12]
 80110fa:	4b0c      	ldr	r3, [pc, #48]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 80110fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110fe:	4a0b      	ldr	r2, [pc, #44]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 8011100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011104:	6453      	str	r3, [r2, #68]	@ 0x44
 8011106:	4b09      	ldr	r3, [pc, #36]	@ (801112c <HAL_HCD_MspInit+0xbc>)
 8011108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801110a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011112:	2200      	movs	r2, #0
 8011114:	2100      	movs	r1, #0
 8011116:	2043      	movs	r0, #67	@ 0x43
 8011118:	f7f1 f8e6 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801111c:	2043      	movs	r0, #67	@ 0x43
 801111e:	f7f1 f8ff 	bl	8002320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011122:	bf00      	nop
 8011124:	3728      	adds	r7, #40	@ 0x28
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	40023800 	.word	0x40023800
 8011130:	40020000 	.word	0x40020000

08011134 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011142:	4618      	mov	r0, r3
 8011144:	f7fc f991 	bl	800d46a <USBH_LL_IncTimer>
}
 8011148:	bf00      	nop
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801115e:	4618      	mov	r0, r3
 8011160:	f7fc f9c9 	bl	800d4f6 <USBH_LL_Connect>
}
 8011164:	bf00      	nop
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801117a:	4618      	mov	r0, r3
 801117c:	f7fc f9d2 	bl	800d524 <USBH_LL_Disconnect>
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	460b      	mov	r3, r1
 8011192:	70fb      	strb	r3, [r7, #3]
 8011194:	4613      	mov	r3, r2
 8011196:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fc f983 	bl	800d4be <USBH_LL_PortEnabled>
}
 80111b8:	bf00      	nop
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fc f983 	bl	800d4da <USBH_LL_PortDisabled>
}
 80111d4:	bf00      	nop
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d12a      	bne.n	8011244 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80111ee:	4a18      	ldr	r2, [pc, #96]	@ (8011250 <USBH_LL_Init+0x74>)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4a15      	ldr	r2, [pc, #84]	@ (8011250 <USBH_LL_Init+0x74>)
 80111fa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80111fe:	4b14      	ldr	r3, [pc, #80]	@ (8011250 <USBH_LL_Init+0x74>)
 8011200:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011204:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011206:	4b12      	ldr	r3, [pc, #72]	@ (8011250 <USBH_LL_Init+0x74>)
 8011208:	2208      	movs	r2, #8
 801120a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801120c:	4b10      	ldr	r3, [pc, #64]	@ (8011250 <USBH_LL_Init+0x74>)
 801120e:	2201      	movs	r2, #1
 8011210:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011212:	4b0f      	ldr	r3, [pc, #60]	@ (8011250 <USBH_LL_Init+0x74>)
 8011214:	2200      	movs	r2, #0
 8011216:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011218:	4b0d      	ldr	r3, [pc, #52]	@ (8011250 <USBH_LL_Init+0x74>)
 801121a:	2202      	movs	r2, #2
 801121c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801121e:	4b0c      	ldr	r3, [pc, #48]	@ (8011250 <USBH_LL_Init+0x74>)
 8011220:	2200      	movs	r2, #0
 8011222:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011224:	480a      	ldr	r0, [pc, #40]	@ (8011250 <USBH_LL_Init+0x74>)
 8011226:	f7f2 fd82 	bl	8003d2e <HAL_HCD_Init>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d001      	beq.n	8011234 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011230:	f7f0 f936 	bl	80014a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011234:	4806      	ldr	r0, [pc, #24]	@ (8011250 <USBH_LL_Init+0x74>)
 8011236:	f7f3 f9e3 	bl	8004600 <HAL_HCD_GetCurrentFrame>
 801123a:	4603      	mov	r3, r0
 801123c:	4619      	mov	r1, r3
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7fc f904 	bl	800d44c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011244:	2300      	movs	r3, #0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3708      	adds	r7, #8
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	20000e44 	.word	0x20000e44

08011254 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801126a:	4618      	mov	r0, r3
 801126c:	f7f3 f950 	bl	8004510 <HAL_HCD_Start>
 8011270:	4603      	mov	r3, r0
 8011272:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011274:	7bfb      	ldrb	r3, [r7, #15]
 8011276:	4618      	mov	r0, r3
 8011278:	f000 f95e 	bl	8011538 <USBH_Get_USB_Status>
 801127c:	4603      	mov	r3, r0
 801127e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011280:	7bbb      	ldrb	r3, [r7, #14]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}

0801128a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801128a:	b580      	push	{r7, lr}
 801128c:	b084      	sub	sp, #16
 801128e:	af00      	add	r7, sp, #0
 8011290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011292:	2300      	movs	r3, #0
 8011294:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011296:	2300      	movs	r3, #0
 8011298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7f3 f958 	bl	8004556 <HAL_HCD_Stop>
 80112a6:	4603      	mov	r3, r0
 80112a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80112aa:	7bfb      	ldrb	r3, [r7, #15]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f000 f943 	bl	8011538 <USBH_Get_USB_Status>
 80112b2:	4603      	mov	r3, r0
 80112b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80112c8:	2301      	movs	r3, #1
 80112ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f3 f9a2 	bl	800461c <HAL_HCD_GetCurrentSpeed>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b02      	cmp	r3, #2
 80112dc:	d00c      	beq.n	80112f8 <USBH_LL_GetSpeed+0x38>
 80112de:	2b02      	cmp	r3, #2
 80112e0:	d80d      	bhi.n	80112fe <USBH_LL_GetSpeed+0x3e>
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <USBH_LL_GetSpeed+0x2c>
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d003      	beq.n	80112f2 <USBH_LL_GetSpeed+0x32>
 80112ea:	e008      	b.n	80112fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80112ec:	2300      	movs	r3, #0
 80112ee:	73fb      	strb	r3, [r7, #15]
    break;
 80112f0:	e008      	b.n	8011304 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80112f2:	2301      	movs	r3, #1
 80112f4:	73fb      	strb	r3, [r7, #15]
    break;
 80112f6:	e005      	b.n	8011304 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80112f8:	2302      	movs	r3, #2
 80112fa:	73fb      	strb	r3, [r7, #15]
    break;
 80112fc:	e002      	b.n	8011304 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80112fe:	2301      	movs	r3, #1
 8011300:	73fb      	strb	r3, [r7, #15]
    break;
 8011302:	bf00      	nop
  }
  return  speed;
 8011304:	7bfb      	ldrb	r3, [r7, #15]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b084      	sub	sp, #16
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011324:	4618      	mov	r0, r3
 8011326:	f7f3 f933 	bl	8004590 <HAL_HCD_ResetPort>
 801132a:	4603      	mov	r3, r0
 801132c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801132e:	7bfb      	ldrb	r3, [r7, #15]
 8011330:	4618      	mov	r0, r3
 8011332:	f000 f901 	bl	8011538 <USBH_Get_USB_Status>
 8011336:	4603      	mov	r3, r0
 8011338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801133a:	7bbb      	ldrb	r3, [r7, #14]
}
 801133c:	4618      	mov	r0, r3
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	460b      	mov	r3, r1
 801134e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011356:	78fa      	ldrb	r2, [r7, #3]
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f7f3 f93b 	bl	80045d6 <HAL_HCD_HC_GetXferCount>
 8011360:	4603      	mov	r3, r0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801136a:	b590      	push	{r4, r7, lr}
 801136c:	b089      	sub	sp, #36	@ 0x24
 801136e:	af04      	add	r7, sp, #16
 8011370:	6078      	str	r0, [r7, #4]
 8011372:	4608      	mov	r0, r1
 8011374:	4611      	mov	r1, r2
 8011376:	461a      	mov	r2, r3
 8011378:	4603      	mov	r3, r0
 801137a:	70fb      	strb	r3, [r7, #3]
 801137c:	460b      	mov	r3, r1
 801137e:	70bb      	strb	r3, [r7, #2]
 8011380:	4613      	mov	r3, r2
 8011382:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011392:	787c      	ldrb	r4, [r7, #1]
 8011394:	78ba      	ldrb	r2, [r7, #2]
 8011396:	78f9      	ldrb	r1, [r7, #3]
 8011398:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801139a:	9302      	str	r3, [sp, #8]
 801139c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80113a6:	9300      	str	r3, [sp, #0]
 80113a8:	4623      	mov	r3, r4
 80113aa:	f7f2 fd27 	bl	8003dfc <HAL_HCD_HC_Init>
 80113ae:	4603      	mov	r3, r0
 80113b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80113b2:	7bfb      	ldrb	r3, [r7, #15]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 f8bf 	bl	8011538 <USBH_Get_USB_Status>
 80113ba:	4603      	mov	r3, r0
 80113bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113be:	7bbb      	ldrb	r3, [r7, #14]
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3714      	adds	r7, #20
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd90      	pop	{r4, r7, pc}

080113c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	460b      	mov	r3, r1
 80113d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113d8:	2300      	movs	r3, #0
 80113da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113e2:	78fa      	ldrb	r2, [r7, #3]
 80113e4:	4611      	mov	r1, r2
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7f2 fdc0 	bl	8003f6c <HAL_HCD_HC_Halt>
 80113ec:	4603      	mov	r3, r0
 80113ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f000 f8a0 	bl	8011538 <USBH_Get_USB_Status>
 80113f8:	4603      	mov	r3, r0
 80113fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}

08011406 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011406:	b590      	push	{r4, r7, lr}
 8011408:	b089      	sub	sp, #36	@ 0x24
 801140a:	af04      	add	r7, sp, #16
 801140c:	6078      	str	r0, [r7, #4]
 801140e:	4608      	mov	r0, r1
 8011410:	4611      	mov	r1, r2
 8011412:	461a      	mov	r2, r3
 8011414:	4603      	mov	r3, r0
 8011416:	70fb      	strb	r3, [r7, #3]
 8011418:	460b      	mov	r3, r1
 801141a:	70bb      	strb	r3, [r7, #2]
 801141c:	4613      	mov	r3, r2
 801141e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011420:	2300      	movs	r3, #0
 8011422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011424:	2300      	movs	r3, #0
 8011426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801142e:	787c      	ldrb	r4, [r7, #1]
 8011430:	78ba      	ldrb	r2, [r7, #2]
 8011432:	78f9      	ldrb	r1, [r7, #3]
 8011434:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011438:	9303      	str	r3, [sp, #12]
 801143a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801143c:	9302      	str	r3, [sp, #8]
 801143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011440:	9301      	str	r3, [sp, #4]
 8011442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	4623      	mov	r3, r4
 801144a:	f7f2 fdb3 	bl	8003fb4 <HAL_HCD_HC_SubmitRequest>
 801144e:	4603      	mov	r3, r0
 8011450:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011452:	7bfb      	ldrb	r3, [r7, #15]
 8011454:	4618      	mov	r0, r3
 8011456:	f000 f86f 	bl	8011538 <USBH_Get_USB_Status>
 801145a:	4603      	mov	r3, r0
 801145c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801145e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	bd90      	pop	{r4, r7, pc}

08011468 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	460b      	mov	r3, r1
 8011472:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801147a:	78fa      	ldrb	r2, [r7, #3]
 801147c:	4611      	mov	r1, r2
 801147e:	4618      	mov	r0, r3
 8011480:	f7f3 f894 	bl	80045ac <HAL_HCD_HC_GetURBState>
 8011484:	4603      	mov	r3, r0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b082      	sub	sp, #8
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	460b      	mov	r3, r1
 8011498:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d103      	bne.n	80114ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80114a4:	78fb      	ldrb	r3, [r7, #3]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f000 f872 	bl	8011590 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80114ac:	20c8      	movs	r0, #200	@ 0xc8
 80114ae:	f7f0 fe3f 	bl	8002130 <HAL_Delay>
  return USBH_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80114bc:	b480      	push	{r7}
 80114be:	b085      	sub	sp, #20
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	460b      	mov	r3, r1
 80114c6:	70fb      	strb	r3, [r7, #3]
 80114c8:	4613      	mov	r3, r2
 80114ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80114d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80114d4:	78fa      	ldrb	r2, [r7, #3]
 80114d6:	68f9      	ldr	r1, [r7, #12]
 80114d8:	4613      	mov	r3, r2
 80114da:	011b      	lsls	r3, r3, #4
 80114dc:	1a9b      	subs	r3, r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	440b      	add	r3, r1
 80114e2:	3317      	adds	r3, #23
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d00a      	beq.n	8011500 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80114ea:	78fa      	ldrb	r2, [r7, #3]
 80114ec:	68f9      	ldr	r1, [r7, #12]
 80114ee:	4613      	mov	r3, r2
 80114f0:	011b      	lsls	r3, r3, #4
 80114f2:	1a9b      	subs	r3, r3, r2
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	440b      	add	r3, r1
 80114f8:	333c      	adds	r3, #60	@ 0x3c
 80114fa:	78ba      	ldrb	r2, [r7, #2]
 80114fc:	701a      	strb	r2, [r3, #0]
 80114fe:	e009      	b.n	8011514 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011500:	78fa      	ldrb	r2, [r7, #3]
 8011502:	68f9      	ldr	r1, [r7, #12]
 8011504:	4613      	mov	r3, r2
 8011506:	011b      	lsls	r3, r3, #4
 8011508:	1a9b      	subs	r3, r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	440b      	add	r3, r1
 801150e:	333d      	adds	r3, #61	@ 0x3d
 8011510:	78ba      	ldrb	r2, [r7, #2]
 8011512:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011514:	2300      	movs	r3, #0
}
 8011516:	4618      	mov	r0, r3
 8011518:	3714      	adds	r7, #20
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b082      	sub	sp, #8
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7f0 fe00 	bl	8002130 <HAL_Delay>
}
 8011530:	bf00      	nop
 8011532:	3708      	adds	r7, #8
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011546:	79fb      	ldrb	r3, [r7, #7]
 8011548:	2b03      	cmp	r3, #3
 801154a:	d817      	bhi.n	801157c <USBH_Get_USB_Status+0x44>
 801154c:	a201      	add	r2, pc, #4	@ (adr r2, 8011554 <USBH_Get_USB_Status+0x1c>)
 801154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011552:	bf00      	nop
 8011554:	08011565 	.word	0x08011565
 8011558:	0801156b 	.word	0x0801156b
 801155c:	08011571 	.word	0x08011571
 8011560:	08011577 	.word	0x08011577
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011564:	2300      	movs	r3, #0
 8011566:	73fb      	strb	r3, [r7, #15]
    break;
 8011568:	e00b      	b.n	8011582 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801156a:	2302      	movs	r3, #2
 801156c:	73fb      	strb	r3, [r7, #15]
    break;
 801156e:	e008      	b.n	8011582 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011570:	2301      	movs	r3, #1
 8011572:	73fb      	strb	r3, [r7, #15]
    break;
 8011574:	e005      	b.n	8011582 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011576:	2302      	movs	r3, #2
 8011578:	73fb      	strb	r3, [r7, #15]
    break;
 801157a:	e002      	b.n	8011582 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801157c:	2302      	movs	r3, #2
 801157e:	73fb      	strb	r3, [r7, #15]
    break;
 8011580:	bf00      	nop
  }
  return usb_status;
 8011582:	7bfb      	ldrb	r3, [r7, #15]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3714      	adds	r7, #20
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	4603      	mov	r3, r0
 8011598:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801159a:	79fb      	ldrb	r3, [r7, #7]
 801159c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80115a4:	2300      	movs	r3, #0
 80115a6:	73fb      	strb	r3, [r7, #15]
 80115a8:	e001      	b.n	80115ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80115aa:	2301      	movs	r3, #1
 80115ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
 80115b0:	461a      	mov	r2, r3
 80115b2:	2104      	movs	r1, #4
 80115b4:	4803      	ldr	r0, [pc, #12]	@ (80115c4 <MX_DriverVbusFS+0x34>)
 80115b6:	f7f2 fba1 	bl	8003cfc <HAL_GPIO_WritePin>
}
 80115ba:	bf00      	nop
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	40020400 	.word	0x40020400

080115c8 <_ZdlPvj>:
 80115c8:	f000 b800 	b.w	80115cc <_ZdlPv>

080115cc <_ZdlPv>:
 80115cc:	f000 b808 	b.w	80115e0 <free>

080115d0 <malloc>:
 80115d0:	4b02      	ldr	r3, [pc, #8]	@ (80115dc <malloc+0xc>)
 80115d2:	4601      	mov	r1, r0
 80115d4:	6818      	ldr	r0, [r3, #0]
 80115d6:	f000 b82d 	b.w	8011634 <_malloc_r>
 80115da:	bf00      	nop
 80115dc:	2000002c 	.word	0x2000002c

080115e0 <free>:
 80115e0:	4b02      	ldr	r3, [pc, #8]	@ (80115ec <free+0xc>)
 80115e2:	4601      	mov	r1, r0
 80115e4:	6818      	ldr	r0, [r3, #0]
 80115e6:	f000 b8f5 	b.w	80117d4 <_free_r>
 80115ea:	bf00      	nop
 80115ec:	2000002c 	.word	0x2000002c

080115f0 <sbrk_aligned>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	4e0f      	ldr	r6, [pc, #60]	@ (8011630 <sbrk_aligned+0x40>)
 80115f4:	460c      	mov	r4, r1
 80115f6:	6831      	ldr	r1, [r6, #0]
 80115f8:	4605      	mov	r5, r0
 80115fa:	b911      	cbnz	r1, 8011602 <sbrk_aligned+0x12>
 80115fc:	f000 f8ae 	bl	801175c <_sbrk_r>
 8011600:	6030      	str	r0, [r6, #0]
 8011602:	4621      	mov	r1, r4
 8011604:	4628      	mov	r0, r5
 8011606:	f000 f8a9 	bl	801175c <_sbrk_r>
 801160a:	1c43      	adds	r3, r0, #1
 801160c:	d103      	bne.n	8011616 <sbrk_aligned+0x26>
 801160e:	f04f 34ff 	mov.w	r4, #4294967295
 8011612:	4620      	mov	r0, r4
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	1cc4      	adds	r4, r0, #3
 8011618:	f024 0403 	bic.w	r4, r4, #3
 801161c:	42a0      	cmp	r0, r4
 801161e:	d0f8      	beq.n	8011612 <sbrk_aligned+0x22>
 8011620:	1a21      	subs	r1, r4, r0
 8011622:	4628      	mov	r0, r5
 8011624:	f000 f89a 	bl	801175c <_sbrk_r>
 8011628:	3001      	adds	r0, #1
 801162a:	d1f2      	bne.n	8011612 <sbrk_aligned+0x22>
 801162c:	e7ef      	b.n	801160e <sbrk_aligned+0x1e>
 801162e:	bf00      	nop
 8011630:	20001224 	.word	0x20001224

08011634 <_malloc_r>:
 8011634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011638:	1ccd      	adds	r5, r1, #3
 801163a:	f025 0503 	bic.w	r5, r5, #3
 801163e:	3508      	adds	r5, #8
 8011640:	2d0c      	cmp	r5, #12
 8011642:	bf38      	it	cc
 8011644:	250c      	movcc	r5, #12
 8011646:	2d00      	cmp	r5, #0
 8011648:	4606      	mov	r6, r0
 801164a:	db01      	blt.n	8011650 <_malloc_r+0x1c>
 801164c:	42a9      	cmp	r1, r5
 801164e:	d904      	bls.n	801165a <_malloc_r+0x26>
 8011650:	230c      	movs	r3, #12
 8011652:	6033      	str	r3, [r6, #0]
 8011654:	2000      	movs	r0, #0
 8011656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801165a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011730 <_malloc_r+0xfc>
 801165e:	f000 f869 	bl	8011734 <__malloc_lock>
 8011662:	f8d8 3000 	ldr.w	r3, [r8]
 8011666:	461c      	mov	r4, r3
 8011668:	bb44      	cbnz	r4, 80116bc <_malloc_r+0x88>
 801166a:	4629      	mov	r1, r5
 801166c:	4630      	mov	r0, r6
 801166e:	f7ff ffbf 	bl	80115f0 <sbrk_aligned>
 8011672:	1c43      	adds	r3, r0, #1
 8011674:	4604      	mov	r4, r0
 8011676:	d158      	bne.n	801172a <_malloc_r+0xf6>
 8011678:	f8d8 4000 	ldr.w	r4, [r8]
 801167c:	4627      	mov	r7, r4
 801167e:	2f00      	cmp	r7, #0
 8011680:	d143      	bne.n	801170a <_malloc_r+0xd6>
 8011682:	2c00      	cmp	r4, #0
 8011684:	d04b      	beq.n	801171e <_malloc_r+0xea>
 8011686:	6823      	ldr	r3, [r4, #0]
 8011688:	4639      	mov	r1, r7
 801168a:	4630      	mov	r0, r6
 801168c:	eb04 0903 	add.w	r9, r4, r3
 8011690:	f000 f864 	bl	801175c <_sbrk_r>
 8011694:	4581      	cmp	r9, r0
 8011696:	d142      	bne.n	801171e <_malloc_r+0xea>
 8011698:	6821      	ldr	r1, [r4, #0]
 801169a:	1a6d      	subs	r5, r5, r1
 801169c:	4629      	mov	r1, r5
 801169e:	4630      	mov	r0, r6
 80116a0:	f7ff ffa6 	bl	80115f0 <sbrk_aligned>
 80116a4:	3001      	adds	r0, #1
 80116a6:	d03a      	beq.n	801171e <_malloc_r+0xea>
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	442b      	add	r3, r5
 80116ac:	6023      	str	r3, [r4, #0]
 80116ae:	f8d8 3000 	ldr.w	r3, [r8]
 80116b2:	685a      	ldr	r2, [r3, #4]
 80116b4:	bb62      	cbnz	r2, 8011710 <_malloc_r+0xdc>
 80116b6:	f8c8 7000 	str.w	r7, [r8]
 80116ba:	e00f      	b.n	80116dc <_malloc_r+0xa8>
 80116bc:	6822      	ldr	r2, [r4, #0]
 80116be:	1b52      	subs	r2, r2, r5
 80116c0:	d420      	bmi.n	8011704 <_malloc_r+0xd0>
 80116c2:	2a0b      	cmp	r2, #11
 80116c4:	d917      	bls.n	80116f6 <_malloc_r+0xc2>
 80116c6:	1961      	adds	r1, r4, r5
 80116c8:	42a3      	cmp	r3, r4
 80116ca:	6025      	str	r5, [r4, #0]
 80116cc:	bf18      	it	ne
 80116ce:	6059      	strne	r1, [r3, #4]
 80116d0:	6863      	ldr	r3, [r4, #4]
 80116d2:	bf08      	it	eq
 80116d4:	f8c8 1000 	streq.w	r1, [r8]
 80116d8:	5162      	str	r2, [r4, r5]
 80116da:	604b      	str	r3, [r1, #4]
 80116dc:	4630      	mov	r0, r6
 80116de:	f000 f82f 	bl	8011740 <__malloc_unlock>
 80116e2:	f104 000b 	add.w	r0, r4, #11
 80116e6:	1d23      	adds	r3, r4, #4
 80116e8:	f020 0007 	bic.w	r0, r0, #7
 80116ec:	1ac2      	subs	r2, r0, r3
 80116ee:	bf1c      	itt	ne
 80116f0:	1a1b      	subne	r3, r3, r0
 80116f2:	50a3      	strne	r3, [r4, r2]
 80116f4:	e7af      	b.n	8011656 <_malloc_r+0x22>
 80116f6:	6862      	ldr	r2, [r4, #4]
 80116f8:	42a3      	cmp	r3, r4
 80116fa:	bf0c      	ite	eq
 80116fc:	f8c8 2000 	streq.w	r2, [r8]
 8011700:	605a      	strne	r2, [r3, #4]
 8011702:	e7eb      	b.n	80116dc <_malloc_r+0xa8>
 8011704:	4623      	mov	r3, r4
 8011706:	6864      	ldr	r4, [r4, #4]
 8011708:	e7ae      	b.n	8011668 <_malloc_r+0x34>
 801170a:	463c      	mov	r4, r7
 801170c:	687f      	ldr	r7, [r7, #4]
 801170e:	e7b6      	b.n	801167e <_malloc_r+0x4a>
 8011710:	461a      	mov	r2, r3
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	42a3      	cmp	r3, r4
 8011716:	d1fb      	bne.n	8011710 <_malloc_r+0xdc>
 8011718:	2300      	movs	r3, #0
 801171a:	6053      	str	r3, [r2, #4]
 801171c:	e7de      	b.n	80116dc <_malloc_r+0xa8>
 801171e:	230c      	movs	r3, #12
 8011720:	6033      	str	r3, [r6, #0]
 8011722:	4630      	mov	r0, r6
 8011724:	f000 f80c 	bl	8011740 <__malloc_unlock>
 8011728:	e794      	b.n	8011654 <_malloc_r+0x20>
 801172a:	6005      	str	r5, [r0, #0]
 801172c:	e7d6      	b.n	80116dc <_malloc_r+0xa8>
 801172e:	bf00      	nop
 8011730:	20001228 	.word	0x20001228

08011734 <__malloc_lock>:
 8011734:	4801      	ldr	r0, [pc, #4]	@ (801173c <__malloc_lock+0x8>)
 8011736:	f000 b84b 	b.w	80117d0 <__retarget_lock_acquire_recursive>
 801173a:	bf00      	nop
 801173c:	20001368 	.word	0x20001368

08011740 <__malloc_unlock>:
 8011740:	4801      	ldr	r0, [pc, #4]	@ (8011748 <__malloc_unlock+0x8>)
 8011742:	f000 b846 	b.w	80117d2 <__retarget_lock_release_recursive>
 8011746:	bf00      	nop
 8011748:	20001368 	.word	0x20001368

0801174c <memset>:
 801174c:	4402      	add	r2, r0
 801174e:	4603      	mov	r3, r0
 8011750:	4293      	cmp	r3, r2
 8011752:	d100      	bne.n	8011756 <memset+0xa>
 8011754:	4770      	bx	lr
 8011756:	f803 1b01 	strb.w	r1, [r3], #1
 801175a:	e7f9      	b.n	8011750 <memset+0x4>

0801175c <_sbrk_r>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4d06      	ldr	r5, [pc, #24]	@ (8011778 <_sbrk_r+0x1c>)
 8011760:	2300      	movs	r3, #0
 8011762:	4604      	mov	r4, r0
 8011764:	4608      	mov	r0, r1
 8011766:	602b      	str	r3, [r5, #0]
 8011768:	f7f0 fc2e 	bl	8001fc8 <_sbrk>
 801176c:	1c43      	adds	r3, r0, #1
 801176e:	d102      	bne.n	8011776 <_sbrk_r+0x1a>
 8011770:	682b      	ldr	r3, [r5, #0]
 8011772:	b103      	cbz	r3, 8011776 <_sbrk_r+0x1a>
 8011774:	6023      	str	r3, [r4, #0]
 8011776:	bd38      	pop	{r3, r4, r5, pc}
 8011778:	20001364 	.word	0x20001364

0801177c <__errno>:
 801177c:	4b01      	ldr	r3, [pc, #4]	@ (8011784 <__errno+0x8>)
 801177e:	6818      	ldr	r0, [r3, #0]
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	2000002c 	.word	0x2000002c

08011788 <__libc_init_array>:
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	4d0d      	ldr	r5, [pc, #52]	@ (80117c0 <__libc_init_array+0x38>)
 801178c:	4c0d      	ldr	r4, [pc, #52]	@ (80117c4 <__libc_init_array+0x3c>)
 801178e:	1b64      	subs	r4, r4, r5
 8011790:	10a4      	asrs	r4, r4, #2
 8011792:	2600      	movs	r6, #0
 8011794:	42a6      	cmp	r6, r4
 8011796:	d109      	bne.n	80117ac <__libc_init_array+0x24>
 8011798:	4d0b      	ldr	r5, [pc, #44]	@ (80117c8 <__libc_init_array+0x40>)
 801179a:	4c0c      	ldr	r4, [pc, #48]	@ (80117cc <__libc_init_array+0x44>)
 801179c:	f000 f864 	bl	8011868 <_init>
 80117a0:	1b64      	subs	r4, r4, r5
 80117a2:	10a4      	asrs	r4, r4, #2
 80117a4:	2600      	movs	r6, #0
 80117a6:	42a6      	cmp	r6, r4
 80117a8:	d105      	bne.n	80117b6 <__libc_init_array+0x2e>
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80117b0:	4798      	blx	r3
 80117b2:	3601      	adds	r6, #1
 80117b4:	e7ee      	b.n	8011794 <__libc_init_array+0xc>
 80117b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80117ba:	4798      	blx	r3
 80117bc:	3601      	adds	r6, #1
 80117be:	e7f2      	b.n	80117a6 <__libc_init_array+0x1e>
 80117c0:	08011a00 	.word	0x08011a00
 80117c4:	08011a00 	.word	0x08011a00
 80117c8:	08011a00 	.word	0x08011a00
 80117cc:	08011a04 	.word	0x08011a04

080117d0 <__retarget_lock_acquire_recursive>:
 80117d0:	4770      	bx	lr

080117d2 <__retarget_lock_release_recursive>:
 80117d2:	4770      	bx	lr

080117d4 <_free_r>:
 80117d4:	b538      	push	{r3, r4, r5, lr}
 80117d6:	4605      	mov	r5, r0
 80117d8:	2900      	cmp	r1, #0
 80117da:	d041      	beq.n	8011860 <_free_r+0x8c>
 80117dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117e0:	1f0c      	subs	r4, r1, #4
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	bfb8      	it	lt
 80117e6:	18e4      	addlt	r4, r4, r3
 80117e8:	f7ff ffa4 	bl	8011734 <__malloc_lock>
 80117ec:	4a1d      	ldr	r2, [pc, #116]	@ (8011864 <_free_r+0x90>)
 80117ee:	6813      	ldr	r3, [r2, #0]
 80117f0:	b933      	cbnz	r3, 8011800 <_free_r+0x2c>
 80117f2:	6063      	str	r3, [r4, #4]
 80117f4:	6014      	str	r4, [r2, #0]
 80117f6:	4628      	mov	r0, r5
 80117f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117fc:	f7ff bfa0 	b.w	8011740 <__malloc_unlock>
 8011800:	42a3      	cmp	r3, r4
 8011802:	d908      	bls.n	8011816 <_free_r+0x42>
 8011804:	6820      	ldr	r0, [r4, #0]
 8011806:	1821      	adds	r1, r4, r0
 8011808:	428b      	cmp	r3, r1
 801180a:	bf01      	itttt	eq
 801180c:	6819      	ldreq	r1, [r3, #0]
 801180e:	685b      	ldreq	r3, [r3, #4]
 8011810:	1809      	addeq	r1, r1, r0
 8011812:	6021      	streq	r1, [r4, #0]
 8011814:	e7ed      	b.n	80117f2 <_free_r+0x1e>
 8011816:	461a      	mov	r2, r3
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	b10b      	cbz	r3, 8011820 <_free_r+0x4c>
 801181c:	42a3      	cmp	r3, r4
 801181e:	d9fa      	bls.n	8011816 <_free_r+0x42>
 8011820:	6811      	ldr	r1, [r2, #0]
 8011822:	1850      	adds	r0, r2, r1
 8011824:	42a0      	cmp	r0, r4
 8011826:	d10b      	bne.n	8011840 <_free_r+0x6c>
 8011828:	6820      	ldr	r0, [r4, #0]
 801182a:	4401      	add	r1, r0
 801182c:	1850      	adds	r0, r2, r1
 801182e:	4283      	cmp	r3, r0
 8011830:	6011      	str	r1, [r2, #0]
 8011832:	d1e0      	bne.n	80117f6 <_free_r+0x22>
 8011834:	6818      	ldr	r0, [r3, #0]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	6053      	str	r3, [r2, #4]
 801183a:	4408      	add	r0, r1
 801183c:	6010      	str	r0, [r2, #0]
 801183e:	e7da      	b.n	80117f6 <_free_r+0x22>
 8011840:	d902      	bls.n	8011848 <_free_r+0x74>
 8011842:	230c      	movs	r3, #12
 8011844:	602b      	str	r3, [r5, #0]
 8011846:	e7d6      	b.n	80117f6 <_free_r+0x22>
 8011848:	6820      	ldr	r0, [r4, #0]
 801184a:	1821      	adds	r1, r4, r0
 801184c:	428b      	cmp	r3, r1
 801184e:	bf04      	itt	eq
 8011850:	6819      	ldreq	r1, [r3, #0]
 8011852:	685b      	ldreq	r3, [r3, #4]
 8011854:	6063      	str	r3, [r4, #4]
 8011856:	bf04      	itt	eq
 8011858:	1809      	addeq	r1, r1, r0
 801185a:	6021      	streq	r1, [r4, #0]
 801185c:	6054      	str	r4, [r2, #4]
 801185e:	e7ca      	b.n	80117f6 <_free_r+0x22>
 8011860:	bd38      	pop	{r3, r4, r5, pc}
 8011862:	bf00      	nop
 8011864:	20001228 	.word	0x20001228

08011868 <_init>:
 8011868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186a:	bf00      	nop
 801186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801186e:	bc08      	pop	{r3}
 8011870:	469e      	mov	lr, r3
 8011872:	4770      	bx	lr

08011874 <_fini>:
 8011874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011876:	bf00      	nop
 8011878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801187a:	bc08      	pop	{r3}
 801187c:	469e      	mov	lr, r3
 801187e:	4770      	bx	lr
