
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ad4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08014c94  08014c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801502c  0801502c  00017088  2**0
                  CONTENTS
  4 .ARM          00000008  0801502c  0801502c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015034  08015034  00017088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015034  08015034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015038  08015038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0801503c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017088  2**0
                  CONTENTS
 10 .bss          000010d0  20000088  20000088  00017088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001158  20001158  00017088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004468a  00000000  00000000  000170b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f2c  00000000  00000000  0005b742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bf0  00000000  00000000  00063670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021e9  00000000  00000000  00066260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000399cf  00000000  00000000  00068449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003cd89  00000000  00000000  000a1e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012defe  00000000  00000000  000deba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0020ca9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d99c  00000000  00000000  0020cae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  0021a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014c7c 	.word	0x08014c7c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	08014c7c 	.word	0x08014c7c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_ZNK3VMB9FAT32File6isOpenEv>:

		unsigned int write(const char* text) override;
		unsigned int read(char* buffer, unsigned int length) override;
		bool seek(unsigned int position) override;
		unsigned int getSize() const override;
		bool isOpen() const override { return m_isOpen; }
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_ZN3VMB5IFileC1Ev>:

#include <string>

namespace VMB
{
	class IFile
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <_ZN3VMB5IFileC1Ev+0x1c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	08014eb4 	.word	0x08014eb4

080005f4 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <_ZN3VMB5IFileD1Ev+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	08014eb4 	.word	0x08014eb4

08000614 <_ZN3VMB5IFileD0Ev>:
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffe9 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 8000622:	2104      	movs	r1, #4
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f013 f9ad 	bl	8013984 <_ZdlPvj>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN3VMB9FAT32FileC1Ev>:
{
	bool FAT32File::s_isMounted = false;
	FATFS FAT32File::s_SDFatFS;
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    	: m_fileHandle{ 0 }
		, m_isOpen(false)
		, m_currentMode(FA_READ)
		, m_path("")
		, m_lastError(FRESULT::FR_OK)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffc8 	bl	80005d4 <_ZN3VMB5IFileC1Ev>
 8000644:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <_ZN3VMB9FAT32FileC1Ev+0xa4>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
    	: m_fileHandle{ 0 }
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3304      	adds	r3, #4
 800064e:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f013 fd54 	bl	8014102 <memset>
		, m_isOpen(false)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		, m_currentMode(FA_READ)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
		, m_path("")
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 740f 	add.w	r4, r3, #572	@ 0x23c
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4618      	mov	r0, r3
 8000676:	f013 f998 	bl	80139aa <_ZNSaIcEC1Ev>
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	461a      	mov	r2, r3
 8000680:	4916      	ldr	r1, [pc, #88]	@ (80006dc <_ZN3VMB9FAT32FileC1Ev+0xa8>)
 8000682:	4620      	mov	r0, r4
 8000684:	f013 fb24 	bl	8013cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4618      	mov	r0, r3
 800068e:	f013 f98d 	bl	80139ac <_ZNSaIcED1Ev>
		, m_lastError(FRESULT::FR_OK)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
	{
		if(!s_isMounted)
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d011      	beq.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
		{
			m_lastError =  f_mount(&s_SDFatFS, (TCHAR const*)SDPath, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	490e      	ldr	r1, [pc, #56]	@ (80006e4 <_ZN3VMB9FAT32FileC1Ev+0xb0>)
 80006ac:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <_ZN3VMB9FAT32FileC1Ev+0xb4>)
 80006ae:	f011 fbeb 	bl	8011e88 <f_mount>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
			if(m_lastError == FRESULT::FR_OK)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
				s_isMounted = true;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			else
			{
				// Can't mount device
			}
		}
	}
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	08014e80 	.word	0x08014e80
 80006dc:	08014c94 	.word	0x08014c94
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	2000080c 	.word	0x2000080c
 80006e8:	200000a8 	.word	0x200000a8

080006ec <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <_ZN3VMB9FAT32FileD1Ev+0x2c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	{

	}
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000700:	4618      	mov	r0, r3
 8000702:	f013 f9ec 	bl	8013ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff73 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08014e80 	.word	0x08014e80

0800071c <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	}
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ffe1 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 800072a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f013 f928 	bl	8013984 <_ZdlPvj>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>:

	bool FAT32File::open(const char* path, AccessMode mode)
	{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
		if(m_isOpen)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x1a>
		{
			// Already open
			return false;
 8000754:	2300      	movs	r3, #0
 8000756:	e02b      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
		}
		switch(mode)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d01d      	beq.n	800079a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x5c>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc24      	bgt.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x34>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00a      	beq.n	8000786 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x48>
 8000770:	e01d      	b.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
		{
			case AccessMode::read:
			{
				return open(path, FA_READ);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	330c      	adds	r3, #12
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	4798      	blx	r3
 8000782:	4603      	mov	r3, r0
 8000784:	e014      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::write:
			{
				return open(path, FA_WRITE | FA_CREATE_ALWAYS);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	330c      	adds	r3, #12
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	220a      	movs	r2, #10
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	4798      	blx	r3
 8000796:	4603      	mov	r3, r0
 8000798:	e00a      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::append:
			{
				return open(path, FA_OPEN_APPEND | FA_WRITE);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	330c      	adds	r3, #12
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2232      	movs	r2, #50	@ 0x32
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	4798      	blx	r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	e000      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}

			default:
			{
				// Unknown mode
				return false;
 80007ae:	2300      	movs	r3, #0
			}
		}
		return false;
	}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN3VMB9FAT32File4openEPKci>:
	bool FAT32File::open(const char* path, int fa_mode)
	{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
		if (m_isOpen)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZN3VMB9FAT32File4openEPKci+0x1a>
		{
			// Already open
			return false;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e027      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_lastError = f_open(&m_fileHandle, path, fa_mode);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3304      	adds	r3, #4
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	4618      	mov	r0, r3
 80007de:	f011 fb99 	bl	8011f14 <f_open>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		if (m_lastError == FR_OK) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d110      	bne.n	8000818 <_ZN3VMB9FAT32File4openEPKci+0x60>
			m_isOpen = true;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
			m_path = path;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4618      	mov	r0, r3
 8000808:	f013 fa41 	bl	8013c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			m_currentMode = fa_mode;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
			return true;
 8000814:	2301      	movs	r3, #1
 8000816:	e004      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_isOpen = false;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		return false;
 8000820:	2300      	movs	r3, #0
	}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
		if (!m_isOpen)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000838:	f083 0301 	eor.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZN3VMB9FAT32File5closeEv+0x1c>
		{
			// File is not open
			return false;
 8000842:	2300      	movs	r3, #0
 8000844:	e01b      	b.n	800087e <_ZN3VMB9FAT32File5closeEv+0x54>
		}
		m_path.clear();
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 800084c:	4618      	mov	r0, r3
 800084e:	f013 f98d 	bl	8013b6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		m_isOpen = false;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		m_lastError = f_close(&m_fileHandle);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f012 f844 	bl	80128ec <f_close>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FRESULT::FR_OK;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
	}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <_ZN3VMB9FAT32File5writeEPKc+0x1e>
 80008a0:	2300      	movs	r3, #0
 80008a2:	e011      	b.n	80008c8 <_ZN3VMB9FAT32File5writeEPKc+0x42>
		UINT written;
		m_lastError = f_write(&m_fileHandle, text, strlen(text), &written);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1d1c      	adds	r4, r3, #4
 80008a8:	6838      	ldr	r0, [r7, #0]
 80008aa:	f7ff fcf9 	bl	80002a0 <strlen>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	4620      	mov	r0, r4
 80008b8:	f011 fe25 	bl	8012506 <f_write>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return written;
 80008c6:	68fb      	ldr	r3, [r7, #12]
	}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <_ZN3VMB9FAT32File4readEPcj>:
	unsigned int FAT32File::read(char* buffer, unsigned int length) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
		if (!m_isOpen) return 0;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80008e2:	f083 0301 	eor.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZN3VMB9FAT32File4readEPcj+0x20>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e00d      	b.n	800090c <_ZN3VMB9FAT32File4readEPcj+0x3c>
		UINT bytesRead;
		m_lastError = f_read(&m_fileHandle, buffer, length, &bytesRead);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1d18      	adds	r0, r3, #4
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f011 fcc4 	bl	8012288 <f_read>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return bytesRead;
 800090a:	697b      	ldr	r3, [r7, #20]
	}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_ZN3VMB9FAT32File4seekEj>:
	bool FAT32File::seek(unsigned int position) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return false;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZN3VMB9FAT32File4seekEj+0x1e>
 800092e:	2300      	movs	r3, #0
 8000930:	e012      	b.n	8000958 <_ZN3VMB9FAT32File4seekEj+0x44>
		m_lastError = f_lseek(&m_fileHandle, position);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	6839      	ldr	r1, [r7, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f012 f801 	bl	8012940 <f_lseek>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
	}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZNK3VMB9FAT32File7getSizeEv>:

	unsigned int FAT32File::getSize() const {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_ZNK3VMB9FAT32File7getSizeEv+0x1c>
 8000978:	2300      	movs	r3, #0
 800097a:	e001      	b.n	8000980 <_ZNK3VMB9FAT32File7getSizeEv+0x20>
		return f_size(&m_fileHandle);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
	}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN3VMB9FAT32File5flushEv>:
	bool FAT32File::flush() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return false;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZN3VMB9FAT32File5flushEv+0x1c>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e011      	b.n	80009cc <_ZN3VMB9FAT32File5flushEv+0x40>
		m_lastError = f_sync(&m_fileHandle);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f011 ff1f 	bl	80127f0 <f_sync>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
	}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZN3VMB9FAT32File6removeEPKc>:

	bool FAT32File::remove(const char* path) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
		return f_unlink(path) == FR_OK;
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f012 fac7 	bl	8012f70 <f_unlink>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
	}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>:

	bool FAT32File::rename(const char* oldPath, const char* newPath) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
		return f_rename(oldPath, newPath) == FR_OK;
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f012 fb5f 	bl	80130c6 <f_rename>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
	}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN3VMB9FAT32File6existsEPKc>:

	bool FAT32File::exists(const char* path) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
		FILINFO fileInfo;
		return f_stat(path, &fileInfo) == FR_OK;
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f012 fa67 	bl	8012efe <f_stat>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
	}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f84d 	bl	8000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffeb 	bl	8000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>:

	std::vector<std::string> FAT32File::listDirectory(const char* path) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
		std::vector<std::string> files;
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffeb 	bl	8000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
		DIR dir;
		FILINFO fileInfo;
		if (f_opendir(&dir, path) == FR_OK) {
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f012 f95f 	bl	8012d52 <f_opendir>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01f      	beq.n	8000ae4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x6c>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000aa4:	e006      	b.n	8000ab4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x3c>
				files.emplace_back(fileInfo.fname);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	3309      	adds	r3, #9
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f82d 	bl	8000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000ab4:	f107 0208 	add.w	r2, r7, #8
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f012 f9e0 	bl	8012e84 <f_readdir>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000aca:	7c7b      	ldrb	r3, [r7, #17]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5e>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x2e>
			}
			f_closedir(&dir);
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f012 f9aa 	bl	8012e38 <f_closedir>
		}
		return files;
 8000ae4:	bf00      	nop
	}
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	3750      	adds	r7, #80	@ 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f838 	bl	8000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f840 	bl	8000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000b0e:	b5b0      	push	{r4, r5, r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d012      	beq.n	8000b4a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000b24:	687c      	ldr	r4, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685d      	ldr	r5, [r3, #4]
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f000 f86a 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4629      	mov	r1, r5
 8000b36:	4620      	mov	r0, r4
 8000b38:	f000 f86f 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f103 0218 	add.w	r2, r3, #24
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000b48:	e00c      	b.n	8000b64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f878 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8000b50:	4604      	mov	r4, r0
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f000 f856 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f896 	bl	8000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}

08000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f953 	bl	8000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
	{ }
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	if (__p)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f936 	bl	8000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f92c 	bl	8000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffec 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f000 f91b 	bl	8000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>
	}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1d1a      	adds	r2, r3, #4
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f930 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f805 	bl	8000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000c6e:	4603      	mov	r3, r0
      }
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000c80:	2301      	movs	r3, #1
      }
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8000e18 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f919 	bl	8000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8000ca6:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f956 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	f107 0214 	add.w	r2, r7, #20
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f95d 	bl	8000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f970 	bl	8000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8000cdc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000ce2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	189d      	adds	r5, r3, r2
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff85 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff ff8a 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000d0a:	f7ff ffaa 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d027      	beq.n	8000d64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f977 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff54 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4621      	mov	r1, r4
 8000d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d32:	f000 f957 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f962 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff3f 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 f942 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000d62:	e026      	b.n	8000db2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f94f 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff2c 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d7a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4621      	mov	r1, r4
 8000d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d82:	f000 f94e 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000d86:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	3318      	adds	r3, #24
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff17 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000da4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	4620      	mov	r0, r4
 8000dac:	f000 f939 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000db0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000db2:	f7ff ff56 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff04 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6a39      	ldr	r1, [r7, #32]
 8000dd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dd2:	f7ff ff09 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000dd6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	10db      	asrs	r3, r3, #3
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000de8:	461a      	mov	r2, r3
 8000dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dec:	f7ff fede 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dfa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	461a      	mov	r2, r3
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	609a      	str	r2, [r3, #8]
    }
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	@ 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	08014c98 	.word	0x08014c98
 8000e1c:	aaaaaaab 	.word	0xaaaaaaab

08000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f911 	bl	800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f917 	bl	8001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000e6e:	b5b0      	push	{r4, r5, r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2018      	movs	r0, #24
 8000e80:	f7ff fb8e 	bl	80005a0 <_ZnwjPv>
 8000e84:	4604      	mov	r4, r0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff febc 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f012 fd89 	bl	80139aa <_ZNSaIcEC1Ev>
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f012 ff15 	bl	8013cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f012 fd7e 	bl	80139ac <_ZNSaIcED1Ev>
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}

08000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f8ee 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000eea:	4604      	mov	r4, r0
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8fb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	1ae2      	subs	r2, r4, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	bf34      	ite	cc
 8000efc:	2301      	movcc	r3, #1
 8000efe:	2300      	movcs	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f012 fd5a 	bl	80139c0 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f8eb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f12:	4604      	mov	r4, r0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f8e7 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f8f3 	bl	8001114 <_ZSt3maxIjERKT_S2_S2_>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4423      	add	r3, r4
 8000f34:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f000 f8d6 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d306      	bcc.n	8000f52 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f8be 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d904      	bls.n	8000f5c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f8b7 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	e000      	b.n	8000f5e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8000f5c:	697b      	ldr	r3, [r7, #20]
      }
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff9e 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f83a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f000 f835 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1ae3      	subs	r3, r4, r3
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	aaaaaaab 	.word	0xaaaaaaab

08000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f8b3 	bl	800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e000      	b.n	8000fdc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8000fda:	2300      	movs	r3, #0
      }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000ff2:	f88d 4000 	strb.w	r4, [sp]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 f8ac 	bl	800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 8001002:	4603      	mov	r3, r0
      }
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f8a4 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8001036:	4604      	mov	r4, r0
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f8a0 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800103e:	4601      	mov	r1, r0
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4620      	mov	r0, r4
 8001046:	f000 f8a9 	bl	800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800104a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f8ac 	bl	80011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>
	}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4619      	mov	r1, r3
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f012 fc7c 	bl	8013984 <_ZdlPvj>
      }
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800109e:	e009      	b.n	80010b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f898 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f89f 	bl	80011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3318      	adds	r3, #24
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1f1      	bne.n	80010a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f8b3 	bl	800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f893 	bl	8001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	10db      	asrs	r3, r3, #3
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	aaaaaaab 	.word	0xaaaaaaab

08001114 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d201      	bcs.n	800112e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	e000      	b.n	8001130 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800112e:	687b      	ldr	r3, [r7, #4]
    }
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001146:	2200      	movs	r2, #0
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f882 	bl	8001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f89e 	bl	80012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001174:	4603      	mov	r3, r0
      }
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f8ac 	bl	80012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f8ad 	bl	800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 80011b4:	4603      	mov	r3, r0
    }
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f012 fc88 	bl	8013ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f012 fc72 	bl	8013ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 800120e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f890 	bl	8001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8001216:	4603      	mov	r3, r0
 8001218:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f892 	bl	800134e <_ZSt3minIjERKT_S2_S2_>
 800122a:	4603      	mov	r3, r0
 800122c:	681b      	ldr	r3, [r3, #0]
      }
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	05555555 	.word	0x05555555

0800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f889 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001266:	4602      	mov	r2, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4293      	cmp	r3, r2
 800126c:	bf8c      	ite	hi
 800126e:	2301      	movhi	r3, #1
 8001270:	2300      	movls	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x58>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800128a:	f012 fb93 	bl	80139b4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800128e:	f012 fb8e 	bl	80139ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	f012 fb73 	bl	8013988 <_Znwj>
 80012a2:	4603      	mov	r3, r0
      }
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0aaaaaaa 	.word	0x0aaaaaaa

080012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f868 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012c4:	4604      	mov	r4, r0
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f000 f864 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f860 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012d4:	4602      	mov	r2, r0
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 f865 	bl	80013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80012e0:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}

080012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80012f4:	463b      	mov	r3, r7
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f87d 	bl	80013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 80012fc:	4603      	mov	r3, r0
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800131e:	2300      	movs	r3, #0
 8001320:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f870 	bl	800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800132c:	4603      	mov	r3, r0
    }
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f874 	bl	800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001344:	4603      	mov	r3, r0
      }
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	e000      	b.n	800136a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001368:	687b      	ldr	r3, [r7, #4]
    }
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	05555555 	.word	0x05555555

08001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80013aa:	b590      	push	{r4, r7, lr}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80013bc:	e012      	b.n	80013e4 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff09 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013c4:	4604      	mov	r4, r0
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff ff05 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013cc:	4603      	mov	r3, r0
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4620      	mov	r0, r4
 80013d4:	f000 f836 	bl	8001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3318      	adds	r3, #24
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3318      	adds	r3, #24
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1e8      	bne.n	80013be <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x14>
      return __cur;
 80013ec:	697b      	ldr	r3, [r7, #20]
    }
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f82c 	bl	800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff9f 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 f841 	bl	80014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f846 	bl	80014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff feb7 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fdf1 	bl	8001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800148a:	e015      	b.n	80014b8 <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff fea2 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001492:	4604      	mov	r4, r0
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f85d 	bl	8001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 f864 	bl	8001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f842 	bl	8001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3318      	adds	r3, #24
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f826 	bl	8001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1de      	bne.n	800148c <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x12>
	  return __cur;
 80014ce:	697b      	ldr	r3, [r7, #20]
    }
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f84f 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f854 	bl	80015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>
	}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f85f 	bl	80015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8001526:	4603      	mov	r3, r0
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f103 0218 	add.w	r2, r3, #24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
	return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
      }
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4619      	mov	r1, r3
 800157e:	2018      	movs	r0, #24
 8001580:	f7ff f80e 	bl	80005a0 <_ZnwjPv>
 8001584:	4604      	mov	r4, r0
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f000 f809 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f012 fa85 	bl	8013aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4619      	mov	r1, r3
 80015c4:	2018      	movs	r0, #24
 80015c6:	f7fe ffeb 	bl	80005a0 <_ZnwjPv>
 80015ca:	4604      	mov	r4, r0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe6 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4620      	mov	r0, r4
 80015d8:	f012 fa62 	bl	8013aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f80e 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015f4:	4604      	mov	r4, r0
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f000 f80a 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	429c      	cmp	r4, r3
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}

08001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f918 	bl	8001866 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZN3VMB13testFat32FileEv>:
#include "tests.hpp"

namespace VMB
{
    bool testFat32File()
    {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8001646:	af00      	add	r7, sp, #0
        FAT32File file;
 8001648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fff1 	bl	8000634 <_ZN3VMB9FAT32FileC1Ev>

        // Open a file for writing
        if (file.open("test.txt", FA_WRITE | FA_CREATE_ALWAYS)) {
 8001652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001656:	220a      	movs	r2, #10
 8001658:	4965      	ldr	r1, [pc, #404]	@ (80017f0 <_ZN3VMB13testFat32FileEv+0x1b0>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f8ac 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <_ZN3VMB13testFat32FileEv+0x4e>
            printf("File opened for writing\n\r");
 8001666:	4863      	ldr	r0, [pc, #396]	@ (80017f4 <_ZN3VMB13testFat32FileEv+0x1b4>)
 8001668:	f012 fcdc 	bl	8014024 <iprintf>
            file.write("Hello, FATFS!");
 800166c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001670:	4961      	ldr	r1, [pc, #388]	@ (80017f8 <_ZN3VMB13testFat32FileEv+0x1b8>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f907 	bl	8000886 <_ZN3VMB9FAT32File5writeEPKc>
            file.flush();
 8001678:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff f985 	bl	800098c <_ZN3VMB9FAT32File5flushEv>
            file.close();
 8001682:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f8cf 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
 800168c:	e002      	b.n	8001694 <_ZN3VMB13testFat32FileEv+0x54>
        }
        else {
            printf("Failed to open file for writing\n\r");
 800168e:	485b      	ldr	r0, [pc, #364]	@ (80017fc <_ZN3VMB13testFat32FileEv+0x1bc>)
 8001690:	f012 fcc8 	bl	8014024 <iprintf>
        }

        // Open the same file for reading
        if (file.open("test.txt", FA_READ)) {
 8001694:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001698:	2201      	movs	r2, #1
 800169a:	4955      	ldr	r1, [pc, #340]	@ (80017f0 <_ZN3VMB13testFat32FileEv+0x1b0>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff f88b 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d025      	beq.n	80016f4 <_ZN3VMB13testFat32FileEv+0xb4>
            char buffer[20] = { 0 };
 80016a8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80016ac:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
            file.read(buffer, sizeof(buffer) - 1);
 80016c0:	f107 0108 	add.w	r1, r7, #8
 80016c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c8:	2213      	movs	r2, #19
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f900 	bl	80008d0 <_ZN3VMB9FAT32File4readEPcj>
            printf("Read from file: %s\n\r", buffer);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	484a      	ldr	r0, [pc, #296]	@ (8001800 <_ZN3VMB13testFat32FileEv+0x1c0>)
 80016d8:	f012 fca4 	bl	8014024 <iprintf>
            file.close();
 80016dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f8a2 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
            printf("Failed to open file for reading\n\r");
            return false;
        }

        // Check if file exists
        if (FAT32File::exists("test.txt")) {
 80016e6:	4842      	ldr	r0, [pc, #264]	@ (80017f0 <_ZN3VMB13testFat32FileEv+0x1b0>)
 80016e8:	f7ff f998 	bl	8000a1c <_ZN3VMB9FAT32File6existsEPKc>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d010      	beq.n	8001714 <_ZN3VMB13testFat32FileEv+0xd4>
 80016f2:	e004      	b.n	80016fe <_ZN3VMB13testFat32FileEv+0xbe>
            printf("Failed to open file for reading\n\r");
 80016f4:	4843      	ldr	r0, [pc, #268]	@ (8001804 <_ZN3VMB13testFat32FileEv+0x1c4>)
 80016f6:	f012 fc95 	bl	8014024 <iprintf>
            return false;
 80016fa:	2400      	movs	r4, #0
 80016fc:	e06c      	b.n	80017d8 <_ZN3VMB13testFat32FileEv+0x198>
            printf("File exists!\n\r");
 80016fe:	4842      	ldr	r0, [pc, #264]	@ (8001808 <_ZN3VMB13testFat32FileEv+0x1c8>)
 8001700:	f012 fc90 	bl	8014024 <iprintf>
            printf("File does not exist\n\r");
            return false;
        }

        // Rename the file
        if (FAT32File::rename("test.txt", "renamed.txt")) {
 8001704:	4941      	ldr	r1, [pc, #260]	@ (800180c <_ZN3VMB13testFat32FileEv+0x1cc>)
 8001706:	483a      	ldr	r0, [pc, #232]	@ (80017f0 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001708:	f7ff f975 	bl	80009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00f      	beq.n	8001732 <_ZN3VMB13testFat32FileEv+0xf2>
 8001712:	e004      	b.n	800171e <_ZN3VMB13testFat32FileEv+0xde>
            printf("File does not exist\n\r");
 8001714:	483e      	ldr	r0, [pc, #248]	@ (8001810 <_ZN3VMB13testFat32FileEv+0x1d0>)
 8001716:	f012 fc85 	bl	8014024 <iprintf>
            return false;
 800171a:	2400      	movs	r4, #0
 800171c:	e05c      	b.n	80017d8 <_ZN3VMB13testFat32FileEv+0x198>
            printf("File renamed successfully\n\r");
 800171e:	483d      	ldr	r0, [pc, #244]	@ (8001814 <_ZN3VMB13testFat32FileEv+0x1d4>)
 8001720:	f012 fc80 	bl	8014024 <iprintf>
            printf("Failed to rename file\n\r");
            return false;
        }

        // Delete the file
        if (FAT32File::remove("renamed.txt")) {
 8001724:	4839      	ldr	r0, [pc, #228]	@ (800180c <_ZN3VMB13testFat32FileEv+0x1cc>)
 8001726:	f7ff f955 	bl	80009d4 <_ZN3VMB9FAT32File6removeEPKc>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02c      	beq.n	800178a <_ZN3VMB13testFat32FileEv+0x14a>
 8001730:	e004      	b.n	800173c <_ZN3VMB13testFat32FileEv+0xfc>
            printf("Failed to rename file\n\r");
 8001732:	4839      	ldr	r0, [pc, #228]	@ (8001818 <_ZN3VMB13testFat32FileEv+0x1d8>)
 8001734:	f012 fc76 	bl	8014024 <iprintf>
            return false;
 8001738:	2400      	movs	r4, #0
 800173a:	e04d      	b.n	80017d8 <_ZN3VMB13testFat32FileEv+0x198>
            printf("File deleted successfully\n\r");
 800173c:	4837      	ldr	r0, [pc, #220]	@ (800181c <_ZN3VMB13testFat32FileEv+0x1dc>)
 800173e:	f012 fc71 	bl	8014024 <iprintf>
            printf("Failed to delete file\n\r");
            return false;
        }

        // List files in root directory
        printf("Listing root directory:\n\r");
 8001742:	4837      	ldr	r0, [pc, #220]	@ (8001820 <_ZN3VMB13testFat32FileEv+0x1e0>)
 8001744:	f012 fc6e 	bl	8014024 <iprintf>
        std::vector<std::string> files = FAT32File::listDirectory("/");
 8001748:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800174c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001750:	4934      	ldr	r1, [pc, #208]	@ (8001824 <_ZN3VMB13testFat32FileEv+0x1e4>)
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f990 	bl	8000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>
        for (const auto& name : files) {
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8001760:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001764:	f7ff fbff 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001768:	4602      	mov	r2, r0
 800176a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800176e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001778:	f7ff fa62 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800177c:	4602      	mov	r2, r0
 800177e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001782:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e017      	b.n	80017ba <_ZN3VMB13testFat32FileEv+0x17a>
            printf("Failed to delete file\n\r");
 800178a:	4827      	ldr	r0, [pc, #156]	@ (8001828 <_ZN3VMB13testFat32FileEv+0x1e8>)
 800178c:	f012 fc4a 	bl	8014024 <iprintf>
            return false;
 8001790:	2400      	movs	r4, #0
 8001792:	e021      	b.n	80017d8 <_ZN3VMB13testFat32FileEv+0x198>
        for (const auto& name : files) {
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f8b9 	bl	800190e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 800179c:	f8c7 0280 	str.w	r0, [r7, #640]	@ 0x280
            printf(" - %s\n\r", name.c_str());
 80017a0:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 80017a4:	f012 fa77 	bl	8013c96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4619      	mov	r1, r3
 80017ac:	481f      	ldr	r0, [pc, #124]	@ (800182c <_ZN3VMB13testFat32FileEv+0x1ec>)
 80017ae:	f012 fc39 	bl	8014024 <iprintf>
        for (const auto& name : files) {
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f899 	bl	80018ec <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 80017ba:	463a      	mov	r2, r7
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f87b 	bl	80018bc <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e3      	bne.n	8001794 <_ZN3VMB13testFat32FileEv+0x154>
        }
        return true;
 80017cc:	2401      	movs	r4, #1
    }
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f82c 	bl	8001830 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80017d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff85 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 80017e2:	4623      	mov	r3, r4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f507 7723 	add.w	r7, r7, #652	@ 0x28c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08014cb4 	.word	0x08014cb4
 80017f4:	08014cc0 	.word	0x08014cc0
 80017f8:	08014cdc 	.word	0x08014cdc
 80017fc:	08014cec 	.word	0x08014cec
 8001800:	08014d10 	.word	0x08014d10
 8001804:	08014d28 	.word	0x08014d28
 8001808:	08014d4c 	.word	0x08014d4c
 800180c:	08014d74 	.word	0x08014d74
 8001810:	08014d5c 	.word	0x08014d5c
 8001814:	08014d80 	.word	0x08014d80
 8001818:	08014d9c 	.word	0x08014d9c
 800181c:	08014db4 	.word	0x08014db4
 8001820:	08014de8 	.word	0x08014de8
 8001824:	08014e04 	.word	0x08014e04
 8001828:	08014dd0 	.word	0x08014dd0
 800182c:	08014e08 	.word	0x08014e08

08001830 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681c      	ldr	r4, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f9c5 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001848:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800184a:	461a      	mov	r2, r3
 800184c:	4629      	mov	r1, r5
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff f9ca 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f812 	bl	8001880 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}

08001866 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f859 	bl	8001926 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	10db      	asrs	r3, r3, #3
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 800189a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800189e:	461a      	mov	r2, r3
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff f983 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff febd 	bl	8001628 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	aaaaaaab 	.word	0xaaaaaaab

080018bc <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fba0 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	6838      	ldr	r0, [r7, #0]
 80018d2:	f7ff fb9b 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80018d6:	4603      	mov	r3, r0
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429c      	cmp	r4, r3
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f103 0218 	add.w	r2, r3, #24
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	601a      	str	r2, [r3, #0]
	return *this;
 8001900:	687b      	ldr	r3, [r7, #4]
      }
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_Z9execTestsv>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "tests.hpp"

bool execTests()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	bool success = true;
 8001942:	2301      	movs	r3, #1
 8001944:	71fb      	strb	r3, [r7, #7]
	success &= VMB::testFat32File();
 8001946:	f7ff fe7b 	bl	8001640 <_ZN3VMB13testFat32FileEv>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	71fb      	strb	r3, [r7, #7]
	return success;
 800195c:	79fb      	ldrb	r3, [r7, #7]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <setup>:

void setup()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	if (!execTests())
 800196c:	f7ff ffe6 	bl	800193c <_Z9execTestsv>
 8001970:	4603      	mov	r3, r0
 8001972:	f083 0301 	eor.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <setup+0x24>
	{
		printf("Tests failed\n\r");
 800197c:	4806      	ldr	r0, [pc, #24]	@ (8001998 <setup+0x30>)
 800197e:	f012 fb51 	bl	8014024 <iprintf>
		while (1) 
		{
			HAL_Delay(1000);
 8001982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001986:	f001 fd41 	bl	800340c <HAL_Delay>
 800198a:	e7fa      	b.n	8001982 <setup+0x1a>
		}
	}
	else
	{
		printf("Tests passed\n\r");
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <setup+0x34>)
 800198e:	f012 fb49 	bl	8014024 <iprintf>
	}
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	08014e10 	.word	0x08014e10
 800199c:	08014e20 	.word	0x08014e20

080019a0 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Redirect stdout to UART
int _write(int file, char *ptr, int len) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <_write+0x28>)
 80019b8:	f009 fa6e 	bl	800ae98 <HAL_UART_Transmit>
    return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200006ec 	.word	0x200006ec

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d0:	f001 fcda 	bl	8003388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d4:	f000 f82a 	bl	8001a2c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019d8:	f000 f89a 	bl	8001b10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019dc:	f000 fcaa 	bl	8002334 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e0:	f000 fc30 	bl	8002244 <MX_DMA_Init>
  MX_CRC_Init();
 80019e4:	f000 f8c0 	bl	8001b68 <MX_CRC_Init>
  MX_DMA2D_Init();
 80019e8:	f000 f8d2 	bl	8001b90 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80019ec:	f000 f902 	bl	8001bf4 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80019f0:	f000 fc50 	bl	8002294 <MX_FMC_Init>
  MX_I2C1_Init();
 80019f4:	f000 f9fe 	bl	8001df4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80019f8:	f000 fa2a 	bl	8001e50 <MX_I2C2_Init>
  MX_LTDC_Init();
 80019fc:	f000 fa56 	bl	8001eac <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001a00:	f000 fad2 	bl	8001fa8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001a04:	f000 fafc 	bl	8002000 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001a08:	f000 fb58 	bl	80020bc <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001a0c:	f000 fb76 	bl	80020fc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001a10:	f000 fbc4 	bl	800219c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001a14:	f000 fbec 	bl	80021f0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001a18:	f00c f94a 	bl	800dcb0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001a1c:	f011 fca8 	bl	8013370 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001a20:	f7ff ffa2 	bl	8001968 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001a24:	f011 fcca 	bl	80133bc <MX_USB_HOST_Process>
 8001a28:	e7fc      	b.n	8001a24 <main+0x58>
	...

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	@ 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2234      	movs	r2, #52	@ 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f012 fb61 	bl	8014102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <SystemClock_Config+0xdc>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a2b      	ldr	r2, [pc, #172]	@ (8001b08 <SystemClock_Config+0xdc>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <SystemClock_Config+0xdc>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <SystemClock_Config+0xe0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a25      	ldr	r2, [pc, #148]	@ (8001b0c <SystemClock_Config+0xe0>)
 8001a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <SystemClock_Config+0xe0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a92:	2302      	movs	r3, #2
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001aa0:	23b4      	movs	r3, #180	@ 0xb4
 8001aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001aac:	2306      	movs	r3, #6
 8001aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 ff2d 	bl	8008914 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac0:	f000 fdd6 	bl	8002670 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ac4:	f006 f984 	bl	8007dd0 <HAL_PWREx_EnableOverDrive>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ace:	f000 fdcf 	bl	8002670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	230f      	movs	r3, #15
 8001ad4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ade:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2105      	movs	r1, #5
 8001af0:	4618      	mov	r0, r3
 8001af2:	f006 fa7f 	bl	8007ff4 <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001afc:	f000 fdb8 	bl	8002670 <Error_Handler>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3750      	adds	r7, #80	@ 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b090      	sub	sp, #64	@ 0x40
 8001b14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	223c      	movs	r2, #60	@ 0x3c
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f012 faf0 	bl	8014102 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8001b22:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8001b26:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8001b28:	2390      	movs	r3, #144	@ 0x90
 8001b2a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8001b34:	2306      	movs	r3, #6
 8001b36:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001b42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f006 fca2 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001b5a:	f000 fd89 	bl	8002670 <Error_Handler>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3740      	adds	r7, #64	@ 0x40
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <MX_CRC_Init+0x20>)
 8001b6e:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <MX_CRC_Init+0x24>)
 8001b70:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <MX_CRC_Init+0x20>)
 8001b74:	f001 fd50 	bl	8003618 <HAL_CRC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001b7e:	f000 fd77 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002d8 	.word	0x200002d8
 8001b8c:	40023000 	.word	0x40023000

08001b90 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001b96:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <MX_DMA2D_Init+0x60>)
 8001b98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001bc4:	4809      	ldr	r0, [pc, #36]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001bc6:	f002 f951 	bl	8003e6c <HAL_DMA2D_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001bd0:	f000 fd4e 	bl	8002670 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_DMA2D_Init+0x5c>)
 8001bd8:	f002 faa2 	bl	8004120 <HAL_DMA2D_ConfigLayer>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001be2:	f000 fd45 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200002e0 	.word	0x200002e0
 8001bf0:	4002b000 	.word	0x4002b000

08001bf4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0aa      	sub	sp, #168	@ 0xa8
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001bfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001c06:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f012 fa77 	bl	8014102 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001c14:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c2a:	2234      	movs	r2, #52	@ 0x34
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f012 fa67 	bl	8014102 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	222c      	movs	r2, #44	@ 0x2c
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f012 fa61 	bl	8014102 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001c40:	4b6a      	ldr	r3, [pc, #424]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c42:	4a6b      	ldr	r2, [pc, #428]	@ (8001df0 <MX_DSIHOST_DSI_Init+0x1fc>)
 8001c44:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001c46:	4b69      	ldr	r3, [pc, #420]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001c4c:	4b67      	ldr	r3, [pc, #412]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001c52:	4b66      	ldr	r3, [pc, #408]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001c58:	237d      	movs	r3, #125	@ 0x7d
 8001c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001c6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	485e      	ldr	r0, [pc, #376]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001c72:	f002 fae7 	bl	8004244 <HAL_DSI_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8001c7c:	f000 fcf8 	bl	8002670 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001cb2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	484c      	ldr	r0, [pc, #304]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001cba:	f002 ffd7 	bl	8004c6c <HAL_DSI_ConfigHostTimeouts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8001cc4:	f000 fcd4 	bl	8002670 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001cc8:	231c      	movs	r3, #28
 8001cca:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001ccc:	2321      	movs	r3, #33	@ 0x21
 8001cce:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8001cdc:	230a      	movs	r3, #10
 8001cde:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001ce0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4841      	ldr	r0, [pc, #260]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001ce8:	f002 ff56 	bl	8004b98 <HAL_DSI_ConfigPhyTimer>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8001cf2:	f000 fcbd 	bl	8002670 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	483c      	ldr	r0, [pc, #240]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001cfa:	f002 ff25 	bl	8004b48 <HAL_DSI_ConfigFlowControl>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8001d04:	f000 fcb4 	bl	8002670 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001d08:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001d0c:	4837      	ldr	r0, [pc, #220]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001d0e:	f003 f873 	bl	8004df8 <HAL_DSI_SetLowPowerRXFilter>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001d18:	f000 fcaa 	bl	8002670 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4833      	ldr	r0, [pc, #204]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001d20:	f002 fc10 	bl	8004544 <HAL_DSI_ConfigErrorMonitor>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001d2a:	f000 fca1 	bl	8002670 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8001d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8001d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8001d46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d50:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8001d52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d56:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8001d5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001d64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d68:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8001d6a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001d6e:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8001d70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d74:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	481a      	ldr	r0, [pc, #104]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001d82:	f002 fe83 	bl	8004a8c <HAL_DSI_ConfigCommand>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8001d8c:	f000 fc70 	bl	8002670 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8001d94:	2305      	movs	r3, #5
 8001d96:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001d98:	23c8      	movs	r3, #200	@ 0xc8
 8001d9a:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001da4:	2304      	movs	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001db4:	2340      	movs	r3, #64	@ 0x40
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480a      	ldr	r0, [pc, #40]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001dc2:	f002 fd8b 	bl	80048dc <HAL_DSI_ConfigAdaptedCommandMode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8001dcc:	f000 fc50 	bl	8002670 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001dd4:	f002 fd5a 	bl	800488c <HAL_DSI_SetGenericVCID>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8001dde:	f000 fc47 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	37a8      	adds	r7, #168	@ 0xa8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000320 	.word	0x20000320
 8001df0:	40016c00 	.word	0x40016c00

08001df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001dfa:	4a13      	ldr	r2, [pc, #76]	@ (8001e48 <MX_I2C1_Init+0x54>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e00:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <MX_I2C1_Init+0x58>)
 8001e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e30:	4804      	ldr	r0, [pc, #16]	@ (8001e44 <MX_I2C1_Init+0x50>)
 8001e32:	f005 fb21 	bl	8007478 <HAL_I2C_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e3c:	f000 fc18 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000033c 	.word	0x2000033c
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	000186a0 	.word	0x000186a0

08001e50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e56:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <MX_I2C2_Init+0x54>)
 8001e58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <MX_I2C2_Init+0x58>)
 8001e5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	@ (8001ea0 <MX_I2C2_Init+0x50>)
 8001e8e:	f005 faf3 	bl	8007478 <HAL_I2C_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e98:	f000 fbea 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000390 	.word	0x20000390
 8001ea4:	40005800 	.word	0x40005800
 8001ea8:	000186a0 	.word	0x000186a0

08001eac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	@ 0x38
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2234      	movs	r2, #52	@ 0x34
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f012 f922 	bl	8014102 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ec0:	4a38      	ldr	r2, [pc, #224]	@ (8001fa4 <MX_LTDC_Init+0xf8>)
 8001ec2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ec4:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001eca:	4b35      	ldr	r3, [pc, #212]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ed0:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ed6:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001edc:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8001eee:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001ef6:	22c9      	movs	r2, #201	@ 0xc9
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001efa:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001efc:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8001f02:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f04:	22ca      	movs	r2, #202	@ 0xca
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f0a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f28:	481d      	ldr	r0, [pc, #116]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f2a:	f005 fbe9 	bl	8007700 <HAL_LTDC_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f000 fb9c 	bl	8002670 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001f3c:	23c8      	movs	r3, #200	@ 0xc8
 8001f3e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001f44:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f48:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001f4e:	23ff      	movs	r3, #255	@ 0xff
 8001f50:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f5a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001f60:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8001f66:	23c8      	movs	r3, #200	@ 0xc8
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001f6a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_LTDC_Init+0xf4>)
 8001f8a:	f005 fd4b 	bl	8007a24 <HAL_LTDC_ConfigLayer>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001f94:	f000 fb6c 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3738      	adds	r7, #56	@ 0x38
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200003e4 	.word	0x200003e4
 8001fa4:	40016800 	.word	0x40016800

08001fa8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fae:	4a13      	ldr	r2, [pc, #76]	@ (8001ffc <MX_QUADSPI_Init+0x54>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fc6:	2218      	movs	r2, #24
 8001fc8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <MX_QUADSPI_Init+0x50>)
 8001fe6:	f005 ff43 	bl	8007e70 <HAL_QSPI_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001ff0:	f000 fb3e 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000048c 	.word	0x2000048c
 8001ffc:	a0001000 	.word	0xa0001000

08002000 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002004:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002006:	4a2b      	ldr	r2, [pc, #172]	@ (80020b4 <MX_SAI1_Init+0xb4>)
 8002008:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800200a:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800200c:	2200      	movs	r2, #0
 800200e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002010:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002016:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002018:	2240      	movs	r2, #64	@ 0x40
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800201e:	2200      	movs	r2, #0
 8002020:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002022:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002024:	2200      	movs	r2, #0
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002028:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800203a:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002048:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <MX_SAI1_Init+0xb8>)
 800204a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800204c:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002052:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002054:	2200      	movs	r2, #0
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002058:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800205a:	2200      	movs	r2, #0
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002066:	2208      	movs	r2, #8
 8002068:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800206c:	2201      	movs	r2, #1
 800206e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002072:	2200      	movs	r2, #0
 8002074:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002078:	2200      	movs	r2, #0
 800207a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800207e:	2200      	movs	r2, #0
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002084:	2200      	movs	r2, #0
 8002086:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800208a:	2200      	movs	r2, #0
 800208c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002090:	2201      	movs	r2, #1
 8002092:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 8002096:	2200      	movs	r2, #0
 8002098:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <MX_SAI1_Init+0xb0>)
 800209c:	f006 febe 	bl	8008e1c <HAL_SAI_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80020a6:	f000 fae3 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200004d8 	.word	0x200004d8
 80020b4:	40015804 	.word	0x40015804
 80020b8:	0002ee00 	.word	0x0002ee00

080020bc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020c2:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <MX_SDIO_SD_Init+0x3c>)
 80020c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <MX_SDIO_SD_Init+0x38>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000560 	.word	0x20000560
 80020f8:	40012c00 	.word	0x40012c00

080020fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002118:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <MX_TIM1_Init+0x98>)
 800211a:	4a1f      	ldr	r2, [pc, #124]	@ (8002198 <MX_TIM1_Init+0x9c>)
 800211c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <MX_TIM1_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <MX_TIM1_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_TIM1_Init+0x98>)
 800212c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_TIM1_Init+0x98>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_TIM1_Init+0x98>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_TIM1_Init+0x98>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002144:	4813      	ldr	r0, [pc, #76]	@ (8002194 <MX_TIM1_Init+0x98>)
 8002146:	f008 f9e1 	bl	800a50c <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002150:	f000 fa8e 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	4619      	mov	r1, r3
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <MX_TIM1_Init+0x98>)
 8002162:	f008 fb83 	bl	800a86c <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800216c:	f000 fa80 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002178:	463b      	mov	r3, r7
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_TIM1_Init+0x98>)
 800217e:	f008 fdab 	bl	800acd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002188:	f000 fa72 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200006a4 	.word	0x200006a4
 8002198:	40010000 	.word	0x40010000

0800219c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <MX_USART3_UART_Init+0x50>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <MX_USART3_UART_Init+0x4c>)
 80021d4:	f008 fe10 	bl	800adf8 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021de:	f000 fa47 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200006ec 	.word	0x200006ec
 80021ec:	40004800 	.word	0x40004800

080021f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <MX_USART6_UART_Init+0x50>)
 80021f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 80021fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002200:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 8002216:	220c      	movs	r2, #12
 8002218:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <MX_USART6_UART_Init+0x4c>)
 8002228:	f008 fde6 	bl	800adf8 <HAL_UART_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002232:	f000 fa1d 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000734 	.word	0x20000734
 8002240:	40011400 	.word	0x40011400

08002244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <MX_DMA_Init+0x4c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <MX_DMA_Init+0x4c>)
 8002254:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <MX_DMA_Init+0x4c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	203b      	movs	r0, #59	@ 0x3b
 800226c:	f001 f9aa 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002270:	203b      	movs	r0, #59	@ 0x3b
 8002272:	f001 f9c3 	bl	80035fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2045      	movs	r0, #69	@ 0x45
 800227c:	f001 f9a2 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002280:	2045      	movs	r0, #69	@ 0x45
 8002282:	f001 f9bb 	bl	80035fc <HAL_NVIC_EnableIRQ>

}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
 80022a8:	615a      	str	r2, [r3, #20]
 80022aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <MX_FMC_Init+0x98>)
 80022ae:	4a20      	ldr	r2, [pc, #128]	@ (8002330 <MX_FMC_Init+0x9c>)
 80022b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <MX_FMC_Init+0x98>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <MX_FMC_Init+0x98>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <MX_FMC_Init+0x98>)
 80022c0:	2204      	movs	r2, #4
 80022c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <MX_FMC_Init+0x98>)
 80022c6:	2220      	movs	r2, #32
 80022c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <MX_FMC_Init+0x98>)
 80022cc:	2240      	movs	r2, #64	@ 0x40
 80022ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <MX_FMC_Init+0x98>)
 80022d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <MX_FMC_Init+0x98>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <MX_FMC_Init+0x98>)
 80022e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <MX_FMC_Init+0x98>)
 80022e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80022ee:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <MX_FMC_Init+0x98>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80022f8:	2307      	movs	r3, #7
 80022fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80022fc:	2304      	movs	r3, #4
 80022fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002300:	2307      	movs	r3, #7
 8002302:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002304:	2303      	movs	r3, #3
 8002306:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800230c:	2302      	movs	r3, #2
 800230e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <MX_FMC_Init+0x98>)
 8002316:	f008 f8c5 	bl	800a4a4 <HAL_SDRAM_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002320:	f000 f9a6 	bl	8002670 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000077c 	.word	0x2000077c
 8002330:	a0000140 	.word	0xa0000140

08002334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b090      	sub	sp, #64	@ 0x40
 8002338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800234e:	4bae      	ldr	r3, [pc, #696]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4aad      	ldr	r2, [pc, #692]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002354:	f043 0310 	orr.w	r3, r3, #16
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4bab      	ldr	r3, [pc, #684]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
 800236a:	4ba7      	ldr	r3, [pc, #668]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4aa6      	ldr	r2, [pc, #664]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4ba4      	ldr	r3, [pc, #656]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	4ba0      	ldr	r3, [pc, #640]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a9f      	ldr	r2, [pc, #636]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b9d      	ldr	r3, [pc, #628]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	623b      	str	r3, [r7, #32]
 800239c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	4b99      	ldr	r3, [pc, #612]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a98      	ldr	r2, [pc, #608]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b96      	ldr	r3, [pc, #600]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	4b92      	ldr	r3, [pc, #584]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a91      	ldr	r2, [pc, #580]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ca:	4b8f      	ldr	r3, [pc, #572]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	4b8b      	ldr	r3, [pc, #556]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a8a      	ldr	r2, [pc, #552]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b88      	ldr	r3, [pc, #544]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b84      	ldr	r3, [pc, #528]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a83      	ldr	r2, [pc, #524]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b81      	ldr	r3, [pc, #516]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b7d      	ldr	r3, [pc, #500]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a7c      	ldr	r2, [pc, #496]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002418:	f043 0320 	orr.w	r3, r3, #32
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b7a      	ldr	r3, [pc, #488]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a75      	ldr	r2, [pc, #468]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002434:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b73      	ldr	r3, [pc, #460]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4b6f      	ldr	r3, [pc, #444]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a6e      	ldr	r2, [pc, #440]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a67      	ldr	r2, [pc, #412]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 800246c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b65      	ldr	r3, [pc, #404]	@ (8002608 <MX_GPIO_Init+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	210c      	movs	r1, #12
 8002482:	4862      	ldr	r0, [pc, #392]	@ (800260c <MX_GPIO_Init+0x2d8>)
 8002484:	f002 feaa 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2130      	movs	r1, #48	@ 0x30
 800248c:	4860      	ldr	r0, [pc, #384]	@ (8002610 <MX_GPIO_Init+0x2dc>)
 800248e:	f002 fea5 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2108      	movs	r1, #8
 8002496:	485f      	ldr	r0, [pc, #380]	@ (8002614 <MX_GPIO_Init+0x2e0>)
 8002498:	f002 fea0 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2140      	movs	r1, #64	@ 0x40
 80024a0:	485d      	ldr	r0, [pc, #372]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80024a2:	f002 fe9b 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2105      	movs	r1, #5
 80024aa:	485c      	ldr	r0, [pc, #368]	@ (800261c <MX_GPIO_Init+0x2e8>)
 80024ac:	f002 fe96 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	@ 0x80
 80024b4:	485a      	ldr	r0, [pc, #360]	@ (8002620 <MX_GPIO_Init+0x2ec>)
 80024b6:	f002 fe91 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2108      	movs	r1, #8
 80024be:	4859      	ldr	r0, [pc, #356]	@ (8002624 <MX_GPIO_Init+0x2f0>)
 80024c0:	f002 fe8c 	bl	80051dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80024c4:	230c      	movs	r3, #12
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d8:	4619      	mov	r1, r3
 80024da:	484c      	ldr	r0, [pc, #304]	@ (800260c <MX_GPIO_Init+0x2d8>)
 80024dc:	f002 fcba 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 80024e0:	2308      	movs	r3, #8
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024f0:	2306      	movs	r3, #6
 80024f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 80024f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f8:	4619      	mov	r1, r3
 80024fa:	4848      	ldr	r0, [pc, #288]	@ (800261c <MX_GPIO_Init+0x2e8>)
 80024fc:	f002 fcaa 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002504:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002508:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	4841      	ldr	r0, [pc, #260]	@ (800261c <MX_GPIO_Init+0x2e8>)
 8002516:	f002 fc9d 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800251a:	2330      	movs	r3, #48	@ 0x30
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800251e:	2311      	movs	r3, #17
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4837      	ldr	r0, [pc, #220]	@ (8002610 <MX_GPIO_Init+0x2dc>)
 8002532:	f002 fc8f 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002536:	2308      	movs	r3, #8
 8002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800253a:	2311      	movs	r3, #17
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4831      	ldr	r0, [pc, #196]	@ (8002614 <MX_GPIO_Init+0x2e0>)
 800254e:	f002 fc81 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002552:	2340      	movs	r3, #64	@ 0x40
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002556:	2311      	movs	r3, #17
 8002558:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	482b      	ldr	r0, [pc, #172]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 800256a:	f002 fc73 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800256e:	2305      	movs	r3, #5
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4825      	ldr	r0, [pc, #148]	@ (800261c <MX_GPIO_Init+0x2e8>)
 8002586:	f002 fc65 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800258a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800259c:	2302      	movs	r3, #2
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a4:	4619      	mov	r1, r3
 80025a6:	481a      	ldr	r0, [pc, #104]	@ (8002610 <MX_GPIO_Init+0x2dc>)
 80025a8:	f002 fc54 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80025ac:	2304      	movs	r3, #4
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025bc:	4619      	mov	r1, r3
 80025be:	4816      	ldr	r0, [pc, #88]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80025c0:	f002 fc48 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80025c4:	2320      	movs	r3, #32
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025d6:	4619      	mov	r1, r3
 80025d8:	4813      	ldr	r0, [pc, #76]	@ (8002628 <MX_GPIO_Init+0x2f4>)
 80025da:	f002 fc3b 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025f2:	4619      	mov	r1, r3
 80025f4:	480a      	ldr	r0, [pc, #40]	@ (8002620 <MX_GPIO_Init+0x2ec>)
 80025f6:	f002 fc2d 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80025fa:	2308      	movs	r3, #8
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	e012      	b.n	800262c <MX_GPIO_Init+0x2f8>
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40021000 	.word	0x40021000
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40022800 	.word	0x40022800
 8002618:	40021800 	.word	0x40021800
 800261c:	40020400 	.word	0x40020400
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40020000 	.word	0x40020000
 8002628:	40022400 	.word	0x40022400
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002636:	4619      	mov	r1, r3
 8002638:	4803      	ldr	r0, [pc, #12]	@ (8002648 <MX_GPIO_Init+0x314>)
 800263a:	f002 fc0b 	bl	8004e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800263e:	bf00      	nop
 8002640:	3740      	adds	r7, #64	@ 0x40
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40020000 	.word	0x40020000

0800264c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800265e:	f000 feb5 	bl	80033cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40001000 	.word	0x40001000

08002670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <Error_Handler+0x8>

0800267c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_MspInit+0x58>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <HAL_MspInit+0x58>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002690:	6453      	str	r3, [r2, #68]	@ 0x44
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <HAL_MspInit+0x58>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_MspInit+0x58>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	4a0b      	ldr	r2, [pc, #44]	@ (80026d4 <HAL_MspInit+0x58>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_MspInit+0x58>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2005      	movs	r0, #5
 80026c0:	f000 ff80 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80026c4:	2005      	movs	r0, #5
 80026c6:	f000 ff99 	bl	80035fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <HAL_CRC_MspInit+0x3c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10d      	bne.n	8002706 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_CRC_MspInit+0x40>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <HAL_CRC_MspInit+0x40>)
 80026f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_CRC_MspInit+0x40>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023000 	.word	0x40023000
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0e      	ldr	r2, [pc, #56]	@ (8002764 <HAL_DMA2D_MspInit+0x48>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d115      	bne.n	800275a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <HAL_DMA2D_MspInit+0x4c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <HAL_DMA2D_MspInit+0x4c>)
 8002738:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_DMA2D_MspInit+0x4c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	205a      	movs	r0, #90	@ 0x5a
 8002750:	f000 ff38 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002754:	205a      	movs	r0, #90	@ 0x5a
 8002756:	f000 ff51 	bl	80035fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	4002b000 	.word	0x4002b000
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	@ 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_DSI_MspInit+0x94>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d133      	bne.n	80027f6 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <HAL_DSI_MspInit+0x98>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	4a1b      	ldr	r2, [pc, #108]	@ (8002804 <HAL_DSI_MspInit+0x98>)
 8002798:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800279c:	6453      	str	r3, [r2, #68]	@ 0x44
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_DSI_MspInit+0x98>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <HAL_DSI_MspInit+0x98>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_DSI_MspInit+0x98>)
 80027b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_DSI_MspInit+0x98>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80027c6:	2304      	movs	r3, #4
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80027d6:	230d      	movs	r3, #13
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4809      	ldr	r0, [pc, #36]	@ (8002808 <HAL_DSI_MspInit+0x9c>)
 80027e2:	f002 fb37 	bl	8004e54 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	205c      	movs	r0, #92	@ 0x5c
 80027ec:	f000 feea 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80027f0:	205c      	movs	r0, #92	@ 0x5c
 80027f2:	f000 ff03 	bl	80035fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80027f6:	bf00      	nop
 80027f8:	3728      	adds	r7, #40	@ 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40016c00 	.word	0x40016c00
 8002804:	40023800 	.word	0x40023800
 8002808:	40022400 	.word	0x40022400

0800280c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	@ 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a32      	ldr	r2, [pc, #200]	@ (80028f4 <HAL_I2C_MspInit+0xe8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d12d      	bne.n	800288a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a30      	ldr	r2, [pc, #192]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800284a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002854:	2301      	movs	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800285c:	2304      	movs	r3, #4
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	4825      	ldr	r0, [pc, #148]	@ (80028fc <HAL_I2C_MspInit+0xf0>)
 8002868:	f002 faf4 	bl	8004e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	4a20      	ldr	r2, [pc, #128]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 8002876:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800287a:	6413      	str	r3, [r2, #64]	@ 0x40
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002888:	e030      	b.n	80028ec <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1c      	ldr	r2, [pc, #112]	@ (8002900 <HAL_I2C_MspInit+0xf4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d12b      	bne.n	80028ec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 800289e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80028b0:	2330      	movs	r3, #48	@ 0x30
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b4:	2312      	movs	r3, #18
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028c0:	2304      	movs	r3, #4
 80028c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	480e      	ldr	r0, [pc, #56]	@ (8002904 <HAL_I2C_MspInit+0xf8>)
 80028cc:	f002 fac2 	bl	8004e54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a07      	ldr	r2, [pc, #28]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 80028da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_I2C_MspInit+0xec>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3730      	adds	r7, #48	@ 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40005400 	.word	0x40005400
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020400 	.word	0x40020400
 8002900:	40005800 	.word	0x40005800
 8002904:	40021c00 	.word	0x40021c00

08002908 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <HAL_LTDC_MspInit+0x48>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d115      	bne.n	8002946 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_LTDC_MspInit+0x4c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <HAL_LTDC_MspInit+0x4c>)
 8002924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002928:	6453      	str	r3, [r2, #68]	@ 0x44
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_LTDC_MspInit+0x4c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2058      	movs	r0, #88	@ 0x58
 800293c:	f000 fe42 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002940:	2058      	movs	r0, #88	@ 0x58
 8002942:	f000 fe5b 	bl	80035fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40016800 	.word	0x40016800
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a31      	ldr	r2, [pc, #196]	@ (8002a3c <HAL_QSPI_MspInit+0xe4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d15b      	bne.n	8002a32 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b30      	ldr	r3, [pc, #192]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	4a2f      	ldr	r2, [pc, #188]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6393      	str	r3, [r2, #56]	@ 0x38
 800298a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a28      	ldr	r2, [pc, #160]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a21      	ldr	r2, [pc, #132]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 80029bc:	f043 0320 	orr.w	r3, r3, #32
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <HAL_QSPI_MspInit+0xe8>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80029de:	230a      	movs	r3, #10
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4816      	ldr	r0, [pc, #88]	@ (8002a44 <HAL_QSPI_MspInit+0xec>)
 80029ea:	f002 fa33 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80029ee:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002a00:	2309      	movs	r3, #9
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <HAL_QSPI_MspInit+0xf0>)
 8002a0c:	f002 fa22 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002a10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002a22:	230a      	movs	r3, #10
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4806      	ldr	r0, [pc, #24]	@ (8002a48 <HAL_QSPI_MspInit+0xf0>)
 8002a2e:	f002 fa11 	bl	8004e54 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	a0001000 	.word	0xa0001000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40021400 	.word	0x40021400

08002a4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a68      	ldr	r2, [pc, #416]	@ (8002c0c <HAL_SD_MspInit+0x1c0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	f040 80c9 	bne.w	8002c02 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a78:	4a65      	ldr	r2, [pc, #404]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002a7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a80:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	4b5f      	ldr	r3, [pc, #380]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	4a5e      	ldr	r2, [pc, #376]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	4b58      	ldr	r3, [pc, #352]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	4a57      	ldr	r2, [pc, #348]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab8:	4b55      	ldr	r3, [pc, #340]	@ (8002c10 <HAL_SD_MspInit+0x1c4>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8002ac4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002ac8:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ad6:	230c      	movs	r3, #12
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	484c      	ldr	r0, [pc, #304]	@ (8002c14 <HAL_SD_MspInit+0x1c8>)
 8002ae2:	f002 f9b7 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002af6:	230c      	movs	r3, #12
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	4845      	ldr	r0, [pc, #276]	@ (8002c18 <HAL_SD_MspInit+0x1cc>)
 8002b02:	f002 f9a7 	bl	8004e54 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002b06:	4b45      	ldr	r3, [pc, #276]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b08:	4a45      	ldr	r2, [pc, #276]	@ (8002c20 <HAL_SD_MspInit+0x1d4>)
 8002b0a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002b0c:	4b43      	ldr	r3, [pc, #268]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b12:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b14:	4b41      	ldr	r3, [pc, #260]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1a:	4b40      	ldr	r3, [pc, #256]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b20:	4b3e      	ldr	r3, [pc, #248]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b26:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b28:	4b3c      	ldr	r3, [pc, #240]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b2e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b30:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b36:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002b38:	4b38      	ldr	r3, [pc, #224]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b44:	4b35      	ldr	r3, [pc, #212]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b4a:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002b50:	4b32      	ldr	r3, [pc, #200]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b58:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b5a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002b60:	482e      	ldr	r0, [pc, #184]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b62:	f000 fd75 	bl	8003650 <HAL_DMA_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8002b6c:	f7ff fd80 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b76:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <HAL_SD_MspInit+0x1d0>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002b7c:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c28 <HAL_SD_MspInit+0x1dc>)
 8002b80:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002b82:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002b84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b88:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8a:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002b8c:	2240      	movs	r2, #64	@ 0x40
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002b98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b9c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b9e:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002ba0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ba4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002ba8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bac:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002bae:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bd0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002bd6:	4813      	ldr	r0, [pc, #76]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bd8:	f000 fd3a 	bl	8003650 <HAL_DMA_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002be2:	f7ff fd45 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_SD_MspInit+0x1d8>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2031      	movs	r0, #49	@ 0x31
 8002bf8:	f000 fce4 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002bfc:	2031      	movs	r0, #49	@ 0x31
 8002bfe:	f000 fcfd 	bl	80035fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020c00 	.word	0x40020c00
 8002c1c:	200005e4 	.word	0x200005e4
 8002c20:	40026458 	.word	0x40026458
 8002c24:	20000644 	.word	0x20000644
 8002c28:	400264a0 	.word	0x400264a0

08002c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0b      	ldr	r2, [pc, #44]	@ (8002c68 <HAL_TIM_Base_MspInit+0x3c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10d      	bne.n	8002c5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_TIM_Base_MspInit+0x40>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <HAL_TIM_Base_MspInit+0x40>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4e:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <HAL_TIM_Base_MspInit+0x40>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	@ 0x30
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a37      	ldr	r2, [pc, #220]	@ (8002d6c <HAL_UART_MspInit+0xfc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d12d      	bne.n	8002cee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	4b36      	ldr	r3, [pc, #216]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	4a35      	ldr	r2, [pc, #212]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca2:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cdc:	2307      	movs	r3, #7
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4823      	ldr	r0, [pc, #140]	@ (8002d74 <HAL_UART_MspInit+0x104>)
 8002ce8:	f002 f8b4 	bl	8004e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cec:	e039      	b.n	8002d62 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a21      	ldr	r2, [pc, #132]	@ (8002d78 <HAL_UART_MspInit+0x108>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d134      	bne.n	8002d62 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002d02:	f043 0320 	orr.w	r3, r3, #32
 8002d06:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	4a14      	ldr	r2, [pc, #80]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_UART_MspInit+0x100>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8002d30:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d42:	2308      	movs	r3, #8
 8002d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480b      	ldr	r0, [pc, #44]	@ (8002d7c <HAL_UART_MspInit+0x10c>)
 8002d4e:	f002 f881 	bl	8004e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	2047      	movs	r0, #71	@ 0x47
 8002d58:	f000 fc34 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d5c:	2047      	movs	r0, #71	@ 0x47
 8002d5e:	f000 fc4d 	bl	80035fc <HAL_NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3730      	adds	r7, #48	@ 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40004800 	.word	0x40004800
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40011400 	.word	0x40011400
 8002d7c:	40021800 	.word	0x40021800

08002d80 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d94:	4b44      	ldr	r3, [pc, #272]	@ (8002ea8 <HAL_FMC_MspInit+0x128>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 8081 	bne.w	8002ea0 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8002d9e:	4b42      	ldr	r3, [pc, #264]	@ (8002ea8 <HAL_FMC_MspInit+0x128>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002da4:	2300      	movs	r3, #0
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4b40      	ldr	r3, [pc, #256]	@ (8002eac <HAL_FMC_MspInit+0x12c>)
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	4a3f      	ldr	r2, [pc, #252]	@ (8002eac <HAL_FMC_MspInit+0x12c>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6393      	str	r3, [r2, #56]	@ 0x38
 8002db4:	4b3d      	ldr	r3, [pc, #244]	@ (8002eac <HAL_FMC_MspInit+0x12c>)
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8002dc0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002dc4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4835      	ldr	r0, [pc, #212]	@ (8002eb0 <HAL_FMC_MspInit+0x130>)
 8002ddc:	f002 f83a 	bl	8004e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8002de0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002de4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002df2:	230c      	movs	r3, #12
 8002df4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	482e      	ldr	r0, [pc, #184]	@ (8002eb4 <HAL_FMC_MspInit+0x134>)
 8002dfc:	f002 f82a 	bl	8004e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8002e00:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002e04:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e12:	230c      	movs	r3, #12
 8002e14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4827      	ldr	r0, [pc, #156]	@ (8002eb8 <HAL_FMC_MspInit+0x138>)
 8002e1c:	f002 f81a 	bl	8004e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002e20:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002e24:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e32:	230c      	movs	r3, #12
 8002e34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4820      	ldr	r0, [pc, #128]	@ (8002ebc <HAL_FMC_MspInit+0x13c>)
 8002e3c:	f002 f80a 	bl	8004e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002e40:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002e44:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e52:	230c      	movs	r3, #12
 8002e54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4819      	ldr	r0, [pc, #100]	@ (8002ec0 <HAL_FMC_MspInit+0x140>)
 8002e5c:	f001 fffa 	bl	8004e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8002e60:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8002e64:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e72:	230c      	movs	r3, #12
 8002e74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4812      	ldr	r0, [pc, #72]	@ (8002ec4 <HAL_FMC_MspInit+0x144>)
 8002e7c:	f001 ffea 	bl	8004e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002e80:	2301      	movs	r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e90:	230c      	movs	r3, #12
 8002e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	480b      	ldr	r0, [pc, #44]	@ (8002ec8 <HAL_FMC_MspInit+0x148>)
 8002e9a:	f001 ffdb 	bl	8004e54 <HAL_GPIO_Init>
 8002e9e:	e000      	b.n	8002ea2 <HAL_FMC_MspInit+0x122>
    return;
 8002ea0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200007b0 	.word	0x200007b0
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021800 	.word	0x40021800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021400 	.word	0x40021400
 8002ec4:	40021c00 	.word	0x40021c00
 8002ec8:	40020800 	.word	0x40020800

08002ecc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ed4:	f7ff ff54 	bl	8002d80 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <HAL_SAI_MspInit+0xa8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d146      	bne.n	8002f80 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_SAI_MspInit+0xac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <HAL_SAI_MspInit+0xb0>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a23      	ldr	r2, [pc, #140]	@ (8002f90 <HAL_SAI_MspInit+0xb0>)
 8002f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_SAI_MspInit+0xb0>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <HAL_SAI_MspInit+0xac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f8c <HAL_SAI_MspInit+0xac>)
 8002f1e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002f20:	2330      	movs	r3, #48	@ 0x30
 8002f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f30:	2306      	movs	r3, #6
 8002f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4816      	ldr	r0, [pc, #88]	@ (8002f94 <HAL_SAI_MspInit+0xb4>)
 8002f3c:	f001 ff8a 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002f40:	2340      	movs	r3, #64	@ 0x40
 8002f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f50:	2306      	movs	r3, #6
 8002f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480f      	ldr	r0, [pc, #60]	@ (8002f98 <HAL_SAI_MspInit+0xb8>)
 8002f5c:	f001 ff7a 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002f60:	2380      	movs	r3, #128	@ 0x80
 8002f62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f70:	2306      	movs	r3, #6
 8002f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4808      	ldr	r0, [pc, #32]	@ (8002f9c <HAL_SAI_MspInit+0xbc>)
 8002f7c:	f001 ff6a 	bl	8004e54 <HAL_GPIO_Init>

    }
}
 8002f80:	bf00      	nop
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40015804 	.word	0x40015804
 8002f8c:	200007b4 	.word	0x200007b4
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021800 	.word	0x40021800

08002fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08e      	sub	sp, #56	@ 0x38
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4b33      	ldr	r3, [pc, #204]	@ (8003084 <HAL_InitTick+0xe4>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	4a32      	ldr	r2, [pc, #200]	@ (8003084 <HAL_InitTick+0xe4>)
 8002fba:	f043 0310 	orr.w	r3, r3, #16
 8002fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc0:	4b30      	ldr	r3, [pc, #192]	@ (8003084 <HAL_InitTick+0xe4>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fcc:	f107 0210 	add.w	r2, r7, #16
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 fa2c 	bl	8008434 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fe6:	f005 f9fd 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 8002fea:	6378      	str	r0, [r7, #52]	@ 0x34
 8002fec:	e004      	b.n	8002ff8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fee:	f005 f9f9 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffa:	4a23      	ldr	r2, [pc, #140]	@ (8003088 <HAL_InitTick+0xe8>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9b      	lsrs	r3, r3, #18
 8003002:	3b01      	subs	r3, #1
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003006:	4b21      	ldr	r3, [pc, #132]	@ (800308c <HAL_InitTick+0xec>)
 8003008:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_InitTick+0xf0>)
 800300a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800300c:	4b1f      	ldr	r3, [pc, #124]	@ (800308c <HAL_InitTick+0xec>)
 800300e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003012:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003014:	4a1d      	ldr	r2, [pc, #116]	@ (800308c <HAL_InitTick+0xec>)
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800301a:	4b1c      	ldr	r3, [pc, #112]	@ (800308c <HAL_InitTick+0xec>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003020:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_InitTick+0xec>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003026:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_InitTick+0xec>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800302c:	4817      	ldr	r0, [pc, #92]	@ (800308c <HAL_InitTick+0xec>)
 800302e:	f007 fa6d 	bl	800a50c <HAL_TIM_Base_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003038:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11b      	bne.n	8003078 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003040:	4812      	ldr	r0, [pc, #72]	@ (800308c <HAL_InitTick+0xec>)
 8003042:	f007 fab3 	bl	800a5ac <HAL_TIM_Base_Start_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800304c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003054:	2036      	movs	r0, #54	@ 0x36
 8003056:	f000 fad1 	bl	80035fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d808      	bhi.n	8003072 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003060:	2200      	movs	r2, #0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	2036      	movs	r0, #54	@ 0x36
 8003066:	f000 faad 	bl	80035c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <HAL_InitTick+0xf4>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e002      	b.n	8003078 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003078:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800307c:	4618      	mov	r0, r3
 800307e:	3738      	adds	r7, #56	@ 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	431bde83 	.word	0x431bde83
 800308c:	200007b8 	.word	0x200007b8
 8003090:	40001000 	.word	0x40001000
 8003094:	20000004 	.word	0x20000004

08003098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <NMI_Handler+0x4>

080030a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <MemManage_Handler+0x4>

080030b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <UsageFault_Handler+0x4>

080030c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <SDIO_IRQHandler+0x10>)
 800310e:	f006 fb21 	bl	8009754 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000560 	.word	0x20000560

0800311c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003120:	4802      	ldr	r0, [pc, #8]	@ (800312c <TIM6_DAC_IRQHandler+0x10>)
 8003122:	f007 fab3 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200007b8 	.word	0x200007b8

08003130 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003134:	4802      	ldr	r0, [pc, #8]	@ (8003140 <DMA2_Stream3_IRQHandler+0x10>)
 8003136:	f000 fc23 	bl	8003980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200005e4 	.word	0x200005e4

08003144 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <OTG_FS_IRQHandler+0x10>)
 800314a:	f002 fb41 	bl	80057d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000c28 	.word	0x20000c28

08003158 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800315c:	4802      	ldr	r0, [pc, #8]	@ (8003168 <DMA2_Stream6_IRQHandler+0x10>)
 800315e:	f000 fc0f 	bl	8003980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000644 	.word	0x20000644

0800316c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003170:	4802      	ldr	r0, [pc, #8]	@ (800317c <USART6_IRQHandler+0x10>)
 8003172:	f007 ff1d 	bl	800afb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000734 	.word	0x20000734

08003180 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003184:	4802      	ldr	r0, [pc, #8]	@ (8003190 <LTDC_IRQHandler+0x10>)
 8003186:	f004 fb8b 	bl	80078a0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200003e4 	.word	0x200003e4

08003194 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <DMA2D_IRQHandler+0x10>)
 800319a:	f000 feb0 	bl	8003efe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200002e0 	.word	0x200002e0

080031a8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80031ac:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <DSI_IRQHandler+0x10>)
 80031ae:	f001 fa86 	bl	80046be <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000320 	.word	0x20000320

080031bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return 1;
 80031c0:	2301      	movs	r3, #1
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_kill>:

int _kill(int pid, int sig)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031d6:	f011 f837 	bl	8014248 <__errno>
 80031da:	4603      	mov	r3, r0
 80031dc:	2216      	movs	r2, #22
 80031de:	601a      	str	r2, [r3, #0]
  return -1;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_exit>:

void _exit (int status)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ffe7 	bl	80031cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80031fe:	bf00      	nop
 8003200:	e7fd      	b.n	80031fe <_exit+0x12>

08003202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e00a      	b.n	800322a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003214:	f3af 8000 	nop.w
 8003218:	4601      	mov	r1, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	60ba      	str	r2, [r7, #8]
 8003220:	b2ca      	uxtb	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	dbf0      	blt.n	8003214 <_read+0x12>
  }

  return len;
 8003232:	687b      	ldr	r3, [r7, #4]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_close>:
  }
  return len;
}

int _close(int file)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003264:	605a      	str	r2, [r3, #4]
  return 0;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_isatty>:

int _isatty(int file)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ac:	4a14      	ldr	r2, [pc, #80]	@ (8003300 <_sbrk+0x5c>)
 80032ae:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <_sbrk+0x60>)
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b8:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <_sbrk+0x64>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c0:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <_sbrk+0x64>)
 80032c2:	4a12      	ldr	r2, [pc, #72]	@ (800330c <_sbrk+0x68>)
 80032c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <_sbrk+0x64>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d207      	bcs.n	80032e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032d4:	f010 ffb8 	bl	8014248 <__errno>
 80032d8:	4603      	mov	r3, r0
 80032da:	220c      	movs	r2, #12
 80032dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	e009      	b.n	80032f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <_sbrk+0x64>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <_sbrk+0x64>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <_sbrk+0x64>)
 80032f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20050000 	.word	0x20050000
 8003304:	00000400 	.word	0x00000400
 8003308:	20000800 	.word	0x20000800
 800330c:	20001158 	.word	0x20001158

08003310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <SystemInit+0x20>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <SystemInit+0x20>)
 800331c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800336c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003338:	f7ff ffea 	bl	8003310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800333c:	480c      	ldr	r0, [pc, #48]	@ (8003370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800333e:	490d      	ldr	r1, [pc, #52]	@ (8003374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003344:	e002      	b.n	800334c <LoopCopyDataInit>

08003346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334a:	3304      	adds	r3, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800334c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003350:	d3f9      	bcc.n	8003346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003354:	4c0a      	ldr	r4, [pc, #40]	@ (8003380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003358:	e001      	b.n	800335e <LoopFillZerobss>

0800335a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800335c:	3204      	adds	r2, #4

0800335e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003360:	d3fb      	bcc.n	800335a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003362:	f010 ff77 	bl	8014254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003366:	f7fe fb31 	bl	80019cc <main>
  bx  lr    
 800336a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800336c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003378:	0801503c 	.word	0x0801503c
  ldr r2, =_sbss
 800337c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003380:	20001158 	.word	0x20001158

08003384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <ADC_IRQHandler>
	...

08003388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800338c:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <HAL_Init+0x40>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0d      	ldr	r2, [pc, #52]	@ (80033c8 <HAL_Init+0x40>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_Init+0x40>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <HAL_Init+0x40>)
 800339e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a4:	4b08      	ldr	r3, [pc, #32]	@ (80033c8 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <HAL_Init+0x40>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b0:	2003      	movs	r0, #3
 80033b2:	f000 f8fc 	bl	80035ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033b6:	200f      	movs	r0, #15
 80033b8:	f7ff fdf2 	bl	8002fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033bc:	f7ff f95e 	bl	800267c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023c00 	.word	0x40023c00

080033cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d0:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_IncTick+0x20>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_IncTick+0x24>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_IncTick+0x24>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000008 	.word	0x20000008
 80033f0:	20000804 	.word	0x20000804

080033f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return uwTick;
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_GetTick+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000804 	.word	0x20000804

0800340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff ffee 	bl	80033f4 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d005      	beq.n	8003432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003426:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_Delay+0x44>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003432:	bf00      	nop
 8003434:	f7ff ffde 	bl	80033f4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d8f7      	bhi.n	8003434 <HAL_Delay+0x28>
  {
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000008 	.word	0x20000008

08003454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003470:	4013      	ands	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800347c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	60d3      	str	r3, [r2, #12]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__NVIC_GetPriorityGrouping+0x18>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0307 	and.w	r3, r3, #7
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db0b      	blt.n	80034e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4907      	ldr	r1, [pc, #28]	@ (80034f0 <__NVIC_EnableIRQ+0x38>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	db0a      	blt.n	800351e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	490c      	ldr	r1, [pc, #48]	@ (8003540 <__NVIC_SetPriority+0x4c>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	440b      	add	r3, r1
 8003518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800351c:	e00a      	b.n	8003534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4908      	ldr	r1, [pc, #32]	@ (8003544 <__NVIC_SetPriority+0x50>)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	3b04      	subs	r3, #4
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	440b      	add	r3, r1
 8003532:	761a      	strb	r2, [r3, #24]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000e100 	.word	0xe000e100
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f1c3 0307 	rsb	r3, r3, #7
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf28      	it	cs
 8003566:	2304      	movcs	r3, #4
 8003568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3304      	adds	r3, #4
 800356e:	2b06      	cmp	r3, #6
 8003570:	d902      	bls.n	8003578 <NVIC_EncodePriority+0x30>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3b03      	subs	r3, #3
 8003576:	e000      	b.n	800357a <NVIC_EncodePriority+0x32>
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	401a      	ands	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43d9      	mvns	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	4313      	orrs	r3, r2
         );
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3724      	adds	r7, #36	@ 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ff4c 	bl	8003454 <__NVIC_SetPriorityGrouping>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d6:	f7ff ff61 	bl	800349c <__NVIC_GetPriorityGrouping>
 80035da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	6978      	ldr	r0, [r7, #20]
 80035e2:	f7ff ffb1 	bl	8003548 <NVIC_EncodePriority>
 80035e6:	4602      	mov	r2, r0
 80035e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff80 	bl	80034f4 <__NVIC_SetPriority>
}
 80035f4:	bf00      	nop
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff54 	bl	80034b8 <__NVIC_EnableIRQ>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e00e      	b.n	8003648 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	795b      	ldrb	r3, [r3, #5]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff f84c 	bl	80026d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff feca 	bl	80033f4 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e099      	b.n	80037a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368c:	e00f      	b.n	80036ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368e:	f7ff feb1 	bl	80033f4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b05      	cmp	r3, #5
 800369a:	d908      	bls.n	80036ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2203      	movs	r2, #3
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e078      	b.n	80037a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e8      	bne.n	800368e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <HAL_DMA_Init+0x158>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	4313      	orrs	r3, r2
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0307 	bic.w	r3, r3, #7
 800372e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	2b04      	cmp	r3, #4
 8003740:	d117      	bne.n	8003772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb0d 	bl	8003d74 <DMA_CheckFifoParam>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2240      	movs	r2, #64	@ 0x40
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800376e:	2301      	movs	r3, #1
 8003770:	e016      	b.n	80037a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fac4 	bl	8003d08 <DMA_CalcBaseAndBitshift>
 8003780:	4603      	mov	r3, r0
 8003782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	223f      	movs	r2, #63	@ 0x3f
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	f010803f 	.word	0xf010803f

080037ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_DMA_Start_IT+0x26>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e040      	b.n	8003854 <HAL_DMA_Start_IT+0xa8>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d12f      	bne.n	8003846 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa56 	bl	8003cac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	223f      	movs	r2, #63	@ 0x3f
 8003806:	409a      	lsls	r2, r3
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0216 	orr.w	r2, r2, #22
 800381a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0208 	orr.w	r2, r2, #8
 8003832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e005      	b.n	8003852 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800384e:	2302      	movs	r3, #2
 8003850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003852:	7dfb      	ldrb	r3, [r7, #23]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800386a:	f7ff fdc3 	bl	80033f4 <HAL_GetTick>
 800386e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d008      	beq.n	800388e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e052      	b.n	8003934 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0216 	bic.w	r2, r2, #22
 800389c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_DMA_Abort+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0208 	bic.w	r2, r2, #8
 80038cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038de:	e013      	b.n	8003908 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e0:	f7ff fd88 	bl	80033f4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d90c      	bls.n	8003908 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2203      	movs	r2, #3
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e015      	b.n	8003934 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e4      	bne.n	80038e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	223f      	movs	r2, #63	@ 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d004      	beq.n	800395a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2280      	movs	r2, #128	@ 0x80
 8003954:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00c      	b.n	8003974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2205      	movs	r2, #5
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800398c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bc8 <HAL_DMA_IRQHandler+0x248>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a8e      	ldr	r2, [pc, #568]	@ (8003bcc <HAL_DMA_IRQHandler+0x24c>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039aa:	2208      	movs	r2, #8
 80039ac:	409a      	lsls	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01a      	beq.n	80039ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	2208      	movs	r2, #8
 80039da:	409a      	lsls	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	2201      	movs	r2, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d012      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	2201      	movs	r2, #1
 8003a10:	409a      	lsls	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	2204      	movs	r2, #4
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d012      	beq.n	8003a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00b      	beq.n	8003a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	2204      	movs	r2, #4
 8003a46:	409a      	lsls	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	f043 0204 	orr.w	r2, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d043      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03c      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d024      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e01f      	b.n	8003af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01b      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e016      	b.n	8003af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0208 	bic.w	r2, r2, #8
 8003ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af4:	2220      	movs	r2, #32
 8003af6:	409a      	lsls	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 808f 	beq.w	8003c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8087 	beq.w	8003c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	2220      	movs	r2, #32
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d136      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0216 	bic.w	r2, r2, #22
 8003b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <HAL_DMA_IRQHandler+0x1da>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0208 	bic.w	r2, r2, #8
 8003b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6e:	223f      	movs	r2, #63	@ 0x3f
 8003b70:	409a      	lsls	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d07e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
        }
        return;
 8003b96:	e079      	b.n	8003c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01d      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d031      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
 8003bc4:	e02c      	b.n	8003c20 <HAL_DMA_IRQHandler+0x2a0>
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d023      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
 8003be0:	e01e      	b.n	8003c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10f      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0210 	bic.w	r2, r2, #16
 8003bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d032      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2205      	movs	r2, #5
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d307      	bcc.n	8003c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f2      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x2cc>
 8003c66:	e000      	b.n	8003c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
 8003c8a:	e000      	b.n	8003c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c8c:	bf00      	nop
    }
  }
}
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	d108      	bne.n	8003cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cea:	e007      	b.n	8003cfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	60da      	str	r2, [r3, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	3b10      	subs	r3, #16
 8003d18:	4a14      	ldr	r2, [pc, #80]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x64>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d22:	4a13      	ldr	r2, [pc, #76]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x68>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d909      	bls.n	8003d4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	1d1a      	adds	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d48:	e007      	b.n	8003d5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	aaaaaaab 	.word	0xaaaaaaab
 8003d70:	08014ef8 	.word	0x08014ef8

08003d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11f      	bne.n	8003dce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d856      	bhi.n	8003e42 <DMA_CheckFifoParam+0xce>
 8003d94:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <DMA_CheckFifoParam+0x28>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dbf 	.word	0x08003dbf
 8003da4:	08003dad 	.word	0x08003dad
 8003da8:	08003e43 	.word	0x08003e43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d046      	beq.n	8003e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e043      	b.n	8003e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dc6:	d140      	bne.n	8003e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dcc:	e03d      	b.n	8003e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd6:	d121      	bne.n	8003e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d837      	bhi.n	8003e4e <DMA_CheckFifoParam+0xda>
 8003dde:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <DMA_CheckFifoParam+0x70>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003dfb 	.word	0x08003dfb
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e0d 	.word	0x08003e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e030      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d025      	beq.n	8003e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0a:	e022      	b.n	8003e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e14:	d11f      	bne.n	8003e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e1a:	e01c      	b.n	8003e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d903      	bls.n	8003e2a <DMA_CheckFifoParam+0xb6>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d003      	beq.n	8003e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e28:	e018      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2e:	e015      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e00b      	b.n	8003e5a <DMA_CheckFifoParam+0xe6>
      break;
 8003e42:	bf00      	nop
 8003e44:	e00a      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      break;
 8003e46:	bf00      	nop
 8003e48:	e008      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e006      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e004      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <DMA_CheckFifoParam+0xe8>
      break;
 8003e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e03b      	b.n	8003ef6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe fc42 	bl	800271c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebc:	f023 0107 	bic.w	r1, r3, #7
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ed6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68d1      	ldr	r1, [r2, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d026      	beq.n	8003f6e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d021      	beq.n	8003f6e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f38:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d026      	beq.n	8003fc6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d021      	beq.n	8003fc6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f90:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2220      	movs	r2, #32
 8003f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d026      	beq.n	800401e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d021      	beq.n	800401e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2208      	movs	r2, #8
 8003ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2204      	movs	r2, #4
 8004002:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2204      	movs	r2, #4
 8004048:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f853 	bl	80040f6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d024      	beq.n	80040a4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01f      	beq.n	80040a4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004072:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2202      	movs	r2, #2
 800407a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01f      	beq.n	80040ee <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01a      	beq.n	80040ee <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040c6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2210      	movs	r2, #16
 80040ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f80e 	bl	800410a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_DMA2D_ConfigLayer+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e079      	b.n	8004234 <HAL_DMA2D_ConfigLayer+0x114>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3318      	adds	r3, #24
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800416a:	4b35      	ldr	r3, [pc, #212]	@ (8004240 <HAL_DMA2D_ConfigLayer+0x120>)
 800416c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b0a      	cmp	r3, #10
 8004174:	d003      	beq.n	800417e <HAL_DMA2D_ConfigLayer+0x5e>
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b09      	cmp	r3, #9
 800417c:	d107      	bne.n	800418e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e005      	b.n	800419a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d120      	bne.n	80041e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	ea02 0103 	and.w	r1, r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b0a      	cmp	r3, #10
 80041c8:	d003      	beq.n	80041d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	d127      	bne.n	8004222 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80041de:	629a      	str	r2, [r3, #40]	@ 0x28
 80041e0:	e01f      	b.n	8004222 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	ea02 0103 	and.w	r1, r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b0a      	cmp	r3, #10
 800420a:	d003      	beq.n	8004214 <HAL_DMA2D_ConfigLayer+0xf4>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b09      	cmp	r3, #9
 8004212:	d106      	bne.n	8004222 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004220:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	ff03000f 	.word	0xff03000f

08004244 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	@ 0x28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e16e      	b.n	8004536 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7c5b      	ldrb	r3, [r3, #17]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe fa82 	bl	800276c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2203      	movs	r2, #3
 800426c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004282:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800428e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004296:	f7ff f8ad 	bl	80033f4 <HAL_GetTick>
 800429a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800429c:	e009      	b.n	80042b2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800429e:	f7ff f8a9 	bl	80033f4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ac:	d901      	bls.n	80042b2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e141      	b.n	8004536 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80042ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ed      	beq.n	800429e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80042d2:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80042d6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042ee:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80042f6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800432a:	2001      	movs	r0, #1
 800432c:	f7ff f86e 	bl	800340c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004330:	f7ff f860 	bl	80033f4 <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004336:	e009      	b.n	800434c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004338:	f7ff f85c 	bl	80033f4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004346:	d901      	bls.n	800434c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0f4      	b.n	8004536 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ed      	beq.n	8004338 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800438c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6899      	ldr	r1, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0202 	orr.w	r2, r2, #2
 80043b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0204 	orr.w	r2, r2, #4
 80043c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0203 	bic.w	r2, r2, #3
 80043d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 80043f2:	f7fe ffff 	bl	80033f4 <HAL_GetTick>
 80043f6:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d123      	bne.n	8004450 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004408:	e00c      	b.n	8004424 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800440a:	f7fe fff3 	bl	80033f4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004418:	d904      	bls.n	8004424 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e088      	b.n	8004536 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800442c:	f003 0314 	and.w	r3, r3, #20
 8004430:	2b14      	cmp	r3, #20
 8004432:	d1ea      	bne.n	800440a <HAL_DSI_Init+0x1c6>
 8004434:	e014      	b.n	8004460 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004436:	f7fe ffdd 	bl	80033f4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004444:	d904      	bls.n	8004450 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e072      	b.n	8004536 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004458:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800445c:	2b94      	cmp	r3, #148	@ 0x94
 800445e:	d1ea      	bne.n	8004436 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_DSI_Init+0x22a>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	e000      	b.n	8004470 <HAL_DSI_Init+0x22c>
 800446e:	2301      	movs	r3, #1
 8004470:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	4a32      	ldr	r2, [pc, #200]	@ (8004540 <HAL_DSI_Init+0x2fc>)
 8004476:	fb03 f202 	mul.w	r2, r3, r2
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	409a      	lsls	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80044a6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0203 	bic.w	r2, r2, #3
 800450a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3728      	adds	r7, #40	@ 0x28
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	003d0900 	.word	0x003d0900

08004544 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7c1b      	ldrb	r3, [r3, #16]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_DSI_ConfigErrorMonitor+0x16>
 8004556:	2302      	movs	r3, #2
 8004558:	e0ab      	b.n	80046b2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004594:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004598:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80045b6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0202 	orr.w	r2, r2, #2
 80045f2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 020c 	orr.w	r2, r2, #12
 8004610:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0210 	orr.w	r2, r2, #16
 800462e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0220 	orr.w	r2, r2, #32
 800464c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800466a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004688:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80046a6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8ad 	bl	8004850 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2202      	movs	r2, #2
 800471c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f89f 	bl	8004864 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 808c 	beq.w	8004848 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004738:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4013      	ands	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004750:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f043 0210 	orr.w	r2, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f818 	bl	8004878 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7c1b      	ldrb	r3, [r3, #16]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_DSI_SetGenericVCID+0x16>
 800489e:	2302      	movs	r3, #2
 80048a0:	e016      	b.n	80048d0 <HAL_DSI_SetGenericVCID+0x44>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0203 	bic.w	r2, r2, #3
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7c1b      	ldrb	r3, [r3, #16]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0c5      	b.n	8004a7e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0203 	bic.w	r2, r2, #3
 800493e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68d9      	ldr	r1, [r3, #12]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0207 	bic.w	r2, r2, #7
 8004960:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6959      	ldr	r1, [r3, #20]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	431a      	orrs	r2, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020f 	bic.w	r2, r2, #15
 800498e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6919      	ldr	r1, [r3, #16]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 020e 	bic.w	r2, r2, #14
 80049b2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	005a      	lsls	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004a00:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0202 	orr.w	r2, r2, #2
 8004a72:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7c1b      	ldrb	r3, [r3, #16]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_DSI_ConfigCommand+0x16>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e049      	b.n	8004b36 <HAL_DSI_ConfigCommand+0xaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <HAL_DSI_ConfigCommand+0xb8>)
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004ac6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004acc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004ad2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004ad8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004ade:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004ae4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004aea:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004af0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004af6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004afc:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004b02:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0202 	bic.w	r2, r2, #2
 8004b1a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	fef080ff 	.word	0xfef080ff

08004b48 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7c1b      	ldrb	r3, [r3, #16]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_DSI_ConfigFlowControl+0x16>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e016      	b.n	8004b8c <HAL_DSI_ConfigFlowControl+0x44>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 021f 	bic.w	r2, r2, #31
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7c1b      	ldrb	r3, [r3, #16]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_DSI_ConfigPhyTimer+0x16>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e058      	b.n	8004c60 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bf38      	it	cc
 8004bc0:	4613      	movcc	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8004bd4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	041a      	lsls	r2, r3, #16
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8004c02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	021a      	lsls	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7c1b      	ldrb	r3, [r3, #16]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0b4      	b.n	8004dec <HAL_DSI_ConfigHostTimeouts+0x180>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004c96:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6899      	ldr	r1, [r3, #8]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7c1b      	ldrb	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e01b      	b.n	8004e46 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8004e24:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	065a      	lsls	r2, r3, #25
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e177      	b.n	8005160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e70:	2201      	movs	r2, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	f040 8166 	bne.w	800515a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d005      	beq.n	8004ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d130      	bne.n	8004f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004edc:	2201      	movs	r2, #1
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 0201 	and.w	r2, r3, #1
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d017      	beq.n	8004f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	2203      	movs	r2, #3
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d123      	bne.n	8004f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	08da      	lsrs	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3208      	adds	r2, #8
 8004f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	220f      	movs	r2, #15
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	08da      	lsrs	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3208      	adds	r2, #8
 8004f92:	69b9      	ldr	r1, [r7, #24]
 8004f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 0203 	and.w	r2, r3, #3
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80c0 	beq.w	800515a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	4b66      	ldr	r3, [pc, #408]	@ (8005178 <HAL_GPIO_Init+0x324>)
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	4a65      	ldr	r2, [pc, #404]	@ (8005178 <HAL_GPIO_Init+0x324>)
 8004fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fea:	4b63      	ldr	r3, [pc, #396]	@ (8005178 <HAL_GPIO_Init+0x324>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ff6:	4a61      	ldr	r2, [pc, #388]	@ (800517c <HAL_GPIO_Init+0x328>)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a58      	ldr	r2, [pc, #352]	@ (8005180 <HAL_GPIO_Init+0x32c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d037      	beq.n	8005092 <HAL_GPIO_Init+0x23e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a57      	ldr	r2, [pc, #348]	@ (8005184 <HAL_GPIO_Init+0x330>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d031      	beq.n	800508e <HAL_GPIO_Init+0x23a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a56      	ldr	r2, [pc, #344]	@ (8005188 <HAL_GPIO_Init+0x334>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d02b      	beq.n	800508a <HAL_GPIO_Init+0x236>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a55      	ldr	r2, [pc, #340]	@ (800518c <HAL_GPIO_Init+0x338>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d025      	beq.n	8005086 <HAL_GPIO_Init+0x232>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a54      	ldr	r2, [pc, #336]	@ (8005190 <HAL_GPIO_Init+0x33c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <HAL_GPIO_Init+0x22e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a53      	ldr	r2, [pc, #332]	@ (8005194 <HAL_GPIO_Init+0x340>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d019      	beq.n	800507e <HAL_GPIO_Init+0x22a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a52      	ldr	r2, [pc, #328]	@ (8005198 <HAL_GPIO_Init+0x344>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_GPIO_Init+0x226>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a51      	ldr	r2, [pc, #324]	@ (800519c <HAL_GPIO_Init+0x348>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00d      	beq.n	8005076 <HAL_GPIO_Init+0x222>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a50      	ldr	r2, [pc, #320]	@ (80051a0 <HAL_GPIO_Init+0x34c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_Init+0x21e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a4f      	ldr	r2, [pc, #316]	@ (80051a4 <HAL_GPIO_Init+0x350>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_GPIO_Init+0x21a>
 800506a:	2309      	movs	r3, #9
 800506c:	e012      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800506e:	230a      	movs	r3, #10
 8005070:	e010      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005072:	2308      	movs	r3, #8
 8005074:	e00e      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005076:	2307      	movs	r3, #7
 8005078:	e00c      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800507a:	2306      	movs	r3, #6
 800507c:	e00a      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800507e:	2305      	movs	r3, #5
 8005080:	e008      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005082:	2304      	movs	r3, #4
 8005084:	e006      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005086:	2303      	movs	r3, #3
 8005088:	e004      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800508a:	2302      	movs	r3, #2
 800508c:	e002      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005092:	2300      	movs	r3, #0
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	f002 0203 	and.w	r2, r2, #3
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	4093      	lsls	r3, r2
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a4:	4935      	ldr	r1, [pc, #212]	@ (800517c <HAL_GPIO_Init+0x328>)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	089b      	lsrs	r3, r3, #2
 80050aa:	3302      	adds	r3, #2
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050b2:	4b3d      	ldr	r3, [pc, #244]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050d6:	4a34      	ldr	r2, [pc, #208]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050dc:	4b32      	ldr	r3, [pc, #200]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005100:	4a29      	ldr	r2, [pc, #164]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005106:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800512a:	4a1f      	ldr	r2, [pc, #124]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005154:	4a14      	ldr	r2, [pc, #80]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3301      	adds	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	f67f ae84 	bls.w	8004e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3724      	adds	r7, #36	@ 0x24
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
 800517c:	40013800 	.word	0x40013800
 8005180:	40020000 	.word	0x40020000
 8005184:	40020400 	.word	0x40020400
 8005188:	40020800 	.word	0x40020800
 800518c:	40020c00 	.word	0x40020c00
 8005190:	40021000 	.word	0x40021000
 8005194:	40021400 	.word	0x40021400
 8005198:	40021800 	.word	0x40021800
 800519c:	40021c00 	.word	0x40021c00
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40022400 	.word	0x40022400
 80051a8:	40013c00 	.word	0x40013c00

080051ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	887b      	ldrh	r3, [r7, #2]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	e001      	b.n	80051ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
 80051e8:	4613      	mov	r3, r2
 80051ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051ec:	787b      	ldrb	r3, [r7, #1]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051f2:	887a      	ldrh	r2, [r7, #2]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051f8:	e003      	b.n	8005202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051fa:	887b      	ldrh	r3, [r7, #2]
 80051fc:	041a      	lsls	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	619a      	str	r2, [r3, #24]
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af02      	add	r7, sp, #8
 8005214:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e059      	b.n	80052d4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f00e f8f6 	bl	801342c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2203      	movs	r2, #3
 8005244:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800524e:	d102      	bne.n	8005256 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f007 fc3b 	bl	800cad6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7c1a      	ldrb	r2, [r3, #16]
 8005268:	f88d 2000 	strb.w	r2, [sp]
 800526c:	3304      	adds	r3, #4
 800526e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005270:	f007 fbbc 	bl	800c9ec <USB_CoreInit>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e026      	b.n	80052d4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2101      	movs	r1, #1
 800528c:	4618      	mov	r0, r3
 800528e:	f007 fc33 	bl	800caf8 <USB_SetCurrentMode>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e017      	b.n	80052d4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7c1a      	ldrb	r2, [r3, #16]
 80052ac:	f88d 2000 	strb.w	r2, [sp]
 80052b0:	3304      	adds	r3, #4
 80052b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052b4:	f007 fdd6 	bl	800ce64 <USB_HostInit>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e004      	b.n	80052d4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b08b      	sub	sp, #44	@ 0x2c
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	70fb      	strb	r3, [r7, #3]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70bb      	strb	r3, [r7, #2]
 80052f2:	4613      	mov	r3, r2
 80052f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80052f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052f8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_HCD_HC_Init+0x2c>
 8005304:	2302      	movs	r3, #2
 8005306:	e09d      	b.n	8005444 <HAL_HCD_HC_Init+0x168>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3319      	adds	r3, #25
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3314      	adds	r3, #20
 8005334:	787a      	ldrb	r2, [r7, #1]
 8005336:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	3315      	adds	r3, #21
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3326      	adds	r3, #38	@ 0x26
 800535c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	78bb      	ldrb	r3, [r7, #2]
 8005366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536a:	b2d8      	uxtb	r0, r3
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3316      	adds	r3, #22
 800537a:	4602      	mov	r2, r0
 800537c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fbc8 	bl	8005b18 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800538c:	2b00      	cmp	r3, #0
 800538e:	da0a      	bge.n	80053a6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3317      	adds	r3, #23
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e009      	b.n	80053ba <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3317      	adds	r3, #23
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f007 fea8 	bl	800d114 <USB_GetHostSpeed>
 80053c4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80053c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d10b      	bne.n	80053e6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80053ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d107      	bne.n	80053e6 <HAL_HCD_HC_Init+0x10a>
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2bbc      	cmp	r3, #188	@ 0xbc
 80053e0:	d901      	bls.n	80053e6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80053e2:	23bc      	movs	r3, #188	@ 0xbc
 80053e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	3318      	adds	r3, #24
 80053f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80053fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	b298      	uxth	r0, r3
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3328      	adds	r3, #40	@ 0x28
 8005410:	4602      	mov	r2, r0
 8005412:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	b29b      	uxth	r3, r3
 800541c:	787c      	ldrb	r4, [r7, #1]
 800541e:	78ba      	ldrb	r2, [r7, #2]
 8005420:	78f9      	ldrb	r1, [r7, #3]
 8005422:	9302      	str	r3, [sp, #8]
 8005424:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	4623      	mov	r3, r4
 8005432:	f007 fe97 	bl	800d164 <USB_HC_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}

0800544c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_HCD_HC_Halt+0x1e>
 8005466:	2302      	movs	r3, #2
 8005468:	e00f      	b.n	800548a <HAL_HCD_HC_Halt+0x3e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f008 fa29 	bl	800d8d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	70fb      	strb	r3, [r7, #3]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70bb      	strb	r3, [r7, #2]
 80054aa:	4613      	mov	r3, r2
 80054ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3317      	adds	r3, #23
 80054be:	78ba      	ldrb	r2, [r7, #2]
 80054c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3326      	adds	r3, #38	@ 0x26
 80054d2:	787a      	ldrb	r2, [r7, #1]
 80054d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80054d6:	7c3b      	ldrb	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d114      	bne.n	8005506 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	332a      	adds	r3, #42	@ 0x2a
 80054ec:	2203      	movs	r2, #3
 80054ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	3319      	adds	r3, #25
 8005500:	7f3a      	ldrb	r2, [r7, #28]
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e009      	b.n	800551a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	332a      	adds	r3, #42	@ 0x2a
 8005516:	2202      	movs	r2, #2
 8005518:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800551a:	787b      	ldrb	r3, [r7, #1]
 800551c:	2b03      	cmp	r3, #3
 800551e:	f200 8102 	bhi.w	8005726 <HAL_HCD_HC_SubmitRequest+0x292>
 8005522:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005539 	.word	0x08005539
 800552c:	08005711 	.word	0x08005711
 8005530:	080055fd 	.word	0x080055fd
 8005534:	08005687 	.word	0x08005687
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005538:	7c3b      	ldrb	r3, [r7, #16]
 800553a:	2b01      	cmp	r3, #1
 800553c:	f040 80f5 	bne.w	800572a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005540:	78bb      	ldrb	r3, [r7, #2]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d12d      	bne.n	80055a2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005546:	8b3b      	ldrh	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	333d      	adds	r3, #61	@ 0x3d
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	333d      	adds	r3, #61	@ 0x3d
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	332a      	adds	r3, #42	@ 0x2a
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800558a:	e0ce      	b.n	800572a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	332a      	adds	r3, #42	@ 0x2a
 800559c:	2202      	movs	r2, #2
 800559e:	701a      	strb	r2, [r3, #0]
      break;
 80055a0:	e0c3      	b.n	800572a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	331a      	adds	r3, #26
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 80b8 	bne.w	800572a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	333c      	adds	r3, #60	@ 0x3c
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	332a      	adds	r3, #42	@ 0x2a
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
      break;
 80055e4:	e0a1      	b.n	800572a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	332a      	adds	r3, #42	@ 0x2a
 80055f6:	2202      	movs	r2, #2
 80055f8:	701a      	strb	r2, [r3, #0]
      break;
 80055fa:	e096      	b.n	800572a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80055fc:	78bb      	ldrb	r3, [r7, #2]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d120      	bne.n	8005644 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	333d      	adds	r3, #61	@ 0x3d
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	332a      	adds	r3, #42	@ 0x2a
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800562c:	e07e      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	332a      	adds	r3, #42	@ 0x2a
 800563e:	2202      	movs	r2, #2
 8005640:	701a      	strb	r2, [r3, #0]
      break;
 8005642:	e073      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	333c      	adds	r3, #60	@ 0x3c
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	332a      	adds	r3, #42	@ 0x2a
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
      break;
 800566e:	e05d      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	332a      	adds	r3, #42	@ 0x2a
 8005680:	2202      	movs	r2, #2
 8005682:	701a      	strb	r2, [r3, #0]
      break;
 8005684:	e052      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005686:	78bb      	ldrb	r3, [r7, #2]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d120      	bne.n	80056ce <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	333d      	adds	r3, #61	@ 0x3d
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	332a      	adds	r3, #42	@ 0x2a
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80056b6:	e039      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	332a      	adds	r3, #42	@ 0x2a
 80056c8:	2202      	movs	r2, #2
 80056ca:	701a      	strb	r2, [r3, #0]
      break;
 80056cc:	e02e      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	333c      	adds	r3, #60	@ 0x3c
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	332a      	adds	r3, #42	@ 0x2a
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
      break;
 80056f8:	e018      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	332a      	adds	r3, #42	@ 0x2a
 800570a:	2202      	movs	r2, #2
 800570c:	701a      	strb	r2, [r3, #0]
      break;
 800570e:	e00d      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	332a      	adds	r3, #42	@ 0x2a
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
      break;
 8005724:	e002      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800572a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	332c      	adds	r3, #44	@ 0x2c
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	8b39      	ldrh	r1, [r7, #24]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4403      	add	r3, r0
 8005750:	3334      	adds	r3, #52	@ 0x34
 8005752:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	334c      	adds	r3, #76	@ 0x4c
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3338      	adds	r3, #56	@ 0x38
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3315      	adds	r3, #21
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	334d      	adds	r3, #77	@ 0x4d
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3310      	adds	r3, #16
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	1d19      	adds	r1, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	799b      	ldrb	r3, [r3, #6]
 80057be:	461a      	mov	r2, r3
 80057c0:	f007 fdfc 	bl	800d3bc <USB_HC_StartXfer>
 80057c4:	4603      	mov	r3, r0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f007 fafc 	bl	800cde4 <USB_GetMode>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	f040 80fb 	bne.w	80059ea <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f007 fabf 	bl	800cd7c <USB_ReadInterrupts>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80f1 	beq.w	80059e8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f007 fab6 	bl	800cd7c <USB_ReadInterrupts>
 8005810:	4603      	mov	r3, r0
 8005812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581a:	d104      	bne.n	8005826 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f007 faa6 	bl	800cd7c <USB_ReadInterrupts>
 8005830:	4603      	mov	r3, r0
 8005832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583a:	d104      	bne.n	8005846 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f007 fa96 	bl	800cd7c <USB_ReadInterrupts>
 8005850:	4603      	mov	r3, r0
 8005852:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005856:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800585a:	d104      	bne.n	8005866 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f007 fa86 	bl	800cd7c <USB_ReadInterrupts>
 8005870:	4603      	mov	r3, r0
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d103      	bne.n	8005882 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2202      	movs	r2, #2
 8005880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f007 fa78 	bl	800cd7c <USB_ReadInterrupts>
 800588c:	4603      	mov	r3, r0
 800588e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005896:	d120      	bne.n	80058da <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80058a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80058b2:	2110      	movs	r1, #16
 80058b4:	6938      	ldr	r0, [r7, #16]
 80058b6:	f007 f96b 	bl	800cb90 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80058ba:	6938      	ldr	r0, [r7, #16]
 80058bc:	f007 f99a 	bl	800cbf4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7a5b      	ldrb	r3, [r3, #9]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d105      	bne.n	80058d4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f007 fb80 	bl	800cfd4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f00d fe27 	bl	8013528 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f007 fa4c 	bl	800cd7c <USB_ReadInterrupts>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ee:	d102      	bne.n	80058f6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fd4d 	bl	8007390 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f007 fa3e 	bl	800cd7c <USB_ReadInterrupts>
 8005900:	4603      	mov	r3, r0
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d106      	bne.n	8005918 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f00d fdf0 	bl	80134f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2208      	movs	r2, #8
 8005916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f007 fa2d 	bl	800cd7c <USB_ReadInterrupts>
 8005922:	4603      	mov	r3, r0
 8005924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800592c:	d139      	bne.n	80059a2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f007 ffbc 	bl	800d8b0 <USB_HC_ReadInterrupt>
 8005938:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e025      	b.n	800598c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d018      	beq.n	8005986 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800596a:	d106      	bne.n	800597a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f905 	bl	8005b82 <HCD_HC_IN_IRQHandler>
 8005978:	e005      	b.n	8005986 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 ff67 	bl	8006854 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	3301      	adds	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	795b      	ldrb	r3, [r3, #5]
 8005990:	461a      	mov	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4293      	cmp	r3, r2
 8005996:	d3d3      	bcc.n	8005940 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f007 f9e8 	bl	800cd7c <USB_ReadInterrupts>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d101      	bne.n	80059ba <HAL_HCD_IRQHandler+0x1ea>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <HAL_HCD_IRQHandler+0x1ec>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d014      	beq.n	80059ea <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0210 	bic.w	r2, r2, #16
 80059ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fbfe 	bl	80071d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0210 	orr.w	r2, r2, #16
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	e000      	b.n	80059ea <HAL_HCD_IRQHandler+0x21a>
      return;
 80059e8:	bf00      	nop
    }
  }
}
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_HCD_Start+0x16>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e013      	b.n	8005a2e <HAL_HCD_Start+0x3e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f007 fb44 	bl	800d0a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f007 f848 	bl	800cab4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_HCD_Stop+0x16>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e00d      	b.n	8005a68 <HAL_HCD_Stop+0x32>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f008 f897 	bl	800db8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f007 fae6 	bl	800d04e <USB_ResetPort>
 8005a82:	4603      	mov	r3, r0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	334c      	adds	r3, #76	@ 0x4c
 8005aa8:	781b      	ldrb	r3, [r3, #0]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3338      	adds	r3, #56	@ 0x38
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f007 fb28 	bl	800d142 <USB_GetCurrentFrame>
 8005af2:	4603      	mov	r3, r0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f007 fb03 	bl	800d114 <USB_GetHostSpeed>
 8005b0e:	4603      	mov	r3, r0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	331a      	adds	r3, #26
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	331b      	adds	r3, #27
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005b4c:	78fa      	ldrb	r2, [r7, #3]
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	3325      	adds	r3, #37	@ 0x25
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3324      	adds	r3, #36	@ 0x24
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f007 f8fe 	bl	800cda2 <USB_ReadChInterrupts>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d11a      	bne.n	8005be6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	334d      	adds	r3, #77	@ 0x4d
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f007 fe77 	bl	800d8d2 <USB_HC_Halt>
 8005be4:	e09e      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f007 f8d7 	bl	800cda2 <USB_ReadChInterrupts>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfe:	d11b      	bne.n	8005c38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	334d      	adds	r3, #77	@ 0x4d
 8005c24:	2208      	movs	r2, #8
 8005c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	78fa      	ldrb	r2, [r7, #3]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f007 fe4e 	bl	800d8d2 <USB_HC_Halt>
 8005c36:	e075      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f007 f8ae 	bl	800cda2 <USB_ReadChInterrupts>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d11a      	bne.n	8005c86 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2308      	movs	r3, #8
 8005c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	334d      	adds	r3, #77	@ 0x4d
 8005c72:	2206      	movs	r2, #6
 8005c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f007 fe27 	bl	800d8d2 <USB_HC_Halt>
 8005c84:	e04e      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f007 f887 	bl	800cda2 <USB_ReadChInterrupts>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9e:	d11b      	bne.n	8005cd8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cac:	461a      	mov	r2, r3
 8005cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	334d      	adds	r3, #77	@ 0x4d
 8005cc4:	2209      	movs	r2, #9
 8005cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f007 fdfe 	bl	800d8d2 <USB_HC_Halt>
 8005cd6:	e025      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	78fa      	ldrb	r2, [r7, #3]
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f007 f85e 	bl	800cda2 <USB_ReadChInterrupts>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cec:	2b80      	cmp	r3, #128	@ 0x80
 8005cee:	d119      	bne.n	8005d24 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	334d      	adds	r3, #77	@ 0x4d
 8005d12:	2207      	movs	r2, #7
 8005d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f007 fdd7 	bl	800d8d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f007 f838 	bl	800cda2 <USB_ReadChInterrupts>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d3c:	d112      	bne.n	8005d64 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f007 fdc3 	bl	800d8d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d5e:	6093      	str	r3, [r2, #8]
 8005d60:	f000 bd75 	b.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f007 f818 	bl	800cda2 <USB_ReadChInterrupts>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	f040 8128 	bne.w	8005fce <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2320      	movs	r3, #32
 8005d8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005d90:	78fa      	ldrb	r2, [r7, #3]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	331b      	adds	r3, #27
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d119      	bne.n	8005dda <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	331b      	adds	r3, #27
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	799b      	ldrb	r3, [r3, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01b      	beq.n	8005e1a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005de2:	78fa      	ldrb	r2, [r7, #3]
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	1a9b      	subs	r3, r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3330      	adds	r3, #48	@ 0x30
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	1ac9      	subs	r1, r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4403      	add	r3, r0
 8005e16:	3338      	adds	r3, #56	@ 0x38
 8005e18:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	334d      	adds	r3, #77	@ 0x4d
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3344      	adds	r3, #68	@ 0x44
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2301      	movs	r3, #1
 8005e52:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	3326      	adds	r3, #38	@ 0x26
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3326      	adds	r3, #38	@ 0x26
 8005e7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d110      	bne.n	8005ea2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f007 fd22 	bl	800d8d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	6093      	str	r3, [r2, #8]
 8005ea0:	e03d      	b.n	8005f1e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3326      	adds	r3, #38	@ 0x26
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d00a      	beq.n	8005ece <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3326      	adds	r3, #38	@ 0x26
 8005ec8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d127      	bne.n	8005f1e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eec:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	334c      	adds	r3, #76	@ 0x4c
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	334c      	adds	r3, #76	@ 0x4c
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f00d fb13 	bl	8013544 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	799b      	ldrb	r3, [r3, #6]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d13b      	bne.n	8005f9e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005f26:	78fa      	ldrb	r2, [r7, #3]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	3338      	adds	r3, #56	@ 0x38
 8005f36:	6819      	ldr	r1, [r3, #0]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4403      	add	r3, r0
 8005f46:	3328      	adds	r3, #40	@ 0x28
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	440b      	add	r3, r1
 8005f4c:	1e59      	subs	r1, r3, #1
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4403      	add	r3, r0
 8005f5c:	3328      	adds	r3, #40	@ 0x28
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8470 	beq.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	333c      	adds	r3, #60	@ 0x3c
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	f083 0301 	eor.w	r3, r3, #1
 8005f86:	b2d8      	uxtb	r0, r3
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	333c      	adds	r3, #60	@ 0x3c
 8005f96:	4602      	mov	r2, r0
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	f000 bc58 	b.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	333c      	adds	r3, #60	@ 0x3c
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	f083 0301 	eor.w	r3, r3, #1
 8005fb6:	b2d8      	uxtb	r0, r3
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	333c      	adds	r3, #60	@ 0x3c
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	f000 bc40 	b.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f006 fee3 	bl	800cda2 <USB_ReadChInterrupts>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d131      	bne.n	800604a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	331a      	adds	r3, #26
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	f040 841f 	bne.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	331b      	adds	r3, #27
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	334d      	adds	r3, #77	@ 0x4d
 8006034:	2203      	movs	r2, #3
 8006036:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f007 fc46 	bl	800d8d2 <USB_HC_Halt>
 8006046:	f000 bc02 	b.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	4611      	mov	r1, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f006 fea5 	bl	800cda2 <USB_ReadChInterrupts>
 8006058:	4603      	mov	r3, r0
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	f040 8305 	bne.w	800666e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006070:	461a      	mov	r2, r3
 8006072:	2302      	movs	r3, #2
 8006074:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	334d      	adds	r3, #77	@ 0x4d
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d114      	bne.n	80060b6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	334d      	adds	r3, #77	@ 0x4d
 800609c:	2202      	movs	r2, #2
 800609e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	334c      	adds	r3, #76	@ 0x4c
 80060b0:	2201      	movs	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e2cc      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	334d      	adds	r3, #77	@ 0x4d
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d114      	bne.n	80060f6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	334d      	adds	r3, #77	@ 0x4d
 80060dc:	2202      	movs	r2, #2
 80060de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	1a9b      	subs	r3, r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	334c      	adds	r3, #76	@ 0x4c
 80060f0:	2205      	movs	r2, #5
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e2ac      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	334d      	adds	r3, #77	@ 0x4d
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b07      	cmp	r3, #7
 800610a:	d00b      	beq.n	8006124 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	334d      	adds	r3, #77	@ 0x4d
 800611c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800611e:	2b09      	cmp	r3, #9
 8006120:	f040 80a6 	bne.w	8006270 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	334d      	adds	r3, #77	@ 0x4d
 8006134:	2202      	movs	r2, #2
 8006136:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	3344      	adds	r3, #68	@ 0x44
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	1c59      	adds	r1, r3, #1
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4403      	add	r3, r0
 8006158:	3344      	adds	r3, #68	@ 0x44
 800615a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800615c:	78fa      	ldrb	r2, [r7, #3]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	3344      	adds	r3, #68	@ 0x44
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d943      	bls.n	80061fa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3344      	adds	r3, #68	@ 0x44
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	331a      	adds	r3, #26
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d123      	bne.n	80061e4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	331b      	adds	r3, #27
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	331c      	adds	r3, #28
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	334c      	adds	r3, #76	@ 0x4c
 80061f4:	2204      	movs	r2, #4
 80061f6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061f8:	e229      	b.n	800664e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061fa:	78fa      	ldrb	r2, [r7, #3]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	334c      	adds	r3, #76	@ 0x4c
 800620a:	2202      	movs	r2, #2
 800620c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	3326      	adds	r3, #38	@ 0x26
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3326      	adds	r3, #38	@ 0x26
 8006234:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006236:	2b02      	cmp	r3, #2
 8006238:	f040 8209 	bne.w	800664e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006252:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800625a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006268:	461a      	mov	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800626e:	e1ee      	b.n	800664e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	334d      	adds	r3, #77	@ 0x4d
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b05      	cmp	r3, #5
 8006284:	f040 80c8 	bne.w	8006418 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	334d      	adds	r3, #77	@ 0x4d
 8006298:	2202      	movs	r2, #2
 800629a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	331b      	adds	r3, #27
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	f040 81ce 	bne.w	8006650 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	3326      	adds	r3, #38	@ 0x26
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d16b      	bne.n	80063a2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3348      	adds	r3, #72	@ 0x48
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4403      	add	r3, r0
 80062ea:	3348      	adds	r3, #72	@ 0x48
 80062ec:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3348      	adds	r3, #72	@ 0x48
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b02      	cmp	r3, #2
 8006302:	d943      	bls.n	800638c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	3348      	adds	r3, #72	@ 0x48
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	331b      	adds	r3, #27
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800632c:	78fa      	ldrb	r2, [r7, #3]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	3344      	adds	r3, #68	@ 0x44
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d809      	bhi.n	8006356 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	331c      	adds	r3, #28
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	440a      	add	r2, r1
 800636c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006374:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	334c      	adds	r3, #76	@ 0x4c
 8006386:	2204      	movs	r2, #4
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e014      	b.n	80063b6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	334c      	adds	r3, #76	@ 0x4c
 800639c:	2202      	movs	r2, #2
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e009      	b.n	80063b6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	334c      	adds	r3, #76	@ 0x4c
 80063b2:	2202      	movs	r2, #2
 80063b4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063b6:	78fa      	ldrb	r2, [r7, #3]
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	3326      	adds	r3, #38	@ 0x26
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80063cc:	78fa      	ldrb	r2, [r7, #3]
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3326      	adds	r3, #38	@ 0x26
 80063dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063de:	2b02      	cmp	r3, #2
 80063e0:	f040 8136 	bne.w	8006650 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006402:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006410:	461a      	mov	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e11b      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	334d      	adds	r3, #77	@ 0x4d
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b03      	cmp	r3, #3
 800642c:	f040 8081 	bne.w	8006532 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	334d      	adds	r3, #77	@ 0x4d
 8006440:	2202      	movs	r2, #2
 8006442:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	331b      	adds	r3, #27
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b01      	cmp	r3, #1
 8006458:	f040 80fa 	bne.w	8006650 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	334c      	adds	r3, #76	@ 0x4c
 800646c:	2202      	movs	r2, #2
 800646e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	440a      	add	r2, r1
 8006486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800648a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4413      	add	r3, r2
 8006498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	0151      	lsls	r1, r2, #5
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	440a      	add	r2, r1
 80064a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ae:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ca:	f023 0320 	bic.w	r3, r3, #32
 80064ce:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80064d0:	78fa      	ldrb	r2, [r7, #3]
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	3326      	adds	r3, #38	@ 0x26
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	3326      	adds	r3, #38	@ 0x26
 80064f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f040 80a9 	bne.w	8006650 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006514:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800651c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e08e      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	334d      	adds	r3, #77	@ 0x4d
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d143      	bne.n	80065d0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	334d      	adds	r3, #77	@ 0x4d
 8006558:	2202      	movs	r2, #2
 800655a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	334c      	adds	r3, #76	@ 0x4c
 800656c:	2202      	movs	r2, #2
 800656e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	3326      	adds	r3, #38	@ 0x26
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3326      	adds	r3, #38	@ 0x26
 8006596:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006598:	2b02      	cmp	r3, #2
 800659a:	d159      	bne.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c8:	461a      	mov	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e03f      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	334d      	adds	r3, #77	@ 0x4d
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d126      	bne.n	8006634 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	334d      	adds	r3, #77	@ 0x4d
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3344      	adds	r3, #68	@ 0x44
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	1c59      	adds	r1, r3, #1
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4403      	add	r3, r0
 800661a:	3344      	adds	r3, #68	@ 0x44
 800661c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800661e:	78fa      	ldrb	r2, [r7, #3]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	334c      	adds	r3, #76	@ 0x4c
 800662e:	2204      	movs	r2, #4
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e00d      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	334d      	adds	r3, #77	@ 0x4d
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b02      	cmp	r3, #2
 8006648:	f000 8100 	beq.w	800684c <HCD_HC_IN_IRQHandler+0xcca>
 800664c:	e000      	b.n	8006650 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800664e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	334c      	adds	r3, #76	@ 0x4c
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f00c ff6c 	bl	8013544 <HAL_HCD_HC_NotifyURBChange_Callback>
 800666c:	e0ef      	b.n	800684e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f006 fb93 	bl	800cda2 <USB_ReadChInterrupts>
 800667c:	4603      	mov	r3, r0
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d12f      	bne.n	80066e6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006692:	461a      	mov	r2, r3
 8006694:	2340      	movs	r3, #64	@ 0x40
 8006696:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006698:	78fa      	ldrb	r2, [r7, #3]
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	334d      	adds	r3, #77	@ 0x4d
 80066a8:	2205      	movs	r2, #5
 80066aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4613      	mov	r3, r2
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	331a      	adds	r3, #26
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	3344      	adds	r3, #68	@ 0x44
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f007 f8f7 	bl	800d8d2 <USB_HC_Halt>
 80066e4:	e0b3      	b.n	800684e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	4611      	mov	r1, r2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f006 fb57 	bl	800cda2 <USB_ReadChInterrupts>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f003 0310 	and.w	r3, r3, #16
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	f040 80a7 	bne.w	800684e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	3326      	adds	r3, #38	@ 0x26
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d11b      	bne.n	800674e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	3344      	adds	r3, #68	@ 0x44
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	334d      	adds	r3, #77	@ 0x4d
 800673a:	2204      	movs	r2, #4
 800673c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f007 f8c3 	bl	800d8d2 <USB_HC_Halt>
 800674c:	e03f      	b.n	80067ce <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3326      	adds	r3, #38	@ 0x26
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	3326      	adds	r3, #38	@ 0x26
 8006774:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006776:	2b02      	cmp	r3, #2
 8006778:	d129      	bne.n	80067ce <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	3344      	adds	r3, #68	@ 0x44
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	799b      	ldrb	r3, [r3, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HCD_HC_IN_IRQHandler+0xc2a>
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	331b      	adds	r3, #27
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d110      	bne.n	80067ce <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	334d      	adds	r3, #77	@ 0x4d
 80067bc:	2204      	movs	r2, #4
 80067be:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f007 f882 	bl	800d8d2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	331b      	adds	r3, #27
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d129      	bne.n	8006838 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	331b      	adds	r3, #27
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	440a      	add	r2, r1
 800680e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006816:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	440a      	add	r2, r1
 800682e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006832:	f043 0320 	orr.w	r3, r3, #32
 8006836:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4413      	add	r3, r2
 8006840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006844:	461a      	mov	r2, r3
 8006846:	2310      	movs	r3, #16
 8006848:	6093      	str	r3, [r2, #8]
 800684a:	e000      	b.n	800684e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800684c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f006 fa95 	bl	800cda2 <USB_ReadChInterrupts>
 8006878:	4603      	mov	r3, r0
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b04      	cmp	r3, #4
 8006880:	d11b      	bne.n	80068ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688e:	461a      	mov	r2, r3
 8006890:	2304      	movs	r3, #4
 8006892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	334d      	adds	r3, #77	@ 0x4d
 80068a4:	2207      	movs	r2, #7
 80068a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f007 f80e 	bl	800d8d2 <USB_HC_Halt>
 80068b6:	f000 bc89 	b.w	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f006 fa6d 	bl	800cda2 <USB_ReadChInterrupts>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	f040 8082 	bne.w	80069d8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	461a      	mov	r2, r3
 80068e2:	2320      	movs	r3, #32
 80068e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3319      	adds	r3, #25
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d124      	bne.n	8006946 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3319      	adds	r3, #25
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	334c      	adds	r3, #76	@ 0x4c
 8006920:	2202      	movs	r2, #2
 8006922:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006924:	78fa      	ldrb	r2, [r7, #3]
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	334d      	adds	r3, #77	@ 0x4d
 8006934:	2203      	movs	r2, #3
 8006936:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f006 ffc6 	bl	800d8d2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	331a      	adds	r3, #26
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	f040 8437 	bne.w	80071cc <HCD_HC_OUT_IRQHandler+0x978>
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	331b      	adds	r3, #27
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 842b 	bne.w	80071cc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	3326      	adds	r3, #38	@ 0x26
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d009      	beq.n	80069a0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	331b      	adds	r3, #27
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	334d      	adds	r3, #77	@ 0x4d
 80069b0:	2203      	movs	r2, #3
 80069b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f006 ff88 	bl	800d8d2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	3344      	adds	r3, #68	@ 0x44
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e3f9      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f006 f9de 	bl	800cda2 <USB_ReadChInterrupts>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f0:	d111      	bne.n	8006a16 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fe:	461a      	mov	r2, r3
 8006a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f006 ff5f 	bl	800d8d2 <USB_HC_Halt>
 8006a14:	e3da      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f006 f9bf 	bl	800cda2 <USB_ReadChInterrupts>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d168      	bne.n	8006b00 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3344      	adds	r3, #68	@ 0x44
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f006 f9a9 	bl	800cda2 <USB_ReadChInterrupts>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b40      	cmp	r3, #64	@ 0x40
 8006a58:	d112      	bne.n	8006a80 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3319      	adds	r3, #25
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2340      	movs	r3, #64	@ 0x40
 8006a7e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	331b      	adds	r3, #27
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d019      	beq.n	8006aca <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	331b      	adds	r3, #27
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2301      	movs	r3, #1
 8006ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	334d      	adds	r3, #77	@ 0x4d
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f006 feea 	bl	800d8d2 <USB_HC_Halt>
 8006afe:	e365      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	78fa      	ldrb	r2, [r7, #3]
 8006b06:	4611      	mov	r1, r2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f006 f94a 	bl	800cda2 <USB_ReadChInterrupts>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b14:	2b40      	cmp	r3, #64	@ 0x40
 8006b16:	d139      	bne.n	8006b8c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	334d      	adds	r3, #77	@ 0x4d
 8006b28:	2205      	movs	r2, #5
 8006b2a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006b2c:	78fa      	ldrb	r2, [r7, #3]
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	331a      	adds	r3, #26
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	3319      	adds	r3, #25
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3344      	adds	r3, #68	@ 0x44
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f006 fead 	bl	800d8d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b84:	461a      	mov	r2, r3
 8006b86:	2340      	movs	r3, #64	@ 0x40
 8006b88:	6093      	str	r3, [r2, #8]
 8006b8a:	e31f      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f006 f904 	bl	800cda2 <USB_ReadChInterrupts>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d11a      	bne.n	8006bda <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	334d      	adds	r3, #77	@ 0x4d
 8006bc6:	2206      	movs	r2, #6
 8006bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f006 fe7d 	bl	800d8d2 <USB_HC_Halt>
 8006bd8:	e2f8      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f006 f8dd 	bl	800cda2 <USB_ReadChInterrupts>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d144      	bne.n	8006c7c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	3344      	adds	r3, #68	@ 0x44
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	334d      	adds	r3, #77	@ 0x4d
 8006c16:	2204      	movs	r2, #4
 8006c18:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	3319      	adds	r3, #25
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d114      	bne.n	8006c5a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3318      	adds	r3, #24
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3319      	adds	r3, #25
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f006 fe35 	bl	800d8d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c74:	461a      	mov	r2, r3
 8006c76:	2310      	movs	r3, #16
 8006c78:	6093      	str	r3, [r2, #8]
 8006c7a:	e2a7      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f006 f88c 	bl	800cda2 <USB_ReadChInterrupts>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c90:	2b80      	cmp	r3, #128	@ 0x80
 8006c92:	f040 8083 	bne.w	8006d9c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	799b      	ldrb	r3, [r3, #6]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d111      	bne.n	8006cc2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	334d      	adds	r3, #77	@ 0x4d
 8006cae:	2207      	movs	r2, #7
 8006cb0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f006 fe09 	bl	800d8d2 <USB_HC_Halt>
 8006cc0:	e062      	b.n	8006d88 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3344      	adds	r3, #68	@ 0x44
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4403      	add	r3, r0
 8006ce2:	3344      	adds	r3, #68	@ 0x44
 8006ce4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	3344      	adds	r3, #68	@ 0x44
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d922      	bls.n	8006d42 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	3344      	adds	r3, #68	@ 0x44
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	334c      	adds	r3, #76	@ 0x4c
 8006d20:	2204      	movs	r2, #4
 8006d22:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	334c      	adds	r3, #76	@ 0x4c
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f00c fc02 	bl	8013544 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006d40:	e022      	b.n	8006d88 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	334c      	adds	r3, #76	@ 0x4c
 8006d52:	2202      	movs	r2, #2
 8006d54:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d82:	461a      	mov	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d94:	461a      	mov	r2, r3
 8006d96:	2380      	movs	r3, #128	@ 0x80
 8006d98:	6093      	str	r3, [r2, #8]
 8006d9a:	e217      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f005 fffc 	bl	800cda2 <USB_ReadChInterrupts>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db4:	d11b      	bne.n	8006dee <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	334d      	adds	r3, #77	@ 0x4d
 8006dc6:	2209      	movs	r2, #9
 8006dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f006 fd7d 	bl	800d8d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de4:	461a      	mov	r2, r3
 8006de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dea:	6093      	str	r3, [r2, #8]
 8006dec:	e1ee      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f005 ffd3 	bl	800cda2 <USB_ReadChInterrupts>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	f040 81df 	bne.w	80071c6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e14:	461a      	mov	r2, r3
 8006e16:	2302      	movs	r3, #2
 8006e18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	334d      	adds	r3, #77	@ 0x4d
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 8093 	bne.w	8006f58 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	334d      	adds	r3, #77	@ 0x4d
 8006e42:	2202      	movs	r2, #2
 8006e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	334c      	adds	r3, #76	@ 0x4c
 8006e56:	2201      	movs	r2, #1
 8006e58:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3326      	adds	r3, #38	@ 0x26
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d00b      	beq.n	8006e88 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3326      	adds	r3, #38	@ 0x26
 8006e80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	f040 8190 	bne.w	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	799b      	ldrb	r3, [r3, #6]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d115      	bne.n	8006ebc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006e90:	78fa      	ldrb	r2, [r7, #3]
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	333d      	adds	r3, #61	@ 0x3d
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	f083 0301 	eor.w	r3, r3, #1
 8006ea8:	b2d8      	uxtb	r0, r3
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	333d      	adds	r3, #61	@ 0x3d
 8006eb8:	4602      	mov	r2, r0
 8006eba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	799b      	ldrb	r3, [r3, #6]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	f040 8171 	bne.w	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3334      	adds	r3, #52	@ 0x34
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8165 	beq.w	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3334      	adds	r3, #52	@ 0x34
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4403      	add	r3, r0
 8006efe:	3328      	adds	r3, #40	@ 0x28
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	440b      	add	r3, r1
 8006f04:	1e59      	subs	r1, r3, #1
 8006f06:	78fa      	ldrb	r2, [r7, #3]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4403      	add	r3, r0
 8006f14:	3328      	adds	r3, #40	@ 0x28
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f1c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 813f 	beq.w	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	333d      	adds	r3, #61	@ 0x3d
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	f083 0301 	eor.w	r3, r3, #1
 8006f42:	b2d8      	uxtb	r0, r3
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	333d      	adds	r3, #61	@ 0x3d
 8006f52:	4602      	mov	r2, r0
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e127      	b.n	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	334d      	adds	r3, #77	@ 0x4d
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d120      	bne.n	8006fb0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	334d      	adds	r3, #77	@ 0x4d
 8006f7e:	2202      	movs	r2, #2
 8006f80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	331b      	adds	r3, #27
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	f040 8107 	bne.w	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	334c      	adds	r3, #76	@ 0x4c
 8006faa:	2202      	movs	r2, #2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e0fb      	b.n	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	334d      	adds	r3, #77	@ 0x4d
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d13a      	bne.n	800703c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	334d      	adds	r3, #77	@ 0x4d
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	334c      	adds	r3, #76	@ 0x4c
 8006fea:	2202      	movs	r2, #2
 8006fec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	331b      	adds	r3, #27
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	f040 80d1 	bne.w	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	331b      	adds	r3, #27
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	440a      	add	r2, r1
 8007030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007038:	6053      	str	r3, [r2, #4]
 800703a:	e0b5      	b.n	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	334d      	adds	r3, #77	@ 0x4d
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b05      	cmp	r3, #5
 8007050:	d114      	bne.n	800707c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	334d      	adds	r3, #77	@ 0x4d
 8007062:	2202      	movs	r2, #2
 8007064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	334c      	adds	r3, #76	@ 0x4c
 8007076:	2202      	movs	r2, #2
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e095      	b.n	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	334d      	adds	r3, #77	@ 0x4d
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b06      	cmp	r3, #6
 8007090:	d114      	bne.n	80070bc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	334d      	adds	r3, #77	@ 0x4d
 80070a2:	2202      	movs	r2, #2
 80070a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80070a6:	78fa      	ldrb	r2, [r7, #3]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	334c      	adds	r3, #76	@ 0x4c
 80070b6:	2205      	movs	r2, #5
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e075      	b.n	80071a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	334d      	adds	r3, #77	@ 0x4d
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b07      	cmp	r3, #7
 80070d0:	d00a      	beq.n	80070e8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	334d      	adds	r3, #77	@ 0x4d
 80070e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80070e4:	2b09      	cmp	r3, #9
 80070e6:	d170      	bne.n	80071ca <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4613      	mov	r3, r2
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	334d      	adds	r3, #77	@ 0x4d
 80070f8:	2202      	movs	r2, #2
 80070fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80070fc:	78fa      	ldrb	r2, [r7, #3]
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3344      	adds	r3, #68	@ 0x44
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	1a9b      	subs	r3, r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4403      	add	r3, r0
 800711c:	3344      	adds	r3, #68	@ 0x44
 800711e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007120:	78fa      	ldrb	r2, [r7, #3]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	3344      	adds	r3, #68	@ 0x44
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d914      	bls.n	8007160 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	3344      	adds	r3, #68	@ 0x44
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800714a:	78fa      	ldrb	r2, [r7, #3]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	334c      	adds	r3, #76	@ 0x4c
 800715a:	2204      	movs	r2, #4
 800715c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800715e:	e022      	b.n	80071a6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007160:	78fa      	ldrb	r2, [r7, #3]
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	334c      	adds	r3, #76	@ 0x4c
 8007170:	2202      	movs	r2, #2
 8007172:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4413      	add	r3, r2
 800717c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800718a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007192:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a0:	461a      	mov	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80071a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80071a8:	78fa      	ldrb	r2, [r7, #3]
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4613      	mov	r3, r2
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	440b      	add	r3, r1
 80071b6:	334c      	adds	r3, #76	@ 0x4c
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f00c f9c0 	bl	8013544 <HAL_HCD_HC_NotifyURBChange_Callback>
 80071c4:	e002      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80071ca:	bf00      	nop
  }
}
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b08a      	sub	sp, #40	@ 0x28
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	0c5b      	lsrs	r3, r3, #17
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	091b      	lsrs	r3, r3, #4
 8007202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007206:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d004      	beq.n	8007218 <HCD_RXQLVL_IRQHandler+0x46>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b05      	cmp	r3, #5
 8007212:	f000 80b6 	beq.w	8007382 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007216:	e0b7      	b.n	8007388 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 80b3 	beq.w	8007386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4613      	mov	r3, r2
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	332c      	adds	r3, #44	@ 0x2c
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80a7 	beq.w	8007386 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	4613      	mov	r3, r2
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	3338      	adds	r3, #56	@ 0x38
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	18d1      	adds	r1, r2, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	4613      	mov	r3, r2
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4403      	add	r3, r0
 800725c:	3334      	adds	r3, #52	@ 0x34
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4299      	cmp	r1, r3
 8007262:	f200 8083 	bhi.w	800736c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	4613      	mov	r3, r2
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	440b      	add	r3, r1
 8007278:	332c      	adds	r3, #44	@ 0x2c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	b292      	uxth	r2, r2
 8007280:	4619      	mov	r1, r3
 8007282:	f005 fd23 	bl	800cccc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4613      	mov	r3, r2
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	332c      	adds	r3, #44	@ 0x2c
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	18d1      	adds	r1, r2, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4613      	mov	r3, r2
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4403      	add	r3, r0
 80072aa:	332c      	adds	r3, #44	@ 0x2c
 80072ac:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4613      	mov	r3, r2
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3338      	adds	r3, #56	@ 0x38
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	18d1      	adds	r1, r2, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	4613      	mov	r3, r2
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	1a9b      	subs	r3, r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4403      	add	r3, r0
 80072d2:	3338      	adds	r3, #56	@ 0x38
 80072d4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	0cdb      	lsrs	r3, r3, #19
 80072e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4613      	mov	r3, r2
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3328      	adds	r3, #40	@ 0x28
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4293      	cmp	r3, r2
 8007304:	d13f      	bne.n	8007386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d03c      	beq.n	8007386 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007322:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800732a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007338:	461a      	mov	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4613      	mov	r3, r2
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	333c      	adds	r3, #60	@ 0x3c
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f083 0301 	eor.w	r3, r3, #1
 8007354:	b2d8      	uxtb	r0, r3
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4613      	mov	r3, r2
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	440b      	add	r3, r1
 8007364:	333c      	adds	r3, #60	@ 0x3c
 8007366:	4602      	mov	r2, r0
 8007368:	701a      	strb	r2, [r3, #0]
      break;
 800736a:	e00c      	b.n	8007386 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4613      	mov	r3, r2
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	334c      	adds	r3, #76	@ 0x4c
 800737c:	2204      	movs	r2, #4
 800737e:	701a      	strb	r2, [r3, #0]
      break;
 8007380:	e001      	b.n	8007386 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007382:	bf00      	nop
 8007384:	e000      	b.n	8007388 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007386:	bf00      	nop
  }
}
 8007388:	bf00      	nop
 800738a:	3728      	adds	r7, #40	@ 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80073bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d10b      	bne.n	80073e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d102      	bne.n	80073d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f00c f89a 	bl	801350c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f043 0302 	orr.w	r3, r3, #2
 80073de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d132      	bne.n	8007450 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d126      	bne.n	800744a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7a5b      	ldrb	r3, [r3, #9]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d113      	bne.n	800742c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800740a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800740e:	d106      	bne.n	800741e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2102      	movs	r1, #2
 8007416:	4618      	mov	r0, r3
 8007418:	f005 fddc 	bl	800cfd4 <USB_InitFSLSPClkSel>
 800741c:	e011      	b.n	8007442 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2101      	movs	r1, #1
 8007424:	4618      	mov	r0, r3
 8007426:	f005 fdd5 	bl	800cfd4 <USB_InitFSLSPClkSel>
 800742a:	e00a      	b.n	8007442 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	79db      	ldrb	r3, [r3, #7]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d106      	bne.n	8007442 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800743a:	461a      	mov	r2, r3
 800743c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007440:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f00c f88c 	bl	8013560 <HAL_HCD_PortEnabled_Callback>
 8007448:	e002      	b.n	8007450 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f00c f896 	bl	801357c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b20      	cmp	r3, #32
 8007458:	d103      	bne.n	8007462 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f043 0320 	orr.w	r3, r3, #32
 8007460:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007468:	461a      	mov	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6013      	str	r3, [r2, #0]
}
 800746e:	bf00      	nop
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e12b      	b.n	80076e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb f9b4 	bl	800280c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	@ 0x24
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074dc:	f000 ff82 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 80074e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4a81      	ldr	r2, [pc, #516]	@ (80076ec <HAL_I2C_Init+0x274>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d807      	bhi.n	80074fc <HAL_I2C_Init+0x84>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a80      	ldr	r2, [pc, #512]	@ (80076f0 <HAL_I2C_Init+0x278>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bf94      	ite	ls
 80074f4:	2301      	movls	r3, #1
 80074f6:	2300      	movhi	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	e006      	b.n	800750a <HAL_I2C_Init+0x92>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4a7d      	ldr	r2, [pc, #500]	@ (80076f4 <HAL_I2C_Init+0x27c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	bf94      	ite	ls
 8007504:	2301      	movls	r3, #1
 8007506:	2300      	movhi	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e0e7      	b.n	80076e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a78      	ldr	r2, [pc, #480]	@ (80076f8 <HAL_I2C_Init+0x280>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	0c9b      	lsrs	r3, r3, #18
 800751c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a6a      	ldr	r2, [pc, #424]	@ (80076ec <HAL_I2C_Init+0x274>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d802      	bhi.n	800754c <HAL_I2C_Init+0xd4>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	3301      	adds	r3, #1
 800754a:	e009      	b.n	8007560 <HAL_I2C_Init+0xe8>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	4a69      	ldr	r2, [pc, #420]	@ (80076fc <HAL_I2C_Init+0x284>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	099b      	lsrs	r3, r3, #6
 800755e:	3301      	adds	r3, #1
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	430b      	orrs	r3, r1
 8007566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007572:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	495c      	ldr	r1, [pc, #368]	@ (80076ec <HAL_I2C_Init+0x274>)
 800757c:	428b      	cmp	r3, r1
 800757e:	d819      	bhi.n	80075b4 <HAL_I2C_Init+0x13c>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1e59      	subs	r1, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	fbb1 f3f3 	udiv	r3, r1, r3
 800758e:	1c59      	adds	r1, r3, #1
 8007590:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007594:	400b      	ands	r3, r1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <HAL_I2C_Init+0x138>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1e59      	subs	r1, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80075a8:	3301      	adds	r3, #1
 80075aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ae:	e051      	b.n	8007654 <HAL_I2C_Init+0x1dc>
 80075b0:	2304      	movs	r3, #4
 80075b2:	e04f      	b.n	8007654 <HAL_I2C_Init+0x1dc>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d111      	bne.n	80075e0 <HAL_I2C_Init+0x168>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	1e58      	subs	r0, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6859      	ldr	r1, [r3, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	440b      	add	r3, r1
 80075ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80075ce:	3301      	adds	r3, #1
 80075d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e012      	b.n	8007606 <HAL_I2C_Init+0x18e>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	1e58      	subs	r0, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6859      	ldr	r1, [r3, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	0099      	lsls	r1, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075f6:	3301      	adds	r3, #1
 80075f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <HAL_I2C_Init+0x196>
 800760a:	2301      	movs	r3, #1
 800760c:	e022      	b.n	8007654 <HAL_I2C_Init+0x1dc>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10e      	bne.n	8007634 <HAL_I2C_Init+0x1bc>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1e58      	subs	r0, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	440b      	add	r3, r1
 8007624:	fbb0 f3f3 	udiv	r3, r0, r3
 8007628:	3301      	adds	r3, #1
 800762a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800762e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007632:	e00f      	b.n	8007654 <HAL_I2C_Init+0x1dc>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	1e58      	subs	r0, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6859      	ldr	r1, [r3, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	0099      	lsls	r1, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	fbb0 f3f3 	udiv	r3, r0, r3
 800764a:	3301      	adds	r3, #1
 800764c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	6809      	ldr	r1, [r1, #0]
 8007658:	4313      	orrs	r3, r2
 800765a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69da      	ldr	r2, [r3, #28]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6911      	ldr	r1, [r2, #16]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68d2      	ldr	r2, [r2, #12]
 800768e:	4311      	orrs	r1, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6812      	ldr	r2, [r2, #0]
 8007694:	430b      	orrs	r3, r1
 8007696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	000186a0 	.word	0x000186a0
 80076f0:	001e847f 	.word	0x001e847f
 80076f4:	003d08ff 	.word	0x003d08ff
 80076f8:	431bde83 	.word	0x431bde83
 80076fc:	10624dd3 	.word	0x10624dd3

08007700 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e0bf      	b.n	8007892 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fb f8ee 	bl	8002908 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007742:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6999      	ldr	r1, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007758:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6899      	ldr	r1, [r3, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b4a      	ldr	r3, [pc, #296]	@ (800789c <HAL_LTDC_Init+0x19c>)
 8007774:	400b      	ands	r3, r1
 8007776:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	041b      	lsls	r3, r3, #16
 800777e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6899      	ldr	r1, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68d9      	ldr	r1, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	4b3e      	ldr	r3, [pc, #248]	@ (800789c <HAL_LTDC_Init+0x19c>)
 80077a2:	400b      	ands	r3, r1
 80077a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68d9      	ldr	r1, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6919      	ldr	r1, [r3, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4b33      	ldr	r3, [pc, #204]	@ (800789c <HAL_LTDC_Init+0x19c>)
 80077d0:	400b      	ands	r3, r1
 80077d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	041b      	lsls	r3, r3, #16
 80077da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6919      	ldr	r1, [r3, #16]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6959      	ldr	r1, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	4b27      	ldr	r3, [pc, #156]	@ (800789c <HAL_LTDC_Init+0x19c>)
 80077fe:	400b      	ands	r3, r1
 8007800:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6959      	ldr	r1, [r3, #20]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0206 	orr.w	r2, r2, #6
 800786e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	f000f800 	.word	0xf000f800

080078a0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d023      	beq.n	800790a <HAL_LTDC_IRQHandler+0x6a>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01e      	beq.n	800790a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0204 	bic.w	r2, r2, #4
 80078da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2204      	movs	r2, #4
 80078e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078ea:	f043 0201 	orr.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2204      	movs	r2, #4
 80078f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f86f 	bl	80079e8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d023      	beq.n	800795c <HAL_LTDC_IRQHandler+0xbc>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01e      	beq.n	800795c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0202 	bic.w	r2, r2, #2
 800792c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2202      	movs	r2, #2
 8007934:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800793c:	f043 0202 	orr.w	r2, r3, #2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f846 	bl	80079e8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01b      	beq.n	800799e <HAL_LTDC_IRQHandler+0xfe>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d016      	beq.n	800799e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2201      	movs	r2, #1
 8007986:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f82f 	bl	80079fc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f003 0308 	and.w	r3, r3, #8
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01b      	beq.n	80079e0 <HAL_LTDC_IRQHandler+0x140>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d016      	beq.n	80079e0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0208 	bic.w	r2, r2, #8
 80079c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2208      	movs	r2, #8
 80079c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f818 	bl	8007a10 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a24:	b5b0      	push	{r4, r5, r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_LTDC_ConfigLayer+0x1a>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e02c      	b.n	8007a98 <HAL_LTDC_ConfigLayer+0x74>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2134      	movs	r1, #52	@ 0x34
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4614      	mov	r4, r2
 8007a62:	461d      	mov	r5, r3
 8007a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f811 	bl	8007aa0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2201      	movs	r2, #1
 8007a84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bdb0      	pop	{r4, r5, r7, pc}

08007aa0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b089      	sub	sp, #36	@ 0x24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	0c1b      	lsrs	r3, r3, #16
 8007ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007abc:	4413      	add	r3, r2
 8007abe:	041b      	lsls	r3, r3, #16
 8007ac0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	01db      	lsls	r3, r3, #7
 8007acc:	4413      	add	r3, r2
 8007ace:	3384      	adds	r3, #132	@ 0x84
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	01d2      	lsls	r2, r2, #7
 8007adc:	440a      	add	r2, r1
 8007ade:	3284      	adds	r2, #132	@ 0x84
 8007ae0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007ae4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007af6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007af8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	01db      	lsls	r3, r3, #7
 8007b04:	440b      	add	r3, r1
 8007b06:	3384      	adds	r3, #132	@ 0x84
 8007b08:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007b0e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b1e:	4413      	add	r3, r2
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	01db      	lsls	r3, r3, #7
 8007b2e:	4413      	add	r3, r2
 8007b30:	3384      	adds	r3, #132	@ 0x84
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	01d2      	lsls	r2, r2, #7
 8007b3e:	440a      	add	r2, r1
 8007b40:	3284      	adds	r2, #132	@ 0x84
 8007b42:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007b46:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b56:	4413      	add	r3, r2
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	01db      	lsls	r3, r3, #7
 8007b64:	440b      	add	r3, r1
 8007b66:	3384      	adds	r3, #132	@ 0x84
 8007b68:	4619      	mov	r1, r3
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	461a      	mov	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	01db      	lsls	r3, r3, #7
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3384      	adds	r3, #132	@ 0x84
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	6812      	ldr	r2, [r2, #0]
 8007b84:	4611      	mov	r1, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	01d2      	lsls	r2, r2, #7
 8007b8a:	440a      	add	r2, r1
 8007b8c:	3284      	adds	r2, #132	@ 0x84
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	01db      	lsls	r3, r3, #7
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3384      	adds	r3, #132	@ 0x84
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	061b      	lsls	r3, r3, #24
 8007bc4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	01db      	lsls	r3, r3, #7
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3384      	adds	r3, #132	@ 0x84
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	01db      	lsls	r3, r3, #7
 8007be0:	4413      	add	r3, r2
 8007be2:	3384      	adds	r3, #132	@ 0x84
 8007be4:	461a      	mov	r2, r3
 8007be6:	2300      	movs	r3, #0
 8007be8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	01db      	lsls	r3, r3, #7
 8007c04:	440b      	add	r3, r1
 8007c06:	3384      	adds	r3, #132	@ 0x84
 8007c08:	4619      	mov	r1, r3
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	01db      	lsls	r3, r3, #7
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3384      	adds	r3, #132	@ 0x84
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	6812      	ldr	r2, [r2, #0]
 8007c24:	4611      	mov	r1, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	01d2      	lsls	r2, r2, #7
 8007c2a:	440a      	add	r2, r1
 8007c2c:	3284      	adds	r2, #132	@ 0x84
 8007c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c32:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	01db      	lsls	r3, r3, #7
 8007c3e:	4413      	add	r3, r2
 8007c40:	3384      	adds	r3, #132	@ 0x84
 8007c42:	461a      	mov	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	01db      	lsls	r3, r3, #7
 8007c54:	4413      	add	r3, r2
 8007c56:	3384      	adds	r3, #132	@ 0x84
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	01d2      	lsls	r2, r2, #7
 8007c64:	440a      	add	r2, r1
 8007c66:	3284      	adds	r2, #132	@ 0x84
 8007c68:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	69da      	ldr	r2, [r3, #28]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	6809      	ldr	r1, [r1, #0]
 8007c7e:	4608      	mov	r0, r1
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	01c9      	lsls	r1, r1, #7
 8007c84:	4401      	add	r1, r0
 8007c86:	3184      	adds	r1, #132	@ 0x84
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	01db      	lsls	r3, r3, #7
 8007c96:	4413      	add	r3, r2
 8007c98:	3384      	adds	r3, #132	@ 0x84
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	01db      	lsls	r3, r3, #7
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3384      	adds	r3, #132	@ 0x84
 8007caa:	461a      	mov	r2, r3
 8007cac:	2300      	movs	r3, #0
 8007cae:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	01db      	lsls	r3, r3, #7
 8007cba:	4413      	add	r3, r2
 8007cbc:	3384      	adds	r3, #132	@ 0x84
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d102      	bne.n	8007cd4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007cce:	2304      	movs	r3, #4
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	e01b      	b.n	8007d0c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d102      	bne.n	8007ce2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	e014      	b.n	8007d0c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d00b      	beq.n	8007d02 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d007      	beq.n	8007d02 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d003      	beq.n	8007d02 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007cfe:	2b07      	cmp	r3, #7
 8007d00:	d102      	bne.n	8007d08 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007d02:	2302      	movs	r3, #2
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e001      	b.n	8007d0c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	01db      	lsls	r3, r3, #7
 8007d16:	4413      	add	r3, r2
 8007d18:	3384      	adds	r3, #132	@ 0x84
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	4611      	mov	r1, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	01d2      	lsls	r2, r2, #7
 8007d26:	440a      	add	r2, r1
 8007d28:	3284      	adds	r2, #132	@ 0x84
 8007d2a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
 8007d3a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6859      	ldr	r1, [r3, #4]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	1acb      	subs	r3, r1, r3
 8007d46:	69f9      	ldr	r1, [r7, #28]
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007d4e:	68f9      	ldr	r1, [r7, #12]
 8007d50:	6809      	ldr	r1, [r1, #0]
 8007d52:	4608      	mov	r0, r1
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	01c9      	lsls	r1, r1, #7
 8007d58:	4401      	add	r1, r0
 8007d5a:	3184      	adds	r1, #132	@ 0x84
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	01db      	lsls	r3, r3, #7
 8007d6a:	4413      	add	r3, r2
 8007d6c:	3384      	adds	r3, #132	@ 0x84
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	4611      	mov	r1, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	01d2      	lsls	r2, r2, #7
 8007d7a:	440a      	add	r2, r1
 8007d7c:	3284      	adds	r2, #132	@ 0x84
 8007d7e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007d82:	f023 0307 	bic.w	r3, r3, #7
 8007d86:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	01db      	lsls	r3, r3, #7
 8007d92:	4413      	add	r3, r2
 8007d94:	3384      	adds	r3, #132	@ 0x84
 8007d96:	461a      	mov	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	01db      	lsls	r3, r3, #7
 8007da8:	4413      	add	r3, r2
 8007daa:	3384      	adds	r3, #132	@ 0x84
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	4611      	mov	r1, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	01d2      	lsls	r2, r2, #7
 8007db8:	440a      	add	r2, r1
 8007dba:	3284      	adds	r2, #132	@ 0x84
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6013      	str	r3, [r2, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	3724      	adds	r7, #36	@ 0x24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007dda:	2300      	movs	r3, #0
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	4b20      	ldr	r3, [pc, #128]	@ (8007e60 <HAL_PWREx_EnableOverDrive+0x90>)
 8007de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e60 <HAL_PWREx_EnableOverDrive+0x90>)
 8007de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dea:	4b1d      	ldr	r3, [pc, #116]	@ (8007e60 <HAL_PWREx_EnableOverDrive+0x90>)
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007df6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e64 <HAL_PWREx_EnableOverDrive+0x94>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007dfc:	f7fb fafa 	bl	80033f4 <HAL_GetTick>
 8007e00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e02:	e009      	b.n	8007e18 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e04:	f7fb faf6 	bl	80033f4 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e12:	d901      	bls.n	8007e18 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e01f      	b.n	8007e58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e18:	4b13      	ldr	r3, [pc, #76]	@ (8007e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e24:	d1ee      	bne.n	8007e04 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007e26:	4b11      	ldr	r3, [pc, #68]	@ (8007e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e2c:	f7fb fae2 	bl	80033f4 <HAL_GetTick>
 8007e30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e32:	e009      	b.n	8007e48 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e34:	f7fb fade 	bl	80033f4 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e42:	d901      	bls.n	8007e48 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e007      	b.n	8007e58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e48:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e54:	d1ee      	bne.n	8007e34 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40023800 	.word	0x40023800
 8007e64:	420e0040 	.word	0x420e0040
 8007e68:	40007000 	.word	0x40007000
 8007e6c:	420e0044 	.word	0x420e0044

08007e70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007e78:	f7fb fabc 	bl	80033f4 <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e069      	b.n	8007f5c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7fa fd5b 	bl	8002958 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007ea2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f85e 	bl	8007f68 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	021a      	lsls	r2, r3, #8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2120      	movs	r1, #32
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f856 	bl	8007f84 <QSPI_WaitFlagStateUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d137      	bne.n	8007f52 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007eec:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6852      	ldr	r2, [r2, #4]
 8007ef4:	0611      	lsls	r1, r2, #24
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	68d2      	ldr	r2, [r2, #12]
 8007efa:	4311      	orrs	r1, r2
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	69d2      	ldr	r2, [r2, #28]
 8007f00:	4311      	orrs	r1, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6a12      	ldr	r2, [r2, #32]
 8007f06:	4311      	orrs	r1, r2
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <HAL_QSPI_Init+0xf4>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6912      	ldr	r2, [r2, #16]
 8007f1e:	0411      	lsls	r1, r2, #16
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6952      	ldr	r2, [r2, #20]
 8007f24:	4311      	orrs	r1, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6992      	ldr	r2, [r2, #24]
 8007f2a:	4311      	orrs	r1, r2
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6812      	ldr	r2, [r2, #0]
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	ffe0f8fe 	.word	0xffe0f8fe

08007f68 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	4613      	mov	r3, r2
 8007f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007f94:	e01a      	b.n	8007fcc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d016      	beq.n	8007fcc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f9e:	f7fb fa29 	bl	80033f4 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d302      	bcc.n	8007fb4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc0:	f043 0201 	orr.w	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e00e      	b.n	8007fea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bf14      	ite	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	2300      	moveq	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d1d6      	bne.n	8007f96 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e0cc      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008008:	4b68      	ldr	r3, [pc, #416]	@ (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d90c      	bls.n	8008030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008016:	4b65      	ldr	r3, [pc, #404]	@ (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800801e:	4b63      	ldr	r3, [pc, #396]	@ (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d001      	beq.n	8008030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0b8      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d020      	beq.n	800807e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008048:	4b59      	ldr	r3, [pc, #356]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	4a58      	ldr	r2, [pc, #352]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008060:	4b53      	ldr	r3, [pc, #332]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	4a52      	ldr	r2, [pc, #328]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008066:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800806a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800806c:	4b50      	ldr	r3, [pc, #320]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	494d      	ldr	r1, [pc, #308]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 800807a:	4313      	orrs	r3, r2
 800807c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d044      	beq.n	8008114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d107      	bne.n	80080a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008092:	4b47      	ldr	r3, [pc, #284]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d119      	bne.n	80080d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e07f      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d003      	beq.n	80080b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d107      	bne.n	80080c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b2:	4b3f      	ldr	r3, [pc, #252]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e06f      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c2:	4b3b      	ldr	r3, [pc, #236]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e067      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080d2:	4b37      	ldr	r3, [pc, #220]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f023 0203 	bic.w	r2, r3, #3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	4934      	ldr	r1, [pc, #208]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080e4:	f7fb f986 	bl	80033f4 <HAL_GetTick>
 80080e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ea:	e00a      	b.n	8008102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ec:	f7fb f982 	bl	80033f4 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e04f      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008102:	4b2b      	ldr	r3, [pc, #172]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 020c 	and.w	r2, r3, #12
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	429a      	cmp	r2, r3
 8008112:	d1eb      	bne.n	80080ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008114:	4b25      	ldr	r3, [pc, #148]	@ (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 030f 	and.w	r3, r3, #15
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d20c      	bcs.n	800813c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008122:	4b22      	ldr	r3, [pc, #136]	@ (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800812a:	4b20      	ldr	r3, [pc, #128]	@ (80081ac <HAL_RCC_ClockConfig+0x1b8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 030f 	and.w	r3, r3, #15
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d001      	beq.n	800813c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e032      	b.n	80081a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d008      	beq.n	800815a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008148:	4b19      	ldr	r3, [pc, #100]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4916      	ldr	r1, [pc, #88]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008156:	4313      	orrs	r3, r2
 8008158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0308 	and.w	r3, r3, #8
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008166:	4b12      	ldr	r3, [pc, #72]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	490e      	ldr	r1, [pc, #56]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008176:	4313      	orrs	r3, r2
 8008178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800817a:	f000 f821 	bl	80081c0 <HAL_RCC_GetSysClockFreq>
 800817e:	4602      	mov	r2, r0
 8008180:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	091b      	lsrs	r3, r3, #4
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	490a      	ldr	r1, [pc, #40]	@ (80081b4 <HAL_RCC_ClockConfig+0x1c0>)
 800818c:	5ccb      	ldrb	r3, [r1, r3]
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	4a09      	ldr	r2, [pc, #36]	@ (80081b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008196:	4b09      	ldr	r3, [pc, #36]	@ (80081bc <HAL_RCC_ClockConfig+0x1c8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f7fa ff00 	bl	8002fa0 <HAL_InitTick>

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40023c00 	.word	0x40023c00
 80081b0:	40023800 	.word	0x40023800
 80081b4:	08014ee0 	.word	0x08014ee0
 80081b8:	20000000 	.word	0x20000000
 80081bc:	20000004 	.word	0x20000004

080081c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c4:	b094      	sub	sp, #80	@ 0x50
 80081c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081d8:	4b79      	ldr	r3, [pc, #484]	@ (80083c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f003 030c 	and.w	r3, r3, #12
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d00d      	beq.n	8008200 <HAL_RCC_GetSysClockFreq+0x40>
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	f200 80e1 	bhi.w	80083ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <HAL_RCC_GetSysClockFreq+0x34>
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d003      	beq.n	80081fa <HAL_RCC_GetSysClockFreq+0x3a>
 80081f2:	e0db      	b.n	80083ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081f4:	4b73      	ldr	r3, [pc, #460]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80081f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081f8:	e0db      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081fa:	4b73      	ldr	r3, [pc, #460]	@ (80083c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80081fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081fe:	e0d8      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008200:	4b6f      	ldr	r3, [pc, #444]	@ (80083c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008208:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800820a:	4b6d      	ldr	r3, [pc, #436]	@ (80083c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d063      	beq.n	80082de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008216:	4b6a      	ldr	r3, [pc, #424]	@ (80083c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	099b      	lsrs	r3, r3, #6
 800821c:	2200      	movs	r2, #0
 800821e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008220:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	633b      	str	r3, [r7, #48]	@ 0x30
 800822a:	2300      	movs	r3, #0
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
 800822e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008232:	4622      	mov	r2, r4
 8008234:	462b      	mov	r3, r5
 8008236:	f04f 0000 	mov.w	r0, #0
 800823a:	f04f 0100 	mov.w	r1, #0
 800823e:	0159      	lsls	r1, r3, #5
 8008240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008244:	0150      	lsls	r0, r2, #5
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4621      	mov	r1, r4
 800824c:	1a51      	subs	r1, r2, r1
 800824e:	6139      	str	r1, [r7, #16]
 8008250:	4629      	mov	r1, r5
 8008252:	eb63 0301 	sbc.w	r3, r3, r1
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008264:	4659      	mov	r1, fp
 8008266:	018b      	lsls	r3, r1, #6
 8008268:	4651      	mov	r1, sl
 800826a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800826e:	4651      	mov	r1, sl
 8008270:	018a      	lsls	r2, r1, #6
 8008272:	4651      	mov	r1, sl
 8008274:	ebb2 0801 	subs.w	r8, r2, r1
 8008278:	4659      	mov	r1, fp
 800827a:	eb63 0901 	sbc.w	r9, r3, r1
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800828a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800828e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008292:	4690      	mov	r8, r2
 8008294:	4699      	mov	r9, r3
 8008296:	4623      	mov	r3, r4
 8008298:	eb18 0303 	adds.w	r3, r8, r3
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	462b      	mov	r3, r5
 80082a0:	eb49 0303 	adc.w	r3, r9, r3
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	f04f 0200 	mov.w	r2, #0
 80082aa:	f04f 0300 	mov.w	r3, #0
 80082ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80082b2:	4629      	mov	r1, r5
 80082b4:	024b      	lsls	r3, r1, #9
 80082b6:	4621      	mov	r1, r4
 80082b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082bc:	4621      	mov	r1, r4
 80082be:	024a      	lsls	r2, r1, #9
 80082c0:	4610      	mov	r0, r2
 80082c2:	4619      	mov	r1, r3
 80082c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c6:	2200      	movs	r2, #0
 80082c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082d0:	f7f7 ffee 	bl	80002b0 <__aeabi_uldivmod>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4613      	mov	r3, r2
 80082da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082dc:	e058      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082de:	4b38      	ldr	r3, [pc, #224]	@ (80083c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	099b      	lsrs	r3, r3, #6
 80082e4:	2200      	movs	r2, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	4611      	mov	r1, r2
 80082ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082ee:	623b      	str	r3, [r7, #32]
 80082f0:	2300      	movs	r3, #0
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	f04f 0000 	mov.w	r0, #0
 8008300:	f04f 0100 	mov.w	r1, #0
 8008304:	0159      	lsls	r1, r3, #5
 8008306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800830a:	0150      	lsls	r0, r2, #5
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4641      	mov	r1, r8
 8008312:	ebb2 0a01 	subs.w	sl, r2, r1
 8008316:	4649      	mov	r1, r9
 8008318:	eb63 0b01 	sbc.w	fp, r3, r1
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800832c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008330:	ebb2 040a 	subs.w	r4, r2, sl
 8008334:	eb63 050b 	sbc.w	r5, r3, fp
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	00eb      	lsls	r3, r5, #3
 8008342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008346:	00e2      	lsls	r2, r4, #3
 8008348:	4614      	mov	r4, r2
 800834a:	461d      	mov	r5, r3
 800834c:	4643      	mov	r3, r8
 800834e:	18e3      	adds	r3, r4, r3
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	464b      	mov	r3, r9
 8008354:	eb45 0303 	adc.w	r3, r5, r3
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008366:	4629      	mov	r1, r5
 8008368:	028b      	lsls	r3, r1, #10
 800836a:	4621      	mov	r1, r4
 800836c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008370:	4621      	mov	r1, r4
 8008372:	028a      	lsls	r2, r1, #10
 8008374:	4610      	mov	r0, r2
 8008376:	4619      	mov	r1, r3
 8008378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800837a:	2200      	movs	r2, #0
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008384:	f7f7 ff94 	bl	80002b0 <__aeabi_uldivmod>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4613      	mov	r3, r2
 800838e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008390:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	0c1b      	lsrs	r3, r3, #16
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	3301      	adds	r3, #1
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80083a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083aa:	e002      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80083ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3750      	adds	r7, #80	@ 0x50
 80083b8:	46bd      	mov	sp, r7
 80083ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083be:	bf00      	nop
 80083c0:	40023800 	.word	0x40023800
 80083c4:	00f42400 	.word	0x00f42400
 80083c8:	007a1200 	.word	0x007a1200

080083cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d0:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d2:	681b      	ldr	r3, [r3, #0]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000000 	.word	0x20000000

080083e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083e8:	f7ff fff0 	bl	80083cc <HAL_RCC_GetHCLKFreq>
 80083ec:	4602      	mov	r2, r0
 80083ee:	4b05      	ldr	r3, [pc, #20]	@ (8008404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	0a9b      	lsrs	r3, r3, #10
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	4903      	ldr	r1, [pc, #12]	@ (8008408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fa:	5ccb      	ldrb	r3, [r1, r3]
 80083fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008400:	4618      	mov	r0, r3
 8008402:	bd80      	pop	{r7, pc}
 8008404:	40023800 	.word	0x40023800
 8008408:	08014ef0 	.word	0x08014ef0

0800840c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008410:	f7ff ffdc 	bl	80083cc <HAL_RCC_GetHCLKFreq>
 8008414:	4602      	mov	r2, r0
 8008416:	4b05      	ldr	r3, [pc, #20]	@ (800842c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	0b5b      	lsrs	r3, r3, #13
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	4903      	ldr	r1, [pc, #12]	@ (8008430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008422:	5ccb      	ldrb	r3, [r1, r3]
 8008424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008428:	4618      	mov	r0, r3
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40023800 	.word	0x40023800
 8008430:	08014ef0 	.word	0x08014ef0

08008434 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	220f      	movs	r2, #15
 8008442:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008444:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <HAL_RCC_GetClockConfig+0x5c>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0203 	and.w	r2, r3, #3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008450:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <HAL_RCC_GetClockConfig+0x5c>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800845c:	4b0c      	ldr	r3, [pc, #48]	@ (8008490 <HAL_RCC_GetClockConfig+0x5c>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008468:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <HAL_RCC_GetClockConfig+0x5c>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	08db      	lsrs	r3, r3, #3
 800846e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008476:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <HAL_RCC_GetClockConfig+0x60>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 020f 	and.w	r2, r3, #15
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	601a      	str	r2, [r3, #0]
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40023800 	.word	0x40023800
 8008494:	40023c00 	.word	0x40023c00

08008498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084c0:	4b66      	ldr	r3, [pc, #408]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084c6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ce:	4963      	ldr	r1, [pc, #396]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80084e2:	4b5e      	ldr	r3, [pc, #376]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f0:	495a      	ldr	r1, [pc, #360]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10b      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008518:	2b00      	cmp	r3, #0
 800851a:	d075      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800851c:	4b50      	ldr	r3, [pc, #320]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008522:	f7fa ff67 	bl	80033f4 <HAL_GetTick>
 8008526:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008528:	e008      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800852a:	f7fa ff63 	bl	80033f4 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e1dc      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800853c:	4b47      	ldr	r3, [pc, #284]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f0      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	019a      	lsls	r2, r3, #6
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	071b      	lsls	r3, r3, #28
 8008560:	493e      	ldr	r1, [pc, #248]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01f      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008574:	4b39      	ldr	r3, [pc, #228]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800857a:	0f1b      	lsrs	r3, r3, #28
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	019a      	lsls	r2, r3, #6
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	061b      	lsls	r3, r3, #24
 800858e:	431a      	orrs	r2, r3
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	071b      	lsls	r3, r3, #28
 8008594:	4931      	ldr	r1, [pc, #196]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008596:	4313      	orrs	r3, r2
 8008598:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800859c:	4b2f      	ldr	r3, [pc, #188]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800859e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a2:	f023 021f 	bic.w	r2, r3, #31
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	492b      	ldr	r1, [pc, #172]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00d      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	019a      	lsls	r2, r3, #6
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	061b      	lsls	r3, r3, #24
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	071b      	lsls	r3, r3, #28
 80085d4:	4921      	ldr	r1, [pc, #132]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80085dc:	4b20      	ldr	r3, [pc, #128]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80085de:	2201      	movs	r2, #1
 80085e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085e2:	f7fa ff07 	bl	80033f4 <HAL_GetTick>
 80085e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085e8:	e008      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085ea:	f7fa ff03 	bl	80033f4 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e17c      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085fc:	4b17      	ldr	r3, [pc, #92]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d112      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10c      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80ce 	beq.w	80087ca <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008636:	f040 80c8 	bne.w	80087ca <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800863a:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008640:	f7fa fed8 	bl	80033f4 <HAL_GetTick>
 8008644:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008646:	e00f      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008648:	f7fa fed4 	bl	80033f4 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d908      	bls.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e14d      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800865a:	bf00      	nop
 800865c:	40023800 	.word	0x40023800
 8008660:	42470068 	.word	0x42470068
 8008664:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008668:	4ba5      	ldr	r3, [pc, #660]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008674:	d0e8      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d02e      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008682:	4b9f      	ldr	r3, [pc, #636]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	3301      	adds	r3, #1
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008694:	4b9a      	ldr	r3, [pc, #616]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800869a:	0f1b      	lsrs	r3, r3, #28
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	019a      	lsls	r2, r3, #6
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	3b01      	subs	r3, #1
 80086ae:	041b      	lsls	r3, r3, #16
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	061b      	lsls	r3, r3, #24
 80086b8:	431a      	orrs	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	071b      	lsls	r3, r3, #28
 80086be:	4990      	ldr	r1, [pc, #576]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80086c6:	4b8e      	ldr	r3, [pc, #568]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d4:	3b01      	subs	r3, #1
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	4989      	ldr	r1, [pc, #548]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02c      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80086ec:	4b84      	ldr	r3, [pc, #528]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	3301      	adds	r3, #1
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086fe:	4b80      	ldr	r3, [pc, #512]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008704:	0e1b      	lsrs	r3, r3, #24
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	019a      	lsls	r2, r3, #6
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	3b01      	subs	r3, #1
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	431a      	orrs	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	431a      	orrs	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	071b      	lsls	r3, r3, #28
 8008728:	4975      	ldr	r1, [pc, #468]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008730:	4b73      	ldr	r3, [pc, #460]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008736:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873e:	4970      	ldr	r1, [pc, #448]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874e:	2b00      	cmp	r3, #0
 8008750:	d024      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800875a:	d11f      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800875c:	4b68      	ldr	r3, [pc, #416]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	0e1b      	lsrs	r3, r3, #24
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800876a:	4b65      	ldr	r3, [pc, #404]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800876c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008770:	0f1b      	lsrs	r3, r3, #28
 8008772:	f003 0307 	and.w	r3, r3, #7
 8008776:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	019a      	lsls	r2, r3, #6
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	3b01      	subs	r3, #1
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	431a      	orrs	r2, r3
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	431a      	orrs	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	071b      	lsls	r3, r3, #28
 8008794:	495a      	ldr	r1, [pc, #360]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800879c:	4b59      	ldr	r3, [pc, #356]	@ (8008904 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800879e:	2201      	movs	r2, #1
 80087a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087a2:	f7fa fe27 	bl	80033f4 <HAL_GetTick>
 80087a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087a8:	e008      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087aa:	f7fa fe23 	bl	80033f4 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d901      	bls.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e09c      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087bc:	4b50      	ldr	r3, [pc, #320]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c8:	d1ef      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 8083 	beq.w	80088de <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80087d8:	2300      	movs	r3, #0
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	4b48      	ldr	r3, [pc, #288]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e0:	4a47      	ldr	r2, [pc, #284]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80087e8:	4b45      	ldr	r3, [pc, #276]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80087f4:	4b44      	ldr	r3, [pc, #272]	@ (8008908 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a43      	ldr	r2, [pc, #268]	@ (8008908 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80087fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008800:	f7fa fdf8 	bl	80033f4 <HAL_GetTick>
 8008804:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008806:	e008      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008808:	f7fa fdf4 	bl	80033f4 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e06d      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800881a:	4b3b      	ldr	r3, [pc, #236]	@ (8008908 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008826:	4b36      	ldr	r3, [pc, #216]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800882a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800882e:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d02f      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	429a      	cmp	r2, r3
 8008842:	d028      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008844:	4b2e      	ldr	r3, [pc, #184]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800884c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800884e:	4b2f      	ldr	r3, [pc, #188]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008854:	4b2d      	ldr	r3, [pc, #180]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800885a:	4a29      	ldr	r2, [pc, #164]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008860:	4b27      	ldr	r3, [pc, #156]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	d114      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800886c:	f7fa fdc2 	bl	80033f4 <HAL_GetTick>
 8008870:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008872:	e00a      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008874:	f7fa fdbe 	bl	80033f4 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008882:	4293      	cmp	r3, r2
 8008884:	d901      	bls.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e035      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800888a:	4b1d      	ldr	r3, [pc, #116]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800888c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0ee      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800889e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088a2:	d10d      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80088a4:	4b16      	ldr	r3, [pc, #88]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80088b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b8:	4911      	ldr	r1, [pc, #68]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	e005      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80088c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	4a0e      	ldr	r2, [pc, #56]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80088ca:	6093      	str	r3, [r2, #8]
 80088cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088d8:	4909      	ldr	r1, [pc, #36]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80088f0:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80088f2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	40023800 	.word	0x40023800
 8008904:	42470070 	.word	0x42470070
 8008908:	40007000 	.word	0x40007000
 800890c:	42470e40 	.word	0x42470e40
 8008910:	424711e0 	.word	0x424711e0

08008914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e273      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d075      	beq.n	8008a1e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008932:	4b88      	ldr	r3, [pc, #544]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 030c 	and.w	r3, r3, #12
 800893a:	2b04      	cmp	r3, #4
 800893c:	d00c      	beq.n	8008958 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800893e:	4b85      	ldr	r3, [pc, #532]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 030c 	and.w	r3, r3, #12
        || \
 8008946:	2b08      	cmp	r3, #8
 8008948:	d112      	bne.n	8008970 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800894a:	4b82      	ldr	r3, [pc, #520]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008956:	d10b      	bne.n	8008970 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008958:	4b7e      	ldr	r3, [pc, #504]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d05b      	beq.n	8008a1c <HAL_RCC_OscConfig+0x108>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d157      	bne.n	8008a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e24e      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008978:	d106      	bne.n	8008988 <HAL_RCC_OscConfig+0x74>
 800897a:	4b76      	ldr	r3, [pc, #472]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a75      	ldr	r2, [pc, #468]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	e01d      	b.n	80089c4 <HAL_RCC_OscConfig+0xb0>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008990:	d10c      	bne.n	80089ac <HAL_RCC_OscConfig+0x98>
 8008992:	4b70      	ldr	r3, [pc, #448]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a6f      	ldr	r2, [pc, #444]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	4b6d      	ldr	r3, [pc, #436]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a6c      	ldr	r2, [pc, #432]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e00b      	b.n	80089c4 <HAL_RCC_OscConfig+0xb0>
 80089ac:	4b69      	ldr	r3, [pc, #420]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a68      	ldr	r2, [pc, #416]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	4b66      	ldr	r3, [pc, #408]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a65      	ldr	r2, [pc, #404]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d013      	beq.n	80089f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089cc:	f7fa fd12 	bl	80033f4 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089d4:	f7fa fd0e 	bl	80033f4 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b64      	cmp	r3, #100	@ 0x64
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e213      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089e6:	4b5b      	ldr	r3, [pc, #364]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0f0      	beq.n	80089d4 <HAL_RCC_OscConfig+0xc0>
 80089f2:	e014      	b.n	8008a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fa fcfe 	bl	80033f4 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089fc:	f7fa fcfa 	bl	80033f4 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b64      	cmp	r3, #100	@ 0x64
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e1ff      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a0e:	4b51      	ldr	r3, [pc, #324]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0xe8>
 8008a1a:	e000      	b.n	8008a1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d063      	beq.n	8008af2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 030c 	and.w	r3, r3, #12
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a36:	4b47      	ldr	r3, [pc, #284]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d11c      	bne.n	8008a7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a42:	4b44      	ldr	r3, [pc, #272]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d116      	bne.n	8008a7c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a4e:	4b41      	ldr	r3, [pc, #260]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d005      	beq.n	8008a66 <HAL_RCC_OscConfig+0x152>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d001      	beq.n	8008a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e1d3      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a66:	4b3b      	ldr	r3, [pc, #236]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	4937      	ldr	r1, [pc, #220]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a7a:	e03a      	b.n	8008af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d020      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a84:	4b34      	ldr	r3, [pc, #208]	@ (8008b58 <HAL_RCC_OscConfig+0x244>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8a:	f7fa fcb3 	bl	80033f4 <HAL_GetTick>
 8008a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a90:	e008      	b.n	8008aa4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a92:	f7fa fcaf 	bl	80033f4 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e1b4      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ab0:	4b28      	ldr	r3, [pc, #160]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	00db      	lsls	r3, r3, #3
 8008abe:	4925      	ldr	r1, [pc, #148]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	600b      	str	r3, [r1, #0]
 8008ac4:	e015      	b.n	8008af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ac6:	4b24      	ldr	r3, [pc, #144]	@ (8008b58 <HAL_RCC_OscConfig+0x244>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008acc:	f7fa fc92 	bl	80033f4 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ad4:	f7fa fc8e 	bl	80033f4 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e193      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f0      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d036      	beq.n	8008b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d016      	beq.n	8008b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b06:	4b15      	ldr	r3, [pc, #84]	@ (8008b5c <HAL_RCC_OscConfig+0x248>)
 8008b08:	2201      	movs	r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0c:	f7fa fc72 	bl	80033f4 <HAL_GetTick>
 8008b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b12:	e008      	b.n	8008b26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b14:	f7fa fc6e 	bl	80033f4 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d901      	bls.n	8008b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e173      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b26:	4b0b      	ldr	r3, [pc, #44]	@ (8008b54 <HAL_RCC_OscConfig+0x240>)
 8008b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0f0      	beq.n	8008b14 <HAL_RCC_OscConfig+0x200>
 8008b32:	e01b      	b.n	8008b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b34:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <HAL_RCC_OscConfig+0x248>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3a:	f7fa fc5b 	bl	80033f4 <HAL_GetTick>
 8008b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b40:	e00e      	b.n	8008b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b42:	f7fa fc57 	bl	80033f4 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d907      	bls.n	8008b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e15c      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
 8008b54:	40023800 	.word	0x40023800
 8008b58:	42470000 	.word	0x42470000
 8008b5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b60:	4b8a      	ldr	r3, [pc, #552]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1ea      	bne.n	8008b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 8097 	beq.w	8008ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b7e:	4b83      	ldr	r3, [pc, #524]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10f      	bne.n	8008baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60bb      	str	r3, [r7, #8]
 8008b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b92:	4a7e      	ldr	r2, [pc, #504]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba2:	60bb      	str	r3, [r7, #8]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008baa:	4b79      	ldr	r3, [pc, #484]	@ (8008d90 <HAL_RCC_OscConfig+0x47c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d118      	bne.n	8008be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bb6:	4b76      	ldr	r3, [pc, #472]	@ (8008d90 <HAL_RCC_OscConfig+0x47c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a75      	ldr	r2, [pc, #468]	@ (8008d90 <HAL_RCC_OscConfig+0x47c>)
 8008bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bc2:	f7fa fc17 	bl	80033f4 <HAL_GetTick>
 8008bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bca:	f7fa fc13 	bl	80033f4 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e118      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8008d90 <HAL_RCC_OscConfig+0x47c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0f0      	beq.n	8008bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d106      	bne.n	8008bfe <HAL_RCC_OscConfig+0x2ea>
 8008bf0:	4b66      	ldr	r3, [pc, #408]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf4:	4a65      	ldr	r2, [pc, #404]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bfc:	e01c      	b.n	8008c38 <HAL_RCC_OscConfig+0x324>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	d10c      	bne.n	8008c20 <HAL_RCC_OscConfig+0x30c>
 8008c06:	4b61      	ldr	r3, [pc, #388]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0a:	4a60      	ldr	r2, [pc, #384]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c0c:	f043 0304 	orr.w	r3, r3, #4
 8008c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c12:	4b5e      	ldr	r3, [pc, #376]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c16:	4a5d      	ldr	r2, [pc, #372]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c18:	f043 0301 	orr.w	r3, r3, #1
 8008c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c1e:	e00b      	b.n	8008c38 <HAL_RCC_OscConfig+0x324>
 8008c20:	4b5a      	ldr	r3, [pc, #360]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c24:	4a59      	ldr	r2, [pc, #356]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c26:	f023 0301 	bic.w	r3, r3, #1
 8008c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c2c:	4b57      	ldr	r3, [pc, #348]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c30:	4a56      	ldr	r2, [pc, #344]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c32:	f023 0304 	bic.w	r3, r3, #4
 8008c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d015      	beq.n	8008c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c40:	f7fa fbd8 	bl	80033f4 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c46:	e00a      	b.n	8008c5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c48:	f7fa fbd4 	bl	80033f4 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e0d7      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0ee      	beq.n	8008c48 <HAL_RCC_OscConfig+0x334>
 8008c6a:	e014      	b.n	8008c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6c:	f7fa fbc2 	bl	80033f4 <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c72:	e00a      	b.n	8008c8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c74:	f7fa fbbe 	bl	80033f4 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e0c1      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c8a:	4b40      	ldr	r3, [pc, #256]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1ee      	bne.n	8008c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d105      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 80ad 	beq.w	8008e0c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008cb2:	4b36      	ldr	r3, [pc, #216]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 030c 	and.w	r3, r3, #12
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d060      	beq.n	8008d80 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d145      	bne.n	8008d52 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cc6:	4b33      	ldr	r3, [pc, #204]	@ (8008d94 <HAL_RCC_OscConfig+0x480>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ccc:	f7fa fb92 	bl	80033f4 <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd4:	f7fa fb8e 	bl	80033f4 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e093      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ce6:	4b29      	ldr	r3, [pc, #164]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69da      	ldr	r2, [r3, #28]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d00:	019b      	lsls	r3, r3, #6
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d08:	085b      	lsrs	r3, r3, #1
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	041b      	lsls	r3, r3, #16
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1c:	071b      	lsls	r3, r3, #28
 8008d1e:	491b      	ldr	r1, [pc, #108]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d24:	4b1b      	ldr	r3, [pc, #108]	@ (8008d94 <HAL_RCC_OscConfig+0x480>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2a:	f7fa fb63 	bl	80033f4 <HAL_GetTick>
 8008d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d30:	e008      	b.n	8008d44 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d32:	f7fa fb5f 	bl	80033f4 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d901      	bls.n	8008d44 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e064      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d44:	4b11      	ldr	r3, [pc, #68]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0f0      	beq.n	8008d32 <HAL_RCC_OscConfig+0x41e>
 8008d50:	e05c      	b.n	8008e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d52:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <HAL_RCC_OscConfig+0x480>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d58:	f7fa fb4c 	bl	80033f4 <HAL_GetTick>
 8008d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d60:	f7fa fb48 	bl	80033f4 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e04d      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d72:	4b06      	ldr	r3, [pc, #24]	@ (8008d8c <HAL_RCC_OscConfig+0x478>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1f0      	bne.n	8008d60 <HAL_RCC_OscConfig+0x44c>
 8008d7e:	e045      	b.n	8008e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d107      	bne.n	8008d98 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e040      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	40007000 	.word	0x40007000
 8008d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d98:	4b1f      	ldr	r3, [pc, #124]	@ (8008e18 <HAL_RCC_OscConfig+0x504>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d030      	beq.n	8008e08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d129      	bne.n	8008e08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d122      	bne.n	8008e08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008dc8:	4013      	ands	r3, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d119      	bne.n	8008e08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	3b01      	subs	r3, #1
 8008de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d10f      	bne.n	8008e08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d107      	bne.n	8008e08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d001      	beq.n	8008e0c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e000      	b.n	8008e0e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40023800 	.word	0x40023800

08008e1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e10c      	b.n	8009058 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d106      	bne.n	8008e58 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fa f844 	bl	8002ee0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f903 	bl	800906c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f938 	bl	80090dc <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d030      	beq.n	8008ed6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f957 	bl	8009128 <SAI_GetInputClock>
 8008e7a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	025b      	lsls	r3, r3, #9
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4a72      	ldr	r2, [pc, #456]	@ (8009060 <HAL_SAI_Init+0x244>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	08da      	lsrs	r2, r3, #3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8009060 <HAL_SAI_Init+0x244>)
 8008ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8008eaa:	08da      	lsrs	r2, r3, #3
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	1aca      	subs	r2, r1, r3
 8008eb6:	2a08      	cmp	r2, #8
 8008eb8:	d904      	bls.n	8008ec4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d104      	bne.n	8008ed6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed0:	085a      	lsrs	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_SAI_Init+0xca>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d109      	bne.n	8008efa <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d101      	bne.n	8008ef2 <HAL_SAI_Init+0xd6>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e001      	b.n	8008ef6 <HAL_SAI_Init+0xda>
 8008ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e008      	b.n	8008f0c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d102      	bne.n	8008f08 <HAL_SAI_Init+0xec>
 8008f02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f06:	e000      	b.n	8008f0a <HAL_SAI_Init+0xee>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d811      	bhi.n	8008f38 <HAL_SAI_Init+0x11c>
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d20b      	bcs.n	8008f30 <HAL_SAI_Init+0x114>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_SAI_Init+0x106>
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d003      	beq.n	8008f28 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8008f20:	e00a      	b.n	8008f38 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	613b      	str	r3, [r7, #16]
    break;
 8008f26:	e008      	b.n	8008f3a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f2c:	613b      	str	r3, [r7, #16]
    break;
 8008f2e:	e004      	b.n	8008f3a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008f30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f34:	613b      	str	r3, [r7, #16]
    break;
 8008f36:	e000      	b.n	8008f3a <HAL_SAI_Init+0x11e>
      break;
 8008f38:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b47      	ldr	r3, [pc, #284]	@ (8009064 <HAL_SAI_Init+0x248>)
 8008f46:	400b      	ands	r3, r1
 8008f48:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6819      	ldr	r1, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f58:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f5e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f64:	431a      	orrs	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8008f72:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f7e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f84:	051b      	lsls	r3, r3, #20
 8008f86:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008f9e:	f023 030f 	bic.w	r3, r3, #15
 8008fa2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6859      	ldr	r1, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699a      	ldr	r2, [r3, #24]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6899      	ldr	r1, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b26      	ldr	r3, [pc, #152]	@ (8009068 <HAL_SAI_Init+0x24c>)
 8008fce:	400b      	ands	r3, r1
 8008fd0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6899      	ldr	r1, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fdc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fe2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8008fe8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8008fee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008ff8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68d9      	ldr	r1, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009010:	400b      	ands	r3, r1
 8009012:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68d9      	ldr	r1, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009022:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009028:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800902a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009030:	3b01      	subs	r3, #1
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	cccccccd 	.word	0xcccccccd
 8009064:	ff05c010 	.word	0xff05c010
 8009068:	fff88000 	.word	0xfff88000

0800906c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009074:	4b17      	ldr	r3, [pc, #92]	@ (80090d4 <SAI_Disable+0x68>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a17      	ldr	r2, [pc, #92]	@ (80090d8 <SAI_Disable+0x6c>)
 800907a:	fba2 2303 	umull	r2, r3, r2, r3
 800907e:	0b1b      	lsrs	r3, r3, #12
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009096:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	1e5a      	subs	r2, r3, #1
 800909c:	60fa      	str	r2, [r7, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	72fb      	strb	r3, [r7, #11]
      break;
 80090b6:	e006      	b.n	80090c6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e8      	bne.n	8009098 <SAI_Disable+0x2c>

  return status;
 80090c6:	7afb      	ldrb	r3, [r7, #11]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20000000 	.word	0x20000000
 80090d8:	95cbec1b 	.word	0x95cbec1b

080090dc <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d00c      	beq.n	8009106 <SAI_BlockSynchroConfig+0x2a>
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d80d      	bhi.n	800910c <SAI_BlockSynchroConfig+0x30>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SAI_BlockSynchroConfig+0x1e>
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d003      	beq.n	8009100 <SAI_BlockSynchroConfig+0x24>
 80090f8:	e008      	b.n	800910c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
      break;
 80090fe:	e008      	b.n	8009112 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009100:	2310      	movs	r3, #16
 8009102:	60fb      	str	r3, [r7, #12]
      break;
 8009104:	e005      	b.n	8009112 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009106:	2320      	movs	r3, #32
 8009108:	60fb      	str	r3, [r7, #12]
      break;
 800910a:	e002      	b.n	8009112 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]
      break;
 8009110:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8009112:	4a04      	ldr	r2, [pc, #16]	@ (8009124 <SAI_BlockSynchroConfig+0x48>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8009118:	bf00      	nop
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	40015800 	.word	0x40015800

08009128 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a46      	ldr	r2, [pc, #280]	@ (800925c <SAI_GetInputClock+0x134>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d10b      	bne.n	800915e <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8009146:	4b46      	ldr	r3, [pc, #280]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800914c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	4942      	ldr	r1, [pc, #264]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800915c:	e00b      	b.n	8009176 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800915e:	4b40      	ldr	r3, [pc, #256]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009164:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	493c      	ldr	r1, [pc, #240]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009170:	4313      	orrs	r3, r2
 8009172:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009176:	4b3a      	ldr	r3, [pc, #232]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d108      	bne.n	8009194 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009182:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800918a:	4a36      	ldr	r2, [pc, #216]	@ (8009264 <SAI_GetInputClock+0x13c>)
 800918c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	e007      	b.n	80091a4 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009194:	4b32      	ldr	r3, [pc, #200]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800919c:	4a32      	ldr	r2, [pc, #200]	@ (8009268 <SAI_GetInputClock+0x140>)
 800919e:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a2:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d121      	bne.n	80091f0 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80091ac:	4b2c      	ldr	r3, [pc, #176]	@ (8009260 <SAI_GetInputClock+0x138>)
 80091ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b2:	0e1b      	lsrs	r3, r3, #24
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80091ba:	4b29      	ldr	r3, [pc, #164]	@ (8009260 <SAI_GetInputClock+0x138>)
 80091bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091c0:	099b      	lsrs	r3, r3, #6
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	fb03 f202 	mul.w	r2, r3, r2
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d2:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80091d4:	4b22      	ldr	r3, [pc, #136]	@ (8009260 <SAI_GetInputClock+0x138>)
 80091d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	f003 031f 	and.w	r3, r3, #31
 80091e0:	3301      	adds	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e02d      	b.n	800924c <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091f8:	d120      	bne.n	800923c <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80091fa:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <SAI_GetInputClock+0x138>)
 80091fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009200:	0e1b      	lsrs	r3, r3, #24
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8009208:	4b15      	ldr	r3, [pc, #84]	@ (8009260 <SAI_GetInputClock+0x138>)
 800920a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800920e:	099b      	lsrs	r3, r3, #6
 8009210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	fb03 f202 	mul.w	r2, r3, r2
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8009222:	4b0f      	ldr	r3, [pc, #60]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009228:	f003 031f 	and.w	r3, r3, #31
 800922c:	3301      	adds	r3, #1
 800922e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	fbb2 f3f3 	udiv	r3, r2, r3
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	e007      	b.n	800924c <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800923c:	4b08      	ldr	r3, [pc, #32]	@ (8009260 <SAI_GetInputClock+0x138>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	4a07      	ldr	r2, [pc, #28]	@ (8009260 <SAI_GetInputClock+0x138>)
 8009242:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009246:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8009248:	4b08      	ldr	r3, [pc, #32]	@ (800926c <SAI_GetInputClock+0x144>)
 800924a:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800924c:	697b      	ldr	r3, [r7, #20]
}
 800924e:	4618      	mov	r0, r3
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40015804 	.word	0x40015804
 8009260:	40023800 	.word	0x40023800
 8009264:	00f42400 	.word	0x00f42400
 8009268:	007a1200 	.word	0x007a1200
 800926c:	00bb8000 	.word	0x00bb8000

08009270 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e022      	b.n	80092c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7f9 fbd9 	bl	8002a4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2203      	movs	r2, #3
 800929e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f814 	bl	80092d0 <HAL_SD_InitCard>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e00a      	b.n	80092c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80092d0:	b5b0      	push	{r4, r5, r7, lr}
 80092d2:	b08e      	sub	sp, #56	@ 0x38
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80092d8:	2300      	movs	r3, #0
 80092da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80092ec:	2376      	movs	r3, #118	@ 0x76
 80092ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681d      	ldr	r5, [r3, #0]
 80092f4:	466c      	mov	r4, sp
 80092f6:	f107 0314 	add.w	r3, r7, #20
 80092fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009308:	4628      	mov	r0, r5
 800930a:	f002 fe3d 	bl	800bf88 <SDIO_Init>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e04f      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009320:	4b29      	ldr	r3, [pc, #164]	@ (80093c8 <HAL_SD_InitCard+0xf8>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f002 fe75 	bl	800c01a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009330:	4b25      	ldr	r3, [pc, #148]	@ (80093c8 <HAL_SD_InitCard+0xf8>)
 8009332:	2201      	movs	r2, #1
 8009334:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009336:	2002      	movs	r0, #2
 8009338:	f7fa f868 	bl	800340c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 ff55 	bl	800a1ec <SD_PowerON>
 8009342:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e02e      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fe74 	bl	800a050 <SD_InitCard>
 8009368:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e01b      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009390:	4618      	mov	r0, r3
 8009392:	f002 fed4 	bl	800c13e <SDMMC_CmdBlockLength>
 8009396:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00f      	beq.n	80093be <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a0a      	ldr	r2, [pc, #40]	@ (80093cc <HAL_SD_InitCard+0xfc>)
 80093a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3728      	adds	r7, #40	@ 0x28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bdb0      	pop	{r4, r5, r7, pc}
 80093c8:	422580a0 	.word	0x422580a0
 80093cc:	004005ff 	.word	0x004005ff

080093d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08c      	sub	sp, #48	@ 0x30
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d107      	bne.n	80093f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0be      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	f040 80b7 	bne.w	8009574 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800940c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	441a      	add	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009416:	429a      	cmp	r2, r3
 8009418:	d907      	bls.n	800942a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e0a5      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2203      	movs	r2, #3
 800942e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2200      	movs	r2, #0
 8009438:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009448:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	4a4c      	ldr	r2, [pc, #304]	@ (8009580 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8009450:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009456:	4a4b      	ldr	r2, [pc, #300]	@ (8009584 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009458:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800945e:	2200      	movs	r2, #0
 8009460:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009466:	2200      	movs	r2, #0
 8009468:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3380      	adds	r3, #128	@ 0x80
 8009490:	4619      	mov	r1, r3
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	025b      	lsls	r3, r3, #9
 8009498:	089b      	lsrs	r3, r3, #2
 800949a:	f7fa f987 	bl	80037ac <HAL_DMA_Start_IT>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d017      	beq.n	80094d4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80094b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a33      	ldr	r2, [pc, #204]	@ (8009588 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80094ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e050      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80094d4:	4b2d      	ldr	r3, [pc, #180]	@ (800958c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d002      	beq.n	80094e8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80094e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e4:	025b      	lsls	r3, r3, #9
 80094e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094e8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	025b      	lsls	r3, r3, #9
 80094f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80094f4:	2390      	movs	r3, #144	@ 0x90
 80094f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80094f8:	2302      	movs	r3, #2
 80094fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009500:	2301      	movs	r3, #1
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f107 0210 	add.w	r2, r7, #16
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f002 fde9 	bl	800c0e6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d90a      	bls.n	8009530 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2282      	movs	r2, #130	@ 0x82
 800951e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009526:	4618      	mov	r0, r3
 8009528:	f002 fe4d 	bl	800c1c6 <SDMMC_CmdReadMultiBlock>
 800952c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800952e:	e009      	b.n	8009544 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2281      	movs	r2, #129	@ 0x81
 8009534:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800953c:	4618      	mov	r0, r3
 800953e:	f002 fe20 	bl	800c182 <SDMMC_CmdReadSingleBlock>
 8009542:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d012      	beq.n	8009570 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a0e      	ldr	r2, [pc, #56]	@ (8009588 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009558:	431a      	orrs	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e002      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	e000      	b.n	8009576 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009574:	2302      	movs	r3, #2
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3730      	adds	r7, #48	@ 0x30
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	08009e5f 	.word	0x08009e5f
 8009584:	08009ed1 	.word	0x08009ed1
 8009588:	004005ff 	.word	0x004005ff
 800958c:	4225858c 	.word	0x4225858c

08009590 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08c      	sub	sp, #48	@ 0x30
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d107      	bne.n	80095b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e0c1      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	f040 80ba 	bne.w	800973a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	441a      	add	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d907      	bls.n	80095ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e0a8      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2203      	movs	r2, #3
 80095ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f042 021a 	orr.w	r2, r2, #26
 8009608:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800960e:	4a4d      	ldr	r2, [pc, #308]	@ (8009744 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009610:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009616:	4a4c      	ldr	r2, [pc, #304]	@ (8009748 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009618:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800961e:	2200      	movs	r2, #0
 8009620:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009626:	2b01      	cmp	r3, #1
 8009628:	d002      	beq.n	8009630 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	025b      	lsls	r3, r3, #9
 800962e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d90a      	bls.n	800964c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	22a0      	movs	r2, #160	@ 0xa0
 800963a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009642:	4618      	mov	r0, r3
 8009644:	f002 fe03 	bl	800c24e <SDMMC_CmdWriteMultiBlock>
 8009648:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800964a:	e009      	b.n	8009660 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2290      	movs	r2, #144	@ 0x90
 8009650:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009658:	4618      	mov	r0, r3
 800965a:	f002 fdd6 	bl	800c20a <SDMMC_CmdWriteSingleBlock>
 800965e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d012      	beq.n	800968c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a38      	ldr	r2, [pc, #224]	@ (800974c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800966c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e057      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800968c:	4b30      	ldr	r3, [pc, #192]	@ (8009750 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009696:	2240      	movs	r2, #64	@ 0x40
 8009698:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3380      	adds	r3, #128	@ 0x80
 80096c2:	461a      	mov	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	025b      	lsls	r3, r3, #9
 80096c8:	089b      	lsrs	r3, r3, #2
 80096ca:	f7fa f86f 	bl	80037ac <HAL_DMA_Start_IT>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01a      	beq.n	800970a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 021a 	bic.w	r2, r2, #26
 80096e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a18      	ldr	r2, [pc, #96]	@ (800974c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80096ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e018      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800970a:	f04f 33ff 	mov.w	r3, #4294967295
 800970e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	025b      	lsls	r3, r3, #9
 8009714:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009716:	2390      	movs	r3, #144	@ 0x90
 8009718:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800971a:	2300      	movs	r3, #0
 800971c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800971e:	2300      	movs	r3, #0
 8009720:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009722:	2301      	movs	r3, #1
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f107 0210 	add.w	r2, r7, #16
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f002 fcd8 	bl	800c0e6 <SDIO_ConfigData>

      return HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	e000      	b.n	800973c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800973a:	2302      	movs	r3, #2
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3730      	adds	r7, #48	@ 0x30
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	08009e35 	.word	0x08009e35
 8009748:	08009ed1 	.word	0x08009ed1
 800974c:	004005ff 	.word	0x004005ff
 8009750:	4225858c 	.word	0x4225858c

08009754 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <HAL_SD_IRQHandler+0x2e>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 0308 	and.w	r3, r3, #8
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fdec 	bl	800a358 <SD_Read_IT>
 8009780:	e155      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 808f 	beq.w	80098b0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800979a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 80097aa:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80097ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0201 	bic.w	r2, r2, #1
 80097be:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f003 0308 	and.w	r3, r3, #8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d039      	beq.n	800983e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <HAL_SD_IRQHandler+0x8a>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 fd56 	bl	800c294 <SDMMC_CmdStopTransfer>
 80097e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d008      	beq.n	8009802 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f91f 	bl	8009a40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f240 523a 	movw	r2, #1338	@ 0x53a
 800980a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <HAL_SD_IRQHandler+0xda>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f004 fad6 	bl	800dde0 <HAL_SD_RxCpltCallback>
 8009834:	e0fb      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f004 fac8 	bl	800ddcc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800983c:	e0f7      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80f2 	beq.w	8009a2e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b00      	cmp	r3, #0
 8009852:	d011      	beq.n	8009878 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	f002 fd1b 	bl	800c294 <SDMMC_CmdStopTransfer>
 800985e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d008      	beq.n	8009878 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f8e4 	bl	8009a40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	f040 80d5 	bne.w	8009a2e <HAL_SD_IRQHandler+0x2da>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 80cf 	bne.w	8009a2e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0208 	bic.w	r2, r2, #8
 800989e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f004 fa8f 	bl	800ddcc <HAL_SD_TxCpltCallback>
}
 80098ae:	e0be      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d008      	beq.n	80098d0 <HAL_SD_IRQHandler+0x17c>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fd96 	bl	800a3fa <SD_Write_IT>
 80098ce:	e0ae      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80a7 	beq.w	8009a2e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e6:	f003 0302 	and.w	r3, r3, #2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d005      	beq.n	80098fa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f2:	f043 0202 	orr.w	r2, r3, #2
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990c:	f043 0208 	orr.w	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009926:	f043 0220 	orr.w	r2, r3, #32
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009934:	f003 0310 	and.w	r3, r3, #16
 8009938:	2b00      	cmp	r3, #0
 800993a:	d005      	beq.n	8009948 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009940:	f043 0210 	orr.w	r2, r3, #16
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009950:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009960:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fc94 	bl	800c294 <SDMMC_CmdStopTransfer>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009972:	431a      	orrs	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f855 	bl	8009a40 <HAL_SD_ErrorCallback>
}
 8009996:	e04a      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d045      	beq.n	8009a2e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <HAL_SD_IRQHandler+0x262>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d011      	beq.n	80099da <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009a38 <HAL_SD_IRQHandler+0x2e4>)
 80099bc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f9 ffba 	bl	800393c <HAL_DMA_Abort_IT>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d02f      	beq.n	8009a2e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 face 	bl	8009f74 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80099d8:	e029      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <HAL_SD_IRQHandler+0x29a>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d011      	beq.n	8009a12 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f2:	4a12      	ldr	r2, [pc, #72]	@ (8009a3c <HAL_SD_IRQHandler+0x2e8>)
 80099f4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7f9 ff9e 	bl	800393c <HAL_DMA_Abort_IT>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d013      	beq.n	8009a2e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fae9 	bl	8009fe2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009a10:	e00d      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f004 f9c6 	bl	800ddb8 <HAL_SD_AbortCallback>
}
 8009a2c:	e7ff      	b.n	8009a2e <HAL_SD_IRQHandler+0x2da>
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	08009f75 	.word	0x08009f75
 8009a3c:	08009fe3 	.word	0x08009fe3

08009a40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a62:	0f9b      	lsrs	r3, r3, #30
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a6e:	0e9b      	lsrs	r3, r3, #26
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a80:	0e1b      	lsrs	r3, r3, #24
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ab4:	0d1b      	lsrs	r3, r3, #20
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ac0:	0c1b      	lsrs	r3, r3, #16
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ad2:	0bdb      	lsrs	r3, r3, #15
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ae4:	0b9b      	lsrs	r3, r3, #14
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009af6:	0b5b      	lsrs	r3, r3, #13
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b08:	0b1b      	lsrs	r3, r3, #12
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d163      	bne.n	8009bec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b28:	009a      	lsls	r2, r3, #2
 8009b2a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009b2e:	4013      	ands	r3, r2
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009b34:	0f92      	lsrs	r2, r2, #30
 8009b36:	431a      	orrs	r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b40:	0edb      	lsrs	r3, r3, #27
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0307 	and.w	r3, r3, #7
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b52:	0e1b      	lsrs	r3, r3, #24
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b64:	0d5b      	lsrs	r3, r3, #21
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b76:	0c9b      	lsrs	r3, r3, #18
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b88:	0bdb      	lsrs	r3, r3, #15
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	7e1b      	ldrb	r3, [r3, #24]
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	3302      	adds	r3, #2
 8009bac:	2201      	movs	r2, #1
 8009bae:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009bb6:	fb03 f202 	mul.w	r2, r3, r2
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	7a1b      	ldrb	r3, [r3, #8]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	2201      	movs	r2, #1
 8009bca:	409a      	lsls	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009bd8:	0a52      	lsrs	r2, r2, #9
 8009bda:	fb03 f202 	mul.w	r2, r3, r2
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009be8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009bea:	e031      	b.n	8009c50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d11d      	bne.n	8009c30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bf8:	041b      	lsls	r3, r3, #16
 8009bfa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	431a      	orrs	r2, r3
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	029a      	lsls	r2, r3, #10
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c24:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c2e:	e00f      	b.n	8009c50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a58      	ldr	r2, [pc, #352]	@ (8009d98 <HAL_SD_GetCardCSD+0x344>)
 8009c36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e09d      	b.n	8009d8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c54:	0b9b      	lsrs	r3, r3, #14
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c66:	09db      	lsrs	r3, r3, #7
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c88:	0fdb      	lsrs	r3, r3, #31
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c94:	0f5b      	lsrs	r3, r3, #29
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca6:	0e9b      	lsrs	r3, r3, #26
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb8:	0d9b      	lsrs	r3, r3, #22
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cca:	0d5b      	lsrs	r3, r3, #21
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ce6:	0c1b      	lsrs	r3, r3, #16
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cfa:	0bdb      	lsrs	r3, r3, #15
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d0e:	0b9b      	lsrs	r3, r3, #14
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d22:	0b5b      	lsrs	r3, r3, #13
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d36:	0b1b      	lsrs	r3, r3, #12
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d4a:	0a9b      	lsrs	r3, r3, #10
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	f003 0303 	and.w	r3, r3, #3
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d72:	085b      	lsrs	r3, r3, #1
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	004005ff 	.word	0x004005ff

08009d9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e00:	f107 030c 	add.w	r3, r7, #12
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fa7e 	bl	800a308 <SD_SendStatus>
 8009e0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	0a5b      	lsrs	r3, r3, #9
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e2a:	693b      	ldr	r3, [r7, #16]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e50:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009e52:	bf00      	nop
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e70:	2b82      	cmp	r3, #130	@ 0x82
 8009e72:	d111      	bne.n	8009e98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f002 fa0b 	bl	800c294 <SDMMC_CmdStopTransfer>
 8009e7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f7ff fdd4 	bl	8009a40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 0208 	bic.w	r2, r2, #8
 8009ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009eb0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f003 ff8d 	bl	800dde0 <HAL_SD_RxCpltCallback>
#endif
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009edc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7f9 fed8 	bl	8003c94 <HAL_DMA_GetError>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d03e      	beq.n	8009f68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d002      	beq.n	8009f06 <SD_DMAError+0x36>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d12d      	bne.n	8009f62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a19      	ldr	r2, [pc, #100]	@ (8009f70 <SD_DMAError+0xa0>)
 8009f0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f22:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009f2a:	6978      	ldr	r0, [r7, #20]
 8009f2c:	f7ff ff62 	bl	8009df4 <HAL_SD_GetCardState>
 8009f30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b06      	cmp	r3, #6
 8009f36:	d002      	beq.n	8009f3e <SD_DMAError+0x6e>
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d10a      	bne.n	8009f54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f002 f9a6 	bl	800c294 <SDMMC_CmdStopTransfer>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009f62:	6978      	ldr	r0, [r7, #20]
 8009f64:	f7ff fd6c 	bl	8009a40 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009f68:	bf00      	nop
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	004005ff 	.word	0x004005ff

08009f74 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f80:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff ff31 	bl	8009df4 <HAL_SD_GetCardState>
 8009f92:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b06      	cmp	r3, #6
 8009fa6:	d002      	beq.n	8009fae <SD_DMATxAbort+0x3a>
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	d10a      	bne.n	8009fc4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f002 f96e 	bl	800c294 <SDMMC_CmdStopTransfer>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f003 fef3 	bl	800ddb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009fd2:	e002      	b.n	8009fda <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7ff fd33 	bl	8009a40 <HAL_SD_ErrorCallback>
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009ff8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7ff fefa 	bl	8009df4 <HAL_SD_GetCardState>
 800a000:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b06      	cmp	r3, #6
 800a014:	d002      	beq.n	800a01c <SD_DMARxAbort+0x3a>
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b05      	cmp	r3, #5
 800a01a:	d10a      	bne.n	800a032 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4618      	mov	r0, r3
 800a022:	f002 f937 	bl	800c294 <SDMMC_CmdStopTransfer>
 800a026:	4602      	mov	r2, r0
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02c:	431a      	orrs	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f003 febc 	bl	800ddb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a040:	e002      	b.n	800a048 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff fcfc 	bl	8009a40 <HAL_SD_ErrorCallback>
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a050:	b5b0      	push	{r4, r5, r7, lr}
 800a052:	b094      	sub	sp, #80	@ 0x50
 800a054:	af04      	add	r7, sp, #16
 800a056:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a058:	2301      	movs	r3, #1
 800a05a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4618      	mov	r0, r3
 800a062:	f001 ffe8 	bl	800c036 <SDIO_GetPowerState>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a06c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a070:	e0b8      	b.n	800a1e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a076:	2b03      	cmp	r3, #3
 800a078:	d02f      	beq.n	800a0da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4618      	mov	r0, r3
 800a080:	f002 f9cf 	bl	800c422 <SDMMC_CmdSendCID>
 800a084:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <SD_InitCard+0x40>
    {
      return errorstate;
 800a08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08e:	e0a9      	b.n	800a1e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f002 f812 	bl	800c0c0 <SDIO_GetResponse>
 800a09c:	4602      	mov	r2, r0
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2104      	movs	r1, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f002 f809 	bl	800c0c0 <SDIO_GetResponse>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2108      	movs	r1, #8
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f002 f800 	bl	800c0c0 <SDIO_GetResponse>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	210c      	movs	r1, #12
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fff7 	bl	800c0c0 <SDIO_GetResponse>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d00d      	beq.n	800a0fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f107 020e 	add.w	r2, r7, #14
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f002 f9d5 	bl	800c49c <SDMMC_CmdSetRelAdd>
 800a0f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <SD_InitCard+0xae>
    {
      return errorstate;
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fc:	e072      	b.n	800a1e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a102:	2b03      	cmp	r3, #3
 800a104:	d036      	beq.n	800a174 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a106:	89fb      	ldrh	r3, [r7, #14]
 800a108:	461a      	mov	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a116:	041b      	lsls	r3, r3, #16
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f002 f99f 	bl	800c45e <SDMMC_CmdSendCSD>
 800a120:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12a:	e05b      	b.n	800a1e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f001 ffc4 	bl	800c0c0 <SDIO_GetResponse>
 800a138:	4602      	mov	r2, r0
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2104      	movs	r1, #4
 800a144:	4618      	mov	r0, r3
 800a146:	f001 ffbb 	bl	800c0c0 <SDIO_GetResponse>
 800a14a:	4602      	mov	r2, r0
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2108      	movs	r1, #8
 800a156:	4618      	mov	r0, r3
 800a158:	f001 ffb2 	bl	800c0c0 <SDIO_GetResponse>
 800a15c:	4602      	mov	r2, r0
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	210c      	movs	r1, #12
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 ffa9 	bl	800c0c0 <SDIO_GetResponse>
 800a16e:	4602      	mov	r2, r0
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2104      	movs	r1, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 ffa0 	bl	800c0c0 <SDIO_GetResponse>
 800a180:	4603      	mov	r3, r0
 800a182:	0d1a      	lsrs	r2, r3, #20
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a188:	f107 0310 	add.w	r3, r7, #16
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fc60 	bl	8009a54 <HAL_SD_GetCardCSD>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a19a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a19e:	e021      	b.n	800a1e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6819      	ldr	r1, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a8:	041b      	lsls	r3, r3, #16
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	461c      	mov	r4, r3
 800a1ae:	4615      	mov	r5, r2
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	f002 f88f 	bl	800c2d8 <SDMMC_CmdSelDesel>
 800a1ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <SD_InitCard+0x176>
  {
    return errorstate;
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c4:	e00e      	b.n	800a1e4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681d      	ldr	r5, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	466c      	mov	r4, sp
 800a1ce:	f103 0210 	add.w	r2, r3, #16
 800a1d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1d8:	3304      	adds	r3, #4
 800a1da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f001 fed3 	bl	800bf88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3740      	adds	r7, #64	@ 0x40
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bdb0      	pop	{r4, r5, r7, pc}

0800a1ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f002 f88a 	bl	800c31e <SDMMC_CmdGoIdleState>
 800a20a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	e072      	b.n	800a2fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 f89d 	bl	800c35a <SDMMC_CmdOperCond>
 800a220:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00d      	beq.n	800a244 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4618      	mov	r0, r3
 800a234:	f002 f873 	bl	800c31e <SDMMC_CmdGoIdleState>
 800a238:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d004      	beq.n	800a24a <SD_PowerON+0x5e>
    {
      return errorstate;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	e05b      	b.n	800a2fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d137      	bne.n	800a2c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2100      	movs	r1, #0
 800a258:	4618      	mov	r0, r3
 800a25a:	f002 f89d 	bl	800c398 <SDMMC_CmdAppCommand>
 800a25e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d02d      	beq.n	800a2c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a266:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a26a:	e047      	b.n	800a2fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f002 f890 	bl	800c398 <SDMMC_CmdAppCommand>
 800a278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <SD_PowerON+0x98>
    {
      return errorstate;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	e03b      	b.n	800a2fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	491e      	ldr	r1, [pc, #120]	@ (800a304 <SD_PowerON+0x118>)
 800a28a:	4618      	mov	r0, r3
 800a28c:	f002 f8a6 	bl	800c3dc <SDMMC_CmdAppOperCommand>
 800a290:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a298:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a29c:	e02e      	b.n	800a2fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 ff0b 	bl	800c0c0 <SDIO_GetResponse>
 800a2aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	0fdb      	lsrs	r3, r3, #31
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <SD_PowerON+0xcc>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <SD_PowerON+0xce>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	613b      	str	r3, [r7, #16]

    count++;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d802      	bhi.n	800a2d2 <SD_PowerON+0xe6>
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0cc      	beq.n	800a26c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d902      	bls.n	800a2e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a2dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2e0:	e00c      	b.n	800a2fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	645a      	str	r2, [r3, #68]	@ 0x44
 800a2f2:	e002      	b.n	800a2fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	c1100000 	.word	0xc1100000

0800a308 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a318:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a31c:	e018      	b.n	800a350 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a326:	041b      	lsls	r3, r3, #16
 800a328:	4619      	mov	r1, r3
 800a32a:	4610      	mov	r0, r2
 800a32c:	f002 f8d7 	bl	800c4de <SDMMC_CmdSendStatus>
 800a330:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d001      	beq.n	800a33c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	e009      	b.n	800a350 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f001 febc 	bl	800c0c0 <SDIO_GetResponse>
 800a348:	4602      	mov	r2, r0
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a364:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d03f      	beq.n	800a3f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	e033      	b.n	800a3e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fe2e 	bl	800bfde <SDIO_ReadFIFO>
 800a382:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	b2da      	uxtb	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3b01      	subs	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	0a1b      	lsrs	r3, r3, #8
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	0c1b      	lsrs	r3, r3, #16
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	0e1b      	lsrs	r3, r3, #24
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2b07      	cmp	r3, #7
 800a3e4:	d9c8      	bls.n	800a378 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d043      	beq.n	800a49c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	e037      	b.n	800a48a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3b01      	subs	r3, #1
 800a42a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	021a      	lsls	r2, r3, #8
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4313      	orrs	r3, r2
 800a436:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3b01      	subs	r3, #1
 800a442:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	041a      	lsls	r2, r3, #16
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	3b01      	subs	r3, #1
 800a45a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	061a      	lsls	r2, r3, #24
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	4313      	orrs	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3301      	adds	r3, #1
 800a46c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3b01      	subs	r3, #1
 800a472:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f107 0208 	add.w	r2, r7, #8
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f001 fdba 	bl	800bff8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	3301      	adds	r3, #1
 800a488:	617b      	str	r3, [r7, #20]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b07      	cmp	r3, #7
 800a48e:	d9c4      	bls.n	800a41a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a49c:	bf00      	nop
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e025      	b.n	800a504 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7f8 fcfd 	bl	8002ecc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f001 fc89 	bl	800bdfc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	f001 fcde 	bl	800beb6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e041      	b.n	800a5a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f8 fb7a 	bl	8002c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f000 fa7e 	bl	800aa4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d001      	beq.n	800a5c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e04e      	b.n	800a662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a23      	ldr	r2, [pc, #140]	@ (800a670 <HAL_TIM_Base_Start_IT+0xc4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d022      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ee:	d01d      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a674 <HAL_TIM_Base_Start_IT+0xc8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d018      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a1e      	ldr	r2, [pc, #120]	@ (800a678 <HAL_TIM_Base_Start_IT+0xcc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d013      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a1c      	ldr	r2, [pc, #112]	@ (800a67c <HAL_TIM_Base_Start_IT+0xd0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d00e      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a1b      	ldr	r2, [pc, #108]	@ (800a680 <HAL_TIM_Base_Start_IT+0xd4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d009      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a19      	ldr	r2, [pc, #100]	@ (800a684 <HAL_TIM_Base_Start_IT+0xd8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d004      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x80>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a18      	ldr	r2, [pc, #96]	@ (800a688 <HAL_TIM_Base_Start_IT+0xdc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d111      	bne.n	800a650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 0307 	and.w	r3, r3, #7
 800a636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b06      	cmp	r3, #6
 800a63c:	d010      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0201 	orr.w	r2, r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a64e:	e007      	b.n	800a660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0201 	orr.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	40010000 	.word	0x40010000
 800a674:	40000400 	.word	0x40000400
 800a678:	40000800 	.word	0x40000800
 800a67c:	40000c00 	.word	0x40000c00
 800a680:	40010400 	.word	0x40010400
 800a684:	40014000 	.word	0x40014000
 800a688:	40001800 	.word	0x40001800

0800a68c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d020      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d01b      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f06f 0202 	mvn.w	r2, #2
 800a6c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f999 	bl	800aa0e <HAL_TIM_IC_CaptureCallback>
 800a6dc:	e005      	b.n	800a6ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f98b 	bl	800a9fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f99c 	bl	800aa22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d020      	beq.n	800a73c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f003 0304 	and.w	r3, r3, #4
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01b      	beq.n	800a73c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0204 	mvn.w	r2, #4
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f973 	bl	800aa0e <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f965 	bl	800a9fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f976 	bl	800aa22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f003 0308 	and.w	r3, r3, #8
 800a742:	2b00      	cmp	r3, #0
 800a744:	d020      	beq.n	800a788 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f003 0308 	and.w	r3, r3, #8
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d01b      	beq.n	800a788 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0208 	mvn.w	r2, #8
 800a758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2204      	movs	r2, #4
 800a75e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	f003 0303 	and.w	r3, r3, #3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f94d 	bl	800aa0e <HAL_TIM_IC_CaptureCallback>
 800a774:	e005      	b.n	800a782 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f93f 	bl	800a9fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f950 	bl	800aa22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f003 0310 	and.w	r3, r3, #16
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d020      	beq.n	800a7d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01b      	beq.n	800a7d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f06f 0210 	mvn.w	r2, #16
 800a7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f927 	bl	800aa0e <HAL_TIM_IC_CaptureCallback>
 800a7c0:	e005      	b.n	800a7ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f919 	bl	800a9fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f92a 	bl	800aa22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00c      	beq.n	800a7f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f06f 0201 	mvn.w	r2, #1
 800a7f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7f7 ff2a 	bl	800264c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00c      	beq.n	800a81c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fae4 	bl	800ade4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00c      	beq.n	800a840 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d007      	beq.n	800a840 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f8fb 	bl	800aa36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00c      	beq.n	800a864 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f003 0320 	and.w	r3, r3, #32
 800a850:	2b00      	cmp	r3, #0
 800a852:	d007      	beq.n	800a864 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f06f 0220 	mvn.w	r2, #32
 800a85c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fab6 	bl	800add0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a880:	2b01      	cmp	r3, #1
 800a882:	d101      	bne.n	800a888 <HAL_TIM_ConfigClockSource+0x1c>
 800a884:	2302      	movs	r3, #2
 800a886:	e0b4      	b.n	800a9f2 <HAL_TIM_ConfigClockSource+0x186>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2202      	movs	r2, #2
 800a894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8c0:	d03e      	beq.n	800a940 <HAL_TIM_ConfigClockSource+0xd4>
 800a8c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8c6:	f200 8087 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ce:	f000 8086 	beq.w	800a9de <HAL_TIM_ConfigClockSource+0x172>
 800a8d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8d6:	d87f      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d8:	2b70      	cmp	r3, #112	@ 0x70
 800a8da:	d01a      	beq.n	800a912 <HAL_TIM_ConfigClockSource+0xa6>
 800a8dc:	2b70      	cmp	r3, #112	@ 0x70
 800a8de:	d87b      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e0:	2b60      	cmp	r3, #96	@ 0x60
 800a8e2:	d050      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x11a>
 800a8e4:	2b60      	cmp	r3, #96	@ 0x60
 800a8e6:	d877      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e8:	2b50      	cmp	r3, #80	@ 0x50
 800a8ea:	d03c      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0xfa>
 800a8ec:	2b50      	cmp	r3, #80	@ 0x50
 800a8ee:	d873      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8f0:	2b40      	cmp	r3, #64	@ 0x40
 800a8f2:	d058      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x13a>
 800a8f4:	2b40      	cmp	r3, #64	@ 0x40
 800a8f6:	d86f      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8f8:	2b30      	cmp	r3, #48	@ 0x30
 800a8fa:	d064      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a8fc:	2b30      	cmp	r3, #48	@ 0x30
 800a8fe:	d86b      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a900:	2b20      	cmp	r3, #32
 800a902:	d060      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a904:	2b20      	cmp	r3, #32
 800a906:	d867      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d05c      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	d05a      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a910:	e062      	b.n	800a9d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a922:	f000 f9b9 	bl	800ac98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	609a      	str	r2, [r3, #8]
      break;
 800a93e:	e04f      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a950:	f000 f9a2 	bl	800ac98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a962:	609a      	str	r2, [r3, #8]
      break;
 800a964:	e03c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a972:	461a      	mov	r2, r3
 800a974:	f000 f916 	bl	800aba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2150      	movs	r1, #80	@ 0x50
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f96f 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a984:	e02c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a992:	461a      	mov	r2, r3
 800a994:	f000 f935 	bl	800ac02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2160      	movs	r1, #96	@ 0x60
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f95f 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a9a4:	e01c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f000 f8f6 	bl	800aba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2140      	movs	r1, #64	@ 0x40
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 f94f 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a9c4:	e00c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f000 f946 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a9d6:	e003      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
      break;
 800a9dc:	e000      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a9de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa02:	bf00      	nop
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa2a:	bf00      	nop
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa3e:	bf00      	nop
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
	...

0800aa4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a46      	ldr	r2, [pc, #280]	@ (800ab78 <TIM_Base_SetConfig+0x12c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d013      	beq.n	800aa8c <TIM_Base_SetConfig+0x40>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa6a:	d00f      	beq.n	800aa8c <TIM_Base_SetConfig+0x40>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a43      	ldr	r2, [pc, #268]	@ (800ab7c <TIM_Base_SetConfig+0x130>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00b      	beq.n	800aa8c <TIM_Base_SetConfig+0x40>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a42      	ldr	r2, [pc, #264]	@ (800ab80 <TIM_Base_SetConfig+0x134>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d007      	beq.n	800aa8c <TIM_Base_SetConfig+0x40>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a41      	ldr	r2, [pc, #260]	@ (800ab84 <TIM_Base_SetConfig+0x138>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d003      	beq.n	800aa8c <TIM_Base_SetConfig+0x40>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a40      	ldr	r2, [pc, #256]	@ (800ab88 <TIM_Base_SetConfig+0x13c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d108      	bne.n	800aa9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a35      	ldr	r2, [pc, #212]	@ (800ab78 <TIM_Base_SetConfig+0x12c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d02b      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaac:	d027      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a32      	ldr	r2, [pc, #200]	@ (800ab7c <TIM_Base_SetConfig+0x130>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d023      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a31      	ldr	r2, [pc, #196]	@ (800ab80 <TIM_Base_SetConfig+0x134>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d01f      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a30      	ldr	r2, [pc, #192]	@ (800ab84 <TIM_Base_SetConfig+0x138>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d01b      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a2f      	ldr	r2, [pc, #188]	@ (800ab88 <TIM_Base_SetConfig+0x13c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d017      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a2e      	ldr	r2, [pc, #184]	@ (800ab8c <TIM_Base_SetConfig+0x140>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d013      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a2d      	ldr	r2, [pc, #180]	@ (800ab90 <TIM_Base_SetConfig+0x144>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d00f      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a2c      	ldr	r2, [pc, #176]	@ (800ab94 <TIM_Base_SetConfig+0x148>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00b      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a2b      	ldr	r2, [pc, #172]	@ (800ab98 <TIM_Base_SetConfig+0x14c>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d007      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a2a      	ldr	r2, [pc, #168]	@ (800ab9c <TIM_Base_SetConfig+0x150>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d003      	beq.n	800aafe <TIM_Base_SetConfig+0xb2>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a29      	ldr	r2, [pc, #164]	@ (800aba0 <TIM_Base_SetConfig+0x154>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d108      	bne.n	800ab10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a10      	ldr	r2, [pc, #64]	@ (800ab78 <TIM_Base_SetConfig+0x12c>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d003      	beq.n	800ab44 <TIM_Base_SetConfig+0xf8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a12      	ldr	r2, [pc, #72]	@ (800ab88 <TIM_Base_SetConfig+0x13c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d103      	bne.n	800ab4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d105      	bne.n	800ab6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f023 0201 	bic.w	r2, r3, #1
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	611a      	str	r2, [r3, #16]
  }
}
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	40010000 	.word	0x40010000
 800ab7c:	40000400 	.word	0x40000400
 800ab80:	40000800 	.word	0x40000800
 800ab84:	40000c00 	.word	0x40000c00
 800ab88:	40010400 	.word	0x40010400
 800ab8c:	40014000 	.word	0x40014000
 800ab90:	40014400 	.word	0x40014400
 800ab94:	40014800 	.word	0x40014800
 800ab98:	40001800 	.word	0x40001800
 800ab9c:	40001c00 	.word	0x40001c00
 800aba0:	40002000 	.word	0x40002000

0800aba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	f023 0201 	bic.w	r2, r3, #1
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f023 030a 	bic.w	r3, r3, #10
 800abe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	621a      	str	r2, [r3, #32]
}
 800abf6:	bf00      	nop
 800abf8:	371c      	adds	r7, #28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b087      	sub	sp, #28
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	f023 0210 	bic.w	r2, r3, #16
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	031b      	lsls	r3, r3, #12
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	621a      	str	r2, [r3, #32]
}
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	f043 0307 	orr.w	r3, r3, #7
 800ac84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	609a      	str	r2, [r3, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	021a      	lsls	r2, r3, #8
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	431a      	orrs	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	609a      	str	r2, [r3, #8]
}
 800accc:	bf00      	nop
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acec:	2302      	movs	r3, #2
 800acee:	e05a      	b.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a21      	ldr	r2, [pc, #132]	@ (800adb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d022      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad3c:	d01d      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a1d      	ldr	r2, [pc, #116]	@ (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d018      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a1b      	ldr	r2, [pc, #108]	@ (800adbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d013      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a1a      	ldr	r2, [pc, #104]	@ (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d00e      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a18      	ldr	r2, [pc, #96]	@ (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d009      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a17      	ldr	r2, [pc, #92]	@ (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d004      	beq.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a15      	ldr	r2, [pc, #84]	@ (800adcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d10c      	bne.n	800ad94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	40010000 	.word	0x40010000
 800adb8:	40000400 	.word	0x40000400
 800adbc:	40000800 	.word	0x40000800
 800adc0:	40000c00 	.word	0x40000c00
 800adc4:	40010400 	.word	0x40010400
 800adc8:	40014000 	.word	0x40014000
 800adcc:	40001800 	.word	0x40001800

0800add0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e042      	b.n	800ae90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7f7 ff26 	bl	8002c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2224      	movs	r2, #36	@ 0x24
 800ae28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fd69 	bl	800b914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691a      	ldr	r2, [r3, #16]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	695a      	ldr	r2, [r3, #20]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68da      	ldr	r2, [r3, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	@ 0x28
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	4613      	mov	r3, r2
 800aea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b20      	cmp	r3, #32
 800aeb6:	d175      	bne.n	800afa4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <HAL_UART_Transmit+0x2c>
 800aebe:	88fb      	ldrh	r3, [r7, #6]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e06e      	b.n	800afa6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2221      	movs	r2, #33	@ 0x21
 800aed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aed6:	f7f8 fa8d 	bl	80033f4 <HAL_GetTick>
 800aeda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	88fa      	ldrh	r2, [r7, #6]
 800aee0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	88fa      	ldrh	r2, [r7, #6]
 800aee6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aef0:	d108      	bne.n	800af04 <HAL_UART_Transmit+0x6c>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	e003      	b.n	800af0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af0c:	e02e      	b.n	800af6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2200      	movs	r2, #0
 800af16:	2180      	movs	r1, #128	@ 0x80
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 fb05 	bl	800b528 <UART_WaitOnFlagUntilTimeout>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2220      	movs	r2, #32
 800af28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e03a      	b.n	800afa6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10b      	bne.n	800af4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	3302      	adds	r3, #2
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	e007      	b.n	800af5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	781a      	ldrb	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	3301      	adds	r3, #1
 800af5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af62:	b29b      	uxth	r3, r3
 800af64:	3b01      	subs	r3, #1
 800af66:	b29a      	uxth	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af70:	b29b      	uxth	r3, r3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1cb      	bne.n	800af0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2200      	movs	r2, #0
 800af7e:	2140      	movs	r1, #64	@ 0x40
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 fad1 	bl	800b528 <UART_WaitOnFlagUntilTimeout>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2220      	movs	r2, #32
 800af90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e006      	b.n	800afa6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e000      	b.n	800afa6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800afa4:	2302      	movs	r3, #2
  }
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3720      	adds	r7, #32
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b0ba      	sub	sp, #232	@ 0xe8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800afd6:	2300      	movs	r3, #0
 800afd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800afdc:	2300      	movs	r3, #0
 800afde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800afe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afe6:	f003 030f 	and.w	r3, r3, #15
 800afea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800afee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10f      	bne.n	800b016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b00      	cmp	r3, #0
 800b000:	d009      	beq.n	800b016 <HAL_UART_IRQHandler+0x66>
 800b002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fbc2 	bl	800b798 <UART_Receive_IT>
      return;
 800b014:	e25b      	b.n	800b4ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 80de 	beq.w	800b1dc <HAL_UART_IRQHandler+0x22c>
 800b020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d106      	bne.n	800b03a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 80d1 	beq.w	800b1dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00b      	beq.n	800b05e <HAL_UART_IRQHandler+0xae>
 800b046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d005      	beq.n	800b05e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b056:	f043 0201 	orr.w	r2, r3, #1
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b062:	f003 0304 	and.w	r3, r3, #4
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00b      	beq.n	800b082 <HAL_UART_IRQHandler+0xd2>
 800b06a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d005      	beq.n	800b082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b07a:	f043 0202 	orr.w	r2, r3, #2
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00b      	beq.n	800b0a6 <HAL_UART_IRQHandler+0xf6>
 800b08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b09e:	f043 0204 	orr.w	r2, r3, #4
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0aa:	f003 0308 	and.w	r3, r3, #8
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d011      	beq.n	800b0d6 <HAL_UART_IRQHandler+0x126>
 800b0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d005      	beq.n	800b0d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ce:	f043 0208 	orr.w	r2, r3, #8
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 81f2 	beq.w	800b4c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e4:	f003 0320 	and.w	r3, r3, #32
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d008      	beq.n	800b0fe <HAL_UART_IRQHandler+0x14e>
 800b0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0f0:	f003 0320 	and.w	r3, r3, #32
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb4d 	bl	800b798 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b108:	2b40      	cmp	r3, #64	@ 0x40
 800b10a:	bf0c      	ite	eq
 800b10c:	2301      	moveq	r3, #1
 800b10e:	2300      	movne	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b11a:	f003 0308 	and.w	r3, r3, #8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <HAL_UART_IRQHandler+0x17a>
 800b122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b126:	2b00      	cmp	r3, #0
 800b128:	d04f      	beq.n	800b1ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fa55 	bl	800b5da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13a:	2b40      	cmp	r3, #64	@ 0x40
 800b13c:	d141      	bne.n	800b1c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3314      	adds	r3, #20
 800b144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b15c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3314      	adds	r3, #20
 800b166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b16a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b16e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1d9      	bne.n	800b13e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d013      	beq.n	800b1ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b196:	4a7e      	ldr	r2, [pc, #504]	@ (800b390 <HAL_UART_IRQHandler+0x3e0>)
 800b198:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7f8 fbcc 	bl	800393c <HAL_DMA_Abort_IT>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d016      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b8:	e00e      	b.n	800b1d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f99e 	bl	800b4fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c0:	e00a      	b.n	800b1d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f99a 	bl	800b4fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c8:	e006      	b.n	800b1d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f996 	bl	800b4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b1d6:	e175      	b.n	800b4c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d8:	bf00      	nop
    return;
 800b1da:	e173      	b.n	800b4c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	f040 814f 	bne.w	800b484 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ea:	f003 0310 	and.w	r3, r3, #16
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 8148 	beq.w	800b484 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1f8:	f003 0310 	and.w	r3, r3, #16
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8141 	beq.w	800b484 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b202:	2300      	movs	r3, #0
 800b204:	60bb      	str	r3, [r7, #8]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	60bb      	str	r3, [r7, #8]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	60bb      	str	r3, [r7, #8]
 800b216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b222:	2b40      	cmp	r3, #64	@ 0x40
 800b224:	f040 80b6 	bne.w	800b394 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 8145 	beq.w	800b4c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b246:	429a      	cmp	r2, r3
 800b248:	f080 813e 	bcs.w	800b4c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b252:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b25e:	f000 8088 	beq.w	800b372 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	330c      	adds	r3, #12
 800b268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b27c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	330c      	adds	r3, #12
 800b28a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b28e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b29a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1d9      	bne.n	800b262 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3314      	adds	r3, #20
 800b2b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2b8:	e853 3f00 	ldrex	r3, [r3]
 800b2bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2c0:	f023 0301 	bic.w	r3, r3, #1
 800b2c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3314      	adds	r3, #20
 800b2ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b2da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2de:	e841 2300 	strex	r3, r2, [r1]
 800b2e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b2e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e1      	bne.n	800b2ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3314      	adds	r3, #20
 800b2f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b2fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3314      	adds	r3, #20
 800b30a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b30e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b31c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e3      	bne.n	800b2ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b342:	f023 0310 	bic.w	r3, r3, #16
 800b346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	330c      	adds	r3, #12
 800b350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b354:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b356:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b35a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e3      	bne.n	800b330 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f8 fa75 	bl	800385c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b380:	b29b      	uxth	r3, r3
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	b29b      	uxth	r3, r3
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f8c1 	bl	800b510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b38e:	e09b      	b.n	800b4c8 <HAL_UART_IRQHandler+0x518>
 800b390:	0800b6a1 	.word	0x0800b6a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 808e 	beq.w	800b4cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b3b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8089 	beq.w	800b4cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	330c      	adds	r3, #12
 800b3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c4:	e853 3f00 	ldrex	r3, [r3]
 800b3c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	330c      	adds	r3, #12
 800b3da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b3de:	647a      	str	r2, [r7, #68]	@ 0x44
 800b3e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1e3      	bne.n	800b3ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3314      	adds	r3, #20
 800b3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	623b      	str	r3, [r7, #32]
   return(result);
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	f023 0301 	bic.w	r3, r3, #1
 800b408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3314      	adds	r3, #20
 800b412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b416:	633a      	str	r2, [r7, #48]	@ 0x30
 800b418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e3      	bne.n	800b3f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2220      	movs	r2, #32
 800b42e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	330c      	adds	r3, #12
 800b43e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	60fb      	str	r3, [r7, #12]
   return(result);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0310 	bic.w	r3, r3, #16
 800b44e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	330c      	adds	r3, #12
 800b458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b45c:	61fa      	str	r2, [r7, #28]
 800b45e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b460:	69b9      	ldr	r1, [r7, #24]
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	e841 2300 	strex	r3, r2, [r1]
 800b468:	617b      	str	r3, [r7, #20]
   return(result);
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1e3      	bne.n	800b438 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f847 	bl	800b510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b482:	e023      	b.n	800b4cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d009      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x4f4>
 800b490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f913 	bl	800b6c8 <UART_Transmit_IT>
    return;
 800b4a2:	e014      	b.n	800b4ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00e      	beq.n	800b4ce <HAL_UART_IRQHandler+0x51e>
 800b4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d008      	beq.n	800b4ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f953 	bl	800b768 <UART_EndTransmit_IT>
    return;
 800b4c2:	e004      	b.n	800b4ce <HAL_UART_IRQHandler+0x51e>
    return;
 800b4c4:	bf00      	nop
 800b4c6:	e002      	b.n	800b4ce <HAL_UART_IRQHandler+0x51e>
      return;
 800b4c8:	bf00      	nop
 800b4ca:	e000      	b.n	800b4ce <HAL_UART_IRQHandler+0x51e>
      return;
 800b4cc:	bf00      	nop
  }
}
 800b4ce:	37e8      	adds	r7, #232	@ 0xe8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	4613      	mov	r3, r2
 800b536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b538:	e03b      	b.n	800b5b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b540:	d037      	beq.n	800b5b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b542:	f7f7 ff57 	bl	80033f4 <HAL_GetTick>
 800b546:	4602      	mov	r2, r0
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	6a3a      	ldr	r2, [r7, #32]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d302      	bcc.n	800b558 <UART_WaitOnFlagUntilTimeout+0x30>
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e03a      	b.n	800b5d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	d023      	beq.n	800b5b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b80      	cmp	r3, #128	@ 0x80
 800b56e:	d020      	beq.n	800b5b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b40      	cmp	r3, #64	@ 0x40
 800b574:	d01d      	beq.n	800b5b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0308 	and.w	r3, r3, #8
 800b580:	2b08      	cmp	r3, #8
 800b582:	d116      	bne.n	800b5b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	617b      	str	r3, [r7, #20]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	617b      	str	r3, [r7, #20]
 800b598:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 f81d 	bl	800b5da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2208      	movs	r2, #8
 800b5a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e00f      	b.n	800b5d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	bf0c      	ite	eq
 800b5c2:	2301      	moveq	r3, #1
 800b5c4:	2300      	movne	r3, #0
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d0b4      	beq.n	800b53a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b095      	sub	sp, #84	@ 0x54
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	330c      	adds	r3, #12
 800b5e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	330c      	adds	r3, #12
 800b600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b602:	643a      	str	r2, [r7, #64]	@ 0x40
 800b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e5      	bne.n	800b5e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3314      	adds	r3, #20
 800b61c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	61fb      	str	r3, [r7, #28]
   return(result);
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	f023 0301 	bic.w	r3, r3, #1
 800b62c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3314      	adds	r3, #20
 800b634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b63c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e5      	bne.n	800b616 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d119      	bne.n	800b686 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	330c      	adds	r3, #12
 800b658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	e853 3f00 	ldrex	r3, [r3]
 800b660:	60bb      	str	r3, [r7, #8]
   return(result);
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f023 0310 	bic.w	r3, r3, #16
 800b668:	647b      	str	r3, [r7, #68]	@ 0x44
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	330c      	adds	r3, #12
 800b670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b672:	61ba      	str	r2, [r7, #24]
 800b674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b676:	6979      	ldr	r1, [r7, #20]
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	e841 2300 	strex	r3, r2, [r1]
 800b67e:	613b      	str	r3, [r7, #16]
   return(result);
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1e5      	bne.n	800b652 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2220      	movs	r2, #32
 800b68a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b694:	bf00      	nop
 800b696:	3754      	adds	r7, #84	@ 0x54
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff ff1e 	bl	800b4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6c0:	bf00      	nop
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b21      	cmp	r3, #33	@ 0x21
 800b6da:	d13e      	bne.n	800b75a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6e4:	d114      	bne.n	800b710 <UART_Transmit_IT+0x48>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d110      	bne.n	800b710 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b702:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	1c9a      	adds	r2, r3, #2
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	621a      	str	r2, [r3, #32]
 800b70e:	e008      	b.n	800b722 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a1b      	ldr	r3, [r3, #32]
 800b714:	1c59      	adds	r1, r3, #1
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6211      	str	r1, [r2, #32]
 800b71a:	781a      	ldrb	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b726:	b29b      	uxth	r3, r3
 800b728:	3b01      	subs	r3, #1
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	4619      	mov	r1, r3
 800b730:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10f      	bne.n	800b756 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b744:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68da      	ldr	r2, [r3, #12]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b754:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	e000      	b.n	800b75c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b75a:	2302      	movs	r3, #2
  }
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b77e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2220      	movs	r2, #32
 800b784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fea3 	bl	800b4d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08c      	sub	sp, #48	@ 0x30
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b22      	cmp	r3, #34	@ 0x22
 800b7aa:	f040 80ae 	bne.w	800b90a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7b6:	d117      	bne.n	800b7e8 <UART_Receive_IT+0x50>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d113      	bne.n	800b7e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e0:	1c9a      	adds	r2, r3, #2
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	629a      	str	r2, [r3, #40]	@ 0x28
 800b7e6:	e026      	b.n	800b836 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7fa:	d007      	beq.n	800b80c <UART_Receive_IT+0x74>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <UART_Receive_IT+0x82>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	b2da      	uxtb	r2, r3
 800b814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b816:	701a      	strb	r2, [r3, #0]
 800b818:	e008      	b.n	800b82c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b826:	b2da      	uxtb	r2, r3
 800b828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b82a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	3b01      	subs	r3, #1
 800b83e:	b29b      	uxth	r3, r3
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	4619      	mov	r1, r3
 800b844:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b846:	2b00      	cmp	r3, #0
 800b848:	d15d      	bne.n	800b906 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68da      	ldr	r2, [r3, #12]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f022 0220 	bic.w	r2, r2, #32
 800b858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68da      	ldr	r2, [r3, #12]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	695a      	ldr	r2, [r3, #20]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0201 	bic.w	r2, r2, #1
 800b878:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2220      	movs	r2, #32
 800b87e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d135      	bne.n	800b8fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	330c      	adds	r3, #12
 800b89c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f023 0310 	bic.w	r3, r3, #16
 800b8ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	330c      	adds	r3, #12
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b6:	623a      	str	r2, [r7, #32]
 800b8b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	69f9      	ldr	r1, [r7, #28]
 800b8bc:	6a3a      	ldr	r2, [r7, #32]
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e5      	bne.n	800b896 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0310 	and.w	r3, r3, #16
 800b8d4:	2b10      	cmp	r3, #16
 800b8d6:	d10a      	bne.n	800b8ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff fe0b 	bl	800b510 <HAL_UARTEx_RxEventCallback>
 800b8fa:	e002      	b.n	800b902 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fdf3 	bl	800b4e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	e002      	b.n	800b90c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	e000      	b.n	800b90c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b90a:	2302      	movs	r3, #2
  }
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3730      	adds	r7, #48	@ 0x30
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b918:	b0c0      	sub	sp, #256	@ 0x100
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b930:	68d9      	ldr	r1, [r3, #12]
 800b932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	ea40 0301 	orr.w	r3, r0, r1
 800b93c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	431a      	orrs	r2, r3
 800b94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	431a      	orrs	r2, r3
 800b954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b96c:	f021 010c 	bic.w	r1, r1, #12
 800b970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b97a:	430b      	orrs	r3, r1
 800b97c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b98e:	6999      	ldr	r1, [r3, #24]
 800b990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	ea40 0301 	orr.w	r3, r0, r1
 800b99a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	4b8f      	ldr	r3, [pc, #572]	@ (800bbe0 <UART_SetConfig+0x2cc>)
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d005      	beq.n	800b9b4 <UART_SetConfig+0xa0>
 800b9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b8d      	ldr	r3, [pc, #564]	@ (800bbe4 <UART_SetConfig+0x2d0>)
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d104      	bne.n	800b9be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9b4:	f7fc fd2a 	bl	800840c <HAL_RCC_GetPCLK2Freq>
 800b9b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b9bc:	e003      	b.n	800b9c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9be:	f7fc fd11 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 800b9c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9d0:	f040 810c 	bne.w	800bbec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b9de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b9e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	1891      	adds	r1, r2, r2
 800b9ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b9ee:	415b      	adcs	r3, r3
 800b9f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	eb12 0801 	adds.w	r8, r2, r1
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	eb43 0901 	adc.w	r9, r3, r1
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	f04f 0300 	mov.w	r3, #0
 800ba0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba16:	4690      	mov	r8, r2
 800ba18:	4699      	mov	r9, r3
 800ba1a:	4623      	mov	r3, r4
 800ba1c:	eb18 0303 	adds.w	r3, r8, r3
 800ba20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba24:	462b      	mov	r3, r5
 800ba26:	eb49 0303 	adc.w	r3, r9, r3
 800ba2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ba3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ba3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ba42:	460b      	mov	r3, r1
 800ba44:	18db      	adds	r3, r3, r3
 800ba46:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba48:	4613      	mov	r3, r2
 800ba4a:	eb42 0303 	adc.w	r3, r2, r3
 800ba4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ba54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ba58:	f7f4 fc2a 	bl	80002b0 <__aeabi_uldivmod>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	4b61      	ldr	r3, [pc, #388]	@ (800bbe8 <UART_SetConfig+0x2d4>)
 800ba62:	fba3 2302 	umull	r2, r3, r3, r2
 800ba66:	095b      	lsrs	r3, r3, #5
 800ba68:	011c      	lsls	r4, r3, #4
 800ba6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ba78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	464b      	mov	r3, r9
 800ba80:	1891      	adds	r1, r2, r2
 800ba82:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ba84:	415b      	adcs	r3, r3
 800ba86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	eb12 0a01 	adds.w	sl, r2, r1
 800ba92:	4649      	mov	r1, r9
 800ba94:	eb43 0b01 	adc.w	fp, r3, r1
 800ba98:	f04f 0200 	mov.w	r2, #0
 800ba9c:	f04f 0300 	mov.w	r3, #0
 800baa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800baa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800baa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baac:	4692      	mov	sl, r2
 800baae:	469b      	mov	fp, r3
 800bab0:	4643      	mov	r3, r8
 800bab2:	eb1a 0303 	adds.w	r3, sl, r3
 800bab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800baba:	464b      	mov	r3, r9
 800babc:	eb4b 0303 	adc.w	r3, fp, r3
 800bac0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bad0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bad8:	460b      	mov	r3, r1
 800bada:	18db      	adds	r3, r3, r3
 800badc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bade:	4613      	mov	r3, r2
 800bae0:	eb42 0303 	adc.w	r3, r2, r3
 800bae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800baea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800baee:	f7f4 fbdf 	bl	80002b0 <__aeabi_uldivmod>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	4b3b      	ldr	r3, [pc, #236]	@ (800bbe8 <UART_SetConfig+0x2d4>)
 800bafa:	fba3 2301 	umull	r2, r3, r3, r1
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	2264      	movs	r2, #100	@ 0x64
 800bb02:	fb02 f303 	mul.w	r3, r2, r3
 800bb06:	1acb      	subs	r3, r1, r3
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bb0e:	4b36      	ldr	r3, [pc, #216]	@ (800bbe8 <UART_SetConfig+0x2d4>)
 800bb10:	fba3 2302 	umull	r2, r3, r3, r2
 800bb14:	095b      	lsrs	r3, r3, #5
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bb1c:	441c      	add	r4, r3
 800bb1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bb2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bb30:	4642      	mov	r2, r8
 800bb32:	464b      	mov	r3, r9
 800bb34:	1891      	adds	r1, r2, r2
 800bb36:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bb38:	415b      	adcs	r3, r3
 800bb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb40:	4641      	mov	r1, r8
 800bb42:	1851      	adds	r1, r2, r1
 800bb44:	6339      	str	r1, [r7, #48]	@ 0x30
 800bb46:	4649      	mov	r1, r9
 800bb48:	414b      	adcs	r3, r1
 800bb4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	f04f 0300 	mov.w	r3, #0
 800bb54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bb58:	4659      	mov	r1, fp
 800bb5a:	00cb      	lsls	r3, r1, #3
 800bb5c:	4651      	mov	r1, sl
 800bb5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb62:	4651      	mov	r1, sl
 800bb64:	00ca      	lsls	r2, r1, #3
 800bb66:	4610      	mov	r0, r2
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	4642      	mov	r2, r8
 800bb6e:	189b      	adds	r3, r3, r2
 800bb70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bb74:	464b      	mov	r3, r9
 800bb76:	460a      	mov	r2, r1
 800bb78:	eb42 0303 	adc.w	r3, r2, r3
 800bb7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bb8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bb90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bb94:	460b      	mov	r3, r1
 800bb96:	18db      	adds	r3, r3, r3
 800bb98:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	eb42 0303 	adc.w	r3, r2, r3
 800bba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bbaa:	f7f4 fb81 	bl	80002b0 <__aeabi_uldivmod>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe8 <UART_SetConfig+0x2d4>)
 800bbb4:	fba3 1302 	umull	r1, r3, r3, r2
 800bbb8:	095b      	lsrs	r3, r3, #5
 800bbba:	2164      	movs	r1, #100	@ 0x64
 800bbbc:	fb01 f303 	mul.w	r3, r1, r3
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	3332      	adds	r3, #50	@ 0x32
 800bbc6:	4a08      	ldr	r2, [pc, #32]	@ (800bbe8 <UART_SetConfig+0x2d4>)
 800bbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbcc:	095b      	lsrs	r3, r3, #5
 800bbce:	f003 0207 	and.w	r2, r3, #7
 800bbd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4422      	add	r2, r4
 800bbda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bbdc:	e106      	b.n	800bdec <UART_SetConfig+0x4d8>
 800bbde:	bf00      	nop
 800bbe0:	40011000 	.word	0x40011000
 800bbe4:	40011400 	.word	0x40011400
 800bbe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bbf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bbfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bbfe:	4642      	mov	r2, r8
 800bc00:	464b      	mov	r3, r9
 800bc02:	1891      	adds	r1, r2, r2
 800bc04:	6239      	str	r1, [r7, #32]
 800bc06:	415b      	adcs	r3, r3
 800bc08:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc0e:	4641      	mov	r1, r8
 800bc10:	1854      	adds	r4, r2, r1
 800bc12:	4649      	mov	r1, r9
 800bc14:	eb43 0501 	adc.w	r5, r3, r1
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	00eb      	lsls	r3, r5, #3
 800bc22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc26:	00e2      	lsls	r2, r4, #3
 800bc28:	4614      	mov	r4, r2
 800bc2a:	461d      	mov	r5, r3
 800bc2c:	4643      	mov	r3, r8
 800bc2e:	18e3      	adds	r3, r4, r3
 800bc30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc34:	464b      	mov	r3, r9
 800bc36:	eb45 0303 	adc.w	r3, r5, r3
 800bc3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bc4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bc4e:	f04f 0200 	mov.w	r2, #0
 800bc52:	f04f 0300 	mov.w	r3, #0
 800bc56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	008b      	lsls	r3, r1, #2
 800bc5e:	4621      	mov	r1, r4
 800bc60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc64:	4621      	mov	r1, r4
 800bc66:	008a      	lsls	r2, r1, #2
 800bc68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bc6c:	f7f4 fb20 	bl	80002b0 <__aeabi_uldivmod>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4b60      	ldr	r3, [pc, #384]	@ (800bdf8 <UART_SetConfig+0x4e4>)
 800bc76:	fba3 2302 	umull	r2, r3, r3, r2
 800bc7a:	095b      	lsrs	r3, r3, #5
 800bc7c:	011c      	lsls	r4, r3, #4
 800bc7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bc88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bc8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	1891      	adds	r1, r2, r2
 800bc96:	61b9      	str	r1, [r7, #24]
 800bc98:	415b      	adcs	r3, r3
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bca0:	4641      	mov	r1, r8
 800bca2:	1851      	adds	r1, r2, r1
 800bca4:	6139      	str	r1, [r7, #16]
 800bca6:	4649      	mov	r1, r9
 800bca8:	414b      	adcs	r3, r1
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	f04f 0300 	mov.w	r3, #0
 800bcb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bcb8:	4659      	mov	r1, fp
 800bcba:	00cb      	lsls	r3, r1, #3
 800bcbc:	4651      	mov	r1, sl
 800bcbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcc2:	4651      	mov	r1, sl
 800bcc4:	00ca      	lsls	r2, r1, #3
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4603      	mov	r3, r0
 800bccc:	4642      	mov	r2, r8
 800bcce:	189b      	adds	r3, r3, r2
 800bcd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bcd4:	464b      	mov	r3, r9
 800bcd6:	460a      	mov	r2, r1
 800bcd8:	eb42 0303 	adc.w	r3, r2, r3
 800bcdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bcea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bcec:	f04f 0200 	mov.w	r2, #0
 800bcf0:	f04f 0300 	mov.w	r3, #0
 800bcf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	008b      	lsls	r3, r1, #2
 800bcfc:	4641      	mov	r1, r8
 800bcfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd02:	4641      	mov	r1, r8
 800bd04:	008a      	lsls	r2, r1, #2
 800bd06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bd0a:	f7f4 fad1 	bl	80002b0 <__aeabi_uldivmod>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4611      	mov	r1, r2
 800bd14:	4b38      	ldr	r3, [pc, #224]	@ (800bdf8 <UART_SetConfig+0x4e4>)
 800bd16:	fba3 2301 	umull	r2, r3, r3, r1
 800bd1a:	095b      	lsrs	r3, r3, #5
 800bd1c:	2264      	movs	r2, #100	@ 0x64
 800bd1e:	fb02 f303 	mul.w	r3, r2, r3
 800bd22:	1acb      	subs	r3, r1, r3
 800bd24:	011b      	lsls	r3, r3, #4
 800bd26:	3332      	adds	r3, #50	@ 0x32
 800bd28:	4a33      	ldr	r2, [pc, #204]	@ (800bdf8 <UART_SetConfig+0x4e4>)
 800bd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2e:	095b      	lsrs	r3, r3, #5
 800bd30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd34:	441c      	add	r4, r3
 800bd36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd3e:	677a      	str	r2, [r7, #116]	@ 0x74
 800bd40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	1891      	adds	r1, r2, r2
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	415b      	adcs	r3, r3
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd54:	4641      	mov	r1, r8
 800bd56:	1851      	adds	r1, r2, r1
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	414b      	adcs	r3, r1
 800bd5e:	607b      	str	r3, [r7, #4]
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	f04f 0300 	mov.w	r3, #0
 800bd68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd6c:	4659      	mov	r1, fp
 800bd6e:	00cb      	lsls	r3, r1, #3
 800bd70:	4651      	mov	r1, sl
 800bd72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd76:	4651      	mov	r1, sl
 800bd78:	00ca      	lsls	r2, r1, #3
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4642      	mov	r2, r8
 800bd82:	189b      	adds	r3, r3, r2
 800bd84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd86:	464b      	mov	r3, r9
 800bd88:	460a      	mov	r2, r1
 800bd8a:	eb42 0303 	adc.w	r3, r2, r3
 800bd8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bd90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd9a:	667a      	str	r2, [r7, #100]	@ 0x64
 800bd9c:	f04f 0200 	mov.w	r2, #0
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bda8:	4649      	mov	r1, r9
 800bdaa:	008b      	lsls	r3, r1, #2
 800bdac:	4641      	mov	r1, r8
 800bdae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdb2:	4641      	mov	r1, r8
 800bdb4:	008a      	lsls	r2, r1, #2
 800bdb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bdba:	f7f4 fa79 	bl	80002b0 <__aeabi_uldivmod>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf8 <UART_SetConfig+0x4e4>)
 800bdc4:	fba3 1302 	umull	r1, r3, r3, r2
 800bdc8:	095b      	lsrs	r3, r3, #5
 800bdca:	2164      	movs	r1, #100	@ 0x64
 800bdcc:	fb01 f303 	mul.w	r3, r1, r3
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	3332      	adds	r3, #50	@ 0x32
 800bdd6:	4a08      	ldr	r2, [pc, #32]	@ (800bdf8 <UART_SetConfig+0x4e4>)
 800bdd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bddc:	095b      	lsrs	r3, r3, #5
 800bdde:	f003 020f 	and.w	r2, r3, #15
 800bde2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4422      	add	r2, r4
 800bdea:	609a      	str	r2, [r3, #8]
}
 800bdec:	bf00      	nop
 800bdee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdf8:	51eb851f 	.word	0x51eb851f

0800bdfc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d123      	bne.n	800be56 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800be16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	6851      	ldr	r1, [r2, #4]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	6892      	ldr	r2, [r2, #8]
 800be22:	4311      	orrs	r1, r2
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	68d2      	ldr	r2, [r2, #12]
 800be28:	4311      	orrs	r1, r2
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	6912      	ldr	r2, [r2, #16]
 800be2e:	4311      	orrs	r1, r2
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	6952      	ldr	r2, [r2, #20]
 800be34:	4311      	orrs	r1, r2
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	6992      	ldr	r2, [r2, #24]
 800be3a:	4311      	orrs	r1, r2
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	69d2      	ldr	r2, [r2, #28]
 800be40:	4311      	orrs	r1, r2
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	6a12      	ldr	r2, [r2, #32]
 800be46:	4311      	orrs	r1, r2
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800be4c:	430a      	orrs	r2, r1
 800be4e:	431a      	orrs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	e028      	b.n	800bea8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	69d9      	ldr	r1, [r3, #28]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	4319      	orrs	r1, r3
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6c:	430b      	orrs	r3, r1
 800be6e:	431a      	orrs	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800be7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	6851      	ldr	r1, [r2, #4]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	6892      	ldr	r2, [r2, #8]
 800be88:	4311      	orrs	r1, r2
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	68d2      	ldr	r2, [r2, #12]
 800be8e:	4311      	orrs	r1, r2
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	6912      	ldr	r2, [r2, #16]
 800be94:	4311      	orrs	r1, r2
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	6952      	ldr	r2, [r2, #20]
 800be9a:	4311      	orrs	r1, r2
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	6992      	ldr	r2, [r2, #24]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	431a      	orrs	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800beb6:	b480      	push	{r7}
 800beb8:	b085      	sub	sp, #20
 800beba:	af00      	add	r7, sp, #0
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d128      	bne.n	800bf1a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	1e59      	subs	r1, r3, #1
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	3b01      	subs	r3, #1
 800bedc:	011b      	lsls	r3, r3, #4
 800bede:	4319      	orrs	r1, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	021b      	lsls	r3, r3, #8
 800bee8:	4319      	orrs	r1, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	3b01      	subs	r3, #1
 800bef0:	031b      	lsls	r3, r3, #12
 800bef2:	4319      	orrs	r1, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	3b01      	subs	r3, #1
 800befa:	041b      	lsls	r3, r3, #16
 800befc:	4319      	orrs	r1, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	051b      	lsls	r3, r3, #20
 800bf06:	4319      	orrs	r1, r3
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	061b      	lsls	r3, r3, #24
 800bf10:	430b      	orrs	r3, r1
 800bf12:	431a      	orrs	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	609a      	str	r2, [r3, #8]
 800bf18:	e02f      	b.n	800bf7a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	68d2      	ldr	r2, [r2, #12]
 800bf2a:	3a01      	subs	r2, #1
 800bf2c:	0311      	lsls	r1, r2, #12
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	6952      	ldr	r2, [r2, #20]
 800bf32:	3a01      	subs	r2, #1
 800bf34:	0512      	lsls	r2, r2, #20
 800bf36:	430a      	orrs	r2, r1
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	1e59      	subs	r1, r3, #1
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	4319      	orrs	r1, r3
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	021b      	lsls	r3, r3, #8
 800bf5e:	4319      	orrs	r1, r3
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	041b      	lsls	r3, r3, #16
 800bf68:	4319      	orrs	r1, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	061b      	lsls	r3, r3, #24
 800bf72:	430b      	orrs	r3, r1
 800bf74:	431a      	orrs	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bf88:	b084      	sub	sp, #16
 800bf8a:	b480      	push	{r7}
 800bf8c:	b085      	sub	sp, #20
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	f107 001c 	add.w	r0, r7, #28
 800bf96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bf9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bfa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bfa2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800bfa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800bfaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800bfae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800bfb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800bfc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	431a      	orrs	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	b004      	add	sp, #16
 800bfdc:	4770      	bx	lr

0800bfde <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c01a:	b480      	push	{r7}
 800c01c:	b083      	sub	sp, #12
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2203      	movs	r2, #3
 800c026:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0303 	and.w	r3, r3, #3
}
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c070:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c076:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c07c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c08c:	f023 030f 	bic.w	r3, r3, #15
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	431a      	orrs	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	b2db      	uxtb	r3, r3
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3314      	adds	r3, #20
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
}  
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	685a      	ldr	r2, [r3, #4]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c10c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c112:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c118:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c124:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	431a      	orrs	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c130:	2300      	movs	r3, #0

}
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b088      	sub	sp, #32
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c14c:	2310      	movs	r3, #16
 800c14e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c150:	2340      	movs	r3, #64	@ 0x40
 800c152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c154:	2300      	movs	r3, #0
 800c156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c15c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c15e:	f107 0308 	add.w	r3, r7, #8
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff ff74 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c16a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c16e:	2110      	movs	r1, #16
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f9d7 	bl	800c524 <SDMMC_GetCmdResp1>
 800c176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c178:	69fb      	ldr	r3, [r7, #28]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b088      	sub	sp, #32
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c190:	2311      	movs	r3, #17
 800c192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c194:	2340      	movs	r3, #64	@ 0x40
 800c196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c19c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1a2:	f107 0308 	add.w	r3, r7, #8
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff ff52 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c1ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1b2:	2111      	movs	r1, #17
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 f9b5 	bl	800c524 <SDMMC_GetCmdResp1>
 800c1ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b088      	sub	sp, #32
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c1d4:	2312      	movs	r3, #18
 800c1d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1d8:	2340      	movs	r3, #64	@ 0x40
 800c1da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1e6:	f107 0308 	add.w	r3, r7, #8
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff ff30 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c1f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1f6:	2112      	movs	r1, #18
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f993 	bl	800c524 <SDMMC_GetCmdResp1>
 800c1fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c200:	69fb      	ldr	r3, [r7, #28]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b088      	sub	sp, #32
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c218:	2318      	movs	r3, #24
 800c21a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c21c:	2340      	movs	r3, #64	@ 0x40
 800c21e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c220:	2300      	movs	r3, #0
 800c222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c228:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c22a:	f107 0308 	add.w	r3, r7, #8
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff ff0e 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c23a:	2118      	movs	r1, #24
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f971 	bl	800c524 <SDMMC_GetCmdResp1>
 800c242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c244:	69fb      	ldr	r3, [r7, #28]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b088      	sub	sp, #32
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c25c:	2319      	movs	r3, #25
 800c25e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c260:	2340      	movs	r3, #64	@ 0x40
 800c262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c26c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff feec 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c27a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c27e:	2119      	movs	r1, #25
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f94f 	bl	800c524 <SDMMC_GetCmdResp1>
 800c286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c288:	69fb      	ldr	r3, [r7, #28]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3720      	adds	r7, #32
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c29c:	2300      	movs	r3, #0
 800c29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c2a0:	230c      	movs	r3, #12
 800c2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2a4:	2340      	movs	r3, #64	@ 0x40
 800c2a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2b2:	f107 0308 	add.w	r3, r7, #8
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff feca 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c2be:	4a05      	ldr	r2, [pc, #20]	@ (800c2d4 <SDMMC_CmdStopTransfer+0x40>)
 800c2c0:	210c      	movs	r1, #12
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f92e 	bl	800c524 <SDMMC_GetCmdResp1>
 800c2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ca:	69fb      	ldr	r3, [r7, #28]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	05f5e100 	.word	0x05f5e100

0800c2d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	@ 0x28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c2e8:	2307      	movs	r3, #7
 800c2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2ec:	2340      	movs	r3, #64	@ 0x40
 800c2ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2fa:	f107 0310 	add.w	r3, r7, #16
 800c2fe:	4619      	mov	r1, r3
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff fea6 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c30a:	2107      	movs	r1, #7
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 f909 	bl	800c524 <SDMMC_GetCmdResp1>
 800c312:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c316:	4618      	mov	r0, r3
 800c318:	3728      	adds	r7, #40	@ 0x28
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b088      	sub	sp, #32
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c32e:	2300      	movs	r3, #0
 800c330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c332:	2300      	movs	r3, #0
 800c334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c33a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c33c:	f107 0308 	add.w	r3, r7, #8
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fe85 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fb23 	bl	800c994 <SDMMC_GetCmdError>
 800c34e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c350:	69fb      	ldr	r3, [r7, #28]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3720      	adds	r7, #32
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b088      	sub	sp, #32
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c362:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c366:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c368:	2308      	movs	r3, #8
 800c36a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c36c:	2340      	movs	r3, #64	@ 0x40
 800c36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c378:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c37a:	f107 0308 	add.w	r3, r7, #8
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff fe66 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fab6 	bl	800c8f8 <SDMMC_GetCmdResp7>
 800c38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c38e:	69fb      	ldr	r3, [r7, #28]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3720      	adds	r7, #32
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c3a6:	2337      	movs	r3, #55	@ 0x37
 800c3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3aa:	2340      	movs	r3, #64	@ 0x40
 800c3ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3b8:	f107 0308 	add.w	r3, r7, #8
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff fe47 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c3c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3c8:	2137      	movs	r1, #55	@ 0x37
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f8aa 	bl	800c524 <SDMMC_GetCmdResp1>
 800c3d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3720      	adds	r7, #32
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c3ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c3f2:	2329      	movs	r3, #41	@ 0x29
 800c3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3f6:	2340      	movs	r3, #64	@ 0x40
 800c3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c402:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c404:	f107 0308 	add.w	r3, r7, #8
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7ff fe21 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f9bd 	bl	800c790 <SDMMC_GetCmdResp3>
 800c416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c418:	69fb      	ldr	r3, [r7, #28]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b088      	sub	sp, #32
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c42e:	2302      	movs	r3, #2
 800c430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c432:	23c0      	movs	r3, #192	@ 0xc0
 800c434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c43a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c43e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c440:	f107 0308 	add.w	r3, r7, #8
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff fe03 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f957 	bl	800c700 <SDMMC_GetCmdResp2>
 800c452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c454:	69fb      	ldr	r3, [r7, #28]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3720      	adds	r7, #32
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b088      	sub	sp, #32
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c46c:	2309      	movs	r3, #9
 800c46e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c470:	23c0      	movs	r3, #192	@ 0xc0
 800c472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c478:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c47c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c47e:	f107 0308 	add.w	r3, r7, #8
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff fde4 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f938 	bl	800c700 <SDMMC_GetCmdResp2>
 800c490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c492:	69fb      	ldr	r3, [r7, #28]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4ae:	2340      	movs	r3, #64	@ 0x40
 800c4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4bc:	f107 0308 	add.w	r3, r7, #8
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff fdc5 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	2103      	movs	r1, #3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f99d 	bl	800c80c <SDMMC_GetCmdResp6>
 800c4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4d4:	69fb      	ldr	r3, [r7, #28]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b088      	sub	sp, #32
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c4ec:	230d      	movs	r3, #13
 800c4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4f0:	2340      	movs	r3, #64	@ 0x40
 800c4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4fe:	f107 0308 	add.w	r3, r7, #8
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff fda4 	bl	800c052 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c50a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c50e:	210d      	movs	r1, #13
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f807 	bl	800c524 <SDMMC_GetCmdResp1>
 800c516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c518:	69fb      	ldr	r3, [r7, #28]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3720      	adds	r7, #32
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	460b      	mov	r3, r1
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c532:	4b70      	ldr	r3, [pc, #448]	@ (800c6f4 <SDMMC_GetCmdResp1+0x1d0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a70      	ldr	r2, [pc, #448]	@ (800c6f8 <SDMMC_GetCmdResp1+0x1d4>)
 800c538:	fba2 2303 	umull	r2, r3, r2, r3
 800c53c:	0a5a      	lsrs	r2, r3, #9
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	fb02 f303 	mul.w	r3, r2, r3
 800c544:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	1e5a      	subs	r2, r3, #1
 800c54a:	61fa      	str	r2, [r7, #28]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c550:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c554:	e0c9      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c55a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0ef      	beq.n	800c546 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1ea      	bne.n	800c546 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2204      	movs	r2, #4
 800c580:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c582:	2304      	movs	r3, #4
 800c584:	e0b1      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d004      	beq.n	800c59c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2201      	movs	r2, #1
 800c596:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c598:	2301      	movs	r3, #1
 800c59a:	e0a6      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	22c5      	movs	r2, #197	@ 0xc5
 800c5a0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7ff fd7f 	bl	800c0a6 <SDIO_GetCommandResponse>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d001      	beq.n	800c5b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e099      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff fd81 	bl	800c0c0 <SDIO_GetResponse>
 800c5be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	4b4e      	ldr	r3, [pc, #312]	@ (800c6fc <SDMMC_GetCmdResp1+0x1d8>)
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e08d      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	da02      	bge.n	800c5da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c5d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c5d8:	e087      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c5e4:	2340      	movs	r3, #64	@ 0x40
 800c5e6:	e080      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c5f2:	2380      	movs	r3, #128	@ 0x80
 800c5f4:	e079      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c604:	e071      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c610:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c614:	e069      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c624:	e061      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c630:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c634:	e059      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c644:	e051      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c654:	e049      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c660:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c664:	e041      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c674:	e039      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c684:	e031      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c690:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c694:	e029      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c6a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c6a4:	e021      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c6b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c6b4:	e019      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c6c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c6c4:	e011      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c6d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c6d4:	e009      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f003 0308 	and.w	r3, r3, #8
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c6e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c6e4:	e001      	b.n	800c6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3720      	adds	r7, #32
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20000000 	.word	0x20000000
 800c6f8:	10624dd3 	.word	0x10624dd3
 800c6fc:	fdffe008 	.word	0xfdffe008

0800c700 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c708:	4b1f      	ldr	r3, [pc, #124]	@ (800c788 <SDMMC_GetCmdResp2+0x88>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a1f      	ldr	r2, [pc, #124]	@ (800c78c <SDMMC_GetCmdResp2+0x8c>)
 800c70e:	fba2 2303 	umull	r2, r3, r2, r3
 800c712:	0a5b      	lsrs	r3, r3, #9
 800c714:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c718:	fb02 f303 	mul.w	r3, r2, r3
 800c71c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	1e5a      	subs	r2, r3, #1
 800c722:	60fa      	str	r2, [r7, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d102      	bne.n	800c72e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c728:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c72c:	e026      	b.n	800c77c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c732:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d0ef      	beq.n	800c71e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1ea      	bne.n	800c71e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	d004      	beq.n	800c75e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2204      	movs	r2, #4
 800c758:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c75a:	2304      	movs	r3, #4
 800c75c:	e00e      	b.n	800c77c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	d004      	beq.n	800c774 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c770:	2301      	movs	r3, #1
 800c772:	e003      	b.n	800c77c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	22c5      	movs	r2, #197	@ 0xc5
 800c778:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	20000000 	.word	0x20000000
 800c78c:	10624dd3 	.word	0x10624dd3

0800c790 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c798:	4b1a      	ldr	r3, [pc, #104]	@ (800c804 <SDMMC_GetCmdResp3+0x74>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a1a      	ldr	r2, [pc, #104]	@ (800c808 <SDMMC_GetCmdResp3+0x78>)
 800c79e:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a2:	0a5b      	lsrs	r3, r3, #9
 800c7a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7a8:	fb02 f303 	mul.w	r3, r2, r3
 800c7ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	1e5a      	subs	r2, r3, #1
 800c7b2:	60fa      	str	r2, [r7, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d102      	bne.n	800c7be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7bc:	e01b      	b.n	800c7f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0ef      	beq.n	800c7ae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1ea      	bne.n	800c7ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7dc:	f003 0304 	and.w	r3, r3, #4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d004      	beq.n	800c7ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2204      	movs	r2, #4
 800c7e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7ea:	2304      	movs	r3, #4
 800c7ec:	e003      	b.n	800c7f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	22c5      	movs	r2, #197	@ 0xc5
 800c7f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	20000000 	.word	0x20000000
 800c808:	10624dd3 	.word	0x10624dd3

0800c80c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b088      	sub	sp, #32
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	460b      	mov	r3, r1
 800c816:	607a      	str	r2, [r7, #4]
 800c818:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c81a:	4b35      	ldr	r3, [pc, #212]	@ (800c8f0 <SDMMC_GetCmdResp6+0xe4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a35      	ldr	r2, [pc, #212]	@ (800c8f4 <SDMMC_GetCmdResp6+0xe8>)
 800c820:	fba2 2303 	umull	r2, r3, r2, r3
 800c824:	0a5b      	lsrs	r3, r3, #9
 800c826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c82a:	fb02 f303 	mul.w	r3, r2, r3
 800c82e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	1e5a      	subs	r2, r3, #1
 800c834:	61fa      	str	r2, [r7, #28]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c83a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c83e:	e052      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c844:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d0ef      	beq.n	800c830 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1ea      	bne.n	800c830 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d004      	beq.n	800c870 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2204      	movs	r2, #4
 800c86a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c86c:	2304      	movs	r3, #4
 800c86e:	e03a      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d004      	beq.n	800c886 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c882:	2301      	movs	r3, #1
 800c884:	e02f      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f7ff fc0d 	bl	800c0a6 <SDIO_GetCommandResponse>
 800c88c:	4603      	mov	r3, r0
 800c88e:	461a      	mov	r2, r3
 800c890:	7afb      	ldrb	r3, [r7, #11]
 800c892:	4293      	cmp	r3, r2
 800c894:	d001      	beq.n	800c89a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c896:	2301      	movs	r3, #1
 800c898:	e025      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	22c5      	movs	r2, #197	@ 0xc5
 800c89e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7ff fc0c 	bl	800c0c0 <SDIO_GetResponse>
 800c8a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d106      	bne.n	800c8c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	0c1b      	lsrs	r3, r3, #16
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e011      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c8cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8d0:	e009      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c8dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8e0:	e001      	b.n	800c8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c8e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20000000 	.word	0x20000000
 800c8f4:	10624dd3 	.word	0x10624dd3

0800c8f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c900:	4b22      	ldr	r3, [pc, #136]	@ (800c98c <SDMMC_GetCmdResp7+0x94>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a22      	ldr	r2, [pc, #136]	@ (800c990 <SDMMC_GetCmdResp7+0x98>)
 800c906:	fba2 2303 	umull	r2, r3, r2, r3
 800c90a:	0a5b      	lsrs	r3, r3, #9
 800c90c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c910:	fb02 f303 	mul.w	r3, r2, r3
 800c914:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1e5a      	subs	r2, r3, #1
 800c91a:	60fa      	str	r2, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d102      	bne.n	800c926 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c920:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c924:	e02c      	b.n	800c980 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c92a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c932:	2b00      	cmp	r3, #0
 800c934:	d0ef      	beq.n	800c916 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1ea      	bne.n	800c916 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c944:	f003 0304 	and.w	r3, r3, #4
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d004      	beq.n	800c956 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2204      	movs	r2, #4
 800c950:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c952:	2304      	movs	r3, #4
 800c954:	e014      	b.n	800c980 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c95a:	f003 0301 	and.w	r3, r3, #1
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d004      	beq.n	800c96c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c968:	2301      	movs	r3, #1
 800c96a:	e009      	b.n	800c980 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2240      	movs	r2, #64	@ 0x40
 800c97c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c97e:	2300      	movs	r3, #0
  
}
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	20000000 	.word	0x20000000
 800c990:	10624dd3 	.word	0x10624dd3

0800c994 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c99c:	4b11      	ldr	r3, [pc, #68]	@ (800c9e4 <SDMMC_GetCmdError+0x50>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a11      	ldr	r2, [pc, #68]	@ (800c9e8 <SDMMC_GetCmdError+0x54>)
 800c9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a6:	0a5b      	lsrs	r3, r3, #9
 800c9a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9ac:	fb02 f303 	mul.w	r3, r2, r3
 800c9b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	1e5a      	subs	r2, r3, #1
 800c9b6:	60fa      	str	r2, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d102      	bne.n	800c9c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9c0:	e009      	b.n	800c9d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0f1      	beq.n	800c9b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	22c5      	movs	r2, #197	@ 0xc5
 800c9d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	20000000 	.word	0x20000000
 800c9e8:	10624dd3 	.word	0x10624dd3

0800c9ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	f107 001c 	add.w	r0, r7, #28
 800c9fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c9fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d123      	bne.n	800ca4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ca1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ca2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d105      	bne.n	800ca42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9dc 	bl	800ce00 <USB_CoreReset>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
 800ca4c:	e01b      	b.n	800ca86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f9d0 	bl	800ce00 <USB_CoreReset>
 800ca60:	4603      	mov	r3, r0
 800ca62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ca64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d106      	bne.n	800ca7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	639a      	str	r2, [r3, #56]	@ 0x38
 800ca78:	e005      	b.n	800ca86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ca86:	7fbb      	ldrb	r3, [r7, #30]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d10b      	bne.n	800caa4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f043 0206 	orr.w	r2, r3, #6
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f043 0220 	orr.w	r2, r3, #32
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cab0:	b004      	add	sp, #16
 800cab2:	4770      	bx	lr

0800cab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	f043 0201 	orr.w	r2, r3, #1
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f023 0201 	bic.w	r2, r3, #1
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d115      	bne.n	800cb46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cb26:	200a      	movs	r0, #10
 800cb28:	f7f6 fc70 	bl	800340c <HAL_Delay>
      ms += 10U;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	330a      	adds	r3, #10
 800cb30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f956 	bl	800cde4 <USB_GetMode>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d01e      	beq.n	800cb7c <USB_SetCurrentMode+0x84>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2bc7      	cmp	r3, #199	@ 0xc7
 800cb42:	d9f0      	bls.n	800cb26 <USB_SetCurrentMode+0x2e>
 800cb44:	e01a      	b.n	800cb7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb46:	78fb      	ldrb	r3, [r7, #3]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d115      	bne.n	800cb78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cb58:	200a      	movs	r0, #10
 800cb5a:	f7f6 fc57 	bl	800340c <HAL_Delay>
      ms += 10U;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	330a      	adds	r3, #10
 800cb62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f93d 	bl	800cde4 <USB_GetMode>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <USB_SetCurrentMode+0x84>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2bc7      	cmp	r3, #199	@ 0xc7
 800cb74:	d9f0      	bls.n	800cb58 <USB_SetCurrentMode+0x60>
 800cb76:	e001      	b.n	800cb7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e005      	b.n	800cb88 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2bc8      	cmp	r3, #200	@ 0xc8
 800cb80:	d101      	bne.n	800cb86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e000      	b.n	800cb88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3301      	adds	r3, #1
 800cba2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cbaa:	d901      	bls.n	800cbb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cbac:	2303      	movs	r3, #3
 800cbae:	e01b      	b.n	800cbe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	daf2      	bge.n	800cb9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	019b      	lsls	r3, r3, #6
 800cbc0:	f043 0220 	orr.w	r2, r3, #32
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cbd4:	d901      	bls.n	800cbda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e006      	b.n	800cbe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	691b      	ldr	r3, [r3, #16]
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b20      	cmp	r3, #32
 800cbe4:	d0f0      	beq.n	800cbc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3301      	adds	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc0c:	d901      	bls.n	800cc12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e018      	b.n	800cc44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	daf2      	bge.n	800cc00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2210      	movs	r2, #16
 800cc22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc30:	d901      	bls.n	800cc36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e006      	b.n	800cc44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	f003 0310 	and.w	r3, r3, #16
 800cc3e:	2b10      	cmp	r3, #16
 800cc40:	d0f0      	beq.n	800cc24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b089      	sub	sp, #36	@ 0x24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	460b      	mov	r3, r1
 800cc60:	71fb      	strb	r3, [r7, #7]
 800cc62:	4613      	mov	r3, r2
 800cc64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d123      	bne.n	800ccbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc76:	88bb      	ldrh	r3, [r7, #4]
 800cc78:	3303      	adds	r3, #3
 800cc7a:	089b      	lsrs	r3, r3, #2
 800cc7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	e018      	b.n	800ccb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	031a      	lsls	r2, r3, #12
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc90:	461a      	mov	r2, r3
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	3301      	adds	r3, #1
 800cca2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	3301      	adds	r3, #1
 800cca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	3301      	adds	r3, #1
 800ccae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	61bb      	str	r3, [r7, #24]
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d3e2      	bcc.n	800cc84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3724      	adds	r7, #36	@ 0x24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b08b      	sub	sp, #44	@ 0x2c
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cce2:	88fb      	ldrh	r3, [r7, #6]
 800cce4:	089b      	lsrs	r3, r3, #2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ccea:	88fb      	ldrh	r3, [r7, #6]
 800ccec:	f003 0303 	and.w	r3, r3, #3
 800ccf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	623b      	str	r3, [r7, #32]
 800ccf6:	e014      	b.n	800cd22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd02:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd06:	3301      	adds	r3, #1
 800cd08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	3301      	adds	r3, #1
 800cd14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd18:	3301      	adds	r3, #1
 800cd1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	623b      	str	r3, [r7, #32]
 800cd22:	6a3a      	ldr	r2, [r7, #32]
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d3e6      	bcc.n	800ccf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd2a:	8bfb      	ldrh	r3, [r7, #30]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d01e      	beq.n	800cd6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f107 0310 	add.w	r3, r7, #16
 800cd40:	6812      	ldr	r2, [r2, #0]
 800cd42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	701a      	strb	r2, [r3, #0]
      i++;
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5e:	3301      	adds	r3, #1
 800cd60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cd62:	8bfb      	ldrh	r3, [r7, #30]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd68:	8bfb      	ldrh	r3, [r7, #30]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1ea      	bne.n	800cd44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	372c      	adds	r7, #44	@ 0x2c
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	4013      	ands	r3, r2
 800cd92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cd94:	68fb      	ldr	r3, [r7, #12]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b085      	sub	sp, #20
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	460b      	mov	r3, r1
 800cdac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800cdb2:	78fb      	ldrb	r3, [r7, #3]
 800cdb4:	015a      	lsls	r2, r3, #5
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	4413      	add	r3, r2
 800cdba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800cdc2:	78fb      	ldrb	r3, [r7, #3]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	f003 0301 	and.w	r3, r3, #1
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce18:	d901      	bls.n	800ce1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e01b      	b.n	800ce56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	daf2      	bge.n	800ce0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	f043 0201 	orr.w	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce42:	d901      	bls.n	800ce48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e006      	b.n	800ce56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d0f0      	beq.n	800ce36 <USB_CoreReset+0x36>

  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
	...

0800ce64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce64:	b084      	sub	sp, #16
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b086      	sub	sp, #24
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ce72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce84:	461a      	mov	r2, r3
 800ce86:	2300      	movs	r3, #0
 800ce88:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce8e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d119      	bne.n	800ced6 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d10a      	bne.n	800cec0 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ceb8:	f043 0304 	orr.w	r3, r3, #4
 800cebc:	6013      	str	r3, [r2, #0]
 800cebe:	e014      	b.n	800ceea <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cece:	f023 0304 	bic.w	r3, r3, #4
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	e009      	b.n	800ceea <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cee4:	f023 0304 	bic.w	r3, r3, #4
 800cee8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ceea:	2110      	movs	r1, #16
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f7ff fe4f 	bl	800cb90 <USB_FlushTxFifo>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff fe79 	bl	800cbf4 <USB_FlushRxFifo>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	613b      	str	r3, [r7, #16]
 800cf10:	e015      	b.n	800cf3e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	015a      	lsls	r2, r3, #5
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4413      	add	r3, r2
 800cf1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f04f 33ff 	mov.w	r3, #4294967295
 800cf24:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	015a      	lsls	r2, r3, #5
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf32:	461a      	mov	r2, r3
 800cf34:	2300      	movs	r3, #0
 800cf36:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	613b      	str	r3, [r7, #16]
 800cf3e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cf42:	461a      	mov	r2, r3
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d3e3      	bcc.n	800cf12 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f04f 32ff 	mov.w	r2, #4294967295
 800cf56:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a18      	ldr	r2, [pc, #96]	@ (800cfbc <USB_HostInit+0x158>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d10b      	bne.n	800cf78 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf66:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a15      	ldr	r2, [pc, #84]	@ (800cfc0 <USB_HostInit+0x15c>)
 800cf6c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a14      	ldr	r2, [pc, #80]	@ (800cfc4 <USB_HostInit+0x160>)
 800cf72:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800cf76:	e009      	b.n	800cf8c <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2280      	movs	r2, #128	@ 0x80
 800cf7c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a11      	ldr	r2, [pc, #68]	@ (800cfc8 <USB_HostInit+0x164>)
 800cf82:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a11      	ldr	r2, [pc, #68]	@ (800cfcc <USB_HostInit+0x168>)
 800cf88:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cf8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d105      	bne.n	800cfa0 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	f043 0210 	orr.w	r2, r3, #16
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	699a      	ldr	r2, [r3, #24]
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd0 <USB_HostInit+0x16c>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfb8:	b004      	add	sp, #16
 800cfba:	4770      	bx	lr
 800cfbc:	40040000 	.word	0x40040000
 800cfc0:	01000200 	.word	0x01000200
 800cfc4:	00e00300 	.word	0x00e00300
 800cfc8:	00600080 	.word	0x00600080
 800cfcc:	004000e0 	.word	0x004000e0
 800cfd0:	a3200008 	.word	0xa3200008

0800cfd4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cff2:	f023 0303 	bic.w	r3, r3, #3
 800cff6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	78fb      	ldrb	r3, [r7, #3]
 800d002:	f003 0303 	and.w	r3, r3, #3
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d00c:	4313      	orrs	r3, r2
 800d00e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d010:	78fb      	ldrb	r3, [r7, #3]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d107      	bne.n	800d026 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d01c:	461a      	mov	r2, r3
 800d01e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d022:	6053      	str	r3, [r2, #4]
 800d024:	e00c      	b.n	800d040 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d107      	bne.n	800d03c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d032:	461a      	mov	r2, r3
 800d034:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d038:	6053      	str	r3, [r2, #4]
 800d03a:	e001      	b.n	800d040 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e000      	b.n	800d042 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b084      	sub	sp, #16
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d05a:	2300      	movs	r3, #0
 800d05c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d06e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d07c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d07e:	2064      	movs	r0, #100	@ 0x64
 800d080:	f7f6 f9c4 	bl	800340c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d08c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d090:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d092:	200a      	movs	r0, #10
 800d094:	f7f6 f9ba 	bl	800340c <HAL_Delay>

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d0c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d109      	bne.n	800d0e6 <USB_DriveVbus+0x44>
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d106      	bne.n	800d0e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	68fa      	ldr	r2, [r7, #12]
 800d0dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d0e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d0e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d0ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0f0:	d109      	bne.n	800d106 <USB_DriveVbus+0x64>
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d104:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	0c5b      	lsrs	r3, r3, #17
 800d132:	f003 0303 	and.w	r3, r3, #3
}
 800d136:	4618      	mov	r0, r3
 800d138:	3714      	adds	r7, #20
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr

0800d142 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800d142:	b480      	push	{r7}
 800d144:	b085      	sub	sp, #20
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	b29b      	uxth	r3, r3
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	461a      	mov	r2, r3
 800d172:	4603      	mov	r3, r0
 800d174:	70fb      	strb	r3, [r7, #3]
 800d176:	460b      	mov	r3, r1
 800d178:	70bb      	strb	r3, [r7, #2]
 800d17a:	4613      	mov	r3, r2
 800d17c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800d186:	78fb      	ldrb	r3, [r7, #3]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d192:	461a      	mov	r2, r3
 800d194:	f04f 33ff 	mov.w	r3, #4294967295
 800d198:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d19a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d19e:	2b03      	cmp	r3, #3
 800d1a0:	d87c      	bhi.n	800d29c <USB_HC_Init+0x138>
 800d1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a8 <USB_HC_Init+0x44>)
 800d1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a8:	0800d1b9 	.word	0x0800d1b9
 800d1ac:	0800d25f 	.word	0x0800d25f
 800d1b0:	0800d1b9 	.word	0x0800d1b9
 800d1b4:	0800d221 	.word	0x0800d221
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d1b8:	78fb      	ldrb	r3, [r7, #3]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800d1ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d1cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da10      	bge.n	800d1f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d1d4:	78fb      	ldrb	r3, [r7, #3]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	78fa      	ldrb	r2, [r7, #3]
 800d1e4:	0151      	lsls	r1, r2, #5
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	440a      	add	r2, r1
 800d1ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d1ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800d1f4:	e055      	b.n	800d2a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a6f      	ldr	r2, [pc, #444]	@ (800d3b8 <USB_HC_Init+0x254>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d151      	bne.n	800d2a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d1fe:	78fb      	ldrb	r3, [r7, #3]
 800d200:	015a      	lsls	r2, r3, #5
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	4413      	add	r3, r2
 800d206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	0151      	lsls	r1, r2, #5
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	440a      	add	r2, r1
 800d214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d218:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d21c:	60d3      	str	r3, [r2, #12]
      break;
 800d21e:	e040      	b.n	800d2a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d220:	78fb      	ldrb	r3, [r7, #3]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	4413      	add	r3, r2
 800d228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d22c:	461a      	mov	r2, r3
 800d22e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800d232:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d234:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	da34      	bge.n	800d2a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	0151      	lsls	r1, r2, #5
 800d24e:	693a      	ldr	r2, [r7, #16]
 800d250:	440a      	add	r2, r1
 800d252:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d25a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d25c:	e023      	b.n	800d2a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	4413      	add	r3, r2
 800d266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d26a:	461a      	mov	r2, r3
 800d26c:	f240 2325 	movw	r3, #549	@ 0x225
 800d270:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d272:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d276:	2b00      	cmp	r3, #0
 800d278:	da17      	bge.n	800d2aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	4413      	add	r3, r2
 800d282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	78fa      	ldrb	r2, [r7, #3]
 800d28a:	0151      	lsls	r1, r2, #5
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	440a      	add	r2, r1
 800d290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d294:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800d298:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d29a:	e006      	b.n	800d2aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	77fb      	strb	r3, [r7, #31]
      break;
 800d2a0:	e004      	b.n	800d2ac <USB_HC_Init+0x148>
      break;
 800d2a2:	bf00      	nop
 800d2a4:	e002      	b.n	800d2ac <USB_HC_Init+0x148>
      break;
 800d2a6:	bf00      	nop
 800d2a8:	e000      	b.n	800d2ac <USB_HC_Init+0x148>
      break;
 800d2aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d2ac:	78fb      	ldrb	r3, [r7, #3]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d2be:	78fb      	ldrb	r3, [r7, #3]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	78fa      	ldrb	r2, [r7, #3]
 800d2ce:	0151      	lsls	r1, r2, #5
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	440a      	add	r2, r1
 800d2d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d2d8:	f043 0302 	orr.w	r3, r3, #2
 800d2dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d2e4:	699a      	ldr	r2, [r3, #24]
 800d2e6:	78fb      	ldrb	r3, [r7, #3]
 800d2e8:	f003 030f 	and.w	r3, r3, #15
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d2f2:	6939      	ldr	r1, [r7, #16]
 800d2f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d308:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	da03      	bge.n	800d318 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d314:	61bb      	str	r3, [r7, #24]
 800d316:	e001      	b.n	800d31c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800d318:	2300      	movs	r3, #0
 800d31a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff fef9 	bl	800d114 <USB_GetHostSpeed>
 800d322:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d324:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d106      	bne.n	800d33a <USB_HC_Init+0x1d6>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d003      	beq.n	800d33a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d336:	617b      	str	r3, [r7, #20]
 800d338:	e001      	b.n	800d33e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d33a:	2300      	movs	r3, #0
 800d33c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d33e:	787b      	ldrb	r3, [r7, #1]
 800d340:	059b      	lsls	r3, r3, #22
 800d342:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d346:	78bb      	ldrb	r3, [r7, #2]
 800d348:	02db      	lsls	r3, r3, #11
 800d34a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d34e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d350:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d354:	049b      	lsls	r3, r3, #18
 800d356:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d35a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800d35c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d35e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d362:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	431a      	orrs	r2, r3
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d36c:	78fa      	ldrb	r2, [r7, #3]
 800d36e:	0151      	lsls	r1, r2, #5
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	440a      	add	r2, r1
 800d374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d378:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d37c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d37e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d382:	2b03      	cmp	r3, #3
 800d384:	d003      	beq.n	800d38e <USB_HC_Init+0x22a>
 800d386:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d10f      	bne.n	800d3ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d38e:	78fb      	ldrb	r3, [r7, #3]
 800d390:	015a      	lsls	r2, r3, #5
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	4413      	add	r3, r2
 800d396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	78fa      	ldrb	r2, [r7, #3]
 800d39e:	0151      	lsls	r1, r2, #5
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	440a      	add	r2, r1
 800d3a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d3a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d3ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d3ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	40040000 	.word	0x40040000

0800d3bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08c      	sub	sp, #48	@ 0x30
 800d3c0:	af02      	add	r7, sp, #8
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800d3d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	4a5d      	ldr	r2, [pc, #372]	@ (800d554 <USB_HC_StartXfer+0x198>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d12f      	bne.n	800d442 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800d3e2:	79fb      	ldrb	r3, [r7, #7]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d11c      	bne.n	800d422 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	7c9b      	ldrb	r3, [r3, #18]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d003      	beq.n	800d3f8 <USB_HC_StartXfer+0x3c>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	7c9b      	ldrb	r3, [r3, #18]
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d124      	bne.n	800d442 <USB_HC_StartXfer+0x86>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	799b      	ldrb	r3, [r3, #6]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d120      	bne.n	800d442 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	015a      	lsls	r2, r3, #5
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	4413      	add	r3, r2
 800d408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	69fa      	ldr	r2, [r7, #28]
 800d410:	0151      	lsls	r1, r2, #5
 800d412:	6a3a      	ldr	r2, [r7, #32]
 800d414:	440a      	add	r2, r1
 800d416:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d41a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d41e:	60d3      	str	r3, [r2, #12]
 800d420:	e00f      	b.n	800d442 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	791b      	ldrb	r3, [r3, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10b      	bne.n	800d442 <USB_HC_StartXfer+0x86>
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	795b      	ldrb	r3, [r3, #5]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d107      	bne.n	800d442 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	785b      	ldrb	r3, [r3, #1]
 800d436:	4619      	mov	r1, r3
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f000 fb6b 	bl	800db14 <USB_DoPing>
        return HAL_OK;
 800d43e:	2300      	movs	r3, #0
 800d440:	e232      	b.n	800d8a8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	799b      	ldrb	r3, [r3, #6]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d158      	bne.n	800d4fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800d44a:	2301      	movs	r3, #1
 800d44c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	78db      	ldrb	r3, [r3, #3]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d007      	beq.n	800d466 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d456:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	8a92      	ldrh	r2, [r2, #20]
 800d45c:	fb03 f202 	mul.w	r2, r3, r2
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	61da      	str	r2, [r3, #28]
 800d464:	e07c      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	7c9b      	ldrb	r3, [r3, #18]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d130      	bne.n	800d4d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	2bbc      	cmp	r3, #188	@ 0xbc
 800d474:	d918      	bls.n	800d4a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	8a9b      	ldrh	r3, [r3, #20]
 800d47a:	461a      	mov	r2, r3
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	69da      	ldr	r2, [r3, #28]
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d003      	beq.n	800d498 <USB_HC_StartXfer+0xdc>
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	2b02      	cmp	r3, #2
 800d496:	d103      	bne.n	800d4a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2202      	movs	r2, #2
 800d49c:	60da      	str	r2, [r3, #12]
 800d49e:	e05f      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	60da      	str	r2, [r3, #12]
 800d4a6:	e05b      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	6a1a      	ldr	r2, [r3, #32]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d007      	beq.n	800d4c8 <USB_HC_StartXfer+0x10c>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d003      	beq.n	800d4c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2204      	movs	r2, #4
 800d4c4:	60da      	str	r2, [r3, #12]
 800d4c6:	e04b      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	2203      	movs	r2, #3
 800d4cc:	60da      	str	r2, [r3, #12]
 800d4ce:	e047      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d10d      	bne.n	800d4f2 <USB_HC_StartXfer+0x136>
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	8a92      	ldrh	r2, [r2, #20]
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d907      	bls.n	800d4f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d4e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	8a92      	ldrh	r2, [r2, #20]
 800d4e8:	fb03 f202 	mul.w	r2, r3, r2
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	61da      	str	r2, [r3, #28]
 800d4f0:	e036      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	6a1a      	ldr	r2, [r3, #32]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	61da      	str	r2, [r3, #28]
 800d4fa:	e031      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d018      	beq.n	800d536 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	6a1b      	ldr	r3, [r3, #32]
 800d508:	68ba      	ldr	r2, [r7, #8]
 800d50a:	8a92      	ldrh	r2, [r2, #20]
 800d50c:	4413      	add	r3, r2
 800d50e:	3b01      	subs	r3, #1
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	8a92      	ldrh	r2, [r2, #20]
 800d514:	fbb3 f3f2 	udiv	r3, r3, r2
 800d518:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800d51a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d51c:	8b7b      	ldrh	r3, [r7, #26]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d90b      	bls.n	800d53a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800d522:	8b7b      	ldrh	r3, [r7, #26]
 800d524:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d526:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	8a92      	ldrh	r2, [r2, #20]
 800d52c:	fb03 f202 	mul.w	r2, r3, r2
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	61da      	str	r2, [r3, #28]
 800d534:	e001      	b.n	800d53a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800d536:	2301      	movs	r3, #1
 800d538:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	78db      	ldrb	r3, [r3, #3]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00a      	beq.n	800d558 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	8a92      	ldrh	r2, [r2, #20]
 800d548:	fb03 f202 	mul.w	r2, r3, r2
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	61da      	str	r2, [r3, #28]
 800d550:	e006      	b.n	800d560 <USB_HC_StartXfer+0x1a4>
 800d552:	bf00      	nop
 800d554:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	6a1a      	ldr	r2, [r3, #32]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	69db      	ldr	r3, [r3, #28]
 800d564:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d56a:	04d9      	lsls	r1, r3, #19
 800d56c:	4ba3      	ldr	r3, [pc, #652]	@ (800d7fc <USB_HC_StartXfer+0x440>)
 800d56e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d570:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	7d9b      	ldrb	r3, [r3, #22]
 800d576:	075b      	lsls	r3, r3, #29
 800d578:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d57c:	69f9      	ldr	r1, [r7, #28]
 800d57e:	0148      	lsls	r0, r1, #5
 800d580:	6a39      	ldr	r1, [r7, #32]
 800d582:	4401      	add	r1, r0
 800d584:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d588:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d58a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d009      	beq.n	800d5a6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	6999      	ldr	r1, [r3, #24]
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5a2:	460a      	mov	r2, r1
 800d5a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	bf0c      	ite	eq
 800d5b6:	2301      	moveq	r3, #1
 800d5b8:	2300      	movne	r3, #0
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	6a3b      	ldr	r3, [r7, #32]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	69fa      	ldr	r2, [r7, #28]
 800d5ce:	0151      	lsls	r1, r2, #5
 800d5d0:	6a3a      	ldr	r2, [r7, #32]
 800d5d2:	440a      	add	r2, r1
 800d5d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d5d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d5dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	015a      	lsls	r2, r3, #5
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	7e7b      	ldrb	r3, [r7, #25]
 800d5ee:	075b      	lsls	r3, r3, #29
 800d5f0:	69f9      	ldr	r1, [r7, #28]
 800d5f2:	0148      	lsls	r0, r1, #5
 800d5f4:	6a39      	ldr	r1, [r7, #32]
 800d5f6:	4401      	add	r1, r0
 800d5f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	799b      	ldrb	r3, [r3, #6]
 800d604:	2b01      	cmp	r3, #1
 800d606:	f040 80c3 	bne.w	800d790 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	7c5b      	ldrb	r3, [r3, #17]
 800d60e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800d614:	4313      	orrs	r3, r2
 800d616:	69fa      	ldr	r2, [r7, #28]
 800d618:	0151      	lsls	r1, r2, #5
 800d61a:	6a3a      	ldr	r2, [r7, #32]
 800d61c:	440a      	add	r2, r1
 800d61e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800d622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800d626:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	69fa      	ldr	r2, [r7, #28]
 800d638:	0151      	lsls	r1, r2, #5
 800d63a:	6a3a      	ldr	r2, [r7, #32]
 800d63c:	440a      	add	r2, r1
 800d63e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d642:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	79db      	ldrb	r3, [r3, #7]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d123      	bne.n	800d698 <USB_HC_StartXfer+0x2dc>
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	78db      	ldrb	r3, [r3, #3]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d11f      	bne.n	800d698 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	015a      	lsls	r2, r3, #5
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	4413      	add	r3, r2
 800d660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	69fa      	ldr	r2, [r7, #28]
 800d668:	0151      	lsls	r1, r2, #5
 800d66a:	6a3a      	ldr	r2, [r7, #32]
 800d66c:	440a      	add	r2, r1
 800d66e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d676:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	015a      	lsls	r2, r3, #5
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	4413      	add	r3, r2
 800d680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	69fa      	ldr	r2, [r7, #28]
 800d688:	0151      	lsls	r1, r2, #5
 800d68a:	6a3a      	ldr	r2, [r7, #32]
 800d68c:	440a      	add	r2, r1
 800d68e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d696:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	7c9b      	ldrb	r3, [r3, #18]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d003      	beq.n	800d6a8 <USB_HC_StartXfer+0x2ec>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	7c9b      	ldrb	r3, [r3, #18]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d117      	bne.n	800d6d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d113      	bne.n	800d6d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	78db      	ldrb	r3, [r3, #3]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d10f      	bne.n	800d6d8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	69fa      	ldr	r2, [r7, #28]
 800d6c8:	0151      	lsls	r1, r2, #5
 800d6ca:	6a3a      	ldr	r2, [r7, #32]
 800d6cc:	440a      	add	r2, r1
 800d6ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d6d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6d6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	7c9b      	ldrb	r3, [r3, #18]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d162      	bne.n	800d7a6 <USB_HC_StartXfer+0x3ea>
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	78db      	ldrb	r3, [r3, #3]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d15e      	bne.n	800d7a6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d858      	bhi.n	800d7a4 <USB_HC_StartXfer+0x3e8>
 800d6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6f8 <USB_HC_StartXfer+0x33c>)
 800d6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f8:	0800d709 	.word	0x0800d709
 800d6fc:	0800d72b 	.word	0x0800d72b
 800d700:	0800d74d 	.word	0x0800d74d
 800d704:	0800d76f 	.word	0x0800d76f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	015a      	lsls	r2, r3, #5
 800d70c:	6a3b      	ldr	r3, [r7, #32]
 800d70e:	4413      	add	r3, r2
 800d710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	69fa      	ldr	r2, [r7, #28]
 800d718:	0151      	lsls	r1, r2, #5
 800d71a:	6a3a      	ldr	r2, [r7, #32]
 800d71c:	440a      	add	r2, r1
 800d71e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d726:	6053      	str	r3, [r2, #4]
          break;
 800d728:	e03d      	b.n	800d7a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	015a      	lsls	r2, r3, #5
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	4413      	add	r3, r2
 800d732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	69fa      	ldr	r2, [r7, #28]
 800d73a:	0151      	lsls	r1, r2, #5
 800d73c:	6a3a      	ldr	r2, [r7, #32]
 800d73e:	440a      	add	r2, r1
 800d740:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d744:	f043 030e 	orr.w	r3, r3, #14
 800d748:	6053      	str	r3, [r2, #4]
          break;
 800d74a:	e02c      	b.n	800d7a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	015a      	lsls	r2, r3, #5
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	4413      	add	r3, r2
 800d754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	69fa      	ldr	r2, [r7, #28]
 800d75c:	0151      	lsls	r1, r2, #5
 800d75e:	6a3a      	ldr	r2, [r7, #32]
 800d760:	440a      	add	r2, r1
 800d762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d76a:	6053      	str	r3, [r2, #4]
          break;
 800d76c:	e01b      	b.n	800d7a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	4413      	add	r3, r2
 800d776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	69fa      	ldr	r2, [r7, #28]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	6a3a      	ldr	r2, [r7, #32]
 800d782:	440a      	add	r2, r1
 800d784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d78c:	6053      	str	r3, [r2, #4]
          break;
 800d78e:	e00a      	b.n	800d7a6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	4413      	add	r3, r2
 800d798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d79c:	461a      	mov	r2, r3
 800d79e:	2300      	movs	r3, #0
 800d7a0:	6053      	str	r3, [r2, #4]
 800d7a2:	e000      	b.n	800d7a6 <USB_HC_StartXfer+0x3ea>
          break;
 800d7a4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d7bc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	78db      	ldrb	r3, [r3, #3]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d004      	beq.n	800d7d0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	e003      	b.n	800d7d8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d7d6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d7de:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	015a      	lsls	r2, r3, #5
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d7f2:	79fb      	ldrb	r3, [r7, #7]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d003      	beq.n	800d800 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	e055      	b.n	800d8a8 <USB_HC_StartXfer+0x4ec>
 800d7fc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	78db      	ldrb	r3, [r3, #3]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d14e      	bne.n	800d8a6 <USB_HC_StartXfer+0x4ea>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	6a1b      	ldr	r3, [r3, #32]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d04a      	beq.n	800d8a6 <USB_HC_StartXfer+0x4ea>
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	79db      	ldrb	r3, [r3, #7]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d146      	bne.n	800d8a6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	7c9b      	ldrb	r3, [r3, #18]
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d831      	bhi.n	800d884 <USB_HC_StartXfer+0x4c8>
 800d820:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <USB_HC_StartXfer+0x46c>)
 800d822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d826:	bf00      	nop
 800d828:	0800d839 	.word	0x0800d839
 800d82c:	0800d85d 	.word	0x0800d85d
 800d830:	0800d839 	.word	0x0800d839
 800d834:	0800d85d 	.word	0x0800d85d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	6a1b      	ldr	r3, [r3, #32]
 800d83c:	3303      	adds	r3, #3
 800d83e:	089b      	lsrs	r3, r3, #2
 800d840:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d842:	8afa      	ldrh	r2, [r7, #22]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d848:	b29b      	uxth	r3, r3
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d91c      	bls.n	800d888 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	f043 0220 	orr.w	r2, r3, #32
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	619a      	str	r2, [r3, #24]
        }
        break;
 800d85a:	e015      	b.n	800d888 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	3303      	adds	r3, #3
 800d862:	089b      	lsrs	r3, r3, #2
 800d864:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d866:	8afa      	ldrh	r2, [r7, #22]
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	b29b      	uxth	r3, r3
 800d872:	429a      	cmp	r2, r3
 800d874:	d90a      	bls.n	800d88c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	619a      	str	r2, [r3, #24]
        }
        break;
 800d882:	e003      	b.n	800d88c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800d884:	bf00      	nop
 800d886:	e002      	b.n	800d88e <USB_HC_StartXfer+0x4d2>
        break;
 800d888:	bf00      	nop
 800d88a:	e000      	b.n	800d88e <USB_HC_StartXfer+0x4d2>
        break;
 800d88c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6999      	ldr	r1, [r3, #24]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	785a      	ldrb	r2, [r3, #1]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6a1b      	ldr	r3, [r3, #32]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	2000      	movs	r0, #0
 800d89e:	9000      	str	r0, [sp, #0]
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7ff f9d5 	bl	800cc50 <USB_WritePacket>
  }

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3728      	adds	r7, #40	@ 0x28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	b29b      	uxth	r3, r3
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b089      	sub	sp, #36	@ 0x24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d8e2:	78fb      	ldrb	r3, [r7, #3]
 800d8e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	0c9b      	lsrs	r3, r3, #18
 800d8fa:	f003 0303 	and.w	r3, r3, #3
 800d8fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	015a      	lsls	r2, r3, #5
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	4413      	add	r3, r2
 800d908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	0fdb      	lsrs	r3, r3, #31
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	0fdb      	lsrs	r3, r3, #31
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	f003 0320 	and.w	r3, r3, #32
 800d934:	2b20      	cmp	r3, #32
 800d936:	d10d      	bne.n	800d954 <USB_HC_Halt+0x82>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10a      	bne.n	800d954 <USB_HC_Halt+0x82>
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d005      	beq.n	800d950 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d002      	beq.n	800d950 <USB_HC_Halt+0x7e>
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b03      	cmp	r3, #3
 800d94e:	d101      	bne.n	800d954 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	e0d8      	b.n	800db06 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d002      	beq.n	800d960 <USB_HC_Halt+0x8e>
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d173      	bne.n	800da48 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	4413      	add	r3, r2
 800d968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	69ba      	ldr	r2, [r7, #24]
 800d970:	0151      	lsls	r1, r2, #5
 800d972:	69fa      	ldr	r2, [r7, #28]
 800d974:	440a      	add	r2, r1
 800d976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d97a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d97e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	f003 0320 	and.w	r3, r3, #32
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d14a      	bne.n	800da22 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d990:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d133      	bne.n	800da00 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	69ba      	ldr	r2, [r7, #24]
 800d9a8:	0151      	lsls	r1, r2, #5
 800d9aa:	69fa      	ldr	r2, [r7, #28]
 800d9ac:	440a      	add	r2, r1
 800d9ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d9b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69ba      	ldr	r2, [r7, #24]
 800d9c8:	0151      	lsls	r1, r2, #5
 800d9ca:	69fa      	ldr	r2, [r7, #28]
 800d9cc:	440a      	add	r2, r1
 800d9ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d9d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d9d6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9e4:	d82e      	bhi.n	800da44 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9fc:	d0ec      	beq.n	800d9d8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d9fe:	e081      	b.n	800db04 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	015a      	lsls	r2, r3, #5
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	4413      	add	r3, r2
 800da08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	69ba      	ldr	r2, [r7, #24]
 800da10:	0151      	lsls	r1, r2, #5
 800da12:	69fa      	ldr	r2, [r7, #28]
 800da14:	440a      	add	r2, r1
 800da16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800da1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800da1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da20:	e070      	b.n	800db04 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	015a      	lsls	r2, r3, #5
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	4413      	add	r3, r2
 800da2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	69ba      	ldr	r2, [r7, #24]
 800da32:	0151      	lsls	r1, r2, #5
 800da34:	69fa      	ldr	r2, [r7, #28]
 800da36:	440a      	add	r2, r1
 800da38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800da3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800da40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da42:	e05f      	b.n	800db04 <USB_HC_Halt+0x232>
            break;
 800da44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da46:	e05d      	b.n	800db04 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	69ba      	ldr	r2, [r7, #24]
 800da58:	0151      	lsls	r1, r2, #5
 800da5a:	69fa      	ldr	r2, [r7, #28]
 800da5c:	440a      	add	r2, r1
 800da5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800da62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d133      	bne.n	800dae0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	015a      	lsls	r2, r3, #5
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	4413      	add	r3, r2
 800da80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	69ba      	ldr	r2, [r7, #24]
 800da88:	0151      	lsls	r1, r2, #5
 800da8a:	69fa      	ldr	r2, [r7, #28]
 800da8c:	440a      	add	r2, r1
 800da8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800da92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	0151      	lsls	r1, r2, #5
 800daaa:	69fa      	ldr	r2, [r7, #28]
 800daac:	440a      	add	r2, r1
 800daae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dab2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dab6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	3301      	adds	r3, #1
 800dabc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dac4:	d81d      	bhi.n	800db02 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	015a      	lsls	r2, r3, #5
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dadc:	d0ec      	beq.n	800dab8 <USB_HC_Halt+0x1e6>
 800dade:	e011      	b.n	800db04 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	015a      	lsls	r2, r3, #5
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	4413      	add	r3, r2
 800dae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	69ba      	ldr	r2, [r7, #24]
 800daf0:	0151      	lsls	r1, r2, #5
 800daf2:	69fa      	ldr	r2, [r7, #28]
 800daf4:	440a      	add	r2, r1
 800daf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dafa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	e000      	b.n	800db04 <USB_HC_Halt+0x232>
          break;
 800db02:	bf00      	nop
    }
  }

  return HAL_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3724      	adds	r7, #36	@ 0x24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800db14:	b480      	push	{r7}
 800db16:	b087      	sub	sp, #28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800db28:	2301      	movs	r3, #1
 800db2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	04da      	lsls	r2, r3, #19
 800db30:	4b15      	ldr	r3, [pc, #84]	@ (800db88 <USB_DoPing+0x74>)
 800db32:	4013      	ands	r3, r2
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	0151      	lsls	r1, r2, #5
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	440a      	add	r2, r1
 800db3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800db44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	015a      	lsls	r2, r3, #5
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	4413      	add	r3, r2
 800db4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800db5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800db64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	015a      	lsls	r2, r3, #5
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	4413      	add	r3, r2
 800db6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db72:	461a      	mov	r2, r3
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	1ff80000 	.word	0x1ff80000

0800db8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b088      	sub	sp, #32
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800db9c:	2300      	movs	r3, #0
 800db9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7fe ff98 	bl	800cad6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dba6:	2110      	movs	r1, #16
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7fe fff1 	bl	800cb90 <USB_FlushTxFifo>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff f81b 	bl	800cbf4 <USB_FlushRxFifo>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dbc8:	2300      	movs	r3, #0
 800dbca:	61bb      	str	r3, [r7, #24]
 800dbcc:	e01f      	b.n	800dc0e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	015a      	lsls	r2, r3, #5
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dbe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dbec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dbf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	015a      	lsls	r2, r3, #5
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc02:	461a      	mov	r2, r3
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	61bb      	str	r3, [r7, #24]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	2b0f      	cmp	r3, #15
 800dc12:	d9dc      	bls.n	800dbce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800dc14:	2300      	movs	r3, #0
 800dc16:	61bb      	str	r3, [r7, #24]
 800dc18:	e034      	b.n	800dc84 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	015a      	lsls	r2, r3, #5
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	4413      	add	r3, r2
 800dc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dc38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dc40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	015a      	lsls	r2, r3, #5
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	4413      	add	r3, r2
 800dc4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc4e:	461a      	mov	r2, r3
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3301      	adds	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc60:	d80c      	bhi.n	800dc7c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	015a      	lsls	r2, r3, #5
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	4413      	add	r3, r2
 800dc6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc78:	d0ec      	beq.n	800dc54 <USB_StopHost+0xc8>
 800dc7a:	e000      	b.n	800dc7e <USB_StopHost+0xf2>
        break;
 800dc7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	3301      	adds	r3, #1
 800dc82:	61bb      	str	r3, [r7, #24]
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	2b0f      	cmp	r3, #15
 800dc88:	d9c7      	bls.n	800dc1a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc90:	461a      	mov	r2, r3
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295
 800dc96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7fe ff07 	bl	800cab4 <USB_EnableGlobalInt>

  return ret;
 800dca6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3720      	adds	r7, #32
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dcb4:	4904      	ldr	r1, [pc, #16]	@ (800dcc8 <MX_FATFS_Init+0x18>)
 800dcb6:	4805      	ldr	r0, [pc, #20]	@ (800dccc <MX_FATFS_Init+0x1c>)
 800dcb8:	f005 fb4a 	bl	8013350 <FATFS_LinkDriver>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	4b03      	ldr	r3, [pc, #12]	@ (800dcd0 <MX_FATFS_Init+0x20>)
 800dcc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dcc4:	bf00      	nop
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	2000080c 	.word	0x2000080c
 800dccc:	08014f00 	.word	0x08014f00
 800dcd0:	20000808 	.word	0x20000808

0800dcd4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dcd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dcee:	f000 f888 	bl	800de02 <BSP_SD_IsDetected>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d001      	beq.n	800dcfc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e005      	b.n	800dd08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800dcfc:	4804      	ldr	r0, [pc, #16]	@ (800dd10 <BSP_SD_Init+0x2c>)
 800dcfe:	f7fb fab7 	bl	8009270 <HAL_SD_Init>
 800dd02:	4603      	mov	r3, r0
 800dd04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dd06:	79fb      	ldrb	r3, [r7, #7]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	20000560 	.word	0x20000560

0800dd14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	68f9      	ldr	r1, [r7, #12]
 800dd2a:	4806      	ldr	r0, [pc, #24]	@ (800dd44 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dd2c:	f7fb fb50 	bl	80093d0 <HAL_SD_ReadBlocks_DMA>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	20000560 	.word	0x20000560

0800dd48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	68f9      	ldr	r1, [r7, #12]
 800dd5e:	4806      	ldr	r0, [pc, #24]	@ (800dd78 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dd60:	f7fb fc16 	bl	8009590 <HAL_SD_WriteBlocks_DMA>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20000560 	.word	0x20000560

0800dd7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd80:	4805      	ldr	r0, [pc, #20]	@ (800dd98 <BSP_SD_GetCardState+0x1c>)
 800dd82:	f7fc f837 	bl	8009df4 <HAL_SD_GetCardState>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	bf14      	ite	ne
 800dd8c:	2301      	movne	r3, #1
 800dd8e:	2300      	moveq	r3, #0
 800dd90:	b2db      	uxtb	r3, r3
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20000560 	.word	0x20000560

0800dd9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	4803      	ldr	r0, [pc, #12]	@ (800ddb4 <BSP_SD_GetCardInfo+0x18>)
 800dda8:	f7fb fff8 	bl	8009d9c <HAL_SD_GetCardInfo>
}
 800ddac:	bf00      	nop
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20000560 	.word	0x20000560

0800ddb8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ddc0:	f000 f818 	bl	800ddf4 <BSP_SD_AbortCallback>
}
 800ddc4:	bf00      	nop
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ddd4:	f000 f9a8 	bl	800e128 <BSP_SD_WriteCpltCallback>
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dde8:	f000 f9aa 	bl	800e140 <BSP_SD_ReadCpltCallback>
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0

}
 800ddf8:	bf00      	nop
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b082      	sub	sp, #8
 800de06:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800de08:	2301      	movs	r3, #1
 800de0a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800de0c:	f000 f80c 	bl	800de28 <BSP_PlatformIsDetected>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800de16:	2300      	movs	r3, #0
 800de18:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800de1a:	79fb      	ldrb	r3, [r7, #7]
 800de1c:	b2db      	uxtb	r3, r3
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800de2e:	2301      	movs	r3, #1
 800de30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800de32:	2104      	movs	r1, #4
 800de34:	4806      	ldr	r0, [pc, #24]	@ (800de50 <BSP_PlatformIsDetected+0x28>)
 800de36:	f7f7 f9b9 	bl	80051ac <HAL_GPIO_ReadPin>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d001      	beq.n	800de44 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800de40:	2300      	movs	r3, #0
 800de42:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800de44:	79fb      	ldrb	r3, [r7, #7]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	40021800 	.word	0x40021800

0800de54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800de5c:	f7f5 faca 	bl	80033f4 <HAL_GetTick>
 800de60:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800de62:	e006      	b.n	800de72 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de64:	f7ff ff8a 	bl	800dd7c <BSP_SD_GetCardState>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d101      	bne.n	800de72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	e009      	b.n	800de86 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800de72:	f7f5 fabf 	bl	80033f4 <HAL_GetTick>
 800de76:	4602      	mov	r2, r0
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d8f0      	bhi.n	800de64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800de82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800de9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dec8 <SD_CheckStatus+0x38>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dea0:	f7ff ff6c 	bl	800dd7c <BSP_SD_GetCardState>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d107      	bne.n	800deba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800deaa:	4b07      	ldr	r3, [pc, #28]	@ (800dec8 <SD_CheckStatus+0x38>)
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	f023 0301 	bic.w	r3, r3, #1
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	4b04      	ldr	r3, [pc, #16]	@ (800dec8 <SD_CheckStatus+0x38>)
 800deb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800deba:	4b03      	ldr	r3, [pc, #12]	@ (800dec8 <SD_CheckStatus+0x38>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	b2db      	uxtb	r3, r3
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20000009 	.word	0x20000009

0800decc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ded6:	f7ff ff05 	bl	800dce4 <BSP_SD_Init>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d107      	bne.n	800def0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff ffd4 	bl	800de90 <SD_CheckStatus>
 800dee8:	4603      	mov	r3, r0
 800deea:	461a      	mov	r2, r3
 800deec:	4b04      	ldr	r3, [pc, #16]	@ (800df00 <SD_initialize+0x34>)
 800deee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800def0:	4b03      	ldr	r3, [pc, #12]	@ (800df00 <SD_initialize+0x34>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	b2db      	uxtb	r3, r3
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	20000009 	.word	0x20000009

0800df04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	4603      	mov	r3, r0
 800df0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff ffbd 	bl	800de90 <SD_CheckStatus>
 800df16:	4603      	mov	r3, r0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	60b9      	str	r1, [r7, #8]
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4603      	mov	r3, r0
 800df2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df30:	2301      	movs	r3, #1
 800df32:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800df34:	f247 5030 	movw	r0, #30000	@ 0x7530
 800df38:	f7ff ff8c 	bl	800de54 <SD_CheckStatusWithTimeout>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	da01      	bge.n	800df46 <SD_read+0x26>
  {
    return res;
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	e03b      	b.n	800dfbe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f7ff fee2 	bl	800dd14 <BSP_SD_ReadBlocks_DMA>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d132      	bne.n	800dfbc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800df56:	4b1c      	ldr	r3, [pc, #112]	@ (800dfc8 <SD_read+0xa8>)
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800df5c:	f7f5 fa4a 	bl	80033f4 <HAL_GetTick>
 800df60:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800df62:	bf00      	nop
 800df64:	4b18      	ldr	r3, [pc, #96]	@ (800dfc8 <SD_read+0xa8>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d108      	bne.n	800df7e <SD_read+0x5e>
 800df6c:	f7f5 fa42 	bl	80033f4 <HAL_GetTick>
 800df70:	4602      	mov	r2, r0
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	f247 522f 	movw	r2, #29999	@ 0x752f
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d9f2      	bls.n	800df64 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800df7e:	4b12      	ldr	r3, [pc, #72]	@ (800dfc8 <SD_read+0xa8>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d102      	bne.n	800df8c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	75fb      	strb	r3, [r7, #23]
 800df8a:	e017      	b.n	800dfbc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800df8c:	4b0e      	ldr	r3, [pc, #56]	@ (800dfc8 <SD_read+0xa8>)
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800df92:	f7f5 fa2f 	bl	80033f4 <HAL_GetTick>
 800df96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df98:	e007      	b.n	800dfaa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df9a:	f7ff feef 	bl	800dd7c <BSP_SD_GetCardState>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d102      	bne.n	800dfaa <SD_read+0x8a>
          {
            res = RES_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dfa8:	e008      	b.n	800dfbc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dfaa:	f7f5 fa23 	bl	80033f4 <HAL_GetTick>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d9ee      	bls.n	800df9a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3718      	adds	r7, #24
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	20000814 	.word	0x20000814

0800dfcc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60b9      	str	r1, [r7, #8]
 800dfd4:	607a      	str	r2, [r7, #4]
 800dfd6:	603b      	str	r3, [r7, #0]
 800dfd8:	4603      	mov	r3, r0
 800dfda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800dfe0:	4b24      	ldr	r3, [pc, #144]	@ (800e074 <SD_write+0xa8>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dfe6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800dfea:	f7ff ff33 	bl	800de54 <SD_CheckStatusWithTimeout>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	da01      	bge.n	800dff8 <SD_write+0x2c>
  {
    return res;
 800dff4:	7dfb      	ldrb	r3, [r7, #23]
 800dff6:	e038      	b.n	800e06a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	68b8      	ldr	r0, [r7, #8]
 800dffe:	f7ff fea3 	bl	800dd48 <BSP_SD_WriteBlocks_DMA>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d12f      	bne.n	800e068 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e008:	f7f5 f9f4 	bl	80033f4 <HAL_GetTick>
 800e00c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e00e:	bf00      	nop
 800e010:	4b18      	ldr	r3, [pc, #96]	@ (800e074 <SD_write+0xa8>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d108      	bne.n	800e02a <SD_write+0x5e>
 800e018:	f7f5 f9ec 	bl	80033f4 <HAL_GetTick>
 800e01c:	4602      	mov	r2, r0
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e026:	4293      	cmp	r3, r2
 800e028:	d9f2      	bls.n	800e010 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e02a:	4b12      	ldr	r3, [pc, #72]	@ (800e074 <SD_write+0xa8>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d102      	bne.n	800e038 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	75fb      	strb	r3, [r7, #23]
 800e036:	e017      	b.n	800e068 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e038:	4b0e      	ldr	r3, [pc, #56]	@ (800e074 <SD_write+0xa8>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e03e:	f7f5 f9d9 	bl	80033f4 <HAL_GetTick>
 800e042:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e044:	e007      	b.n	800e056 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e046:	f7ff fe99 	bl	800dd7c <BSP_SD_GetCardState>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d102      	bne.n	800e056 <SD_write+0x8a>
          {
            res = RES_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	75fb      	strb	r3, [r7, #23]
            break;
 800e054:	e008      	b.n	800e068 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e056:	f7f5 f9cd 	bl	80033f4 <HAL_GetTick>
 800e05a:	4602      	mov	r2, r0
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e064:	4293      	cmp	r3, r2
 800e066:	d9ee      	bls.n	800e046 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e068:	7dfb      	ldrb	r3, [r7, #23]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3718      	adds	r7, #24
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20000810 	.word	0x20000810

0800e078 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08c      	sub	sp, #48	@ 0x30
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	603a      	str	r2, [r7, #0]
 800e082:	71fb      	strb	r3, [r7, #7]
 800e084:	460b      	mov	r3, r1
 800e086:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e08e:	4b25      	ldr	r3, [pc, #148]	@ (800e124 <SD_ioctl+0xac>)
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <SD_ioctl+0x28>
 800e09c:	2303      	movs	r3, #3
 800e09e:	e03c      	b.n	800e11a <SD_ioctl+0xa2>

  switch (cmd)
 800e0a0:	79bb      	ldrb	r3, [r7, #6]
 800e0a2:	2b03      	cmp	r3, #3
 800e0a4:	d834      	bhi.n	800e110 <SD_ioctl+0x98>
 800e0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e0ac <SD_ioctl+0x34>)
 800e0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ac:	0800e0bd 	.word	0x0800e0bd
 800e0b0:	0800e0c5 	.word	0x0800e0c5
 800e0b4:	0800e0dd 	.word	0x0800e0dd
 800e0b8:	0800e0f7 	.word	0x0800e0f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e0c2:	e028      	b.n	800e116 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0c4:	f107 030c 	add.w	r3, r7, #12
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff fe67 	bl	800dd9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e0ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e0da:	e01c      	b.n	800e116 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0dc:	f107 030c 	add.w	r3, r7, #12
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff fe5b 	bl	800dd9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e0f4:	e00f      	b.n	800e116 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0f6:	f107 030c 	add.w	r3, r7, #12
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff fe4e 	bl	800dd9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e102:	0a5a      	lsrs	r2, r3, #9
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e10e:	e002      	b.n	800e116 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e110:	2304      	movs	r3, #4
 800e112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3730      	adds	r7, #48	@ 0x30
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	20000009 	.word	0x20000009

0800e128 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e128:	b480      	push	{r7}
 800e12a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e12c:	4b03      	ldr	r3, [pc, #12]	@ (800e13c <BSP_SD_WriteCpltCallback+0x14>)
 800e12e:	2201      	movs	r2, #1
 800e130:	601a      	str	r2, [r3, #0]
}
 800e132:	bf00      	nop
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	20000810 	.word	0x20000810

0800e140 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e140:	b480      	push	{r7}
 800e142:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e144:	4b03      	ldr	r3, [pc, #12]	@ (800e154 <BSP_SD_ReadCpltCallback+0x14>)
 800e146:	2201      	movs	r2, #1
 800e148:	601a      	str	r2, [r3, #0]
}
 800e14a:	bf00      	nop
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	20000814 	.word	0x20000814

0800e158 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e158:	b590      	push	{r4, r7, lr}
 800e15a:	b089      	sub	sp, #36	@ 0x24
 800e15c:	af04      	add	r7, sp, #16
 800e15e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e160:	2301      	movs	r3, #1
 800e162:	2202      	movs	r2, #2
 800e164:	2102      	movs	r1, #2
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fc85 	bl	800ea76 <USBH_FindInterface>
 800e16c:	4603      	mov	r3, r0
 800e16e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e170:	7bfb      	ldrb	r3, [r7, #15]
 800e172:	2bff      	cmp	r3, #255	@ 0xff
 800e174:	d002      	beq.n	800e17c <USBH_CDC_InterfaceInit+0x24>
 800e176:	7bfb      	ldrb	r3, [r7, #15]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d901      	bls.n	800e180 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e17c:	2302      	movs	r3, #2
 800e17e:	e13d      	b.n	800e3fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 fc5a 	bl	800ea3e <USBH_SelectInterface>
 800e18a:	4603      	mov	r3, r0
 800e18c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e18e:	7bbb      	ldrb	r3, [r7, #14]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e194:	2302      	movs	r3, #2
 800e196:	e131      	b.n	800e3fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800e19e:	2050      	movs	r0, #80	@ 0x50
 800e1a0:	f005 fdc0 	bl	8013d24 <malloc>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e1ae:	69db      	ldr	r3, [r3, #28]
 800e1b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d101      	bne.n	800e1bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	e11f      	b.n	800e3fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e1bc:	2250      	movs	r2, #80	@ 0x50
 800e1be:	2100      	movs	r1, #0
 800e1c0:	68b8      	ldr	r0, [r7, #8]
 800e1c2:	f005 ff9e 	bl	8014102 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	211a      	movs	r1, #26
 800e1cc:	fb01 f303 	mul.w	r3, r1, r3
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	b25b      	sxtb	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	da15      	bge.n	800e20a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e1de:	7bfb      	ldrb	r3, [r7, #15]
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	211a      	movs	r1, #26
 800e1e4:	fb01 f303 	mul.w	r3, r1, r3
 800e1e8:	4413      	add	r3, r2
 800e1ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e1ee:	781a      	ldrb	r2, [r3, #0]
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	211a      	movs	r1, #26
 800e1fa:	fb01 f303 	mul.w	r3, r1, r3
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e204:	881a      	ldrh	r2, [r3, #0]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	785b      	ldrb	r3, [r3, #1]
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f001 ffbe 	bl	8010192 <USBH_AllocPipe>
 800e216:	4603      	mov	r3, r0
 800e218:	461a      	mov	r2, r3
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	7819      	ldrb	r1, [r3, #0]
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	7858      	ldrb	r0, [r3, #1]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	8952      	ldrh	r2, [r2, #10]
 800e236:	9202      	str	r2, [sp, #8]
 800e238:	2203      	movs	r2, #3
 800e23a:	9201      	str	r2, [sp, #4]
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	4623      	mov	r3, r4
 800e240:	4602      	mov	r2, r0
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f001 ff76 	bl	8010134 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2200      	movs	r2, #0
 800e24e:	4619      	mov	r1, r3
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f005 fb11 	bl	8013878 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e256:	2300      	movs	r3, #0
 800e258:	2200      	movs	r2, #0
 800e25a:	210a      	movs	r1, #10
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fc0a 	bl	800ea76 <USBH_FindInterface>
 800e262:	4603      	mov	r3, r0
 800e264:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	2bff      	cmp	r3, #255	@ 0xff
 800e26a:	d002      	beq.n	800e272 <USBH_CDC_InterfaceInit+0x11a>
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d901      	bls.n	800e276 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e272:	2302      	movs	r3, #2
 800e274:	e0c2      	b.n	800e3fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e276:	7bfb      	ldrb	r3, [r7, #15]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	211a      	movs	r1, #26
 800e27c:	fb01 f303 	mul.w	r3, r1, r3
 800e280:	4413      	add	r3, r2
 800e282:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	b25b      	sxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	da16      	bge.n	800e2bc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e28e:	7bfb      	ldrb	r3, [r7, #15]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	211a      	movs	r1, #26
 800e294:	fb01 f303 	mul.w	r3, r1, r3
 800e298:	4413      	add	r3, r2
 800e29a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e29e:	781a      	ldrb	r2, [r3, #0]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	211a      	movs	r1, #26
 800e2aa:	fb01 f303 	mul.w	r3, r1, r3
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e2b4:	881a      	ldrh	r2, [r3, #0]
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	835a      	strh	r2, [r3, #26]
 800e2ba:	e015      	b.n	800e2e8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	211a      	movs	r1, #26
 800e2c2:	fb01 f303 	mul.w	r3, r1, r3
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e2cc:	781a      	ldrb	r2, [r3, #0]
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	211a      	movs	r1, #26
 800e2d8:	fb01 f303 	mul.w	r3, r1, r3
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e2e2:	881a      	ldrh	r2, [r3, #0]
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	211a      	movs	r1, #26
 800e2ee:	fb01 f303 	mul.w	r3, r1, r3
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	b25b      	sxtb	r3, r3
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	da16      	bge.n	800e32e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	211a      	movs	r1, #26
 800e306:	fb01 f303 	mul.w	r3, r1, r3
 800e30a:	4413      	add	r3, r2
 800e30c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e310:	781a      	ldrb	r2, [r3, #0]
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e316:	7bfb      	ldrb	r3, [r7, #15]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	211a      	movs	r1, #26
 800e31c:	fb01 f303 	mul.w	r3, r1, r3
 800e320:	4413      	add	r3, r2
 800e322:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e326:	881a      	ldrh	r2, [r3, #0]
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	835a      	strh	r2, [r3, #26]
 800e32c:	e015      	b.n	800e35a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	211a      	movs	r1, #26
 800e334:	fb01 f303 	mul.w	r3, r1, r3
 800e338:	4413      	add	r3, r2
 800e33a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e33e:	781a      	ldrb	r2, [r3, #0]
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	211a      	movs	r1, #26
 800e34a:	fb01 f303 	mul.w	r3, r1, r3
 800e34e:	4413      	add	r3, r2
 800e350:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e354:	881a      	ldrh	r2, [r3, #0]
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	7b9b      	ldrb	r3, [r3, #14]
 800e35e:	4619      	mov	r1, r3
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f001 ff16 	bl	8010192 <USBH_AllocPipe>
 800e366:	4603      	mov	r3, r0
 800e368:	461a      	mov	r2, r3
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	7bdb      	ldrb	r3, [r3, #15]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 ff0c 	bl	8010192 <USBH_AllocPipe>
 800e37a:	4603      	mov	r3, r0
 800e37c:	461a      	mov	r2, r3
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	7b59      	ldrb	r1, [r3, #13]
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	7b98      	ldrb	r0, [r3, #14]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	8b12      	ldrh	r2, [r2, #24]
 800e39a:	9202      	str	r2, [sp, #8]
 800e39c:	2202      	movs	r2, #2
 800e39e:	9201      	str	r2, [sp, #4]
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	4623      	mov	r3, r4
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 fec4 	bl	8010134 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	7b19      	ldrb	r1, [r3, #12]
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	7bd8      	ldrb	r0, [r3, #15]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	8b52      	ldrh	r2, [r2, #26]
 800e3c4:	9202      	str	r2, [sp, #8]
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	9201      	str	r2, [sp, #4]
 800e3ca:	9300      	str	r3, [sp, #0]
 800e3cc:	4623      	mov	r3, r4
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f001 feaf 	bl	8010134 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	7b5b      	ldrb	r3, [r3, #13]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f005 fa46 	bl	8013878 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	7b1b      	ldrb	r3, [r3, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f005 fa3f 	bl	8013878 <USBH_LL_SetToggle>

  return USBH_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	bd90      	pop	{r4, r7, pc}

0800e404 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00e      	beq.n	800e43c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f001 fea4 	bl	8010172 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	4619      	mov	r1, r3
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f001 fecf 	bl	80101d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	7b1b      	ldrb	r3, [r3, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00e      	beq.n	800e462 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	7b1b      	ldrb	r3, [r3, #12]
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f001 fe91 	bl	8010172 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	7b1b      	ldrb	r3, [r3, #12]
 800e454:	4619      	mov	r1, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 febc 	bl	80101d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	7b5b      	ldrb	r3, [r3, #13]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00e      	beq.n	800e488 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	7b5b      	ldrb	r3, [r3, #13]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f001 fe7e 	bl	8010172 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	7b5b      	ldrb	r3, [r3, #13]
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f001 fea9 	bl	80101d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2200      	movs	r2, #0
 800e486:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e48e:	69db      	ldr	r3, [r3, #28]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00b      	beq.n	800e4ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f005 fc49 	bl	8013d34 <free>
    phost->pActiveClass->pData = 0U;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b084      	sub	sp, #16
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e4c4:	69db      	ldr	r3, [r3, #28]
 800e4c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3340      	adds	r3, #64	@ 0x40
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 f8b1 	bl	800e636 <GetLineCoding>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e4d8:	7afb      	ldrb	r3, [r7, #11]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d105      	bne.n	800e4ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e4e4:	2102      	movs	r1, #2
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e4ea:	7afb      	ldrb	r3, [r7, #11]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e514:	2b04      	cmp	r3, #4
 800e516:	d877      	bhi.n	800e608 <USBH_CDC_Process+0x114>
 800e518:	a201      	add	r2, pc, #4	@ (adr r2, 800e520 <USBH_CDC_Process+0x2c>)
 800e51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51e:	bf00      	nop
 800e520:	0800e535 	.word	0x0800e535
 800e524:	0800e53b 	.word	0x0800e53b
 800e528:	0800e56b 	.word	0x0800e56b
 800e52c:	0800e5df 	.word	0x0800e5df
 800e530:	0800e5ed 	.word	0x0800e5ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	73fb      	strb	r3, [r7, #15]
      break;
 800e538:	e06d      	b.n	800e616 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f897 	bl	800e674 <SetLineCoding>
 800e546:	4603      	mov	r3, r0
 800e548:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e54a:	7bbb      	ldrb	r3, [r7, #14]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d104      	bne.n	800e55a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	2202      	movs	r2, #2
 800e554:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e558:	e058      	b.n	800e60c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e55a:	7bbb      	ldrb	r3, [r7, #14]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d055      	beq.n	800e60c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2204      	movs	r2, #4
 800e564:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800e568:	e050      	b.n	800e60c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	3340      	adds	r3, #64	@ 0x40
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f860 	bl	800e636 <GetLineCoding>
 800e576:	4603      	mov	r3, r0
 800e578:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e57a:	7bbb      	ldrb	r3, [r7, #14]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d126      	bne.n	800e5ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e592:	791b      	ldrb	r3, [r3, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d13b      	bne.n	800e610 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d133      	bne.n	800e610 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d12b      	bne.n	800e610 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d124      	bne.n	800e610 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f958 	bl	800e87c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e5cc:	e020      	b.n	800e610 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e5ce:	7bbb      	ldrb	r3, [r7, #14]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d01d      	beq.n	800e610 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	2204      	movs	r2, #4
 800e5d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800e5dc:	e018      	b.n	800e610 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f867 	bl	800e6b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f8da 	bl	800e79e <CDC_ProcessReception>
      break;
 800e5ea:	e014      	b.n	800e616 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f001 f81a 	bl	800f628 <USBH_ClrFeature>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e5f8:	7bbb      	ldrb	r3, [r7, #14]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d10a      	bne.n	800e614 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800e606:	e005      	b.n	800e614 <USBH_CDC_Process+0x120>

    default:
      break;
 800e608:	bf00      	nop
 800e60a:	e004      	b.n	800e616 <USBH_CDC_Process+0x122>
      break;
 800e60c:	bf00      	nop
 800e60e:	e002      	b.n	800e616 <USBH_CDC_Process+0x122>
      break;
 800e610:	bf00      	nop
 800e612:	e000      	b.n	800e616 <USBH_CDC_Process+0x122>
      break;
 800e614:	bf00      	nop

  }

  return status;
 800e616:	7bfb      	ldrb	r3, [r7, #15]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	370c      	adds	r7, #12
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	22a1      	movs	r2, #161	@ 0xa1
 800e644:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2221      	movs	r2, #33	@ 0x21
 800e64a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2207      	movs	r2, #7
 800e65c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2207      	movs	r2, #7
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f001 fb14 	bl	800fc92 <USBH_CtlReq>
 800e66a:	4603      	mov	r3, r0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2221      	movs	r2, #33	@ 0x21
 800e682:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2220      	movs	r2, #32
 800e688:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2207      	movs	r2, #7
 800e69a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2207      	movs	r2, #7
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 faf5 	bl	800fc92 <USBH_CtlReq>
 800e6a8:	4603      	mov	r3, r0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3708      	adds	r7, #8
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b086      	sub	sp, #24
 800e6b6:	af02      	add	r7, sp, #8
 800e6b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e6c0:	69db      	ldr	r3, [r3, #28]
 800e6c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d002      	beq.n	800e6d8 <CDC_ProcessTransmission+0x26>
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d023      	beq.n	800e71e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e6d6:	e05e      	b.n	800e796 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	8b12      	ldrh	r2, [r2, #24]
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d90b      	bls.n	800e6fc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	69d9      	ldr	r1, [r3, #28]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	8b1a      	ldrh	r2, [r3, #24]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	7b5b      	ldrb	r3, [r3, #13]
 800e6f0:	2001      	movs	r0, #1
 800e6f2:	9000      	str	r0, [sp, #0]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 fcda 	bl	80100ae <USBH_BulkSendData>
 800e6fa:	e00b      	b.n	800e714 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800e704:	b29a      	uxth	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	7b5b      	ldrb	r3, [r3, #13]
 800e70a:	2001      	movs	r0, #1
 800e70c:	9000      	str	r0, [sp, #0]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f001 fccd 	bl	80100ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2202      	movs	r2, #2
 800e718:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800e71c:	e03b      	b.n	800e796 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	7b5b      	ldrb	r3, [r3, #13]
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f005 f87d 	bl	8013824 <USBH_LL_GetURBState>
 800e72a:	4603      	mov	r3, r0
 800e72c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e72e:	7afb      	ldrb	r3, [r7, #11]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d128      	bne.n	800e786 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	8b12      	ldrh	r2, [r2, #24]
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d90e      	bls.n	800e75e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	8b12      	ldrh	r2, [r2, #24]
 800e748:	1a9a      	subs	r2, r3, r2
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	69db      	ldr	r3, [r3, #28]
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	8b12      	ldrh	r2, [r2, #24]
 800e756:	441a      	add	r2, r3
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	61da      	str	r2, [r3, #28]
 800e75c:	e002      	b.n	800e764 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d004      	beq.n	800e776 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800e774:	e00e      	b.n	800e794 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f868 	bl	800e854 <USBH_CDC_TransmitCallback>
      break;
 800e784:	e006      	b.n	800e794 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e786:	7afb      	ldrb	r3, [r7, #11]
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d103      	bne.n	800e794 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800e794:	bf00      	nop
  }
}
 800e796:	bf00      	nop
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b086      	sub	sp, #24
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e7ac:	69db      	ldr	r3, [r3, #28]
 800e7ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d002      	beq.n	800e7c4 <CDC_ProcessReception+0x26>
 800e7be:	2b04      	cmp	r3, #4
 800e7c0:	d00e      	beq.n	800e7e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e7c2:	e043      	b.n	800e84c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	6a19      	ldr	r1, [r3, #32]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	8b5a      	ldrh	r2, [r3, #26]
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	7b1b      	ldrb	r3, [r3, #12]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f001 fc91 	bl	80100f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2204      	movs	r2, #4
 800e7da:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800e7de:	e035      	b.n	800e84c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	7b1b      	ldrb	r3, [r3, #12]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f005 f81c 	bl	8013824 <USBH_LL_GetURBState>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e7f0:	7cfb      	ldrb	r3, [r7, #19]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d129      	bne.n	800e84a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	7b1b      	ldrb	r3, [r3, #12]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f004 ff7f 	bl	8013700 <USBH_LL_GetLastXferSize>
 800e802:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d016      	beq.n	800e83c <CDC_ProcessReception+0x9e>
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	8b5b      	ldrh	r3, [r3, #26]
 800e812:	461a      	mov	r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	4293      	cmp	r3, r2
 800e818:	d110      	bne.n	800e83c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	1ad2      	subs	r2, r2, r3
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	6a1a      	ldr	r2, [r3, #32]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	441a      	add	r2, r3
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	2203      	movs	r2, #3
 800e836:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800e83a:	e006      	b.n	800e84a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f000 f80f 	bl	800e868 <USBH_CDC_ReceiveCallback>
      break;
 800e84a:	bf00      	nop
  }
}
 800e84c:	bf00      	nop
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e8a4:	2302      	movs	r3, #2
 800e8a6:	e029      	b.n	800e8fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	79fa      	ldrb	r2, [r7, #7]
 800e8ac:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 f81f 	bl	800e904 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d003      	beq.n	800e8f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f004 fe4f 	bl	8013598 <USBH_LL_Init>

  return USBH_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e90c:	2300      	movs	r3, #0
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e910:	2300      	movs	r3, #0
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	e009      	b.n	800e92a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	33e0      	adds	r3, #224	@ 0xe0
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	2200      	movs	r2, #0
 800e922:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	3301      	adds	r3, #1
 800e928:	60fb      	str	r3, [r7, #12]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b0f      	cmp	r3, #15
 800e92e:	d9f2      	bls.n	800e916 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e930:	2300      	movs	r3, #0
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e009      	b.n	800e94a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	4413      	add	r3, r2
 800e93c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e940:	2200      	movs	r2, #0
 800e942:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	3301      	adds	r3, #1
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e950:	d3f1      	bcc.n	800e936 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2240      	movs	r2, #64	@ 0x40
 800e976:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	331c      	adds	r3, #28
 800e9a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f005 fbaa 	bl	8014102 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e9b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f005 fba1 	bl	8014102 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800e9c6:	2212      	movs	r2, #18
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f005 fb99 	bl	8014102 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800e9d6:	223e      	movs	r2, #62	@ 0x3e
 800e9d8:	2100      	movs	r1, #0
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f005 fb91 	bl	8014102 <memset>

  return USBH_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b085      	sub	sp, #20
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d016      	beq.n	800ea2c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10e      	bne.n	800ea26 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ea0e:	1c59      	adds	r1, r3, #1
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	33de      	adds	r3, #222	@ 0xde
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
 800ea24:	e004      	b.n	800ea30 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ea26:	2302      	movs	r3, #2
 800ea28:	73fb      	strb	r3, [r7, #15]
 800ea2a:	e001      	b.n	800ea30 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b085      	sub	sp, #20
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ea54:	78fa      	ldrb	r2, [r7, #3]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d204      	bcs.n	800ea64 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	78fa      	ldrb	r2, [r7, #3]
 800ea5e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800ea62:	e001      	b.n	800ea68 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ea64:	2302      	movs	r3, #2
 800ea66:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b087      	sub	sp, #28
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	4608      	mov	r0, r1
 800ea80:	4611      	mov	r1, r2
 800ea82:	461a      	mov	r2, r3
 800ea84:	4603      	mov	r3, r0
 800ea86:	70fb      	strb	r3, [r7, #3]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	70bb      	strb	r3, [r7, #2]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ea90:	2300      	movs	r3, #0
 800ea92:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ea9e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eaa0:	e025      	b.n	800eaee <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	221a      	movs	r2, #26
 800eaa6:	fb02 f303 	mul.w	r3, r2, r3
 800eaaa:	3308      	adds	r3, #8
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	4413      	add	r3, r2
 800eab0:	3302      	adds	r3, #2
 800eab2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	795b      	ldrb	r3, [r3, #5]
 800eab8:	78fa      	ldrb	r2, [r7, #3]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d002      	beq.n	800eac4 <USBH_FindInterface+0x4e>
 800eabe:	78fb      	ldrb	r3, [r7, #3]
 800eac0:	2bff      	cmp	r3, #255	@ 0xff
 800eac2:	d111      	bne.n	800eae8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eac8:	78ba      	ldrb	r2, [r7, #2]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d002      	beq.n	800ead4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eace:	78bb      	ldrb	r3, [r7, #2]
 800ead0:	2bff      	cmp	r3, #255	@ 0xff
 800ead2:	d109      	bne.n	800eae8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ead8:	787a      	ldrb	r2, [r7, #1]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d002      	beq.n	800eae4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eade:	787b      	ldrb	r3, [r7, #1]
 800eae0:	2bff      	cmp	r3, #255	@ 0xff
 800eae2:	d101      	bne.n	800eae8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800eae4:	7dfb      	ldrb	r3, [r7, #23]
 800eae6:	e006      	b.n	800eaf6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
 800eaea:	3301      	adds	r3, #1
 800eaec:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d9d6      	bls.n	800eaa2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eaf4:	23ff      	movs	r3, #255	@ 0xff
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b082      	sub	sp, #8
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f004 fd80 	bl	8013610 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800eb10:	2101      	movs	r1, #1
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f004 fe99 	bl	801384a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
	...

0800eb24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b088      	sub	sp, #32
 800eb28:	af04      	add	r7, sp, #16
 800eb2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d102      	bne.n	800eb46 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2203      	movs	r2, #3
 800eb44:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b0b      	cmp	r3, #11
 800eb4e:	f200 81bb 	bhi.w	800eec8 <USBH_Process+0x3a4>
 800eb52:	a201      	add	r2, pc, #4	@ (adr r2, 800eb58 <USBH_Process+0x34>)
 800eb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb58:	0800eb89 	.word	0x0800eb89
 800eb5c:	0800ebbb 	.word	0x0800ebbb
 800eb60:	0800ec23 	.word	0x0800ec23
 800eb64:	0800ee63 	.word	0x0800ee63
 800eb68:	0800eec9 	.word	0x0800eec9
 800eb6c:	0800ecc3 	.word	0x0800ecc3
 800eb70:	0800ee09 	.word	0x0800ee09
 800eb74:	0800ecf9 	.word	0x0800ecf9
 800eb78:	0800ed19 	.word	0x0800ed19
 800eb7c:	0800ed37 	.word	0x0800ed37
 800eb80:	0800ed7b 	.word	0x0800ed7b
 800eb84:	0800ee4b 	.word	0x0800ee4b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 819b 	beq.w	800eecc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2201      	movs	r2, #1
 800eb9a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800eb9c:	20c8      	movs	r0, #200	@ 0xc8
 800eb9e:	f004 fe9e 	bl	80138de <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f004 fd91 	bl	80136ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ebb8:	e188      	b.n	800eecc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d107      	bne.n	800ebd4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2202      	movs	r2, #2
 800ebd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ebd2:	e18a      	b.n	800eeea <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ebda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ebde:	d914      	bls.n	800ec0a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	b2da      	uxtb	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d903      	bls.n	800ec02 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	220d      	movs	r2, #13
 800ebfe:	701a      	strb	r2, [r3, #0]
      break;
 800ec00:	e173      	b.n	800eeea <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]
      break;
 800ec08:	e16f      	b.n	800eeea <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ec10:	f103 020a 	add.w	r2, r3, #10
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ec1a:	200a      	movs	r0, #10
 800ec1c:	f004 fe5f 	bl	80138de <USBH_Delay>
      break;
 800ec20:	e163      	b.n	800eeea <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ec32:	2104      	movs	r1, #4
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ec38:	2064      	movs	r0, #100	@ 0x64
 800ec3a:	f004 fe50 	bl	80138de <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f004 fd1c 	bl	801367c <USBH_LL_GetSpeed>
 800ec44:	4603      	mov	r3, r0
 800ec46:	461a      	mov	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2205      	movs	r2, #5
 800ec52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ec54:	2100      	movs	r1, #0
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f001 fa9b 	bl	8010192 <USBH_AllocPipe>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	461a      	mov	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ec64:	2180      	movs	r1, #128	@ 0x80
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f001 fa93 	bl	8010192 <USBH_AllocPipe>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	461a      	mov	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	7919      	ldrb	r1, [r3, #4]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ec88:	9202      	str	r2, [sp, #8]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	9201      	str	r2, [sp, #4]
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	4603      	mov	r3, r0
 800ec92:	2280      	movs	r2, #128	@ 0x80
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f001 fa4d 	bl	8010134 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	7959      	ldrb	r1, [r3, #5]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ecae:	9202      	str	r2, [sp, #8]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	9201      	str	r2, [sp, #4]
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2200      	movs	r2, #0
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 fa3a 	bl	8010134 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ecc0:	e113      	b.n	800eeea <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 f916 	bl	800eef4 <USBH_HandleEnum>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800eccc:	7bbb      	ldrb	r3, [r7, #14]
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f040 80fd 	bne.w	800eed0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d103      	bne.n	800ecf0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2208      	movs	r2, #8
 800ecec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ecee:	e0ef      	b.n	800eed0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2207      	movs	r2, #7
 800ecf4:	701a      	strb	r2, [r3, #0]
      break;
 800ecf6:	e0eb      	b.n	800eed0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f000 80e8 	beq.w	800eed4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2208      	movs	r2, #8
 800ed14:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ed16:	e0dd      	b.n	800eed4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fc3a 	bl	800f59a <USBH_SetCfg>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f040 80d5 	bne.w	800eed8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2209      	movs	r2, #9
 800ed32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ed34:	e0d0      	b.n	800eed8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ed3c:	f003 0320 	and.w	r3, r3, #32
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d016      	beq.n	800ed72 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ed44:	2101      	movs	r1, #1
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fc4a 	bl	800f5e0 <USBH_SetFeature>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ed50:	7bbb      	ldrb	r3, [r7, #14]
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d103      	bne.n	800ed60 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	220a      	movs	r2, #10
 800ed5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ed5e:	e0bd      	b.n	800eedc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800ed60:	7bbb      	ldrb	r3, [r7, #14]
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b03      	cmp	r3, #3
 800ed66:	f040 80b9 	bne.w	800eedc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	220a      	movs	r2, #10
 800ed6e:	701a      	strb	r2, [r3, #0]
      break;
 800ed70:	e0b4      	b.n	800eedc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	220a      	movs	r2, #10
 800ed76:	701a      	strb	r2, [r3, #0]
      break;
 800ed78:	e0b0      	b.n	800eedc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f000 80ad 	beq.w	800eee0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73fb      	strb	r3, [r7, #15]
 800ed92:	e016      	b.n	800edc2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ed94:	7bfa      	ldrb	r2, [r7, #15]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	32de      	adds	r2, #222	@ 0xde
 800ed9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed9e:	791a      	ldrb	r2, [r3, #4]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d108      	bne.n	800edbc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800edaa:	7bfa      	ldrb	r2, [r7, #15]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	32de      	adds	r2, #222	@ 0xde
 800edb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800edba:	e005      	b.n	800edc8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	3301      	adds	r3, #1
 800edc0:	73fb      	strb	r3, [r7, #15]
 800edc2:	7bfb      	ldrb	r3, [r7, #15]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d0e5      	beq.n	800ed94 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d016      	beq.n	800ee00 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	4798      	blx	r3
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d109      	bne.n	800edf8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2206      	movs	r2, #6
 800ede8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800edf0:	2103      	movs	r1, #3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800edf6:	e073      	b.n	800eee0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	220d      	movs	r2, #13
 800edfc:	701a      	strb	r2, [r3, #0]
      break;
 800edfe:	e06f      	b.n	800eee0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	220d      	movs	r2, #13
 800ee04:	701a      	strb	r2, [r3, #0]
      break;
 800ee06:	e06b      	b.n	800eee0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d017      	beq.n	800ee42 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee18:	691b      	ldr	r3, [r3, #16]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	4798      	blx	r3
 800ee1e:	4603      	mov	r3, r0
 800ee20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ee22:	7bbb      	ldrb	r3, [r7, #14]
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d103      	bne.n	800ee32 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	220b      	movs	r2, #11
 800ee2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ee30:	e058      	b.n	800eee4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800ee32:	7bbb      	ldrb	r3, [r7, #14]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	d154      	bne.n	800eee4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	220d      	movs	r2, #13
 800ee3e:	701a      	strb	r2, [r3, #0]
      break;
 800ee40:	e050      	b.n	800eee4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	220d      	movs	r2, #13
 800ee46:	701a      	strb	r2, [r3, #0]
      break;
 800ee48:	e04c      	b.n	800eee4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d049      	beq.n	800eee8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee5a:	695b      	ldr	r3, [r3, #20]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	4798      	blx	r3
      }
      break;
 800ee60:	e042      	b.n	800eee8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff fd4a 	bl	800e904 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d009      	beq.n	800ee8e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ee9e:	2105      	movs	r1, #5
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d107      	bne.n	800eec0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff fe22 	bl	800eb02 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800eebe:	e014      	b.n	800eeea <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f004 fba5 	bl	8013610 <USBH_LL_Start>
      break;
 800eec6:	e010      	b.n	800eeea <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800eec8:	bf00      	nop
 800eeca:	e00e      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eecc:	bf00      	nop
 800eece:	e00c      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eed0:	bf00      	nop
 800eed2:	e00a      	b.n	800eeea <USBH_Process+0x3c6>
    break;
 800eed4:	bf00      	nop
 800eed6:	e008      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eed8:	bf00      	nop
 800eeda:	e006      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eedc:	bf00      	nop
 800eede:	e004      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eee0:	bf00      	nop
 800eee2:	e002      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eee4:	bf00      	nop
 800eee6:	e000      	b.n	800eeea <USBH_Process+0x3c6>
      break;
 800eee8:	bf00      	nop
  }
  return USBH_OK;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af04      	add	r7, sp, #16
 800eefa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800eefc:	2301      	movs	r3, #1
 800eefe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ef00:	2301      	movs	r3, #1
 800ef02:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	785b      	ldrb	r3, [r3, #1]
 800ef08:	2b07      	cmp	r3, #7
 800ef0a:	f200 81bd 	bhi.w	800f288 <USBH_HandleEnum+0x394>
 800ef0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef14 <USBH_HandleEnum+0x20>)
 800ef10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef14:	0800ef35 	.word	0x0800ef35
 800ef18:	0800efef 	.word	0x0800efef
 800ef1c:	0800f059 	.word	0x0800f059
 800ef20:	0800f0e3 	.word	0x0800f0e3
 800ef24:	0800f14d 	.word	0x0800f14d
 800ef28:	0800f1bd 	.word	0x0800f1bd
 800ef2c:	0800f203 	.word	0x0800f203
 800ef30:	0800f249 	.word	0x0800f249
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ef34:	2108      	movs	r1, #8
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fa4c 	bl	800f3d4 <USBH_Get_DevDesc>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef40:	7bbb      	ldrb	r3, [r7, #14]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d12e      	bne.n	800efa4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2201      	movs	r2, #1
 800ef54:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	7919      	ldrb	r1, [r3, #4]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ef6a:	9202      	str	r2, [sp, #8]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	9201      	str	r2, [sp, #4]
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	4603      	mov	r3, r0
 800ef74:	2280      	movs	r2, #128	@ 0x80
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f001 f8dc 	bl	8010134 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	7959      	ldrb	r1, [r3, #5]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef90:	9202      	str	r2, [sp, #8]
 800ef92:	2200      	movs	r2, #0
 800ef94:	9201      	str	r2, [sp, #4]
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f001 f8c9 	bl	8010134 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800efa2:	e173      	b.n	800f28c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800efa4:	7bbb      	ldrb	r3, [r7, #14]
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	f040 8170 	bne.w	800f28c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800efb2:	3301      	adds	r3, #1
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d903      	bls.n	800efce <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	220d      	movs	r2, #13
 800efca:	701a      	strb	r2, [r3, #0]
      break;
 800efcc:	e15e      	b.n	800f28c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	795b      	ldrb	r3, [r3, #5]
 800efd2:	4619      	mov	r1, r3
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f001 f8fd 	bl	80101d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	791b      	ldrb	r3, [r3, #4]
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f001 f8f7 	bl	80101d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	701a      	strb	r2, [r3, #0]
      break;
 800efec:	e14e      	b.n	800f28c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800efee:	2112      	movs	r1, #18
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f9ef 	bl	800f3d4 <USBH_Get_DevDesc>
 800eff6:	4603      	mov	r3, r0
 800eff8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800effa:	7bbb      	ldrb	r3, [r7, #14]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d103      	bne.n	800f008 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2202      	movs	r2, #2
 800f004:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f006:	e143      	b.n	800f290 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f008:	7bbb      	ldrb	r3, [r7, #14]
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	f040 8140 	bne.w	800f290 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f016:	3301      	adds	r3, #1
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f026:	2b03      	cmp	r3, #3
 800f028:	d903      	bls.n	800f032 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	220d      	movs	r2, #13
 800f02e:	701a      	strb	r2, [r3, #0]
      break;
 800f030:	e12e      	b.n	800f290 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	795b      	ldrb	r3, [r3, #5]
 800f036:	4619      	mov	r1, r3
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f001 f8cb 	bl	80101d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	791b      	ldrb	r3, [r3, #4]
 800f042:	4619      	mov	r1, r3
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f001 f8c5 	bl	80101d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	701a      	strb	r2, [r3, #0]
      break;
 800f056:	e11b      	b.n	800f290 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f058:	2101      	movs	r1, #1
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 fa79 	bl	800f552 <USBH_SetAddress>
 800f060:	4603      	mov	r3, r0
 800f062:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f064:	7bbb      	ldrb	r3, [r7, #14]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d130      	bne.n	800f0cc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800f06a:	2002      	movs	r0, #2
 800f06c:	f004 fc37 	bl	80138de <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2203      	movs	r2, #3
 800f07c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	7919      	ldrb	r1, [r3, #4]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f092:	9202      	str	r2, [sp, #8]
 800f094:	2200      	movs	r2, #0
 800f096:	9201      	str	r2, [sp, #4]
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	4603      	mov	r3, r0
 800f09c:	2280      	movs	r2, #128	@ 0x80
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f001 f848 	bl	8010134 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7959      	ldrb	r1, [r3, #5]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f0b8:	9202      	str	r2, [sp, #8]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	9201      	str	r2, [sp, #4]
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f001 f835 	bl	8010134 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f0ca:	e0e3      	b.n	800f294 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	f040 80e0 	bne.w	800f294 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	220d      	movs	r2, #13
 800f0d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	705a      	strb	r2, [r3, #1]
      break;
 800f0e0:	e0d8      	b.n	800f294 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f0e2:	2109      	movs	r1, #9
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f9a1 	bl	800f42c <USBH_Get_CfgDesc>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f0ee:	7bbb      	ldrb	r3, [r7, #14]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d103      	bne.n	800f0fc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2204      	movs	r2, #4
 800f0f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f0fa:	e0cd      	b.n	800f298 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	f040 80ca 	bne.w	800f298 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f10a:	3301      	adds	r3, #1
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d903      	bls.n	800f126 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	220d      	movs	r2, #13
 800f122:	701a      	strb	r2, [r3, #0]
      break;
 800f124:	e0b8      	b.n	800f298 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	795b      	ldrb	r3, [r3, #5]
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f001 f851 	bl	80101d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	791b      	ldrb	r3, [r3, #4]
 800f136:	4619      	mov	r1, r3
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f001 f84b 	bl	80101d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	701a      	strb	r2, [r3, #0]
      break;
 800f14a:	e0a5      	b.n	800f298 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800f152:	4619      	mov	r1, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f969 	bl	800f42c <USBH_Get_CfgDesc>
 800f15a:	4603      	mov	r3, r0
 800f15c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f15e:	7bbb      	ldrb	r3, [r7, #14]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d103      	bne.n	800f16c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2205      	movs	r2, #5
 800f168:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f16a:	e097      	b.n	800f29c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f16c:	7bbb      	ldrb	r3, [r7, #14]
 800f16e:	2b03      	cmp	r3, #3
 800f170:	f040 8094 	bne.w	800f29c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f17a:	3301      	adds	r3, #1
 800f17c:	b2da      	uxtb	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d903      	bls.n	800f196 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	220d      	movs	r2, #13
 800f192:	701a      	strb	r2, [r3, #0]
      break;
 800f194:	e082      	b.n	800f29c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	795b      	ldrb	r3, [r3, #5]
 800f19a:	4619      	mov	r1, r3
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f001 f819 	bl	80101d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	791b      	ldrb	r3, [r3, #4]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f001 f813 	bl	80101d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	701a      	strb	r2, [r3, #0]
      break;
 800f1ba:	e06f      	b.n	800f29c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d019      	beq.n	800f1fa <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f1d2:	23ff      	movs	r3, #255	@ 0xff
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f953 	bl	800f480 <USBH_Get_StringDesc>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d103      	bne.n	800f1ec <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2206      	movs	r2, #6
 800f1e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f1ea:	e059      	b.n	800f2a0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f1ec:	7bbb      	ldrb	r3, [r7, #14]
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d156      	bne.n	800f2a0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2206      	movs	r2, #6
 800f1f6:	705a      	strb	r2, [r3, #1]
      break;
 800f1f8:	e052      	b.n	800f2a0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2206      	movs	r2, #6
 800f1fe:	705a      	strb	r2, [r3, #1]
      break;
 800f200:	e04e      	b.n	800f2a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d019      	beq.n	800f240 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f218:	23ff      	movs	r3, #255	@ 0xff
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f930 	bl	800f480 <USBH_Get_StringDesc>
 800f220:	4603      	mov	r3, r0
 800f222:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f224:	7bbb      	ldrb	r3, [r7, #14]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d103      	bne.n	800f232 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2207      	movs	r2, #7
 800f22e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f230:	e038      	b.n	800f2a4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f232:	7bbb      	ldrb	r3, [r7, #14]
 800f234:	2b03      	cmp	r3, #3
 800f236:	d135      	bne.n	800f2a4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2207      	movs	r2, #7
 800f23c:	705a      	strb	r2, [r3, #1]
      break;
 800f23e:	e031      	b.n	800f2a4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2207      	movs	r2, #7
 800f244:	705a      	strb	r2, [r3, #1]
      break;
 800f246:	e02d      	b.n	800f2a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d017      	beq.n	800f282 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f25e:	23ff      	movs	r3, #255	@ 0xff
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f90d 	bl	800f480 <USBH_Get_StringDesc>
 800f266:	4603      	mov	r3, r0
 800f268:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f26a:	7bbb      	ldrb	r3, [r7, #14]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d102      	bne.n	800f276 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f274:	e018      	b.n	800f2a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f276:	7bbb      	ldrb	r3, [r7, #14]
 800f278:	2b03      	cmp	r3, #3
 800f27a:	d115      	bne.n	800f2a8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	73fb      	strb	r3, [r7, #15]
      break;
 800f280:	e012      	b.n	800f2a8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]
      break;
 800f286:	e00f      	b.n	800f2a8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800f288:	bf00      	nop
 800f28a:	e00e      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f28c:	bf00      	nop
 800f28e:	e00c      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f290:	bf00      	nop
 800f292:	e00a      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f294:	bf00      	nop
 800f296:	e008      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f298:	bf00      	nop
 800f29a:	e006      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f29c:	bf00      	nop
 800f29e:	e004      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f2a0:	bf00      	nop
 800f2a2:	e002      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f2a4:	bf00      	nop
 800f2a6:	e000      	b.n	800f2aa <USBH_HandleEnum+0x3b6>
      break;
 800f2a8:	bf00      	nop
  }
  return Status;
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	683a      	ldr	r2, [r7, #0]
 800f2c2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800f2c6:	bf00      	nop
 800f2c8:	370c      	adds	r7, #12
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b082      	sub	sp, #8
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f2e0:	1c5a      	adds	r2, r3, #1
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f804 	bl	800f2f6 <USBH_HandleSof>
}
 800f2ee:	bf00      	nop
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b082      	sub	sp, #8
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b0b      	cmp	r3, #11
 800f306:	d10a      	bne.n	800f31e <USBH_HandleSof+0x28>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d005      	beq.n	800f31e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	4798      	blx	r3
  }
}
 800f31e:	bf00      	nop
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f326:	b480      	push	{r7}
 800f328:	b083      	sub	sp, #12
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2201      	movs	r2, #1
 800f332:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f336:	bf00      	nop
}
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f342:	b480      	push	{r7}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800f352:	bf00      	nop
}
 800f354:	370c      	adds	r7, #12
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f35e:	b480      	push	{r7}
 800f360:	b083      	sub	sp, #12
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f37e:	2300      	movs	r3, #0
}
 800f380:	4618      	mov	r0, r3
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f004 f94a 	bl	8013646 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	791b      	ldrb	r3, [r3, #4]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 ff0b 	bl	80101d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	795b      	ldrb	r3, [r3, #5]
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 ff05 	bl	80101d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af02      	add	r7, sp, #8
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	460b      	mov	r3, r1
 800f3de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800f3e0:	887b      	ldrh	r3, [r7, #2]
 800f3e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f3e6:	d901      	bls.n	800f3ec <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800f3e8:	2303      	movs	r3, #3
 800f3ea:	e01b      	b.n	800f424 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800f3f2:	887b      	ldrh	r3, [r7, #2]
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f872 	bl	800f4e8 <USBH_GetDescriptor>
 800f404:	4603      	mov	r3, r0
 800f406:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800f408:	7bfb      	ldrb	r3, [r7, #15]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d109      	bne.n	800f422 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f414:	887a      	ldrh	r2, [r7, #2]
 800f416:	4619      	mov	r1, r3
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 f929 	bl	800f670 <USBH_ParseDevDesc>
 800f41e:	4603      	mov	r3, r0
 800f420:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f422:	7bfb      	ldrb	r3, [r7, #15]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b086      	sub	sp, #24
 800f430:	af02      	add	r7, sp, #8
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	460b      	mov	r3, r1
 800f436:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	331c      	adds	r3, #28
 800f43c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800f43e:	887b      	ldrh	r3, [r7, #2]
 800f440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f444:	d901      	bls.n	800f44a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800f446:	2303      	movs	r3, #3
 800f448:	e016      	b.n	800f478 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f44a:	887b      	ldrh	r3, [r7, #2]
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f454:	2100      	movs	r1, #0
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f846 	bl	800f4e8 <USBH_GetDescriptor>
 800f45c:	4603      	mov	r3, r0
 800f45e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800f460:	7bfb      	ldrb	r3, [r7, #15]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d107      	bne.n	800f476 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800f466:	887b      	ldrh	r3, [r7, #2]
 800f468:	461a      	mov	r2, r3
 800f46a:	68b9      	ldr	r1, [r7, #8]
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 f9af 	bl	800f7d0 <USBH_ParseCfgDesc>
 800f472:	4603      	mov	r3, r0
 800f474:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f476:	7bfb      	ldrb	r3, [r7, #15]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af02      	add	r7, sp, #8
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	607a      	str	r2, [r7, #4]
 800f48a:	461a      	mov	r2, r3
 800f48c:	460b      	mov	r3, r1
 800f48e:	72fb      	strb	r3, [r7, #11]
 800f490:	4613      	mov	r3, r2
 800f492:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800f494:	893b      	ldrh	r3, [r7, #8]
 800f496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f49a:	d802      	bhi.n	800f4a2 <USBH_Get_StringDesc+0x22>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	e01c      	b.n	800f4e0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800f4a6:	7afb      	ldrb	r3, [r7, #11]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800f4ae:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800f4b6:	893b      	ldrh	r3, [r7, #8]
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	2100      	movs	r1, #0
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f000 f812 	bl	800f4e8 <USBH_GetDescriptor>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800f4c8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d107      	bne.n	800f4de <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f4d4:	893a      	ldrh	r2, [r7, #8]
 800f4d6:	6879      	ldr	r1, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 fb8d 	bl	800fbf8 <USBH_ParseStringDesc>
  }

  return status;
 800f4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	607b      	str	r3, [r7, #4]
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	72fb      	strb	r3, [r7, #11]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	789b      	ldrb	r3, [r3, #2]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d11c      	bne.n	800f53c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f502:	7afb      	ldrb	r3, [r7, #11]
 800f504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2206      	movs	r2, #6
 800f512:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	893a      	ldrh	r2, [r7, #8]
 800f518:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f51a:	893b      	ldrh	r3, [r7, #8]
 800f51c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f524:	d104      	bne.n	800f530 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f240 4209 	movw	r2, #1033	@ 0x409
 800f52c:	829a      	strh	r2, [r3, #20]
 800f52e:	e002      	b.n	800f536 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2200      	movs	r2, #0
 800f534:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	8b3a      	ldrh	r2, [r7, #24]
 800f53a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f53c:	8b3b      	ldrh	r3, [r7, #24]
 800f53e:	461a      	mov	r2, r3
 800f540:	6879      	ldr	r1, [r7, #4]
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f000 fba5 	bl	800fc92 <USBH_CtlReq>
 800f548:	4603      	mov	r3, r0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	789b      	ldrb	r3, [r3, #2]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d10f      	bne.n	800f586 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2205      	movs	r2, #5
 800f570:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f572:	78fb      	ldrb	r3, [r7, #3]
 800f574:	b29a      	uxth	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f586:	2200      	movs	r2, #0
 800f588:	2100      	movs	r1, #0
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 fb81 	bl	800fc92 <USBH_CtlReq>
 800f590:	4603      	mov	r3, r0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b082      	sub	sp, #8
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	789b      	ldrb	r3, [r3, #2]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d10e      	bne.n	800f5cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2209      	movs	r2, #9
 800f5b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	887a      	ldrh	r2, [r7, #2]
 800f5be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fb5e 	bl	800fc92 <USBH_CtlReq>
 800f5d6:	4603      	mov	r3, r0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	789b      	ldrb	r3, [r3, #2]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d10f      	bne.n	800f614 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2203      	movs	r2, #3
 800f5fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f600:	78fb      	ldrb	r3, [r7, #3]
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f614:	2200      	movs	r2, #0
 800f616:	2100      	movs	r1, #0
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fb3a 	bl	800fc92 <USBH_CtlReq>
 800f61e:	4603      	mov	r3, r0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	789b      	ldrb	r3, [r3, #2]
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d10f      	bne.n	800f65c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2202      	movs	r2, #2
 800f640:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2201      	movs	r2, #1
 800f646:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f64e:	78fb      	ldrb	r3, [r7, #3]
 800f650:	b29a      	uxth	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f65c:	2200      	movs	r2, #0
 800f65e:	2100      	movs	r1, #0
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fb16 	bl	800fc92 <USBH_CtlReq>
 800f666:	4603      	mov	r3, r0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800f670:	b480      	push	{r7}
 800f672:	b087      	sub	sp, #28
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	4613      	mov	r3, r2
 800f67c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f684:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800f686:	2300      	movs	r3, #0
 800f688:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d101      	bne.n	800f694 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800f690:	2302      	movs	r3, #2
 800f692:	e094      	b.n	800f7be <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	781a      	ldrb	r2, [r3, #0]
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	785a      	ldrb	r2, [r3, #1]
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	3302      	adds	r3, #2
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	3303      	adds	r3, #3
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	021b      	lsls	r3, r3, #8
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	791a      	ldrb	r2, [r3, #4]
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	795a      	ldrb	r2, [r3, #5]
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	799a      	ldrb	r2, [r3, #6]
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	79da      	ldrb	r2, [r3, #7]
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d004      	beq.n	800f6f2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d11b      	bne.n	800f72a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	79db      	ldrb	r3, [r3, #7]
 800f6f6:	2b20      	cmp	r3, #32
 800f6f8:	dc0f      	bgt.n	800f71a <USBH_ParseDevDesc+0xaa>
 800f6fa:	2b08      	cmp	r3, #8
 800f6fc:	db0f      	blt.n	800f71e <USBH_ParseDevDesc+0xae>
 800f6fe:	3b08      	subs	r3, #8
 800f700:	4a32      	ldr	r2, [pc, #200]	@ (800f7cc <USBH_ParseDevDesc+0x15c>)
 800f702:	fa22 f303 	lsr.w	r3, r2, r3
 800f706:	f003 0301 	and.w	r3, r3, #1
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	bf14      	ite	ne
 800f70e:	2301      	movne	r3, #1
 800f710:	2300      	moveq	r3, #0
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d106      	bne.n	800f726 <USBH_ParseDevDesc+0xb6>
 800f718:	e001      	b.n	800f71e <USBH_ParseDevDesc+0xae>
 800f71a:	2b40      	cmp	r3, #64	@ 0x40
 800f71c:	d003      	beq.n	800f726 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	2208      	movs	r2, #8
 800f722:	71da      	strb	r2, [r3, #7]
        break;
 800f724:	e000      	b.n	800f728 <USBH_ParseDevDesc+0xb8>
        break;
 800f726:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800f728:	e00e      	b.n	800f748 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f730:	2b02      	cmp	r3, #2
 800f732:	d107      	bne.n	800f744 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	79db      	ldrb	r3, [r3, #7]
 800f738:	2b08      	cmp	r3, #8
 800f73a:	d005      	beq.n	800f748 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	2208      	movs	r2, #8
 800f740:	71da      	strb	r2, [r3, #7]
 800f742:	e001      	b.n	800f748 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800f744:	2303      	movs	r3, #3
 800f746:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800f748:	88fb      	ldrh	r3, [r7, #6]
 800f74a:	2b08      	cmp	r3, #8
 800f74c:	d936      	bls.n	800f7bc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	3308      	adds	r3, #8
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	461a      	mov	r2, r3
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	3309      	adds	r3, #9
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	021b      	lsls	r3, r3, #8
 800f75e:	b29b      	uxth	r3, r3
 800f760:	4313      	orrs	r3, r2
 800f762:	b29a      	uxth	r2, r3
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	330a      	adds	r3, #10
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	461a      	mov	r2, r3
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	330b      	adds	r3, #11
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	021b      	lsls	r3, r3, #8
 800f778:	b29b      	uxth	r3, r3
 800f77a:	4313      	orrs	r3, r2
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	330c      	adds	r3, #12
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	330d      	adds	r3, #13
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	021b      	lsls	r3, r3, #8
 800f792:	b29b      	uxth	r3, r3
 800f794:	4313      	orrs	r3, r2
 800f796:	b29a      	uxth	r2, r3
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	7b9a      	ldrb	r2, [r3, #14]
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	7bda      	ldrb	r2, [r3, #15]
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	7c1a      	ldrb	r2, [r3, #16]
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	7c5a      	ldrb	r2, [r3, #17]
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800f7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	371c      	adds	r7, #28
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	01000101 	.word	0x01000101

0800f7d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b08c      	sub	sp, #48	@ 0x30
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f7e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d101      	bne.n	800f802 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800f7fe:	2302      	movs	r3, #2
 800f800:	e0da      	b.n	800f9b8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800f806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	2b09      	cmp	r3, #9
 800f80c:	d002      	beq.n	800f814 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800f80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f810:	2209      	movs	r2, #9
 800f812:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	781a      	ldrb	r2, [r3, #0]
 800f818:	6a3b      	ldr	r3, [r7, #32]
 800f81a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	785a      	ldrb	r2, [r3, #1]
 800f820:	6a3b      	ldr	r3, [r7, #32]
 800f822:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	3302      	adds	r3, #2
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	461a      	mov	r2, r3
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	3303      	adds	r3, #3
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	021b      	lsls	r3, r3, #8
 800f834:	b29b      	uxth	r3, r3
 800f836:	4313      	orrs	r3, r2
 800f838:	b29b      	uxth	r3, r3
 800f83a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f83e:	bf28      	it	cs
 800f840:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800f844:	b29a      	uxth	r2, r3
 800f846:	6a3b      	ldr	r3, [r7, #32]
 800f848:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	791a      	ldrb	r2, [r3, #4]
 800f84e:	6a3b      	ldr	r3, [r7, #32]
 800f850:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	795a      	ldrb	r2, [r3, #5]
 800f856:	6a3b      	ldr	r3, [r7, #32]
 800f858:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	799a      	ldrb	r2, [r3, #6]
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	79da      	ldrb	r2, [r3, #7]
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	7a1a      	ldrb	r2, [r3, #8]
 800f86e:	6a3b      	ldr	r3, [r7, #32]
 800f870:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f872:	88fb      	ldrh	r3, [r7, #6]
 800f874:	2b09      	cmp	r3, #9
 800f876:	f240 809d 	bls.w	800f9b4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800f87a:	2309      	movs	r3, #9
 800f87c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f882:	e081      	b.n	800f988 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f884:	f107 0316 	add.w	r3, r7, #22
 800f888:	4619      	mov	r1, r3
 800f88a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f88c:	f000 f9e7 	bl	800fc5e <USBH_GetNextDesc>
 800f890:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800f892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f894:	785b      	ldrb	r3, [r3, #1]
 800f896:	2b04      	cmp	r3, #4
 800f898:	d176      	bne.n	800f988 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b09      	cmp	r3, #9
 800f8a0:	d002      	beq.n	800f8a8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a4:	2209      	movs	r2, #9
 800f8a6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f8ac:	221a      	movs	r2, #26
 800f8ae:	fb02 f303 	mul.w	r3, r2, r3
 800f8b2:	3308      	adds	r3, #8
 800f8b4:	6a3a      	ldr	r2, [r7, #32]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	3302      	adds	r3, #2
 800f8ba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f8bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8be:	69f8      	ldr	r0, [r7, #28]
 800f8c0:	f000 f87e 	bl	800f9c0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f8ce:	e043      	b.n	800f958 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f8d0:	f107 0316 	add.w	r3, r7, #22
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8d8:	f000 f9c1 	bl	800fc5e <USBH_GetNextDesc>
 800f8dc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e0:	785b      	ldrb	r3, [r3, #1]
 800f8e2:	2b05      	cmp	r3, #5
 800f8e4:	d138      	bne.n	800f958 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	795b      	ldrb	r3, [r3, #5]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d113      	bne.n	800f916 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d003      	beq.n	800f8fe <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	799b      	ldrb	r3, [r3, #6]
 800f8fa:	2b03      	cmp	r3, #3
 800f8fc:	d10b      	bne.n	800f916 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	79db      	ldrb	r3, [r3, #7]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d10b      	bne.n	800f91e <USBH_ParseCfgDesc+0x14e>
 800f906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b09      	cmp	r3, #9
 800f90c:	d007      	beq.n	800f91e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800f90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f910:	2209      	movs	r2, #9
 800f912:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f914:	e003      	b.n	800f91e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f918:	2207      	movs	r2, #7
 800f91a:	701a      	strb	r2, [r3, #0]
 800f91c:	e000      	b.n	800f920 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f91e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f924:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f928:	3201      	adds	r2, #1
 800f92a:	00d2      	lsls	r2, r2, #3
 800f92c:	211a      	movs	r1, #26
 800f92e:	fb01 f303 	mul.w	r3, r1, r3
 800f932:	4413      	add	r3, r2
 800f934:	3308      	adds	r3, #8
 800f936:	6a3a      	ldr	r2, [r7, #32]
 800f938:	4413      	add	r3, r2
 800f93a:	3304      	adds	r3, #4
 800f93c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f93e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f940:	69b9      	ldr	r1, [r7, #24]
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f000 f870 	bl	800fa28 <USBH_ParseEPDesc>
 800f948:	4603      	mov	r3, r0
 800f94a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800f94e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f952:	3301      	adds	r3, #1
 800f954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	791b      	ldrb	r3, [r3, #4]
 800f95c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f960:	429a      	cmp	r2, r3
 800f962:	d204      	bcs.n	800f96e <USBH_ParseCfgDesc+0x19e>
 800f964:	6a3b      	ldr	r3, [r7, #32]
 800f966:	885a      	ldrh	r2, [r3, #2]
 800f968:	8afb      	ldrh	r3, [r7, #22]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d8b0      	bhi.n	800f8d0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	791b      	ldrb	r3, [r3, #4]
 800f972:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f976:	429a      	cmp	r2, r3
 800f978:	d201      	bcs.n	800f97e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800f97a:	2303      	movs	r3, #3
 800f97c:	e01c      	b.n	800f9b8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800f97e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f982:	3301      	adds	r3, #1
 800f984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d805      	bhi.n	800f99c <USBH_ParseCfgDesc+0x1cc>
 800f990:	6a3b      	ldr	r3, [r7, #32]
 800f992:	885a      	ldrh	r2, [r3, #2]
 800f994:	8afb      	ldrh	r3, [r7, #22]
 800f996:	429a      	cmp	r2, r3
 800f998:	f63f af74 	bhi.w	800f884 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f99c:	6a3b      	ldr	r3, [r7, #32]
 800f99e:	791b      	ldrb	r3, [r3, #4]
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	bf28      	it	cs
 800f9a4:	2302      	movcs	r3, #2
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d201      	bcs.n	800f9b4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800f9b0:	2303      	movs	r3, #3
 800f9b2:	e001      	b.n	800f9b8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800f9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3730      	adds	r7, #48	@ 0x30
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	781a      	ldrb	r2, [r3, #0]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	785a      	ldrb	r2, [r3, #1]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	789a      	ldrb	r2, [r3, #2]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	78da      	ldrb	r2, [r3, #3]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	bf28      	it	cs
 800f9f4:	2302      	movcs	r3, #2
 800f9f6:	b2da      	uxtb	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	795a      	ldrb	r2, [r3, #5]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	799a      	ldrb	r2, [r3, #6]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	79da      	ldrb	r2, [r3, #7]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	7a1a      	ldrb	r2, [r3, #8]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	721a      	strb	r2, [r3, #8]
}
 800fa1c:	bf00      	nop
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800fa34:	2300      	movs	r3, #0
 800fa36:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	781a      	ldrb	r2, [r3, #0]
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	785a      	ldrb	r2, [r3, #1]
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	789a      	ldrb	r2, [r3, #2]
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	78da      	ldrb	r2, [r3, #3]
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3304      	adds	r3, #4
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	3305      	adds	r3, #5
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	021b      	lsls	r3, r3, #8
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	799a      	ldrb	r2, [r3, #6]
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	889b      	ldrh	r3, [r3, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d009      	beq.n	800fa96 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800fa86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa8a:	d804      	bhi.n	800fa96 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800fa90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa94:	d901      	bls.n	800fa9a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800fa96:	2303      	movs	r3, #3
 800fa98:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d136      	bne.n	800fb12 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	78db      	ldrb	r3, [r3, #3]
 800faa8:	f003 0303 	and.w	r3, r3, #3
 800faac:	2b02      	cmp	r3, #2
 800faae:	d108      	bne.n	800fac2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	889b      	ldrh	r3, [r3, #4]
 800fab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fab8:	f240 8097 	bls.w	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fabc:	2303      	movs	r3, #3
 800fabe:	75fb      	strb	r3, [r7, #23]
 800fac0:	e093      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	78db      	ldrb	r3, [r3, #3]
 800fac6:	f003 0303 	and.w	r3, r3, #3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d107      	bne.n	800fade <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	889b      	ldrh	r3, [r3, #4]
 800fad2:	2b40      	cmp	r3, #64	@ 0x40
 800fad4:	f240 8089 	bls.w	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fad8:	2303      	movs	r3, #3
 800fada:	75fb      	strb	r3, [r7, #23]
 800fadc:	e085      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	78db      	ldrb	r3, [r3, #3]
 800fae2:	f003 0303 	and.w	r3, r3, #3
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d005      	beq.n	800faf6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	78db      	ldrb	r3, [r3, #3]
 800faee:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800faf2:	2b03      	cmp	r3, #3
 800faf4:	d10a      	bne.n	800fb0c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	799b      	ldrb	r3, [r3, #6]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d003      	beq.n	800fb06 <USBH_ParseEPDesc+0xde>
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	799b      	ldrb	r3, [r3, #6]
 800fb02:	2b10      	cmp	r3, #16
 800fb04:	d970      	bls.n	800fbe8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800fb06:	2303      	movs	r3, #3
 800fb08:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800fb0a:	e06d      	b.n	800fbe8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800fb0c:	2303      	movs	r3, #3
 800fb0e:	75fb      	strb	r3, [r7, #23]
 800fb10:	e06b      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d13c      	bne.n	800fb96 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	78db      	ldrb	r3, [r3, #3]
 800fb20:	f003 0303 	and.w	r3, r3, #3
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d005      	beq.n	800fb34 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	78db      	ldrb	r3, [r3, #3]
 800fb2c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d106      	bne.n	800fb42 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	889b      	ldrh	r3, [r3, #4]
 800fb38:	2b40      	cmp	r3, #64	@ 0x40
 800fb3a:	d956      	bls.n	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800fb40:	e053      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	78db      	ldrb	r3, [r3, #3]
 800fb46:	f003 0303 	and.w	r3, r3, #3
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d10e      	bne.n	800fb6c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	799b      	ldrb	r3, [r3, #6]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d007      	beq.n	800fb66 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800fb5a:	2b10      	cmp	r3, #16
 800fb5c:	d803      	bhi.n	800fb66 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800fb62:	2b40      	cmp	r3, #64	@ 0x40
 800fb64:	d941      	bls.n	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fb66:	2303      	movs	r3, #3
 800fb68:	75fb      	strb	r3, [r7, #23]
 800fb6a:	e03e      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	78db      	ldrb	r3, [r3, #3]
 800fb70:	f003 0303 	and.w	r3, r3, #3
 800fb74:	2b03      	cmp	r3, #3
 800fb76:	d10b      	bne.n	800fb90 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	799b      	ldrb	r3, [r3, #6]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d004      	beq.n	800fb8a <USBH_ParseEPDesc+0x162>
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	889b      	ldrh	r3, [r3, #4]
 800fb84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb88:	d32f      	bcc.n	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	75fb      	strb	r3, [r7, #23]
 800fb8e:	e02c      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800fb90:	2303      	movs	r3, #3
 800fb92:	75fb      	strb	r3, [r7, #23]
 800fb94:	e029      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d120      	bne.n	800fbe2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	78db      	ldrb	r3, [r3, #3]
 800fba4:	f003 0303 	and.w	r3, r3, #3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d106      	bne.n	800fbba <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	889b      	ldrh	r3, [r3, #4]
 800fbb0:	2b08      	cmp	r3, #8
 800fbb2:	d01a      	beq.n	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	75fb      	strb	r3, [r7, #23]
 800fbb8:	e017      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	78db      	ldrb	r3, [r3, #3]
 800fbbe:	f003 0303 	and.w	r3, r3, #3
 800fbc2:	2b03      	cmp	r3, #3
 800fbc4:	d10a      	bne.n	800fbdc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	799b      	ldrb	r3, [r3, #6]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <USBH_ParseEPDesc+0x1ae>
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	889b      	ldrh	r3, [r3, #4]
 800fbd2:	2b08      	cmp	r3, #8
 800fbd4:	d909      	bls.n	800fbea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	75fb      	strb	r3, [r7, #23]
 800fbda:	e006      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800fbdc:	2303      	movs	r3, #3
 800fbde:	75fb      	strb	r3, [r7, #23]
 800fbe0:	e003      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	75fb      	strb	r3, [r7, #23]
 800fbe6:	e000      	b.n	800fbea <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800fbe8:	bf00      	nop
  }

  return status;
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	371c      	adds	r7, #28
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b087      	sub	sp, #28
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	4613      	mov	r3, r2
 800fc04:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	2b03      	cmp	r3, #3
 800fc0e:	d120      	bne.n	800fc52 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	1e9a      	subs	r2, r3, #2
 800fc16:	88fb      	ldrh	r3, [r7, #6]
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	bf28      	it	cs
 800fc1c:	4613      	movcs	r3, r2
 800fc1e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3302      	adds	r3, #2
 800fc24:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fc26:	2300      	movs	r3, #0
 800fc28:	82fb      	strh	r3, [r7, #22]
 800fc2a:	e00b      	b.n	800fc44 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fc2c:	8afb      	ldrh	r3, [r7, #22]
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	4413      	add	r3, r2
 800fc32:	781a      	ldrb	r2, [r3, #0]
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fc3e:	8afb      	ldrh	r3, [r7, #22]
 800fc40:	3302      	adds	r3, #2
 800fc42:	82fb      	strh	r3, [r7, #22]
 800fc44:	8afa      	ldrh	r2, [r7, #22]
 800fc46:	8abb      	ldrh	r3, [r7, #20]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d3ef      	bcc.n	800fc2c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	701a      	strb	r2, [r3, #0]
  }
}
 800fc52:	bf00      	nop
 800fc54:	371c      	adds	r7, #28
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fc5e:	b480      	push	{r7}
 800fc60:	b085      	sub	sp, #20
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
 800fc66:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	7812      	ldrb	r2, [r2, #0]
 800fc70:	4413      	add	r3, r2
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4413      	add	r3, r2
 800fc82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc84:	68fb      	ldr	r3, [r7, #12]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3714      	adds	r7, #20
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	60f8      	str	r0, [r7, #12]
 800fc9a:	60b9      	str	r1, [r7, #8]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fca0:	2301      	movs	r3, #1
 800fca2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	789b      	ldrb	r3, [r3, #2]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d002      	beq.n	800fcb2 <USBH_CtlReq+0x20>
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d00f      	beq.n	800fcd0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fcb0:	e027      	b.n	800fd02 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fcca:	2301      	movs	r3, #1
 800fccc:	75fb      	strb	r3, [r7, #23]
      break;
 800fcce:	e018      	b.n	800fd02 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 f81b 	bl	800fd0c <USBH_HandleControl>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fcda:	7dfb      	ldrb	r3, [r7, #23]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <USBH_CtlReq+0x54>
 800fce0:	7dfb      	ldrb	r3, [r7, #23]
 800fce2:	2b03      	cmp	r3, #3
 800fce4:	d106      	bne.n	800fcf4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2201      	movs	r2, #1
 800fcea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	761a      	strb	r2, [r3, #24]
      break;
 800fcf2:	e005      	b.n	800fd00 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fcf4:	7dfb      	ldrb	r3, [r7, #23]
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d102      	bne.n	800fd00 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	709a      	strb	r2, [r3, #2]
      break;
 800fd00:	bf00      	nop
  }
  return status;
 800fd02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3718      	adds	r7, #24
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af02      	add	r7, sp, #8
 800fd12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fd14:	2301      	movs	r3, #1
 800fd16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	7e1b      	ldrb	r3, [r3, #24]
 800fd20:	3b01      	subs	r3, #1
 800fd22:	2b0a      	cmp	r3, #10
 800fd24:	f200 8156 	bhi.w	800ffd4 <USBH_HandleControl+0x2c8>
 800fd28:	a201      	add	r2, pc, #4	@ (adr r2, 800fd30 <USBH_HandleControl+0x24>)
 800fd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd2e:	bf00      	nop
 800fd30:	0800fd5d 	.word	0x0800fd5d
 800fd34:	0800fd77 	.word	0x0800fd77
 800fd38:	0800fde1 	.word	0x0800fde1
 800fd3c:	0800fe07 	.word	0x0800fe07
 800fd40:	0800fe3f 	.word	0x0800fe3f
 800fd44:	0800fe69 	.word	0x0800fe69
 800fd48:	0800febb 	.word	0x0800febb
 800fd4c:	0800fedd 	.word	0x0800fedd
 800fd50:	0800ff19 	.word	0x0800ff19
 800fd54:	0800ff3f 	.word	0x0800ff3f
 800fd58:	0800ff7d 	.word	0x0800ff7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f103 0110 	add.w	r1, r3, #16
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	795b      	ldrb	r3, [r3, #5]
 800fd66:	461a      	mov	r2, r3
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f943 	bl	800fff4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2202      	movs	r2, #2
 800fd72:	761a      	strb	r2, [r3, #24]
      break;
 800fd74:	e139      	b.n	800ffea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	795b      	ldrb	r3, [r3, #5]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f003 fd51 	bl	8013824 <USBH_LL_GetURBState>
 800fd82:	4603      	mov	r3, r0
 800fd84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fd86:	7bbb      	ldrb	r3, [r7, #14]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d11e      	bne.n	800fdca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	7c1b      	ldrb	r3, [r3, #16]
 800fd90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fd94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	8adb      	ldrh	r3, [r3, #22]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00a      	beq.n	800fdb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fd9e:	7b7b      	ldrb	r3, [r7, #13]
 800fda0:	2b80      	cmp	r3, #128	@ 0x80
 800fda2:	d103      	bne.n	800fdac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2203      	movs	r2, #3
 800fda8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fdaa:	e115      	b.n	800ffd8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2205      	movs	r2, #5
 800fdb0:	761a      	strb	r2, [r3, #24]
      break;
 800fdb2:	e111      	b.n	800ffd8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fdb4:	7b7b      	ldrb	r3, [r7, #13]
 800fdb6:	2b80      	cmp	r3, #128	@ 0x80
 800fdb8:	d103      	bne.n	800fdc2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2209      	movs	r2, #9
 800fdbe:	761a      	strb	r2, [r3, #24]
      break;
 800fdc0:	e10a      	b.n	800ffd8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2207      	movs	r2, #7
 800fdc6:	761a      	strb	r2, [r3, #24]
      break;
 800fdc8:	e106      	b.n	800ffd8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fdca:	7bbb      	ldrb	r3, [r7, #14]
 800fdcc:	2b04      	cmp	r3, #4
 800fdce:	d003      	beq.n	800fdd8 <USBH_HandleControl+0xcc>
 800fdd0:	7bbb      	ldrb	r3, [r7, #14]
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	f040 8100 	bne.w	800ffd8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	220b      	movs	r2, #11
 800fddc:	761a      	strb	r2, [r3, #24]
      break;
 800fdde:	e0fb      	b.n	800ffd8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6899      	ldr	r1, [r3, #8]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	899a      	ldrh	r2, [r3, #12]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	791b      	ldrb	r3, [r3, #4]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 f93a 	bl	8010072 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2204      	movs	r2, #4
 800fe02:	761a      	strb	r2, [r3, #24]
      break;
 800fe04:	e0f1      	b.n	800ffea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	791b      	ldrb	r3, [r3, #4]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f003 fd09 	bl	8013824 <USBH_LL_GetURBState>
 800fe12:	4603      	mov	r3, r0
 800fe14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe16:	7bbb      	ldrb	r3, [r7, #14]
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d102      	bne.n	800fe22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2209      	movs	r2, #9
 800fe20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fe22:	7bbb      	ldrb	r3, [r7, #14]
 800fe24:	2b05      	cmp	r3, #5
 800fe26:	d102      	bne.n	800fe2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fe28:	2303      	movs	r3, #3
 800fe2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fe2c:	e0d6      	b.n	800ffdc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800fe2e:	7bbb      	ldrb	r3, [r7, #14]
 800fe30:	2b04      	cmp	r3, #4
 800fe32:	f040 80d3 	bne.w	800ffdc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	220b      	movs	r2, #11
 800fe3a:	761a      	strb	r2, [r3, #24]
      break;
 800fe3c:	e0ce      	b.n	800ffdc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6899      	ldr	r1, [r3, #8]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	899a      	ldrh	r2, [r3, #12]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	795b      	ldrb	r3, [r3, #5]
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	9000      	str	r0, [sp, #0]
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 f8ea 	bl	8010028 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2206      	movs	r2, #6
 800fe64:	761a      	strb	r2, [r3, #24]
      break;
 800fe66:	e0c0      	b.n	800ffea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	795b      	ldrb	r3, [r3, #5]
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f003 fcd8 	bl	8013824 <USBH_LL_GetURBState>
 800fe74:	4603      	mov	r3, r0
 800fe76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fe78:	7bbb      	ldrb	r3, [r7, #14]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d103      	bne.n	800fe86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2207      	movs	r2, #7
 800fe82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fe84:	e0ac      	b.n	800ffe0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	2b05      	cmp	r3, #5
 800fe8a:	d105      	bne.n	800fe98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	220c      	movs	r2, #12
 800fe90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fe92:	2303      	movs	r3, #3
 800fe94:	73fb      	strb	r3, [r7, #15]
      break;
 800fe96:	e0a3      	b.n	800ffe0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fe98:	7bbb      	ldrb	r3, [r7, #14]
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	d103      	bne.n	800fea6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2205      	movs	r2, #5
 800fea2:	761a      	strb	r2, [r3, #24]
      break;
 800fea4:	e09c      	b.n	800ffe0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	2b04      	cmp	r3, #4
 800feaa:	f040 8099 	bne.w	800ffe0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	220b      	movs	r2, #11
 800feb2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800feb4:	2302      	movs	r3, #2
 800feb6:	73fb      	strb	r3, [r7, #15]
      break;
 800feb8:	e092      	b.n	800ffe0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	791b      	ldrb	r3, [r3, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	2100      	movs	r1, #0
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 f8d5 	bl	8010072 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800fece:	b29a      	uxth	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2208      	movs	r2, #8
 800fed8:	761a      	strb	r2, [r3, #24]

      break;
 800feda:	e086      	b.n	800ffea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	791b      	ldrb	r3, [r3, #4]
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f003 fc9e 	bl	8013824 <USBH_LL_GetURBState>
 800fee8:	4603      	mov	r3, r0
 800feea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800feec:	7bbb      	ldrb	r3, [r7, #14]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d105      	bne.n	800fefe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	220d      	movs	r2, #13
 800fef6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fef8:	2300      	movs	r3, #0
 800fefa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fefc:	e072      	b.n	800ffe4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800fefe:	7bbb      	ldrb	r3, [r7, #14]
 800ff00:	2b04      	cmp	r3, #4
 800ff02:	d103      	bne.n	800ff0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	220b      	movs	r2, #11
 800ff08:	761a      	strb	r2, [r3, #24]
      break;
 800ff0a:	e06b      	b.n	800ffe4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
 800ff0e:	2b05      	cmp	r3, #5
 800ff10:	d168      	bne.n	800ffe4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ff12:	2303      	movs	r3, #3
 800ff14:	73fb      	strb	r3, [r7, #15]
      break;
 800ff16:	e065      	b.n	800ffe4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	795b      	ldrb	r3, [r3, #5]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	9200      	str	r2, [sp, #0]
 800ff20:	2200      	movs	r2, #0
 800ff22:	2100      	movs	r1, #0
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f87f 	bl	8010028 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	220a      	movs	r2, #10
 800ff3a:	761a      	strb	r2, [r3, #24]
      break;
 800ff3c:	e055      	b.n	800ffea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	795b      	ldrb	r3, [r3, #5]
 800ff42:	4619      	mov	r1, r3
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f003 fc6d 	bl	8013824 <USBH_LL_GetURBState>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ff4e:	7bbb      	ldrb	r3, [r7, #14]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d105      	bne.n	800ff60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	220d      	movs	r2, #13
 800ff5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ff5e:	e043      	b.n	800ffe8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff60:	7bbb      	ldrb	r3, [r7, #14]
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d103      	bne.n	800ff6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2209      	movs	r2, #9
 800ff6a:	761a      	strb	r2, [r3, #24]
      break;
 800ff6c:	e03c      	b.n	800ffe8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ff6e:	7bbb      	ldrb	r3, [r7, #14]
 800ff70:	2b04      	cmp	r3, #4
 800ff72:	d139      	bne.n	800ffe8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	220b      	movs	r2, #11
 800ff78:	761a      	strb	r2, [r3, #24]
      break;
 800ff7a:	e035      	b.n	800ffe8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	7e5b      	ldrb	r3, [r3, #25]
 800ff80:	3301      	adds	r3, #1
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	765a      	strb	r2, [r3, #25]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7e5b      	ldrb	r3, [r3, #25]
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d806      	bhi.n	800ff9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ff9c:	e025      	b.n	800ffea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ffa4:	2106      	movs	r1, #6
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	795b      	ldrb	r3, [r3, #5]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f90c 	bl	80101d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	791b      	ldrb	r3, [r3, #4]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 f906 	bl	80101d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ffce:	2302      	movs	r3, #2
 800ffd0:	73fb      	strb	r3, [r7, #15]
      break;
 800ffd2:	e00a      	b.n	800ffea <USBH_HandleControl+0x2de>

    default:
      break;
 800ffd4:	bf00      	nop
 800ffd6:	e008      	b.n	800ffea <USBH_HandleControl+0x2de>
      break;
 800ffd8:	bf00      	nop
 800ffda:	e006      	b.n	800ffea <USBH_HandleControl+0x2de>
      break;
 800ffdc:	bf00      	nop
 800ffde:	e004      	b.n	800ffea <USBH_HandleControl+0x2de>
      break;
 800ffe0:	bf00      	nop
 800ffe2:	e002      	b.n	800ffea <USBH_HandleControl+0x2de>
      break;
 800ffe4:	bf00      	nop
 800ffe6:	e000      	b.n	800ffea <USBH_HandleControl+0x2de>
      break;
 800ffe8:	bf00      	nop
  }

  return status;
 800ffea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b088      	sub	sp, #32
 800fff8:	af04      	add	r7, sp, #16
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	4613      	mov	r3, r2
 8010000:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010002:	79f9      	ldrb	r1, [r7, #7]
 8010004:	2300      	movs	r3, #0
 8010006:	9303      	str	r3, [sp, #12]
 8010008:	2308      	movs	r3, #8
 801000a:	9302      	str	r3, [sp, #8]
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	9301      	str	r3, [sp, #4]
 8010010:	2300      	movs	r3, #0
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	2300      	movs	r3, #0
 8010016:	2200      	movs	r2, #0
 8010018:	68f8      	ldr	r0, [r7, #12]
 801001a:	f003 fbd2 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801001e:	2300      	movs	r3, #0
}
 8010020:	4618      	mov	r0, r3
 8010022:	3710      	adds	r7, #16
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b088      	sub	sp, #32
 801002c:	af04      	add	r7, sp, #16
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	4611      	mov	r1, r2
 8010034:	461a      	mov	r2, r3
 8010036:	460b      	mov	r3, r1
 8010038:	80fb      	strh	r3, [r7, #6]
 801003a:	4613      	mov	r3, r2
 801003c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010048:	2300      	movs	r3, #0
 801004a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801004c:	7979      	ldrb	r1, [r7, #5]
 801004e:	7e3b      	ldrb	r3, [r7, #24]
 8010050:	9303      	str	r3, [sp, #12]
 8010052:	88fb      	ldrh	r3, [r7, #6]
 8010054:	9302      	str	r3, [sp, #8]
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	2301      	movs	r3, #1
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	2300      	movs	r3, #0
 8010060:	2200      	movs	r2, #0
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f003 fbad 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3710      	adds	r7, #16
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b088      	sub	sp, #32
 8010076:	af04      	add	r7, sp, #16
 8010078:	60f8      	str	r0, [r7, #12]
 801007a:	60b9      	str	r1, [r7, #8]
 801007c:	4611      	mov	r1, r2
 801007e:	461a      	mov	r2, r3
 8010080:	460b      	mov	r3, r1
 8010082:	80fb      	strh	r3, [r7, #6]
 8010084:	4613      	mov	r3, r2
 8010086:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010088:	7979      	ldrb	r1, [r7, #5]
 801008a:	2300      	movs	r3, #0
 801008c:	9303      	str	r3, [sp, #12]
 801008e:	88fb      	ldrh	r3, [r7, #6]
 8010090:	9302      	str	r3, [sp, #8]
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	9301      	str	r3, [sp, #4]
 8010096:	2301      	movs	r3, #1
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	2300      	movs	r3, #0
 801009c:	2201      	movs	r2, #1
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f003 fb8f 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80100a4:	2300      	movs	r3, #0

}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b088      	sub	sp, #32
 80100b2:	af04      	add	r7, sp, #16
 80100b4:	60f8      	str	r0, [r7, #12]
 80100b6:	60b9      	str	r1, [r7, #8]
 80100b8:	4611      	mov	r1, r2
 80100ba:	461a      	mov	r2, r3
 80100bc:	460b      	mov	r3, r1
 80100be:	80fb      	strh	r3, [r7, #6]
 80100c0:	4613      	mov	r3, r2
 80100c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80100ce:	2300      	movs	r3, #0
 80100d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80100d2:	7979      	ldrb	r1, [r7, #5]
 80100d4:	7e3b      	ldrb	r3, [r7, #24]
 80100d6:	9303      	str	r3, [sp, #12]
 80100d8:	88fb      	ldrh	r3, [r7, #6]
 80100da:	9302      	str	r3, [sp, #8]
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	2301      	movs	r3, #1
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	2302      	movs	r3, #2
 80100e6:	2200      	movs	r2, #0
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f003 fb6a 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b088      	sub	sp, #32
 80100fc:	af04      	add	r7, sp, #16
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	4611      	mov	r1, r2
 8010104:	461a      	mov	r2, r3
 8010106:	460b      	mov	r3, r1
 8010108:	80fb      	strh	r3, [r7, #6]
 801010a:	4613      	mov	r3, r2
 801010c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801010e:	7979      	ldrb	r1, [r7, #5]
 8010110:	2300      	movs	r3, #0
 8010112:	9303      	str	r3, [sp, #12]
 8010114:	88fb      	ldrh	r3, [r7, #6]
 8010116:	9302      	str	r3, [sp, #8]
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	2301      	movs	r3, #1
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	2302      	movs	r3, #2
 8010122:	2201      	movs	r2, #1
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f003 fb4c 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b086      	sub	sp, #24
 8010138:	af04      	add	r7, sp, #16
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	4608      	mov	r0, r1
 801013e:	4611      	mov	r1, r2
 8010140:	461a      	mov	r2, r3
 8010142:	4603      	mov	r3, r0
 8010144:	70fb      	strb	r3, [r7, #3]
 8010146:	460b      	mov	r3, r1
 8010148:	70bb      	strb	r3, [r7, #2]
 801014a:	4613      	mov	r3, r2
 801014c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801014e:	7878      	ldrb	r0, [r7, #1]
 8010150:	78ba      	ldrb	r2, [r7, #2]
 8010152:	78f9      	ldrb	r1, [r7, #3]
 8010154:	8b3b      	ldrh	r3, [r7, #24]
 8010156:	9302      	str	r3, [sp, #8]
 8010158:	7d3b      	ldrb	r3, [r7, #20]
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	7c3b      	ldrb	r3, [r7, #16]
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4603      	mov	r3, r0
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f003 fadf 	bl	8013726 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	460b      	mov	r3, r1
 801017c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801017e:	78fb      	ldrb	r3, [r7, #3]
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f003 fafe 	bl	8013784 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	460b      	mov	r3, r1
 801019c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 f836 	bl	8010210 <USBH_GetFreePipe>
 80101a4:	4603      	mov	r3, r0
 80101a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80101a8:	89fb      	ldrh	r3, [r7, #14]
 80101aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d00a      	beq.n	80101c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80101b2:	78fa      	ldrb	r2, [r7, #3]
 80101b4:	89fb      	ldrh	r3, [r7, #14]
 80101b6:	f003 030f 	and.w	r3, r3, #15
 80101ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80101be:	6879      	ldr	r1, [r7, #4]
 80101c0:	33e0      	adds	r3, #224	@ 0xe0
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	440b      	add	r3, r1
 80101c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	b2db      	uxtb	r3, r3
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	460b      	mov	r3, r1
 80101de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80101e0:	78fb      	ldrb	r3, [r7, #3]
 80101e2:	2b0f      	cmp	r3, #15
 80101e4:	d80d      	bhi.n	8010202 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80101e6:	78fb      	ldrb	r3, [r7, #3]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	33e0      	adds	r3, #224	@ 0xe0
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	4413      	add	r3, r2
 80101f0:	685a      	ldr	r2, [r3, #4]
 80101f2:	78fb      	ldrb	r3, [r7, #3]
 80101f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80101f8:	6879      	ldr	r1, [r7, #4]
 80101fa:	33e0      	adds	r3, #224	@ 0xe0
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	440b      	add	r3, r1
 8010200:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010210:	b480      	push	{r7}
 8010212:	b085      	sub	sp, #20
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010218:	2300      	movs	r3, #0
 801021a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801021c:	2300      	movs	r3, #0
 801021e:	73fb      	strb	r3, [r7, #15]
 8010220:	e00f      	b.n	8010242 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010222:	7bfb      	ldrb	r3, [r7, #15]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	33e0      	adds	r3, #224	@ 0xe0
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4413      	add	r3, r2
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010232:	2b00      	cmp	r3, #0
 8010234:	d102      	bne.n	801023c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010236:	7bfb      	ldrb	r3, [r7, #15]
 8010238:	b29b      	uxth	r3, r3
 801023a:	e007      	b.n	801024c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801023c:	7bfb      	ldrb	r3, [r7, #15]
 801023e:	3301      	adds	r3, #1
 8010240:	73fb      	strb	r3, [r7, #15]
 8010242:	7bfb      	ldrb	r3, [r7, #15]
 8010244:	2b0f      	cmp	r3, #15
 8010246:	d9ec      	bls.n	8010222 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010248:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 801024c:	4618      	mov	r0, r3
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	4603      	mov	r3, r0
 8010260:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	4a08      	ldr	r2, [pc, #32]	@ (8010288 <disk_status+0x30>)
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	4413      	add	r3, r2
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	79fa      	ldrb	r2, [r7, #7]
 8010270:	4905      	ldr	r1, [pc, #20]	@ (8010288 <disk_status+0x30>)
 8010272:	440a      	add	r2, r1
 8010274:	7a12      	ldrb	r2, [r2, #8]
 8010276:	4610      	mov	r0, r2
 8010278:	4798      	blx	r3
 801027a:	4603      	mov	r3, r0
 801027c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801027e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	20000840 	.word	0x20000840

0801028c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010296:	2300      	movs	r3, #0
 8010298:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	4a0e      	ldr	r2, [pc, #56]	@ (80102d8 <disk_initialize+0x4c>)
 801029e:	5cd3      	ldrb	r3, [r2, r3]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d114      	bne.n	80102ce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80102a4:	79fb      	ldrb	r3, [r7, #7]
 80102a6:	4a0c      	ldr	r2, [pc, #48]	@ (80102d8 <disk_initialize+0x4c>)
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	4413      	add	r3, r2
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	79fa      	ldrb	r2, [r7, #7]
 80102b2:	4909      	ldr	r1, [pc, #36]	@ (80102d8 <disk_initialize+0x4c>)
 80102b4:	440a      	add	r2, r1
 80102b6:	7a12      	ldrb	r2, [r2, #8]
 80102b8:	4610      	mov	r0, r2
 80102ba:	4798      	blx	r3
 80102bc:	4603      	mov	r3, r0
 80102be:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d103      	bne.n	80102ce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	4a03      	ldr	r2, [pc, #12]	@ (80102d8 <disk_initialize+0x4c>)
 80102ca:	2101      	movs	r1, #1
 80102cc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80102ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3710      	adds	r7, #16
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	20000840 	.word	0x20000840

080102dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b087      	sub	sp, #28
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60b9      	str	r1, [r7, #8]
 80102e4:	607a      	str	r2, [r7, #4]
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	4603      	mov	r3, r0
 80102ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80102ec:	7bfb      	ldrb	r3, [r7, #15]
 80102ee:	4a0a      	ldr	r2, [pc, #40]	@ (8010318 <disk_read+0x3c>)
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	689c      	ldr	r4, [r3, #8]
 80102f8:	7bfb      	ldrb	r3, [r7, #15]
 80102fa:	4a07      	ldr	r2, [pc, #28]	@ (8010318 <disk_read+0x3c>)
 80102fc:	4413      	add	r3, r2
 80102fe:	7a18      	ldrb	r0, [r3, #8]
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	68b9      	ldr	r1, [r7, #8]
 8010306:	47a0      	blx	r4
 8010308:	4603      	mov	r3, r0
 801030a:	75fb      	strb	r3, [r7, #23]
  return res;
 801030c:	7dfb      	ldrb	r3, [r7, #23]
}
 801030e:	4618      	mov	r0, r3
 8010310:	371c      	adds	r7, #28
 8010312:	46bd      	mov	sp, r7
 8010314:	bd90      	pop	{r4, r7, pc}
 8010316:	bf00      	nop
 8010318:	20000840 	.word	0x20000840

0801031c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801031c:	b590      	push	{r4, r7, lr}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	60b9      	str	r1, [r7, #8]
 8010324:	607a      	str	r2, [r7, #4]
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	4603      	mov	r3, r0
 801032a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801032c:	7bfb      	ldrb	r3, [r7, #15]
 801032e:	4a0a      	ldr	r2, [pc, #40]	@ (8010358 <disk_write+0x3c>)
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	68dc      	ldr	r4, [r3, #12]
 8010338:	7bfb      	ldrb	r3, [r7, #15]
 801033a:	4a07      	ldr	r2, [pc, #28]	@ (8010358 <disk_write+0x3c>)
 801033c:	4413      	add	r3, r2
 801033e:	7a18      	ldrb	r0, [r3, #8]
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	68b9      	ldr	r1, [r7, #8]
 8010346:	47a0      	blx	r4
 8010348:	4603      	mov	r3, r0
 801034a:	75fb      	strb	r3, [r7, #23]
  return res;
 801034c:	7dfb      	ldrb	r3, [r7, #23]
}
 801034e:	4618      	mov	r0, r3
 8010350:	371c      	adds	r7, #28
 8010352:	46bd      	mov	sp, r7
 8010354:	bd90      	pop	{r4, r7, pc}
 8010356:	bf00      	nop
 8010358:	20000840 	.word	0x20000840

0801035c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	603a      	str	r2, [r7, #0]
 8010366:	71fb      	strb	r3, [r7, #7]
 8010368:	460b      	mov	r3, r1
 801036a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801036c:	79fb      	ldrb	r3, [r7, #7]
 801036e:	4a09      	ldr	r2, [pc, #36]	@ (8010394 <disk_ioctl+0x38>)
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4413      	add	r3, r2
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	79fa      	ldrb	r2, [r7, #7]
 801037a:	4906      	ldr	r1, [pc, #24]	@ (8010394 <disk_ioctl+0x38>)
 801037c:	440a      	add	r2, r1
 801037e:	7a10      	ldrb	r0, [r2, #8]
 8010380:	79b9      	ldrb	r1, [r7, #6]
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	4798      	blx	r3
 8010386:	4603      	mov	r3, r0
 8010388:	73fb      	strb	r3, [r7, #15]
  return res;
 801038a:	7bfb      	ldrb	r3, [r7, #15]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	20000840 	.word	0x20000840

08010398 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010398:	b480      	push	{r7}
 801039a:	b085      	sub	sp, #20
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	3301      	adds	r3, #1
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80103a8:	89fb      	ldrh	r3, [r7, #14]
 80103aa:	021b      	lsls	r3, r3, #8
 80103ac:	b21a      	sxth	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	b21b      	sxth	r3, r3
 80103b4:	4313      	orrs	r3, r2
 80103b6:	b21b      	sxth	r3, r3
 80103b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80103ba:	89fb      	ldrh	r3, [r7, #14]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3714      	adds	r7, #20
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3303      	adds	r3, #3
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	021b      	lsls	r3, r3, #8
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	3202      	adds	r2, #2
 80103e0:	7812      	ldrb	r2, [r2, #0]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	021b      	lsls	r3, r3, #8
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	3201      	adds	r2, #1
 80103ee:	7812      	ldrb	r2, [r2, #0]
 80103f0:	4313      	orrs	r3, r2
 80103f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	021b      	lsls	r3, r3, #8
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	7812      	ldrb	r2, [r2, #0]
 80103fc:	4313      	orrs	r3, r2
 80103fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8010400:	68fb      	ldr	r3, [r7, #12]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3714      	adds	r7, #20
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801040e:	b480      	push	{r7}
 8010410:	b083      	sub	sp, #12
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	460b      	mov	r3, r1
 8010418:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	1c5a      	adds	r2, r3, #1
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	887a      	ldrh	r2, [r7, #2]
 8010422:	b2d2      	uxtb	r2, r2
 8010424:	701a      	strb	r2, [r3, #0]
 8010426:	887b      	ldrh	r3, [r7, #2]
 8010428:	0a1b      	lsrs	r3, r3, #8
 801042a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	607a      	str	r2, [r7, #4]
 8010432:	887a      	ldrh	r2, [r7, #2]
 8010434:	b2d2      	uxtb	r2, r2
 8010436:	701a      	strb	r2, [r3, #0]
}
 8010438:	bf00      	nop
 801043a:	370c      	adds	r7, #12
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	1c5a      	adds	r2, r3, #1
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	683a      	ldr	r2, [r7, #0]
 8010456:	b2d2      	uxtb	r2, r2
 8010458:	701a      	strb	r2, [r3, #0]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	0a1b      	lsrs	r3, r3, #8
 801045e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	1c5a      	adds	r2, r3, #1
 8010464:	607a      	str	r2, [r7, #4]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	b2d2      	uxtb	r2, r2
 801046a:	701a      	strb	r2, [r3, #0]
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	0a1b      	lsrs	r3, r3, #8
 8010470:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	607a      	str	r2, [r7, #4]
 8010478:	683a      	ldr	r2, [r7, #0]
 801047a:	b2d2      	uxtb	r2, r2
 801047c:	701a      	strb	r2, [r3, #0]
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	0a1b      	lsrs	r3, r3, #8
 8010482:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	1c5a      	adds	r2, r3, #1
 8010488:	607a      	str	r2, [r7, #4]
 801048a:	683a      	ldr	r2, [r7, #0]
 801048c:	b2d2      	uxtb	r2, r2
 801048e:	701a      	strb	r2, [r3, #0]
}
 8010490:	bf00      	nop
 8010492:	370c      	adds	r7, #12
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr

0801049c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801049c:	b480      	push	{r7}
 801049e:	b087      	sub	sp, #28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00d      	beq.n	80104d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80104b6:	693a      	ldr	r2, [r7, #16]
 80104b8:	1c53      	adds	r3, r2, #1
 80104ba:	613b      	str	r3, [r7, #16]
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	1c59      	adds	r1, r3, #1
 80104c0:	6179      	str	r1, [r7, #20]
 80104c2:	7812      	ldrb	r2, [r2, #0]
 80104c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	3b01      	subs	r3, #1
 80104ca:	607b      	str	r3, [r7, #4]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1f1      	bne.n	80104b6 <mem_cpy+0x1a>
	}
}
 80104d2:	bf00      	nop
 80104d4:	371c      	adds	r7, #28
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr

080104de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80104de:	b480      	push	{r7}
 80104e0:	b087      	sub	sp, #28
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	60f8      	str	r0, [r7, #12]
 80104e6:	60b9      	str	r1, [r7, #8]
 80104e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	1c5a      	adds	r2, r3, #1
 80104f2:	617a      	str	r2, [r7, #20]
 80104f4:	68ba      	ldr	r2, [r7, #8]
 80104f6:	b2d2      	uxtb	r2, r2
 80104f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	607b      	str	r3, [r7, #4]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1f3      	bne.n	80104ee <mem_set+0x10>
}
 8010506:	bf00      	nop
 8010508:	bf00      	nop
 801050a:	371c      	adds	r7, #28
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010514:	b480      	push	{r7}
 8010516:	b089      	sub	sp, #36	@ 0x24
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	61fb      	str	r3, [r7, #28]
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010528:	2300      	movs	r3, #0
 801052a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	1c5a      	adds	r2, r3, #1
 8010530:	61fa      	str	r2, [r7, #28]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	4619      	mov	r1, r3
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	1c5a      	adds	r2, r3, #1
 801053a:	61ba      	str	r2, [r7, #24]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	1acb      	subs	r3, r1, r3
 8010540:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	3b01      	subs	r3, #1
 8010546:	607b      	str	r3, [r7, #4]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <mem_cmp+0x40>
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d0eb      	beq.n	801052c <mem_cmp+0x18>

	return r;
 8010554:	697b      	ldr	r3, [r7, #20]
}
 8010556:	4618      	mov	r0, r3
 8010558:	3724      	adds	r7, #36	@ 0x24
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr

08010562 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010562:	b480      	push	{r7}
 8010564:	b083      	sub	sp, #12
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801056c:	e002      	b.n	8010574 <chk_chr+0x12>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	3301      	adds	r3, #1
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d005      	beq.n	8010588 <chk_chr+0x26>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	461a      	mov	r2, r3
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	4293      	cmp	r3, r2
 8010586:	d1f2      	bne.n	801056e <chk_chr+0xc>
	return *str;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	781b      	ldrb	r3, [r3, #0]
}
 801058c:	4618      	mov	r0, r3
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80105a2:	2300      	movs	r3, #0
 80105a4:	60bb      	str	r3, [r7, #8]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	60fb      	str	r3, [r7, #12]
 80105aa:	e029      	b.n	8010600 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80105ac:	4a27      	ldr	r2, [pc, #156]	@ (801064c <chk_lock+0xb4>)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	011b      	lsls	r3, r3, #4
 80105b2:	4413      	add	r3, r2
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d01d      	beq.n	80105f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80105ba:	4a24      	ldr	r2, [pc, #144]	@ (801064c <chk_lock+0xb4>)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	011b      	lsls	r3, r3, #4
 80105c0:	4413      	add	r3, r2
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d116      	bne.n	80105fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80105cc:	4a1f      	ldr	r2, [pc, #124]	@ (801064c <chk_lock+0xb4>)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	011b      	lsls	r3, r3, #4
 80105d2:	4413      	add	r3, r2
 80105d4:	3304      	adds	r3, #4
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80105dc:	429a      	cmp	r2, r3
 80105de:	d10c      	bne.n	80105fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80105e0:	4a1a      	ldr	r2, [pc, #104]	@ (801064c <chk_lock+0xb4>)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	011b      	lsls	r3, r3, #4
 80105e6:	4413      	add	r3, r2
 80105e8:	3308      	adds	r3, #8
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d102      	bne.n	80105fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80105f4:	e007      	b.n	8010606 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80105f6:	2301      	movs	r3, #1
 80105f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	3301      	adds	r3, #1
 80105fe:	60fb      	str	r3, [r7, #12]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d9d2      	bls.n	80105ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2b02      	cmp	r3, #2
 801060a:	d109      	bne.n	8010620 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d102      	bne.n	8010618 <chk_lock+0x80>
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	2b02      	cmp	r3, #2
 8010616:	d101      	bne.n	801061c <chk_lock+0x84>
 8010618:	2300      	movs	r3, #0
 801061a:	e010      	b.n	801063e <chk_lock+0xa6>
 801061c:	2312      	movs	r3, #18
 801061e:	e00e      	b.n	801063e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d108      	bne.n	8010638 <chk_lock+0xa0>
 8010626:	4a09      	ldr	r2, [pc, #36]	@ (801064c <chk_lock+0xb4>)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	011b      	lsls	r3, r3, #4
 801062c:	4413      	add	r3, r2
 801062e:	330c      	adds	r3, #12
 8010630:	881b      	ldrh	r3, [r3, #0]
 8010632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010636:	d101      	bne.n	801063c <chk_lock+0xa4>
 8010638:	2310      	movs	r3, #16
 801063a:	e000      	b.n	801063e <chk_lock+0xa6>
 801063c:	2300      	movs	r3, #0
}
 801063e:	4618      	mov	r0, r3
 8010640:	3714      	adds	r7, #20
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	20000820 	.word	0x20000820

08010650 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010656:	2300      	movs	r3, #0
 8010658:	607b      	str	r3, [r7, #4]
 801065a:	e002      	b.n	8010662 <enq_lock+0x12>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	3301      	adds	r3, #1
 8010660:	607b      	str	r3, [r7, #4]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d806      	bhi.n	8010676 <enq_lock+0x26>
 8010668:	4a09      	ldr	r2, [pc, #36]	@ (8010690 <enq_lock+0x40>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	011b      	lsls	r3, r3, #4
 801066e:	4413      	add	r3, r2
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1f2      	bne.n	801065c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2b02      	cmp	r3, #2
 801067a:	bf14      	ite	ne
 801067c:	2301      	movne	r3, #1
 801067e:	2300      	moveq	r3, #0
 8010680:	b2db      	uxtb	r3, r3
}
 8010682:	4618      	mov	r0, r3
 8010684:	370c      	adds	r7, #12
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	20000820 	.word	0x20000820

08010694 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801069e:	2300      	movs	r3, #0
 80106a0:	60fb      	str	r3, [r7, #12]
 80106a2:	e01f      	b.n	80106e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80106a4:	4a41      	ldr	r2, [pc, #260]	@ (80107ac <inc_lock+0x118>)
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	011b      	lsls	r3, r3, #4
 80106aa:	4413      	add	r3, r2
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d113      	bne.n	80106de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80106b6:	4a3d      	ldr	r2, [pc, #244]	@ (80107ac <inc_lock+0x118>)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	011b      	lsls	r3, r3, #4
 80106bc:	4413      	add	r3, r2
 80106be:	3304      	adds	r3, #4
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d109      	bne.n	80106de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80106ca:	4a38      	ldr	r2, [pc, #224]	@ (80107ac <inc_lock+0x118>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	4413      	add	r3, r2
 80106d2:	3308      	adds	r3, #8
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80106da:	429a      	cmp	r2, r3
 80106dc:	d006      	beq.n	80106ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3301      	adds	r3, #1
 80106e2:	60fb      	str	r3, [r7, #12]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d9dc      	bls.n	80106a4 <inc_lock+0x10>
 80106ea:	e000      	b.n	80106ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80106ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d132      	bne.n	801075a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80106f4:	2300      	movs	r3, #0
 80106f6:	60fb      	str	r3, [r7, #12]
 80106f8:	e002      	b.n	8010700 <inc_lock+0x6c>
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	3301      	adds	r3, #1
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2b01      	cmp	r3, #1
 8010704:	d806      	bhi.n	8010714 <inc_lock+0x80>
 8010706:	4a29      	ldr	r2, [pc, #164]	@ (80107ac <inc_lock+0x118>)
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	011b      	lsls	r3, r3, #4
 801070c:	4413      	add	r3, r2
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1f2      	bne.n	80106fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2b02      	cmp	r3, #2
 8010718:	d101      	bne.n	801071e <inc_lock+0x8a>
 801071a:	2300      	movs	r3, #0
 801071c:	e040      	b.n	80107a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	4922      	ldr	r1, [pc, #136]	@ (80107ac <inc_lock+0x118>)
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	011b      	lsls	r3, r3, #4
 8010728:	440b      	add	r3, r1
 801072a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	689a      	ldr	r2, [r3, #8]
 8010730:	491e      	ldr	r1, [pc, #120]	@ (80107ac <inc_lock+0x118>)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	011b      	lsls	r3, r3, #4
 8010736:	440b      	add	r3, r1
 8010738:	3304      	adds	r3, #4
 801073a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	695a      	ldr	r2, [r3, #20]
 8010740:	491a      	ldr	r1, [pc, #104]	@ (80107ac <inc_lock+0x118>)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	011b      	lsls	r3, r3, #4
 8010746:	440b      	add	r3, r1
 8010748:	3308      	adds	r3, #8
 801074a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801074c:	4a17      	ldr	r2, [pc, #92]	@ (80107ac <inc_lock+0x118>)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	011b      	lsls	r3, r3, #4
 8010752:	4413      	add	r3, r2
 8010754:	330c      	adds	r3, #12
 8010756:	2200      	movs	r2, #0
 8010758:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d009      	beq.n	8010774 <inc_lock+0xe0>
 8010760:	4a12      	ldr	r2, [pc, #72]	@ (80107ac <inc_lock+0x118>)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	011b      	lsls	r3, r3, #4
 8010766:	4413      	add	r3, r2
 8010768:	330c      	adds	r3, #12
 801076a:	881b      	ldrh	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <inc_lock+0xe0>
 8010770:	2300      	movs	r3, #0
 8010772:	e015      	b.n	80107a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d108      	bne.n	801078c <inc_lock+0xf8>
 801077a:	4a0c      	ldr	r2, [pc, #48]	@ (80107ac <inc_lock+0x118>)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	011b      	lsls	r3, r3, #4
 8010780:	4413      	add	r3, r2
 8010782:	330c      	adds	r3, #12
 8010784:	881b      	ldrh	r3, [r3, #0]
 8010786:	3301      	adds	r3, #1
 8010788:	b29a      	uxth	r2, r3
 801078a:	e001      	b.n	8010790 <inc_lock+0xfc>
 801078c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010790:	4906      	ldr	r1, [pc, #24]	@ (80107ac <inc_lock+0x118>)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	011b      	lsls	r3, r3, #4
 8010796:	440b      	add	r3, r1
 8010798:	330c      	adds	r3, #12
 801079a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	3301      	adds	r3, #1
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3714      	adds	r7, #20
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	20000820 	.word	0x20000820

080107b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b085      	sub	sp, #20
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	3b01      	subs	r3, #1
 80107bc:	607b      	str	r3, [r7, #4]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d825      	bhi.n	8010810 <dec_lock+0x60>
		n = Files[i].ctr;
 80107c4:	4a17      	ldr	r2, [pc, #92]	@ (8010824 <dec_lock+0x74>)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	011b      	lsls	r3, r3, #4
 80107ca:	4413      	add	r3, r2
 80107cc:	330c      	adds	r3, #12
 80107ce:	881b      	ldrh	r3, [r3, #0]
 80107d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80107d2:	89fb      	ldrh	r3, [r7, #14]
 80107d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107d8:	d101      	bne.n	80107de <dec_lock+0x2e>
 80107da:	2300      	movs	r3, #0
 80107dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80107de:	89fb      	ldrh	r3, [r7, #14]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <dec_lock+0x3a>
 80107e4:	89fb      	ldrh	r3, [r7, #14]
 80107e6:	3b01      	subs	r3, #1
 80107e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80107ea:	4a0e      	ldr	r2, [pc, #56]	@ (8010824 <dec_lock+0x74>)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	011b      	lsls	r3, r3, #4
 80107f0:	4413      	add	r3, r2
 80107f2:	330c      	adds	r3, #12
 80107f4:	89fa      	ldrh	r2, [r7, #14]
 80107f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80107f8:	89fb      	ldrh	r3, [r7, #14]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d105      	bne.n	801080a <dec_lock+0x5a>
 80107fe:	4a09      	ldr	r2, [pc, #36]	@ (8010824 <dec_lock+0x74>)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	011b      	lsls	r3, r3, #4
 8010804:	4413      	add	r3, r2
 8010806:	2200      	movs	r2, #0
 8010808:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	737b      	strb	r3, [r7, #13]
 801080e:	e001      	b.n	8010814 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010810:	2302      	movs	r3, #2
 8010812:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010814:	7b7b      	ldrb	r3, [r7, #13]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3714      	adds	r7, #20
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr
 8010822:	bf00      	nop
 8010824:	20000820 	.word	0x20000820

08010828 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010830:	2300      	movs	r3, #0
 8010832:	60fb      	str	r3, [r7, #12]
 8010834:	e010      	b.n	8010858 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010836:	4a0d      	ldr	r2, [pc, #52]	@ (801086c <clear_lock+0x44>)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	011b      	lsls	r3, r3, #4
 801083c:	4413      	add	r3, r2
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	429a      	cmp	r2, r3
 8010844:	d105      	bne.n	8010852 <clear_lock+0x2a>
 8010846:	4a09      	ldr	r2, [pc, #36]	@ (801086c <clear_lock+0x44>)
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	011b      	lsls	r3, r3, #4
 801084c:	4413      	add	r3, r2
 801084e:	2200      	movs	r2, #0
 8010850:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	3301      	adds	r3, #1
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2b01      	cmp	r3, #1
 801085c:	d9eb      	bls.n	8010836 <clear_lock+0xe>
	}
}
 801085e:	bf00      	nop
 8010860:	bf00      	nop
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	20000820 	.word	0x20000820

08010870 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b086      	sub	sp, #24
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	78db      	ldrb	r3, [r3, #3]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d034      	beq.n	80108ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010888:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	7858      	ldrb	r0, [r3, #1]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010894:	2301      	movs	r3, #1
 8010896:	697a      	ldr	r2, [r7, #20]
 8010898:	f7ff fd40 	bl	801031c <disk_write>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d002      	beq.n	80108a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	73fb      	strb	r3, [r7, #15]
 80108a6:	e022      	b.n	80108ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	1ad2      	subs	r2, r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	699b      	ldr	r3, [r3, #24]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d217      	bcs.n	80108ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	789b      	ldrb	r3, [r3, #2]
 80108c2:	613b      	str	r3, [r7, #16]
 80108c4:	e010      	b.n	80108e8 <sync_window+0x78>
					wsect += fs->fsize;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	699b      	ldr	r3, [r3, #24]
 80108ca:	697a      	ldr	r2, [r7, #20]
 80108cc:	4413      	add	r3, r2
 80108ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	7858      	ldrb	r0, [r3, #1]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80108da:	2301      	movs	r3, #1
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	f7ff fd1d 	bl	801031c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	613b      	str	r3, [r7, #16]
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d8eb      	bhi.n	80108c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80108ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3718      	adds	r7, #24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	429a      	cmp	r2, r3
 801090e:	d01b      	beq.n	8010948 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff ffad 	bl	8010870 <sync_window>
 8010916:	4603      	mov	r3, r0
 8010918:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801091a:	7bfb      	ldrb	r3, [r7, #15]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d113      	bne.n	8010948 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	7858      	ldrb	r0, [r3, #1]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801092a:	2301      	movs	r3, #1
 801092c:	683a      	ldr	r2, [r7, #0]
 801092e:	f7ff fcd5 	bl	80102dc <disk_read>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d004      	beq.n	8010942 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010938:	f04f 33ff 	mov.w	r3, #4294967295
 801093c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801093e:	2301      	movs	r3, #1
 8010940:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8010948:	7bfb      	ldrb	r3, [r7, #15]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff ff87 	bl	8010870 <sync_window>
 8010962:	4603      	mov	r3, r0
 8010964:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010966:	7bfb      	ldrb	r3, [r7, #15]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d158      	bne.n	8010a1e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	2b03      	cmp	r3, #3
 8010972:	d148      	bne.n	8010a06 <sync_fs+0xb2>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	791b      	ldrb	r3, [r3, #4]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d144      	bne.n	8010a06 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	3330      	adds	r3, #48	@ 0x30
 8010980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010984:	2100      	movs	r1, #0
 8010986:	4618      	mov	r0, r3
 8010988:	f7ff fda9 	bl	80104de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	3330      	adds	r3, #48	@ 0x30
 8010990:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010994:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010998:	4618      	mov	r0, r3
 801099a:	f7ff fd38 	bl	801040e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	3330      	adds	r3, #48	@ 0x30
 80109a2:	4921      	ldr	r1, [pc, #132]	@ (8010a28 <sync_fs+0xd4>)
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7ff fd4d 	bl	8010444 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	3330      	adds	r3, #48	@ 0x30
 80109ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80109b2:	491e      	ldr	r1, [pc, #120]	@ (8010a2c <sync_fs+0xd8>)
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7ff fd45 	bl	8010444 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	3330      	adds	r3, #48	@ 0x30
 80109be:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7ff fd3b 	bl	8010444 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3330      	adds	r3, #48	@ 0x30
 80109d2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	4619      	mov	r1, r3
 80109dc:	4610      	mov	r0, r2
 80109de:	f7ff fd31 	bl	8010444 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	7858      	ldrb	r0, [r3, #1]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109fa:	2301      	movs	r3, #1
 80109fc:	f7ff fc8e 	bl	801031c <disk_write>
			fs->fsi_flag = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	785b      	ldrb	r3, [r3, #1]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7ff fca4 	bl	801035c <disk_ioctl>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <sync_fs+0xca>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3710      	adds	r7, #16
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	41615252 	.word	0x41615252
 8010a2c:	61417272 	.word	0x61417272

08010a30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	3b02      	subs	r3, #2
 8010a3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	695b      	ldr	r3, [r3, #20]
 8010a44:	3b02      	subs	r3, #2
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d301      	bcc.n	8010a50 <clust2sect+0x20>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	e008      	b.n	8010a62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	895b      	ldrh	r3, [r3, #10]
 8010a54:	461a      	mov	r2, r3
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	fb03 f202 	mul.w	r2, r3, r2
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a60:	4413      	add	r3, r2
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	370c      	adds	r7, #12
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr

08010a6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b086      	sub	sp, #24
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	6078      	str	r0, [r7, #4]
 8010a76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d904      	bls.n	8010a8e <get_fat+0x20>
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	683a      	ldr	r2, [r7, #0]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d302      	bcc.n	8010a94 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010a8e:	2301      	movs	r3, #1
 8010a90:	617b      	str	r3, [r7, #20]
 8010a92:	e08e      	b.n	8010bb2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010a94:	f04f 33ff 	mov.w	r3, #4294967295
 8010a98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	2b03      	cmp	r3, #3
 8010aa0:	d061      	beq.n	8010b66 <get_fat+0xf8>
 8010aa2:	2b03      	cmp	r3, #3
 8010aa4:	dc7b      	bgt.n	8010b9e <get_fat+0x130>
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d002      	beq.n	8010ab0 <get_fat+0x42>
 8010aaa:	2b02      	cmp	r3, #2
 8010aac:	d041      	beq.n	8010b32 <get_fat+0xc4>
 8010aae:	e076      	b.n	8010b9e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	085b      	lsrs	r3, r3, #1
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	4413      	add	r3, r2
 8010abc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	6a1a      	ldr	r2, [r3, #32]
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	0a5b      	lsrs	r3, r3, #9
 8010ac6:	4413      	add	r3, r2
 8010ac8:	4619      	mov	r1, r3
 8010aca:	6938      	ldr	r0, [r7, #16]
 8010acc:	f7ff ff14 	bl	80108f8 <move_window>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d166      	bne.n	8010ba4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	1c5a      	adds	r2, r3, #1
 8010ada:	60fa      	str	r2, [r7, #12]
 8010adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ae8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	6a1a      	ldr	r2, [r3, #32]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	0a5b      	lsrs	r3, r3, #9
 8010af2:	4413      	add	r3, r2
 8010af4:	4619      	mov	r1, r3
 8010af6:	6938      	ldr	r0, [r7, #16]
 8010af8:	f7ff fefe 	bl	80108f8 <move_window>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d152      	bne.n	8010ba8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b08:	693a      	ldr	r2, [r7, #16]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010b10:	021b      	lsls	r3, r3, #8
 8010b12:	68ba      	ldr	r2, [r7, #8]
 8010b14:	4313      	orrs	r3, r2
 8010b16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	f003 0301 	and.w	r3, r3, #1
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d002      	beq.n	8010b28 <get_fat+0xba>
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	091b      	lsrs	r3, r3, #4
 8010b26:	e002      	b.n	8010b2e <get_fat+0xc0>
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b2e:	617b      	str	r3, [r7, #20]
			break;
 8010b30:	e03f      	b.n	8010bb2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	6a1a      	ldr	r2, [r3, #32]
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	0a1b      	lsrs	r3, r3, #8
 8010b3a:	4413      	add	r3, r2
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6938      	ldr	r0, [r7, #16]
 8010b40:	f7ff feda 	bl	80108f8 <move_window>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d130      	bne.n	8010bac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	005b      	lsls	r3, r3, #1
 8010b54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010b58:	4413      	add	r3, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ff fc1c 	bl	8010398 <ld_word>
 8010b60:	4603      	mov	r3, r0
 8010b62:	617b      	str	r3, [r7, #20]
			break;
 8010b64:	e025      	b.n	8010bb2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	6a1a      	ldr	r2, [r3, #32]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	09db      	lsrs	r3, r3, #7
 8010b6e:	4413      	add	r3, r2
 8010b70:	4619      	mov	r1, r3
 8010b72:	6938      	ldr	r0, [r7, #16]
 8010b74:	f7ff fec0 	bl	80108f8 <move_window>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d118      	bne.n	8010bb0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010b8c:	4413      	add	r3, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7ff fc1a 	bl	80103c8 <ld_dword>
 8010b94:	4603      	mov	r3, r0
 8010b96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010b9a:	617b      	str	r3, [r7, #20]
			break;
 8010b9c:	e009      	b.n	8010bb2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	617b      	str	r3, [r7, #20]
 8010ba2:	e006      	b.n	8010bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ba4:	bf00      	nop
 8010ba6:	e004      	b.n	8010bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ba8:	bf00      	nop
 8010baa:	e002      	b.n	8010bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010bac:	bf00      	nop
 8010bae:	e000      	b.n	8010bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010bb0:	bf00      	nop
		}
	}

	return val;
 8010bb2:	697b      	ldr	r3, [r7, #20]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3718      	adds	r7, #24
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010bbc:	b590      	push	{r4, r7, lr}
 8010bbe:	b089      	sub	sp, #36	@ 0x24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010bc8:	2302      	movs	r3, #2
 8010bca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	f240 80d9 	bls.w	8010d86 <put_fat+0x1ca>
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	695b      	ldr	r3, [r3, #20]
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	f080 80d3 	bcs.w	8010d86 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	f000 8096 	beq.w	8010d16 <put_fat+0x15a>
 8010bea:	2b03      	cmp	r3, #3
 8010bec:	f300 80cb 	bgt.w	8010d86 <put_fat+0x1ca>
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d002      	beq.n	8010bfa <put_fat+0x3e>
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	d06e      	beq.n	8010cd6 <put_fat+0x11a>
 8010bf8:	e0c5      	b.n	8010d86 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	61bb      	str	r3, [r7, #24]
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	085b      	lsrs	r3, r3, #1
 8010c02:	69ba      	ldr	r2, [r7, #24]
 8010c04:	4413      	add	r3, r2
 8010c06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6a1a      	ldr	r2, [r3, #32]
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	0a5b      	lsrs	r3, r3, #9
 8010c10:	4413      	add	r3, r2
 8010c12:	4619      	mov	r1, r3
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7ff fe6f 	bl	80108f8 <move_window>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c1e:	7ffb      	ldrb	r3, [r7, #31]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f040 80a9 	bne.w	8010d78 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	1c59      	adds	r1, r3, #1
 8010c30:	61b9      	str	r1, [r7, #24]
 8010c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c36:	4413      	add	r3, r2
 8010c38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	f003 0301 	and.w	r3, r3, #1
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00d      	beq.n	8010c60 <put_fat+0xa4>
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	b25b      	sxtb	r3, r3
 8010c4a:	f003 030f 	and.w	r3, r3, #15
 8010c4e:	b25a      	sxtb	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	b25b      	sxtb	r3, r3
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	b25b      	sxtb	r3, r3
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	e001      	b.n	8010c64 <put_fat+0xa8>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	697a      	ldr	r2, [r7, #20]
 8010c66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6a1a      	ldr	r2, [r3, #32]
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	0a5b      	lsrs	r3, r3, #9
 8010c76:	4413      	add	r3, r2
 8010c78:	4619      	mov	r1, r3
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f7ff fe3c 	bl	80108f8 <move_window>
 8010c80:	4603      	mov	r3, r0
 8010c82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c84:	7ffb      	ldrb	r3, [r7, #31]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d178      	bne.n	8010d7c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c96:	4413      	add	r3, r2
 8010c98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d003      	beq.n	8010cac <put_fat+0xf0>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	091b      	lsrs	r3, r3, #4
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	e00e      	b.n	8010cca <put_fat+0x10e>
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	b25b      	sxtb	r3, r3
 8010cb2:	f023 030f 	bic.w	r3, r3, #15
 8010cb6:	b25a      	sxtb	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	0a1b      	lsrs	r3, r3, #8
 8010cbc:	b25b      	sxtb	r3, r3
 8010cbe:	f003 030f 	and.w	r3, r3, #15
 8010cc2:	b25b      	sxtb	r3, r3
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	b25b      	sxtb	r3, r3
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	70da      	strb	r2, [r3, #3]
			break;
 8010cd4:	e057      	b.n	8010d86 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6a1a      	ldr	r2, [r3, #32]
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	0a1b      	lsrs	r3, r3, #8
 8010cde:	4413      	add	r3, r2
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	f7ff fe08 	bl	80108f8 <move_window>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010cec:	7ffb      	ldrb	r3, [r7, #31]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d146      	bne.n	8010d80 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010d00:	4413      	add	r3, r2
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	b292      	uxth	r2, r2
 8010d06:	4611      	mov	r1, r2
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7ff fb80 	bl	801040e <st_word>
			fs->wflag = 1;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2201      	movs	r2, #1
 8010d12:	70da      	strb	r2, [r3, #3]
			break;
 8010d14:	e037      	b.n	8010d86 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	6a1a      	ldr	r2, [r3, #32]
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	09db      	lsrs	r3, r3, #7
 8010d1e:	4413      	add	r3, r2
 8010d20:	4619      	mov	r1, r3
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7ff fde8 	bl	80108f8 <move_window>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d2c:	7ffb      	ldrb	r3, [r7, #31]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d128      	bne.n	8010d84 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	009b      	lsls	r3, r3, #2
 8010d42:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010d46:	4413      	add	r3, r2
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff fb3d 	bl	80103c8 <ld_dword>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010d54:	4323      	orrs	r3, r4
 8010d56:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010d66:	4413      	add	r3, r2
 8010d68:	6879      	ldr	r1, [r7, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff fb6a 	bl	8010444 <st_dword>
			fs->wflag = 1;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2201      	movs	r2, #1
 8010d74:	70da      	strb	r2, [r3, #3]
			break;
 8010d76:	e006      	b.n	8010d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d78:	bf00      	nop
 8010d7a:	e004      	b.n	8010d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d7c:	bf00      	nop
 8010d7e:	e002      	b.n	8010d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d80:	bf00      	nop
 8010d82:	e000      	b.n	8010d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d84:	bf00      	nop
		}
	}
	return res;
 8010d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3724      	adds	r7, #36	@ 0x24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd90      	pop	{r4, r7, pc}

08010d90 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b088      	sub	sp, #32
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d904      	bls.n	8010db6 <remove_chain+0x26>
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	695b      	ldr	r3, [r3, #20]
 8010db0:	68ba      	ldr	r2, [r7, #8]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d301      	bcc.n	8010dba <remove_chain+0x2a>
 8010db6:	2302      	movs	r3, #2
 8010db8:	e04b      	b.n	8010e52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00c      	beq.n	8010dda <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc4:	6879      	ldr	r1, [r7, #4]
 8010dc6:	69b8      	ldr	r0, [r7, #24]
 8010dc8:	f7ff fef8 	bl	8010bbc <put_fat>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010dd0:	7ffb      	ldrb	r3, [r7, #31]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d001      	beq.n	8010dda <remove_chain+0x4a>
 8010dd6:	7ffb      	ldrb	r3, [r7, #31]
 8010dd8:	e03b      	b.n	8010e52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f7ff fe46 	bl	8010a6e <get_fat>
 8010de2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d031      	beq.n	8010e4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d101      	bne.n	8010df4 <remove_chain+0x64>
 8010df0:	2302      	movs	r3, #2
 8010df2:	e02e      	b.n	8010e52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfa:	d101      	bne.n	8010e00 <remove_chain+0x70>
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	e028      	b.n	8010e52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010e00:	2200      	movs	r2, #0
 8010e02:	68b9      	ldr	r1, [r7, #8]
 8010e04:	69b8      	ldr	r0, [r7, #24]
 8010e06:	f7ff fed9 	bl	8010bbc <put_fat>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010e0e:	7ffb      	ldrb	r3, [r7, #31]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d001      	beq.n	8010e18 <remove_chain+0x88>
 8010e14:	7ffb      	ldrb	r3, [r7, #31]
 8010e16:	e01c      	b.n	8010e52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	691a      	ldr	r2, [r3, #16]
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	3b02      	subs	r3, #2
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d20b      	bcs.n	8010e3e <remove_chain+0xae>
			fs->free_clst++;
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	1c5a      	adds	r2, r3, #1
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	791b      	ldrb	r3, [r3, #4]
 8010e34:	f043 0301 	orr.w	r3, r3, #1
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	695b      	ldr	r3, [r3, #20]
 8010e46:	68ba      	ldr	r2, [r7, #8]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d3c6      	bcc.n	8010dda <remove_chain+0x4a>
 8010e4c:	e000      	b.n	8010e50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010e4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3720      	adds	r7, #32
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b088      	sub	sp, #32
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d10d      	bne.n	8010e8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d004      	beq.n	8010e86 <create_chain+0x2c>
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	695b      	ldr	r3, [r3, #20]
 8010e80:	69ba      	ldr	r2, [r7, #24]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d31b      	bcc.n	8010ebe <create_chain+0x64>
 8010e86:	2301      	movs	r3, #1
 8010e88:	61bb      	str	r3, [r7, #24]
 8010e8a:	e018      	b.n	8010ebe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010e8c:	6839      	ldr	r1, [r7, #0]
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff fded 	bl	8010a6e <get_fat>
 8010e94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d801      	bhi.n	8010ea0 <create_chain+0x46>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	e070      	b.n	8010f82 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea6:	d101      	bne.n	8010eac <create_chain+0x52>
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	e06a      	b.n	8010f82 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	695b      	ldr	r3, [r3, #20]
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d201      	bcs.n	8010eba <create_chain+0x60>
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	e063      	b.n	8010f82 <create_chain+0x128>
		scl = clst;
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	69fa      	ldr	r2, [r7, #28]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d307      	bcc.n	8010ee2 <create_chain+0x88>
				ncl = 2;
 8010ed2:	2302      	movs	r3, #2
 8010ed4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010ed6:	69fa      	ldr	r2, [r7, #28]
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d901      	bls.n	8010ee2 <create_chain+0x88>
 8010ede:	2300      	movs	r3, #0
 8010ee0:	e04f      	b.n	8010f82 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010ee2:	69f9      	ldr	r1, [r7, #28]
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7ff fdc2 	bl	8010a6e <get_fat>
 8010eea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00e      	beq.n	8010f10 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d003      	beq.n	8010f00 <create_chain+0xa6>
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efe:	d101      	bne.n	8010f04 <create_chain+0xaa>
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	e03e      	b.n	8010f82 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010f04:	69fa      	ldr	r2, [r7, #28]
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d1da      	bne.n	8010ec2 <create_chain+0x68>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	e038      	b.n	8010f82 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010f10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010f12:	f04f 32ff 	mov.w	r2, #4294967295
 8010f16:	69f9      	ldr	r1, [r7, #28]
 8010f18:	6938      	ldr	r0, [r7, #16]
 8010f1a:	f7ff fe4f 	bl	8010bbc <put_fat>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d109      	bne.n	8010f3c <create_chain+0xe2>
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d006      	beq.n	8010f3c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010f2e:	69fa      	ldr	r2, [r7, #28]
 8010f30:	6839      	ldr	r1, [r7, #0]
 8010f32:	6938      	ldr	r0, [r7, #16]
 8010f34:	f7ff fe42 	bl	8010bbc <put_fat>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d116      	bne.n	8010f70 <create_chain+0x116>
		fs->last_clst = ncl;
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	691a      	ldr	r2, [r3, #16]
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	695b      	ldr	r3, [r3, #20]
 8010f50:	3b02      	subs	r3, #2
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d804      	bhi.n	8010f60 <create_chain+0x106>
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	691b      	ldr	r3, [r3, #16]
 8010f5a:	1e5a      	subs	r2, r3, #1
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	791b      	ldrb	r3, [r3, #4]
 8010f64:	f043 0301 	orr.w	r3, r3, #1
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	711a      	strb	r2, [r3, #4]
 8010f6e:	e007      	b.n	8010f80 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010f70:	7dfb      	ldrb	r3, [r7, #23]
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d102      	bne.n	8010f7c <create_chain+0x122>
 8010f76:	f04f 33ff 	mov.w	r3, #4294967295
 8010f7a:	e000      	b.n	8010f7e <create_chain+0x124>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010f80:	69fb      	ldr	r3, [r7, #28]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3720      	adds	r7, #32
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010f8a:	b480      	push	{r7}
 8010f8c:	b087      	sub	sp, #28
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	0a5b      	lsrs	r3, r3, #9
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	8952      	ldrh	r2, [r2, #10]
 8010faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	1d1a      	adds	r2, r3, #4
 8010fb4:	613a      	str	r2, [r7, #16]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <clmt_clust+0x3a>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e010      	b.n	8010fe6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010fc4:	697a      	ldr	r2, [r7, #20]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d307      	bcc.n	8010fdc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	617b      	str	r3, [r7, #20]
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	3304      	adds	r3, #4
 8010fd8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010fda:	e7e9      	b.n	8010fb0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010fdc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	4413      	add	r3, r2
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	371c      	adds	r7, #28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr

08010ff2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b086      	sub	sp, #24
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011008:	d204      	bcs.n	8011014 <dir_sdi+0x22>
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	f003 031f 	and.w	r3, r3, #31
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011014:	2302      	movs	r3, #2
 8011016:	e063      	b.n	80110e0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	683a      	ldr	r2, [r7, #0]
 801101c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <dir_sdi+0x46>
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	2b02      	cmp	r3, #2
 8011030:	d902      	bls.n	8011038 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011036:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10c      	bne.n	8011058 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	095b      	lsrs	r3, r3, #5
 8011042:	693a      	ldr	r2, [r7, #16]
 8011044:	8912      	ldrh	r2, [r2, #8]
 8011046:	4293      	cmp	r3, r2
 8011048:	d301      	bcc.n	801104e <dir_sdi+0x5c>
 801104a:	2302      	movs	r3, #2
 801104c:	e048      	b.n	80110e0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	61da      	str	r2, [r3, #28]
 8011056:	e029      	b.n	80110ac <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	895b      	ldrh	r3, [r3, #10]
 801105c:	025b      	lsls	r3, r3, #9
 801105e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011060:	e019      	b.n	8011096 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6979      	ldr	r1, [r7, #20]
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff fd01 	bl	8010a6e <get_fat>
 801106c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011074:	d101      	bne.n	801107a <dir_sdi+0x88>
 8011076:	2301      	movs	r3, #1
 8011078:	e032      	b.n	80110e0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d904      	bls.n	801108a <dir_sdi+0x98>
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	697a      	ldr	r2, [r7, #20]
 8011086:	429a      	cmp	r2, r3
 8011088:	d301      	bcc.n	801108e <dir_sdi+0x9c>
 801108a:	2302      	movs	r3, #2
 801108c:	e028      	b.n	80110e0 <dir_sdi+0xee>
			ofs -= csz;
 801108e:	683a      	ldr	r2, [r7, #0]
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	1ad3      	subs	r3, r2, r3
 8011094:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	429a      	cmp	r2, r3
 801109c:	d2e1      	bcs.n	8011062 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801109e:	6979      	ldr	r1, [r7, #20]
 80110a0:	6938      	ldr	r0, [r7, #16]
 80110a2:	f7ff fcc5 	bl	8010a30 <clust2sect>
 80110a6:	4602      	mov	r2, r0
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	69db      	ldr	r3, [r3, #28]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d101      	bne.n	80110be <dir_sdi+0xcc>
 80110ba:	2302      	movs	r3, #2
 80110bc:	e010      	b.n	80110e0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	69da      	ldr	r2, [r3, #28]
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	0a5b      	lsrs	r3, r3, #9
 80110c6:	441a      	add	r2, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110d8:	441a      	add	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80110de:	2300      	movs	r3, #0
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3718      	adds	r7, #24
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b086      	sub	sp, #24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	695b      	ldr	r3, [r3, #20]
 80110fc:	3320      	adds	r3, #32
 80110fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	69db      	ldr	r3, [r3, #28]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d003      	beq.n	8011110 <dir_next+0x28>
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801110e:	d301      	bcc.n	8011114 <dir_next+0x2c>
 8011110:	2304      	movs	r3, #4
 8011112:	e0aa      	b.n	801126a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801111a:	2b00      	cmp	r3, #0
 801111c:	f040 8098 	bne.w	8011250 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	69db      	ldr	r3, [r3, #28]
 8011124:	1c5a      	adds	r2, r3, #1
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d10b      	bne.n	801114a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	095b      	lsrs	r3, r3, #5
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	8912      	ldrh	r2, [r2, #8]
 801113a:	4293      	cmp	r3, r2
 801113c:	f0c0 8088 	bcc.w	8011250 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	61da      	str	r2, [r3, #28]
 8011146:	2304      	movs	r3, #4
 8011148:	e08f      	b.n	801126a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	0a5b      	lsrs	r3, r3, #9
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	8952      	ldrh	r2, [r2, #10]
 8011152:	3a01      	subs	r2, #1
 8011154:	4013      	ands	r3, r2
 8011156:	2b00      	cmp	r3, #0
 8011158:	d17a      	bne.n	8011250 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	699b      	ldr	r3, [r3, #24]
 8011160:	4619      	mov	r1, r3
 8011162:	4610      	mov	r0, r2
 8011164:	f7ff fc83 	bl	8010a6e <get_fat>
 8011168:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d801      	bhi.n	8011174 <dir_next+0x8c>
 8011170:	2302      	movs	r3, #2
 8011172:	e07a      	b.n	801126a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801117a:	d101      	bne.n	8011180 <dir_next+0x98>
 801117c:	2301      	movs	r3, #1
 801117e:	e074      	b.n	801126a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	429a      	cmp	r2, r3
 8011188:	d358      	bcc.n	801123c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d104      	bne.n	801119a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	61da      	str	r2, [r3, #28]
 8011196:	2304      	movs	r3, #4
 8011198:	e067      	b.n	801126a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	699b      	ldr	r3, [r3, #24]
 80111a0:	4619      	mov	r1, r3
 80111a2:	4610      	mov	r0, r2
 80111a4:	f7ff fe59 	bl	8010e5a <create_chain>
 80111a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <dir_next+0xcc>
 80111b0:	2307      	movs	r3, #7
 80111b2:	e05a      	b.n	801126a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d101      	bne.n	80111be <dir_next+0xd6>
 80111ba:	2302      	movs	r3, #2
 80111bc:	e055      	b.n	801126a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c4:	d101      	bne.n	80111ca <dir_next+0xe2>
 80111c6:	2301      	movs	r3, #1
 80111c8:	e04f      	b.n	801126a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80111ca:	68f8      	ldr	r0, [r7, #12]
 80111cc:	f7ff fb50 	bl	8010870 <sync_window>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d001      	beq.n	80111da <dir_next+0xf2>
 80111d6:	2301      	movs	r3, #1
 80111d8:	e047      	b.n	801126a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3330      	adds	r3, #48	@ 0x30
 80111de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111e2:	2100      	movs	r1, #0
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff f97a 	bl	80104de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80111ea:	2300      	movs	r3, #0
 80111ec:	613b      	str	r3, [r7, #16]
 80111ee:	6979      	ldr	r1, [r7, #20]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f7ff fc1d 	bl	8010a30 <clust2sect>
 80111f6:	4602      	mov	r2, r0
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80111fc:	e012      	b.n	8011224 <dir_next+0x13c>
						fs->wflag = 1;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2201      	movs	r2, #1
 8011202:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f7ff fb33 	bl	8010870 <sync_window>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <dir_next+0x12c>
 8011210:	2301      	movs	r3, #1
 8011212:	e02a      	b.n	801126a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	3301      	adds	r3, #1
 8011218:	613b      	str	r3, [r7, #16]
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	895b      	ldrh	r3, [r3, #10]
 8011228:	461a      	mov	r2, r3
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	4293      	cmp	r3, r2
 801122e:	d3e6      	bcc.n	80111fe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	1ad2      	subs	r2, r2, r3
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	697a      	ldr	r2, [r7, #20]
 8011240:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011242:	6979      	ldr	r1, [r7, #20]
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f7ff fbf3 	bl	8010a30 <clust2sect>
 801124a:	4602      	mov	r2, r0
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011262:	441a      	add	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3718      	adds	r7, #24
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011282:	2100      	movs	r1, #0
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff feb4 	bl	8010ff2 <dir_sdi>
 801128a:	4603      	mov	r3, r0
 801128c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801128e:	7dfb      	ldrb	r3, [r7, #23]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d12b      	bne.n	80112ec <dir_alloc+0x7a>
		n = 0;
 8011294:	2300      	movs	r3, #0
 8011296:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	69db      	ldr	r3, [r3, #28]
 801129c:	4619      	mov	r1, r3
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f7ff fb2a 	bl	80108f8 <move_window>
 80112a4:	4603      	mov	r3, r0
 80112a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80112a8:	7dfb      	ldrb	r3, [r7, #23]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d11d      	bne.n	80112ea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6a1b      	ldr	r3, [r3, #32]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	2be5      	cmp	r3, #229	@ 0xe5
 80112b6:	d004      	beq.n	80112c2 <dir_alloc+0x50>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a1b      	ldr	r3, [r3, #32]
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d107      	bne.n	80112d2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	3301      	adds	r3, #1
 80112c6:	613b      	str	r3, [r7, #16]
 80112c8:	693a      	ldr	r2, [r7, #16]
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d102      	bne.n	80112d6 <dir_alloc+0x64>
 80112d0:	e00c      	b.n	80112ec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80112d2:	2300      	movs	r3, #0
 80112d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80112d6:	2101      	movs	r1, #1
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7ff ff05 	bl	80110e8 <dir_next>
 80112de:	4603      	mov	r3, r0
 80112e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d0d7      	beq.n	8011298 <dir_alloc+0x26>
 80112e8:	e000      	b.n	80112ec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80112ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80112ec:	7dfb      	ldrb	r3, [r7, #23]
 80112ee:	2b04      	cmp	r3, #4
 80112f0:	d101      	bne.n	80112f6 <dir_alloc+0x84>
 80112f2:	2307      	movs	r3, #7
 80112f4:	75fb      	strb	r3, [r7, #23]
	return res;
 80112f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3718      	adds	r7, #24
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	331a      	adds	r3, #26
 801130e:	4618      	mov	r0, r3
 8011310:	f7ff f842 	bl	8010398 <ld_word>
 8011314:	4603      	mov	r3, r0
 8011316:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	2b03      	cmp	r3, #3
 801131e:	d109      	bne.n	8011334 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	3314      	adds	r3, #20
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff f837 	bl	8010398 <ld_word>
 801132a:	4603      	mov	r3, r0
 801132c:	041b      	lsls	r3, r3, #16
 801132e:	68fa      	ldr	r2, [r7, #12]
 8011330:	4313      	orrs	r3, r2
 8011332:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011334:	68fb      	ldr	r3, [r7, #12]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b084      	sub	sp, #16
 8011342:	af00      	add	r7, sp, #0
 8011344:	60f8      	str	r0, [r7, #12]
 8011346:	60b9      	str	r1, [r7, #8]
 8011348:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	331a      	adds	r3, #26
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	b292      	uxth	r2, r2
 8011352:	4611      	mov	r1, r2
 8011354:	4618      	mov	r0, r3
 8011356:	f7ff f85a 	bl	801040e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	2b03      	cmp	r3, #3
 8011360:	d109      	bne.n	8011376 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	f103 0214 	add.w	r2, r3, #20
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	0c1b      	lsrs	r3, r3, #16
 801136c:	b29b      	uxth	r3, r3
 801136e:	4619      	mov	r1, r3
 8011370:	4610      	mov	r0, r2
 8011372:	f7ff f84c 	bl	801040e <st_word>
	}
}
 8011376:	bf00      	nop
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801137e:	b580      	push	{r7, lr}
 8011380:	b086      	sub	sp, #24
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
 8011386:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011388:	2304      	movs	r3, #4
 801138a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011392:	e03c      	b.n	801140e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	69db      	ldr	r3, [r3, #28]
 8011398:	4619      	mov	r1, r3
 801139a:	6938      	ldr	r0, [r7, #16]
 801139c:	f7ff faac 	bl	80108f8 <move_window>
 80113a0:	4603      	mov	r3, r0
 80113a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d136      	bne.n	8011418 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a1b      	ldr	r3, [r3, #32]
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80113b2:	7bfb      	ldrb	r3, [r7, #15]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d102      	bne.n	80113be <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80113b8:	2304      	movs	r3, #4
 80113ba:	75fb      	strb	r3, [r7, #23]
 80113bc:	e031      	b.n	8011422 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6a1b      	ldr	r3, [r3, #32]
 80113c2:	330b      	adds	r3, #11
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113ca:	73bb      	strb	r3, [r7, #14]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7bba      	ldrb	r2, [r7, #14]
 80113d0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	2be5      	cmp	r3, #229	@ 0xe5
 80113d6:	d011      	beq.n	80113fc <dir_read+0x7e>
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
 80113da:	2b2e      	cmp	r3, #46	@ 0x2e
 80113dc:	d00e      	beq.n	80113fc <dir_read+0x7e>
 80113de:	7bbb      	ldrb	r3, [r7, #14]
 80113e0:	2b0f      	cmp	r3, #15
 80113e2:	d00b      	beq.n	80113fc <dir_read+0x7e>
 80113e4:	7bbb      	ldrb	r3, [r7, #14]
 80113e6:	f023 0320 	bic.w	r3, r3, #32
 80113ea:	2b08      	cmp	r3, #8
 80113ec:	bf0c      	ite	eq
 80113ee:	2301      	moveq	r3, #1
 80113f0:	2300      	movne	r3, #0
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	461a      	mov	r2, r3
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d00f      	beq.n	801141c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80113fc:	2100      	movs	r1, #0
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f7ff fe72 	bl	80110e8 <dir_next>
 8011404:	4603      	mov	r3, r0
 8011406:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011408:	7dfb      	ldrb	r3, [r7, #23]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d108      	bne.n	8011420 <dir_read+0xa2>
	while (dp->sect) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	69db      	ldr	r3, [r3, #28]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d1be      	bne.n	8011394 <dir_read+0x16>
 8011416:	e004      	b.n	8011422 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011418:	bf00      	nop
 801141a:	e002      	b.n	8011422 <dir_read+0xa4>
				break;
 801141c:	bf00      	nop
 801141e:	e000      	b.n	8011422 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011420:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011422:	7dfb      	ldrb	r3, [r7, #23]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <dir_read+0xb0>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	61da      	str	r2, [r3, #28]
	return res;
 801142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b086      	sub	sp, #24
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011446:	2100      	movs	r1, #0
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7ff fdd2 	bl	8010ff2 <dir_sdi>
 801144e:	4603      	mov	r3, r0
 8011450:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011452:	7dfb      	ldrb	r3, [r7, #23]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <dir_find+0x24>
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	e03e      	b.n	80114da <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	69db      	ldr	r3, [r3, #28]
 8011460:	4619      	mov	r1, r3
 8011462:	6938      	ldr	r0, [r7, #16]
 8011464:	f7ff fa48 	bl	80108f8 <move_window>
 8011468:	4603      	mov	r3, r0
 801146a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801146c:	7dfb      	ldrb	r3, [r7, #23]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d12f      	bne.n	80114d2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801147a:	7bfb      	ldrb	r3, [r7, #15]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d102      	bne.n	8011486 <dir_find+0x4e>
 8011480:	2304      	movs	r3, #4
 8011482:	75fb      	strb	r3, [r7, #23]
 8011484:	e028      	b.n	80114d8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	330b      	adds	r3, #11
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011492:	b2da      	uxtb	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6a1b      	ldr	r3, [r3, #32]
 801149c:	330b      	adds	r3, #11
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	f003 0308 	and.w	r3, r3, #8
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10a      	bne.n	80114be <dir_find+0x86>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6a18      	ldr	r0, [r3, #32]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	3324      	adds	r3, #36	@ 0x24
 80114b0:	220b      	movs	r2, #11
 80114b2:	4619      	mov	r1, r3
 80114b4:	f7ff f82e 	bl	8010514 <mem_cmp>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00b      	beq.n	80114d6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80114be:	2100      	movs	r1, #0
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7ff fe11 	bl	80110e8 <dir_next>
 80114c6:	4603      	mov	r3, r0
 80114c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80114ca:	7dfb      	ldrb	r3, [r7, #23]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d0c5      	beq.n	801145c <dir_find+0x24>
 80114d0:	e002      	b.n	80114d8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80114d2:	bf00      	nop
 80114d4:	e000      	b.n	80114d8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80114d6:	bf00      	nop

	return res;
 80114d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3718      	adds	r7, #24
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b084      	sub	sp, #16
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80114f0:	2101      	movs	r1, #1
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f7ff febd 	bl	8011272 <dir_alloc>
 80114f8:	4603      	mov	r3, r0
 80114fa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80114fc:	7bfb      	ldrb	r3, [r7, #15]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d11c      	bne.n	801153c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	69db      	ldr	r3, [r3, #28]
 8011506:	4619      	mov	r1, r3
 8011508:	68b8      	ldr	r0, [r7, #8]
 801150a:	f7ff f9f5 	bl	80108f8 <move_window>
 801150e:	4603      	mov	r3, r0
 8011510:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011512:	7bfb      	ldrb	r3, [r7, #15]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d111      	bne.n	801153c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a1b      	ldr	r3, [r3, #32]
 801151c:	2220      	movs	r2, #32
 801151e:	2100      	movs	r1, #0
 8011520:	4618      	mov	r0, r3
 8011522:	f7fe ffdc 	bl	80104de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a18      	ldr	r0, [r3, #32]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	3324      	adds	r3, #36	@ 0x24
 801152e:	220b      	movs	r2, #11
 8011530:	4619      	mov	r1, r3
 8011532:	f7fe ffb3 	bl	801049c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2201      	movs	r2, #1
 801153a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801153c:	7bfb      	ldrb	r3, [r7, #15]
}
 801153e:	4618      	mov	r0, r3
 8011540:	3710      	adds	r7, #16
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}

08011546 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011546:	b580      	push	{r7, lr}
 8011548:	b084      	sub	sp, #16
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	69db      	ldr	r3, [r3, #28]
 8011558:	4619      	mov	r1, r3
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f7ff f9cc 	bl	80108f8 <move_window>
 8011560:	4603      	mov	r3, r0
 8011562:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8011564:	7afb      	ldrb	r3, [r7, #11]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d106      	bne.n	8011578 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	22e5      	movs	r2, #229	@ 0xe5
 8011570:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2201      	movs	r2, #1
 8011576:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011578:	7afb      	ldrb	r3, [r7, #11]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}

08011582 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011582:	b580      	push	{r7, lr}
 8011584:	b086      	sub	sp, #24
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
 801158a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	2200      	movs	r2, #0
 8011590:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	69db      	ldr	r3, [r3, #28]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d04f      	beq.n	801163a <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	613b      	str	r3, [r7, #16]
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80115a2:	e022      	b.n	80115ea <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6a1a      	ldr	r2, [r3, #32]
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	1c59      	adds	r1, r3, #1
 80115ac:	6179      	str	r1, [r7, #20]
 80115ae:	4413      	add	r3, r2
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80115b4:	7bfb      	ldrb	r3, [r7, #15]
 80115b6:	2b20      	cmp	r3, #32
 80115b8:	d016      	beq.n	80115e8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80115ba:	7bfb      	ldrb	r3, [r7, #15]
 80115bc:	2b05      	cmp	r3, #5
 80115be:	d101      	bne.n	80115c4 <get_fileinfo+0x42>
 80115c0:	23e5      	movs	r3, #229	@ 0xe5
 80115c2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	2b09      	cmp	r3, #9
 80115c8:	d106      	bne.n	80115d8 <get_fileinfo+0x56>
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	1c5a      	adds	r2, r3, #1
 80115ce:	613a      	str	r2, [r7, #16]
 80115d0:	683a      	ldr	r2, [r7, #0]
 80115d2:	4413      	add	r3, r2
 80115d4:	222e      	movs	r2, #46	@ 0x2e
 80115d6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	613a      	str	r2, [r7, #16]
 80115de:	683a      	ldr	r2, [r7, #0]
 80115e0:	4413      	add	r3, r2
 80115e2:	7bfa      	ldrb	r2, [r7, #15]
 80115e4:	725a      	strb	r2, [r3, #9]
 80115e6:	e000      	b.n	80115ea <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80115e8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2b0a      	cmp	r3, #10
 80115ee:	d9d9      	bls.n	80115a4 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80115f0:	683a      	ldr	r2, [r7, #0]
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	4413      	add	r3, r2
 80115f6:	3309      	adds	r3, #9
 80115f8:	2200      	movs	r2, #0
 80115fa:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6a1b      	ldr	r3, [r3, #32]
 8011600:	7ada      	ldrb	r2, [r3, #11]
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6a1b      	ldr	r3, [r3, #32]
 801160a:	331c      	adds	r3, #28
 801160c:	4618      	mov	r0, r3
 801160e:	f7fe fedb 	bl	80103c8 <ld_dword>
 8011612:	4602      	mov	r2, r0
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a1b      	ldr	r3, [r3, #32]
 801161c:	3316      	adds	r3, #22
 801161e:	4618      	mov	r0, r3
 8011620:	f7fe fed2 	bl	80103c8 <ld_dword>
 8011624:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	b29a      	uxth	r2, r3
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	80da      	strh	r2, [r3, #6]
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	0c1b      	lsrs	r3, r3, #16
 8011632:	b29a      	uxth	r2, r3
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	809a      	strh	r2, [r3, #4]
 8011638:	e000      	b.n	801163c <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801163a:	bf00      	nop
}
 801163c:	3718      	adds	r7, #24
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
	...

08011644 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b088      	sub	sp, #32
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	60fb      	str	r3, [r7, #12]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	3324      	adds	r3, #36	@ 0x24
 8011658:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801165a:	220b      	movs	r2, #11
 801165c:	2120      	movs	r1, #32
 801165e:	68b8      	ldr	r0, [r7, #8]
 8011660:	f7fe ff3d 	bl	80104de <mem_set>
	si = i = 0; ni = 8;
 8011664:	2300      	movs	r3, #0
 8011666:	613b      	str	r3, [r7, #16]
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	61fb      	str	r3, [r7, #28]
 801166c:	2308      	movs	r3, #8
 801166e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	61fa      	str	r2, [r7, #28]
 8011676:	68fa      	ldr	r2, [r7, #12]
 8011678:	4413      	add	r3, r2
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801167e:	7efb      	ldrb	r3, [r7, #27]
 8011680:	2b20      	cmp	r3, #32
 8011682:	d94e      	bls.n	8011722 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011684:	7efb      	ldrb	r3, [r7, #27]
 8011686:	2b2f      	cmp	r3, #47	@ 0x2f
 8011688:	d006      	beq.n	8011698 <create_name+0x54>
 801168a:	7efb      	ldrb	r3, [r7, #27]
 801168c:	2b5c      	cmp	r3, #92	@ 0x5c
 801168e:	d110      	bne.n	80116b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011690:	e002      	b.n	8011698 <create_name+0x54>
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	3301      	adds	r3, #1
 8011696:	61fb      	str	r3, [r7, #28]
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	4413      	add	r3, r2
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80116a2:	d0f6      	beq.n	8011692 <create_name+0x4e>
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	4413      	add	r3, r2
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80116ae:	d0f0      	beq.n	8011692 <create_name+0x4e>
			break;
 80116b0:	e038      	b.n	8011724 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80116b2:	7efb      	ldrb	r3, [r7, #27]
 80116b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80116b6:	d003      	beq.n	80116c0 <create_name+0x7c>
 80116b8:	693a      	ldr	r2, [r7, #16]
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d30c      	bcc.n	80116da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b0b      	cmp	r3, #11
 80116c4:	d002      	beq.n	80116cc <create_name+0x88>
 80116c6:	7efb      	ldrb	r3, [r7, #27]
 80116c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80116ca:	d001      	beq.n	80116d0 <create_name+0x8c>
 80116cc:	2306      	movs	r3, #6
 80116ce:	e044      	b.n	801175a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80116d0:	2308      	movs	r3, #8
 80116d2:	613b      	str	r3, [r7, #16]
 80116d4:	230b      	movs	r3, #11
 80116d6:	617b      	str	r3, [r7, #20]
			continue;
 80116d8:	e022      	b.n	8011720 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80116da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	da04      	bge.n	80116ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80116e2:	7efb      	ldrb	r3, [r7, #27]
 80116e4:	3b80      	subs	r3, #128	@ 0x80
 80116e6:	4a1f      	ldr	r2, [pc, #124]	@ (8011764 <create_name+0x120>)
 80116e8:	5cd3      	ldrb	r3, [r2, r3]
 80116ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80116ec:	7efb      	ldrb	r3, [r7, #27]
 80116ee:	4619      	mov	r1, r3
 80116f0:	481d      	ldr	r0, [pc, #116]	@ (8011768 <create_name+0x124>)
 80116f2:	f7fe ff36 	bl	8010562 <chk_chr>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d001      	beq.n	8011700 <create_name+0xbc>
 80116fc:	2306      	movs	r3, #6
 80116fe:	e02c      	b.n	801175a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011700:	7efb      	ldrb	r3, [r7, #27]
 8011702:	2b60      	cmp	r3, #96	@ 0x60
 8011704:	d905      	bls.n	8011712 <create_name+0xce>
 8011706:	7efb      	ldrb	r3, [r7, #27]
 8011708:	2b7a      	cmp	r3, #122	@ 0x7a
 801170a:	d802      	bhi.n	8011712 <create_name+0xce>
 801170c:	7efb      	ldrb	r3, [r7, #27]
 801170e:	3b20      	subs	r3, #32
 8011710:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	1c5a      	adds	r2, r3, #1
 8011716:	613a      	str	r2, [r7, #16]
 8011718:	68ba      	ldr	r2, [r7, #8]
 801171a:	4413      	add	r3, r2
 801171c:	7efa      	ldrb	r2, [r7, #27]
 801171e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011720:	e7a6      	b.n	8011670 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011722:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	441a      	add	r2, r3
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d101      	bne.n	8011738 <create_name+0xf4>
 8011734:	2306      	movs	r3, #6
 8011736:	e010      	b.n	801175a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	2be5      	cmp	r3, #229	@ 0xe5
 801173e:	d102      	bne.n	8011746 <create_name+0x102>
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	2205      	movs	r2, #5
 8011744:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011746:	7efb      	ldrb	r3, [r7, #27]
 8011748:	2b20      	cmp	r3, #32
 801174a:	d801      	bhi.n	8011750 <create_name+0x10c>
 801174c:	2204      	movs	r2, #4
 801174e:	e000      	b.n	8011752 <create_name+0x10e>
 8011750:	2200      	movs	r2, #0
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	330b      	adds	r3, #11
 8011756:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011758:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801175a:	4618      	mov	r0, r3
 801175c:	3720      	adds	r7, #32
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	08014f14 	.word	0x08014f14
 8011768:	08014e34 	.word	0x08014e34

0801176c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011780:	e002      	b.n	8011788 <follow_path+0x1c>
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	3301      	adds	r3, #1
 8011786:	603b      	str	r3, [r7, #0]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b2f      	cmp	r3, #47	@ 0x2f
 801178e:	d0f8      	beq.n	8011782 <follow_path+0x16>
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	2b5c      	cmp	r3, #92	@ 0x5c
 8011796:	d0f4      	beq.n	8011782 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	2200      	movs	r2, #0
 801179c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b1f      	cmp	r3, #31
 80117a4:	d80a      	bhi.n	80117bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2280      	movs	r2, #128	@ 0x80
 80117aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80117ae:	2100      	movs	r1, #0
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7ff fc1e 	bl	8010ff2 <dir_sdi>
 80117b6:	4603      	mov	r3, r0
 80117b8:	75fb      	strb	r3, [r7, #23]
 80117ba:	e043      	b.n	8011844 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80117bc:	463b      	mov	r3, r7
 80117be:	4619      	mov	r1, r3
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f7ff ff3f 	bl	8011644 <create_name>
 80117c6:	4603      	mov	r3, r0
 80117c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80117ca:	7dfb      	ldrb	r3, [r7, #23]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d134      	bne.n	801183a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f7ff fe31 	bl	8011438 <dir_find>
 80117d6:	4603      	mov	r3, r0
 80117d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80117e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80117e2:	7dfb      	ldrb	r3, [r7, #23]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00a      	beq.n	80117fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80117e8:	7dfb      	ldrb	r3, [r7, #23]
 80117ea:	2b04      	cmp	r3, #4
 80117ec:	d127      	bne.n	801183e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80117ee:	7afb      	ldrb	r3, [r7, #11]
 80117f0:	f003 0304 	and.w	r3, r3, #4
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d122      	bne.n	801183e <follow_path+0xd2>
 80117f8:	2305      	movs	r3, #5
 80117fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80117fc:	e01f      	b.n	801183e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80117fe:	7afb      	ldrb	r3, [r7, #11]
 8011800:	f003 0304 	and.w	r3, r3, #4
 8011804:	2b00      	cmp	r3, #0
 8011806:	d11c      	bne.n	8011842 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	799b      	ldrb	r3, [r3, #6]
 801180c:	f003 0310 	and.w	r3, r3, #16
 8011810:	2b00      	cmp	r3, #0
 8011812:	d102      	bne.n	801181a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011814:	2305      	movs	r3, #5
 8011816:	75fb      	strb	r3, [r7, #23]
 8011818:	e014      	b.n	8011844 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	695b      	ldr	r3, [r3, #20]
 8011824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011828:	4413      	add	r3, r2
 801182a:	4619      	mov	r1, r3
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f7ff fd67 	bl	8011300 <ld_clust>
 8011832:	4602      	mov	r2, r0
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011838:	e7c0      	b.n	80117bc <follow_path+0x50>
			if (res != FR_OK) break;
 801183a:	bf00      	nop
 801183c:	e002      	b.n	8011844 <follow_path+0xd8>
				break;
 801183e:	bf00      	nop
 8011840:	e000      	b.n	8011844 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011842:	bf00      	nop
			}
		}
	}

	return res;
 8011844:	7dfb      	ldrb	r3, [r7, #23]
}
 8011846:	4618      	mov	r0, r3
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801184e:	b480      	push	{r7}
 8011850:	b087      	sub	sp, #28
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011856:	f04f 33ff 	mov.w	r3, #4294967295
 801185a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d031      	beq.n	80118c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	617b      	str	r3, [r7, #20]
 801186a:	e002      	b.n	8011872 <get_ldnumber+0x24>
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	3301      	adds	r3, #1
 8011870:	617b      	str	r3, [r7, #20]
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	2b20      	cmp	r3, #32
 8011878:	d903      	bls.n	8011882 <get_ldnumber+0x34>
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011880:	d1f4      	bne.n	801186c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2b3a      	cmp	r3, #58	@ 0x3a
 8011888:	d11c      	bne.n	80118c4 <get_ldnumber+0x76>
			tp = *path;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	1c5a      	adds	r2, r3, #1
 8011894:	60fa      	str	r2, [r7, #12]
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	3b30      	subs	r3, #48	@ 0x30
 801189a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	2b09      	cmp	r3, #9
 80118a0:	d80e      	bhi.n	80118c0 <get_ldnumber+0x72>
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d10a      	bne.n	80118c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d107      	bne.n	80118c0 <get_ldnumber+0x72>
					vol = (int)i;
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	3301      	adds	r3, #1
 80118b8:	617b      	str	r3, [r7, #20]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	697a      	ldr	r2, [r7, #20]
 80118be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	e002      	b.n	80118ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80118c4:	2300      	movs	r3, #0
 80118c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80118c8:	693b      	ldr	r3, [r7, #16]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	371c      	adds	r7, #28
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr
	...

080118d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	70da      	strb	r2, [r3, #3]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f04f 32ff 	mov.w	r2, #4294967295
 80118ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7ff f800 	bl	80108f8 <move_window>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <check_fs+0x2a>
 80118fe:	2304      	movs	r3, #4
 8011900:	e038      	b.n	8011974 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	3330      	adds	r3, #48	@ 0x30
 8011906:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801190a:	4618      	mov	r0, r3
 801190c:	f7fe fd44 	bl	8010398 <ld_word>
 8011910:	4603      	mov	r3, r0
 8011912:	461a      	mov	r2, r3
 8011914:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011918:	429a      	cmp	r2, r3
 801191a:	d001      	beq.n	8011920 <check_fs+0x48>
 801191c:	2303      	movs	r3, #3
 801191e:	e029      	b.n	8011974 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011926:	2be9      	cmp	r3, #233	@ 0xe9
 8011928:	d009      	beq.n	801193e <check_fs+0x66>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011930:	2beb      	cmp	r3, #235	@ 0xeb
 8011932:	d11e      	bne.n	8011972 <check_fs+0x9a>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801193a:	2b90      	cmp	r3, #144	@ 0x90
 801193c:	d119      	bne.n	8011972 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	3330      	adds	r3, #48	@ 0x30
 8011942:	3336      	adds	r3, #54	@ 0x36
 8011944:	4618      	mov	r0, r3
 8011946:	f7fe fd3f 	bl	80103c8 <ld_dword>
 801194a:	4603      	mov	r3, r0
 801194c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011950:	4a0a      	ldr	r2, [pc, #40]	@ (801197c <check_fs+0xa4>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d101      	bne.n	801195a <check_fs+0x82>
 8011956:	2300      	movs	r3, #0
 8011958:	e00c      	b.n	8011974 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	3330      	adds	r3, #48	@ 0x30
 801195e:	3352      	adds	r3, #82	@ 0x52
 8011960:	4618      	mov	r0, r3
 8011962:	f7fe fd31 	bl	80103c8 <ld_dword>
 8011966:	4603      	mov	r3, r0
 8011968:	4a05      	ldr	r2, [pc, #20]	@ (8011980 <check_fs+0xa8>)
 801196a:	4293      	cmp	r3, r2
 801196c:	d101      	bne.n	8011972 <check_fs+0x9a>
 801196e:	2300      	movs	r3, #0
 8011970:	e000      	b.n	8011974 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011972:	2302      	movs	r3, #2
}
 8011974:	4618      	mov	r0, r3
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	00544146 	.word	0x00544146
 8011980:	33544146 	.word	0x33544146

08011984 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b096      	sub	sp, #88	@ 0x58
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	4613      	mov	r3, r2
 8011990:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	2200      	movs	r2, #0
 8011996:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f7ff ff58 	bl	801184e <get_ldnumber>
 801199e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80119a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	da01      	bge.n	80119aa <find_volume+0x26>
 80119a6:	230b      	movs	r3, #11
 80119a8:	e22d      	b.n	8011e06 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80119aa:	4aa1      	ldr	r2, [pc, #644]	@ (8011c30 <find_volume+0x2ac>)
 80119ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80119b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d101      	bne.n	80119be <find_volume+0x3a>
 80119ba:	230c      	movs	r3, #12
 80119bc:	e223      	b.n	8011e06 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80119c4:	79fb      	ldrb	r3, [r7, #7]
 80119c6:	f023 0301 	bic.w	r3, r3, #1
 80119ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80119cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d01a      	beq.n	8011a0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80119d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d6:	785b      	ldrb	r3, [r3, #1]
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe fc3d 	bl	8010258 <disk_status>
 80119de:	4603      	mov	r3, r0
 80119e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80119e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10c      	bne.n	8011a0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80119f0:	79fb      	ldrb	r3, [r7, #7]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d007      	beq.n	8011a06 <find_volume+0x82>
 80119f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119fa:	f003 0304 	and.w	r3, r3, #4
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d001      	beq.n	8011a06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011a02:	230a      	movs	r3, #10
 8011a04:	e1ff      	b.n	8011e06 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011a06:	2300      	movs	r3, #0
 8011a08:	e1fd      	b.n	8011e06 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1a:	785b      	ldrb	r3, [r3, #1]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fe fc35 	bl	801028c <disk_initialize>
 8011a22:	4603      	mov	r3, r0
 8011a24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011a28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011a2c:	f003 0301 	and.w	r3, r3, #1
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d001      	beq.n	8011a38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011a34:	2303      	movs	r3, #3
 8011a36:	e1e6      	b.n	8011e06 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011a38:	79fb      	ldrb	r3, [r7, #7]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d007      	beq.n	8011a4e <find_volume+0xca>
 8011a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011a42:	f003 0304 	and.w	r3, r3, #4
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d001      	beq.n	8011a4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011a4a:	230a      	movs	r3, #10
 8011a4c:	e1db      	b.n	8011e06 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011a52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a56:	f7ff ff3f 	bl	80118d8 <check_fs>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011a60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	d149      	bne.n	8011afc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011a68:	2300      	movs	r3, #0
 8011a6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a6c:	e01e      	b.n	8011aac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a76:	011b      	lsls	r3, r3, #4
 8011a78:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011a7c:	4413      	add	r3, r2
 8011a7e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a82:	3304      	adds	r3, #4
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d006      	beq.n	8011a98 <find_volume+0x114>
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a8c:	3308      	adds	r3, #8
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fe fc9a 	bl	80103c8 <ld_dword>
 8011a94:	4602      	mov	r2, r0
 8011a96:	e000      	b.n	8011a9a <find_volume+0x116>
 8011a98:	2200      	movs	r2, #0
 8011a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	3358      	adds	r3, #88	@ 0x58
 8011aa0:	443b      	add	r3, r7
 8011aa2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8011aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011aae:	2b03      	cmp	r3, #3
 8011ab0:	d9dd      	bls.n	8011a6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d002      	beq.n	8011ac2 <find_volume+0x13e>
 8011abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	3358      	adds	r3, #88	@ 0x58
 8011ac8:	443b      	add	r3, r7
 8011aca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011ace:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d005      	beq.n	8011ae2 <find_volume+0x15e>
 8011ad6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011ad8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011ada:	f7ff fefd 	bl	80118d8 <check_fs>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	e000      	b.n	8011ae4 <find_volume+0x160>
 8011ae2:	2303      	movs	r3, #3
 8011ae4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d905      	bls.n	8011afc <find_volume+0x178>
 8011af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011af2:	3301      	adds	r3, #1
 8011af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8011af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011af8:	2b03      	cmp	r3, #3
 8011afa:	d9e2      	bls.n	8011ac2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011afc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011b00:	2b04      	cmp	r3, #4
 8011b02:	d101      	bne.n	8011b08 <find_volume+0x184>
 8011b04:	2301      	movs	r3, #1
 8011b06:	e17e      	b.n	8011e06 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011b08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d901      	bls.n	8011b14 <find_volume+0x190>
 8011b10:	230d      	movs	r3, #13
 8011b12:	e178      	b.n	8011e06 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b16:	3330      	adds	r3, #48	@ 0x30
 8011b18:	330b      	adds	r3, #11
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fe fc3c 	bl	8010398 <ld_word>
 8011b20:	4603      	mov	r3, r0
 8011b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b26:	d001      	beq.n	8011b2c <find_volume+0x1a8>
 8011b28:	230d      	movs	r3, #13
 8011b2a:	e16c      	b.n	8011e06 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2e:	3330      	adds	r3, #48	@ 0x30
 8011b30:	3316      	adds	r3, #22
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fe fc30 	bl	8010398 <ld_word>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d106      	bne.n	8011b50 <find_volume+0x1cc>
 8011b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b44:	3330      	adds	r3, #48	@ 0x30
 8011b46:	3324      	adds	r3, #36	@ 0x24
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fe fc3d 	bl	80103c8 <ld_dword>
 8011b4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b54:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b58:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8011b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b62:	789b      	ldrb	r3, [r3, #2]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d005      	beq.n	8011b74 <find_volume+0x1f0>
 8011b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6a:	789b      	ldrb	r3, [r3, #2]
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	d001      	beq.n	8011b74 <find_volume+0x1f0>
 8011b70:	230d      	movs	r3, #13
 8011b72:	e148      	b.n	8011e06 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b76:	789b      	ldrb	r3, [r3, #2]
 8011b78:	461a      	mov	r2, r3
 8011b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b7c:	fb02 f303 	mul.w	r3, r2, r3
 8011b80:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011b88:	461a      	mov	r2, r3
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b90:	895b      	ldrh	r3, [r3, #10]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d008      	beq.n	8011ba8 <find_volume+0x224>
 8011b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b98:	895b      	ldrh	r3, [r3, #10]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b9e:	895b      	ldrh	r3, [r3, #10]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	4013      	ands	r3, r2
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d001      	beq.n	8011bac <find_volume+0x228>
 8011ba8:	230d      	movs	r3, #13
 8011baa:	e12c      	b.n	8011e06 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bae:	3330      	adds	r3, #48	@ 0x30
 8011bb0:	3311      	adds	r3, #17
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fe fbf0 	bl	8010398 <ld_word>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	461a      	mov	r2, r3
 8011bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc2:	891b      	ldrh	r3, [r3, #8]
 8011bc4:	f003 030f 	and.w	r3, r3, #15
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d001      	beq.n	8011bd2 <find_volume+0x24e>
 8011bce:	230d      	movs	r3, #13
 8011bd0:	e119      	b.n	8011e06 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd4:	3330      	adds	r3, #48	@ 0x30
 8011bd6:	3313      	adds	r3, #19
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7fe fbdd 	bl	8010398 <ld_word>
 8011bde:	4603      	mov	r3, r0
 8011be0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d106      	bne.n	8011bf6 <find_volume+0x272>
 8011be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bea:	3330      	adds	r3, #48	@ 0x30
 8011bec:	3320      	adds	r3, #32
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fbea 	bl	80103c8 <ld_dword>
 8011bf4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf8:	3330      	adds	r3, #48	@ 0x30
 8011bfa:	330e      	adds	r3, #14
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fe fbcb 	bl	8010398 <ld_word>
 8011c02:	4603      	mov	r3, r0
 8011c04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011c06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <find_volume+0x28c>
 8011c0c:	230d      	movs	r3, #13
 8011c0e:	e0fa      	b.n	8011e06 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011c10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c14:	4413      	add	r3, r2
 8011c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c18:	8912      	ldrh	r2, [r2, #8]
 8011c1a:	0912      	lsrs	r2, r2, #4
 8011c1c:	b292      	uxth	r2, r2
 8011c1e:	4413      	add	r3, r2
 8011c20:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d204      	bcs.n	8011c34 <find_volume+0x2b0>
 8011c2a:	230d      	movs	r3, #13
 8011c2c:	e0eb      	b.n	8011e06 <find_volume+0x482>
 8011c2e:	bf00      	nop
 8011c30:	20000818 	.word	0x20000818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c3c:	8952      	ldrh	r2, [r2, #10]
 8011c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d101      	bne.n	8011c4e <find_volume+0x2ca>
 8011c4a:	230d      	movs	r3, #13
 8011c4c:	e0db      	b.n	8011e06 <find_volume+0x482>
		fmt = FS_FAT32;
 8011c4e:	2303      	movs	r3, #3
 8011c50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c56:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d802      	bhi.n	8011c64 <find_volume+0x2e0>
 8011c5e:	2302      	movs	r3, #2
 8011c60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c66:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d802      	bhi.n	8011c74 <find_volume+0x2f0>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c76:	1c9a      	adds	r2, r3, #2
 8011c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c80:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011c82:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c86:	441a      	add	r2, r3
 8011c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011c8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c90:	441a      	add	r2, r3
 8011c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c94:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8011c96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011c9a:	2b03      	cmp	r3, #3
 8011c9c:	d11e      	bne.n	8011cdc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca0:	3330      	adds	r3, #48	@ 0x30
 8011ca2:	332a      	adds	r3, #42	@ 0x2a
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fe fb77 	bl	8010398 <ld_word>
 8011caa:	4603      	mov	r3, r0
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d001      	beq.n	8011cb4 <find_volume+0x330>
 8011cb0:	230d      	movs	r3, #13
 8011cb2:	e0a8      	b.n	8011e06 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb6:	891b      	ldrh	r3, [r3, #8]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d001      	beq.n	8011cc0 <find_volume+0x33c>
 8011cbc:	230d      	movs	r3, #13
 8011cbe:	e0a2      	b.n	8011e06 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc2:	3330      	adds	r3, #48	@ 0x30
 8011cc4:	332c      	adds	r3, #44	@ 0x2c
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fe fb7e 	bl	80103c8 <ld_dword>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cd0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cda:	e01f      	b.n	8011d1c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cde:	891b      	ldrh	r3, [r3, #8]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d101      	bne.n	8011ce8 <find_volume+0x364>
 8011ce4:	230d      	movs	r3, #13
 8011ce6:	e08e      	b.n	8011e06 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cea:	6a1a      	ldr	r2, [r3, #32]
 8011cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cee:	441a      	add	r2, r3
 8011cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cf2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d103      	bne.n	8011d04 <find_volume+0x380>
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	005b      	lsls	r3, r3, #1
 8011d02:	e00a      	b.n	8011d1a <find_volume+0x396>
 8011d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d06:	695a      	ldr	r2, [r3, #20]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	4413      	add	r3, r2
 8011d0e:	085a      	lsrs	r2, r3, #1
 8011d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	f003 0301 	and.w	r3, r3, #1
 8011d18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011d1a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d1e:	699a      	ldr	r2, [r3, #24]
 8011d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d22:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8011d26:	0a5b      	lsrs	r3, r3, #9
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d201      	bcs.n	8011d30 <find_volume+0x3ac>
 8011d2c:	230d      	movs	r3, #13
 8011d2e:	e06a      	b.n	8011e06 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d32:	f04f 32ff 	mov.w	r2, #4294967295
 8011d36:	611a      	str	r2, [r3, #16]
 8011d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3a:	691a      	ldr	r2, [r3, #16]
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d42:	2280      	movs	r2, #128	@ 0x80
 8011d44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011d46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d149      	bne.n	8011de2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d50:	3330      	adds	r3, #48	@ 0x30
 8011d52:	3330      	adds	r3, #48	@ 0x30
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe fb1f 	bl	8010398 <ld_word>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d140      	bne.n	8011de2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d62:	3301      	adds	r3, #1
 8011d64:	4619      	mov	r1, r3
 8011d66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d68:	f7fe fdc6 	bl	80108f8 <move_window>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d137      	bne.n	8011de2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d74:	2200      	movs	r2, #0
 8011d76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d7a:	3330      	adds	r3, #48	@ 0x30
 8011d7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fe fb09 	bl	8010398 <ld_word>
 8011d86:	4603      	mov	r3, r0
 8011d88:	461a      	mov	r2, r3
 8011d8a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d127      	bne.n	8011de2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d94:	3330      	adds	r3, #48	@ 0x30
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fe fb16 	bl	80103c8 <ld_dword>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8011e10 <find_volume+0x48c>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d11e      	bne.n	8011de2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da6:	3330      	adds	r3, #48	@ 0x30
 8011da8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fe fb0b 	bl	80103c8 <ld_dword>
 8011db2:	4603      	mov	r3, r0
 8011db4:	4a17      	ldr	r2, [pc, #92]	@ (8011e14 <find_volume+0x490>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d113      	bne.n	8011de2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dbc:	3330      	adds	r3, #48	@ 0x30
 8011dbe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fe fb00 	bl	80103c8 <ld_dword>
 8011dc8:	4602      	mov	r2, r0
 8011dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dcc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dd0:	3330      	adds	r3, #48	@ 0x30
 8011dd2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fe faf6 	bl	80103c8 <ld_dword>
 8011ddc:	4602      	mov	r2, r0
 8011dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011de0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011de4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011de8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011dea:	4b0b      	ldr	r3, [pc, #44]	@ (8011e18 <find_volume+0x494>)
 8011dec:	881b      	ldrh	r3, [r3, #0]
 8011dee:	3301      	adds	r3, #1
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	4b09      	ldr	r3, [pc, #36]	@ (8011e18 <find_volume+0x494>)
 8011df4:	801a      	strh	r2, [r3, #0]
 8011df6:	4b08      	ldr	r3, [pc, #32]	@ (8011e18 <find_volume+0x494>)
 8011df8:	881a      	ldrh	r2, [r3, #0]
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dfc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011dfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011e00:	f7fe fd12 	bl	8010828 <clear_lock>
#endif
	return FR_OK;
 8011e04:	2300      	movs	r3, #0
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3758      	adds	r7, #88	@ 0x58
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	41615252 	.word	0x41615252
 8011e14:	61417272 	.word	0x61417272
 8011e18:	2000081c 	.word	0x2000081c

08011e1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011e26:	2309      	movs	r3, #9
 8011e28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01c      	beq.n	8011e6a <validate+0x4e>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d018      	beq.n	8011e6a <validate+0x4e>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d013      	beq.n	8011e6a <validate+0x4e>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	889a      	ldrh	r2, [r3, #4]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	88db      	ldrh	r3, [r3, #6]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d10c      	bne.n	8011e6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	785b      	ldrb	r3, [r3, #1]
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fe f9fe 	bl	8010258 <disk_status>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	f003 0301 	and.w	r3, r3, #1
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d101      	bne.n	8011e6a <validate+0x4e>
			res = FR_OK;
 8011e66:	2300      	movs	r3, #0
 8011e68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d102      	bne.n	8011e76 <validate+0x5a>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	e000      	b.n	8011e78 <validate+0x5c>
 8011e76:	2300      	movs	r3, #0
 8011e78:	683a      	ldr	r2, [r7, #0]
 8011e7a:	6013      	str	r3, [r2, #0]
	return res;
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
	...

08011e88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b088      	sub	sp, #32
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	4613      	mov	r3, r2
 8011e94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011e9a:	f107 0310 	add.w	r3, r7, #16
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ff fcd5 	bl	801184e <get_ldnumber>
 8011ea4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	da01      	bge.n	8011eb0 <f_mount+0x28>
 8011eac:	230b      	movs	r3, #11
 8011eae:	e02b      	b.n	8011f08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011eb0:	4a17      	ldr	r2, [pc, #92]	@ (8011f10 <f_mount+0x88>)
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d005      	beq.n	8011ecc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011ec0:	69b8      	ldr	r0, [r7, #24]
 8011ec2:	f7fe fcb1 	bl	8010828 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d002      	beq.n	8011ed8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	490d      	ldr	r1, [pc, #52]	@ (8011f10 <f_mount+0x88>)
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d002      	beq.n	8011eee <f_mount+0x66>
 8011ee8:	79fb      	ldrb	r3, [r7, #7]
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d001      	beq.n	8011ef2 <f_mount+0x6a>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	e00a      	b.n	8011f08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011ef2:	f107 010c 	add.w	r1, r7, #12
 8011ef6:	f107 0308 	add.w	r3, r7, #8
 8011efa:	2200      	movs	r2, #0
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7ff fd41 	bl	8011984 <find_volume>
 8011f02:	4603      	mov	r3, r0
 8011f04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3720      	adds	r7, #32
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20000818 	.word	0x20000818

08011f14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b098      	sub	sp, #96	@ 0x60
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	60f8      	str	r0, [r7, #12]
 8011f1c:	60b9      	str	r1, [r7, #8]
 8011f1e:	4613      	mov	r3, r2
 8011f20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d101      	bne.n	8011f2c <f_open+0x18>
 8011f28:	2309      	movs	r3, #9
 8011f2a:	e1a9      	b.n	8012280 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011f2c:	79fb      	ldrb	r3, [r7, #7]
 8011f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011f34:	79fa      	ldrb	r2, [r7, #7]
 8011f36:	f107 0110 	add.w	r1, r7, #16
 8011f3a:	f107 0308 	add.w	r3, r7, #8
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7ff fd20 	bl	8011984 <find_volume>
 8011f44:	4603      	mov	r3, r0
 8011f46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8011f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f040 818d 	bne.w	801226e <f_open+0x35a>
		dj.obj.fs = fs;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	f107 0314 	add.w	r3, r7, #20
 8011f5e:	4611      	mov	r1, r2
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7ff fc03 	bl	801176c <follow_path>
 8011f66:	4603      	mov	r3, r0
 8011f68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d118      	bne.n	8011fa6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011f74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011f78:	b25b      	sxtb	r3, r3
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	da03      	bge.n	8011f86 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011f7e:	2306      	movs	r3, #6
 8011f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011f84:	e00f      	b.n	8011fa6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011f86:	79fb      	ldrb	r3, [r7, #7]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	bf8c      	ite	hi
 8011f8c:	2301      	movhi	r3, #1
 8011f8e:	2300      	movls	r3, #0
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	461a      	mov	r2, r3
 8011f94:	f107 0314 	add.w	r3, r7, #20
 8011f98:	4611      	mov	r1, r2
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fe fafc 	bl	8010598 <chk_lock>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	f003 031c 	and.w	r3, r3, #28
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d07f      	beq.n	80120b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d017      	beq.n	8011fe8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011fbc:	2b04      	cmp	r3, #4
 8011fbe:	d10e      	bne.n	8011fde <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011fc0:	f7fe fb46 	bl	8010650 <enq_lock>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d006      	beq.n	8011fd8 <f_open+0xc4>
 8011fca:	f107 0314 	add.w	r3, r7, #20
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7ff fa87 	bl	80114e2 <dir_register>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	e000      	b.n	8011fda <f_open+0xc6>
 8011fd8:	2312      	movs	r3, #18
 8011fda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011fde:	79fb      	ldrb	r3, [r7, #7]
 8011fe0:	f043 0308 	orr.w	r3, r3, #8
 8011fe4:	71fb      	strb	r3, [r7, #7]
 8011fe6:	e010      	b.n	801200a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011fe8:	7ebb      	ldrb	r3, [r7, #26]
 8011fea:	f003 0311 	and.w	r3, r3, #17
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d003      	beq.n	8011ffa <f_open+0xe6>
					res = FR_DENIED;
 8011ff2:	2307      	movs	r3, #7
 8011ff4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011ff8:	e007      	b.n	801200a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	f003 0304 	and.w	r3, r3, #4
 8012000:	2b00      	cmp	r3, #0
 8012002:	d002      	beq.n	801200a <f_open+0xf6>
 8012004:	2308      	movs	r3, #8
 8012006:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801200a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801200e:	2b00      	cmp	r3, #0
 8012010:	d168      	bne.n	80120e4 <f_open+0x1d0>
 8012012:	79fb      	ldrb	r3, [r7, #7]
 8012014:	f003 0308 	and.w	r3, r3, #8
 8012018:	2b00      	cmp	r3, #0
 801201a:	d063      	beq.n	80120e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 801201c:	f7fb fe5a 	bl	800dcd4 <get_fattime>
 8012020:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012024:	330e      	adds	r3, #14
 8012026:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe fa0b 	bl	8010444 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801202e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012030:	3316      	adds	r3, #22
 8012032:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012034:	4618      	mov	r0, r3
 8012036:	f7fe fa05 	bl	8010444 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801203a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801203c:	330b      	adds	r3, #11
 801203e:	2220      	movs	r2, #32
 8012040:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012046:	4611      	mov	r1, r2
 8012048:	4618      	mov	r0, r3
 801204a:	f7ff f959 	bl	8011300 <ld_clust>
 801204e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012054:	2200      	movs	r2, #0
 8012056:	4618      	mov	r0, r3
 8012058:	f7ff f971 	bl	801133e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801205e:	331c      	adds	r3, #28
 8012060:	2100      	movs	r1, #0
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe f9ee 	bl	8010444 <st_dword>
					fs->wflag = 1;
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	2201      	movs	r2, #1
 801206c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801206e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012070:	2b00      	cmp	r3, #0
 8012072:	d037      	beq.n	80120e4 <f_open+0x1d0>
						dw = fs->winsect;
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012078:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801207a:	f107 0314 	add.w	r3, r7, #20
 801207e:	2200      	movs	r2, #0
 8012080:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8012082:	4618      	mov	r0, r3
 8012084:	f7fe fe84 	bl	8010d90 <remove_chain>
 8012088:	4603      	mov	r3, r0
 801208a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801208e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012092:	2b00      	cmp	r3, #0
 8012094:	d126      	bne.n	80120e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801209a:	4618      	mov	r0, r3
 801209c:	f7fe fc2c 	bl	80108f8 <move_window>
 80120a0:	4603      	mov	r3, r0
 80120a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80120aa:	3a01      	subs	r2, #1
 80120ac:	60da      	str	r2, [r3, #12]
 80120ae:	e019      	b.n	80120e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80120b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d115      	bne.n	80120e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80120b8:	7ebb      	ldrb	r3, [r7, #26]
 80120ba:	f003 0310 	and.w	r3, r3, #16
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d003      	beq.n	80120ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80120c2:	2304      	movs	r3, #4
 80120c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80120c8:	e00c      	b.n	80120e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	f003 0302 	and.w	r3, r3, #2
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d007      	beq.n	80120e4 <f_open+0x1d0>
 80120d4:	7ebb      	ldrb	r3, [r7, #26]
 80120d6:	f003 0301 	and.w	r3, r3, #1
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d002      	beq.n	80120e4 <f_open+0x1d0>
						res = FR_DENIED;
 80120de:	2307      	movs	r3, #7
 80120e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80120e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d126      	bne.n	801213a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80120ec:	79fb      	ldrb	r3, [r7, #7]
 80120ee:	f003 0308 	and.w	r3, r3, #8
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d003      	beq.n	80120fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80120f6:	79fb      	ldrb	r3, [r7, #7]
 80120f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801210c:	79fb      	ldrb	r3, [r7, #7]
 801210e:	2b01      	cmp	r3, #1
 8012110:	bf8c      	ite	hi
 8012112:	2301      	movhi	r3, #1
 8012114:	2300      	movls	r3, #0
 8012116:	b2db      	uxtb	r3, r3
 8012118:	461a      	mov	r2, r3
 801211a:	f107 0314 	add.w	r3, r7, #20
 801211e:	4611      	mov	r1, r2
 8012120:	4618      	mov	r0, r3
 8012122:	f7fe fab7 	bl	8010694 <inc_lock>
 8012126:	4602      	mov	r2, r0
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	691b      	ldr	r3, [r3, #16]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d102      	bne.n	801213a <f_open+0x226>
 8012134:	2302      	movs	r3, #2
 8012136:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801213a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801213e:	2b00      	cmp	r3, #0
 8012140:	f040 8095 	bne.w	801226e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012148:	4611      	mov	r1, r2
 801214a:	4618      	mov	r0, r3
 801214c:	f7ff f8d8 	bl	8011300 <ld_clust>
 8012150:	4602      	mov	r2, r0
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012158:	331c      	adds	r3, #28
 801215a:	4618      	mov	r0, r3
 801215c:	f7fe f934 	bl	80103c8 <ld_dword>
 8012160:	4602      	mov	r2, r0
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2200      	movs	r2, #0
 801216a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801216c:	693a      	ldr	r2, [r7, #16]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	88da      	ldrh	r2, [r3, #6]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	79fa      	ldrb	r2, [r7, #7]
 801217e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2200      	movs	r2, #0
 8012184:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2200      	movs	r2, #0
 801218a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2200      	movs	r2, #0
 8012190:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	3330      	adds	r3, #48	@ 0x30
 8012196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801219a:	2100      	movs	r1, #0
 801219c:	4618      	mov	r0, r3
 801219e:	f7fe f99e 	bl	80104de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80121a2:	79fb      	ldrb	r3, [r7, #7]
 80121a4:	f003 0320 	and.w	r3, r3, #32
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d060      	beq.n	801226e <f_open+0x35a>
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	68db      	ldr	r3, [r3, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d05c      	beq.n	801226e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	68da      	ldr	r2, [r3, #12]
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	895b      	ldrh	r3, [r3, #10]
 80121c0:	025b      	lsls	r3, r3, #9
 80121c2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80121d0:	e016      	b.n	8012200 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fe fc49 	bl	8010a6e <get_fat>
 80121dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80121de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d802      	bhi.n	80121ea <f_open+0x2d6>
 80121e4:	2302      	movs	r3, #2
 80121e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80121ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80121ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f0:	d102      	bne.n	80121f8 <f_open+0x2e4>
 80121f2:	2301      	movs	r3, #1
 80121f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80121f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80121fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8012200:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012204:	2b00      	cmp	r3, #0
 8012206:	d103      	bne.n	8012210 <f_open+0x2fc>
 8012208:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801220a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801220c:	429a      	cmp	r2, r3
 801220e:	d8e0      	bhi.n	80121d2 <f_open+0x2be>
				}
				fp->clust = clst;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012214:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012216:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801221a:	2b00      	cmp	r3, #0
 801221c:	d127      	bne.n	801226e <f_open+0x35a>
 801221e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012224:	2b00      	cmp	r3, #0
 8012226:	d022      	beq.n	801226e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801222c:	4618      	mov	r0, r3
 801222e:	f7fe fbff 	bl	8010a30 <clust2sect>
 8012232:	6478      	str	r0, [r7, #68]	@ 0x44
 8012234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012236:	2b00      	cmp	r3, #0
 8012238:	d103      	bne.n	8012242 <f_open+0x32e>
						res = FR_INT_ERR;
 801223a:	2302      	movs	r3, #2
 801223c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012240:	e015      	b.n	801226e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012244:	0a5a      	lsrs	r2, r3, #9
 8012246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012248:	441a      	add	r2, r3
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	7858      	ldrb	r0, [r3, #1]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	6a1a      	ldr	r2, [r3, #32]
 801225c:	2301      	movs	r3, #1
 801225e:	f7fe f83d 	bl	80102dc <disk_read>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d002      	beq.n	801226e <f_open+0x35a>
 8012268:	2301      	movs	r3, #1
 801226a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801226e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012272:	2b00      	cmp	r3, #0
 8012274:	d002      	beq.n	801227c <f_open+0x368>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2200      	movs	r2, #0
 801227a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801227c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012280:	4618      	mov	r0, r3
 8012282:	3760      	adds	r7, #96	@ 0x60
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b08e      	sub	sp, #56	@ 0x38
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
 8012294:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	2200      	movs	r2, #0
 801229e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f107 0214 	add.w	r2, r7, #20
 80122a6:	4611      	mov	r1, r2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7ff fdb7 	bl	8011e1c <validate>
 80122ae:	4603      	mov	r3, r0
 80122b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80122b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d107      	bne.n	80122cc <f_read+0x44>
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	7d5b      	ldrb	r3, [r3, #21]
 80122c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80122c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d002      	beq.n	80122d2 <f_read+0x4a>
 80122cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122d0:	e115      	b.n	80124fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	7d1b      	ldrb	r3, [r3, #20]
 80122d6:	f003 0301 	and.w	r3, r3, #1
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d101      	bne.n	80122e2 <f_read+0x5a>
 80122de:	2307      	movs	r3, #7
 80122e0:	e10d      	b.n	80124fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	68da      	ldr	r2, [r3, #12]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	699b      	ldr	r3, [r3, #24]
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	6a3b      	ldr	r3, [r7, #32]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	f240 80fe 	bls.w	80124f4 <f_read+0x26c>
 80122f8:	6a3b      	ldr	r3, [r7, #32]
 80122fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80122fc:	e0fa      	b.n	80124f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	699b      	ldr	r3, [r3, #24]
 8012302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012306:	2b00      	cmp	r3, #0
 8012308:	f040 80c6 	bne.w	8012498 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	699b      	ldr	r3, [r3, #24]
 8012310:	0a5b      	lsrs	r3, r3, #9
 8012312:	697a      	ldr	r2, [r7, #20]
 8012314:	8952      	ldrh	r2, [r2, #10]
 8012316:	3a01      	subs	r2, #1
 8012318:	4013      	ands	r3, r2
 801231a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d12f      	bne.n	8012382 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	699b      	ldr	r3, [r3, #24]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d103      	bne.n	8012332 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012330:	e013      	b.n	801235a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012336:	2b00      	cmp	r3, #0
 8012338:	d007      	beq.n	801234a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	699b      	ldr	r3, [r3, #24]
 801233e:	4619      	mov	r1, r3
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7fe fe22 	bl	8010f8a <clmt_clust>
 8012346:	6338      	str	r0, [r7, #48]	@ 0x30
 8012348:	e007      	b.n	801235a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801234a:	68fa      	ldr	r2, [r7, #12]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	69db      	ldr	r3, [r3, #28]
 8012350:	4619      	mov	r1, r3
 8012352:	4610      	mov	r0, r2
 8012354:	f7fe fb8b 	bl	8010a6e <get_fat>
 8012358:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235c:	2b01      	cmp	r3, #1
 801235e:	d804      	bhi.n	801236a <f_read+0xe2>
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2202      	movs	r2, #2
 8012364:	755a      	strb	r2, [r3, #21]
 8012366:	2302      	movs	r3, #2
 8012368:	e0c9      	b.n	80124fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012370:	d104      	bne.n	801237c <f_read+0xf4>
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2201      	movs	r2, #1
 8012376:	755a      	strb	r2, [r3, #21]
 8012378:	2301      	movs	r3, #1
 801237a:	e0c0      	b.n	80124fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012380:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012382:	697a      	ldr	r2, [r7, #20]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	69db      	ldr	r3, [r3, #28]
 8012388:	4619      	mov	r1, r3
 801238a:	4610      	mov	r0, r2
 801238c:	f7fe fb50 	bl	8010a30 <clust2sect>
 8012390:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d104      	bne.n	80123a2 <f_read+0x11a>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2202      	movs	r2, #2
 801239c:	755a      	strb	r2, [r3, #21]
 801239e:	2302      	movs	r3, #2
 80123a0:	e0ad      	b.n	80124fe <f_read+0x276>
			sect += csect;
 80123a2:	69ba      	ldr	r2, [r7, #24]
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	4413      	add	r3, r2
 80123a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	0a5b      	lsrs	r3, r3, #9
 80123ae:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80123b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d039      	beq.n	801242a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80123b6:	69fa      	ldr	r2, [r7, #28]
 80123b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ba:	4413      	add	r3, r2
 80123bc:	697a      	ldr	r2, [r7, #20]
 80123be:	8952      	ldrh	r2, [r2, #10]
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d905      	bls.n	80123d0 <f_read+0x148>
					cc = fs->csize - csect;
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	895b      	ldrh	r3, [r3, #10]
 80123c8:	461a      	mov	r2, r3
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	7858      	ldrb	r0, [r3, #1]
 80123d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123d6:	69ba      	ldr	r2, [r7, #24]
 80123d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123da:	f7fd ff7f 	bl	80102dc <disk_read>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d004      	beq.n	80123ee <f_read+0x166>
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2201      	movs	r2, #1
 80123e8:	755a      	strb	r2, [r3, #21]
 80123ea:	2301      	movs	r3, #1
 80123ec:	e087      	b.n	80124fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	7d1b      	ldrb	r3, [r3, #20]
 80123f2:	b25b      	sxtb	r3, r3
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	da14      	bge.n	8012422 <f_read+0x19a>
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	6a1a      	ldr	r2, [r3, #32]
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	1ad3      	subs	r3, r2, r3
 8012400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012402:	429a      	cmp	r2, r3
 8012404:	d90d      	bls.n	8012422 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6a1a      	ldr	r2, [r3, #32]
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	025b      	lsls	r3, r3, #9
 8012410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012412:	18d0      	adds	r0, r2, r3
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	3330      	adds	r3, #48	@ 0x30
 8012418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801241c:	4619      	mov	r1, r3
 801241e:	f7fe f83d 	bl	801049c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012424:	025b      	lsls	r3, r3, #9
 8012426:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012428:	e050      	b.n	80124cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6a1b      	ldr	r3, [r3, #32]
 801242e:	69ba      	ldr	r2, [r7, #24]
 8012430:	429a      	cmp	r2, r3
 8012432:	d02e      	beq.n	8012492 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	7d1b      	ldrb	r3, [r3, #20]
 8012438:	b25b      	sxtb	r3, r3
 801243a:	2b00      	cmp	r3, #0
 801243c:	da18      	bge.n	8012470 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	7858      	ldrb	r0, [r3, #1]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6a1a      	ldr	r2, [r3, #32]
 801244c:	2301      	movs	r3, #1
 801244e:	f7fd ff65 	bl	801031c <disk_write>
 8012452:	4603      	mov	r3, r0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d004      	beq.n	8012462 <f_read+0x1da>
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2201      	movs	r2, #1
 801245c:	755a      	strb	r2, [r3, #21]
 801245e:	2301      	movs	r3, #1
 8012460:	e04d      	b.n	80124fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	7d1b      	ldrb	r3, [r3, #20]
 8012466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801246a:	b2da      	uxtb	r2, r3
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	7858      	ldrb	r0, [r3, #1]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801247a:	2301      	movs	r3, #1
 801247c:	69ba      	ldr	r2, [r7, #24]
 801247e:	f7fd ff2d 	bl	80102dc <disk_read>
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <f_read+0x20a>
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2201      	movs	r2, #1
 801248c:	755a      	strb	r2, [r3, #21]
 801248e:	2301      	movs	r3, #1
 8012490:	e035      	b.n	80124fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	69ba      	ldr	r2, [r7, #24]
 8012496:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	699b      	ldr	r3, [r3, #24]
 801249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124a0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80124a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80124a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d901      	bls.n	80124b2 <f_read+0x22a>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124c0:	4413      	add	r3, r2
 80124c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124c4:	4619      	mov	r1, r3
 80124c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80124c8:	f7fd ffe8 	bl	801049c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80124cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124d0:	4413      	add	r3, r2
 80124d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	699a      	ldr	r2, [r3, #24]
 80124d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124da:	441a      	add	r2, r3
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	619a      	str	r2, [r3, #24]
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e6:	441a      	add	r2, r3
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	601a      	str	r2, [r3, #0]
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f0:	1ad3      	subs	r3, r2, r3
 80124f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f47f af01 	bne.w	80122fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3738      	adds	r7, #56	@ 0x38
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b08c      	sub	sp, #48	@ 0x30
 801250a:	af00      	add	r7, sp, #0
 801250c:	60f8      	str	r0, [r7, #12]
 801250e:	60b9      	str	r1, [r7, #8]
 8012510:	607a      	str	r2, [r7, #4]
 8012512:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	2200      	movs	r2, #0
 801251c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f107 0210 	add.w	r2, r7, #16
 8012524:	4611      	mov	r1, r2
 8012526:	4618      	mov	r0, r3
 8012528:	f7ff fc78 	bl	8011e1c <validate>
 801252c:	4603      	mov	r3, r0
 801252e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012536:	2b00      	cmp	r3, #0
 8012538:	d107      	bne.n	801254a <f_write+0x44>
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	7d5b      	ldrb	r3, [r3, #21]
 801253e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012542:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012546:	2b00      	cmp	r3, #0
 8012548:	d002      	beq.n	8012550 <f_write+0x4a>
 801254a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801254e:	e14b      	b.n	80127e8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	7d1b      	ldrb	r3, [r3, #20]
 8012554:	f003 0302 	and.w	r3, r3, #2
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <f_write+0x5a>
 801255c:	2307      	movs	r3, #7
 801255e:	e143      	b.n	80127e8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	699a      	ldr	r2, [r3, #24]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	441a      	add	r2, r3
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	699b      	ldr	r3, [r3, #24]
 801256c:	429a      	cmp	r2, r3
 801256e:	f080 812d 	bcs.w	80127cc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	699b      	ldr	r3, [r3, #24]
 8012576:	43db      	mvns	r3, r3
 8012578:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801257a:	e127      	b.n	80127cc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	699b      	ldr	r3, [r3, #24]
 8012580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012584:	2b00      	cmp	r3, #0
 8012586:	f040 80e3 	bne.w	8012750 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	699b      	ldr	r3, [r3, #24]
 801258e:	0a5b      	lsrs	r3, r3, #9
 8012590:	693a      	ldr	r2, [r7, #16]
 8012592:	8952      	ldrh	r2, [r2, #10]
 8012594:	3a01      	subs	r2, #1
 8012596:	4013      	ands	r3, r2
 8012598:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d143      	bne.n	8012628 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d10c      	bne.n	80125c2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80125ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d11a      	bne.n	80125ea <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2100      	movs	r1, #0
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fe fc4e 	bl	8010e5a <create_chain>
 80125be:	62b8      	str	r0, [r7, #40]	@ 0x28
 80125c0:	e013      	b.n	80125ea <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d007      	beq.n	80125da <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	699b      	ldr	r3, [r3, #24]
 80125ce:	4619      	mov	r1, r3
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f7fe fcda 	bl	8010f8a <clmt_clust>
 80125d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80125d8:	e007      	b.n	80125ea <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	69db      	ldr	r3, [r3, #28]
 80125e0:	4619      	mov	r1, r3
 80125e2:	4610      	mov	r0, r2
 80125e4:	f7fe fc39 	bl	8010e5a <create_chain>
 80125e8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80125ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 80f2 	beq.w	80127d6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80125f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d104      	bne.n	8012602 <f_write+0xfc>
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2202      	movs	r2, #2
 80125fc:	755a      	strb	r2, [r3, #21]
 80125fe:	2302      	movs	r3, #2
 8012600:	e0f2      	b.n	80127e8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012608:	d104      	bne.n	8012614 <f_write+0x10e>
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2201      	movs	r2, #1
 801260e:	755a      	strb	r2, [r3, #21]
 8012610:	2301      	movs	r3, #1
 8012612:	e0e9      	b.n	80127e8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012618:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d102      	bne.n	8012628 <f_write+0x122>
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012626:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	7d1b      	ldrb	r3, [r3, #20]
 801262c:	b25b      	sxtb	r3, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	da18      	bge.n	8012664 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	7858      	ldrb	r0, [r3, #1]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	6a1a      	ldr	r2, [r3, #32]
 8012640:	2301      	movs	r3, #1
 8012642:	f7fd fe6b 	bl	801031c <disk_write>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d004      	beq.n	8012656 <f_write+0x150>
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2201      	movs	r2, #1
 8012650:	755a      	strb	r2, [r3, #21]
 8012652:	2301      	movs	r3, #1
 8012654:	e0c8      	b.n	80127e8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	7d1b      	ldrb	r3, [r3, #20]
 801265a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801265e:	b2da      	uxtb	r2, r3
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012664:	693a      	ldr	r2, [r7, #16]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	69db      	ldr	r3, [r3, #28]
 801266a:	4619      	mov	r1, r3
 801266c:	4610      	mov	r0, r2
 801266e:	f7fe f9df 	bl	8010a30 <clust2sect>
 8012672:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d104      	bne.n	8012684 <f_write+0x17e>
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2202      	movs	r2, #2
 801267e:	755a      	strb	r2, [r3, #21]
 8012680:	2302      	movs	r3, #2
 8012682:	e0b1      	b.n	80127e8 <f_write+0x2e2>
			sect += csect;
 8012684:	697a      	ldr	r2, [r7, #20]
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	4413      	add	r3, r2
 801268a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	0a5b      	lsrs	r3, r3, #9
 8012690:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012692:	6a3b      	ldr	r3, [r7, #32]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d03c      	beq.n	8012712 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012698:	69ba      	ldr	r2, [r7, #24]
 801269a:	6a3b      	ldr	r3, [r7, #32]
 801269c:	4413      	add	r3, r2
 801269e:	693a      	ldr	r2, [r7, #16]
 80126a0:	8952      	ldrh	r2, [r2, #10]
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d905      	bls.n	80126b2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	895b      	ldrh	r3, [r3, #10]
 80126aa:	461a      	mov	r2, r3
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	7858      	ldrb	r0, [r3, #1]
 80126b6:	6a3b      	ldr	r3, [r7, #32]
 80126b8:	697a      	ldr	r2, [r7, #20]
 80126ba:	69f9      	ldr	r1, [r7, #28]
 80126bc:	f7fd fe2e 	bl	801031c <disk_write>
 80126c0:	4603      	mov	r3, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d004      	beq.n	80126d0 <f_write+0x1ca>
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2201      	movs	r2, #1
 80126ca:	755a      	strb	r2, [r3, #21]
 80126cc:	2301      	movs	r3, #1
 80126ce:	e08b      	b.n	80127e8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6a1a      	ldr	r2, [r3, #32]
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	6a3a      	ldr	r2, [r7, #32]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d915      	bls.n	801270a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6a1a      	ldr	r2, [r3, #32]
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	025b      	lsls	r3, r3, #9
 80126ee:	69fa      	ldr	r2, [r7, #28]
 80126f0:	4413      	add	r3, r2
 80126f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126f6:	4619      	mov	r1, r3
 80126f8:	f7fd fed0 	bl	801049c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	7d1b      	ldrb	r3, [r3, #20]
 8012700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012704:	b2da      	uxtb	r2, r3
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	025b      	lsls	r3, r3, #9
 801270e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8012710:	e03f      	b.n	8012792 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	6a1b      	ldr	r3, [r3, #32]
 8012716:	697a      	ldr	r2, [r7, #20]
 8012718:	429a      	cmp	r2, r3
 801271a:	d016      	beq.n	801274a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	699a      	ldr	r2, [r3, #24]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012724:	429a      	cmp	r2, r3
 8012726:	d210      	bcs.n	801274a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	7858      	ldrb	r0, [r3, #1]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012732:	2301      	movs	r3, #1
 8012734:	697a      	ldr	r2, [r7, #20]
 8012736:	f7fd fdd1 	bl	80102dc <disk_read>
 801273a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801273c:	2b00      	cmp	r3, #0
 801273e:	d004      	beq.n	801274a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2201      	movs	r2, #1
 8012744:	755a      	strb	r2, [r3, #21]
 8012746:	2301      	movs	r3, #1
 8012748:	e04e      	b.n	80127e8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	699b      	ldr	r3, [r3, #24]
 8012754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012758:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801275c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801275e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	429a      	cmp	r2, r3
 8012764:	d901      	bls.n	801276a <f_write+0x264>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	699b      	ldr	r3, [r3, #24]
 8012774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012778:	4413      	add	r3, r2
 801277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801277c:	69f9      	ldr	r1, [r7, #28]
 801277e:	4618      	mov	r0, r3
 8012780:	f7fd fe8c 	bl	801049c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	7d1b      	ldrb	r3, [r3, #20]
 8012788:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801278c:	b2da      	uxtb	r2, r3
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012792:	69fa      	ldr	r2, [r7, #28]
 8012794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012796:	4413      	add	r3, r2
 8012798:	61fb      	str	r3, [r7, #28]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	699a      	ldr	r2, [r3, #24]
 801279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a0:	441a      	add	r2, r3
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	619a      	str	r2, [r3, #24]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	68da      	ldr	r2, [r3, #12]
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	699b      	ldr	r3, [r3, #24]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	bf38      	it	cc
 80127b2:	461a      	movcc	r2, r3
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	60da      	str	r2, [r3, #12]
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127be:	441a      	add	r2, r3
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	601a      	str	r2, [r3, #0]
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f47f aed4 	bne.w	801257c <f_write+0x76>
 80127d4:	e000      	b.n	80127d8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80127d6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	7d1b      	ldrb	r3, [r3, #20]
 80127dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127e0:	b2da      	uxtb	r2, r3
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3730      	adds	r7, #48	@ 0x30
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f107 0208 	add.w	r2, r7, #8
 80127fe:	4611      	mov	r1, r2
 8012800:	4618      	mov	r0, r3
 8012802:	f7ff fb0b 	bl	8011e1c <validate>
 8012806:	4603      	mov	r3, r0
 8012808:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801280a:	7dfb      	ldrb	r3, [r7, #23]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d168      	bne.n	80128e2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	7d1b      	ldrb	r3, [r3, #20]
 8012814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012818:	2b00      	cmp	r3, #0
 801281a:	d062      	beq.n	80128e2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	7d1b      	ldrb	r3, [r3, #20]
 8012820:	b25b      	sxtb	r3, r3
 8012822:	2b00      	cmp	r3, #0
 8012824:	da15      	bge.n	8012852 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	7858      	ldrb	r0, [r3, #1]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6a1a      	ldr	r2, [r3, #32]
 8012834:	2301      	movs	r3, #1
 8012836:	f7fd fd71 	bl	801031c <disk_write>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d001      	beq.n	8012844 <f_sync+0x54>
 8012840:	2301      	movs	r3, #1
 8012842:	e04f      	b.n	80128e4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	7d1b      	ldrb	r3, [r3, #20]
 8012848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801284c:	b2da      	uxtb	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012852:	f7fb fa3f 	bl	800dcd4 <get_fattime>
 8012856:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012858:	68ba      	ldr	r2, [r7, #8]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285e:	4619      	mov	r1, r3
 8012860:	4610      	mov	r0, r2
 8012862:	f7fe f849 	bl	80108f8 <move_window>
 8012866:	4603      	mov	r3, r0
 8012868:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d138      	bne.n	80128e2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012874:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	330b      	adds	r3, #11
 801287a:	781a      	ldrb	r2, [r3, #0]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	330b      	adds	r3, #11
 8012880:	f042 0220 	orr.w	r2, r2, #32
 8012884:	b2d2      	uxtb	r2, r2
 8012886:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6818      	ldr	r0, [r3, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	461a      	mov	r2, r3
 8012892:	68f9      	ldr	r1, [r7, #12]
 8012894:	f7fe fd53 	bl	801133e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f103 021c 	add.w	r2, r3, #28
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	4619      	mov	r1, r3
 80128a4:	4610      	mov	r0, r2
 80128a6:	f7fd fdcd 	bl	8010444 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	3316      	adds	r3, #22
 80128ae:	6939      	ldr	r1, [r7, #16]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fd fdc7 	bl	8010444 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	3312      	adds	r3, #18
 80128ba:	2100      	movs	r1, #0
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fd fda6 	bl	801040e <st_word>
					fs->wflag = 1;
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	2201      	movs	r2, #1
 80128c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7fe f842 	bl	8010954 <sync_fs>
 80128d0:	4603      	mov	r3, r0
 80128d2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	7d1b      	ldrb	r3, [r3, #20]
 80128d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80128dc:	b2da      	uxtb	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80128e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3718      	adds	r7, #24
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f7ff ff7b 	bl	80127f0 <f_sync>
 80128fa:	4603      	mov	r3, r0
 80128fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80128fe:	7bfb      	ldrb	r3, [r7, #15]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d118      	bne.n	8012936 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f107 0208 	add.w	r2, r7, #8
 801290a:	4611      	mov	r1, r2
 801290c:	4618      	mov	r0, r3
 801290e:	f7ff fa85 	bl	8011e1c <validate>
 8012912:	4603      	mov	r3, r0
 8012914:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012916:	7bfb      	ldrb	r3, [r7, #15]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d10c      	bne.n	8012936 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	691b      	ldr	r3, [r3, #16]
 8012920:	4618      	mov	r0, r3
 8012922:	f7fd ff45 	bl	80107b0 <dec_lock>
 8012926:	4603      	mov	r3, r0
 8012928:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d102      	bne.n	8012936 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012936:	7bfb      	ldrb	r3, [r7, #15]
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b090      	sub	sp, #64	@ 0x40
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f107 0208 	add.w	r2, r7, #8
 8012950:	4611      	mov	r1, r2
 8012952:	4618      	mov	r0, r3
 8012954:	f7ff fa62 	bl	8011e1c <validate>
 8012958:	4603      	mov	r3, r0
 801295a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801295e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012962:	2b00      	cmp	r3, #0
 8012964:	d103      	bne.n	801296e <f_lseek+0x2e>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	7d5b      	ldrb	r3, [r3, #21]
 801296a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801296e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012972:	2b00      	cmp	r3, #0
 8012974:	d002      	beq.n	801297c <f_lseek+0x3c>
 8012976:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801297a:	e1e6      	b.n	8012d4a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012980:	2b00      	cmp	r3, #0
 8012982:	f000 80d1 	beq.w	8012b28 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801298c:	d15a      	bne.n	8012a44 <f_lseek+0x104>
			tbl = fp->cltbl;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012992:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012996:	1d1a      	adds	r2, r3, #4
 8012998:	627a      	str	r2, [r7, #36]	@ 0x24
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	617b      	str	r3, [r7, #20]
 801299e:	2302      	movs	r3, #2
 80129a0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80129a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d03a      	beq.n	8012a24 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80129ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b0:	613b      	str	r3, [r7, #16]
 80129b2:	2300      	movs	r3, #0
 80129b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b8:	3302      	adds	r3, #2
 80129ba:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80129bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129be:	60fb      	str	r3, [r7, #12]
 80129c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c2:	3301      	adds	r3, #1
 80129c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe f84f 	bl	8010a6e <get_fat>
 80129d0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80129d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d804      	bhi.n	80129e2 <f_lseek+0xa2>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2202      	movs	r2, #2
 80129dc:	755a      	strb	r2, [r3, #21]
 80129de:	2302      	movs	r3, #2
 80129e0:	e1b3      	b.n	8012d4a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80129e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129e8:	d104      	bne.n	80129f4 <f_lseek+0xb4>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2201      	movs	r2, #1
 80129ee:	755a      	strb	r2, [r3, #21]
 80129f0:	2301      	movs	r3, #1
 80129f2:	e1aa      	b.n	8012d4a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	3301      	adds	r3, #1
 80129f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d0de      	beq.n	80129bc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80129fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d809      	bhi.n	8012a1a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a08:	1d1a      	adds	r2, r3, #4
 8012a0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8012a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a12:	1d1a      	adds	r2, r3, #4
 8012a14:	627a      	str	r2, [r7, #36]	@ 0x24
 8012a16:	693a      	ldr	r2, [r7, #16]
 8012a18:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	695b      	ldr	r3, [r3, #20]
 8012a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d3c4      	bcc.n	80129ae <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a2a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d803      	bhi.n	8012a3c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a36:	2200      	movs	r2, #0
 8012a38:	601a      	str	r2, [r3, #0]
 8012a3a:	e184      	b.n	8012d46 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012a3c:	2311      	movs	r3, #17
 8012a3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012a42:	e180      	b.n	8012d46 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	683a      	ldr	r2, [r7, #0]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d902      	bls.n	8012a54 <f_lseek+0x114>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	683a      	ldr	r2, [r7, #0]
 8012a58:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 8172 	beq.w	8012d46 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	3b01      	subs	r3, #1
 8012a66:	4619      	mov	r1, r3
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7fe fa8e 	bl	8010f8a <clmt_clust>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012a74:	68ba      	ldr	r2, [r7, #8]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	69db      	ldr	r3, [r3, #28]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	f7fd ffd7 	bl	8010a30 <clust2sect>
 8012a82:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d104      	bne.n	8012a94 <f_lseek+0x154>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2202      	movs	r2, #2
 8012a8e:	755a      	strb	r2, [r3, #21]
 8012a90:	2302      	movs	r3, #2
 8012a92:	e15a      	b.n	8012d4a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	3b01      	subs	r3, #1
 8012a98:	0a5b      	lsrs	r3, r3, #9
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	8952      	ldrh	r2, [r2, #10]
 8012a9e:	3a01      	subs	r2, #1
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	69ba      	ldr	r2, [r7, #24]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f000 8148 	beq.w	8012d46 <f_lseek+0x406>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6a1b      	ldr	r3, [r3, #32]
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	f000 8142 	beq.w	8012d46 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	7d1b      	ldrb	r3, [r3, #20]
 8012ac6:	b25b      	sxtb	r3, r3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	da18      	bge.n	8012afe <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	7858      	ldrb	r0, [r3, #1]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6a1a      	ldr	r2, [r3, #32]
 8012ada:	2301      	movs	r3, #1
 8012adc:	f7fd fc1e 	bl	801031c <disk_write>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d004      	beq.n	8012af0 <f_lseek+0x1b0>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2201      	movs	r2, #1
 8012aea:	755a      	strb	r2, [r3, #21]
 8012aec:	2301      	movs	r3, #1
 8012aee:	e12c      	b.n	8012d4a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	7d1b      	ldrb	r3, [r3, #20]
 8012af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	7858      	ldrb	r0, [r3, #1]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b08:	2301      	movs	r3, #1
 8012b0a:	69ba      	ldr	r2, [r7, #24]
 8012b0c:	f7fd fbe6 	bl	80102dc <disk_read>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d004      	beq.n	8012b20 <f_lseek+0x1e0>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2201      	movs	r2, #1
 8012b1a:	755a      	strb	r2, [r3, #21]
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e114      	b.n	8012d4a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	69ba      	ldr	r2, [r7, #24]
 8012b24:	621a      	str	r2, [r3, #32]
 8012b26:	e10e      	b.n	8012d46 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	683a      	ldr	r2, [r7, #0]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d908      	bls.n	8012b44 <f_lseek+0x204>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	7d1b      	ldrb	r3, [r3, #20]
 8012b36:	f003 0302 	and.w	r3, r3, #2
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d102      	bne.n	8012b44 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	699b      	ldr	r3, [r3, #24]
 8012b48:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012b52:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f000 80a7 	beq.w	8012caa <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	895b      	ldrh	r3, [r3, #10]
 8012b60:	025b      	lsls	r3, r3, #9
 8012b62:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012b64:	6a3b      	ldr	r3, [r7, #32]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d01b      	beq.n	8012ba2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	1e5a      	subs	r2, r3, #1
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8012b74:	6a3b      	ldr	r3, [r7, #32]
 8012b76:	1e59      	subs	r1, r3, #1
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d30f      	bcc.n	8012ba2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012b82:	6a3b      	ldr	r3, [r7, #32]
 8012b84:	1e5a      	subs	r2, r3, #1
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	425b      	negs	r3, r3
 8012b8a:	401a      	ands	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	699b      	ldr	r3, [r3, #24]
 8012b94:	683a      	ldr	r2, [r7, #0]
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	69db      	ldr	r3, [r3, #28]
 8012b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012ba0:	e022      	b.n	8012be8 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d119      	bne.n	8012be2 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fe f951 	bl	8010e5a <create_chain>
 8012bb8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d104      	bne.n	8012bca <f_lseek+0x28a>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2202      	movs	r2, #2
 8012bc4:	755a      	strb	r2, [r3, #21]
 8012bc6:	2302      	movs	r3, #2
 8012bc8:	e0bf      	b.n	8012d4a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bd0:	d104      	bne.n	8012bdc <f_lseek+0x29c>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	755a      	strb	r2, [r3, #21]
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e0b6      	b.n	8012d4a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012be0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012be6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d05d      	beq.n	8012caa <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8012bee:	e03a      	b.n	8012c66 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8012bf0:	683a      	ldr	r2, [r7, #0]
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	1ad3      	subs	r3, r2, r3
 8012bf6:	603b      	str	r3, [r7, #0]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	699a      	ldr	r2, [r3, #24]
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	441a      	add	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	7d1b      	ldrb	r3, [r3, #20]
 8012c08:	f003 0302 	and.w	r3, r3, #2
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00b      	beq.n	8012c28 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fe f920 	bl	8010e5a <create_chain>
 8012c1a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d108      	bne.n	8012c34 <f_lseek+0x2f4>
							ofs = 0; break;
 8012c22:	2300      	movs	r3, #0
 8012c24:	603b      	str	r3, [r7, #0]
 8012c26:	e022      	b.n	8012c6e <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fd ff1e 	bl	8010a6e <get_fat>
 8012c32:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c3a:	d104      	bne.n	8012c46 <f_lseek+0x306>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2201      	movs	r2, #1
 8012c40:	755a      	strb	r2, [r3, #21]
 8012c42:	2301      	movs	r3, #1
 8012c44:	e081      	b.n	8012d4a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d904      	bls.n	8012c56 <f_lseek+0x316>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	695b      	ldr	r3, [r3, #20]
 8012c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d304      	bcc.n	8012c60 <f_lseek+0x320>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2202      	movs	r2, #2
 8012c5a:	755a      	strb	r2, [r3, #21]
 8012c5c:	2302      	movs	r3, #2
 8012c5e:	e074      	b.n	8012d4a <f_lseek+0x40a>
					fp->clust = clst;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012c64:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d8c0      	bhi.n	8012bf0 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	699a      	ldr	r2, [r3, #24]
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	441a      	add	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d012      	beq.n	8012caa <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7fd fed1 	bl	8010a30 <clust2sect>
 8012c8e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d104      	bne.n	8012ca0 <f_lseek+0x360>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2202      	movs	r2, #2
 8012c9a:	755a      	strb	r2, [r3, #21]
 8012c9c:	2302      	movs	r3, #2
 8012c9e:	e054      	b.n	8012d4a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	0a5b      	lsrs	r3, r3, #9
 8012ca4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ca6:	4413      	add	r3, r2
 8012ca8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	699a      	ldr	r2, [r3, #24]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d90a      	bls.n	8012ccc <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	699a      	ldr	r2, [r3, #24]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	7d1b      	ldrb	r3, [r3, #20]
 8012cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	699b      	ldr	r3, [r3, #24]
 8012cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d036      	beq.n	8012d46 <f_lseek+0x406>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6a1b      	ldr	r3, [r3, #32]
 8012cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d031      	beq.n	8012d46 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	7d1b      	ldrb	r3, [r3, #20]
 8012ce6:	b25b      	sxtb	r3, r3
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	da18      	bge.n	8012d1e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	7858      	ldrb	r0, [r3, #1]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a1a      	ldr	r2, [r3, #32]
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	f7fd fb0e 	bl	801031c <disk_write>
 8012d00:	4603      	mov	r3, r0
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d004      	beq.n	8012d10 <f_lseek+0x3d0>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2201      	movs	r2, #1
 8012d0a:	755a      	strb	r2, [r3, #21]
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e01c      	b.n	8012d4a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	7d1b      	ldrb	r3, [r3, #20]
 8012d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012d18:	b2da      	uxtb	r2, r3
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	7858      	ldrb	r0, [r3, #1]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012d28:	2301      	movs	r3, #1
 8012d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012d2c:	f7fd fad6 	bl	80102dc <disk_read>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d004      	beq.n	8012d40 <f_lseek+0x400>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2201      	movs	r2, #1
 8012d3a:	755a      	strb	r2, [r3, #21]
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	e004      	b.n	8012d4a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012d44:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012d46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3740      	adds	r7, #64	@ 0x40
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b086      	sub	sp, #24
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
 8012d5a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <f_opendir+0x14>
 8012d62:	2309      	movs	r3, #9
 8012d64:	e064      	b.n	8012e30 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012d6a:	f107 010c 	add.w	r1, r7, #12
 8012d6e:	463b      	mov	r3, r7
 8012d70:	2200      	movs	r2, #0
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fe fe06 	bl	8011984 <find_volume>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d7c:	7dfb      	ldrb	r3, [r7, #23]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d14f      	bne.n	8012e22 <f_opendir+0xd0>
		obj->fs = fs;
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7fe fced 	bl	801176c <follow_path>
 8012d92:	4603      	mov	r3, r0
 8012d94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d13d      	bne.n	8012e18 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012da2:	b25b      	sxtb	r3, r3
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	db12      	blt.n	8012dce <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	799b      	ldrb	r3, [r3, #6]
 8012dac:	f003 0310 	and.w	r3, r3, #16
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00a      	beq.n	8012dca <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6a1b      	ldr	r3, [r3, #32]
 8012dba:	4619      	mov	r1, r3
 8012dbc:	4610      	mov	r0, r2
 8012dbe:	f7fe fa9f 	bl	8011300 <ld_clust>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	609a      	str	r2, [r3, #8]
 8012dc8:	e001      	b.n	8012dce <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012dca:	2305      	movs	r3, #5
 8012dcc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012dce:	7dfb      	ldrb	r3, [r7, #23]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d121      	bne.n	8012e18 <f_opendir+0xc6>
				obj->id = fs->id;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	88da      	ldrh	r2, [r3, #6]
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012ddc:	2100      	movs	r1, #0
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f7fe f907 	bl	8010ff2 <dir_sdi>
 8012de4:	4603      	mov	r3, r0
 8012de6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012de8:	7dfb      	ldrb	r3, [r7, #23]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d114      	bne.n	8012e18 <f_opendir+0xc6>
					if (obj->sclust) {
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	689b      	ldr	r3, [r3, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00d      	beq.n	8012e12 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012df6:	2100      	movs	r1, #0
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7fd fc4b 	bl	8010694 <inc_lock>
 8012dfe:	4602      	mov	r2, r0
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	691b      	ldr	r3, [r3, #16]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d105      	bne.n	8012e18 <f_opendir+0xc6>
 8012e0c:	2312      	movs	r3, #18
 8012e0e:	75fb      	strb	r3, [r7, #23]
 8012e10:	e002      	b.n	8012e18 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	2200      	movs	r2, #0
 8012e16:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012e18:	7dfb      	ldrb	r3, [r7, #23]
 8012e1a:	2b04      	cmp	r3, #4
 8012e1c:	d101      	bne.n	8012e22 <f_opendir+0xd0>
 8012e1e:	2305      	movs	r3, #5
 8012e20:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012e22:	7dfb      	ldrb	r3, [r7, #23]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d002      	beq.n	8012e2e <f_opendir+0xdc>
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3718      	adds	r7, #24
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f107 0208 	add.w	r2, r7, #8
 8012e46:	4611      	mov	r1, r2
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fe ffe7 	bl	8011e1c <validate>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012e52:	7bfb      	ldrb	r3, [r7, #15]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d110      	bne.n	8012e7a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d006      	beq.n	8012e6e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	691b      	ldr	r3, [r3, #16]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fd fca3 	bl	80107b0 <dec_lock>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012e6e:	7bfb      	ldrb	r3, [r7, #15]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d102      	bne.n	8012e7a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2200      	movs	r2, #0
 8012e78:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8012e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3710      	adds	r7, #16
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f107 0208 	add.w	r2, r7, #8
 8012e94:	4611      	mov	r1, r2
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fe ffc0 	bl	8011e1c <validate>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012ea0:	7bfb      	ldrb	r3, [r7, #15]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d126      	bne.n	8012ef4 <f_readdir+0x70>
		if (!fno) {
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d106      	bne.n	8012eba <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012eac:	2100      	movs	r1, #0
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f7fe f89f 	bl	8010ff2 <dir_sdi>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	73fb      	strb	r3, [r7, #15]
 8012eb8:	e01c      	b.n	8012ef4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012eba:	2100      	movs	r1, #0
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f7fe fa5e 	bl	801137e <dir_read>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012ec6:	7bfb      	ldrb	r3, [r7, #15]
 8012ec8:	2b04      	cmp	r3, #4
 8012eca:	d101      	bne.n	8012ed0 <f_readdir+0x4c>
 8012ecc:	2300      	movs	r3, #0
 8012ece:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012ed0:	7bfb      	ldrb	r3, [r7, #15]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d10e      	bne.n	8012ef4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012ed6:	6839      	ldr	r1, [r7, #0]
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7fe fb52 	bl	8011582 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012ede:	2100      	movs	r1, #0
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7fe f901 	bl	80110e8 <dir_next>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
 8012eec:	2b04      	cmp	r3, #4
 8012eee:	d101      	bne.n	8012ef4 <f_readdir+0x70>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3710      	adds	r7, #16
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}

08012efe <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b090      	sub	sp, #64	@ 0x40
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8012f08:	f107 010c 	add.w	r1, r7, #12
 8012f0c:	1d3b      	adds	r3, r7, #4
 8012f0e:	2200      	movs	r2, #0
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe fd37 	bl	8011984 <find_volume>
 8012f16:	4603      	mov	r3, r0
 8012f18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8012f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d11f      	bne.n	8012f64 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	f107 030c 	add.w	r3, r7, #12
 8012f2a:	4611      	mov	r1, r2
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fe fc1d 	bl	801176c <follow_path>
 8012f32:	4603      	mov	r3, r0
 8012f34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8012f38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d111      	bne.n	8012f64 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012f40:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012f44:	b25b      	sxtb	r3, r3
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	da03      	bge.n	8012f52 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8012f4a:	2306      	movs	r3, #6
 8012f4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012f50:	e008      	b.n	8012f64 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d005      	beq.n	8012f64 <f_stat+0x66>
 8012f58:	f107 030c 	add.w	r3, r7, #12
 8012f5c:	6839      	ldr	r1, [r7, #0]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fe fb0f 	bl	8011582 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8012f64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3740      	adds	r7, #64	@ 0x40
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b09e      	sub	sp, #120	@ 0x78
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012f7c:	f107 010c 	add.w	r1, r7, #12
 8012f80:	1d3b      	adds	r3, r7, #4
 8012f82:	2202      	movs	r2, #2
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fe fcfd 	bl	8011984 <find_volume>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8012f94:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f040 808e 	bne.w	80130ba <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8012fa4:	4611      	mov	r1, r2
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fe fbe0 	bl	801176c <follow_path>
 8012fac:	4603      	mov	r3, r0
 8012fae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8012fb2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d108      	bne.n	8012fcc <f_unlink+0x5c>
 8012fba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8012fbe:	2102      	movs	r1, #2
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fd fae9 	bl	8010598 <chk_lock>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8012fcc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d172      	bne.n	80130ba <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012fd4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8012fd8:	b25b      	sxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	da03      	bge.n	8012fe6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8012fde:	2306      	movs	r3, #6
 8012fe0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8012fe4:	e008      	b.n	8012ff8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012fe6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8012fea:	f003 0301 	and.w	r3, r3, #1
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d002      	beq.n	8012ff8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012ff2:	2307      	movs	r3, #7
 8012ff4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8012ff8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d134      	bne.n	801306a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013004:	4611      	mov	r1, r2
 8013006:	4618      	mov	r0, r3
 8013008:	f7fe f97a 	bl	8011300 <ld_clust>
 801300c:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801300e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013012:	f003 0310 	and.w	r3, r3, #16
 8013016:	2b00      	cmp	r3, #0
 8013018:	d027      	beq.n	801306a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801301e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013020:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013022:	f107 0310 	add.w	r3, r7, #16
 8013026:	2100      	movs	r1, #0
 8013028:	4618      	mov	r0, r3
 801302a:	f7fd ffe2 	bl	8010ff2 <dir_sdi>
 801302e:	4603      	mov	r3, r0
 8013030:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8013034:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013038:	2b00      	cmp	r3, #0
 801303a:	d116      	bne.n	801306a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801303c:	f107 0310 	add.w	r3, r7, #16
 8013040:	2100      	movs	r1, #0
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe f99b 	bl	801137e <dir_read>
 8013048:	4603      	mov	r3, r0
 801304a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801304e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013052:	2b00      	cmp	r3, #0
 8013054:	d102      	bne.n	801305c <f_unlink+0xec>
 8013056:	2307      	movs	r3, #7
 8013058:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801305c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013060:	2b04      	cmp	r3, #4
 8013062:	d102      	bne.n	801306a <f_unlink+0xfa>
 8013064:	2300      	movs	r3, #0
 8013066:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801306a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801306e:	2b00      	cmp	r3, #0
 8013070:	d123      	bne.n	80130ba <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013072:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013076:	4618      	mov	r0, r3
 8013078:	f7fe fa65 	bl	8011546 <dir_remove>
 801307c:	4603      	mov	r3, r0
 801307e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013082:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10c      	bne.n	80130a4 <f_unlink+0x134>
 801308a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801308c:	2b00      	cmp	r3, #0
 801308e:	d009      	beq.n	80130a4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013090:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013094:	2200      	movs	r2, #0
 8013096:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8013098:	4618      	mov	r0, r3
 801309a:	f7fd fe79 	bl	8010d90 <remove_chain>
 801309e:	4603      	mov	r3, r0
 80130a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80130a4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d106      	bne.n	80130ba <f_unlink+0x14a>
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fd fc50 	bl	8010954 <sync_fs>
 80130b4:	4603      	mov	r3, r0
 80130b6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80130ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3778      	adds	r7, #120	@ 0x78
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}

080130c6 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 80130c6:	b590      	push	{r4, r7, lr}
 80130c8:	b0a5      	sub	sp, #148	@ 0x94
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
 80130ce:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 80130d0:	463b      	mov	r3, r7
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fe fbbb 	bl	801184e <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 80130d8:	f107 0120 	add.w	r1, r7, #32
 80130dc:	1d3b      	adds	r3, r7, #4
 80130de:	2202      	movs	r2, #2
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fe fc4f 	bl	8011984 <find_volume>
 80130e6:	4603      	mov	r3, r0
 80130e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 80130ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f040 80db 	bne.w	80132ac <f_rename+0x1e6>
		djo.obj.fs = fs;
 80130f6:	6a3b      	ldr	r3, [r7, #32]
 80130f8:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013100:	4611      	mov	r1, r2
 8013102:	4618      	mov	r0, r3
 8013104:	f7fe fb32 	bl	801176c <follow_path>
 8013108:	4603      	mov	r3, r0
 801310a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 801310e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013112:	2b00      	cmp	r3, #0
 8013114:	d108      	bne.n	8013128 <f_rename+0x62>
 8013116:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801311a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d002      	beq.n	8013128 <f_rename+0x62>
 8013122:	2306      	movs	r3, #6
 8013124:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 8013128:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801312c:	2b00      	cmp	r3, #0
 801312e:	d108      	bne.n	8013142 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 8013130:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013134:	2102      	movs	r1, #2
 8013136:	4618      	mov	r0, r3
 8013138:	f7fd fa2e 	bl	8010598 <chk_lock>
 801313c:	4603      	mov	r3, r0
 801313e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8013142:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013146:	2b00      	cmp	r3, #0
 8013148:	f040 80b0 	bne.w	80132ac <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 801314c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801314e:	f103 010b 	add.w	r1, r3, #11
 8013152:	f107 0308 	add.w	r3, r7, #8
 8013156:	2215      	movs	r2, #21
 8013158:	4618      	mov	r0, r3
 801315a:	f7fd f99f 	bl	801049c <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 801315e:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8013162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013166:	2230      	movs	r2, #48	@ 0x30
 8013168:	4618      	mov	r0, r3
 801316a:	f7fd f997 	bl	801049c <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 801316e:	683a      	ldr	r2, [r7, #0]
 8013170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013174:	4611      	mov	r1, r2
 8013176:	4618      	mov	r0, r3
 8013178:	f7fe faf8 	bl	801176c <follow_path>
 801317c:	4603      	mov	r3, r0
 801317e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8013182:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013186:	2b00      	cmp	r3, #0
 8013188:	d10c      	bne.n	80131a4 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 801318a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801318c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801318e:	429a      	cmp	r2, r3
 8013190:	d105      	bne.n	801319e <f_rename+0xd8>
 8013192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013196:	429a      	cmp	r2, r3
 8013198:	d101      	bne.n	801319e <f_rename+0xd8>
 801319a:	2304      	movs	r3, #4
 801319c:	e000      	b.n	80131a0 <f_rename+0xda>
 801319e:	2308      	movs	r3, #8
 80131a0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 80131a4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80131a8:	2b04      	cmp	r3, #4
 80131aa:	d168      	bne.n	801327e <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 80131ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fe f996 	bl	80114e2 <dir_register>
 80131b6:	4603      	mov	r3, r0
 80131b8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 80131bc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d15c      	bne.n	801327e <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 80131c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 80131ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80131ce:	f103 000d 	add.w	r0, r3, #13
 80131d2:	f107 0308 	add.w	r3, r7, #8
 80131d6:	3302      	adds	r3, #2
 80131d8:	2213      	movs	r2, #19
 80131da:	4619      	mov	r1, r3
 80131dc:	f7fd f95e 	bl	801049c <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 80131e0:	7a3a      	ldrb	r2, [r7, #8]
 80131e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80131e6:	330b      	adds	r3, #11
 80131e8:	f042 0220 	orr.w	r2, r2, #32
 80131ec:	b2d2      	uxtb	r2, r2
 80131ee:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	2201      	movs	r2, #1
 80131f4:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 80131f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80131fa:	330b      	adds	r3, #11
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	f003 0310 	and.w	r3, r3, #16
 8013202:	2b00      	cmp	r3, #0
 8013204:	d03b      	beq.n	801327e <f_rename+0x1b8>
 8013206:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801320a:	429a      	cmp	r2, r3
 801320c:	d037      	beq.n	801327e <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 801320e:	6a3c      	ldr	r4, [r7, #32]
 8013210:	6a3b      	ldr	r3, [r7, #32]
 8013212:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013216:	4618      	mov	r0, r3
 8013218:	f7fe f872 	bl	8011300 <ld_clust>
 801321c:	4603      	mov	r3, r0
 801321e:	4619      	mov	r1, r3
 8013220:	4620      	mov	r0, r4
 8013222:	f7fd fc05 	bl	8010a30 <clust2sect>
 8013226:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 801322a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801322e:	2b00      	cmp	r3, #0
 8013230:	d103      	bne.n	801323a <f_rename+0x174>
								res = FR_INT_ERR;
 8013232:	2302      	movs	r3, #2
 8013234:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8013238:	e021      	b.n	801327e <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8013240:	4618      	mov	r0, r3
 8013242:	f7fd fb59 	bl	80108f8 <move_window>
 8013246:	4603      	mov	r3, r0
 8013248:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 801324c:	6a3b      	ldr	r3, [r7, #32]
 801324e:	3330      	adds	r3, #48	@ 0x30
 8013250:	3320      	adds	r3, #32
 8013252:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8013256:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801325a:	2b00      	cmp	r3, #0
 801325c:	d10f      	bne.n	801327e <f_rename+0x1b8>
 801325e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013262:	3301      	adds	r3, #1
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b2e      	cmp	r3, #46	@ 0x2e
 8013268:	d109      	bne.n	801327e <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 801326a:	6a3b      	ldr	r3, [r7, #32]
 801326c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801326e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013272:	4618      	mov	r0, r3
 8013274:	f7fe f863 	bl	801133e <st_clust>
									fs->wflag = 1;
 8013278:	6a3b      	ldr	r3, [r7, #32]
 801327a:	2201      	movs	r2, #1
 801327c:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 801327e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013282:	2b00      	cmp	r3, #0
 8013284:	d112      	bne.n	80132ac <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8013286:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801328a:	4618      	mov	r0, r3
 801328c:	f7fe f95b 	bl	8011546 <dir_remove>
 8013290:	4603      	mov	r3, r0
 8013292:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 8013296:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <f_rename+0x1e6>
					res = sync_fs(fs);
 801329e:	6a3b      	ldr	r3, [r7, #32]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fd fb57 	bl	8010954 <sync_fs>
 80132a6:	4603      	mov	r3, r0
 80132a8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80132ac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3794      	adds	r7, #148	@ 0x94
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd90      	pop	{r4, r7, pc}

080132b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b087      	sub	sp, #28
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	4613      	mov	r3, r2
 80132c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80132c6:	2301      	movs	r3, #1
 80132c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80132ca:	2300      	movs	r3, #0
 80132cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80132ce:	4b1f      	ldr	r3, [pc, #124]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 80132d0:	7a5b      	ldrb	r3, [r3, #9]
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d131      	bne.n	801333c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80132d8:	4b1c      	ldr	r3, [pc, #112]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 80132da:	7a5b      	ldrb	r3, [r3, #9]
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	461a      	mov	r2, r3
 80132e0:	4b1a      	ldr	r3, [pc, #104]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 80132e2:	2100      	movs	r1, #0
 80132e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80132e6:	4b19      	ldr	r3, [pc, #100]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 80132e8:	7a5b      	ldrb	r3, [r3, #9]
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	4a17      	ldr	r2, [pc, #92]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	4413      	add	r3, r2
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80132f6:	4b15      	ldr	r3, [pc, #84]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 80132f8:	7a5b      	ldrb	r3, [r3, #9]
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	461a      	mov	r2, r3
 80132fe:	4b13      	ldr	r3, [pc, #76]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 8013300:	4413      	add	r3, r2
 8013302:	79fa      	ldrb	r2, [r7, #7]
 8013304:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013306:	4b11      	ldr	r3, [pc, #68]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 8013308:	7a5b      	ldrb	r3, [r3, #9]
 801330a:	b2db      	uxtb	r3, r3
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	b2d1      	uxtb	r1, r2
 8013310:	4a0e      	ldr	r2, [pc, #56]	@ (801334c <FATFS_LinkDriverEx+0x94>)
 8013312:	7251      	strb	r1, [r2, #9]
 8013314:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013316:	7dbb      	ldrb	r3, [r7, #22]
 8013318:	3330      	adds	r3, #48	@ 0x30
 801331a:	b2da      	uxtb	r2, r3
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	3301      	adds	r3, #1
 8013324:	223a      	movs	r2, #58	@ 0x3a
 8013326:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	3302      	adds	r3, #2
 801332c:	222f      	movs	r2, #47	@ 0x2f
 801332e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	3303      	adds	r3, #3
 8013334:	2200      	movs	r2, #0
 8013336:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013338:	2300      	movs	r3, #0
 801333a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801333c:	7dfb      	ldrb	r3, [r7, #23]
}
 801333e:	4618      	mov	r0, r3
 8013340:	371c      	adds	r7, #28
 8013342:	46bd      	mov	sp, r7
 8013344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013348:	4770      	bx	lr
 801334a:	bf00      	nop
 801334c:	20000840 	.word	0x20000840

08013350 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801335a:	2200      	movs	r2, #0
 801335c:	6839      	ldr	r1, [r7, #0]
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7ff ffaa 	bl	80132b8 <FATFS_LinkDriverEx>
 8013364:	4603      	mov	r3, r0
}
 8013366:	4618      	mov	r0, r3
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
	...

08013370 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013374:	2201      	movs	r2, #1
 8013376:	490e      	ldr	r1, [pc, #56]	@ (80133b0 <MX_USB_HOST_Init+0x40>)
 8013378:	480e      	ldr	r0, [pc, #56]	@ (80133b4 <MX_USB_HOST_Init+0x44>)
 801337a:	f7fb fa89 	bl	800e890 <USBH_Init>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d001      	beq.n	8013388 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013384:	f7ef f974 	bl	8002670 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013388:	490b      	ldr	r1, [pc, #44]	@ (80133b8 <MX_USB_HOST_Init+0x48>)
 801338a:	480a      	ldr	r0, [pc, #40]	@ (80133b4 <MX_USB_HOST_Init+0x44>)
 801338c:	f7fb fb2d 	bl	800e9ea <USBH_RegisterClass>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d001      	beq.n	801339a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013396:	f7ef f96b 	bl	8002670 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801339a:	4806      	ldr	r0, [pc, #24]	@ (80133b4 <MX_USB_HOST_Init+0x44>)
 801339c:	f7fb fbb1 	bl	800eb02 <USBH_Start>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d001      	beq.n	80133aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80133a6:	f7ef f963 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80133aa:	bf00      	nop
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	080133d1 	.word	0x080133d1
 80133b4:	2000084c 	.word	0x2000084c
 80133b8:	2000000c 	.word	0x2000000c

080133bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80133c0:	4802      	ldr	r0, [pc, #8]	@ (80133cc <MX_USB_HOST_Process+0x10>)
 80133c2:	f7fb fbaf 	bl	800eb24 <USBH_Process>
}
 80133c6:	bf00      	nop
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	2000084c 	.word	0x2000084c

080133d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80133d0:	b480      	push	{r7}
 80133d2:	b083      	sub	sp, #12
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80133dc:	78fb      	ldrb	r3, [r7, #3]
 80133de:	3b01      	subs	r3, #1
 80133e0:	2b04      	cmp	r3, #4
 80133e2:	d819      	bhi.n	8013418 <USBH_UserProcess+0x48>
 80133e4:	a201      	add	r2, pc, #4	@ (adr r2, 80133ec <USBH_UserProcess+0x1c>)
 80133e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ea:	bf00      	nop
 80133ec:	08013419 	.word	0x08013419
 80133f0:	08013409 	.word	0x08013409
 80133f4:	08013419 	.word	0x08013419
 80133f8:	08013411 	.word	0x08013411
 80133fc:	08013401 	.word	0x08013401
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013400:	4b09      	ldr	r3, [pc, #36]	@ (8013428 <USBH_UserProcess+0x58>)
 8013402:	2203      	movs	r2, #3
 8013404:	701a      	strb	r2, [r3, #0]
  break;
 8013406:	e008      	b.n	801341a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013408:	4b07      	ldr	r3, [pc, #28]	@ (8013428 <USBH_UserProcess+0x58>)
 801340a:	2202      	movs	r2, #2
 801340c:	701a      	strb	r2, [r3, #0]
  break;
 801340e:	e004      	b.n	801341a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013410:	4b05      	ldr	r3, [pc, #20]	@ (8013428 <USBH_UserProcess+0x58>)
 8013412:	2201      	movs	r2, #1
 8013414:	701a      	strb	r2, [r3, #0]
  break;
 8013416:	e000      	b.n	801341a <USBH_UserProcess+0x4a>

  default:
  break;
 8013418:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801341a:	bf00      	nop
 801341c:	370c      	adds	r7, #12
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop
 8013428:	20000c24 	.word	0x20000c24

0801342c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08a      	sub	sp, #40	@ 0x28
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013434:	f107 0314 	add.w	r3, r7, #20
 8013438:	2200      	movs	r2, #0
 801343a:	601a      	str	r2, [r3, #0]
 801343c:	605a      	str	r2, [r3, #4]
 801343e:	609a      	str	r2, [r3, #8]
 8013440:	60da      	str	r2, [r3, #12]
 8013442:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801344c:	d147      	bne.n	80134de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801344e:	2300      	movs	r3, #0
 8013450:	613b      	str	r3, [r7, #16]
 8013452:	4b25      	ldr	r3, [pc, #148]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 8013454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013456:	4a24      	ldr	r2, [pc, #144]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 8013458:	f043 0301 	orr.w	r3, r3, #1
 801345c:	6313      	str	r3, [r2, #48]	@ 0x30
 801345e:	4b22      	ldr	r3, [pc, #136]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 8013460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013462:	f003 0301 	and.w	r3, r3, #1
 8013466:	613b      	str	r3, [r7, #16]
 8013468:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 801346a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801346e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013470:	2302      	movs	r3, #2
 8013472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013474:	2300      	movs	r3, #0
 8013476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013478:	2303      	movs	r3, #3
 801347a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801347c:	230a      	movs	r3, #10
 801347e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013480:	f107 0314 	add.w	r3, r7, #20
 8013484:	4619      	mov	r1, r3
 8013486:	4819      	ldr	r0, [pc, #100]	@ (80134ec <HAL_HCD_MspInit+0xc0>)
 8013488:	f7f1 fce4 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 801348c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013492:	2302      	movs	r3, #2
 8013494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013496:	2300      	movs	r3, #0
 8013498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 801349a:	f107 0314 	add.w	r3, r7, #20
 801349e:	4619      	mov	r1, r3
 80134a0:	4812      	ldr	r0, [pc, #72]	@ (80134ec <HAL_HCD_MspInit+0xc0>)
 80134a2:	f7f1 fcd7 	bl	8004e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80134a6:	4b10      	ldr	r3, [pc, #64]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 80134a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134aa:	4a0f      	ldr	r2, [pc, #60]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 80134ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80134b2:	2300      	movs	r3, #0
 80134b4:	60fb      	str	r3, [r7, #12]
 80134b6:	4b0c      	ldr	r3, [pc, #48]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 80134b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134ba:	4a0b      	ldr	r2, [pc, #44]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 80134bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80134c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80134c2:	4b09      	ldr	r3, [pc, #36]	@ (80134e8 <HAL_HCD_MspInit+0xbc>)
 80134c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80134ca:	60fb      	str	r3, [r7, #12]
 80134cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80134ce:	2200      	movs	r2, #0
 80134d0:	2100      	movs	r1, #0
 80134d2:	2043      	movs	r0, #67	@ 0x43
 80134d4:	f7f0 f876 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80134d8:	2043      	movs	r0, #67	@ 0x43
 80134da:	f7f0 f88f 	bl	80035fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80134de:	bf00      	nop
 80134e0:	3728      	adds	r7, #40	@ 0x28
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	40023800 	.word	0x40023800
 80134ec:	40020000 	.word	0x40020000

080134f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80134fe:	4618      	mov	r0, r3
 8013500:	f7fb fee7 	bl	800f2d2 <USBH_LL_IncTimer>
}
 8013504:	bf00      	nop
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801351a:	4618      	mov	r0, r3
 801351c:	f7fb ff1f 	bl	800f35e <USBH_LL_Connect>
}
 8013520:	bf00      	nop
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}

08013528 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013536:	4618      	mov	r0, r3
 8013538:	f7fb ff28 	bl	800f38c <USBH_LL_Disconnect>
}
 801353c:	bf00      	nop
 801353e:	3708      	adds	r7, #8
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013544:	b480      	push	{r7}
 8013546:	b083      	sub	sp, #12
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	460b      	mov	r3, r1
 801354e:	70fb      	strb	r3, [r7, #3]
 8013550:	4613      	mov	r3, r2
 8013552:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8013554:	bf00      	nop
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801356e:	4618      	mov	r0, r3
 8013570:	f7fb fed9 	bl	800f326 <USBH_LL_PortEnabled>
}
 8013574:	bf00      	nop
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801358a:	4618      	mov	r0, r3
 801358c:	f7fb fed9 	bl	800f342 <USBH_LL_PortDisabled>
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d12a      	bne.n	8013600 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80135aa:	4a18      	ldr	r2, [pc, #96]	@ (801360c <USBH_LL_Init+0x74>)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a15      	ldr	r2, [pc, #84]	@ (801360c <USBH_LL_Init+0x74>)
 80135b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80135ba:	4b14      	ldr	r3, [pc, #80]	@ (801360c <USBH_LL_Init+0x74>)
 80135bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80135c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80135c2:	4b12      	ldr	r3, [pc, #72]	@ (801360c <USBH_LL_Init+0x74>)
 80135c4:	2208      	movs	r2, #8
 80135c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80135c8:	4b10      	ldr	r3, [pc, #64]	@ (801360c <USBH_LL_Init+0x74>)
 80135ca:	2201      	movs	r2, #1
 80135cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80135ce:	4b0f      	ldr	r3, [pc, #60]	@ (801360c <USBH_LL_Init+0x74>)
 80135d0:	2200      	movs	r2, #0
 80135d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80135d4:	4b0d      	ldr	r3, [pc, #52]	@ (801360c <USBH_LL_Init+0x74>)
 80135d6:	2202      	movs	r2, #2
 80135d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80135da:	4b0c      	ldr	r3, [pc, #48]	@ (801360c <USBH_LL_Init+0x74>)
 80135dc:	2200      	movs	r2, #0
 80135de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80135e0:	480a      	ldr	r0, [pc, #40]	@ (801360c <USBH_LL_Init+0x74>)
 80135e2:	f7f1 fe14 	bl	800520e <HAL_HCD_Init>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d001      	beq.n	80135f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80135ec:	f7ef f840 	bl	8002670 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80135f0:	4806      	ldr	r0, [pc, #24]	@ (801360c <USBH_LL_Init+0x74>)
 80135f2:	f7f2 fa75 	bl	8005ae0 <HAL_HCD_GetCurrentFrame>
 80135f6:	4603      	mov	r3, r0
 80135f8:	4619      	mov	r1, r3
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7fb fe5a 	bl	800f2b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	3708      	adds	r7, #8
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	20000c28 	.word	0x20000c28

08013610 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801361c:	2300      	movs	r3, #0
 801361e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013626:	4618      	mov	r0, r3
 8013628:	f7f2 f9e2 	bl	80059f0 <HAL_HCD_Start>
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	4618      	mov	r0, r3
 8013634:	f000 f95e 	bl	80138f4 <USBH_Get_USB_Status>
 8013638:	4603      	mov	r3, r0
 801363a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801363c:	7bbb      	ldrb	r3, [r7, #14]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b084      	sub	sp, #16
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801364e:	2300      	movs	r3, #0
 8013650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801365c:	4618      	mov	r0, r3
 801365e:	f7f2 f9ea 	bl	8005a36 <HAL_HCD_Stop>
 8013662:	4603      	mov	r3, r0
 8013664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013666:	7bfb      	ldrb	r3, [r7, #15]
 8013668:	4618      	mov	r0, r3
 801366a:	f000 f943 	bl	80138f4 <USBH_Get_USB_Status>
 801366e:	4603      	mov	r3, r0
 8013670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013672:	7bbb      	ldrb	r3, [r7, #14]
}
 8013674:	4618      	mov	r0, r3
 8013676:	3710      	adds	r7, #16
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013684:	2301      	movs	r3, #1
 8013686:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801368e:	4618      	mov	r0, r3
 8013690:	f7f2 fa34 	bl	8005afc <HAL_HCD_GetCurrentSpeed>
 8013694:	4603      	mov	r3, r0
 8013696:	2b02      	cmp	r3, #2
 8013698:	d00c      	beq.n	80136b4 <USBH_LL_GetSpeed+0x38>
 801369a:	2b02      	cmp	r3, #2
 801369c:	d80d      	bhi.n	80136ba <USBH_LL_GetSpeed+0x3e>
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d002      	beq.n	80136a8 <USBH_LL_GetSpeed+0x2c>
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d003      	beq.n	80136ae <USBH_LL_GetSpeed+0x32>
 80136a6:	e008      	b.n	80136ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80136a8:	2300      	movs	r3, #0
 80136aa:	73fb      	strb	r3, [r7, #15]
    break;
 80136ac:	e008      	b.n	80136c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80136ae:	2301      	movs	r3, #1
 80136b0:	73fb      	strb	r3, [r7, #15]
    break;
 80136b2:	e005      	b.n	80136c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80136b4:	2302      	movs	r3, #2
 80136b6:	73fb      	strb	r3, [r7, #15]
    break;
 80136b8:	e002      	b.n	80136c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80136ba:	2301      	movs	r3, #1
 80136bc:	73fb      	strb	r3, [r7, #15]
    break;
 80136be:	bf00      	nop
  }
  return  speed;
 80136c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3710      	adds	r7, #16
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b084      	sub	sp, #16
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136d2:	2300      	movs	r3, #0
 80136d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f2 f9c5 	bl	8005a70 <HAL_HCD_ResetPort>
 80136e6:	4603      	mov	r3, r0
 80136e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f000 f901 	bl	80138f4 <USBH_Get_USB_Status>
 80136f2:	4603      	mov	r3, r0
 80136f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3710      	adds	r7, #16
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	460b      	mov	r3, r1
 801370a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013712:	78fa      	ldrb	r2, [r7, #3]
 8013714:	4611      	mov	r1, r2
 8013716:	4618      	mov	r0, r3
 8013718:	f7f2 f9cd 	bl	8005ab6 <HAL_HCD_HC_GetXferCount>
 801371c:	4603      	mov	r3, r0
}
 801371e:	4618      	mov	r0, r3
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013726:	b590      	push	{r4, r7, lr}
 8013728:	b089      	sub	sp, #36	@ 0x24
 801372a:	af04      	add	r7, sp, #16
 801372c:	6078      	str	r0, [r7, #4]
 801372e:	4608      	mov	r0, r1
 8013730:	4611      	mov	r1, r2
 8013732:	461a      	mov	r2, r3
 8013734:	4603      	mov	r3, r0
 8013736:	70fb      	strb	r3, [r7, #3]
 8013738:	460b      	mov	r3, r1
 801373a:	70bb      	strb	r3, [r7, #2]
 801373c:	4613      	mov	r3, r2
 801373e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013740:	2300      	movs	r3, #0
 8013742:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013744:	2300      	movs	r3, #0
 8013746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801374e:	787c      	ldrb	r4, [r7, #1]
 8013750:	78ba      	ldrb	r2, [r7, #2]
 8013752:	78f9      	ldrb	r1, [r7, #3]
 8013754:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013756:	9302      	str	r3, [sp, #8]
 8013758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013762:	9300      	str	r3, [sp, #0]
 8013764:	4623      	mov	r3, r4
 8013766:	f7f1 fdb9 	bl	80052dc <HAL_HCD_HC_Init>
 801376a:	4603      	mov	r3, r0
 801376c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801376e:	7bfb      	ldrb	r3, [r7, #15]
 8013770:	4618      	mov	r0, r3
 8013772:	f000 f8bf 	bl	80138f4 <USBH_Get_USB_Status>
 8013776:	4603      	mov	r3, r0
 8013778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801377a:	7bbb      	ldrb	r3, [r7, #14]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3714      	adds	r7, #20
 8013780:	46bd      	mov	sp, r7
 8013782:	bd90      	pop	{r4, r7, pc}

08013784 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	460b      	mov	r3, r1
 801378e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013790:	2300      	movs	r3, #0
 8013792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013794:	2300      	movs	r3, #0
 8013796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801379e:	78fa      	ldrb	r2, [r7, #3]
 80137a0:	4611      	mov	r1, r2
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7f1 fe52 	bl	800544c <HAL_HCD_HC_Halt>
 80137a8:	4603      	mov	r3, r0
 80137aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80137ac:	7bfb      	ldrb	r3, [r7, #15]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f000 f8a0 	bl	80138f4 <USBH_Get_USB_Status>
 80137b4:	4603      	mov	r3, r0
 80137b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80137c2:	b590      	push	{r4, r7, lr}
 80137c4:	b089      	sub	sp, #36	@ 0x24
 80137c6:	af04      	add	r7, sp, #16
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	4608      	mov	r0, r1
 80137cc:	4611      	mov	r1, r2
 80137ce:	461a      	mov	r2, r3
 80137d0:	4603      	mov	r3, r0
 80137d2:	70fb      	strb	r3, [r7, #3]
 80137d4:	460b      	mov	r3, r1
 80137d6:	70bb      	strb	r3, [r7, #2]
 80137d8:	4613      	mov	r3, r2
 80137da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137dc:	2300      	movs	r3, #0
 80137de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80137e0:	2300      	movs	r3, #0
 80137e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80137ea:	787c      	ldrb	r4, [r7, #1]
 80137ec:	78ba      	ldrb	r2, [r7, #2]
 80137ee:	78f9      	ldrb	r1, [r7, #3]
 80137f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80137f4:	9303      	str	r3, [sp, #12]
 80137f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80137f8:	9302      	str	r3, [sp, #8]
 80137fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137fc:	9301      	str	r3, [sp, #4]
 80137fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	4623      	mov	r3, r4
 8013806:	f7f1 fe45 	bl	8005494 <HAL_HCD_HC_SubmitRequest>
 801380a:	4603      	mov	r3, r0
 801380c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801380e:	7bfb      	ldrb	r3, [r7, #15]
 8013810:	4618      	mov	r0, r3
 8013812:	f000 f86f 	bl	80138f4 <USBH_Get_USB_Status>
 8013816:	4603      	mov	r3, r0
 8013818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801381a:	7bbb      	ldrb	r3, [r7, #14]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3714      	adds	r7, #20
 8013820:	46bd      	mov	sp, r7
 8013822:	bd90      	pop	{r4, r7, pc}

08013824 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	460b      	mov	r3, r1
 801382e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013836:	78fa      	ldrb	r2, [r7, #3]
 8013838:	4611      	mov	r1, r2
 801383a:	4618      	mov	r0, r3
 801383c:	f7f2 f926 	bl	8005a8c <HAL_HCD_HC_GetURBState>
 8013840:	4603      	mov	r3, r0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3708      	adds	r7, #8
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b082      	sub	sp, #8
 801384e:	af00      	add	r7, sp, #0
 8013850:	6078      	str	r0, [r7, #4]
 8013852:	460b      	mov	r3, r1
 8013854:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801385c:	2b01      	cmp	r3, #1
 801385e:	d103      	bne.n	8013868 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013860:	78fb      	ldrb	r3, [r7, #3]
 8013862:	4618      	mov	r0, r3
 8013864:	f000 f872 	bl	801394c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013868:	20c8      	movs	r0, #200	@ 0xc8
 801386a:	f7ef fdcf 	bl	800340c <HAL_Delay>
  return USBH_OK;
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013878:	b480      	push	{r7}
 801387a:	b085      	sub	sp, #20
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
 8013884:	4613      	mov	r3, r2
 8013886:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801388e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013890:	78fa      	ldrb	r2, [r7, #3]
 8013892:	68f9      	ldr	r1, [r7, #12]
 8013894:	4613      	mov	r3, r2
 8013896:	011b      	lsls	r3, r3, #4
 8013898:	1a9b      	subs	r3, r3, r2
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	440b      	add	r3, r1
 801389e:	3317      	adds	r3, #23
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d00a      	beq.n	80138bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80138a6:	78fa      	ldrb	r2, [r7, #3]
 80138a8:	68f9      	ldr	r1, [r7, #12]
 80138aa:	4613      	mov	r3, r2
 80138ac:	011b      	lsls	r3, r3, #4
 80138ae:	1a9b      	subs	r3, r3, r2
 80138b0:	009b      	lsls	r3, r3, #2
 80138b2:	440b      	add	r3, r1
 80138b4:	333c      	adds	r3, #60	@ 0x3c
 80138b6:	78ba      	ldrb	r2, [r7, #2]
 80138b8:	701a      	strb	r2, [r3, #0]
 80138ba:	e009      	b.n	80138d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80138bc:	78fa      	ldrb	r2, [r7, #3]
 80138be:	68f9      	ldr	r1, [r7, #12]
 80138c0:	4613      	mov	r3, r2
 80138c2:	011b      	lsls	r3, r3, #4
 80138c4:	1a9b      	subs	r3, r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	440b      	add	r3, r1
 80138ca:	333d      	adds	r3, #61	@ 0x3d
 80138cc:	78ba      	ldrb	r2, [r7, #2]
 80138ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr

080138de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80138de:	b580      	push	{r7, lr}
 80138e0:	b082      	sub	sp, #8
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ef fd90 	bl	800340c <HAL_Delay>
}
 80138ec:	bf00      	nop
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	4603      	mov	r3, r0
 80138fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80138fe:	2300      	movs	r3, #0
 8013900:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013902:	79fb      	ldrb	r3, [r7, #7]
 8013904:	2b03      	cmp	r3, #3
 8013906:	d817      	bhi.n	8013938 <USBH_Get_USB_Status+0x44>
 8013908:	a201      	add	r2, pc, #4	@ (adr r2, 8013910 <USBH_Get_USB_Status+0x1c>)
 801390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801390e:	bf00      	nop
 8013910:	08013921 	.word	0x08013921
 8013914:	08013927 	.word	0x08013927
 8013918:	0801392d 	.word	0x0801392d
 801391c:	08013933 	.word	0x08013933
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	73fb      	strb	r3, [r7, #15]
    break;
 8013924:	e00b      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013926:	2302      	movs	r3, #2
 8013928:	73fb      	strb	r3, [r7, #15]
    break;
 801392a:	e008      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801392c:	2301      	movs	r3, #1
 801392e:	73fb      	strb	r3, [r7, #15]
    break;
 8013930:	e005      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013932:	2302      	movs	r3, #2
 8013934:	73fb      	strb	r3, [r7, #15]
    break;
 8013936:	e002      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013938:	2302      	movs	r3, #2
 801393a:	73fb      	strb	r3, [r7, #15]
    break;
 801393c:	bf00      	nop
  }
  return usb_status;
 801393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3714      	adds	r7, #20
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	4603      	mov	r3, r0
 8013954:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013956:	79fb      	ldrb	r3, [r7, #7]
 8013958:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801395a:	79fb      	ldrb	r3, [r7, #7]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d102      	bne.n	8013966 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8013960:	2300      	movs	r3, #0
 8013962:	73fb      	strb	r3, [r7, #15]
 8013964:	e001      	b.n	801396a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8013966:	2301      	movs	r3, #1
 8013968:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 801396a:	7bfb      	ldrb	r3, [r7, #15]
 801396c:	461a      	mov	r2, r3
 801396e:	2104      	movs	r1, #4
 8013970:	4803      	ldr	r0, [pc, #12]	@ (8013980 <MX_DriverVbusFS+0x34>)
 8013972:	f7f1 fc33 	bl	80051dc <HAL_GPIO_WritePin>
}
 8013976:	bf00      	nop
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	40020400 	.word	0x40020400

08013984 <_ZdlPvj>:
 8013984:	f000 b9bc 	b.w	8013d00 <_ZdlPv>

08013988 <_Znwj>:
 8013988:	2801      	cmp	r0, #1
 801398a:	bf38      	it	cc
 801398c:	2001      	movcc	r0, #1
 801398e:	b510      	push	{r4, lr}
 8013990:	4604      	mov	r4, r0
 8013992:	4620      	mov	r0, r4
 8013994:	f000 f9c6 	bl	8013d24 <malloc>
 8013998:	b100      	cbz	r0, 801399c <_Znwj+0x14>
 801399a:	bd10      	pop	{r4, pc}
 801399c:	f000 f9b2 	bl	8013d04 <_ZSt15get_new_handlerv>
 80139a0:	b908      	cbnz	r0, 80139a6 <_Znwj+0x1e>
 80139a2:	f000 f9b7 	bl	8013d14 <abort>
 80139a6:	4780      	blx	r0
 80139a8:	e7f3      	b.n	8013992 <_Znwj+0xa>

080139aa <_ZNSaIcEC1Ev>:
 80139aa:	4770      	bx	lr

080139ac <_ZNSaIcED1Ev>:
 80139ac:	4770      	bx	lr

080139ae <_ZSt17__throw_bad_allocv>:
 80139ae:	b508      	push	{r3, lr}
 80139b0:	f000 f9b0 	bl	8013d14 <abort>

080139b4 <_ZSt28__throw_bad_array_new_lengthv>:
 80139b4:	b508      	push	{r3, lr}
 80139b6:	f000 f9ad 	bl	8013d14 <abort>

080139ba <_ZSt19__throw_logic_errorPKc>:
 80139ba:	b508      	push	{r3, lr}
 80139bc:	f000 f9aa 	bl	8013d14 <abort>

080139c0 <_ZSt20__throw_length_errorPKc>:
 80139c0:	b508      	push	{r3, lr}
 80139c2:	f000 f9a7 	bl	8013d14 <abort>

080139c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80139c6:	b10a      	cbz	r2, 80139cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80139c8:	f000 bc6b 	b.w	80142a2 <memcpy>
 80139cc:	4770      	bx	lr

080139ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80139ce:	f850 3b08 	ldr.w	r3, [r0], #8
 80139d2:	1a1b      	subs	r3, r3, r0
 80139d4:	4258      	negs	r0, r3
 80139d6:	4158      	adcs	r0, r3
 80139d8:	4770      	bx	lr
	...

080139dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80139dc:	b508      	push	{r3, lr}
 80139de:	680b      	ldr	r3, [r1, #0]
 80139e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80139e4:	d302      	bcc.n	80139ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80139e6:	480d      	ldr	r0, [pc, #52]	@ (8013a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80139e8:	f7ff ffea 	bl	80139c0 <_ZSt20__throw_length_errorPKc>
 80139ec:	4293      	cmp	r3, r2
 80139ee:	d90b      	bls.n	8013a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80139f0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80139f4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80139f8:	d206      	bcs.n	8013a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80139fa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80139fe:	bf2a      	itet	cs
 8013a00:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8013a04:	6008      	strcc	r0, [r1, #0]
 8013a06:	600b      	strcs	r3, [r1, #0]
 8013a08:	6808      	ldr	r0, [r1, #0]
 8013a0a:	3001      	adds	r0, #1
 8013a0c:	d501      	bpl.n	8013a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8013a0e:	f7ff ffce 	bl	80139ae <_ZSt17__throw_bad_allocv>
 8013a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013a16:	f7ff bfb7 	b.w	8013988 <_Znwj>
 8013a1a:	bf00      	nop
 8013a1c:	08014f94 	.word	0x08014f94

08013a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8013a20:	b510      	push	{r4, lr}
 8013a22:	4604      	mov	r4, r0
 8013a24:	f7ff ffd3 	bl	80139ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013a28:	b920      	cbnz	r0, 8013a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8013a2a:	6820      	ldr	r0, [r4, #0]
 8013a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a30:	f000 b966 	b.w	8013d00 <_ZdlPv>
 8013a34:	bd10      	pop	{r4, pc}

08013a36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8013a36:	6840      	ldr	r0, [r0, #4]
 8013a38:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8013a3c:	3901      	subs	r1, #1
 8013a3e:	1a09      	subs	r1, r1, r0
 8013a40:	4291      	cmp	r1, r2
 8013a42:	b508      	push	{r3, lr}
 8013a44:	d202      	bcs.n	8013a4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff ffba 	bl	80139c0 <_ZSt20__throw_length_errorPKc>
 8013a4c:	bd08      	pop	{r3, pc}

08013a4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8013a4e:	6803      	ldr	r3, [r0, #0]
 8013a50:	428b      	cmp	r3, r1
 8013a52:	d806      	bhi.n	8013a62 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8013a54:	6842      	ldr	r2, [r0, #4]
 8013a56:	4413      	add	r3, r2
 8013a58:	4299      	cmp	r1, r3
 8013a5a:	bf94      	ite	ls
 8013a5c:	2000      	movls	r0, #0
 8013a5e:	2001      	movhi	r0, #1
 8013a60:	4770      	bx	lr
 8013a62:	2001      	movs	r0, #1
 8013a64:	4770      	bx	lr

08013a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8013a66:	2a01      	cmp	r2, #1
 8013a68:	b410      	push	{r4}
 8013a6a:	d104      	bne.n	8013a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8013a6c:	780a      	ldrb	r2, [r1, #0]
 8013a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a72:	7002      	strb	r2, [r0, #0]
 8013a74:	4770      	bx	lr
 8013a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a7a:	f7ff bfa4 	b.w	80139c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08013a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8013a7e:	2a01      	cmp	r2, #1
 8013a80:	b430      	push	{r4, r5}
 8013a82:	d103      	bne.n	8013a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8013a84:	780b      	ldrb	r3, [r1, #0]
 8013a86:	7003      	strb	r3, [r0, #0]
 8013a88:	bc30      	pop	{r4, r5}
 8013a8a:	4770      	bx	lr
 8013a8c:	2a00      	cmp	r2, #0
 8013a8e:	d0fb      	beq.n	8013a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8013a90:	bc30      	pop	{r4, r5}
 8013a92:	f000 bb1c 	b.w	80140ce <memmove>

08013a96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8013a96:	b508      	push	{r3, lr}
 8013a98:	1a52      	subs	r2, r2, r1
 8013a9a:	f7ff ffe4 	bl	8013a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013a9e:	bd08      	pop	{r3, pc}

08013aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8013aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aa2:	f100 0708 	add.w	r7, r0, #8
 8013aa6:	6007      	str	r7, [r0, #0]
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	4608      	mov	r0, r1
 8013aac:	460c      	mov	r4, r1
 8013aae:	f7ff ff8e 	bl	80139ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013ab2:	f104 0608 	add.w	r6, r4, #8
 8013ab6:	6862      	ldr	r2, [r4, #4]
 8013ab8:	b160      	cbz	r0, 8013ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8013aba:	3201      	adds	r2, #1
 8013abc:	4631      	mov	r1, r6
 8013abe:	4638      	mov	r0, r7
 8013ac0:	f7ff ff81 	bl	80139c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8013ac4:	6863      	ldr	r3, [r4, #4]
 8013ac6:	606b      	str	r3, [r5, #4]
 8013ac8:	2300      	movs	r3, #0
 8013aca:	7223      	strb	r3, [r4, #8]
 8013acc:	6026      	str	r6, [r4, #0]
 8013ace:	6063      	str	r3, [r4, #4]
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ad4:	6823      	ldr	r3, [r4, #0]
 8013ad6:	602b      	str	r3, [r5, #0]
 8013ad8:	68a3      	ldr	r3, [r4, #8]
 8013ada:	60ab      	str	r3, [r5, #8]
 8013adc:	e7f2      	b.n	8013ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08013ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8013ade:	b510      	push	{r4, lr}
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	f7ff ff9d 	bl	8013a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	bd10      	pop	{r4, pc}

08013aea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8013aea:	b510      	push	{r4, lr}
 8013aec:	4604      	mov	r4, r0
 8013aee:	f7ff ff6e 	bl	80139ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013af2:	b908      	cbnz	r0, 8013af8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8013af4:	68a0      	ldr	r0, [r4, #8]
 8013af6:	bd10      	pop	{r4, pc}
 8013af8:	200f      	movs	r0, #15
 8013afa:	e7fc      	b.n	8013af6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08013afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8013afc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b00:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013b02:	461f      	mov	r7, r3
 8013b04:	6843      	ldr	r3, [r0, #4]
 8013b06:	eb01 0802 	add.w	r8, r1, r2
 8013b0a:	1ab2      	subs	r2, r6, r2
 8013b0c:	441a      	add	r2, r3
 8013b0e:	4604      	mov	r4, r0
 8013b10:	460d      	mov	r5, r1
 8013b12:	eba3 0908 	sub.w	r9, r3, r8
 8013b16:	9201      	str	r2, [sp, #4]
 8013b18:	f7ff ffe7 	bl	8013aea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013b1c:	a901      	add	r1, sp, #4
 8013b1e:	4602      	mov	r2, r0
 8013b20:	4620      	mov	r0, r4
 8013b22:	f7ff ff5b 	bl	80139dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013b26:	4682      	mov	sl, r0
 8013b28:	b11d      	cbz	r5, 8013b32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8013b2a:	6821      	ldr	r1, [r4, #0]
 8013b2c:	462a      	mov	r2, r5
 8013b2e:	f7ff ff9a 	bl	8013a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013b32:	b137      	cbz	r7, 8013b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013b34:	b12e      	cbz	r6, 8013b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013b36:	4632      	mov	r2, r6
 8013b38:	4639      	mov	r1, r7
 8013b3a:	eb0a 0005 	add.w	r0, sl, r5
 8013b3e:	f7ff ff92 	bl	8013a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013b42:	f1b9 0f00 	cmp.w	r9, #0
 8013b46:	d007      	beq.n	8013b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8013b48:	6821      	ldr	r1, [r4, #0]
 8013b4a:	4435      	add	r5, r6
 8013b4c:	464a      	mov	r2, r9
 8013b4e:	4441      	add	r1, r8
 8013b50:	eb0a 0005 	add.w	r0, sl, r5
 8013b54:	f7ff ff87 	bl	8013a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f7ff ff61 	bl	8013a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013b5e:	9b01      	ldr	r3, [sp, #4]
 8013b60:	f8c4 a000 	str.w	sl, [r4]
 8013b64:	60a3      	str	r3, [r4, #8]
 8013b66:	b002      	add	sp, #8
 8013b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013b6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8013b6c:	6802      	ldr	r2, [r0, #0]
 8013b6e:	2300      	movs	r3, #0
 8013b70:	6043      	str	r3, [r0, #4]
 8013b72:	7013      	strb	r3, [r2, #0]
 8013b74:	4770      	bx	lr
	...

08013b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8013b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	b085      	sub	sp, #20
 8013b7e:	4680      	mov	r8, r0
 8013b80:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8013b82:	4614      	mov	r4, r2
 8013b84:	4689      	mov	r9, r1
 8013b86:	462a      	mov	r2, r5
 8013b88:	4621      	mov	r1, r4
 8013b8a:	461f      	mov	r7, r3
 8013b8c:	4b37      	ldr	r3, [pc, #220]	@ (8013c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8013b8e:	f7ff ff52 	bl	8013a36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8013b92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b96:	9303      	str	r3, [sp, #12]
 8013b98:	eba5 0b04 	sub.w	fp, r5, r4
 8013b9c:	4640      	mov	r0, r8
 8013b9e:	eb03 0a0b 	add.w	sl, r3, fp
 8013ba2:	f7ff ffa2 	bl	8013aea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013ba6:	4550      	cmp	r0, sl
 8013ba8:	d354      	bcc.n	8013c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8013baa:	f8d8 6000 	ldr.w	r6, [r8]
 8013bae:	9b03      	ldr	r3, [sp, #12]
 8013bb0:	444e      	add	r6, r9
 8013bb2:	4639      	mov	r1, r7
 8013bb4:	44a1      	add	r9, r4
 8013bb6:	4640      	mov	r0, r8
 8013bb8:	eba3 0909 	sub.w	r9, r3, r9
 8013bbc:	f7ff ff47 	bl	8013a4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8013bc0:	b180      	cbz	r0, 8013be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8013bc2:	f1b9 0f00 	cmp.w	r9, #0
 8013bc6:	d006      	beq.n	8013bd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8013bc8:	42ac      	cmp	r4, r5
 8013bca:	d004      	beq.n	8013bd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8013bcc:	464a      	mov	r2, r9
 8013bce:	1931      	adds	r1, r6, r4
 8013bd0:	1970      	adds	r0, r6, r5
 8013bd2:	f7ff ff54 	bl	8013a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013bd6:	b315      	cbz	r5, 8013c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013bd8:	462a      	mov	r2, r5
 8013bda:	4639      	mov	r1, r7
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7ff ff42 	bl	8013a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013be2:	e01c      	b.n	8013c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013be4:	b135      	cbz	r5, 8013bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8013be6:	42ac      	cmp	r4, r5
 8013be8:	d33c      	bcc.n	8013c64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8013bea:	462a      	mov	r2, r5
 8013bec:	4639      	mov	r1, r7
 8013bee:	4630      	mov	r0, r6
 8013bf0:	f7ff ff45 	bl	8013a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013bf4:	f1b9 0f00 	cmp.w	r9, #0
 8013bf8:	d011      	beq.n	8013c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013bfa:	42ac      	cmp	r4, r5
 8013bfc:	d00f      	beq.n	8013c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013bfe:	464a      	mov	r2, r9
 8013c00:	1931      	adds	r1, r6, r4
 8013c02:	1970      	adds	r0, r6, r5
 8013c04:	f7ff ff3b 	bl	8013a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013c08:	42ac      	cmp	r4, r5
 8013c0a:	d208      	bcs.n	8013c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013c0c:	4434      	add	r4, r6
 8013c0e:	197b      	adds	r3, r7, r5
 8013c10:	429c      	cmp	r4, r3
 8013c12:	d30f      	bcc.n	8013c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8013c14:	462a      	mov	r2, r5
 8013c16:	4639      	mov	r1, r7
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f7ff ff30 	bl	8013a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8013c22:	f8c8 a004 	str.w	sl, [r8, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	4640      	mov	r0, r8
 8013c2a:	f803 200a 	strb.w	r2, [r3, sl]
 8013c2e:	b005      	add	sp, #20
 8013c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c34:	42bc      	cmp	r4, r7
 8013c36:	d803      	bhi.n	8013c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8013c38:	462a      	mov	r2, r5
 8013c3a:	eb07 010b 	add.w	r1, r7, fp
 8013c3e:	e7cd      	b.n	8013bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8013c40:	1be4      	subs	r4, r4, r7
 8013c42:	4622      	mov	r2, r4
 8013c44:	4639      	mov	r1, r7
 8013c46:	4630      	mov	r0, r6
 8013c48:	f7ff ff19 	bl	8013a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013c4c:	1b2a      	subs	r2, r5, r4
 8013c4e:	1971      	adds	r1, r6, r5
 8013c50:	1930      	adds	r0, r6, r4
 8013c52:	e7c4      	b.n	8013bde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8013c54:	9500      	str	r5, [sp, #0]
 8013c56:	463b      	mov	r3, r7
 8013c58:	4622      	mov	r2, r4
 8013c5a:	4649      	mov	r1, r9
 8013c5c:	4640      	mov	r0, r8
 8013c5e:	f7ff ff4d 	bl	8013afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8013c62:	e7dc      	b.n	8013c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8013c64:	f1b9 0f00 	cmp.w	r9, #0
 8013c68:	d0d0      	beq.n	8013c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8013c6a:	e7c8      	b.n	8013bfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8013c6c:	08014fac 	.word	0x08014fac

08013c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8013c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c72:	4604      	mov	r4, r0
 8013c74:	4608      	mov	r0, r1
 8013c76:	460d      	mov	r5, r1
 8013c78:	f7ec fb12 	bl	80002a0 <strlen>
 8013c7c:	9000      	str	r0, [sp, #0]
 8013c7e:	6862      	ldr	r2, [r4, #4]
 8013c80:	462b      	mov	r3, r5
 8013c82:	2100      	movs	r1, #0
 8013c84:	4620      	mov	r0, r4
 8013c86:	f7ff ff77 	bl	8013b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8013c8a:	b003      	add	sp, #12
 8013c8c:	bd30      	pop	{r4, r5, pc}

08013c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8013c8e:	b508      	push	{r3, lr}
 8013c90:	f7ff ffee 	bl	8013c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8013c94:	bd08      	pop	{r3, pc}

08013c96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8013c96:	6800      	ldr	r0, [r0, #0]
 8013c98:	4770      	bx	lr

08013c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8013c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c9c:	1a53      	subs	r3, r2, r1
 8013c9e:	2b0f      	cmp	r3, #15
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	460d      	mov	r5, r1
 8013ca4:	4616      	mov	r6, r2
 8013ca6:	9301      	str	r3, [sp, #4]
 8013ca8:	d906      	bls.n	8013cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8013caa:	2200      	movs	r2, #0
 8013cac:	a901      	add	r1, sp, #4
 8013cae:	f7ff fe95 	bl	80139dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013cb2:	9b01      	ldr	r3, [sp, #4]
 8013cb4:	6020      	str	r0, [r4, #0]
 8013cb6:	60a3      	str	r3, [r4, #8]
 8013cb8:	4632      	mov	r2, r6
 8013cba:	4629      	mov	r1, r5
 8013cbc:	6820      	ldr	r0, [r4, #0]
 8013cbe:	f7ff feea 	bl	8013a96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8013cc2:	9b01      	ldr	r3, [sp, #4]
 8013cc4:	6822      	ldr	r2, [r4, #0]
 8013cc6:	6063      	str	r3, [r4, #4]
 8013cc8:	2100      	movs	r1, #0
 8013cca:	54d1      	strb	r1, [r2, r3]
 8013ccc:	b002      	add	sp, #8
 8013cce:	bd70      	pop	{r4, r5, r6, pc}

08013cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	f100 0308 	add.w	r3, r0, #8
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	6003      	str	r3, [r0, #0]
 8013cda:	460d      	mov	r5, r1
 8013cdc:	b911      	cbnz	r1, 8013ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8013cde:	4807      	ldr	r0, [pc, #28]	@ (8013cfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8013ce0:	f7ff fe6b 	bl	80139ba <_ZSt19__throw_logic_errorPKc>
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	f7ec fadb 	bl	80002a0 <strlen>
 8013cea:	f04f 0300 	mov.w	r3, #0
 8013cee:	182a      	adds	r2, r5, r0
 8013cf0:	4629      	mov	r1, r5
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f7ff ffd1 	bl	8013c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	bd38      	pop	{r3, r4, r5, pc}
 8013cfc:	08014fc5 	.word	0x08014fc5

08013d00 <_ZdlPv>:
 8013d00:	f000 b818 	b.w	8013d34 <free>

08013d04 <_ZSt15get_new_handlerv>:
 8013d04:	4b02      	ldr	r3, [pc, #8]	@ (8013d10 <_ZSt15get_new_handlerv+0xc>)
 8013d06:	6818      	ldr	r0, [r3, #0]
 8013d08:	f3bf 8f5b 	dmb	ish
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	20001008 	.word	0x20001008

08013d14 <abort>:
 8013d14:	b508      	push	{r3, lr}
 8013d16:	2006      	movs	r0, #6
 8013d18:	f000 fa24 	bl	8014164 <raise>
 8013d1c:	2001      	movs	r0, #1
 8013d1e:	f7ef fa65 	bl	80031ec <_exit>
	...

08013d24 <malloc>:
 8013d24:	4b02      	ldr	r3, [pc, #8]	@ (8013d30 <malloc+0xc>)
 8013d26:	4601      	mov	r1, r0
 8013d28:	6818      	ldr	r0, [r3, #0]
 8013d2a:	f000 b82d 	b.w	8013d88 <_malloc_r>
 8013d2e:	bf00      	nop
 8013d30:	20000038 	.word	0x20000038

08013d34 <free>:
 8013d34:	4b02      	ldr	r3, [pc, #8]	@ (8013d40 <free+0xc>)
 8013d36:	4601      	mov	r1, r0
 8013d38:	6818      	ldr	r0, [r3, #0]
 8013d3a:	f000 bac1 	b.w	80142c0 <_free_r>
 8013d3e:	bf00      	nop
 8013d40:	20000038 	.word	0x20000038

08013d44 <sbrk_aligned>:
 8013d44:	b570      	push	{r4, r5, r6, lr}
 8013d46:	4e0f      	ldr	r6, [pc, #60]	@ (8013d84 <sbrk_aligned+0x40>)
 8013d48:	460c      	mov	r4, r1
 8013d4a:	6831      	ldr	r1, [r6, #0]
 8013d4c:	4605      	mov	r5, r0
 8013d4e:	b911      	cbnz	r1, 8013d56 <sbrk_aligned+0x12>
 8013d50:	f000 fa58 	bl	8014204 <_sbrk_r>
 8013d54:	6030      	str	r0, [r6, #0]
 8013d56:	4621      	mov	r1, r4
 8013d58:	4628      	mov	r0, r5
 8013d5a:	f000 fa53 	bl	8014204 <_sbrk_r>
 8013d5e:	1c43      	adds	r3, r0, #1
 8013d60:	d103      	bne.n	8013d6a <sbrk_aligned+0x26>
 8013d62:	f04f 34ff 	mov.w	r4, #4294967295
 8013d66:	4620      	mov	r0, r4
 8013d68:	bd70      	pop	{r4, r5, r6, pc}
 8013d6a:	1cc4      	adds	r4, r0, #3
 8013d6c:	f024 0403 	bic.w	r4, r4, #3
 8013d70:	42a0      	cmp	r0, r4
 8013d72:	d0f8      	beq.n	8013d66 <sbrk_aligned+0x22>
 8013d74:	1a21      	subs	r1, r4, r0
 8013d76:	4628      	mov	r0, r5
 8013d78:	f000 fa44 	bl	8014204 <_sbrk_r>
 8013d7c:	3001      	adds	r0, #1
 8013d7e:	d1f2      	bne.n	8013d66 <sbrk_aligned+0x22>
 8013d80:	e7ef      	b.n	8013d62 <sbrk_aligned+0x1e>
 8013d82:	bf00      	nop
 8013d84:	2000100c 	.word	0x2000100c

08013d88 <_malloc_r>:
 8013d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d8c:	1ccd      	adds	r5, r1, #3
 8013d8e:	f025 0503 	bic.w	r5, r5, #3
 8013d92:	3508      	adds	r5, #8
 8013d94:	2d0c      	cmp	r5, #12
 8013d96:	bf38      	it	cc
 8013d98:	250c      	movcc	r5, #12
 8013d9a:	2d00      	cmp	r5, #0
 8013d9c:	4606      	mov	r6, r0
 8013d9e:	db01      	blt.n	8013da4 <_malloc_r+0x1c>
 8013da0:	42a9      	cmp	r1, r5
 8013da2:	d904      	bls.n	8013dae <_malloc_r+0x26>
 8013da4:	230c      	movs	r3, #12
 8013da6:	6033      	str	r3, [r6, #0]
 8013da8:	2000      	movs	r0, #0
 8013daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013e84 <_malloc_r+0xfc>
 8013db2:	f000 f869 	bl	8013e88 <__malloc_lock>
 8013db6:	f8d8 3000 	ldr.w	r3, [r8]
 8013dba:	461c      	mov	r4, r3
 8013dbc:	bb44      	cbnz	r4, 8013e10 <_malloc_r+0x88>
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f7ff ffbf 	bl	8013d44 <sbrk_aligned>
 8013dc6:	1c43      	adds	r3, r0, #1
 8013dc8:	4604      	mov	r4, r0
 8013dca:	d158      	bne.n	8013e7e <_malloc_r+0xf6>
 8013dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8013dd0:	4627      	mov	r7, r4
 8013dd2:	2f00      	cmp	r7, #0
 8013dd4:	d143      	bne.n	8013e5e <_malloc_r+0xd6>
 8013dd6:	2c00      	cmp	r4, #0
 8013dd8:	d04b      	beq.n	8013e72 <_malloc_r+0xea>
 8013dda:	6823      	ldr	r3, [r4, #0]
 8013ddc:	4639      	mov	r1, r7
 8013dde:	4630      	mov	r0, r6
 8013de0:	eb04 0903 	add.w	r9, r4, r3
 8013de4:	f000 fa0e 	bl	8014204 <_sbrk_r>
 8013de8:	4581      	cmp	r9, r0
 8013dea:	d142      	bne.n	8013e72 <_malloc_r+0xea>
 8013dec:	6821      	ldr	r1, [r4, #0]
 8013dee:	1a6d      	subs	r5, r5, r1
 8013df0:	4629      	mov	r1, r5
 8013df2:	4630      	mov	r0, r6
 8013df4:	f7ff ffa6 	bl	8013d44 <sbrk_aligned>
 8013df8:	3001      	adds	r0, #1
 8013dfa:	d03a      	beq.n	8013e72 <_malloc_r+0xea>
 8013dfc:	6823      	ldr	r3, [r4, #0]
 8013dfe:	442b      	add	r3, r5
 8013e00:	6023      	str	r3, [r4, #0]
 8013e02:	f8d8 3000 	ldr.w	r3, [r8]
 8013e06:	685a      	ldr	r2, [r3, #4]
 8013e08:	bb62      	cbnz	r2, 8013e64 <_malloc_r+0xdc>
 8013e0a:	f8c8 7000 	str.w	r7, [r8]
 8013e0e:	e00f      	b.n	8013e30 <_malloc_r+0xa8>
 8013e10:	6822      	ldr	r2, [r4, #0]
 8013e12:	1b52      	subs	r2, r2, r5
 8013e14:	d420      	bmi.n	8013e58 <_malloc_r+0xd0>
 8013e16:	2a0b      	cmp	r2, #11
 8013e18:	d917      	bls.n	8013e4a <_malloc_r+0xc2>
 8013e1a:	1961      	adds	r1, r4, r5
 8013e1c:	42a3      	cmp	r3, r4
 8013e1e:	6025      	str	r5, [r4, #0]
 8013e20:	bf18      	it	ne
 8013e22:	6059      	strne	r1, [r3, #4]
 8013e24:	6863      	ldr	r3, [r4, #4]
 8013e26:	bf08      	it	eq
 8013e28:	f8c8 1000 	streq.w	r1, [r8]
 8013e2c:	5162      	str	r2, [r4, r5]
 8013e2e:	604b      	str	r3, [r1, #4]
 8013e30:	4630      	mov	r0, r6
 8013e32:	f000 f82f 	bl	8013e94 <__malloc_unlock>
 8013e36:	f104 000b 	add.w	r0, r4, #11
 8013e3a:	1d23      	adds	r3, r4, #4
 8013e3c:	f020 0007 	bic.w	r0, r0, #7
 8013e40:	1ac2      	subs	r2, r0, r3
 8013e42:	bf1c      	itt	ne
 8013e44:	1a1b      	subne	r3, r3, r0
 8013e46:	50a3      	strne	r3, [r4, r2]
 8013e48:	e7af      	b.n	8013daa <_malloc_r+0x22>
 8013e4a:	6862      	ldr	r2, [r4, #4]
 8013e4c:	42a3      	cmp	r3, r4
 8013e4e:	bf0c      	ite	eq
 8013e50:	f8c8 2000 	streq.w	r2, [r8]
 8013e54:	605a      	strne	r2, [r3, #4]
 8013e56:	e7eb      	b.n	8013e30 <_malloc_r+0xa8>
 8013e58:	4623      	mov	r3, r4
 8013e5a:	6864      	ldr	r4, [r4, #4]
 8013e5c:	e7ae      	b.n	8013dbc <_malloc_r+0x34>
 8013e5e:	463c      	mov	r4, r7
 8013e60:	687f      	ldr	r7, [r7, #4]
 8013e62:	e7b6      	b.n	8013dd2 <_malloc_r+0x4a>
 8013e64:	461a      	mov	r2, r3
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	42a3      	cmp	r3, r4
 8013e6a:	d1fb      	bne.n	8013e64 <_malloc_r+0xdc>
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	6053      	str	r3, [r2, #4]
 8013e70:	e7de      	b.n	8013e30 <_malloc_r+0xa8>
 8013e72:	230c      	movs	r3, #12
 8013e74:	6033      	str	r3, [r6, #0]
 8013e76:	4630      	mov	r0, r6
 8013e78:	f000 f80c 	bl	8013e94 <__malloc_unlock>
 8013e7c:	e794      	b.n	8013da8 <_malloc_r+0x20>
 8013e7e:	6005      	str	r5, [r0, #0]
 8013e80:	e7d6      	b.n	8013e30 <_malloc_r+0xa8>
 8013e82:	bf00      	nop
 8013e84:	20001010 	.word	0x20001010

08013e88 <__malloc_lock>:
 8013e88:	4801      	ldr	r0, [pc, #4]	@ (8013e90 <__malloc_lock+0x8>)
 8013e8a:	f000 ba08 	b.w	801429e <__retarget_lock_acquire_recursive>
 8013e8e:	bf00      	nop
 8013e90:	20001154 	.word	0x20001154

08013e94 <__malloc_unlock>:
 8013e94:	4801      	ldr	r0, [pc, #4]	@ (8013e9c <__malloc_unlock+0x8>)
 8013e96:	f000 ba03 	b.w	80142a0 <__retarget_lock_release_recursive>
 8013e9a:	bf00      	nop
 8013e9c:	20001154 	.word	0x20001154

08013ea0 <std>:
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	b510      	push	{r4, lr}
 8013ea4:	4604      	mov	r4, r0
 8013ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8013eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013eae:	6083      	str	r3, [r0, #8]
 8013eb0:	8181      	strh	r1, [r0, #12]
 8013eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8013eb4:	81c2      	strh	r2, [r0, #14]
 8013eb6:	6183      	str	r3, [r0, #24]
 8013eb8:	4619      	mov	r1, r3
 8013eba:	2208      	movs	r2, #8
 8013ebc:	305c      	adds	r0, #92	@ 0x5c
 8013ebe:	f000 f920 	bl	8014102 <memset>
 8013ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8013ef8 <std+0x58>)
 8013ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8013ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8013efc <std+0x5c>)
 8013ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013eca:	4b0d      	ldr	r3, [pc, #52]	@ (8013f00 <std+0x60>)
 8013ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013ece:	4b0d      	ldr	r3, [pc, #52]	@ (8013f04 <std+0x64>)
 8013ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8013ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8013f08 <std+0x68>)
 8013ed4:	6224      	str	r4, [r4, #32]
 8013ed6:	429c      	cmp	r4, r3
 8013ed8:	d006      	beq.n	8013ee8 <std+0x48>
 8013eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013ede:	4294      	cmp	r4, r2
 8013ee0:	d002      	beq.n	8013ee8 <std+0x48>
 8013ee2:	33d0      	adds	r3, #208	@ 0xd0
 8013ee4:	429c      	cmp	r4, r3
 8013ee6:	d105      	bne.n	8013ef4 <std+0x54>
 8013ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ef0:	f000 b9d4 	b.w	801429c <__retarget_lock_init_recursive>
 8013ef4:	bd10      	pop	{r4, pc}
 8013ef6:	bf00      	nop
 8013ef8:	08014049 	.word	0x08014049
 8013efc:	0801406b 	.word	0x0801406b
 8013f00:	080140a3 	.word	0x080140a3
 8013f04:	080140c7 	.word	0x080140c7
 8013f08:	20001014 	.word	0x20001014

08013f0c <stdio_exit_handler>:
 8013f0c:	4a02      	ldr	r2, [pc, #8]	@ (8013f18 <stdio_exit_handler+0xc>)
 8013f0e:	4903      	ldr	r1, [pc, #12]	@ (8013f1c <stdio_exit_handler+0x10>)
 8013f10:	4803      	ldr	r0, [pc, #12]	@ (8013f20 <stdio_exit_handler+0x14>)
 8013f12:	f000 b869 	b.w	8013fe8 <_fwalk_sglue>
 8013f16:	bf00      	nop
 8013f18:	2000002c 	.word	0x2000002c
 8013f1c:	080149fd 	.word	0x080149fd
 8013f20:	2000003c 	.word	0x2000003c

08013f24 <cleanup_stdio>:
 8013f24:	6841      	ldr	r1, [r0, #4]
 8013f26:	4b0c      	ldr	r3, [pc, #48]	@ (8013f58 <cleanup_stdio+0x34>)
 8013f28:	4299      	cmp	r1, r3
 8013f2a:	b510      	push	{r4, lr}
 8013f2c:	4604      	mov	r4, r0
 8013f2e:	d001      	beq.n	8013f34 <cleanup_stdio+0x10>
 8013f30:	f000 fd64 	bl	80149fc <_fflush_r>
 8013f34:	68a1      	ldr	r1, [r4, #8]
 8013f36:	4b09      	ldr	r3, [pc, #36]	@ (8013f5c <cleanup_stdio+0x38>)
 8013f38:	4299      	cmp	r1, r3
 8013f3a:	d002      	beq.n	8013f42 <cleanup_stdio+0x1e>
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f000 fd5d 	bl	80149fc <_fflush_r>
 8013f42:	68e1      	ldr	r1, [r4, #12]
 8013f44:	4b06      	ldr	r3, [pc, #24]	@ (8013f60 <cleanup_stdio+0x3c>)
 8013f46:	4299      	cmp	r1, r3
 8013f48:	d004      	beq.n	8013f54 <cleanup_stdio+0x30>
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f50:	f000 bd54 	b.w	80149fc <_fflush_r>
 8013f54:	bd10      	pop	{r4, pc}
 8013f56:	bf00      	nop
 8013f58:	20001014 	.word	0x20001014
 8013f5c:	2000107c 	.word	0x2000107c
 8013f60:	200010e4 	.word	0x200010e4

08013f64 <global_stdio_init.part.0>:
 8013f64:	b510      	push	{r4, lr}
 8013f66:	4b0b      	ldr	r3, [pc, #44]	@ (8013f94 <global_stdio_init.part.0+0x30>)
 8013f68:	4c0b      	ldr	r4, [pc, #44]	@ (8013f98 <global_stdio_init.part.0+0x34>)
 8013f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8013f9c <global_stdio_init.part.0+0x38>)
 8013f6c:	601a      	str	r2, [r3, #0]
 8013f6e:	4620      	mov	r0, r4
 8013f70:	2200      	movs	r2, #0
 8013f72:	2104      	movs	r1, #4
 8013f74:	f7ff ff94 	bl	8013ea0 <std>
 8013f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	2109      	movs	r1, #9
 8013f80:	f7ff ff8e 	bl	8013ea0 <std>
 8013f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013f88:	2202      	movs	r2, #2
 8013f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f8e:	2112      	movs	r1, #18
 8013f90:	f7ff bf86 	b.w	8013ea0 <std>
 8013f94:	2000114c 	.word	0x2000114c
 8013f98:	20001014 	.word	0x20001014
 8013f9c:	08013f0d 	.word	0x08013f0d

08013fa0 <__sfp_lock_acquire>:
 8013fa0:	4801      	ldr	r0, [pc, #4]	@ (8013fa8 <__sfp_lock_acquire+0x8>)
 8013fa2:	f000 b97c 	b.w	801429e <__retarget_lock_acquire_recursive>
 8013fa6:	bf00      	nop
 8013fa8:	20001155 	.word	0x20001155

08013fac <__sfp_lock_release>:
 8013fac:	4801      	ldr	r0, [pc, #4]	@ (8013fb4 <__sfp_lock_release+0x8>)
 8013fae:	f000 b977 	b.w	80142a0 <__retarget_lock_release_recursive>
 8013fb2:	bf00      	nop
 8013fb4:	20001155 	.word	0x20001155

08013fb8 <__sinit>:
 8013fb8:	b510      	push	{r4, lr}
 8013fba:	4604      	mov	r4, r0
 8013fbc:	f7ff fff0 	bl	8013fa0 <__sfp_lock_acquire>
 8013fc0:	6a23      	ldr	r3, [r4, #32]
 8013fc2:	b11b      	cbz	r3, 8013fcc <__sinit+0x14>
 8013fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fc8:	f7ff bff0 	b.w	8013fac <__sfp_lock_release>
 8013fcc:	4b04      	ldr	r3, [pc, #16]	@ (8013fe0 <__sinit+0x28>)
 8013fce:	6223      	str	r3, [r4, #32]
 8013fd0:	4b04      	ldr	r3, [pc, #16]	@ (8013fe4 <__sinit+0x2c>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d1f5      	bne.n	8013fc4 <__sinit+0xc>
 8013fd8:	f7ff ffc4 	bl	8013f64 <global_stdio_init.part.0>
 8013fdc:	e7f2      	b.n	8013fc4 <__sinit+0xc>
 8013fde:	bf00      	nop
 8013fe0:	08013f25 	.word	0x08013f25
 8013fe4:	2000114c 	.word	0x2000114c

08013fe8 <_fwalk_sglue>:
 8013fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fec:	4607      	mov	r7, r0
 8013fee:	4688      	mov	r8, r1
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	2600      	movs	r6, #0
 8013ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8013ffc:	d505      	bpl.n	801400a <_fwalk_sglue+0x22>
 8013ffe:	6824      	ldr	r4, [r4, #0]
 8014000:	2c00      	cmp	r4, #0
 8014002:	d1f7      	bne.n	8013ff4 <_fwalk_sglue+0xc>
 8014004:	4630      	mov	r0, r6
 8014006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801400a:	89ab      	ldrh	r3, [r5, #12]
 801400c:	2b01      	cmp	r3, #1
 801400e:	d907      	bls.n	8014020 <_fwalk_sglue+0x38>
 8014010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014014:	3301      	adds	r3, #1
 8014016:	d003      	beq.n	8014020 <_fwalk_sglue+0x38>
 8014018:	4629      	mov	r1, r5
 801401a:	4638      	mov	r0, r7
 801401c:	47c0      	blx	r8
 801401e:	4306      	orrs	r6, r0
 8014020:	3568      	adds	r5, #104	@ 0x68
 8014022:	e7e9      	b.n	8013ff8 <_fwalk_sglue+0x10>

08014024 <iprintf>:
 8014024:	b40f      	push	{r0, r1, r2, r3}
 8014026:	b507      	push	{r0, r1, r2, lr}
 8014028:	4906      	ldr	r1, [pc, #24]	@ (8014044 <iprintf+0x20>)
 801402a:	ab04      	add	r3, sp, #16
 801402c:	6808      	ldr	r0, [r1, #0]
 801402e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014032:	6881      	ldr	r1, [r0, #8]
 8014034:	9301      	str	r3, [sp, #4]
 8014036:	f000 f9b7 	bl	80143a8 <_vfiprintf_r>
 801403a:	b003      	add	sp, #12
 801403c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014040:	b004      	add	sp, #16
 8014042:	4770      	bx	lr
 8014044:	20000038 	.word	0x20000038

08014048 <__sread>:
 8014048:	b510      	push	{r4, lr}
 801404a:	460c      	mov	r4, r1
 801404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014050:	f000 f8b2 	bl	80141b8 <_read_r>
 8014054:	2800      	cmp	r0, #0
 8014056:	bfab      	itete	ge
 8014058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801405a:	89a3      	ldrhlt	r3, [r4, #12]
 801405c:	181b      	addge	r3, r3, r0
 801405e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014062:	bfac      	ite	ge
 8014064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014066:	81a3      	strhlt	r3, [r4, #12]
 8014068:	bd10      	pop	{r4, pc}

0801406a <__swrite>:
 801406a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801406e:	461f      	mov	r7, r3
 8014070:	898b      	ldrh	r3, [r1, #12]
 8014072:	05db      	lsls	r3, r3, #23
 8014074:	4605      	mov	r5, r0
 8014076:	460c      	mov	r4, r1
 8014078:	4616      	mov	r6, r2
 801407a:	d505      	bpl.n	8014088 <__swrite+0x1e>
 801407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014080:	2302      	movs	r3, #2
 8014082:	2200      	movs	r2, #0
 8014084:	f000 f886 	bl	8014194 <_lseek_r>
 8014088:	89a3      	ldrh	r3, [r4, #12]
 801408a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801408e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014092:	81a3      	strh	r3, [r4, #12]
 8014094:	4632      	mov	r2, r6
 8014096:	463b      	mov	r3, r7
 8014098:	4628      	mov	r0, r5
 801409a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801409e:	f000 b8c1 	b.w	8014224 <_write_r>

080140a2 <__sseek>:
 80140a2:	b510      	push	{r4, lr}
 80140a4:	460c      	mov	r4, r1
 80140a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140aa:	f000 f873 	bl	8014194 <_lseek_r>
 80140ae:	1c43      	adds	r3, r0, #1
 80140b0:	89a3      	ldrh	r3, [r4, #12]
 80140b2:	bf15      	itete	ne
 80140b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80140b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80140ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80140be:	81a3      	strheq	r3, [r4, #12]
 80140c0:	bf18      	it	ne
 80140c2:	81a3      	strhne	r3, [r4, #12]
 80140c4:	bd10      	pop	{r4, pc}

080140c6 <__sclose>:
 80140c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ca:	f000 b853 	b.w	8014174 <_close_r>

080140ce <memmove>:
 80140ce:	4288      	cmp	r0, r1
 80140d0:	b510      	push	{r4, lr}
 80140d2:	eb01 0402 	add.w	r4, r1, r2
 80140d6:	d902      	bls.n	80140de <memmove+0x10>
 80140d8:	4284      	cmp	r4, r0
 80140da:	4623      	mov	r3, r4
 80140dc:	d807      	bhi.n	80140ee <memmove+0x20>
 80140de:	1e43      	subs	r3, r0, #1
 80140e0:	42a1      	cmp	r1, r4
 80140e2:	d008      	beq.n	80140f6 <memmove+0x28>
 80140e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140ec:	e7f8      	b.n	80140e0 <memmove+0x12>
 80140ee:	4402      	add	r2, r0
 80140f0:	4601      	mov	r1, r0
 80140f2:	428a      	cmp	r2, r1
 80140f4:	d100      	bne.n	80140f8 <memmove+0x2a>
 80140f6:	bd10      	pop	{r4, pc}
 80140f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014100:	e7f7      	b.n	80140f2 <memmove+0x24>

08014102 <memset>:
 8014102:	4402      	add	r2, r0
 8014104:	4603      	mov	r3, r0
 8014106:	4293      	cmp	r3, r2
 8014108:	d100      	bne.n	801410c <memset+0xa>
 801410a:	4770      	bx	lr
 801410c:	f803 1b01 	strb.w	r1, [r3], #1
 8014110:	e7f9      	b.n	8014106 <memset+0x4>

08014112 <_raise_r>:
 8014112:	291f      	cmp	r1, #31
 8014114:	b538      	push	{r3, r4, r5, lr}
 8014116:	4605      	mov	r5, r0
 8014118:	460c      	mov	r4, r1
 801411a:	d904      	bls.n	8014126 <_raise_r+0x14>
 801411c:	2316      	movs	r3, #22
 801411e:	6003      	str	r3, [r0, #0]
 8014120:	f04f 30ff 	mov.w	r0, #4294967295
 8014124:	bd38      	pop	{r3, r4, r5, pc}
 8014126:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014128:	b112      	cbz	r2, 8014130 <_raise_r+0x1e>
 801412a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801412e:	b94b      	cbnz	r3, 8014144 <_raise_r+0x32>
 8014130:	4628      	mov	r0, r5
 8014132:	f000 f865 	bl	8014200 <_getpid_r>
 8014136:	4622      	mov	r2, r4
 8014138:	4601      	mov	r1, r0
 801413a:	4628      	mov	r0, r5
 801413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014140:	f000 b84c 	b.w	80141dc <_kill_r>
 8014144:	2b01      	cmp	r3, #1
 8014146:	d00a      	beq.n	801415e <_raise_r+0x4c>
 8014148:	1c59      	adds	r1, r3, #1
 801414a:	d103      	bne.n	8014154 <_raise_r+0x42>
 801414c:	2316      	movs	r3, #22
 801414e:	6003      	str	r3, [r0, #0]
 8014150:	2001      	movs	r0, #1
 8014152:	e7e7      	b.n	8014124 <_raise_r+0x12>
 8014154:	2100      	movs	r1, #0
 8014156:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801415a:	4620      	mov	r0, r4
 801415c:	4798      	blx	r3
 801415e:	2000      	movs	r0, #0
 8014160:	e7e0      	b.n	8014124 <_raise_r+0x12>
	...

08014164 <raise>:
 8014164:	4b02      	ldr	r3, [pc, #8]	@ (8014170 <raise+0xc>)
 8014166:	4601      	mov	r1, r0
 8014168:	6818      	ldr	r0, [r3, #0]
 801416a:	f7ff bfd2 	b.w	8014112 <_raise_r>
 801416e:	bf00      	nop
 8014170:	20000038 	.word	0x20000038

08014174 <_close_r>:
 8014174:	b538      	push	{r3, r4, r5, lr}
 8014176:	4d06      	ldr	r5, [pc, #24]	@ (8014190 <_close_r+0x1c>)
 8014178:	2300      	movs	r3, #0
 801417a:	4604      	mov	r4, r0
 801417c:	4608      	mov	r0, r1
 801417e:	602b      	str	r3, [r5, #0]
 8014180:	f7ef f85c 	bl	800323c <_close>
 8014184:	1c43      	adds	r3, r0, #1
 8014186:	d102      	bne.n	801418e <_close_r+0x1a>
 8014188:	682b      	ldr	r3, [r5, #0]
 801418a:	b103      	cbz	r3, 801418e <_close_r+0x1a>
 801418c:	6023      	str	r3, [r4, #0]
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	20001150 	.word	0x20001150

08014194 <_lseek_r>:
 8014194:	b538      	push	{r3, r4, r5, lr}
 8014196:	4d07      	ldr	r5, [pc, #28]	@ (80141b4 <_lseek_r+0x20>)
 8014198:	4604      	mov	r4, r0
 801419a:	4608      	mov	r0, r1
 801419c:	4611      	mov	r1, r2
 801419e:	2200      	movs	r2, #0
 80141a0:	602a      	str	r2, [r5, #0]
 80141a2:	461a      	mov	r2, r3
 80141a4:	f7ef f871 	bl	800328a <_lseek>
 80141a8:	1c43      	adds	r3, r0, #1
 80141aa:	d102      	bne.n	80141b2 <_lseek_r+0x1e>
 80141ac:	682b      	ldr	r3, [r5, #0]
 80141ae:	b103      	cbz	r3, 80141b2 <_lseek_r+0x1e>
 80141b0:	6023      	str	r3, [r4, #0]
 80141b2:	bd38      	pop	{r3, r4, r5, pc}
 80141b4:	20001150 	.word	0x20001150

080141b8 <_read_r>:
 80141b8:	b538      	push	{r3, r4, r5, lr}
 80141ba:	4d07      	ldr	r5, [pc, #28]	@ (80141d8 <_read_r+0x20>)
 80141bc:	4604      	mov	r4, r0
 80141be:	4608      	mov	r0, r1
 80141c0:	4611      	mov	r1, r2
 80141c2:	2200      	movs	r2, #0
 80141c4:	602a      	str	r2, [r5, #0]
 80141c6:	461a      	mov	r2, r3
 80141c8:	f7ef f81b 	bl	8003202 <_read>
 80141cc:	1c43      	adds	r3, r0, #1
 80141ce:	d102      	bne.n	80141d6 <_read_r+0x1e>
 80141d0:	682b      	ldr	r3, [r5, #0]
 80141d2:	b103      	cbz	r3, 80141d6 <_read_r+0x1e>
 80141d4:	6023      	str	r3, [r4, #0]
 80141d6:	bd38      	pop	{r3, r4, r5, pc}
 80141d8:	20001150 	.word	0x20001150

080141dc <_kill_r>:
 80141dc:	b538      	push	{r3, r4, r5, lr}
 80141de:	4d07      	ldr	r5, [pc, #28]	@ (80141fc <_kill_r+0x20>)
 80141e0:	2300      	movs	r3, #0
 80141e2:	4604      	mov	r4, r0
 80141e4:	4608      	mov	r0, r1
 80141e6:	4611      	mov	r1, r2
 80141e8:	602b      	str	r3, [r5, #0]
 80141ea:	f7ee ffef 	bl	80031cc <_kill>
 80141ee:	1c43      	adds	r3, r0, #1
 80141f0:	d102      	bne.n	80141f8 <_kill_r+0x1c>
 80141f2:	682b      	ldr	r3, [r5, #0]
 80141f4:	b103      	cbz	r3, 80141f8 <_kill_r+0x1c>
 80141f6:	6023      	str	r3, [r4, #0]
 80141f8:	bd38      	pop	{r3, r4, r5, pc}
 80141fa:	bf00      	nop
 80141fc:	20001150 	.word	0x20001150

08014200 <_getpid_r>:
 8014200:	f7ee bfdc 	b.w	80031bc <_getpid>

08014204 <_sbrk_r>:
 8014204:	b538      	push	{r3, r4, r5, lr}
 8014206:	4d06      	ldr	r5, [pc, #24]	@ (8014220 <_sbrk_r+0x1c>)
 8014208:	2300      	movs	r3, #0
 801420a:	4604      	mov	r4, r0
 801420c:	4608      	mov	r0, r1
 801420e:	602b      	str	r3, [r5, #0]
 8014210:	f7ef f848 	bl	80032a4 <_sbrk>
 8014214:	1c43      	adds	r3, r0, #1
 8014216:	d102      	bne.n	801421e <_sbrk_r+0x1a>
 8014218:	682b      	ldr	r3, [r5, #0]
 801421a:	b103      	cbz	r3, 801421e <_sbrk_r+0x1a>
 801421c:	6023      	str	r3, [r4, #0]
 801421e:	bd38      	pop	{r3, r4, r5, pc}
 8014220:	20001150 	.word	0x20001150

08014224 <_write_r>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	4d07      	ldr	r5, [pc, #28]	@ (8014244 <_write_r+0x20>)
 8014228:	4604      	mov	r4, r0
 801422a:	4608      	mov	r0, r1
 801422c:	4611      	mov	r1, r2
 801422e:	2200      	movs	r2, #0
 8014230:	602a      	str	r2, [r5, #0]
 8014232:	461a      	mov	r2, r3
 8014234:	f7ed fbb4 	bl	80019a0 <_write>
 8014238:	1c43      	adds	r3, r0, #1
 801423a:	d102      	bne.n	8014242 <_write_r+0x1e>
 801423c:	682b      	ldr	r3, [r5, #0]
 801423e:	b103      	cbz	r3, 8014242 <_write_r+0x1e>
 8014240:	6023      	str	r3, [r4, #0]
 8014242:	bd38      	pop	{r3, r4, r5, pc}
 8014244:	20001150 	.word	0x20001150

08014248 <__errno>:
 8014248:	4b01      	ldr	r3, [pc, #4]	@ (8014250 <__errno+0x8>)
 801424a:	6818      	ldr	r0, [r3, #0]
 801424c:	4770      	bx	lr
 801424e:	bf00      	nop
 8014250:	20000038 	.word	0x20000038

08014254 <__libc_init_array>:
 8014254:	b570      	push	{r4, r5, r6, lr}
 8014256:	4d0d      	ldr	r5, [pc, #52]	@ (801428c <__libc_init_array+0x38>)
 8014258:	4c0d      	ldr	r4, [pc, #52]	@ (8014290 <__libc_init_array+0x3c>)
 801425a:	1b64      	subs	r4, r4, r5
 801425c:	10a4      	asrs	r4, r4, #2
 801425e:	2600      	movs	r6, #0
 8014260:	42a6      	cmp	r6, r4
 8014262:	d109      	bne.n	8014278 <__libc_init_array+0x24>
 8014264:	4d0b      	ldr	r5, [pc, #44]	@ (8014294 <__libc_init_array+0x40>)
 8014266:	4c0c      	ldr	r4, [pc, #48]	@ (8014298 <__libc_init_array+0x44>)
 8014268:	f000 fd08 	bl	8014c7c <_init>
 801426c:	1b64      	subs	r4, r4, r5
 801426e:	10a4      	asrs	r4, r4, #2
 8014270:	2600      	movs	r6, #0
 8014272:	42a6      	cmp	r6, r4
 8014274:	d105      	bne.n	8014282 <__libc_init_array+0x2e>
 8014276:	bd70      	pop	{r4, r5, r6, pc}
 8014278:	f855 3b04 	ldr.w	r3, [r5], #4
 801427c:	4798      	blx	r3
 801427e:	3601      	adds	r6, #1
 8014280:	e7ee      	b.n	8014260 <__libc_init_array+0xc>
 8014282:	f855 3b04 	ldr.w	r3, [r5], #4
 8014286:	4798      	blx	r3
 8014288:	3601      	adds	r6, #1
 801428a:	e7f2      	b.n	8014272 <__libc_init_array+0x1e>
 801428c:	08015034 	.word	0x08015034
 8014290:	08015034 	.word	0x08015034
 8014294:	08015034 	.word	0x08015034
 8014298:	08015038 	.word	0x08015038

0801429c <__retarget_lock_init_recursive>:
 801429c:	4770      	bx	lr

0801429e <__retarget_lock_acquire_recursive>:
 801429e:	4770      	bx	lr

080142a0 <__retarget_lock_release_recursive>:
 80142a0:	4770      	bx	lr

080142a2 <memcpy>:
 80142a2:	440a      	add	r2, r1
 80142a4:	4291      	cmp	r1, r2
 80142a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80142aa:	d100      	bne.n	80142ae <memcpy+0xc>
 80142ac:	4770      	bx	lr
 80142ae:	b510      	push	{r4, lr}
 80142b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142b8:	4291      	cmp	r1, r2
 80142ba:	d1f9      	bne.n	80142b0 <memcpy+0xe>
 80142bc:	bd10      	pop	{r4, pc}
	...

080142c0 <_free_r>:
 80142c0:	b538      	push	{r3, r4, r5, lr}
 80142c2:	4605      	mov	r5, r0
 80142c4:	2900      	cmp	r1, #0
 80142c6:	d041      	beq.n	801434c <_free_r+0x8c>
 80142c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142cc:	1f0c      	subs	r4, r1, #4
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	bfb8      	it	lt
 80142d2:	18e4      	addlt	r4, r4, r3
 80142d4:	f7ff fdd8 	bl	8013e88 <__malloc_lock>
 80142d8:	4a1d      	ldr	r2, [pc, #116]	@ (8014350 <_free_r+0x90>)
 80142da:	6813      	ldr	r3, [r2, #0]
 80142dc:	b933      	cbnz	r3, 80142ec <_free_r+0x2c>
 80142de:	6063      	str	r3, [r4, #4]
 80142e0:	6014      	str	r4, [r2, #0]
 80142e2:	4628      	mov	r0, r5
 80142e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142e8:	f7ff bdd4 	b.w	8013e94 <__malloc_unlock>
 80142ec:	42a3      	cmp	r3, r4
 80142ee:	d908      	bls.n	8014302 <_free_r+0x42>
 80142f0:	6820      	ldr	r0, [r4, #0]
 80142f2:	1821      	adds	r1, r4, r0
 80142f4:	428b      	cmp	r3, r1
 80142f6:	bf01      	itttt	eq
 80142f8:	6819      	ldreq	r1, [r3, #0]
 80142fa:	685b      	ldreq	r3, [r3, #4]
 80142fc:	1809      	addeq	r1, r1, r0
 80142fe:	6021      	streq	r1, [r4, #0]
 8014300:	e7ed      	b.n	80142de <_free_r+0x1e>
 8014302:	461a      	mov	r2, r3
 8014304:	685b      	ldr	r3, [r3, #4]
 8014306:	b10b      	cbz	r3, 801430c <_free_r+0x4c>
 8014308:	42a3      	cmp	r3, r4
 801430a:	d9fa      	bls.n	8014302 <_free_r+0x42>
 801430c:	6811      	ldr	r1, [r2, #0]
 801430e:	1850      	adds	r0, r2, r1
 8014310:	42a0      	cmp	r0, r4
 8014312:	d10b      	bne.n	801432c <_free_r+0x6c>
 8014314:	6820      	ldr	r0, [r4, #0]
 8014316:	4401      	add	r1, r0
 8014318:	1850      	adds	r0, r2, r1
 801431a:	4283      	cmp	r3, r0
 801431c:	6011      	str	r1, [r2, #0]
 801431e:	d1e0      	bne.n	80142e2 <_free_r+0x22>
 8014320:	6818      	ldr	r0, [r3, #0]
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	6053      	str	r3, [r2, #4]
 8014326:	4408      	add	r0, r1
 8014328:	6010      	str	r0, [r2, #0]
 801432a:	e7da      	b.n	80142e2 <_free_r+0x22>
 801432c:	d902      	bls.n	8014334 <_free_r+0x74>
 801432e:	230c      	movs	r3, #12
 8014330:	602b      	str	r3, [r5, #0]
 8014332:	e7d6      	b.n	80142e2 <_free_r+0x22>
 8014334:	6820      	ldr	r0, [r4, #0]
 8014336:	1821      	adds	r1, r4, r0
 8014338:	428b      	cmp	r3, r1
 801433a:	bf04      	itt	eq
 801433c:	6819      	ldreq	r1, [r3, #0]
 801433e:	685b      	ldreq	r3, [r3, #4]
 8014340:	6063      	str	r3, [r4, #4]
 8014342:	bf04      	itt	eq
 8014344:	1809      	addeq	r1, r1, r0
 8014346:	6021      	streq	r1, [r4, #0]
 8014348:	6054      	str	r4, [r2, #4]
 801434a:	e7ca      	b.n	80142e2 <_free_r+0x22>
 801434c:	bd38      	pop	{r3, r4, r5, pc}
 801434e:	bf00      	nop
 8014350:	20001010 	.word	0x20001010

08014354 <__sfputc_r>:
 8014354:	6893      	ldr	r3, [r2, #8]
 8014356:	3b01      	subs	r3, #1
 8014358:	2b00      	cmp	r3, #0
 801435a:	b410      	push	{r4}
 801435c:	6093      	str	r3, [r2, #8]
 801435e:	da08      	bge.n	8014372 <__sfputc_r+0x1e>
 8014360:	6994      	ldr	r4, [r2, #24]
 8014362:	42a3      	cmp	r3, r4
 8014364:	db01      	blt.n	801436a <__sfputc_r+0x16>
 8014366:	290a      	cmp	r1, #10
 8014368:	d103      	bne.n	8014372 <__sfputc_r+0x1e>
 801436a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801436e:	f000 bb6d 	b.w	8014a4c <__swbuf_r>
 8014372:	6813      	ldr	r3, [r2, #0]
 8014374:	1c58      	adds	r0, r3, #1
 8014376:	6010      	str	r0, [r2, #0]
 8014378:	7019      	strb	r1, [r3, #0]
 801437a:	4608      	mov	r0, r1
 801437c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014380:	4770      	bx	lr

08014382 <__sfputs_r>:
 8014382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014384:	4606      	mov	r6, r0
 8014386:	460f      	mov	r7, r1
 8014388:	4614      	mov	r4, r2
 801438a:	18d5      	adds	r5, r2, r3
 801438c:	42ac      	cmp	r4, r5
 801438e:	d101      	bne.n	8014394 <__sfputs_r+0x12>
 8014390:	2000      	movs	r0, #0
 8014392:	e007      	b.n	80143a4 <__sfputs_r+0x22>
 8014394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014398:	463a      	mov	r2, r7
 801439a:	4630      	mov	r0, r6
 801439c:	f7ff ffda 	bl	8014354 <__sfputc_r>
 80143a0:	1c43      	adds	r3, r0, #1
 80143a2:	d1f3      	bne.n	801438c <__sfputs_r+0xa>
 80143a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143a8 <_vfiprintf_r>:
 80143a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ac:	460d      	mov	r5, r1
 80143ae:	b09d      	sub	sp, #116	@ 0x74
 80143b0:	4614      	mov	r4, r2
 80143b2:	4698      	mov	r8, r3
 80143b4:	4606      	mov	r6, r0
 80143b6:	b118      	cbz	r0, 80143c0 <_vfiprintf_r+0x18>
 80143b8:	6a03      	ldr	r3, [r0, #32]
 80143ba:	b90b      	cbnz	r3, 80143c0 <_vfiprintf_r+0x18>
 80143bc:	f7ff fdfc 	bl	8013fb8 <__sinit>
 80143c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143c2:	07d9      	lsls	r1, r3, #31
 80143c4:	d405      	bmi.n	80143d2 <_vfiprintf_r+0x2a>
 80143c6:	89ab      	ldrh	r3, [r5, #12]
 80143c8:	059a      	lsls	r2, r3, #22
 80143ca:	d402      	bmi.n	80143d2 <_vfiprintf_r+0x2a>
 80143cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143ce:	f7ff ff66 	bl	801429e <__retarget_lock_acquire_recursive>
 80143d2:	89ab      	ldrh	r3, [r5, #12]
 80143d4:	071b      	lsls	r3, r3, #28
 80143d6:	d501      	bpl.n	80143dc <_vfiprintf_r+0x34>
 80143d8:	692b      	ldr	r3, [r5, #16]
 80143da:	b99b      	cbnz	r3, 8014404 <_vfiprintf_r+0x5c>
 80143dc:	4629      	mov	r1, r5
 80143de:	4630      	mov	r0, r6
 80143e0:	f000 fb72 	bl	8014ac8 <__swsetup_r>
 80143e4:	b170      	cbz	r0, 8014404 <_vfiprintf_r+0x5c>
 80143e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143e8:	07dc      	lsls	r4, r3, #31
 80143ea:	d504      	bpl.n	80143f6 <_vfiprintf_r+0x4e>
 80143ec:	f04f 30ff 	mov.w	r0, #4294967295
 80143f0:	b01d      	add	sp, #116	@ 0x74
 80143f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f6:	89ab      	ldrh	r3, [r5, #12]
 80143f8:	0598      	lsls	r0, r3, #22
 80143fa:	d4f7      	bmi.n	80143ec <_vfiprintf_r+0x44>
 80143fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143fe:	f7ff ff4f 	bl	80142a0 <__retarget_lock_release_recursive>
 8014402:	e7f3      	b.n	80143ec <_vfiprintf_r+0x44>
 8014404:	2300      	movs	r3, #0
 8014406:	9309      	str	r3, [sp, #36]	@ 0x24
 8014408:	2320      	movs	r3, #32
 801440a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801440e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014412:	2330      	movs	r3, #48	@ 0x30
 8014414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80145c4 <_vfiprintf_r+0x21c>
 8014418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801441c:	f04f 0901 	mov.w	r9, #1
 8014420:	4623      	mov	r3, r4
 8014422:	469a      	mov	sl, r3
 8014424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014428:	b10a      	cbz	r2, 801442e <_vfiprintf_r+0x86>
 801442a:	2a25      	cmp	r2, #37	@ 0x25
 801442c:	d1f9      	bne.n	8014422 <_vfiprintf_r+0x7a>
 801442e:	ebba 0b04 	subs.w	fp, sl, r4
 8014432:	d00b      	beq.n	801444c <_vfiprintf_r+0xa4>
 8014434:	465b      	mov	r3, fp
 8014436:	4622      	mov	r2, r4
 8014438:	4629      	mov	r1, r5
 801443a:	4630      	mov	r0, r6
 801443c:	f7ff ffa1 	bl	8014382 <__sfputs_r>
 8014440:	3001      	adds	r0, #1
 8014442:	f000 80a7 	beq.w	8014594 <_vfiprintf_r+0x1ec>
 8014446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014448:	445a      	add	r2, fp
 801444a:	9209      	str	r2, [sp, #36]	@ 0x24
 801444c:	f89a 3000 	ldrb.w	r3, [sl]
 8014450:	2b00      	cmp	r3, #0
 8014452:	f000 809f 	beq.w	8014594 <_vfiprintf_r+0x1ec>
 8014456:	2300      	movs	r3, #0
 8014458:	f04f 32ff 	mov.w	r2, #4294967295
 801445c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014460:	f10a 0a01 	add.w	sl, sl, #1
 8014464:	9304      	str	r3, [sp, #16]
 8014466:	9307      	str	r3, [sp, #28]
 8014468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801446c:	931a      	str	r3, [sp, #104]	@ 0x68
 801446e:	4654      	mov	r4, sl
 8014470:	2205      	movs	r2, #5
 8014472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014476:	4853      	ldr	r0, [pc, #332]	@ (80145c4 <_vfiprintf_r+0x21c>)
 8014478:	f7eb fec2 	bl	8000200 <memchr>
 801447c:	9a04      	ldr	r2, [sp, #16]
 801447e:	b9d8      	cbnz	r0, 80144b8 <_vfiprintf_r+0x110>
 8014480:	06d1      	lsls	r1, r2, #27
 8014482:	bf44      	itt	mi
 8014484:	2320      	movmi	r3, #32
 8014486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801448a:	0713      	lsls	r3, r2, #28
 801448c:	bf44      	itt	mi
 801448e:	232b      	movmi	r3, #43	@ 0x2b
 8014490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014494:	f89a 3000 	ldrb.w	r3, [sl]
 8014498:	2b2a      	cmp	r3, #42	@ 0x2a
 801449a:	d015      	beq.n	80144c8 <_vfiprintf_r+0x120>
 801449c:	9a07      	ldr	r2, [sp, #28]
 801449e:	4654      	mov	r4, sl
 80144a0:	2000      	movs	r0, #0
 80144a2:	f04f 0c0a 	mov.w	ip, #10
 80144a6:	4621      	mov	r1, r4
 80144a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144ac:	3b30      	subs	r3, #48	@ 0x30
 80144ae:	2b09      	cmp	r3, #9
 80144b0:	d94b      	bls.n	801454a <_vfiprintf_r+0x1a2>
 80144b2:	b1b0      	cbz	r0, 80144e2 <_vfiprintf_r+0x13a>
 80144b4:	9207      	str	r2, [sp, #28]
 80144b6:	e014      	b.n	80144e2 <_vfiprintf_r+0x13a>
 80144b8:	eba0 0308 	sub.w	r3, r0, r8
 80144bc:	fa09 f303 	lsl.w	r3, r9, r3
 80144c0:	4313      	orrs	r3, r2
 80144c2:	9304      	str	r3, [sp, #16]
 80144c4:	46a2      	mov	sl, r4
 80144c6:	e7d2      	b.n	801446e <_vfiprintf_r+0xc6>
 80144c8:	9b03      	ldr	r3, [sp, #12]
 80144ca:	1d19      	adds	r1, r3, #4
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	9103      	str	r1, [sp, #12]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	bfbb      	ittet	lt
 80144d4:	425b      	neglt	r3, r3
 80144d6:	f042 0202 	orrlt.w	r2, r2, #2
 80144da:	9307      	strge	r3, [sp, #28]
 80144dc:	9307      	strlt	r3, [sp, #28]
 80144de:	bfb8      	it	lt
 80144e0:	9204      	strlt	r2, [sp, #16]
 80144e2:	7823      	ldrb	r3, [r4, #0]
 80144e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80144e6:	d10a      	bne.n	80144fe <_vfiprintf_r+0x156>
 80144e8:	7863      	ldrb	r3, [r4, #1]
 80144ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80144ec:	d132      	bne.n	8014554 <_vfiprintf_r+0x1ac>
 80144ee:	9b03      	ldr	r3, [sp, #12]
 80144f0:	1d1a      	adds	r2, r3, #4
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	9203      	str	r2, [sp, #12]
 80144f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80144fa:	3402      	adds	r4, #2
 80144fc:	9305      	str	r3, [sp, #20]
 80144fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80145d4 <_vfiprintf_r+0x22c>
 8014502:	7821      	ldrb	r1, [r4, #0]
 8014504:	2203      	movs	r2, #3
 8014506:	4650      	mov	r0, sl
 8014508:	f7eb fe7a 	bl	8000200 <memchr>
 801450c:	b138      	cbz	r0, 801451e <_vfiprintf_r+0x176>
 801450e:	9b04      	ldr	r3, [sp, #16]
 8014510:	eba0 000a 	sub.w	r0, r0, sl
 8014514:	2240      	movs	r2, #64	@ 0x40
 8014516:	4082      	lsls	r2, r0
 8014518:	4313      	orrs	r3, r2
 801451a:	3401      	adds	r4, #1
 801451c:	9304      	str	r3, [sp, #16]
 801451e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014522:	4829      	ldr	r0, [pc, #164]	@ (80145c8 <_vfiprintf_r+0x220>)
 8014524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014528:	2206      	movs	r2, #6
 801452a:	f7eb fe69 	bl	8000200 <memchr>
 801452e:	2800      	cmp	r0, #0
 8014530:	d03f      	beq.n	80145b2 <_vfiprintf_r+0x20a>
 8014532:	4b26      	ldr	r3, [pc, #152]	@ (80145cc <_vfiprintf_r+0x224>)
 8014534:	bb1b      	cbnz	r3, 801457e <_vfiprintf_r+0x1d6>
 8014536:	9b03      	ldr	r3, [sp, #12]
 8014538:	3307      	adds	r3, #7
 801453a:	f023 0307 	bic.w	r3, r3, #7
 801453e:	3308      	adds	r3, #8
 8014540:	9303      	str	r3, [sp, #12]
 8014542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014544:	443b      	add	r3, r7
 8014546:	9309      	str	r3, [sp, #36]	@ 0x24
 8014548:	e76a      	b.n	8014420 <_vfiprintf_r+0x78>
 801454a:	fb0c 3202 	mla	r2, ip, r2, r3
 801454e:	460c      	mov	r4, r1
 8014550:	2001      	movs	r0, #1
 8014552:	e7a8      	b.n	80144a6 <_vfiprintf_r+0xfe>
 8014554:	2300      	movs	r3, #0
 8014556:	3401      	adds	r4, #1
 8014558:	9305      	str	r3, [sp, #20]
 801455a:	4619      	mov	r1, r3
 801455c:	f04f 0c0a 	mov.w	ip, #10
 8014560:	4620      	mov	r0, r4
 8014562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014566:	3a30      	subs	r2, #48	@ 0x30
 8014568:	2a09      	cmp	r2, #9
 801456a:	d903      	bls.n	8014574 <_vfiprintf_r+0x1cc>
 801456c:	2b00      	cmp	r3, #0
 801456e:	d0c6      	beq.n	80144fe <_vfiprintf_r+0x156>
 8014570:	9105      	str	r1, [sp, #20]
 8014572:	e7c4      	b.n	80144fe <_vfiprintf_r+0x156>
 8014574:	fb0c 2101 	mla	r1, ip, r1, r2
 8014578:	4604      	mov	r4, r0
 801457a:	2301      	movs	r3, #1
 801457c:	e7f0      	b.n	8014560 <_vfiprintf_r+0x1b8>
 801457e:	ab03      	add	r3, sp, #12
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	462a      	mov	r2, r5
 8014584:	4b12      	ldr	r3, [pc, #72]	@ (80145d0 <_vfiprintf_r+0x228>)
 8014586:	a904      	add	r1, sp, #16
 8014588:	4630      	mov	r0, r6
 801458a:	f3af 8000 	nop.w
 801458e:	4607      	mov	r7, r0
 8014590:	1c78      	adds	r0, r7, #1
 8014592:	d1d6      	bne.n	8014542 <_vfiprintf_r+0x19a>
 8014594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014596:	07d9      	lsls	r1, r3, #31
 8014598:	d405      	bmi.n	80145a6 <_vfiprintf_r+0x1fe>
 801459a:	89ab      	ldrh	r3, [r5, #12]
 801459c:	059a      	lsls	r2, r3, #22
 801459e:	d402      	bmi.n	80145a6 <_vfiprintf_r+0x1fe>
 80145a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145a2:	f7ff fe7d 	bl	80142a0 <__retarget_lock_release_recursive>
 80145a6:	89ab      	ldrh	r3, [r5, #12]
 80145a8:	065b      	lsls	r3, r3, #25
 80145aa:	f53f af1f 	bmi.w	80143ec <_vfiprintf_r+0x44>
 80145ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145b0:	e71e      	b.n	80143f0 <_vfiprintf_r+0x48>
 80145b2:	ab03      	add	r3, sp, #12
 80145b4:	9300      	str	r3, [sp, #0]
 80145b6:	462a      	mov	r2, r5
 80145b8:	4b05      	ldr	r3, [pc, #20]	@ (80145d0 <_vfiprintf_r+0x228>)
 80145ba:	a904      	add	r1, sp, #16
 80145bc:	4630      	mov	r0, r6
 80145be:	f000 f879 	bl	80146b4 <_printf_i>
 80145c2:	e7e4      	b.n	801458e <_vfiprintf_r+0x1e6>
 80145c4:	08014ff7 	.word	0x08014ff7
 80145c8:	08015001 	.word	0x08015001
 80145cc:	00000000 	.word	0x00000000
 80145d0:	08014383 	.word	0x08014383
 80145d4:	08014ffd 	.word	0x08014ffd

080145d8 <_printf_common>:
 80145d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145dc:	4616      	mov	r6, r2
 80145de:	4698      	mov	r8, r3
 80145e0:	688a      	ldr	r2, [r1, #8]
 80145e2:	690b      	ldr	r3, [r1, #16]
 80145e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80145e8:	4293      	cmp	r3, r2
 80145ea:	bfb8      	it	lt
 80145ec:	4613      	movlt	r3, r2
 80145ee:	6033      	str	r3, [r6, #0]
 80145f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80145f4:	4607      	mov	r7, r0
 80145f6:	460c      	mov	r4, r1
 80145f8:	b10a      	cbz	r2, 80145fe <_printf_common+0x26>
 80145fa:	3301      	adds	r3, #1
 80145fc:	6033      	str	r3, [r6, #0]
 80145fe:	6823      	ldr	r3, [r4, #0]
 8014600:	0699      	lsls	r1, r3, #26
 8014602:	bf42      	ittt	mi
 8014604:	6833      	ldrmi	r3, [r6, #0]
 8014606:	3302      	addmi	r3, #2
 8014608:	6033      	strmi	r3, [r6, #0]
 801460a:	6825      	ldr	r5, [r4, #0]
 801460c:	f015 0506 	ands.w	r5, r5, #6
 8014610:	d106      	bne.n	8014620 <_printf_common+0x48>
 8014612:	f104 0a19 	add.w	sl, r4, #25
 8014616:	68e3      	ldr	r3, [r4, #12]
 8014618:	6832      	ldr	r2, [r6, #0]
 801461a:	1a9b      	subs	r3, r3, r2
 801461c:	42ab      	cmp	r3, r5
 801461e:	dc26      	bgt.n	801466e <_printf_common+0x96>
 8014620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014624:	6822      	ldr	r2, [r4, #0]
 8014626:	3b00      	subs	r3, #0
 8014628:	bf18      	it	ne
 801462a:	2301      	movne	r3, #1
 801462c:	0692      	lsls	r2, r2, #26
 801462e:	d42b      	bmi.n	8014688 <_printf_common+0xb0>
 8014630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014634:	4641      	mov	r1, r8
 8014636:	4638      	mov	r0, r7
 8014638:	47c8      	blx	r9
 801463a:	3001      	adds	r0, #1
 801463c:	d01e      	beq.n	801467c <_printf_common+0xa4>
 801463e:	6823      	ldr	r3, [r4, #0]
 8014640:	6922      	ldr	r2, [r4, #16]
 8014642:	f003 0306 	and.w	r3, r3, #6
 8014646:	2b04      	cmp	r3, #4
 8014648:	bf02      	ittt	eq
 801464a:	68e5      	ldreq	r5, [r4, #12]
 801464c:	6833      	ldreq	r3, [r6, #0]
 801464e:	1aed      	subeq	r5, r5, r3
 8014650:	68a3      	ldr	r3, [r4, #8]
 8014652:	bf0c      	ite	eq
 8014654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014658:	2500      	movne	r5, #0
 801465a:	4293      	cmp	r3, r2
 801465c:	bfc4      	itt	gt
 801465e:	1a9b      	subgt	r3, r3, r2
 8014660:	18ed      	addgt	r5, r5, r3
 8014662:	2600      	movs	r6, #0
 8014664:	341a      	adds	r4, #26
 8014666:	42b5      	cmp	r5, r6
 8014668:	d11a      	bne.n	80146a0 <_printf_common+0xc8>
 801466a:	2000      	movs	r0, #0
 801466c:	e008      	b.n	8014680 <_printf_common+0xa8>
 801466e:	2301      	movs	r3, #1
 8014670:	4652      	mov	r2, sl
 8014672:	4641      	mov	r1, r8
 8014674:	4638      	mov	r0, r7
 8014676:	47c8      	blx	r9
 8014678:	3001      	adds	r0, #1
 801467a:	d103      	bne.n	8014684 <_printf_common+0xac>
 801467c:	f04f 30ff 	mov.w	r0, #4294967295
 8014680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014684:	3501      	adds	r5, #1
 8014686:	e7c6      	b.n	8014616 <_printf_common+0x3e>
 8014688:	18e1      	adds	r1, r4, r3
 801468a:	1c5a      	adds	r2, r3, #1
 801468c:	2030      	movs	r0, #48	@ 0x30
 801468e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014692:	4422      	add	r2, r4
 8014694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801469c:	3302      	adds	r3, #2
 801469e:	e7c7      	b.n	8014630 <_printf_common+0x58>
 80146a0:	2301      	movs	r3, #1
 80146a2:	4622      	mov	r2, r4
 80146a4:	4641      	mov	r1, r8
 80146a6:	4638      	mov	r0, r7
 80146a8:	47c8      	blx	r9
 80146aa:	3001      	adds	r0, #1
 80146ac:	d0e6      	beq.n	801467c <_printf_common+0xa4>
 80146ae:	3601      	adds	r6, #1
 80146b0:	e7d9      	b.n	8014666 <_printf_common+0x8e>
	...

080146b4 <_printf_i>:
 80146b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146b8:	7e0f      	ldrb	r7, [r1, #24]
 80146ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80146bc:	2f78      	cmp	r7, #120	@ 0x78
 80146be:	4691      	mov	r9, r2
 80146c0:	4680      	mov	r8, r0
 80146c2:	460c      	mov	r4, r1
 80146c4:	469a      	mov	sl, r3
 80146c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80146ca:	d807      	bhi.n	80146dc <_printf_i+0x28>
 80146cc:	2f62      	cmp	r7, #98	@ 0x62
 80146ce:	d80a      	bhi.n	80146e6 <_printf_i+0x32>
 80146d0:	2f00      	cmp	r7, #0
 80146d2:	f000 80d2 	beq.w	801487a <_printf_i+0x1c6>
 80146d6:	2f58      	cmp	r7, #88	@ 0x58
 80146d8:	f000 80b9 	beq.w	801484e <_printf_i+0x19a>
 80146dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80146e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80146e4:	e03a      	b.n	801475c <_printf_i+0xa8>
 80146e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80146ea:	2b15      	cmp	r3, #21
 80146ec:	d8f6      	bhi.n	80146dc <_printf_i+0x28>
 80146ee:	a101      	add	r1, pc, #4	@ (adr r1, 80146f4 <_printf_i+0x40>)
 80146f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80146f4:	0801474d 	.word	0x0801474d
 80146f8:	08014761 	.word	0x08014761
 80146fc:	080146dd 	.word	0x080146dd
 8014700:	080146dd 	.word	0x080146dd
 8014704:	080146dd 	.word	0x080146dd
 8014708:	080146dd 	.word	0x080146dd
 801470c:	08014761 	.word	0x08014761
 8014710:	080146dd 	.word	0x080146dd
 8014714:	080146dd 	.word	0x080146dd
 8014718:	080146dd 	.word	0x080146dd
 801471c:	080146dd 	.word	0x080146dd
 8014720:	08014861 	.word	0x08014861
 8014724:	0801478b 	.word	0x0801478b
 8014728:	0801481b 	.word	0x0801481b
 801472c:	080146dd 	.word	0x080146dd
 8014730:	080146dd 	.word	0x080146dd
 8014734:	08014883 	.word	0x08014883
 8014738:	080146dd 	.word	0x080146dd
 801473c:	0801478b 	.word	0x0801478b
 8014740:	080146dd 	.word	0x080146dd
 8014744:	080146dd 	.word	0x080146dd
 8014748:	08014823 	.word	0x08014823
 801474c:	6833      	ldr	r3, [r6, #0]
 801474e:	1d1a      	adds	r2, r3, #4
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	6032      	str	r2, [r6, #0]
 8014754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801475c:	2301      	movs	r3, #1
 801475e:	e09d      	b.n	801489c <_printf_i+0x1e8>
 8014760:	6833      	ldr	r3, [r6, #0]
 8014762:	6820      	ldr	r0, [r4, #0]
 8014764:	1d19      	adds	r1, r3, #4
 8014766:	6031      	str	r1, [r6, #0]
 8014768:	0606      	lsls	r6, r0, #24
 801476a:	d501      	bpl.n	8014770 <_printf_i+0xbc>
 801476c:	681d      	ldr	r5, [r3, #0]
 801476e:	e003      	b.n	8014778 <_printf_i+0xc4>
 8014770:	0645      	lsls	r5, r0, #25
 8014772:	d5fb      	bpl.n	801476c <_printf_i+0xb8>
 8014774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014778:	2d00      	cmp	r5, #0
 801477a:	da03      	bge.n	8014784 <_printf_i+0xd0>
 801477c:	232d      	movs	r3, #45	@ 0x2d
 801477e:	426d      	negs	r5, r5
 8014780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014784:	4859      	ldr	r0, [pc, #356]	@ (80148ec <_printf_i+0x238>)
 8014786:	230a      	movs	r3, #10
 8014788:	e011      	b.n	80147ae <_printf_i+0xfa>
 801478a:	6821      	ldr	r1, [r4, #0]
 801478c:	6833      	ldr	r3, [r6, #0]
 801478e:	0608      	lsls	r0, r1, #24
 8014790:	f853 5b04 	ldr.w	r5, [r3], #4
 8014794:	d402      	bmi.n	801479c <_printf_i+0xe8>
 8014796:	0649      	lsls	r1, r1, #25
 8014798:	bf48      	it	mi
 801479a:	b2ad      	uxthmi	r5, r5
 801479c:	2f6f      	cmp	r7, #111	@ 0x6f
 801479e:	4853      	ldr	r0, [pc, #332]	@ (80148ec <_printf_i+0x238>)
 80147a0:	6033      	str	r3, [r6, #0]
 80147a2:	bf14      	ite	ne
 80147a4:	230a      	movne	r3, #10
 80147a6:	2308      	moveq	r3, #8
 80147a8:	2100      	movs	r1, #0
 80147aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80147ae:	6866      	ldr	r6, [r4, #4]
 80147b0:	60a6      	str	r6, [r4, #8]
 80147b2:	2e00      	cmp	r6, #0
 80147b4:	bfa2      	ittt	ge
 80147b6:	6821      	ldrge	r1, [r4, #0]
 80147b8:	f021 0104 	bicge.w	r1, r1, #4
 80147bc:	6021      	strge	r1, [r4, #0]
 80147be:	b90d      	cbnz	r5, 80147c4 <_printf_i+0x110>
 80147c0:	2e00      	cmp	r6, #0
 80147c2:	d04b      	beq.n	801485c <_printf_i+0x1a8>
 80147c4:	4616      	mov	r6, r2
 80147c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80147ca:	fb03 5711 	mls	r7, r3, r1, r5
 80147ce:	5dc7      	ldrb	r7, [r0, r7]
 80147d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80147d4:	462f      	mov	r7, r5
 80147d6:	42bb      	cmp	r3, r7
 80147d8:	460d      	mov	r5, r1
 80147da:	d9f4      	bls.n	80147c6 <_printf_i+0x112>
 80147dc:	2b08      	cmp	r3, #8
 80147de:	d10b      	bne.n	80147f8 <_printf_i+0x144>
 80147e0:	6823      	ldr	r3, [r4, #0]
 80147e2:	07df      	lsls	r7, r3, #31
 80147e4:	d508      	bpl.n	80147f8 <_printf_i+0x144>
 80147e6:	6923      	ldr	r3, [r4, #16]
 80147e8:	6861      	ldr	r1, [r4, #4]
 80147ea:	4299      	cmp	r1, r3
 80147ec:	bfde      	ittt	le
 80147ee:	2330      	movle	r3, #48	@ 0x30
 80147f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80147f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80147f8:	1b92      	subs	r2, r2, r6
 80147fa:	6122      	str	r2, [r4, #16]
 80147fc:	f8cd a000 	str.w	sl, [sp]
 8014800:	464b      	mov	r3, r9
 8014802:	aa03      	add	r2, sp, #12
 8014804:	4621      	mov	r1, r4
 8014806:	4640      	mov	r0, r8
 8014808:	f7ff fee6 	bl	80145d8 <_printf_common>
 801480c:	3001      	adds	r0, #1
 801480e:	d14a      	bne.n	80148a6 <_printf_i+0x1f2>
 8014810:	f04f 30ff 	mov.w	r0, #4294967295
 8014814:	b004      	add	sp, #16
 8014816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801481a:	6823      	ldr	r3, [r4, #0]
 801481c:	f043 0320 	orr.w	r3, r3, #32
 8014820:	6023      	str	r3, [r4, #0]
 8014822:	4833      	ldr	r0, [pc, #204]	@ (80148f0 <_printf_i+0x23c>)
 8014824:	2778      	movs	r7, #120	@ 0x78
 8014826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	6831      	ldr	r1, [r6, #0]
 801482e:	061f      	lsls	r7, r3, #24
 8014830:	f851 5b04 	ldr.w	r5, [r1], #4
 8014834:	d402      	bmi.n	801483c <_printf_i+0x188>
 8014836:	065f      	lsls	r7, r3, #25
 8014838:	bf48      	it	mi
 801483a:	b2ad      	uxthmi	r5, r5
 801483c:	6031      	str	r1, [r6, #0]
 801483e:	07d9      	lsls	r1, r3, #31
 8014840:	bf44      	itt	mi
 8014842:	f043 0320 	orrmi.w	r3, r3, #32
 8014846:	6023      	strmi	r3, [r4, #0]
 8014848:	b11d      	cbz	r5, 8014852 <_printf_i+0x19e>
 801484a:	2310      	movs	r3, #16
 801484c:	e7ac      	b.n	80147a8 <_printf_i+0xf4>
 801484e:	4827      	ldr	r0, [pc, #156]	@ (80148ec <_printf_i+0x238>)
 8014850:	e7e9      	b.n	8014826 <_printf_i+0x172>
 8014852:	6823      	ldr	r3, [r4, #0]
 8014854:	f023 0320 	bic.w	r3, r3, #32
 8014858:	6023      	str	r3, [r4, #0]
 801485a:	e7f6      	b.n	801484a <_printf_i+0x196>
 801485c:	4616      	mov	r6, r2
 801485e:	e7bd      	b.n	80147dc <_printf_i+0x128>
 8014860:	6833      	ldr	r3, [r6, #0]
 8014862:	6825      	ldr	r5, [r4, #0]
 8014864:	6961      	ldr	r1, [r4, #20]
 8014866:	1d18      	adds	r0, r3, #4
 8014868:	6030      	str	r0, [r6, #0]
 801486a:	062e      	lsls	r6, r5, #24
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	d501      	bpl.n	8014874 <_printf_i+0x1c0>
 8014870:	6019      	str	r1, [r3, #0]
 8014872:	e002      	b.n	801487a <_printf_i+0x1c6>
 8014874:	0668      	lsls	r0, r5, #25
 8014876:	d5fb      	bpl.n	8014870 <_printf_i+0x1bc>
 8014878:	8019      	strh	r1, [r3, #0]
 801487a:	2300      	movs	r3, #0
 801487c:	6123      	str	r3, [r4, #16]
 801487e:	4616      	mov	r6, r2
 8014880:	e7bc      	b.n	80147fc <_printf_i+0x148>
 8014882:	6833      	ldr	r3, [r6, #0]
 8014884:	1d1a      	adds	r2, r3, #4
 8014886:	6032      	str	r2, [r6, #0]
 8014888:	681e      	ldr	r6, [r3, #0]
 801488a:	6862      	ldr	r2, [r4, #4]
 801488c:	2100      	movs	r1, #0
 801488e:	4630      	mov	r0, r6
 8014890:	f7eb fcb6 	bl	8000200 <memchr>
 8014894:	b108      	cbz	r0, 801489a <_printf_i+0x1e6>
 8014896:	1b80      	subs	r0, r0, r6
 8014898:	6060      	str	r0, [r4, #4]
 801489a:	6863      	ldr	r3, [r4, #4]
 801489c:	6123      	str	r3, [r4, #16]
 801489e:	2300      	movs	r3, #0
 80148a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148a4:	e7aa      	b.n	80147fc <_printf_i+0x148>
 80148a6:	6923      	ldr	r3, [r4, #16]
 80148a8:	4632      	mov	r2, r6
 80148aa:	4649      	mov	r1, r9
 80148ac:	4640      	mov	r0, r8
 80148ae:	47d0      	blx	sl
 80148b0:	3001      	adds	r0, #1
 80148b2:	d0ad      	beq.n	8014810 <_printf_i+0x15c>
 80148b4:	6823      	ldr	r3, [r4, #0]
 80148b6:	079b      	lsls	r3, r3, #30
 80148b8:	d413      	bmi.n	80148e2 <_printf_i+0x22e>
 80148ba:	68e0      	ldr	r0, [r4, #12]
 80148bc:	9b03      	ldr	r3, [sp, #12]
 80148be:	4298      	cmp	r0, r3
 80148c0:	bfb8      	it	lt
 80148c2:	4618      	movlt	r0, r3
 80148c4:	e7a6      	b.n	8014814 <_printf_i+0x160>
 80148c6:	2301      	movs	r3, #1
 80148c8:	4632      	mov	r2, r6
 80148ca:	4649      	mov	r1, r9
 80148cc:	4640      	mov	r0, r8
 80148ce:	47d0      	blx	sl
 80148d0:	3001      	adds	r0, #1
 80148d2:	d09d      	beq.n	8014810 <_printf_i+0x15c>
 80148d4:	3501      	adds	r5, #1
 80148d6:	68e3      	ldr	r3, [r4, #12]
 80148d8:	9903      	ldr	r1, [sp, #12]
 80148da:	1a5b      	subs	r3, r3, r1
 80148dc:	42ab      	cmp	r3, r5
 80148de:	dcf2      	bgt.n	80148c6 <_printf_i+0x212>
 80148e0:	e7eb      	b.n	80148ba <_printf_i+0x206>
 80148e2:	2500      	movs	r5, #0
 80148e4:	f104 0619 	add.w	r6, r4, #25
 80148e8:	e7f5      	b.n	80148d6 <_printf_i+0x222>
 80148ea:	bf00      	nop
 80148ec:	08015008 	.word	0x08015008
 80148f0:	08015019 	.word	0x08015019

080148f4 <__sflush_r>:
 80148f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80148f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148fc:	0716      	lsls	r6, r2, #28
 80148fe:	4605      	mov	r5, r0
 8014900:	460c      	mov	r4, r1
 8014902:	d454      	bmi.n	80149ae <__sflush_r+0xba>
 8014904:	684b      	ldr	r3, [r1, #4]
 8014906:	2b00      	cmp	r3, #0
 8014908:	dc02      	bgt.n	8014910 <__sflush_r+0x1c>
 801490a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801490c:	2b00      	cmp	r3, #0
 801490e:	dd48      	ble.n	80149a2 <__sflush_r+0xae>
 8014910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014912:	2e00      	cmp	r6, #0
 8014914:	d045      	beq.n	80149a2 <__sflush_r+0xae>
 8014916:	2300      	movs	r3, #0
 8014918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801491c:	682f      	ldr	r7, [r5, #0]
 801491e:	6a21      	ldr	r1, [r4, #32]
 8014920:	602b      	str	r3, [r5, #0]
 8014922:	d030      	beq.n	8014986 <__sflush_r+0x92>
 8014924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014926:	89a3      	ldrh	r3, [r4, #12]
 8014928:	0759      	lsls	r1, r3, #29
 801492a:	d505      	bpl.n	8014938 <__sflush_r+0x44>
 801492c:	6863      	ldr	r3, [r4, #4]
 801492e:	1ad2      	subs	r2, r2, r3
 8014930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014932:	b10b      	cbz	r3, 8014938 <__sflush_r+0x44>
 8014934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014936:	1ad2      	subs	r2, r2, r3
 8014938:	2300      	movs	r3, #0
 801493a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801493c:	6a21      	ldr	r1, [r4, #32]
 801493e:	4628      	mov	r0, r5
 8014940:	47b0      	blx	r6
 8014942:	1c43      	adds	r3, r0, #1
 8014944:	89a3      	ldrh	r3, [r4, #12]
 8014946:	d106      	bne.n	8014956 <__sflush_r+0x62>
 8014948:	6829      	ldr	r1, [r5, #0]
 801494a:	291d      	cmp	r1, #29
 801494c:	d82b      	bhi.n	80149a6 <__sflush_r+0xb2>
 801494e:	4a2a      	ldr	r2, [pc, #168]	@ (80149f8 <__sflush_r+0x104>)
 8014950:	410a      	asrs	r2, r1
 8014952:	07d6      	lsls	r6, r2, #31
 8014954:	d427      	bmi.n	80149a6 <__sflush_r+0xb2>
 8014956:	2200      	movs	r2, #0
 8014958:	6062      	str	r2, [r4, #4]
 801495a:	04d9      	lsls	r1, r3, #19
 801495c:	6922      	ldr	r2, [r4, #16]
 801495e:	6022      	str	r2, [r4, #0]
 8014960:	d504      	bpl.n	801496c <__sflush_r+0x78>
 8014962:	1c42      	adds	r2, r0, #1
 8014964:	d101      	bne.n	801496a <__sflush_r+0x76>
 8014966:	682b      	ldr	r3, [r5, #0]
 8014968:	b903      	cbnz	r3, 801496c <__sflush_r+0x78>
 801496a:	6560      	str	r0, [r4, #84]	@ 0x54
 801496c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801496e:	602f      	str	r7, [r5, #0]
 8014970:	b1b9      	cbz	r1, 80149a2 <__sflush_r+0xae>
 8014972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014976:	4299      	cmp	r1, r3
 8014978:	d002      	beq.n	8014980 <__sflush_r+0x8c>
 801497a:	4628      	mov	r0, r5
 801497c:	f7ff fca0 	bl	80142c0 <_free_r>
 8014980:	2300      	movs	r3, #0
 8014982:	6363      	str	r3, [r4, #52]	@ 0x34
 8014984:	e00d      	b.n	80149a2 <__sflush_r+0xae>
 8014986:	2301      	movs	r3, #1
 8014988:	4628      	mov	r0, r5
 801498a:	47b0      	blx	r6
 801498c:	4602      	mov	r2, r0
 801498e:	1c50      	adds	r0, r2, #1
 8014990:	d1c9      	bne.n	8014926 <__sflush_r+0x32>
 8014992:	682b      	ldr	r3, [r5, #0]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d0c6      	beq.n	8014926 <__sflush_r+0x32>
 8014998:	2b1d      	cmp	r3, #29
 801499a:	d001      	beq.n	80149a0 <__sflush_r+0xac>
 801499c:	2b16      	cmp	r3, #22
 801499e:	d11e      	bne.n	80149de <__sflush_r+0xea>
 80149a0:	602f      	str	r7, [r5, #0]
 80149a2:	2000      	movs	r0, #0
 80149a4:	e022      	b.n	80149ec <__sflush_r+0xf8>
 80149a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149aa:	b21b      	sxth	r3, r3
 80149ac:	e01b      	b.n	80149e6 <__sflush_r+0xf2>
 80149ae:	690f      	ldr	r7, [r1, #16]
 80149b0:	2f00      	cmp	r7, #0
 80149b2:	d0f6      	beq.n	80149a2 <__sflush_r+0xae>
 80149b4:	0793      	lsls	r3, r2, #30
 80149b6:	680e      	ldr	r6, [r1, #0]
 80149b8:	bf08      	it	eq
 80149ba:	694b      	ldreq	r3, [r1, #20]
 80149bc:	600f      	str	r7, [r1, #0]
 80149be:	bf18      	it	ne
 80149c0:	2300      	movne	r3, #0
 80149c2:	eba6 0807 	sub.w	r8, r6, r7
 80149c6:	608b      	str	r3, [r1, #8]
 80149c8:	f1b8 0f00 	cmp.w	r8, #0
 80149cc:	dde9      	ble.n	80149a2 <__sflush_r+0xae>
 80149ce:	6a21      	ldr	r1, [r4, #32]
 80149d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80149d2:	4643      	mov	r3, r8
 80149d4:	463a      	mov	r2, r7
 80149d6:	4628      	mov	r0, r5
 80149d8:	47b0      	blx	r6
 80149da:	2800      	cmp	r0, #0
 80149dc:	dc08      	bgt.n	80149f0 <__sflush_r+0xfc>
 80149de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149e6:	81a3      	strh	r3, [r4, #12]
 80149e8:	f04f 30ff 	mov.w	r0, #4294967295
 80149ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149f0:	4407      	add	r7, r0
 80149f2:	eba8 0800 	sub.w	r8, r8, r0
 80149f6:	e7e7      	b.n	80149c8 <__sflush_r+0xd4>
 80149f8:	dfbffffe 	.word	0xdfbffffe

080149fc <_fflush_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	690b      	ldr	r3, [r1, #16]
 8014a00:	4605      	mov	r5, r0
 8014a02:	460c      	mov	r4, r1
 8014a04:	b913      	cbnz	r3, 8014a0c <_fflush_r+0x10>
 8014a06:	2500      	movs	r5, #0
 8014a08:	4628      	mov	r0, r5
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
 8014a0c:	b118      	cbz	r0, 8014a16 <_fflush_r+0x1a>
 8014a0e:	6a03      	ldr	r3, [r0, #32]
 8014a10:	b90b      	cbnz	r3, 8014a16 <_fflush_r+0x1a>
 8014a12:	f7ff fad1 	bl	8013fb8 <__sinit>
 8014a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d0f3      	beq.n	8014a06 <_fflush_r+0xa>
 8014a1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a20:	07d0      	lsls	r0, r2, #31
 8014a22:	d404      	bmi.n	8014a2e <_fflush_r+0x32>
 8014a24:	0599      	lsls	r1, r3, #22
 8014a26:	d402      	bmi.n	8014a2e <_fflush_r+0x32>
 8014a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a2a:	f7ff fc38 	bl	801429e <__retarget_lock_acquire_recursive>
 8014a2e:	4628      	mov	r0, r5
 8014a30:	4621      	mov	r1, r4
 8014a32:	f7ff ff5f 	bl	80148f4 <__sflush_r>
 8014a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a38:	07da      	lsls	r2, r3, #31
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	d4e4      	bmi.n	8014a08 <_fflush_r+0xc>
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	059b      	lsls	r3, r3, #22
 8014a42:	d4e1      	bmi.n	8014a08 <_fflush_r+0xc>
 8014a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a46:	f7ff fc2b 	bl	80142a0 <__retarget_lock_release_recursive>
 8014a4a:	e7dd      	b.n	8014a08 <_fflush_r+0xc>

08014a4c <__swbuf_r>:
 8014a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4e:	460e      	mov	r6, r1
 8014a50:	4614      	mov	r4, r2
 8014a52:	4605      	mov	r5, r0
 8014a54:	b118      	cbz	r0, 8014a5e <__swbuf_r+0x12>
 8014a56:	6a03      	ldr	r3, [r0, #32]
 8014a58:	b90b      	cbnz	r3, 8014a5e <__swbuf_r+0x12>
 8014a5a:	f7ff faad 	bl	8013fb8 <__sinit>
 8014a5e:	69a3      	ldr	r3, [r4, #24]
 8014a60:	60a3      	str	r3, [r4, #8]
 8014a62:	89a3      	ldrh	r3, [r4, #12]
 8014a64:	071a      	lsls	r2, r3, #28
 8014a66:	d501      	bpl.n	8014a6c <__swbuf_r+0x20>
 8014a68:	6923      	ldr	r3, [r4, #16]
 8014a6a:	b943      	cbnz	r3, 8014a7e <__swbuf_r+0x32>
 8014a6c:	4621      	mov	r1, r4
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f000 f82a 	bl	8014ac8 <__swsetup_r>
 8014a74:	b118      	cbz	r0, 8014a7e <__swbuf_r+0x32>
 8014a76:	f04f 37ff 	mov.w	r7, #4294967295
 8014a7a:	4638      	mov	r0, r7
 8014a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a7e:	6823      	ldr	r3, [r4, #0]
 8014a80:	6922      	ldr	r2, [r4, #16]
 8014a82:	1a98      	subs	r0, r3, r2
 8014a84:	6963      	ldr	r3, [r4, #20]
 8014a86:	b2f6      	uxtb	r6, r6
 8014a88:	4283      	cmp	r3, r0
 8014a8a:	4637      	mov	r7, r6
 8014a8c:	dc05      	bgt.n	8014a9a <__swbuf_r+0x4e>
 8014a8e:	4621      	mov	r1, r4
 8014a90:	4628      	mov	r0, r5
 8014a92:	f7ff ffb3 	bl	80149fc <_fflush_r>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d1ed      	bne.n	8014a76 <__swbuf_r+0x2a>
 8014a9a:	68a3      	ldr	r3, [r4, #8]
 8014a9c:	3b01      	subs	r3, #1
 8014a9e:	60a3      	str	r3, [r4, #8]
 8014aa0:	6823      	ldr	r3, [r4, #0]
 8014aa2:	1c5a      	adds	r2, r3, #1
 8014aa4:	6022      	str	r2, [r4, #0]
 8014aa6:	701e      	strb	r6, [r3, #0]
 8014aa8:	6962      	ldr	r2, [r4, #20]
 8014aaa:	1c43      	adds	r3, r0, #1
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d004      	beq.n	8014aba <__swbuf_r+0x6e>
 8014ab0:	89a3      	ldrh	r3, [r4, #12]
 8014ab2:	07db      	lsls	r3, r3, #31
 8014ab4:	d5e1      	bpl.n	8014a7a <__swbuf_r+0x2e>
 8014ab6:	2e0a      	cmp	r6, #10
 8014ab8:	d1df      	bne.n	8014a7a <__swbuf_r+0x2e>
 8014aba:	4621      	mov	r1, r4
 8014abc:	4628      	mov	r0, r5
 8014abe:	f7ff ff9d 	bl	80149fc <_fflush_r>
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d0d9      	beq.n	8014a7a <__swbuf_r+0x2e>
 8014ac6:	e7d6      	b.n	8014a76 <__swbuf_r+0x2a>

08014ac8 <__swsetup_r>:
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	4b29      	ldr	r3, [pc, #164]	@ (8014b70 <__swsetup_r+0xa8>)
 8014acc:	4605      	mov	r5, r0
 8014ace:	6818      	ldr	r0, [r3, #0]
 8014ad0:	460c      	mov	r4, r1
 8014ad2:	b118      	cbz	r0, 8014adc <__swsetup_r+0x14>
 8014ad4:	6a03      	ldr	r3, [r0, #32]
 8014ad6:	b90b      	cbnz	r3, 8014adc <__swsetup_r+0x14>
 8014ad8:	f7ff fa6e 	bl	8013fb8 <__sinit>
 8014adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ae0:	0719      	lsls	r1, r3, #28
 8014ae2:	d422      	bmi.n	8014b2a <__swsetup_r+0x62>
 8014ae4:	06da      	lsls	r2, r3, #27
 8014ae6:	d407      	bmi.n	8014af8 <__swsetup_r+0x30>
 8014ae8:	2209      	movs	r2, #9
 8014aea:	602a      	str	r2, [r5, #0]
 8014aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014af0:	81a3      	strh	r3, [r4, #12]
 8014af2:	f04f 30ff 	mov.w	r0, #4294967295
 8014af6:	e033      	b.n	8014b60 <__swsetup_r+0x98>
 8014af8:	0758      	lsls	r0, r3, #29
 8014afa:	d512      	bpl.n	8014b22 <__swsetup_r+0x5a>
 8014afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014afe:	b141      	cbz	r1, 8014b12 <__swsetup_r+0x4a>
 8014b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b04:	4299      	cmp	r1, r3
 8014b06:	d002      	beq.n	8014b0e <__swsetup_r+0x46>
 8014b08:	4628      	mov	r0, r5
 8014b0a:	f7ff fbd9 	bl	80142c0 <_free_r>
 8014b0e:	2300      	movs	r3, #0
 8014b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b12:	89a3      	ldrh	r3, [r4, #12]
 8014b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b18:	81a3      	strh	r3, [r4, #12]
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	6063      	str	r3, [r4, #4]
 8014b1e:	6923      	ldr	r3, [r4, #16]
 8014b20:	6023      	str	r3, [r4, #0]
 8014b22:	89a3      	ldrh	r3, [r4, #12]
 8014b24:	f043 0308 	orr.w	r3, r3, #8
 8014b28:	81a3      	strh	r3, [r4, #12]
 8014b2a:	6923      	ldr	r3, [r4, #16]
 8014b2c:	b94b      	cbnz	r3, 8014b42 <__swsetup_r+0x7a>
 8014b2e:	89a3      	ldrh	r3, [r4, #12]
 8014b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b38:	d003      	beq.n	8014b42 <__swsetup_r+0x7a>
 8014b3a:	4621      	mov	r1, r4
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	f000 f83f 	bl	8014bc0 <__smakebuf_r>
 8014b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b46:	f013 0201 	ands.w	r2, r3, #1
 8014b4a:	d00a      	beq.n	8014b62 <__swsetup_r+0x9a>
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	60a2      	str	r2, [r4, #8]
 8014b50:	6962      	ldr	r2, [r4, #20]
 8014b52:	4252      	negs	r2, r2
 8014b54:	61a2      	str	r2, [r4, #24]
 8014b56:	6922      	ldr	r2, [r4, #16]
 8014b58:	b942      	cbnz	r2, 8014b6c <__swsetup_r+0xa4>
 8014b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014b5e:	d1c5      	bne.n	8014aec <__swsetup_r+0x24>
 8014b60:	bd38      	pop	{r3, r4, r5, pc}
 8014b62:	0799      	lsls	r1, r3, #30
 8014b64:	bf58      	it	pl
 8014b66:	6962      	ldrpl	r2, [r4, #20]
 8014b68:	60a2      	str	r2, [r4, #8]
 8014b6a:	e7f4      	b.n	8014b56 <__swsetup_r+0x8e>
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	e7f7      	b.n	8014b60 <__swsetup_r+0x98>
 8014b70:	20000038 	.word	0x20000038

08014b74 <__swhatbuf_r>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	460c      	mov	r4, r1
 8014b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b7c:	2900      	cmp	r1, #0
 8014b7e:	b096      	sub	sp, #88	@ 0x58
 8014b80:	4615      	mov	r5, r2
 8014b82:	461e      	mov	r6, r3
 8014b84:	da0d      	bge.n	8014ba2 <__swhatbuf_r+0x2e>
 8014b86:	89a3      	ldrh	r3, [r4, #12]
 8014b88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014b8c:	f04f 0100 	mov.w	r1, #0
 8014b90:	bf14      	ite	ne
 8014b92:	2340      	movne	r3, #64	@ 0x40
 8014b94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014b98:	2000      	movs	r0, #0
 8014b9a:	6031      	str	r1, [r6, #0]
 8014b9c:	602b      	str	r3, [r5, #0]
 8014b9e:	b016      	add	sp, #88	@ 0x58
 8014ba0:	bd70      	pop	{r4, r5, r6, pc}
 8014ba2:	466a      	mov	r2, sp
 8014ba4:	f000 f848 	bl	8014c38 <_fstat_r>
 8014ba8:	2800      	cmp	r0, #0
 8014baa:	dbec      	blt.n	8014b86 <__swhatbuf_r+0x12>
 8014bac:	9901      	ldr	r1, [sp, #4]
 8014bae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014bb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014bb6:	4259      	negs	r1, r3
 8014bb8:	4159      	adcs	r1, r3
 8014bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014bbe:	e7eb      	b.n	8014b98 <__swhatbuf_r+0x24>

08014bc0 <__smakebuf_r>:
 8014bc0:	898b      	ldrh	r3, [r1, #12]
 8014bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014bc4:	079d      	lsls	r5, r3, #30
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	460c      	mov	r4, r1
 8014bca:	d507      	bpl.n	8014bdc <__smakebuf_r+0x1c>
 8014bcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014bd0:	6023      	str	r3, [r4, #0]
 8014bd2:	6123      	str	r3, [r4, #16]
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	6163      	str	r3, [r4, #20]
 8014bd8:	b003      	add	sp, #12
 8014bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bdc:	ab01      	add	r3, sp, #4
 8014bde:	466a      	mov	r2, sp
 8014be0:	f7ff ffc8 	bl	8014b74 <__swhatbuf_r>
 8014be4:	9f00      	ldr	r7, [sp, #0]
 8014be6:	4605      	mov	r5, r0
 8014be8:	4639      	mov	r1, r7
 8014bea:	4630      	mov	r0, r6
 8014bec:	f7ff f8cc 	bl	8013d88 <_malloc_r>
 8014bf0:	b948      	cbnz	r0, 8014c06 <__smakebuf_r+0x46>
 8014bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bf6:	059a      	lsls	r2, r3, #22
 8014bf8:	d4ee      	bmi.n	8014bd8 <__smakebuf_r+0x18>
 8014bfa:	f023 0303 	bic.w	r3, r3, #3
 8014bfe:	f043 0302 	orr.w	r3, r3, #2
 8014c02:	81a3      	strh	r3, [r4, #12]
 8014c04:	e7e2      	b.n	8014bcc <__smakebuf_r+0xc>
 8014c06:	89a3      	ldrh	r3, [r4, #12]
 8014c08:	6020      	str	r0, [r4, #0]
 8014c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c0e:	81a3      	strh	r3, [r4, #12]
 8014c10:	9b01      	ldr	r3, [sp, #4]
 8014c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014c16:	b15b      	cbz	r3, 8014c30 <__smakebuf_r+0x70>
 8014c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f000 f81d 	bl	8014c5c <_isatty_r>
 8014c22:	b128      	cbz	r0, 8014c30 <__smakebuf_r+0x70>
 8014c24:	89a3      	ldrh	r3, [r4, #12]
 8014c26:	f023 0303 	bic.w	r3, r3, #3
 8014c2a:	f043 0301 	orr.w	r3, r3, #1
 8014c2e:	81a3      	strh	r3, [r4, #12]
 8014c30:	89a3      	ldrh	r3, [r4, #12]
 8014c32:	431d      	orrs	r5, r3
 8014c34:	81a5      	strh	r5, [r4, #12]
 8014c36:	e7cf      	b.n	8014bd8 <__smakebuf_r+0x18>

08014c38 <_fstat_r>:
 8014c38:	b538      	push	{r3, r4, r5, lr}
 8014c3a:	4d07      	ldr	r5, [pc, #28]	@ (8014c58 <_fstat_r+0x20>)
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	4604      	mov	r4, r0
 8014c40:	4608      	mov	r0, r1
 8014c42:	4611      	mov	r1, r2
 8014c44:	602b      	str	r3, [r5, #0]
 8014c46:	f7ee fb05 	bl	8003254 <_fstat>
 8014c4a:	1c43      	adds	r3, r0, #1
 8014c4c:	d102      	bne.n	8014c54 <_fstat_r+0x1c>
 8014c4e:	682b      	ldr	r3, [r5, #0]
 8014c50:	b103      	cbz	r3, 8014c54 <_fstat_r+0x1c>
 8014c52:	6023      	str	r3, [r4, #0]
 8014c54:	bd38      	pop	{r3, r4, r5, pc}
 8014c56:	bf00      	nop
 8014c58:	20001150 	.word	0x20001150

08014c5c <_isatty_r>:
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	4d06      	ldr	r5, [pc, #24]	@ (8014c78 <_isatty_r+0x1c>)
 8014c60:	2300      	movs	r3, #0
 8014c62:	4604      	mov	r4, r0
 8014c64:	4608      	mov	r0, r1
 8014c66:	602b      	str	r3, [r5, #0]
 8014c68:	f7ee fb04 	bl	8003274 <_isatty>
 8014c6c:	1c43      	adds	r3, r0, #1
 8014c6e:	d102      	bne.n	8014c76 <_isatty_r+0x1a>
 8014c70:	682b      	ldr	r3, [r5, #0]
 8014c72:	b103      	cbz	r3, 8014c76 <_isatty_r+0x1a>
 8014c74:	6023      	str	r3, [r4, #0]
 8014c76:	bd38      	pop	{r3, r4, r5, pc}
 8014c78:	20001150 	.word	0x20001150

08014c7c <_init>:
 8014c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7e:	bf00      	nop
 8014c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c82:	bc08      	pop	{r3}
 8014c84:	469e      	mov	lr, r3
 8014c86:	4770      	bx	lr

08014c88 <_fini>:
 8014c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8a:	bf00      	nop
 8014c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c8e:	bc08      	pop	{r3}
 8014c90:	469e      	mov	lr, r3
 8014c92:	4770      	bx	lr
